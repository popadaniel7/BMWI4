/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Inter Integrated Circuit       *
* 		  External Eeprom Driver         *
******************************************/
/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "I2cExtEeprom.h"
#include "math.h"
#include "string.h"
#include "stdint.h"
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		DEFINES					 		 *
******************************************/
#define I2C_EXTEEPROM_ADDR 			0xA0
#define I2C_EXTEEPROM_PAGE_SIZE 	64
#define I2C_EXTEEPROM_PAGE_NUM  	512
/*****************************************
* 		END OF DEFINES					 *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
STATIC uint8 I2cExtEeprom_BytesTemp[4];
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Function declaration for initialization. */
VOID I2cExtEeprom_Init();
/* Function declaration for de-initialization. */
VOID I2cExtEeprom_DeInit();
/* Function declaration for the main function. */
VOID I2cExtEeprom_MainFunction();
/* Function declaration for writing into memory. */
VOID I2cExtEeprom_Write (uint16 page, uint16 offset, uint8 *data, uint16 size);
/* Function declaration for reading from memory. */
VOID I2cExtEeprom_Read (uint16 page, uint16 offset, uint8 *data, uint16 size);
/* Function declaration for erasing a page from memory. */
VOID I2cExtEeprom_PageErase (uint16 page);
STATIC uint16 I2cExtEeprom_BytesToWrite (uint16 size, uint16 offset);
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/

uint16_t I2cExtEeprom_BytesToWrite (uint16_t size, uint16_t offset)
{
	if((size + offset) < PAGE_SIZE)
	{
		return size;
	}
	else
	{
		return PAGE_SIZE - offset;
	}
}

VOID I2cExtEeprom_Init()
{

}

VOID I2cExtEeprom_DeInit()
{

}

VOID I2cExtEeprom_MainFunction()
{

}

VOID I2cExtEeprom_Write (uint16 page, uint16 offset, uint8 *data, uint16 size)
{

	uint32 paddrposition = log(PAGE_SIZE)/log(2);
	uint16_t startPage = page;
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);


	uint16_t numofpages = (endPage-startPage) + 1;
	uint16_t pos=0;

	// write the data
	for (int i=0; i<numofpages; i++)
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written

		HAL_I2C_Mem_Write_IT(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining);  // write the data to the EEPROM
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
		startPage += 1;  // increment the page, so that a new page address can be selected for further write
		offset=0;   // since we will be writing to a new page, so offset will be 0
		size = size-bytesremaining;  // reduce the size of the bytes
		pos += bytesremaining;  // update the position for the data buffer

		//HAL_Delay (5);  // Write cycle delay (5ms)
	}
}

VOID I2cExtEeprom_Read (uint16 page, uint16 offset, uint8 *data, uint16 size)
{

}

VOID I2cExtEeprom_PageErase (uint16 page)
{

}
