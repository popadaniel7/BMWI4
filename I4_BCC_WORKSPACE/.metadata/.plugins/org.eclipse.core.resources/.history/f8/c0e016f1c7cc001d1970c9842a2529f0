#include "Rte.h"
#include "TimH.h"
#include "UartH.h"
#include "SpiH.h"
#include "AdcH.h"
#include "WatchdogManager.h"
#include "EcuM.h"
#include "SystemManager.h"

Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32 Channel);
StdReturnType Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
StdReturnType Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(TIM_HandleTypeDef *htim);
StdReturnType Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim);
StdReturnType Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim);
StdReturnType Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState);
StdReturnType Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length);
StdReturnType Rte_Call_SysTick_R_SysTickPort_HAL_GetTick();
StdReturnType Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(osTimerId_t timer_id, uint32_t ticks);
StdReturnType Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(osTimerId_t timer_id);
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag(uint32* data);
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag(uint32* data);
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag(uint32* data);
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag(uint8* data);
StdReturnType Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag(uint8* data);
StdReturnType Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag(uint8* data);
StdReturnType Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(uint8* data);
StdReturnType Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data);
StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_CurrentState(uint8* data);
StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_PreviousState(uint8* data);
StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(uint8* data);
StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_BlinkState(uint8* data);
StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(uint8* data);
StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag(uint8* data);
StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag(uint8* data);
StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag(uint8* data);
StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_PreviousStateFlag(uint8* data);
StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(uint8* data);
StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(uint8* data);
StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(uint8* data);
StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(uint8* data);
StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(uint8* data);
StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(uint8* data);
StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(uint8* data);
StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(uint8* data);
StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(uint8* data);
StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(uint8* data);
StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_RTS_PrevState(uint8* data);
StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_LTS_PrevState(uint8* data);
StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_HL_PrevState(uint8* data);
StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_RTSFlag(uint32* data);
StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_LTSFlag(uint32* data);
StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_HLFlag(uint32* data);
StdReturnType Rte_Read_IntLights_IntLightsPort_IntLights_CurrentState(uint8* data);
StdReturnType Rte_Read_IntLights_IntLightsPort_IntLights_StateFlag(uint8* data);
StdReturnType Rte_Read_SecAlm_SecAlmPort_SecAlm_Trigger(uint8* data);
StdReturnType Rte_Read_SecAlm_SecAlmPort_SecAlm_PinStateChange(uint8* data);
StdReturnType Rte_Read_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(uint8* data);
StdReturnType Rte_Read_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(uint16* data);
StdReturnType Rte_Read_SecAlm_SecAlmPort_SecAlm_SensorStatus(uint16* data);
StdReturnType Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data);
StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(uint8* data);
StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_PreviousState(uint8* data);
StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(uint8* data);
StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkState(uint8* data);
StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(uint8* data);
StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag(uint8* data);
StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag(uint8* data);
StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag(uint8* data);
StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_PreviousStateFlag(uint8* data);
StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(uint8* data);
StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(uint8* data);
StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(uint8* data);
StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(uint8* data);
StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(uint8* data);
StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(uint8* data);
StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(uint8* data);
StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(uint8* data);
StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(uint8* data);
StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(uint8* data);
StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTS_PrevState(uint32* data);
StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTS_PrevState(uint32* data);
StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HL_PrevState(uint32* data);
StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(uint32* data);
StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(uint32* data);
StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(uint32* data);
StdReturnType Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(uint8* data);
StdReturnType Rte_Write_IntLights_IntLightsPort_IntLights_StateFlag(uint8* data);
StdReturnType Rte_Write_SecAlm_SecAlmPort_SecAlm_Trigger(uint8* data);
StdReturnType Rte_Write_SecAlm_SecAlmPort_SecAlm_PinStateChange(uint8* data);
StdReturnType Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(uint8* data);
StdReturnType Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(uint16* data);
StdReturnType Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatus(uint16* data);
StdReturnType Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(uint32* data, uint8 position);
StdReturnType Rte_Write_Btc_BtcPort_Btc_RxData(uint8* data);
StdReturnType Rte_Write_Btc_BtcPort_Btc_RxCount(uint8* data);
StdReturnType Rte_Write_Btc_BtcPort_Btc_DataBuffer(uint8* data, uint8 position);

void Rte_Runnable_Btc_MainFunction();
void Rte_Runnable_CenLoc_MainFunction();
void Rte_Runnable_ExtLights_MainFunction();
void Rte_Runnable_IntLights_MainFunction();
void Rte_Runnable_SecAlm_MainFunction();
void Rte_Runnable_Uart_MainFunction();
void Rte_Runnable_Adc_MainFunction();
void Rte_Runnable_Spi_MainFunction();
void Rte_Runnable_Tim_MainFunction();
void Rte_Runnable_Crc_MainFunction();
void Rte_Runnable_Wdg_MainFunction();
void Rte_Runnable_EcuM_MainFunction();
void Rte_Runnable_SystemManager_MainFunction();

void Rte_Runnable_EcuM_MainFunction()
{

	EcuM_MainFunction();

}

void Rte_Runnable_SystemManager_MainFunction()
{

	SystemManager_MainFunction();

}

void Rte_Runnable_Crc_MainFunction()
{

	Crc_MainFunction();

}

void Rte_Runnable_Wdg_MainFunction()
{

	Wdg_MainFunction();

}

void Rte_Runnable_Adc_MainFunction()
{

	Adc_MainFunction();

}

void Rte_Runnable_Spi_MainFunction()
{

	//Spi_MainFunction();

}

void Rte_Runnable_Tim_MainFunction()
{

	Tim_MainFunction();

}

void Rte_Runnable_Uart_MainFunction()
{

	Uart_MainFunction();

	HAL_TIM_PWM_Start_IT(htim, Channel);

}

StdReturnType Rte_Write_Btc_BtcPort_Btc_RxData(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	Btc_RxData = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_Btc_BtcPort_Btc_RxCount(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	Btc_RxCount = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_Btc_BtcPort_Btc_DataBuffer(uint8* data, uint8 position)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	Btc_DataBuffer[position] = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(uint32* data, uint8 position)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	 *data = Adc_ChannelOne_Buffer[position];

	return RTE_E_OK;

}

StdReturnType Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	Btc_ReceivedDataOnBluetooth = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	CenLoc_CurrentState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_PreviousState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	CenLoc_PreviousState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	CenLoc_FollowMeHomeState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	CenLoc_BlinkState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	CenLoc_Tim2IRQFlag = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	CenLoc_Tim3IRQFlag = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	CenLoc_Tim5IRQFlag = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	CenLoc_Tim11IRQFlag = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_PreviousStateFlag(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	CenLoc_PreviousStateFlag = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	ExtLights_ReverseLight_CurrentState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	ExtLights_FlashHighBeam_CurrentState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	ExtLights_BrakeLight_CurrentState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	ExtLights_LightsSwitch_CurrentState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	ExtLights_HighBeam_CurrentState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	ExtLights_FrontFogLight_CurrentState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	ExtLights_TurnSignalLeft_CurrentState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	ExtLights_TurnSignalRight_CurrentState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	ExtLights_HazardLight_CurrentState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	ExtLights_RearFogLight_CurrentState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTS_PrevState(uint32* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	ExtLights_RTS_PrevState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTS_PrevState(uint32* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	ExtLights_LTS_PrevState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HL_PrevState(uint32* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	ExtLights_HL_PrevState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(uint32* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	ExtLights_RTSFlag = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(uint32* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	ExtLights_LTSFlag = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(uint32* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	ExtLights_HLFlag = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	IntLights_CurrentState = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_IntLights_IntLightsPort_IntLights_StateFlag(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	IntLights_StateFlag = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_SecAlm_SecAlmPort_SecAlm_Trigger(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	SecAlm_Trigger = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_SecAlm_SecAlmPort_SecAlm_PinStateChange(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	SecAlm_PinStateChange = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	SecAlm_TriggerIRQCounterForTimer4 = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(uint16* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	SecAlm_SensorStatusCounter = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatus(uint16* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	SecAlm_SensorStatus = *data;

	return RTE_E_OK;

}

void Rte_Runnable_Btc_MainFunction()
{

	Btc_MainFunction();

}

void Rte_Runnable_CenLoc_MainFunction()
{

	CenLoc_MainFunction();

}

void Rte_Runnable_ExtLights_MainFunction()
{

	ExtLights_MainFunction();

}

void Rte_Runnable_IntLights_MainFunction()
{

	IntLights_MainFunction();

}

void Rte_Runnable_SecAlm_MainFunction()
{

	SecAlm_MainFunction();

}

StdReturnType Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = Btc_ReceivedDataOnBluetooth;

	return RTE_E_OK;

}

StdReturnType Rte_Read_Btc_BtcPort_Btc_CenLoc(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = Btc_CenLoc;

	return RTE_E_OK;

}

StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = CenLoc_CurrentState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_PreviousState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = CenLoc_PreviousState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = CenLoc_FollowMeHomeState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_BlinkState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = CenLoc_BlinkState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = CenLoc_Tim2IRQFlag;

	return RTE_E_OK;

}

StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = CenLoc_Tim3IRQFlag;

	return RTE_E_OK;

}

StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = CenLoc_Tim5IRQFlag;

	return RTE_E_OK;

}

StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = CenLoc_Tim11IRQFlag;

	return RTE_E_OK;

}

StdReturnType Rte_Read_CenLoc_CenLocPort_CenLoc_PreviousStateFlag(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = CenLoc_PreviousStateFlag;

	return RTE_E_OK;

}

StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = ExtLights_ReverseLight_CurrentState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = ExtLights_FlashHighBeam_CurrentState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = ExtLights_BrakeLight_CurrentState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = ExtLights_LightsSwitch_CurrentState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = ExtLights_HighBeam_CurrentState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = ExtLights_FrontFogLight_CurrentState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = ExtLights_TurnSignalLeft_CurrentState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = ExtLights_TurnSignalRight_CurrentState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = ExtLights_HazardLight_CurrentState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = ExtLights_RearFogLight_CurrentState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_Btc_BtcPort_Btc_LightSwitch(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = Btc_LightSwitch;

	return RTE_E_OK;

}

StdReturnType Rte_Read_Btc_BtcPort_Btc_HighBeam(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = Btc_HighBeam;

	return RTE_E_OK;

}

StdReturnType Rte_Read_Btc_BtcPort_Btc_FlashHighBeam(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = Btc_FlashHighBeam;

	return RTE_E_OK;

}

StdReturnType Rte_Read_Btc_BtcPort_Btc_FrontFogLight(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = Btc_FrontFogLight;

	return RTE_E_OK;

}

StdReturnType Rte_Read_Btc_BtcPort_Btc_TurnSignalLeft(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = Btc_TurnSignalLeft;

	return RTE_E_OK;

}

StdReturnType Rte_Read_Btc_BtcPort_Btc_TurnSignalRight(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = Btc_TurnSignalRight;

	return RTE_E_OK;

}

StdReturnType Rte_Read_Btc_BtcPort_Btc_HazardLight(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = Btc_HazardLight;

	return RTE_E_OK;

}

StdReturnType Rte_Read_Btc_BtcPort_Btc_BrakeLight(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = Btc_BrakeLight;

	return RTE_E_OK;

}

StdReturnType Rte_Read_Btc_BtcPort_Btc_RearFogLight(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = Btc_RearFogLight;

	return RTE_E_OK;

}

StdReturnType Rte_Read_Btc_BtcPort_Btc_ReverseLight(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = Btc_ReverseLight;

	return RTE_E_OK;

}

StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_RTS_PrevState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = ExtLights_RTS_PrevState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_LTS_PrevState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = ExtLights_LTS_PrevState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_HL_PrevState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = ExtLights_HL_PrevState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_RTSFlag(uint32* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = ExtLights_RTSFlag;

	return RTE_E_OK;

}

StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_LTSFlag(uint32* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = ExtLights_LTSFlag;

	return RTE_E_OK;

}

StdReturnType Rte_Read_ExtLights_ExtLightsPort_ExtLights_HLFlag(uint32* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = ExtLights_HLFlag;

	return RTE_E_OK;

}

StdReturnType Rte_Read_IntLights_IntLightsPort_IntLights_CurrentState(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = IntLights_CurrentState;

	return RTE_E_OK;

}

StdReturnType Rte_Read_IntLights_IntLightsPort_IntLights_StateFlag(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = IntLights_StateFlag;

	return RTE_E_OK;

}

StdReturnType Rte_Read_Btc_BtcPort_Btc_IntLights(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = Btc_IntLights;

	return RTE_E_OK;

}

StdReturnType Rte_Read_SecAlm_SecAlmPort_SecAlm_Trigger(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = SecAlm_Trigger;

	return RTE_E_OK;

}

StdReturnType Rte_Read_SecAlm_SecAlmPort_SecAlm_PinStateChange(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = SecAlm_PinStateChange;

	return RTE_E_OK;

}

StdReturnType Rte_Read_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = SecAlm_TriggerIRQCounterForTimer4;

	return RTE_E_OK;

}

StdReturnType Rte_Read_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(uint16* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = SecAlm_SensorStatusCounter;

	return RTE_E_OK;

}

StdReturnType Rte_Read_SecAlm_SecAlmPort_SecAlm_SensorStatus(uint16* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	*data = SecAlm_SensorStatus;

	return RTE_E_OK;

}

StdReturnType Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{

	HAL_UART_Receive_IT(huart, pData, Size);

	return RTE_E_OK;

}

StdReturnType Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{

	HAL_TIM_Base_Init(htim);

	return RTE_E_OK;

}

StdReturnType Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{

	HAL_TIM_Base_Start_IT(htim);

	return RTE_E_OK;

}

StdReturnType Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{

	HAL_TIM_Base_Stop_IT(htim);

	return RTE_E_OK;

}

StdReturnType Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);

	return RTE_E_OK;

}

StdReturnType Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{

	HAL_ADC_Start_DMA(hadc, pData, Length);

	return RTE_E_OK;

}

StdReturnType Rte_Call_SysTick_R_SysTickPort_HAL_GetTick()
{

	HAL_GetTick();

	return RTE_E_OK;

}

StdReturnType Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(osTimerId_t timer_id, uint32_t ticks)
{

	osTimerStart(timer_id, ticks);

	return RTE_E_OK;

}

StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag(uint32* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	Timer2Counter_ExtLights_LTSFlag = *data;

	return RTE_E_OK;


}
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag(uint32* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	Timer2Counter_ExtLights_RTSFlag  = *data;

	return RTE_E_OK;

}
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag(uint32* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	Timer2Counter_ExtLights_HLFlag = *data;

	return RTE_E_OK;

}
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	Timer2Counter_CenLoc_Tim2IRQFlag = *data;

	return RTE_E_OK;

}
StdReturnType Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	Timer5Counter_CenLoc_Tim5IRQFlag = *data;

	return RTE_E_OK;

}
StdReturnType Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	Timer3Counter_CenLoc_Tim3IRQFlag = *data;

	return RTE_E_OK;

}
StdReturnType Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(uint8* data)
{

	if(data == NULL_PTR)
	{

		return RTE_E_NOT_OK;

	}
	else
	{

		/* do nothing */

	}


	Timer11Counter_CenLoc_Tim11IRQFlag = *data;

	return RTE_E_OK;

}

StdReturnType Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(osTimerId_t timer_id)
{

	osTimerStop(timer_id);

	return RTE_E_OK;

}
