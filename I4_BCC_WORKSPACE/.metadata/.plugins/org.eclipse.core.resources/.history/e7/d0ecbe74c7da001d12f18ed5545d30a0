/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Controller Area Network	     *
******************************************/

/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "Can.h"
#include "CanSpi.h"
#include "McpSpi.h"
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		DEFINES					 		 *
******************************************/
#define CAN_INIT_STATE 				0x00
#define CAN_DEINIT_STATE 			0x07
#define CAN_TX_STATE 				0x01
#define CAN_RX_STATE 				0x02
#define CAN_PENDING_MESSAGE_STATE 	0x03
#define CAN_BUSOFF_STATE 			0x04
#define CAN_INIT_FILTER_STATE 		0x05
#define CAN_INIT_MASK_STATE 		0x06
#define CAN_TX_ERROR				0x08
#define CAN_RX_ERROR				0x09
/*****************************************
* 		END OF DEFINES					 *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
/* CAN Message to be transmitted. */
Can_Message CanMsg_BtcState_Tx;
/* CAN Message to be transmitted. */
Can_Message CanMsg_CenLocState_Tx;
/* CAN Message to be transmitted. */
Can_Message CanMsg_ExtLightsState_Tx;
/* CAN Message to be transmitted. */
Can_Message CanMsg_DtcState_Tx;
/* CAN Message to be transmitted. */
Can_Message CanMsg_EcuState_Tx;
/* Module state variable. */
uint8 Can_BswState = STD_LOW;
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Protocol initialization. */
VOID Can_Init();
/* Protocol de-initialization. */
VOID Can_DeInit();
/* Protocol main function. */
VOID Can_MainFunction();
/* Protocol set mask. */
VOID Can_InitMask(uint8 MaskNumber, uint8 MaskIdType, uint32 MaskId);
/* Protocol set filter. */
VOID Can_InitFilter(uint8 FilterNumber, uint8 FilterIdType, uint32 FilterId);
/* Protocol bus state. */
StdReturnType Can_BusState();
/* Protocol error and status. */
StdReturnType Can_GetErrorStatus();
/* Check for remaining messages. */
StdReturnType Can_MessagePending();
/* Transmit messages. */
StdReturnType Can_Transmit(Can_Message CanMsg);
/* Receive messages. */
StdReturnType Can_Receive(Can_Message CanMsg);
/* Transmit messages. */
VOID Can_TransmitEcuState();
/* Receive messages. */
VOID Can_ReceiveNetworkMessages();
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/***********************************************************************************
* Function: Can_Init													   		   *
* Description: Driver initialization.		 	   								   *
************************************************************************************/
VOID Can_Init()
{
	Can_BswState = CAN_INIT_STATE;
	CanOverSpi_Init();
}
/***********************************************************************************
* END OF Can_Init											  			           *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Can_DeInit													   		   *
* Description: Driver de-initialization.		 	   							   *
************************************************************************************/
VOID Can_DeInit()
{
	Can_BswState = CAN_DEINIT_STATE;
	Can_InitMask(0, 0, 0);
	Can_InitFilter(0, 0, 0);
	MCP2515_CanOverSpi_Reset();
}
/***********************************************************************************
* END OF Can_DeInit											  			       	   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Can_InitMask													   	   *
* Description: Protocol mask initialization.		 	   						   *
************************************************************************************/
VOID Can_InitMask(uint8 MaskNumber, uint8 MaskIdType, uint32 MaskId)
{
	Can_BswState = CAN_INIT_MASK_STATE;
	CanOverSpi_Init_Mask(MaskNumber, MaskIdType, MaskId);
}
/***********************************************************************************
* END OF Can_InitMask											  			       *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Can_InitFilter													   	   *
* Description: Protocol filter initialization.		 	   						   *
************************************************************************************/
VOID Can_InitFilter(uint8 FilterNumber, uint8 FilterIdType, uint32 FilterId)
{
	Can_BswState = CAN_INIT_FILTER_STATE;
	CanOverSpi_Init_Filter(FilterNumber, FilterIdType, FilterId);
}
/***********************************************************************************
* END OF Can_InitFilter											  			       *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Can_MainFunction													   *
* Description: Driver main function.		 	   								   *
************************************************************************************/
VOID Can_MainFunction()
{
	Can_TransmitEcuState();
	Can_ReceiveNetworkMessages();
	switch(Can_BswState)
	{
		case CAN_INIT_STATE:
			break;
		case CAN_DEINIT_STATE:
			break;
		case CAN_TX_STATE:
			break;
		case CAN_RX_STATE:
			break;
		case CAN_PENDING_MESSAGE_STATE:
			break;
		case CAN_BUSOFF_STATE:
			Can_DeInit();
			Can_Init();
			break;
		case CAN_INIT_FILTER_STATE:
			break;
		case CAN_INIT_MASK_STATE:
			break;
		case CAN_TX_ERROR:
			Can_DeInit();
			Can_Init();
			break;
		case CAN_RX_ERROR:
			Can_DeInit();
			Can_Init();
			break;
		default:
			break;
	}
}
/***********************************************************************************
* END OF Can_MainFunction											  			   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Can_BusState													   	   *
* Description: Protocol bus state.		 	   									   *
************************************************************************************/
StdReturnType Can_BusState()
{
	if(CanOverSpi_isBussOff() == STD_HIGH)
	{
		Can_BswState = CAN_BUSOFF_STATE;
		return E_NOT_OK;
	}
	else
	{
		return E_OK;
	}
}
/***********************************************************************************
* END OF Can_BusState											  			       *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Can_GetErrorStatus													   *
* Description: Driver errost status.		 	   								   *
************************************************************************************/
StdReturnType Can_GetErrorStatus()
{
	if(CanOverSpi_isRxErrorPassive() == 0)
	{
		Can_BswState = CAN_RX_ERROR;
		return CAN_RX_ERROR;
	}
	else
	{
		/* do nothing */
	}

	if(CanOverSpi_isTxErrorPassive() == 0)
	{
		Can_BswState = CAN_TX_ERROR;
		return CAN_TX_ERROR;
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
}
/***********************************************************************************
* END OF Can_GetErrorStatus											  			   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Can_MessagePending													   *
* Description: Check for messages pending.		 	   							   *
************************************************************************************/
StdReturnType Can_MessagePending()
{
	if(CanOverSpi_messagesInBuffer() !=0)
	{
		Can_BswState = CAN_PENDING_MESSAGE_STATE;
		return Can_MessagePending();
	}
	else
	{
		return Can_MessagePending();
	}
}
/***********************************************************************************
* END OF Can_MessagePending											  			   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Can_Transmit													   	   *
* Description: Transmit messages.		 	   									   *
************************************************************************************/
StdReturnType Can_Transmit(Can_Message CanMsg)
{
	Can_BswState = CAN_TX_STATE;
	CanOverSpi_Transmit((uCAN_MSG*)&CanMsg);
	return E_OK;
}
/***********************************************************************************
* END OF Can_Transmit											  			       *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Can_Receive													   		   *
* Description: Receive messages.		 	   									   *
************************************************************************************/
StdReturnType Can_Receive(Can_Message CanMsg)
{
	Can_BswState = CAN_RX_STATE;
	CanOverSpi_Receive((uCAN_MSG*)&CanMsg);
	return E_OK;
}
/***********************************************************************************
* END OF Can_Receive											  			       *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Can_TransmitEcuState												   *
* Description: Transmit the ECU state.		 	   							       *
************************************************************************************/
VOID Can_TransmitEcuState()
{
	Can_BswState = CAN_TX_STATE;

	CanMsg_BtcState_Tx.frame.id = 0xAA;
	CanMsg_BtcState_Tx.frame.dlc = 8;
	CanMsg_BtcState_Tx.frame.idType = 0xA0;
	CanMsg_CenLocState_Tx.frame.id = 0xAB;
	CanMsg_CenLocState_Tx.frame.dlc = 8;
	CanMsg_CenLocState_Tx.frame.idType = 0xA1;
	CanMsg_ExtLightsState_Tx.frame.id = 0xAC;
	CanMsg_ExtLightsState_Tx.frame.dlc = 8;
	CanMsg_ExtLightsState_Tx.frame.idType = 0xA2;
	CanMsg_EcuState_Tx.frame.id = 0xAD;
	CanMsg_EcuState_Tx.frame.dlc = 8;
	CanMsg_EcuState_Tx.frame.idType = 0xA3;
	CanMsg_DtcState_Tx.frame.id = 0xAE;
	CanMsg_DtcState_Tx.frame.dlc = 8;
	CanMsg_DtcState_Tx.frame.idType = 0xA4;

	if(Rte_P_Btc_BtcPort_Btc_CenLoc == STD_HIGH)
	{
		CanMsg_BtcState_Tx.frame.data0 = 0;
		CanMsg_BtcState_Tx.frame.data1 = 0;
		CanMsg_BtcState_Tx.frame.data2 = 0xA;
		CanMsg_BtcState_Tx.frame.data3 = 0;
		CanMsg_BtcState_Tx.frame.data4 = 0;
		CanMsg_BtcState_Tx.frame.data5 = 0;
		CanMsg_BtcState_Tx.frame.data6 = 0;
		CanMsg_BtcState_Tx.frame.data7 = 0;
		if(Rte_P_Btc_BtcPort_Btc_IgnitionStepOne == STD_HIGH)
		{
			CanMsg_BtcState_Tx.frame.data0 = 0xF;
			CanMsg_BtcState_Tx.frame.data1 = 0;
			CanMsg_BtcState_Tx.frame.data2 = 0xA;
			CanMsg_BtcState_Tx.frame.data3 = 0;
			CanMsg_BtcState_Tx.frame.data4 = 0;
			CanMsg_BtcState_Tx.frame.data5 = 0;
			CanMsg_BtcState_Tx.frame.data6 = 0;
			CanMsg_BtcState_Tx.frame.data7 = 0;
		}
		else if(Rte_P_Btc_BtcPort_Btc_IgnitionStepTwo == STD_HIGH)
		{
			CanMsg_BtcState_Tx.frame.data0 = 0xF;
			CanMsg_BtcState_Tx.frame.data1 = 0x1E;
			CanMsg_BtcState_Tx.frame.data2 = 0xA;
			CanMsg_BtcState_Tx.frame.data3 = 0;
			CanMsg_BtcState_Tx.frame.data4 = 0;
			CanMsg_BtcState_Tx.frame.data5 = 0;
			CanMsg_BtcState_Tx.frame.data6 = 0;
			CanMsg_BtcState_Tx.frame.data7 = 0;
		}
		else if((Rte_P_Btc_BtcPort_Btc_IgnitionTurnOff == STD_HIGH &&
				Rte_P_Btc_BtcPort_Btc_IgnitionStepTwo == STD_LOW &&
				Rte_P_Btc_BtcPort_Btc_IgnitionStepOne == STD_LOW) ||
				(Rte_P_Btc_BtcPort_Btc_IgnitionTurnOff &&
				Rte_P_Btc_BtcPort_Btc_IgnitionStepTwo == STD_LOW &&
				Rte_P_Btc_BtcPort_Btc_IgnitionStepOne == STD_LOW))
		{
			CanMsg_BtcState_Tx.frame.data0 = 0;
			CanMsg_BtcState_Tx.frame.data1 = 0;
			CanMsg_BtcState_Tx.frame.data2 = 0xA;
			CanMsg_BtcState_Tx.frame.data3 = 0;
			CanMsg_BtcState_Tx.frame.data4 = 0;
			CanMsg_BtcState_Tx.frame.data5 = 0;
			CanMsg_BtcState_Tx.frame.data6 = 0;
			CanMsg_BtcState_Tx.frame.data7 = 0;
		}
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_Btc_BtcPort_Btc_CenLoc == STD_LOW)
	{
		CanMsg_BtcState_Tx.frame.data0 = 0;
		CanMsg_BtcState_Tx.frame.data1 = 0;
		CanMsg_BtcState_Tx.frame.data2 = 0;
		CanMsg_BtcState_Tx.frame.data3 = 0;
		CanMsg_BtcState_Tx.frame.data4 = 0;
		CanMsg_BtcState_Tx.frame.data5 = 0;
		CanMsg_BtcState_Tx.frame.data6 = 0;
		CanMsg_BtcState_Tx.frame.data7 = 0;
	}
	else
	{
		/* do nothing */
	}

	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
	{
		CanMsg_CenLocState_Tx.frame.data0 = 0xA;
		CanMsg_CenLocState_Tx.frame.data1 = 0;
		CanMsg_CenLocState_Tx.frame.data2 = 0;
		CanMsg_CenLocState_Tx.frame.data3 = 0;
		CanMsg_CenLocState_Tx.frame.data4 = 0;
		CanMsg_CenLocState_Tx.frame.data5 = 0;
		CanMsg_CenLocState_Tx.frame.data6 = 0;
		CanMsg_CenLocState_Tx.frame.data7 = 0;
		if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
		{
			CanMsg_CenLocState_Tx.frame.data0 = 0xA;
			CanMsg_CenLocState_Tx.frame.data1 = 0xB;
			CanMsg_CenLocState_Tx.frame.data2 = 0;
			CanMsg_CenLocState_Tx.frame.data3 = 0;
			CanMsg_CenLocState_Tx.frame.data4 = 0;
			CanMsg_CenLocState_Tx.frame.data5 = 0;
			CanMsg_CenLocState_Tx.frame.data6 = 0;
			CanMsg_CenLocState_Tx.frame.data7 = 0;
		}
		else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
		{
			CanMsg_CenLocState_Tx.frame.data0 = 0xA;
			CanMsg_CenLocState_Tx.frame.data1 = 0;
			CanMsg_CenLocState_Tx.frame.data2 = 0;
			CanMsg_CenLocState_Tx.frame.data3 = 0;
			CanMsg_CenLocState_Tx.frame.data4 = 0;
			CanMsg_CenLocState_Tx.frame.data5 = 0;
			CanMsg_CenLocState_Tx.frame.data6 = 0;
			CanMsg_CenLocState_Tx.frame.data7 = 0;
		}
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
	{
		CanMsg_CenLocState_Tx.frame.data0 = 0;
		CanMsg_CenLocState_Tx.frame.data1 = 0;
		CanMsg_CenLocState_Tx.frame.data2 = 0;
		CanMsg_CenLocState_Tx.frame.data3 = 0;
		CanMsg_CenLocState_Tx.frame.data4 = 0;
		CanMsg_CenLocState_Tx.frame.data5 = 0;
		CanMsg_CenLocState_Tx.frame.data6 = 0;
		CanMsg_CenLocState_Tx.frame.data7 = 0;
		if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
		{
			CanMsg_CenLocState_Tx.frame.data0 = 0;
			CanMsg_CenLocState_Tx.frame.data1 = 0xB;
			CanMsg_CenLocState_Tx.frame.data2 = 0;
			CanMsg_CenLocState_Tx.frame.data3 = 0;
			CanMsg_CenLocState_Tx.frame.data4 = 0;
			CanMsg_CenLocState_Tx.frame.data5 = 0;
			CanMsg_CenLocState_Tx.frame.data6 = 0;
			CanMsg_CenLocState_Tx.frame.data7 = 0;
		}
		else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
		{
			CanMsg_CenLocState_Tx.frame.data0 = 0;
			CanMsg_CenLocState_Tx.frame.data1 = 0;
			CanMsg_CenLocState_Tx.frame.data2 = 0;
			CanMsg_CenLocState_Tx.frame.data3 = 0;
			CanMsg_CenLocState_Tx.frame.data4 = 0;
			CanMsg_CenLocState_Tx.frame.data5 = 0;
			CanMsg_CenLocState_Tx.frame.data6 = 0;
			CanMsg_CenLocState_Tx.frame.data7 = 0;
		}
		else
		{
			/* do nothing */
		}









		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_HIGH)
		{

		}
		else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_LOW)
		{

		}
		else
		{
			/* do nothing */
		}

		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
		{

		}
		else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
		{

		}
		else
		{
			/* do nothing */
		}

		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
		{

		}
		else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_LOW)
		{

		}
		else
		{
			/* do nothing */
		}

		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_HIGH)
		{

		}
		else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_LOW)
		{

		}
		else
		{
			/* do nothing */
		}

		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_HIGH)
		{

		}
		else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_LOW)
		{

		}
		else
		{
			/* do nothing */
		}

		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_HIGH)
		{

		}
		else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
		{

		}
		else
		{
			/* do nothing */
		}

		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState == RTE_P_EXTLIGHTS_LIGHTSWITCH_STATEZERO)
		{
			CanMsg_ExtLightsState_Tx.frame.data0 = 0xD0;
		}
		else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState == RTE_P_EXTLIGHTS_LIGHTSWITCH_STATEONE)
		{
			CanMsg_ExtLightsState_Tx.frame.data0 = 0xD1;
		}
		else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState == RTE_P_EXTLIGHTS_LIGHTSWITCH_STATETWO)
		{
			CanMsg_ExtLightsState_Tx.frame.data0 = 0xD2;
		}
		else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState == RTE_P_EXTLIGHTS_LIGHTSWITCH_STATETHREE)
		{
			CanMsg_ExtLightsState_Tx.frame.data0 = 0xD3;
		}
		else
		{
			/* do nothing */
		}
	}
	else
	{
		/* do nothing */
	}





}
/***********************************************************************************
* END OF Can_TransmitEcuState											  		   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Can_ReceiveNetworkMessages											   *
* Description: Receive expected messages from the network and process them.		   *
************************************************************************************/
VOID Can_ReceiveNetworkMessages()
{

}
/***********************************************************************************
* END OF Can_ReceiveNetworkMessages											  	   *													       																	   *
************************************************************************************/
