/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Diagnostic Control	         *
******************************************/
/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "DiagCtrl.h"
#include "Rte.h"
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		DEFINES					 		 *
******************************************/
/*****************************************
* 		END OF DEFINES					 *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
/* Request value processing variable. */
uint8 DiagCtrl_RequestValue = STD_LOW;
/* Fault value variable. */
uint8 DiagCtrl_FaultValue = STD_LOW;
/* Application state variable. */
uint8 DiagCtrl_ApplState = STD_LOW;
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Initialization function declaration. */
StdReturnType DiagCtrl_Init();
/* De-initialization function declaration. */
StdReturnType DiagCtrl_DeInit();
/* Main function declaration. */
VOID DiagCtrl_MainFunction();
/* Process requested data function declaration. */
VOID DiagCtrl_ProcessRequestedData();
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/***********************************************************************************
* Function: DiagCtrl_Init										   		   		   *
* Description: Application initialization.		 		   						   *
************************************************************************************/
StdReturnType DiagCtrl_Init()
{
	DiagCtrl_RequestValue 	= STD_LOW;
	DiagCtrl_FaultValue 	= STD_LOW;
	DiagCtrl_ApplState 		= DIAGCTRL_PROCESSDATA_STATE;
	return E_OK;
}
/***********************************************************************************
* END OF DiagCtrl_Init										                       *
************************************************************************************/
/***********************************************************************************
* Function: DiagCtrl_DeInit										   		   		   *
* Description: Application de-initialization.		 		   					   *
************************************************************************************/
StdReturnType DiagCtrl_DeInit()
{
	return E_OK;
}
/***********************************************************************************
* END OF DiagCtrl_DeInit										                   *
************************************************************************************/
/***********************************************************************************
* Function: DiagCtrl_MainFunction										   		   *
* Description: Application main function.		 		   						   *
************************************************************************************/
VOID DiagCtrl_MainFunction()
{
	switch(DiagCtrl_ApplState)
	{
		case DIAGCTRL_INIT_STATE:
			DiagCtrl_Init();
			break;
		case DIAGCTRL_DEINIT_STATE:
			DiagCtrl_DeInit();
			break;
		case DIAGCTRL_PROCESSDATA_STATE:
			DiagCtrl_ProcessRequestedData();
			break;
		default:
			break;
	}
}
/***********************************************************************************
* END OF DiagCtrl_MainFunction										               *
************************************************************************************/
/***********************************************************************************
* Function: DiagCtrl_ProcessRequestedData										   *
* Description: Process the measured requested data.		 		   				   *
************************************************************************************/
VOID DiagCtrl_ProcessRequestedData()
{
	static uint32 LightSensor_RequestedValue = 0;
	static uint32 VibrationSensor_RequestedValue = 0;
	static uint32 AirQualitySensor_RequestedValue = 0;
	static uint32 TemperatureSensor_RequestedValue = 0;
	static uint8 BtcUart_FaultValue_One = 0;
	static uint8 BtcUart_FaultValue_Two = 0;
	static uint8 BtcUart_FaultValue_Three = 0;
	static uint8 BtcUart_FaultValue_Four = 0;
	static uint8 I2cThreeExternalEeeprom_FaultValue_One = 0;
	static uint8 I2cThreeExternalEeeprom_FaultValue_Two = 0;
	static uint8 I2cThreeExternalEeeprom_FaultValue_Three = 0;
	static uint8 I2cThreeExternalEeeprom_FaultValue_Four = 0;
	static uint8 I2cThreeExternalEeeprom_FaultValue_Five = 0;
	static uint8 I2cThreeExternalEeeprom_FaultValue_Six = 0;
	static uint8 I2cThreeExternalEeeprom_FaultValue_Seven = 0;
	static uint8 I2cThreeExternalEeeprom_FaultValue_Eight = 0;
	static uint8 I2cOneLcd_FaultValue_One = 0;
	static uint8 I2cOneLcd_FaultValue_Two = 0;
	static uint8 I2cOneLcd_FaultValue_Three = 0;
	static uint8 I2cOneLcd_FaultValue_Four = 0;
	static uint8 I2cOneLcd_FaultValue_Five = 0;
	static uint8 I2cOneLcd_FaultValue_Six = 0;
	static uint8 I2cOneLcd_FaultValue_Seven = 0;
	static uint8 I2cOneLcd_FaultValue_Eight = 0;
	static uint8 SpiCanTransceiver_FaultValue_One = 0;
	static uint8 SpiCanTransceiver_FaultValue_Two = 0;
	static uint8 SpiCanTransceiver_FaultValue_Three = 0;
	static uint8 SpiCanTransceiver_FaultValue_Four = 0;
	static uint8 SpiCanTransceiver_FaultValue_Five = 0;
	static uint8 SpiCanTransceiver_FaultValue_Six = 0;
	static uint8 SpiCanTransceiver_FaultValue_Seven = 0;
	static uint8 CanBusOff_FaultValue = 0;
	static uint8 CanRx_FaultValue = 0;
	static uint8 CanTx_FaultValue = 0;

	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&LightSensor_RequestedValue, 0);
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&VibrationSensor_RequestedValue, 1);
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&AirQualitySensor_RequestedValue, 2);
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&TemperatureSensor_RequestedValue, 3);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_One, 24);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Two, 25);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Three, 26);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Four, 27);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_One, 48);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Two, 49);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Three, 50);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Four, 51);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Five, 52);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Six, 53);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Seven, 54);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cThreeExternalEeeprom_FaultValue_Eight, 55);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_One, 40);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Two, 41);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Three, 42);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Four, 43);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Five, 44);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Six, 45);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Seven, 46);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Eight, 47);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&SpiCanTransceiver_FaultValue_One, 33);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&SpiCanTransceiver_FaultValue_Two, 34);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&SpiCanTransceiver_FaultValue_Three, 35);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&SpiCanTransceiver_FaultValue_Four, 36);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&SpiCanTransceiver_FaultValue_Five, 37);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&SpiCanTransceiver_FaultValue_Six, 38);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&SpiCanTransceiver_FaultValue_Seven, 39);

	CanBusOff_FaultValue = Rte_Call_Can_P_CanPort_Can_BusState();
	CanRx_FaultValue = Rte_Call_Can_P_CanPort_CanOverSpi_isRxErrorPassive();
	CanTx_FaultValue = Rte_Call_Can_P_CanPort_CanOverSpi_isTxErrorPassive();

	if(BtcUart_FaultValue_One != 0 ||
			BtcUart_FaultValue_Two != 0 ||
			BtcUart_FaultValue_Three != 0 ||
			BtcUart_FaultValue_Four != 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_BLUETOOTH_MODULE_MALFUNCTION);
	}
	else
	{
		/* do nothing */
	}

	if(I2cThreeExternalEeeprom_FaultValue_One != 0 ||
			I2cThreeExternalEeeprom_FaultValue_Two != 0 ||
			I2cThreeExternalEeeprom_FaultValue_Three != 0 ||
			I2cThreeExternalEeeprom_FaultValue_Four != 0 ||
			I2cThreeExternalEeeprom_FaultValue_Five != 0 ||
			I2cThreeExternalEeeprom_FaultValue_Six != 0 ||
			I2cThreeExternalEeeprom_FaultValue_Seven != 0 ||
			I2cThreeExternalEeeprom_FaultValue_Eight != 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_EXTERNAL_EEPROM_MODULE_MALFUNCTION);
	}
	else
	{
		/* do nothing */
	}

	if(I2cOneLcd_FaultValue_One != 0 ||
			I2cOneLcd_FaultValue_Two != 0 ||
			I2cOneLcd_FaultValue_Three != 0 ||
			I2cOneLcd_FaultValue_Four != 0 ||
			I2cOneLcd_FaultValue_Five != 0 ||
			I2cOneLcd_FaultValue_Six != 0 ||
			I2cOneLcd_FaultValue_Seven != 0 ||
			I2cOneLcd_FaultValue_Eight != 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LCD_MODULE_MALFUNCTION);
	}
	else
	{
		/* do nothing */
	}

	if(SpiCanTransceiver_FaultValue_One != 0 ||
			SpiCanTransceiver_FaultValue_Two != 0 ||
			SpiCanTransceiver_FaultValue_Three != 0 ||
			SpiCanTransceiver_FaultValue_Four != 0 ||
			SpiCanTransceiver_FaultValue_Five != 0 ||
			SpiCanTransceiver_FaultValue_Six != 0 ||
			SpiCanTransceiver_FaultValue_Seven != 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_CAN_TRANSCEIVER_MODULE_MALFUNCTION);
	}

	if(CanBusOff_FaultValue == STD_HIGH)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_CAN_BUS_OFF);
	}
	else
	{
		/* do nothing */
	}

	if(CanRx_FaultValue == STD_HIGH)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_CAN_TRANSCEIVER_MODULE_MALFUNCTION);
	}
	else
	{
		/* do nothing */
	}

	if(CanTx_FaultValue == STD_HIGH)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_CAN_TRANSCEIVER_MODULE_MALFUNCTION);
	}
	else
	{
		/* do nothing */
	}

	if(LightSensor_RequestedValue < 100)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LIGHT_SENSOR_MALFUNCTION);
	}
	else
	{
		/* do nothing */
	}

	if(VibrationSensor_RequestedValue < 100)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_VIBRATION_SENSOR_MALFUNCTION);
	}
	else
	{
		/* do nothing */
	}

	if(TemperatureSensor_RequestedValue < 100)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_TEMPERATURE_SENSOR_MALFUNCTION);
	}
	else
	{
		/* do nothing */
	}

	if(AirQualitySensor_RequestedValue < 100)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_AIR_QUALITY_SENSOR_MALFUNCTION);
	}
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree == 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION);
	}
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour == 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION);
	}
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LOW_BEAM_LEFT_MALFUNCTION);
	if(DiagCtrl_FaultValue != 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
	}
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LOW_BEAM_RIGHT_MALFUNCTION);
	if(DiagCtrl_FaultValue != 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
	}
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_REAR_POSITION_LIGHT_LEFT_MALFUNCTION);
	if(DiagCtrl_FaultValue != 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
	}
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION);
	if(DiagCtrl_FaultValue != 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
	}
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION);
	if(DiagCtrl_FaultValue != 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
	}
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION);
	if(DiagCtrl_FaultValue != 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
	}
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION);
	if(DiagCtrl_FaultValue != 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
	}
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION);
	if(DiagCtrl_FaultValue != 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
	}
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_LEFT_TURN_SIGNAL_REAR_MALFUNCTION);
	if(DiagCtrl_FaultValue != 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
	}
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_BRAKE_LIGHT_LEFT_MALFUNCTION);
	if(DiagCtrl_FaultValue != 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
	}
	else
	{
		/* do nothing */
	}

	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(DIAGCTRL_BRAKE_LIGHT_RIGHT_MALFUNCTION);
	if(DiagCtrl_FaultValue != 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_FaultValue);
	}
	else
	{
		/* do nothing */
	}
}
/***********************************************************************************
* END OF DiagCtrl_ProcessRequestedData										       *
************************************************************************************/
