/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: MCP SPI Driver	     		 *
******************************************/
/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "McpSpi.h"
#include <stdbool.h>
#include "spi.h"
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		DEFINES					 		 *
******************************************/
EXTERN SPI_HandleTypeDef        hspi1;
#define SPI_CAN                 &hspi1
#define MCP2515_CanOverSpi_CS_HIGH()   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1)
#define MCP2515_CanOverSpi_CS_LOW()    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1)
/*****************************************
* 		END OF DEFINES					 *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Protocol interface. */
static StdReturnType SPI_Rx(VOID);
/* Protocol interface. */
static VOID SPI_Tx(uint8_t data);
/* Protocol interface. */
static VOID SPI_RxBuffer(uint8 *buffer, uint8 length);
/* Protocol interface. */
static VOID SPI_TxBuffer(uint8 *buffer, uint8 length);
/* Driver initialization. */
StdReturnType MCP2515_CanOverSpi_Initialize();
/* Driver configuration mode.  */
StdReturnType MCP2515_CanOverSpi_SetConfigMode();
/* Driver configuration mode. */
StdReturnType MCP2515_CanOverSpi_SetNormalMode();
/* Driver read byte from message. */
StdReturnType MCP2515_CanOverSpi_ReadByte(uint8 address);
/* Driver read status function. */
StdReturnType MCP2515_CanOverSpi_ReadStatus();
/* Driver get rx bus status. */
StdReturnType MCP2515_CanOverSpi_GetRxStatus();
/* Driver bus reset. */
VOID MCP2515_CanOverSpi_Reset();
/* Driver received message reading sequence. */
VOID MCP2515_CanOverSpi_ReadRxSequence(uint8 instruction, uint8 *data, uint8 length);
/* Driver byte message writing. */
VOID MCP2515_CanOverSpi_WriteByte(uint8 address, uint8 data);
/* Driver message writing sequence. */
VOID MCP2515_CanOverSpi_WriteByteSequence(uint8 startAddress, uint8 endAddress, uint8 *data);
/* Driver message to be transmitted loading sequence. */
VOID MCP2515_CanOverSpi_LoadTxSequence(uint8 instruction, uint8 *idReg, uint8 dlc, uint8 *data);
/* Driver message to be transmitted loading sequence. */
VOID MCP2515_CanOverSpi_LoadTxBuffer(uint8 instruction, uint8 data);
/* Driver bus request to send message. */
VOID MCP2515_CanOverSpi_RequestToSend(uint8 instruction);
/* Driver message characteristic for bus sending. */
VOID MCP2515_CanOverSpi_BitModify(uint8 address, uint8 mask, uint8 data);
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/***********************************************************************************
* Function: MCP2515_CanOverSpi_Initialize									       *
* Description: Set the CAN CS pin high.		 	   								   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_Initialize()
{
	MCP2515_CanOverSpi_CS_HIGH();
	if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
	{
		return E_OK;
	}
	else
	{
		/* do nothing */
	}
	return E_NOT_OK;
}
/***********************************************************************************
* END OF MCP2515_CanOverSpi_Initialize											   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: MCP2515_CanOverSpi_SetConfigMode									   *
* Description: Set the mode to config.		 		   							   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_SetConfigMode()
{
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CANCTRL, MODE_CONFIG);
	if((MCP2515_CanOverSpi_ReadByte(MCP2515_CanOverSpi_CANSTAT) & MODE_MASK) == MODE_CONFIG)
	{
		return E_OK;
	}
	else
	{
		/* do nothing */
	}
	return E_NOT_OK;
}
/***********************************************************************************
* END OF MCP2515_CanOverSpi_SetConfigMode										   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: MCP2515_CanOverSpi_SetNormalMode									   *
* Description: Set the mode to normal.		 		   							   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_SetNormalMode()
{
	MCP2515_CanOverSpi_WriteByte(MCP2515_CanOverSpi_CANCTRL, MODE_NORMAL);
	if((MCP2515_CanOverSpi_ReadByte(MCP2515_CanOverSpi_CANSTAT) & MODE_MASK) == MODE_NORMAL)
	{
		return E_OK;
	}
	else
	{
		/* do nothing */
	}
	return E_NOT_OK;
}
/***********************************************************************************
* END OF MCP2515_CanOverSpi_SetNormalMode										   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: MCP2515_CanOverSpi_Reset											   *
* Description: Reset the bus.		 		   									   *
************************************************************************************/
VOID MCP2515_CanOverSpi_Reset()
{
	MCP2515_CanOverSpi_CS_LOW();
	SPI_Tx(MCP2515_CanOverSpi_RESET);
	MCP2515_CanOverSpi_CS_HIGH();
}
/***********************************************************************************
* END OF MCP2515_CanOverSpi_Reset											  	   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: MCP2515_CanOverSpi_ReadByte											   *
* Description: Read the byte from the bus.		 		   						   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_ReadByte (uint8 address)
{
	uint8 retVal;
	MCP2515_CanOverSpi_CS_LOW();
	SPI_Tx(MCP2515_CanOverSpi_READ);
	SPI_Tx(address);
	retVal = SPI_Rx();
	MCP2515_CanOverSpi_CS_HIGH();
	return retVal;
}
/***********************************************************************************
* END OF MCP2515_CanOverSpi_ReadByte											   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: MCP2515_CanOverSpi_ReadRxSequence									   *
* Description: Read received sequence of bytes.		 		   					   *
************************************************************************************/
VOID MCP2515_CanOverSpi_ReadRxSequence(uint8 instruction, uint8 *data, uint8 length)
{
	MCP2515_CanOverSpi_CS_LOW();
	SPI_Tx(instruction);
	SPI_RxBuffer(data, length);
	MCP2515_CanOverSpi_CS_HIGH();
}
/***********************************************************************************
* END OF MCP2515_CanOverSpi_ReadRxSequence										   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: MCP2515_CanOverSpi_WriteByte										   *
* Description: Write the byte on the bus.		 		   						   *
************************************************************************************/
VOID MCP2515_CanOverSpi_WriteByte(uint8 address, uint8 data)
{
	MCP2515_CanOverSpi_CS_LOW();
	SPI_Tx(MCP2515_CanOverSpi_WRITE);
	SPI_Tx(address);
	SPI_Tx(data);
	MCP2515_CanOverSpi_CS_HIGH();
}
/***********************************************************************************
* END OF MCP2515_CanOverSpi_WriteByte											   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: MCP2515_CanOverSpi_WriteByteSequence								   *
* Description: Initialize the bluetooth communication application.		 		   *
************************************************************************************/
VOID MCP2515_CanOverSpi_WriteByteSequence(uint8 startAddress, uint8 endAddress, uint8 *data)
{
	MCP2515_CanOverSpi_CS_LOW();
	SPI_Tx(MCP2515_CanOverSpi_WRITE);
	SPI_Tx(startAddress);
	SPI_TxBuffer(data, (endAddress - startAddress + 1));
	MCP2515_CanOverSpi_CS_HIGH();
}
/***********************************************************************************
* END OF MCP2515_CanOverSpi_WriteByteSequence									   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: MCP2515_CanOverSpi_LoadTxSequence									   *
* Description: Load to be transmitted sequence of bytes.		 		   		   *
************************************************************************************/
VOID MCP2515_CanOverSpi_LoadTxSequence(uint8 instruction, uint8 *idReg, uint8 dlc, uint8 *data)
{
	MCP2515_CanOverSpi_CS_LOW();
	SPI_Tx(instruction);
	SPI_TxBuffer(idReg, 4);
	SPI_Tx(dlc);
	SPI_TxBuffer(data, dlc);
	MCP2515_CanOverSpi_CS_HIGH();
}
/***********************************************************************************
* END OF MCP2515_CanOverSpi_LoadTxSequence										   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: MCP2515_CanOverSpi_LoadTxBuffer										   *
* Description: Load transmitted buffer.		 		  							   *
************************************************************************************/
VOID MCP2515_CanOverSpi_LoadTxBuffer(uint8 instruction, uint8 data)
{
	MCP2515_CanOverSpi_CS_LOW();
	SPI_Tx(instruction);
	SPI_Tx(data);
	MCP2515_CanOverSpi_CS_HIGH();
}
/***********************************************************************************
* END OF MCP2515_CanOverSpi_LoadTxBuffer										   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: MCP2515_CanOverSpi_RequestToSend								       *
* Description: Request to send driver next instruction.		 		   			   *
************************************************************************************/
VOID MCP2515_CanOverSpi_RequestToSend(uint8 instruction)
{
	MCP2515_CanOverSpi_CS_LOW();
	SPI_Tx(instruction);
	MCP2515_CanOverSpi_CS_HIGH();
}
/***********************************************************************************
* END OF MCP2515_CanOverSpi_RequestToSend										   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: MCP2515_CanOverSpi_ReadStatus										   *
* Description: Read bus status.		 		   									   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_ReadStatus()
{
	uint8 retVal;
	MCP2515_CanOverSpi_CS_LOW();
	SPI_Tx(MCP2515_CanOverSpi_READ_STATUS);
	retVal = SPI_Rx();
	MCP2515_CanOverSpi_CS_HIGH();
	return retVal;
}
/***********************************************************************************
* END OF MCP2515_CanOverSpi_ReadStatus										       *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Btc_Init													   		   *
* Description: Initialize the bluetooth communication application.		 		   *
************************************************************************************/
StdReturnType MCP2515_CanOverSpi_GetRxStatus()
{
	uint8 retVal;
	MCP2515_CanOverSpi_CS_LOW();
	SPI_Tx(MCP2515_CanOverSpi_RX_STATUS);
	retVal = SPI_Rx();
	MCP2515_CanOverSpi_CS_HIGH();
	return retVal;
}
/***********************************************************************************
* END OF Btc_IgnitionState											  			   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Btc_Init													   		   *
* Description: Initialize the bluetooth communication application.		 		   *
************************************************************************************/
VOID MCP2515_CanOverSpi_BitModify(uint8 address, uint8 mask, uint8 data)
{
	MCP2515_CanOverSpi_CS_LOW();
	SPI_Tx(MCP2515_CanOverSpi_BIT_MOD);
	SPI_Tx(address);
	SPI_Tx(mask);
	SPI_Tx(data);
	MCP2515_CanOverSpi_CS_HIGH();
}
/***********************************************************************************
* END OF Btc_IgnitionState											  			   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Btc_Init													   		   *
* Description: Initialize the bluetooth communication application.		 		   *
************************************************************************************/
static VOID SPI_Tx(uint8 data)
{
	HAL_SPI_Transmit_IT(SPI_CAN, &data, 1);
}
/***********************************************************************************
* END OF Btc_IgnitionState											  			   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Btc_Init													   		   *
* Description: Initialize the bluetooth communication application.		 		   *
************************************************************************************/
static VOID SPI_TxBuffer(uint8 *buffer, uint8 length)
{
	HAL_SPI_Transmit_IT(SPI_CAN, buffer, length);
}
/***********************************************************************************
* END OF Btc_IgnitionState											  			   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Btc_Init													   		   *
* Description: Initialize the bluetooth communication application.		 		   *
************************************************************************************/
static StdReturnType SPI_Rx(VOID)
{
	uint8 retVal;
	HAL_SPI_Receive_IT(SPI_CAN, &retVal, 1);
	return retVal;
}
/***********************************************************************************
* END OF Btc_IgnitionState											  			   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Btc_Init													   		   *
* Description: Initialize the bluetooth communication application.		 		   *
************************************************************************************/
static VOID SPI_RxBuffer(uint8 *buffer, uint8 length)
{
	HAL_SPI_Receive_IT(SPI_CAN, buffer, length);
}
/***********************************************************************************
* END OF Btc_IgnitionState											  			   *													       																	   *
************************************************************************************/
