#include "I2cH.h"

StdReturnType I2c_Init();
StdReturnType I2c_DeInit();
void I2c_MainFunction();

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{

	uint32 receivedValue = HAL_I2C_GetError(hi2c);

	switch(receivedValue)
	{

		case HAL_I2C_ERROR_NONE:

			DemEvent_DTC_I2CFaultHandle = &receivedValue;

			break;

		case HAL_I2C_ERROR_BERR:

			DemEvent_DTC_I2CFaultHandle = &receivedValue;

			I2c_DeInit();
			I2c_Init();

			break;

		case HAL_I2C_ERROR_ARLO:

			DemEvent_DTC_I2CFaultHandle = &receivedValue;

			I2c_DeInit();
			I2c_Init();

			break;

		case HAL_I2C_ERROR_AF:

			DemEvent_DTC_I2CFaultHandle = &receivedValue;

			I2c_DeInit();
			I2c_Init();

			break;

		case HAL_I2C_ERROR_OVR:

			DemEvent_DTC_I2CFaultHandle = &receivedValue;

			I2c_DeInit();
			I2c_Init();

			break;

		case HAL_I2C_ERROR_DMA:

			DemEvent_DTC_I2CFaultHandle = &receivedValue;

			I2c_DeInit();
			I2c_Init();

			break;

		case HAL_I2C_ERROR_TIMEOUT:

			DemEvent_DTC_I2CFaultHandle = &receivedValue;

			I2c_DeInit();
			I2c_Init();

			break;

		case HAL_I2C_ERROR_SIZE:

			DemEvent_DTC_I2CFaultHandle = &receivedValue;

			I2c_DeInit();
			I2c_Init();

			break;

		case HAL_I2C_ERROR_DMA_PARAM:

			DemEvent_DTC_I2CFaultHandle = &receivedValue;

			I2c_DeInit();
			I2c_Init();

			break;

		default:

			break;

	}

}

StdReturnType I2c_Init()
{

	hi2c1.Instance = I2C1;
	hi2c1.Init.ClockSpeed = 100000;
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
	hi2c1.Init.OwnAddress1 = 0;
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
	hi2c1.Init.OwnAddress2 = 0;
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;

	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
	{

		HAL_I2C_ErrorCallback(&hi2c1);

	}
	else
	{

		/* do nothing */

	}

	return E_OK;

}

StdReturnType I2c_DeInit()
{

	HAL_I2C_DeInit(&hi2c1);

	return E_OK;

}

void I2c_MainFunction()
{

	uint32 localStatus = HAL_I2C_GetState(&hi2c1);

	if(localStatus == HAL_I2C_STATE_ERROR)
	{

		HAL_I2C_ErrorCallback(&hi2c1);

	}
	else
	{

		/* do nothing */

	}

}
