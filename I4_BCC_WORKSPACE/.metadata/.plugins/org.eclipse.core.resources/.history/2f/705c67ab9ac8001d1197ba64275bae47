#include "SpiH.h"

void Spi_MainFunction();
StdReturnType Spi_Init(uint8 SpiChannel);
StdReturnType Spi_DeInit(uint8 SpiChanne);
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi);

void Spi_MainFunction()
{

	uint32 localStateChannelOne = HAL_SPI_GetState(&hspi1);
	uint32 localStateChannelTwo = HAL_SPI_GetState(&hspi2);

	if(localStateChannelOne == HAL_SPI_STATE_ERROR)
	{

		HAL_SPI_ErrorCallback(&hspi1);

	}
	else if(localStateChannelTwo == HAL_SPI_STATE_ERROR)
	{

		HAL_SPI_ErrorCallback(&hspi2);

	}
	else
	{

		/* do nothing */

	}

}

StdReturnType Spi_Init(uint8 SpiChannel)
{

	if(SpiChannel == 1)
	{

		hspi1.Instance = SPI1;
		hspi1.Init.Mode = SPI_MODE_MASTER;
		hspi1.Init.Direction = SPI_DIRECTION_2LINES;
		hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
		hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
		hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
		hspi1.Init.NSS = SPI_NSS_SOFT;
		hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
		hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
		hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
		hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
		hspi1.Init.CRCPolynomial = 10;

		if (HAL_SPI_Init(&hspi1) != HAL_OK)
		{

			HAL_SPI_ErrorCallback(&hspi1);

		}
		else
		{

			/* do nothing */

		}

	}
	else if(SpiChannel == 2)
	{

		hspi2.Instance = SPI2;
		hspi2.Init.Mode = SPI_MODE_MASTER;
		hspi2.Init.Direction = SPI_DIRECTION_2LINES;
		hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
		hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
		hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
		hspi2.Init.NSS = SPI_NSS_SOFT;
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
		hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
		hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
		hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
		hspi2.Init.CRCPolynomial = 10;

		if (HAL_SPI_Init(&hspi2) != HAL_OK)
		{

			HAL_SPI_ErrorCallback(&hspi2);

		}
		else
		{

			/* do nothing */

		}

	}
	else
	{

		/* do nothing */

	}

	return E_OK;

}

StdReturnType Spi_DeInit(uint8 SpiChannel)
{

	if(SpiChannel == 1)
	{

		HAL_SPI_DeInit(&hspi1);

	}
	else if(SpiChannel == 2)
	{

		HAL_SPI_DeInit(&hspi2);

	}
	else
	{

		/* do nothing */

	}

	return E_OK;

}

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{

	uint32 receivedStatus = HAL_SPI_GetError(hspi);

	if(hspi->Instance == SPI1)
	{

		switch(receivedStatus)
		{

			case HAL_SPI_ERROR_NONE:

				receivedStatus = receivedStatus + 0x07;
				DemEvent_DTC_SPIFaultHandle = &receivedStatus;

				break;

			case HAL_SPI_ERROR_MODF:

				receivedStatus = receivedStatus + 0x07;
				DemEvent_DTC_SPIFaultHandle = &receivedStatus;

				Spi_DeInit(SPI_CHANNEL_ONE);
				Spi_Init(SPI_CHANNEL_ONE);

				break;

			case HAL_SPI_ERROR_FRE:

				receivedStatus = receivedStatus + 0x07;
				DemEvent_DTC_SPIFaultHandle = &receivedStatus;

				HAL_SPI_Abort_IT(&hspi1);

				break;

			case HAL_SPI_ERROR_CRC:

				receivedStatus = receivedStatus + 0x07;
				DemEvent_DTC_SPIFaultHandle = &receivedStatus;

				HAL_SPI_Abort_IT(&hspi1);

				break;

			case HAL_SPI_ERROR_OVR:

				receivedStatus = receivedStatus + 0x07;
				DemEvent_DTC_SPIFaultHandle = &receivedStatus;

				HAL_SPI_Abort_IT(&hspi1);

				break;

			case HAL_SPI_ERROR_DMA:

				receivedStatus = receivedStatus + 0x07;
				DemEvent_DTC_SPIFaultHandle = &receivedStatus;

				HAL_SPI_Abort_IT(&hspi1);

				break;

			case HAL_SPI_ERROR_FLAG:

				receivedStatus = receivedStatus + 0x07;
				DemEvent_DTC_SPIFaultHandle = &receivedStatus;

				HAL_SPI_Abort_IT(&hspi1);

				break;

			case HAL_SPI_ERROR_ABORT:

				receivedStatus = receivedStatus + 0x07;
				DemEvent_DTC_SPIFaultHandle = &receivedStatus;

				Spi_DeInit(SPI_CHANNEL_ONE);
				Spi_Init(SPI_CHANNEL_ONE);

				break;

			default:

				break;

		}

	}
	else if(hspi->Instance == SPI2)
	{

		switch(receivedStatus)
		{

			case HAL_SPI_ERROR_NONE:

				receivedStatus = receivedStatus + 0x08;
				DemEvent_DTC_SPIFaultHandle = &receivedStatus;

				break;

			case HAL_SPI_ERROR_MODF:

				receivedStatus = receivedStatus + 0x08;
				DemEvent_DTC_SPIFaultHandle = &receivedStatus;

				Spi_DeInit(SPI_CHANNEL_TWO);
				Spi_Init(SPI_CHANNEL_TWO);

				break;

			case HAL_SPI_ERROR_FRE:

				receivedStatus = receivedStatus + 0x08;
				DemEvent_DTC_SPIFaultHandle = &receivedStatus;

				HAL_SPI_Abort_IT(&hspi2);

				break;

			case HAL_SPI_ERROR_CRC:

				receivedStatus = receivedStatus + 0x08;
				DemEvent_DTC_SPIFaultHandle = &receivedStatus;

				HAL_SPI_Abort_IT(&hspi2);

				break;

			case HAL_SPI_ERROR_OVR:

				receivedStatus = receivedStatus + 0x08;
				DemEvent_DTC_SPIFaultHandle = &receivedStatus;

				HAL_SPI_Abort_IT(&hspi2);

				break;

			case HAL_SPI_ERROR_DMA:

				receivedStatus = receivedStatus + 0x08;
				DemEvent_DTC_SPIFaultHandle = &receivedStatus;

				HAL_SPI_Abort_IT(&hspi2);

				break;

			case HAL_SPI_ERROR_FLAG:

				receivedStatus = receivedStatus + 0x08;
				DemEvent_DTC_SPIFaultHandle = &receivedStatus;

				HAL_SPI_Abort_IT(&hspi2);

				break;

			case HAL_SPI_ERROR_ABORT:

				receivedStatus = receivedStatus + 0x08;
				DemEvent_DTC_SPIFaultHandle = &receivedStatus;

				Spi_DeInit(SPI_CHANNEL_TWO);
				Spi_Init(SPI_CHANNEL_TWO);

				break;

			default:

				break;

		}

	}
	else
	{

		/* do nothing */

	}

}
