/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Non-volatile Memory Managaer	 *
******************************************/
/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "NvM.h"
#include "I2cExtEeprom.h"
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		DEFINES					 		 *
******************************************/
/* Module state define. */
#define NVM_INIT_STATE 		0x00
/* Module state define. */
#define NVM_DEINIT_STATE 	0x05
/* Module state define. */
#define NVM_WRITEALL_STATE 	0x01
/* Module state define. */
#define NVM_READALL_STATE 	0x02
/* Module state define. */
#define NVM_WRITE_STATE 	0x03
/* Module state define. */
#define NVM_READ_STATE 		0x04
/*****************************************
* 		END OF DEFINES					 *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
uint32 NvM_BswState;
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Function declaration for initialization. */
EXTERN StdReturnType NvM_Init();
/* Function declaration for de-initialization. */
EXTERN StdReturnType NvM_DeInit();
/* Function declaration for the main function. */
EXTERN VOID NvM_MainFunction();
/* Function declaration for writing into memory. */
EXTERN StdReturnType NvM_Write(uint16 page, uint16 offset, uint8 *data, uint16 size);
/* Function declaration for reading from memory. */
EXTERN StdReturnType NvM_Read(uint16 page, uint16 offset, uint8 *data, uint16 size);
/* Function declaration for erasing a page from memory. */
EXTERN StdReturnType NvM_PageErase(uint16 page);
/* Write all the data designated into memory. */
EXTERN StdReturnType NvM_WriteAll();
/* Read the memory. */
EXTERN StdReturnType NvM_ReadAll();
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/***********************************************************************************
* END OF I2cExtEeprom_BytesToWrite										           *
************************************************************************************/
/***********************************************************************************
* Function: NvM_Init										   			           *
* Description: Module initialization.									           *
************************************************************************************/
StdReturnType NvM_Init()
{
	return E_OK;
}
/***********************************************************************************
* END OF NvM_Init										                           *
************************************************************************************/
/***********************************************************************************
* Function: NvM_DeInit										   			           *
* Description: Module de-initialization.									       *
************************************************************************************/
StdReturnType NvM_DeInit()
{
	return E_OK;
}
/***********************************************************************************
* END OF NvM_DeInit										                           *
************************************************************************************/
/***********************************************************************************
* Function: NvM_MainFunction										   			   *
* Description: Module main function.									           *
************************************************************************************/
VOID NvM_MainFunction()
{
	/* Get I2c bus state */
	uint8 localState = HAL_I2C_GetState(&hi2c3);
	/* Process module state. */
	switch(NvM_BswState)
	{
		case NVM_INIT_STATE:
			NvM_Init();
			break;
		case NVM_DEINIT_STATE:
			NvM_DeInit();
			break;
		case NVM_WRITEALL_STATE:
			break;
		case NVM_READALL_STATE:
			break;
		case NVM_WRITE_STATE:
			break;
		case NVM_READ_STATE:
			break;
		default:
			break;
	}
}
/***********************************************************************************
* END OF NvM_MainFunction										                   *
************************************************************************************/
/***********************************************************************************
* Function: NvM_Write										   			           *
* Description: Memory writing.									                   *
************************************************************************************/
VOID NvM_Write(uint16 page, uint16 offset, uint8 *data, uint16 size)
{
	I2cExtEeprom_Write(page, offset, data, size);
}
/***********************************************************************************
* END OF NvM_Write										                           *
************************************************************************************/
/***********************************************************************************
* Function: NvM_Read										   			           *
* Description: Memory reading.									                   *
************************************************************************************/
VOID NvM_Read(uint16 page, uint16 offset, uint8 *data, uint16 size)
{
	I2cExtEeprom_Read(page, offset, data, size);
}
/***********************************************************************************
* END OF NvM_Read										                           *
************************************************************************************/
/***********************************************************************************
* Function: NvM_PageErase										   			       *
* Description: Memory erasing.									                   *
************************************************************************************/
VOID NvM_PageErase(uint16 page)
{
	I2cExtEeprom_PageErase(page);
}
/***********************************************************************************
* END OF NvM_PageErase										                       *
************************************************************************************/
