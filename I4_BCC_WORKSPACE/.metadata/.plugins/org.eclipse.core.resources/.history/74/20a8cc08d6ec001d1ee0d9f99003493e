/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Inter Integrated Circuit       *
* 		  Handler         			     *
******************************************/
/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "I2cH.h"
#include "I2cExtEeprom.h"
#include "Hvac.h"
#include "TimH.h"
#include "SystemManager.h"
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		DEFINES					 		 *
******************************************/
/*****************************************
* 		END OF DEFINES					 *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
/* State variable.  */
uint8 I2c_ReadyState = STD_LOW;
/* Module state variable. */
uint32 I2c_BswState_ChannelOne = STD_LOW;
/* Module state variable. */
uint32 I2c_BswState_ChannelThree = STD_LOW;
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Function declaration for initialization. */
StdReturnType I2c_Init(uint8 I2c_Channel);
/* Function declaration for de-initialization. */
StdReturnType I2c_DeInit(uint8 I2c_Channel);
/* Function declaration for the main function. */
VOID I2c_MainFunction();
/* Function declaration for the error callback. */
VOID HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c);
/* Function declaration for the master transmission complete callback. */
VOID HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c);
/* Function declaration for the memory transmission complete callback. */
VOID HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c);
/* Function declaration for the memory receiving complete callback. */
VOID HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c);
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/***********************************************************************************
* Function: HAL_I2C_MemTxCpltCallback										       *
* Description: Handler memory transmission complete.							   *
************************************************************************************/
VOID HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
	if(hi2c->Instance == I2C3)
	{

	}
	else
	{
		/* do nothing */
	}
}
/***********************************************************************************
* END OF HAL_I2C_MemTxCpltCallback										           *
************************************************************************************/
/***********************************************************************************
* Function: HAL_I2C_MemRxCpltCallback										       *
* Description: Handler memory receiving complete.							       *
************************************************************************************/
VOID HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
	if(hi2c->Instance == I2C3)
	{

	}
	else
	{
		/* do nothing */
	}
}
/***********************************************************************************
* END OF HAL_I2C_MemRxCpltCallback										           *
************************************************************************************/
/***********************************************************************************
* Function: HAL_I2C_MasterTxCpltCallback										   *
* Description: Handler master transmission complete.							   *
************************************************************************************/
VOID HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
	if(hi2c->Instance == I2C1)
	{
		xTaskResumeFromISR(I2C_ISRHandle);
	}
	else
	{
		/* do nothing */
	}
}
/***********************************************************************************
* END OF HAL_I2C_MasterTxCpltCallback										       *
************************************************************************************/
/***********************************************************************************
* Function: HAL_I2C_ErrorCallback										   		   *
* Description: Handler error callback.									           *
************************************************************************************/
VOID HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
	if(hi2c->Instance == I2C1)
	{
		/* Store the fault. */
		uint32 receivedValue = HAL_I2C_GetError(hi2c);
		/* Process the fault. */
		switch(receivedValue)
		{
			case HAL_I2C_ERROR_NONE:
				break;
			case HAL_I2C_ERROR_BERR:
				SystemManager_Fault[I2C_ERROR_BERR_ONE] = I2C_ERROR_BERR_ONE;
				I2c_DeInit(I2C_CHANNEL_ONE);
				I2c_Init(I2C_CHANNEL_ONE);
				break;
			case HAL_I2C_ERROR_ARLO:
				SystemManager_Fault[I2C_ERROR_ARLO_ONE] = I2C_ERROR_ARLO_ONE;
				I2c_DeInit(I2C_CHANNEL_ONE);
				I2c_Init(I2C_CHANNEL_ONE);
				break;
			case HAL_I2C_ERROR_AF:
				SystemManager_Fault[I2C_ERROR_AF_ONE] = I2C_ERROR_AF_ONE;
				I2c_DeInit(I2C_CHANNEL_ONE);
				I2c_Init(I2C_CHANNEL_ONE);
				break;
			case HAL_I2C_ERROR_OVR:
				SystemManager_Fault[I2C_ERROR_OVR_ONE] = I2C_ERROR_OVR_ONE;
				I2c_DeInit(I2C_CHANNEL_ONE);
				I2c_Init(I2C_CHANNEL_ONE);
				break;
			case HAL_I2C_ERROR_DMA:
				SystemManager_Fault[I2C_ERROR_DMA_ONE] = I2C_ERROR_DMA_ONE;
				I2c_DeInit(I2C_CHANNEL_ONE);
				I2c_Init(I2C_CHANNEL_ONE);
				break;
			case HAL_I2C_ERROR_TIMEOUT:
				SystemManager_Fault[I2C_ERROR_TIMEOUT_ONE] = I2C_ERROR_TIMEOUT_ONE;
				I2c_DeInit(I2C_CHANNEL_ONE);
				I2c_Init(I2C_CHANNEL_ONE);
				break;
			case HAL_I2C_ERROR_SIZE:
				SystemManager_Fault[I2C_ERROR_SIZE_ONE] = I2C_ERROR_SIZE_ONE;
				I2c_DeInit(I2C_CHANNEL_ONE);
				I2c_Init(I2C_CHANNEL_ONE);
				break;
			case HAL_I2C_ERROR_DMA_PARAM:
				SystemManager_Fault[I2C_ERROR_DMA_PARAM_ONE] = I2C_ERROR_DMA_PARAM_ONE;
				I2c_DeInit(I2C_CHANNEL_ONE);
				I2c_Init(I2C_CHANNEL_ONE);
				break;
			default:
				break;
		}
	}
	else
	{
		/* do nothing */
	}

	if(hi2c->Instance == I2C3)
	{
		/* Store the fault. */
		uint32 receivedValue = HAL_I2C_GetError(hi2c);
		/* Process the fault. */
		switch(receivedValue)
		{
			case HAL_I2C_ERROR_NONE:
				break;
			case HAL_I2C_ERROR_BERR:
				SystemManager_Fault[I2C_ERROR_BERR_THREE] = I2C_ERROR_BERR_THREE;
				I2c_DeInit(I2C_CHANNEL_THREE);
				I2c_Init(I2C_CHANNEL_THREE);
				break;
			case HAL_I2C_ERROR_ARLO:
				SystemManager_Fault[I2C_ERROR_ARLO_THREE] = I2C_ERROR_ARLO_THREE;
				I2c_DeInit(I2C_CHANNEL_THREE);
				I2c_Init(I2C_CHANNEL_THREE);
				break;
			case HAL_I2C_ERROR_AF:
				SystemManager_Fault[I2C_ERROR_AF_THREE] = I2C_ERROR_AF_THREE;
				I2c_DeInit(I2C_CHANNEL_THREE);
				I2c_Init(I2C_CHANNEL_THREE);
				break;
			case HAL_I2C_ERROR_OVR:
				SystemManager_Fault[I2C_ERROR_OVR_THREE] = I2C_ERROR_OVR_THREE;
				I2c_DeInit(I2C_CHANNEL_THREE);
				I2c_Init(I2C_CHANNEL_THREE);
				break;
			case HAL_I2C_ERROR_DMA:
				SystemManager_Fault[I2C_ERROR_DMA_THREE] = I2C_ERROR_DMA_THREE;
				I2c_DeInit(I2C_CHANNEL_THREE);
				I2c_Init(I2C_CHANNEL_THREE);
				break;
			case HAL_I2C_ERROR_TIMEOUT:
				SystemManager_Fault[I2C_ERROR_TIMEOUT_THREE] = I2C_ERROR_TIMEOUT_THREE;
				I2c_DeInit(I2C_CHANNEL_THREE);
				I2c_Init(I2C_CHANNEL_THREE);
				break;
			case HAL_I2C_ERROR_SIZE:
				SystemManager_Fault[I2C_ERROR_SIZE_THREE] = I2C_ERROR_SIZE_THREE;
				I2c_DeInit(I2C_CHANNEL_THREE);
				I2c_Init(I2C_CHANNEL_THREE);
				break;
			case HAL_I2C_ERROR_DMA_PARAM:
				SystemManager_Fault[I2C_ERROR_DMA_PARAM_THREE] = I2C_ERROR_DMA_PARAM_THREE;
				I2c_DeInit(I2C_CHANNEL_THREE);
				I2c_Init(I2C_CHANNEL_THREE);
				break;
			default:
				break;
		}
	}
	else
	{
		/* do nothing */
	}
}
/***********************************************************************************
* END OF HAL_I2C_ErrorCallback										           	   *
************************************************************************************/
/***********************************************************************************
* Function: I2c_Init										   			           *
* Description: Handler initialization.									           *
************************************************************************************/
StdReturnType I2c_Init(uint8 I2c_Channel)
{
	/* Initialize the protocol on the respective channel. */
	if(I2c_Channel == I2C_CHANNEL_ONE)
	{
		hi2c1.Instance = I2C1;
		hi2c1.Init.ClockSpeed = 100000;
		hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
		hi2c1.Init.OwnAddress1 = 0;
		hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
		hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
		hi2c1.Init.OwnAddress2 = 0;
		hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
		hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
		if (HAL_I2C_Init(&hi2c1) != HAL_OK)
		{
			HAL_I2C_ErrorCallback(&hi2c1);
		}
		else
		{
			/* do nothing */
		}
	}
	else if(I2c_Channel == I2C_CHANNEL_THREE)
	{
		hi2c3.Instance = I2C3;
		hi2c3.Init.ClockSpeed = 400000;
		hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
		hi2c3.Init.OwnAddress1 = 0;
		hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
		hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
		hi2c3.Init.OwnAddress2 = 0;
		hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
		hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
		if (HAL_I2C_Init(&hi2c3) != HAL_OK)
		{
			HAL_I2C_ErrorCallback(&hi2c3);
		}
		else
		{
			/* do nothing */
		}
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
}
/***********************************************************************************
* END OF I2c_Init										           	               *
************************************************************************************/
/***********************************************************************************
* Function: I2c_DeInit										   			           *
* Description: Handler de-initialization.									       *
************************************************************************************/
StdReturnType I2c_DeInit(uint8 I2c_Channel)
{
	/* De-initialize the protocol on the respective channel. */
	if(I2c_Channel == I2C_CHANNEL_ONE)
	{
		HAL_I2C_DeInit(&hi2c1);
	}
	else if(I2c_Channel == I2C_CHANNEL_THREE)
	{
		HAL_I2C_DeInit(&hi2c3);
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
}
/***********************************************************************************
* END OF I2c_DeInit										           	               *
************************************************************************************/
/***********************************************************************************
* Function: I2c_MainFunction										   			   *
* Description: Handler main function.									           *
************************************************************************************/
VOID I2c_MainFunction()
{
	uint32 localStatusOne = HAL_I2C_GetState(&hi2c1);
	uint32 localStatusThree = HAL_I2C_GetState(&hi2c3);
	I2cExtEeprom_ReadAll();
	I2cExtEeprom_WriteAll();
	/* Process channel one. */
	switch(localStatusOne)
	{
		case HAL_I2C_STATE_RESET:
			I2c_BswState_ChannelOne = localStatusOne;
			I2c_Init(I2C_CHANNEL_ONE);
			break;
		case HAL_I2C_STATE_READY:
			I2c_BswState_ChannelOne = localStatusOne;
			break;
		case HAL_I2C_STATE_BUSY:
			I2c_BswState_ChannelOne = localStatusOne;
			break;
		case HAL_I2C_STATE_BUSY_TX:
			I2c_BswState_ChannelOne = localStatusOne;
			break;
		case HAL_I2C_STATE_BUSY_RX:
			I2c_BswState_ChannelOne = localStatusOne;
			break;
		case HAL_I2C_STATE_TIMEOUT:
			I2c_BswState_ChannelOne = localStatusOne;
			HAL_I2C_ErrorCallback(&hi2c1);
			break;
		case HAL_I2C_STATE_ERROR:
			I2c_BswState_ChannelOne = localStatusOne;
			HAL_I2C_ErrorCallback(&hi2c1);
			break;
		default:
			break;
	}
	/* Process channel two. */
	switch(localStatusThree)
	{
		case HAL_I2C_STATE_RESET:
			I2c_BswState_ChannelThree = localStatusThree;
			I2c_Init(I2C_CHANNEL_THREE);
			break;
		case HAL_I2C_STATE_READY:
			I2c_BswState_ChannelThree = localStatusThree;
			break;
		case HAL_I2C_STATE_BUSY:
			I2c_BswState_ChannelThree = localStatusThree;
			NvM_BswState = 0x02;
			break;
		case HAL_I2C_STATE_BUSY_TX:
			I2c_BswState_ChannelThree = localStatusThree;
			break;
		case HAL_I2C_STATE_BUSY_RX:
			I2c_BswState_ChannelThree = localStatusThree;
			break;
		case HAL_I2C_STATE_TIMEOUT:
			I2c_BswState_ChannelThree = localStatusThree;
			HAL_I2C_ErrorCallback(&hi2c3);
			break;
		case HAL_I2C_STATE_ERROR:
			I2c_BswState_ChannelThree = localStatusThree;
			HAL_I2C_ErrorCallback(&hi2c3);
			break;
		default:
			break;
	}
}
/***********************************************************************************
* END OF I2c_MainFunction										           	       *
************************************************************************************/
