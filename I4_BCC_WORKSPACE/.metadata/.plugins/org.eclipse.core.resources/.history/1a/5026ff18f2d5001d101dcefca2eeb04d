/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Inter Integrated Circuit       *
* 		  External Eeprom Driver         *
******************************************/
/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "I2cExtEeprom.h"
#include "math.h"
#include "string.h"
#include "stdint.h"
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		DEFINES					 		 *
******************************************/
#define I2C_EXTEEPROM_ADDR 			0xA0
#define I2C_EXTEEPROM_PAGE_SIZE 	64
#define I2C_EXTEEPROM_PAGE_NUM  	512
/*****************************************
* 		END OF DEFINES					 *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
STATIC uint8 I2cExtEeprom_BytesTemp[4];
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Function declaration for initialization. */
VOID I2cExtEeprom_Init();
/* Function declaration for de-initialization. */
VOID I2cExtEeprom_DeInit();
/* Function declaration for the main function. */
VOID I2cExtEeprom_MainFunction();
/* Function declaration for writing into memory. */
VOID I2cExtEeprom_Write (uint16 page, uint16 offset, uint8 *data, uint16 size);
/* Function declaration for reading from memory. */
VOID I2cExtEeprom_Read (uint16 page, uint16 offset, uint8 *data, uint16 size);
/* Function declaration for erasing a page from memory. */
VOID I2cExtEeprom_PageErase (uint16 page);
STATIC uint16 I2cExtEeprom_BytesToWrite (uint16 size, uint16 offset);
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/

uint16_t I2cExtEeprom_BytesToWrite (uint16_t size, uint16_t offset)
{
	if((size + offset) < PAGE_SIZE)
	{
		return size;
	}
	else
	{
		return PAGE_SIZE - offset;
	}
}

VOID I2cExtEeprom_Init()
{

}

VOID I2cExtEeprom_DeInit()
{

}

VOID I2cExtEeprom_MainFunction()
{

}

VOID I2cExtEeprom_Write (uint16 page, uint16 offset, uint8 *data, uint16 size)
{
	uint32 paddrposition = log(PAGE_SIZE) / log(2);
	uint16 startPage = page;
	uint16 endPage = page + ((size + offset) / PAGE_SIZE);
	uint16 numofpages = (endPage - startPage) + 1;
	uint16 pos = 0;
	for (uint8 i = 0; i < numofpages; i++)
	{
		uint16 MemAddress = startPage << paddrposition | offset;
		uint16 bytesremaining = I2cExtEeprom_BytesToWrite(size, offset);
		HAL_I2C_Mem_Write_IT(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining);
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
		startPage = startPage + 1;
		offset = 0;
		size = size - bytesremaining;
		pos = pos+ bytesremaining;
	}
}

VOID I2cExtEeprom_Read (uint16 page, uint16 offset, uint8 *data, uint16 size)
{
	uint32 paddrposition = log(PAGE_SIZE) / log(2);
	uint16 startPage = page;
	uint16 endPage = page + ((size + offset) / PAGE_SIZE);
	uint16 numofpages = (endPage - startPage) + 1;
	uint16 pos = 0;

	for (uint i = 0; i < numofpages; i++)
	{
		uint16 MemAddress = startPage << paddrposition | offset;
		uint16 bytesremaining = I2cExtEeprom_BytesToWrite(size, offset);
		HAL_I2C_Mem_Read_IT(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining);
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
		startPage = startPage + 1;
		offset = 0;
		size = size - bytesremaining;
		pos = pos + bytesremaining;
	}
}

VOID I2cExtEeprom_PageErase (uint16 page)
{
	int paddrposition = log(PAGE_SIZE) / log(2);
	uint16 MemAddress = page << paddrposition;

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);

	// write the data to the EEPROM
	HAL_I2C_Mem_Write_IT(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE);
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
}
