#include "CenLoc.h"
#include "stdio.h"
#include "string.h"
#include "stdlib.h"
#include "ExtLights.h"
#include "IntLights.h"
#include "SecAlm.h"
#include "Std_Types.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

uint8_t PrevState_UserButton = 0;
uint8_t NextState_UserButton = 0;
uint8_t CurrentState_UserButton = 0;
uint8_t CurrentState_Alarm_Buzzer = 0;
uint8_t CurrentState_Alarm_LED = 0;


void SecAlm_MainFunction()
{
	/* TODO: Implement vibration sensor in order
		 * 		 to trigger the ALARM_BUZZER and
		 * 		 ALARM_LED in case of theft.
		 */

	uint8_t AlarmCount = 0;



	if(BTCenLoc == 1 && AlarmCount < 2)
	{
		if(AlarmCount == 2)
		{
			HAL_TIM_Base_Stop_IT(&htim2);
		}
		else
		{
			/* do nothing */
		}

		HAL_TIM_Base_Start_IT(&htim2);
		CurrentState_Alarm_LED = STD_LOW;
		SecAlm_ToggleAlarmLed(CurrentState_Alarm_LED);

		if(BTCenLoc_IrqFlag == 1)
		{
			CurrentState_Alarm_Buzzer = STD_HIGH;
			SecAlm_ToggleAlarmBuzzer(CurrentState_Alarm_Buzzer);
			AlarmCount++;
		}
		else if(BTCenLoc_IrqFlag == 0)
		{
			CurrentState_Alarm_Buzzer = STD_LOW;
			SecAlm_ToggleAlarmBuzzer(CurrentState_Alarm_Buzzer);
		}
	}
}

uint8_t SecAlm_Init()
{
	PrevState_UserButton = STD_LOW;
	NextState_UserButton = STD_LOW;
	CurrentState_UserButton = STD_LOW;
	CurrentState_Alarm_Buzzer = STD_LOW;
	CurrentState_Alarm_LED = STD_LOW;


	return E_OK;
}

void SecAlm_ToggleAlarmBuzzer(uint8_t PinState)
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, PinState);
}

void SecAlm_ToggleAlarmLed(uint8_t PinState)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, PinState);
}
