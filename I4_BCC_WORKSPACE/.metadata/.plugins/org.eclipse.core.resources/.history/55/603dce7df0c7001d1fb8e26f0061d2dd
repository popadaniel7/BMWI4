#include "FlsEeprom.h"
#include "math.h"
#include "string.h"
#include "cmsis_os.h"
#include "SystemManager.h"
#include "NvM.h"

void FlsEeprom_Write(uint16 page, uint16 offset, uint8 *data, uint16 size);
void FlsEeprom_Read(uint16 page, uint16 offset, uint8 *data, uint16 size);
void FlsEeprom_PageErase(uint16 page);
void FlsEeprom_WriteNum(uint16 page, uint16 offset, float  fdata);
float FlsEeprom_ReadNum(uint16 page, uint16 offset);
void FlsEeprom_FloatToBytes(uint8* ftoa_bytes_temp, float float_variable);
float FlsEeprom_BytesToFloat(uint8* ftoa_bytes_temp);
uint16 FlsEeprom_BytesToWrite(uint16 size, uint16 offset);

#define EEPROM_I2C &hi2c1
#define EEPROM_ADDR 0xA0
#define PAGE_SIZE 64
#define PAGE_NUM  512

uint8 bytes_temp[4];

uint16 FlsEeprom_BytesToWrite(uint16 size, uint16 offset)
{

	if ((size + offset) < PAGE_SIZE)
	{

		return size;

	}
	else
	{

		return PAGE_SIZE-offset;

	}

}

void FlsEeprom_Write(uint16 page, uint16 offset, uint8 *data, uint16 size)
{

	int paddrposition = log(PAGE_SIZE) / log(2);
	uint16 startPage = page;
	uint16 endPage = page + ((size + offset) / PAGE_SIZE);
	uint16 numofpages = (endPage - startPage) + 1;
	uint16 pos = 0;



	for (int i = 0; i < numofpages; i++)
	{

		uint16 MemAddress = startPage << paddrposition | offset;
		uint16 bytesremaining = FlsEeprom_BytesToWrite(size, offset);

		HAL_I2C_Mem_Write_IT(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining);

		startPage += 1;
		offset = 0;
		size = size-bytesremaining;
		pos += bytesremaining;

		HAL_Delay(5);

	}

}

void FlsEeprom_FloatToBytes(uint8* ftoa_bytes_temp, float float_variable)
{

    union
	{

      float a;
      uint8_t bytes[4];

    } stmem;

    stmem.a = float_variable;

    for (uint8 i = 0; i < 4; i++)
    {

      ftoa_bytes_temp[i] = stmem.bytes[i];

    }

}

float FlsEeprom_BytesTofloat(uint8* ftoa_bytes_temp)
{

    union
	{

      float a;
      uint8_t bytes[4];

    } stmem;

    for (uint8 i = 0; i < 4; i++)
    {

    	stmem.bytes[i] = ftoa_bytes_temp[i];

    }

   float float_variable =  stmem.a;

   return float_variable;

}

void FlsEeprom_Write_Num(uint16 page, uint16 offset, float data)
{

	FlsEeprom_FloatToBytes(bytes_temp, data);

	FlsEeprom_Write(page, offset, bytes_temp, 4);

}

float FlsEeprom_Read_Num(uint16 page, uint16 offset)
{
	uint8_t buffer[4];

	FlsEeprom_Read(page, offset, buffer, 4);

	return (FlsEeprom_BytesToFloat(buffer));

}

void FlsEeprom_Read(uint16 page, uint16 offset, uint8*data, uint16 size)
{

	int paddrposition = log(PAGE_SIZE) / log(2);
	uint16 startPage = page;
	uint16 endPage = page + ((size + offset) / PAGE_SIZE);
	uint16 numofpages = (endPage-startPage) + 1;
	uint16 pos = 0;

	for (int i = 0; i < numofpages; i++)
	{

		uint16 MemAddress = startPage << paddrposition | offset;
		uint16 bytesremaining =  FlsEeprom_BytesToWrite(size, offset);

		HAL_I2C_Mem_Read_IT(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining);

		startPage += 1;
		offset = 0;
		size = size - bytesremaining;
		pos += bytesremaining;

	}

}

void FlsEeprom_PageErase(uint16 page)
{

	int paddrposition = log(PAGE_SIZE) / log(2);
	uint16 MemAddress = page << paddrposition;
	uint8 data[PAGE_SIZE];

	memset(data,0xff,PAGE_SIZE);
	HAL_I2C_Mem_Write_IT(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE);

	HAL_Delay(5);

}
