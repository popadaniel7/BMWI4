/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Security Alarm	     		 *
******************************************/
/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "PortH.h"
#include "AdcH.h"
#include "SecAlm.h"
#include "Rte.h"
/*****************************************
		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
/* Variable for security alarm trigger. */
uint8 SecAlm_Trigger;
/* Variable for pin state of buzzer and light control. */
uint8 SecAlm_PinStateChange;
/* Variable for timer counter of alarm sequence. */
uint8 SecAlm_TriggerIRQCounterForTimer4;
/* Variable for vibration sensor activation counter. */
uint16 SecAlm_SensorStatusCounter;
/* Variable for vibration sensor status. */
uint16 SecAlm_SensorStatus;
/* Variable for the previous state of the security alarm trigger. */
uint8 SecAlm_TriggerPreviousState;
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
uint32 SecAlm_VibSenReadSensorValue();
/* Vibration sensor status processing function declaration.*/
StdReturnType SecAlm_VibSenStatus();
/* Security alarm application initialization function declaration. */
StdReturnType SecAlm_Init();
/* Security alarm application main function declaration. */
void SecAlm_MainFunction();
/* Alarm buzzer trigger function declaration. */
void SecAlm_ToggleAlarmBuzzer(uint8 PinState);
/* Alarm LED trigger function declaration. */
void SecAlm_ToggleAlarmLed(uint8 PinState);
/* Alarm buzzer and light control function declaration. */
void SecAlm_LightsBuzzerControl();
/* Light control function declaration. */
void SecAlm_TurnOnExtLights();
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/***********************************************************************************
* Function: SecAlm_LightsBuzzerControl										       *
* Description: Controls the lights and buzzer in case of alarm trigger. 		   *
************************************************************************************/
void SecAlm_LightsBuzzerControl()
{
	/* Local variable for sensor status. */
	uint32 sensorStatus = STD_LOW;
	/* Get the sensor status. */
	sensorStatus = SecAlm_VibSenStatus();
	/* If the trigger was previously on and now it is off.*/
	if(SecAlm_TriggerPreviousState != SecAlm_Trigger && !SecAlm_Trigger)
	{
		/* Reset the counter. */
		SecAlm_TriggerIRQCounterForTimer4 = STD_LOW;
	}
	else
	{
		/* do nothing */
	}

	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
	{
		SecAlm_TriggerPreviousState 		= SecAlm_Trigger;
		CenLoc_Tim3IRQFlag 					= STD_HIGH;
		CenLoc_Tim11IRQFlag 				= STD_LOW;
		SecAlm_Trigger 						= STD_LOW;
		SecAlm_PinStateChange 				= STD_LOW;
		SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
		SecAlm_SensorStatusCounter 			= STD_LOW;
		SecAlm_SensorStatus 				= STD_LOW;
		SecAlm_SensorStatusCounter 			= STD_LOW;
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmAlarm_TimerHandle);
		SecAlm_TurnOnExtLights();
	}
	else
	{
		/* do nothing */
	}
	if(SecAlm_SensorStatusCounter == STD_LOW)
	{
		sensorStatus 	= STD_LOW;
		SecAlm_Trigger 	= STD_LOW;
		SecAlm_PinStateChange = STD_LOW;
	}
	else
	{
		/* do nothing */
	}

	if(sensorStatus == STD_HIGH)
	{
		SecAlm_Trigger = STD_HIGH;
	}
	else
	{
		/* do nothing */
	}

	if(SecAlm_Trigger == STD_HIGH)
	{
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmAlarm_TimerHandle, 10000);
		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
		{
			SecAlm_PinStateChange = STD_HIGH;
			SecAlm_TurnOnExtLights();
		}
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
		{
			SecAlm_PinStateChange = STD_LOW;
			SecAlm_TurnOnExtLights();
		}
		else
		{
			/* do nothing */
		}
	}
	else if(SecAlm_Trigger == STD_LOW)
	{
		SecAlm_ToggleAlarmBuzzer(STD_LOW);
	}
	else
	{
		/* do nothing */
	}
}
/***********************************************************************************
* END OF SecAlm_LightsBuzzerControl										           *
************************************************************************************/
/***********************************************************************************
* Function: SecAlm_VibSenReadSensorValue										   *
* Description: Reads the vibration sensor value									   *
************************************************************************************/
uint32 SecAlm_VibSenReadSensorValue()
{
	uint32 sensorValue = STD_LOW;
	Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA(&hadc1, Adc_ChannelOne_Buffer, ADC_BUFFER_LENGTH);
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&sensorValue, RTE_P_ADC_BUFFER_VIBSEN);
	return sensorValue;
}
/***********************************************************************************
* END OF SecAlm_LightsBuzzerControl										           *
************************************************************************************/
/***********************************************************************************
* Function: SecAlm_VibSenStatus										               *
* Description: Updates the vibration sensor status based on measurements.		   *
************************************************************************************/
StdReturnType SecAlm_VibSenStatus()
{
	uint16 sensorValue 		= STD_LOW;
	uint16 sensorStatus 	= STD_LOW;
	sensorValue = SecAlm_VibSenReadSensorValue();
	if(sensorValue == 4095)
	{
		SecAlm_SensorStatusCounter = SecAlm_SensorStatusCounter + 1;
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlm_AlarmResetHandle, 10000);
	}
	else
	{
		/* do nothing */
	}
	if(SecAlm_SensorStatusCounter >= 500)
	{
		sensorStatus = STD_HIGH;
	}
	else if(SecAlm_SensorStatusCounter < 500)
	{
		sensorStatus = STD_LOW;
	}
	else
	{
		/* do nothing */
	}

	return sensorStatus;
}

/***********************************************************************************
* END OF SecAlm_VibSenStatus										               *
************************************************************************************/
/***********************************************************************************
* Function: SecAlm_TurnOnExtLights										           *
* Description: Trigger the exterior lights and buzzer.							   *
************************************************************************************/
void SecAlm_TurnOnExtLights()
{
//	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_LowBeam(SecAlm_PinStateChange);
//	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_RearPositionLight(SecAlm_PinStateChange);
//	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_FrontFogLight(SecAlm_PinStateChange);
//	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_RearFogLight(SecAlm_PinStateChange);
//	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_TurnSignalRight(SecAlm_PinStateChange);
//	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_TurnSignalLeft(SecAlm_PinStateChange);
	SecAlm_ToggleAlarmBuzzer(SecAlm_PinStateChange);
}
/***********************************************************************************
* END OF SecAlm_TurnOnExtLights										               *
************************************************************************************/
/***********************************************************************************
* Function: SecAlm_MainFunction										           	   *
* Description: Process application states.										   *
************************************************************************************/
void SecAlm_MainFunction()
{
	SecAlm_LightsBuzzerControl();
}
/***********************************************************************************
* END OF SecAlm_MainFunction										               *
************************************************************************************/
/***********************************************************************************
* Function: SecAlm_Init										                       *
* Description: Initialize the application.										   *
************************************************************************************/
StdReturnType SecAlm_Init()
{
	SecAlm_Trigger 						= STD_LOW;
	SecAlm_PinStateChange 				= STD_LOW;
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
	SecAlm_SensorStatusCounter 			= STD_LOW;
	SecAlm_SensorStatus 				= STD_LOW;
	return E_OK;
}

/***********************************************************************************
* END OF SecAlm_Init										                       *
************************************************************************************/
/***********************************************************************************
* Function: SecAlm_ToggleAlarmBuzzer										       *
* Description: Alarm buzzer trigger.                                               *
************************************************************************************/
void SecAlm_ToggleAlarmBuzzer(uint8 PinState)
{
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
}
/***********************************************************************************
* END OF SecAlm_ToggleAlarmBuzzer										           *
************************************************************************************/
/***********************************************************************************
* Function: SecAlm_ToggleAlarmLed										           *
* Description: Alarm LED trigger.												   *
************************************************************************************/
void SecAlm_ToggleAlarmLed(uint8 PinState)
{
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
}
/***********************************************************************************
* END OF SecAlm_ToggleAlarmLed										               *
************************************************************************************/
