#include "BTC.h"
#include "CenLoc.h"
#include "IntLights.h"
#include "ExtLights.h"
#include "usart.h"

uint8 BtcReceivedDataOnBluetooth;
uint8 BtcReceivedDataIRQ;

StdReturnType BtcInit()
{
	BtcReceivedDataOnBluetooth 	= STD_LOW;
	BtcReceivedDataIRQ 			= STD_LOW;

	return E_OK;
}

StdReturnType BtcRxVal()
{

	uint8 status = STD_LOW;

	if(BtcReceivedDataOnBluetooth > 255)
	{

		status = E_NOT_OK;

	}
	else if(BtcReceivedDataOnBluetooth < 255)
	{

		status = E_OK;

	}
	else
	{

		/* do nothing */

	}

	switch(BtcReceivedDataOnBluetooth)
	{
		case BtcRxCenLocOn:

			BtcCenLoc = STD_HIGH;

			break;

		case BtcRxCenLocOff:

			BtcCenLoc = STD_LOW;

			break;

		case BtcRxLowBeamOn:

			BtcLowBeam = STD_HIGH;

			break;

		case BtcRxLowBeamOff:

			BtcLowBeam = STD_LOW;

			break;

		case BtcRxHighBeamOn:

			BtcHighBeam = STD_HIGH;

			break;

		case BtcRxHighBeamOff:

			BtcHighBeam = STD_LOW;

			break;

		case BtcRxFlashHighBeamOn:

			/* to be implemented */

			break;

		case BtcRxFlashHighBeamOff:

			/* to be implemented */

			break;

		case BtcRxTurnSignalLeftOn:

			BtcTurnSignalLeft = STD_HIGH;

			break;

		case BtcRxTurnSignalLeftOff:

			BtcTurnSignalLeft = STD_LOW;

			break;

		case BtcRxTurnSignalRightOn:

			BtcTurnSignalRight = STD_HIGH;

			break;

		case BtcRxTurnSignalRightOff:

			BtcTurnSignalRight = STD_LOW;

			break;

		case BtcRxHazardLightOn:

			BtcHazardLight = STD_HIGH;

			break;

		case BtcRxHazardLightOff:

			BtcHazardLight = STD_LOW;

			break;

		case BtcRxFogLightFrontOn:

			BtcFogLightFront = STD_HIGH;

			break;

		case BtcRxFogLightFrontOff:

			BtcFogLightFront = STD_LOW;

			break;

		case BtcRxFogLightRearOn:

			BtcFogLightRear = STD_HIGH;

			break;

		case BtcRxFogLightRearOff:

			BtcFogLightRear = STD_LOW;

			break;

		case BtcRxBrakeLightsOn:

			BtcBrakeLight = STD_HIGH;

			break;

		case BtcRxBrakeLightsOff:

			BtcBrakeLight = STD_LOW;

			break;

		case BtcRxPositionRearLightsOn:

			BtcPositionLightRear = STD_HIGH;

			break;

		case BtcRxPositionRearLightsOff:

			BtcPositionLightRear = STD_LOW;

			break;

		case BtcRxInteriorLightsOn:

			BtcIntLights = STD_HIGH;

			break;

		case BtcRxInteriorLightsOff:

			BtcIntLights = STD_LOW;

			break;

		default:

			break;

	}

	return status;

}

StdReturnType BtcEnableUart()
{

	uint8 status = STD_LOW;

	if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) != E_NOT_OK)
	{
		HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
		status = E_OK;
	}
	else if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) == E_NOT_OK)
	{
		status = E_NOT_OK;
	}
	else
	{
		/* do nothing */
	}

	return status;

}

void BtcMainFunction()
{
	uint8 status;

	if(BtcEnableUart() == E_NOT_OK)
	{

		status = E_NOT_OK;

	}
	else if(BtcEnableUart() == E_OK)
	{

		status = E_OK;

	}
	else
	{

		/* do nothing */

	}

	if(status == E_OK)
	{

		if(BtcRxVal() == E_NOT_OK)
		{

			/* set dtc */

		}
		else if(BtcRxVal() == E_OK)
		{

			BtcRxVal();

		}
		else
		{
			/* do nothing */
		}

	}
	else if(status == E_NOT_OK)
	{

		/* set dtc */

	}
	else
	{

		/* do nothing */

	}

}
