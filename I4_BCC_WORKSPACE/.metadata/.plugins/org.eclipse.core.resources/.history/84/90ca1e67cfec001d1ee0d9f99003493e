/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Inter Integrated Circuit       *
* 		  External Eeprom Driver         *
******************************************/
/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "I2cExtEeprom.h"
#include "math.h"
#include "string.h"
#include "stdint.h"
#include "Btc.h"
#include "ExtLights.h"
#include "Hvac.h"
#include "CenLoc.h"
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		DEFINES					 		 *
******************************************/
/* Memory page size. */
#define I2C_EXTEEPROM_PAGE_SIZE 	64
/* Memory number of pages. */
#define I2C_EXTEEPROM_PAGE_NUM  	512
/*****************************************
* 		END OF DEFINES					 *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
STATIC uint8 firstRun = STD_LOW;
STATIC uint8 ArrayReadAll[50] = {STD_LOW};
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Function declaration for initialization. */
StdReturnType I2cExtEeprom_Init();
/* Function declaration for de-initialization. */
StdReturnType I2cExtEeprom_DeInit();
/* Function declaration for writing into memory. */
VOID I2cExtEeprom_Write(uint16 page, uint16 offset, uint8 *data, uint16 size);
/* Function declaration for reading from memory. */
VOID I2cExtEeprom_Read(uint16 page, uint16 offset, uint8 *data, uint16 size);
/* Function declaration for erasing a page from memory. */
VOID I2cExtEeprom_PageErase(uint16 page);
/* Function declaration for returning the bytes that need to be written.  */
STATIC uint16 I2cExtEeprom_BytesToWrite(uint16 size, uint16 offset);
/* Function declaration for read all. */
VOID I2cExtEeprom_ReadAll();
/* Function declaration for write all. */
VOID I2cExtEeprom_WriteAll();
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/***********************************************************************************
* Function: I2cExtEeprom_ReadAll						    		               *
* Description: Returns the bytes that need to be written.					       *
************************************************************************************/
VOID I2cExtEeprom_ReadAll()
{
	if(firstRun == STD_LOW)
	{
		I2cExtEeprom_Read(0, 0, ArrayReadAll, 50);
		firstRun = STD_HIGH;
	}
	else
	{
		/* do nothing */
	}
}
/***********************************************************************************
* END OF I2cExtEeprom_ReadAll										               *
************************************************************************************/
/***********************************************************************************
* Function: I2cExtEeprom_WriteAll										   	       *
* Description: Driver initialization.									           *
************************************************************************************/
VOID I2cExtEeprom_WriteAll()
{
	if(ArrayReadAll[0] != Btc_CenLoc)
	{
		I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
		ArrayReadAll[0] = Btc_CenLoc;
	}
	else
	{
		/* do nothing */
	}

	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}

	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}

	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}
	if(ArrayReadAll[0] != Btc_CenLoc)
		{
			I2cExtEeprom_Write(0, 0, &ArrayReadAll[0], 1);
			ArrayReadAll[0] = Btc_CenLoc;
		}
		else
		{
			/* do nothing */
		}



}
/***********************************************************************************
* END OF I2cExtEeprom_WriteAll										               *
************************************************************************************/
/***********************************************************************************
* Function: I2cExtEeprom_BytesToWrite						    		           *
* Description: Returns the bytes that need to be written.					       *
************************************************************************************/
uint16 I2cExtEeprom_BytesToWrite(uint16 size, uint16 offset)
{
	/* Returns the number of bytes to write into memory. */
	if((size + offset) < I2C_EXTEEPROM_PAGE_SIZE)
	{
		return size;
	}
	else
	{
		return I2C_EXTEEPROM_PAGE_SIZE - offset;
	}
}
/***********************************************************************************
* END OF I2cExtEeprom_BytesToWrite										           *
************************************************************************************/
/***********************************************************************************
* Function: I2cExtEeprom_Init										   			   *
* Description: Driver initialization.									           *
************************************************************************************/
StdReturnType I2cExtEeprom_Init()
{
	/* Initialize the driver. */
	return E_OK;
}
/***********************************************************************************
* END OF I2cExtEeprom_Init										           	       *
************************************************************************************/
/***********************************************************************************
* Function: I2cExtEeprom_DeInit										   			   *
* Description: Driver de-initialization.									       *
************************************************************************************/
StdReturnType I2cExtEeprom_DeInit()
{
	/* De-initialize the driver. */
	return E_OK;
}
/***********************************************************************************
* END OF I2cExtEeprom_DeInit										           	   *
************************************************************************************/
/***********************************************************************************
* Function: I2cExtEeprom_Write										   			   *
* Description: Driver write to memory function.									   *
************************************************************************************/
VOID I2cExtEeprom_Write(uint16 page, uint16 offset, uint8 *data, uint16 size)
{
	uint32 paddrposition = log(I2C_EXTEEPROM_PAGE_SIZE) / log(2);
	uint16 startPage = page;
	uint16 endPage = page + ((size + offset) / I2C_EXTEEPROM_PAGE_SIZE);
	uint16 numofpages = (endPage - startPage) + 1;
	uint16 pos = 0;
	for (uint8 i = 0; i < numofpages; i++)
	{
		uint16 MemAddress = startPage << paddrposition | offset;
		uint16 bytesremaining = I2cExtEeprom_BytesToWrite(size, offset);
		HAL_I2C_Mem_Write_IT(&hi2c3, I2C_EXTEEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining);
		startPage = startPage + 1;
		offset = 0;
		size = size - bytesremaining;
		pos = pos+ bytesremaining;
		HAL_Delay(5);
	}
}
/***********************************************************************************
* END OF I2cExtEeprom_Write										           	       *
************************************************************************************/
/***********************************************************************************
* Function: I2cExtEeprom_Read										   			   *
* Description: Driver read from memory function.								   *
************************************************************************************/
VOID I2cExtEeprom_Read(uint16 page, uint16 offset, uint8 *data, uint16 size)
{
	uint32 paddrposition = log(I2C_EXTEEPROM_PAGE_SIZE) / log(2);
	uint16 startPage = page;
	uint16 endPage = page + ((size + offset) / I2C_EXTEEPROM_PAGE_SIZE);
	uint16 numofpages = (endPage - startPage) + 1;
	uint16 pos = 0;
	for (uint8 i = 0; i < numofpages; i++)
	{
		uint16 MemAddress = startPage << paddrposition | offset;
		uint16 bytesremaining = I2cExtEeprom_BytesToWrite(size, offset);
		HAL_I2C_Mem_Read_IT(&hi2c3, I2C_EXTEEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining);
		startPage = startPage + 1;
		offset = 0;
		size = size - bytesremaining;
		pos = pos + bytesremaining;
		HAL_Delay(5);
	}
}
/***********************************************************************************
* END OF I2cExtEeprom_Read										           	       *
************************************************************************************/
/***********************************************************************************
* Function: I2cExtEeprom_PageErase										   		   *
* Description: Driver memory page erasing.									       *
************************************************************************************/
VOID I2cExtEeprom_PageErase(uint16 page)
{
	uint32 paddrposition = log(I2C_EXTEEPROM_PAGE_SIZE) / log(2);
	uint16 MemAddress = page << paddrposition;
	uint8 data[I2C_EXTEEPROM_PAGE_SIZE];
	memset(data, 0xff, I2C_EXTEEPROM_PAGE_SIZE);
	HAL_I2C_Mem_Read_IT(&hi2c3, I2C_EXTEEPROM_ADDR, MemAddress, 2, data, I2C_EXTEEPROM_PAGE_SIZE);
	HAL_Delay(5);
}
/***********************************************************************************
* END OF I2cExtEeprom_PageErase										           	   *
************************************************************************************/
