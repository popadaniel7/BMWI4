#include "tim.h"
#include "CenLoc.h"
#include "stdio.h"
#include "string.h"
#include "stdlib.h"
#include "ExtLights.h"
#include "IntLights.h"
#include "SecAlm.h"
#include "Std_Types.h"
#include "usart.h"
#include "gpio.h"
#include "BTC.h"

uint8 SecAlm_Trigger;
uint8 SecAlm_PinStateChange;
uint8 SecAlm_TriggerIRQCounterForTimer4;
uint8 SecAlm_IsAlmOnFlag;
uint32 SecAlm_VibSenStatusFlag;

StdReturnType SecAlmVibSenStatus();
StdReturnType SecAlmVibeSenReadPin();
StdReturnType SecAlmInit();
void SecAlmMainFunction();
void SecAlmToggleAlarmBuzzer(uint8 PinState);
void SecAlmToggleAlarmLed(uint8 PinState);
void SecAlmState();
void SecAlmLightsBuzzerControl();
void SecAlmTurnOnExtLights();

StdReturnType SecAlmVibeSenReadPin()
{

	uint8 PinState = 0;

	PinState = HAL_GPIO_ReadPin(SECALM_VIBSEN_PORT, SECALM_VIBSEN_PIN);

	return PinState;

}

StdReturnType SecAlmVibSenStatus()
{

	uint8 status = STD_LOW;

	SecAlm_VibSenStatusFlag = SecAlmVibeSenReadPin();

	if(SecAlm_VibSenStatusFlag >= 1000)
	{

		status = STD_HIGH;

	}
	else
	{
		/* do nothing */
	}

	return status;

}

void SecAlmState()
{

	if(SecAlmVibSenStatus() == STD_HIGH && CenLoc_CurrentState == STD_LOW)
	{

		SecAlm_Trigger = STD_HIGH;
		HAL_TIM_Base_Init(&htim4);

	}
	else
	{

		/* do nothing */

	}

}

void SecAlmTurnOnExtLights()
{

	ExtLightsLowBeam(SecAlm_PinStateChange);
	ExtLightsRearPositionLight(SecAlm_PinStateChange);
	ExtLightsFrontFogLight(SecAlm_PinStateChange);
	ExtLightsRearFogLight(SecAlm_PinStateChange);
	ExtLightsTurnSignalRight(SecAlm_PinStateChange);
	ExtLightsTurnSignalLeft(SecAlm_PinStateChange);

}

//void SecAlmLightsBuzzerControl()
//{
//
//	if(SecAlm_Trigger == STD_HIGH)
//	{
//
//		HAL_TIM_Base_Start_IT(&htim5);
//
//		if(SecAlm_TriggerIRQFlagForTimer5 == 1)
//		{
//
//			HAL_TIM_Base_Start_IT(&htim4);
//
//			if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
//			{
//
//				SecAlm_PinStateChange = STD_HIGH;
//				SecAlmToggleAlarmBuzzer(SecAlm_PinStateChange);
//				SecAlmTurnOnExtLights();
//
//			}
//			else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
//			{
//
//				SecAlm_PinStateChange = STD_LOW;
//				SecAlmToggleAlarmBuzzer(SecAlm_PinStateChange);
//				SecAlmTurnOnExtLights();
//
//			}
//			else
//			{
//
//				/* do nothing */
//
//			}
//
//		}
//		else if(SecAlm_TriggerIRQFlagForTimer5 == 2 || SecAlm_TriggerIRQCounterForTimer4 == 20)
//		{
//
//			SecAlm_Trigger = STD_LOW;
//			HAL_TIM_Base_Stop_IT(&htim5);
//
//		}
//		else
//		{
//
//			/* do nothing */
//
//		}
//
//	}
//	else if(SecAlm_Trigger == STD_LOW && SecAlm_TriggerIRQCounterForTimer4 != 0)
//	{
//
//		HAL_TIM_Base_Stop_IT(&htim4);
//		SecAlm_PinStateChange = STD_LOW;
//		SecAlm_VibSenStatusFlag = STD_LOW;
//		SecAlmTurnOnExtLights();
//		CenLoc_Tim3IRQFlag = 1;
//		CenLoc_Tim11IRQFlag = 0;
//	}
//	else
//	{
//
//		/* do nothing */
//
//	}
//
//}

void SecAlmLightsBuzzerControl()
{

	if(SecAlm_Trigger == STD_LOW)
	{

		SecAlmInit();

	}
	else
	{

		/* do nothing */

	}

	if(SecAlm_Trigger == STD_HIGH)
	{
		HAL_TIM_Base_Start_IT(&htim4);

		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
		{

			SecAlm_PinStateChange = STD_HIGH;
			SecAlmToggleAlarmBuzzer(SecAlm_PinStateChange);
			SecAlmTurnOnExtLights();

		}
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
		{

			SecAlm_PinStateChange = STD_LOW;
			SecAlmToggleAlarmBuzzer(SecAlm_PinStateChange);
			SecAlmTurnOnExtLights();

		}
		else
		{

			/* do nothing */

		}

	}
	else
	{

		/* do nothing */

	}

	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
	{

		HAL_TIM_Base_Stop_IT(&htim4);
		SecAlm_PinStateChange = STD_LOW;
		SecAlm_VibSenStatusFlag = STD_LOW;
		SecAlmTurnOnExtLights();
		CenLocInit();

	}
	else
	{

		/* do nothing */

	}

}

void SecAlmMainFunction()
{

	SecAlmState();
	SecAlmLightsBuzzerControl();

}

StdReturnType SecAlmInit()
{

	SecAlm_Trigger					 	= STD_LOW;
	SecAlm_PinStateChange 				= STD_LOW;
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
	SecAlm_IsAlmOnFlag 					= STD_LOW;
	SecAlm_VibSenStatusFlag 			= STD_LOW;

	HAL_TIM_Base_Init(&htim4);

	return E_OK;

}

void SecAlmToggleAlarmBuzzer(uint8 PinState)
{

	HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);

}

void SecAlmToggleAlarmLed(uint8 PinState)
{

	HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);

}
