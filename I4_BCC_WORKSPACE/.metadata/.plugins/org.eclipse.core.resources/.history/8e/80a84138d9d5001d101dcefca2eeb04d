/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Parking Distance Control 	     *
******************************************/
/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "Pdc.h"
#include "Rte.h"
#include "PortH.h"
#include "SystemManager.h"
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		DEFINES					 		 *
******************************************/
#define PDCR_REQUEST 				0x02
#define PDCF_REQUEST 				0x03
#define PDC_MAX_DISTANCE			75
#define PDC_FIRST_SAFE_DISTANCE		50
#define PDC_SECOND_SAFE_DISTANCE	35
#define PDC_THIRD_SAFE_DISTANCE		20
#define PDC_FOURTH_SAFE_DISTANCE	10
/*****************************************
* 		END OF DEFINES					 *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
/* Variable to store rear distance. */
uint8 Pdc_Rear_Distance;
/* Variable to store front distance. */
uint8 Pdc_Front_Distance;
/* Variable to store the rear buzzer counter. */
uint8 Pdc_Rear_BuzzerOsCounter;
/* Variable to store the front buzzer counter. */
uint8 Pdc_Front_BuzzerOsCounter;
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Initialization function declaration. */
StdReturnType Pdc_Init();
/* De-initialization function declaration. */
StdReturnType Pdc_DeInit();
/* Main function declaration. */
VOID Pdc_MainFunction();
/* Distance process data function declaration. */
VOID Pdc_Rear_ProcessData();
/* Distance process data function declaration. */
VOID Pdc_Front_ProcessData();
/* Buzzer control function declaration. */
VOID Pdc_Rear_TriggerBuzzer();
/* Buzzer control function declaration. */
VOID Pdc_Front_TriggerBuzzer();
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/***********************************************************************************
* Function: Pdc_Init													   		   *
* Description: Initialize the application.				 		                   *
************************************************************************************/
StdReturnType Pdc_Init()
{
	return E_OK;
}
/***********************************************************************************
* END OF Pdc_Init											  			   	       * 		   																	       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Pdc_DeInit													   	       *
* Description: De-initialize application.		   			                       *
************************************************************************************/
StdReturnType Pdc_DeInit()
{
	return E_OK;
}
/***********************************************************************************
* END OF Pdc_DeInit											  			   	       * 		   																	       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Pdc_MainFunction													   *
* Description: Main function application. 		   			                       *
************************************************************************************/
VOID Pdc_MainFunction()
{
	Pdc_Rear_ProcessData();
	Pdc_Front_ProcessData();
}
/***********************************************************************************
* END OF Pdc_MainFunction											  			   * 		   																	       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Pdc_Rear_ProcessData												   *
* Description: Process distance data.		   			                           *
************************************************************************************/
VOID Pdc_Rear_ProcessData()
{
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(PDCR_REQUEST);
	Pdc_Rear_Distance = Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour;
	if(Pdc_Rear_Distance < PDC_MAX_DISTANCE)
	{
		Pdc_Rear_TriggerBuzzer();
	}
	else
	{
		/* do nothing */
	}
}
/***********************************************************************************
* END OF Pdc_Rear_ProcessData											  		   * 		   																	       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Pdc_Front_ProcessData												   *
* Description: Process distance data. 		   			                           *
************************************************************************************/
VOID Pdc_Front_ProcessData()
{
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(PDCF_REQUEST);
	Pdc_Front_Distance = Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree;
	if(Pdc_Front_Distance < PDC_MAX_DISTANCE)
	{
		Pdc_Front_TriggerBuzzer();
	}
	else
	{
		/* do nothing */
	}
}
/***********************************************************************************
* END OF Pdc_Front_ProcessData											  		   * 		   																	       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Pdc_Rear_TriggerBuzzer												   *
* Description: Control buzzer.		   			                                   *
************************************************************************************/
VOID Pdc_Rear_TriggerBuzzer()
{
/* TODO: check all the project for os timer handle and update with rte */
/* TODO: add rte r/w for timer callback variables */
	if(Pdc_Rear_Distance < PDC_MAX_DISTANCE && Pdc_Rear_Distance > PDC_FIRST_SAFE_DISTANCE)
	{
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcR_Buzzer_TimerHandle) == 0)
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, 750);
			Pdc_Rear_BuzzerOsCounter = 0;
			Rte_Write_Os_OsPort_Os_Pdc_Front_Counter(&Pdc_Rear_BuzzerOsCounter);
		}
		else
		{
			/* do nothing */
		}
		if(Pdc_Rear_BuzzerOsCounter == 1)
		{
			Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN, STD_HIGH);
		}
		else if(Pdc_Rear_BuzzerOsCounter == 0)
		{
			Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN, STD_LOW);
		}

	}
	else if(Pdc_Rear_Distance < PDC_FIRST_SAFE_DISTANCE && Pdc_Rear_Distance > PDC_SECOND_SAFE_DISTANCE)
	{
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcR_Buzzer_TimerHandle) == 0)
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, 500);
		}
		else
		{
			/* do nothing */
		}
	}
	else if(Pdc_Rear_Distance < PDC_SECOND_SAFE_DISTANCE && Pdc_Rear_Distance > PDC_THIRD_SAFE_DISTANCE)
	{
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcR_Buzzer_TimerHandle) == 0)
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, 250);
		}
		else
		{
			/* do nothing */
		}
	}
	else if(Pdc_Rear_Distance < PDC_THIRD_SAFE_DISTANCE && Pdc_Rear_Distance > PDC_FOURTH_SAFE_DISTANCE)
	{
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcR_Buzzer_TimerHandle) == 0)
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, 125);
		}
		else
		{
			/* do nothing */
		}
	}
	else if(Pdc_Rear_Distance < PDC_FOURTH_SAFE_DISTANCE)
	{

	}
	else
	{
		/* do nothing */
	}
}
/***********************************************************************************
* END OF Pdc_Rear_TriggerBuzzer											  		   * 		   																	       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Pdc_Front_TriggerBuzzer												   *
* Description: Control buzzer		   			   								   *
************************************************************************************/
VOID Pdc_Front_TriggerBuzzer()
{
	if(Pdc_Front_Distance < PDC_MAX_DISTANCE && Pdc_Front_Distance > PDC_FIRST_SAFE_DISTANCE)
	{
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcF_Buzzer_TimerHandle) == 0)
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, 750);
		}
		else
		{
			/* do nothing */
		}
	}
	else if(Pdc_Front_Distance < PDC_FIRST_SAFE_DISTANCE && Pdc_Front_Distance > PDC_SECOND_SAFE_DISTANCE)
	{
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcF_Buzzer_TimerHandle) == 0)
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, 500);
		}
		else
		{
			/* do nothing */
		}
	}
	else if(Pdc_Front_Distance < PDC_SECOND_SAFE_DISTANCE && Pdc_Front_Distance > PDC_THIRD_SAFE_DISTANCE)
	{
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcF_Buzzer_TimerHandle) == 0)
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, 250);
		}
		else
		{
			/* do nothing */
		}
	}
	else if(Pdc_Front_Distance < PDC_THIRD_SAFE_DISTANCE && Pdc_Front_Distance > PDC_FOURTH_SAFE_DISTANCE)
	{
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcF_Buzzer_TimerHandle) == 0)
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, 125);
		}
		else
		{
			/* do nothing */
		}
	}
	else if(Pdc_Front_Distance < PDC_FOURTH_SAFE_DISTANCE)
	{

	}
	else
	{
		/* do nothing */
	}
}
/***********************************************************************************
* END OF Pdc_Front_TriggerBuzzer											  	   * 		   																	       																	   *
************************************************************************************/
