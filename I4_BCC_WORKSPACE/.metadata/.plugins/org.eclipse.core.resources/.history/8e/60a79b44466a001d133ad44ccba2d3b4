#include "CenLoc.h"
#include "stdio.h"
#include "string.h"
#include "stdlib.h"
#include "ExtLights.h"
#include "IntLights.h"
#include "SecAlm.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

uint8_t CurrentState_Door;
uint8_t CurrentState_CenLoc;
uint8_t BTCenLoc;
uint8_t BTCenLoc_IrqFlag;
uint8_t CenLoc_PrevState;
uint32_t TimeStampAlarm;
uint32_t TimeStampExtLights;
uint32_t TimeStampAlarmLed;
uint32_t SecondTimeStampAlarm;
uint32_t SecondTimeStampExtLights;
uint32_t SecondTimeStampAlarmLed;

//__HAL_TIM_GET_COUNTER(&htim2);

void CenLoc_MainFunction()
{
	if(CenLoc_PrevState != CurrentState_CenLoc)
	{
		CenLoc_PrevState = CurrentState_CenLoc;
		AlarmCount1 = 0;
		AlarmCount2 = 0;
	}
	else
	{
		/* do nothing */
	}

	if(CurrentState_CenLoc == STD_HIGH)
	{

		BTCenLoc = STD_HIGH;

		IntLights_Toggle_IntLights(CurrentState_CenLoc);
		CenLoc_Toggle_Door_LED(CurrentState_CenLoc);
		SecAlm_ToggleAlarmLed(!CurrentState_CenLoc);

		/* turn signals */
		if(AlarmCount1 < 4)
		{
			HAL_TIM_Base_Start(&htim2);
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
			{
				ExtLights_TurnSignalLeft(CurrentState_CenLoc);
				ExtLights_TurnSignalRight(CurrentState_CenLoc);
				SecAlm_ToggleAlarmBuzzer(CurrentState_CenLoc);
			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
			{
				ExtLights_TurnSignalLeft(!CurrentState_CenLoc);
				ExtLights_TurnSignalRight(!CurrentState_CenLoc);
				SecAlm_ToggleAlarmBuzzer(!CurrentState_CenLoc);
			}
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
			{
				ExtLights_TurnSignalLeft(CurrentState_CenLoc);
				ExtLights_TurnSignalRight(CurrentState_CenLoc);
				SecAlm_ToggleAlarmBuzzer(CurrentState_CenLoc);
			}
			else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
			{
				ExtLights_TurnSignalLeft(!CurrentState_CenLoc);
				ExtLights_TurnSignalRight(!CurrentState_CenLoc);
				SecAlm_ToggleAlarmBuzzer(!CurrentState_CenLoc);
				AlarmCount1++;
			}
			else
			{
				/* do nothing */
			}
		}
		else
		{
			/* do nothing */
		}
	}
}

uint8_t CenLoc_Init()
{
	CurrentState_Door = STD_LOW;
	CurrentState_CenLoc = STD_LOW;
	BTCenLoc = STD_LOW;
	TimeStampAlarm = STD_LOW;
	TimeStampExtLights = STD_LOW;
	TimeStampAlarmLed = STD_LOW;
	SecondTimeStampAlarm = STD_LOW;
	SecondTimeStampExtLights = STD_LOW;
	SecondTimeStampAlarmLed = STD_LOW;

	return E_OK;
}

void CenLoc_Toggle_Door_LED(uint8_t PinState)
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, PinState);
}

