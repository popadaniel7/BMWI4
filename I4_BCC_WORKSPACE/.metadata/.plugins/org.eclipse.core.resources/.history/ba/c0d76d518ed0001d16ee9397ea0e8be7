/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Exterior Lights	     		 *
******************************************/
/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "TimH.h"
#include "CenLoc.h"
#include "ExtLights.h"
#include "SecAlm.h"
#include "PortH.h"
#include "AdcH.h"
#include "Btc.h"
#include "Rte.h"
/*****************************************
		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
/* Variable for the current state of reverse light. */
uint8 ExtLights_ReverseLight_CurrentState;
/* Variable for the current state of flashing the high beam. */
uint8 ExtLights_FlashHighBeam_CurrentState;
/* Variable for the current state of brake light. */
uint8 ExtLights_BrakeLight_CurrentState;
/* Variable for the current state of light switch. */
uint8 ExtLights_LightsSwitch_CurrentState;
/* Variable for the current state of high beam. */
uint8 ExtLights_HighBeam_CurrentState;
/* Variable for the current state of front fog light. */
uint8 ExtLights_FrontFogLight_CurrentState;
/* Variable for the current state of left turn signals. */
uint8 ExtLights_TurnSignalLeft_CurrentState;
/* Variable for the current state of right turn signals. */
uint8 ExtLights_TurnSignalRight_CurrentState;
/* Variable for the current state of hazard lights. */
uint8 ExtLights_HazardLight_CurrentState;
/* Variable for the current state of rear fog lights. */
uint8 ExtLights_RearFogLight_CurrentState;
/* Variable for the right turn signal previous state. */
uint8 ExtLights_RTS_PrevState;
/* Variable for the left turn signal previous state. */
uint8 ExtLights_LTS_PrevState;
/* Variable for the hazard light previous state. */
uint8 ExtLights_HL_PrevState;
/* Variable for the right turn signal counter flag. */
uint32 ExtLights_RTSFlag;
/* Variable for the left turn signal counter flag. */
uint32 ExtLights_LTSFlag;
/* Variable for the hazard light counter flag. */
uint32 ExtLights_HLFlag;
/* Static variable for sensor state. */
static uint8 lightSensorState;
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Exterior lights main function declaration. */
void ExtLights_MainFunction();
/* High beam trigger function declaration. */
void ExtLights_HighBeam(uint8 PinState);
/* Reverse light trigger function declaration. */
void ExtLights_ReverseLight(uint8 PinState);
/* Lights states processing function declaration. */
void ExtLights_LightState();
/* Turn signals and hazard lights control function declaration. */
void ExtLights_TurnSignalHazardLight();
/* Light switch control function declaration. */
void ExtLights_LightSwitchMode();
/* Turn signals and hazard lights current and previous state processing function declaration. */
void ExtLights_PrevStateTSHL();
/* Exterior lights application initialization function declaration .*/
StdReturnType ExtLights_Init();
uint32 ExtLights_LightReadSensorValue();
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/***********************************************************************************
* Function: ExtLights_TurnSignalHazardLight										   *
* Description: Process the turn signals and hazard lights states. 		   		   *
************************************************************************************/
void ExtLights_TurnSignalHazardLight()
{
	/* If the turn signal left is set on. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
	{
		/* Check if the timer related to the turn signals is off. */
		if(osTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
		{
			/* Start the timer with the designated periodicity. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
		}
		else
		{
			/* do nothing */
		}

		if(ExtLights_LTSFlag % 2 == 0)
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_3);
		}
		else if(ExtLights_LTSFlag % 2 == STD_HIGH)
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_3);
		}
		else
		{
			/* do nothing */
		}
	}
	else
	{
		/* do nothing */
	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
	{
		if(osTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_RTSFlag % 2 == STD_LOW)
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4);
		}
		else if(ExtLights_RTSFlag % 2 == STD_HIGH)
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_4);
		}
		else
		{
			/* do nothing */
		}
	}
	else
	{
		/* do nothing */
	}

	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
	{
		if(osTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
		}
		else
		{
			/* do nothing */
		}
		if(ExtLights_HLFlag % 2 == STD_LOW)
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_3);
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4);
		}
		else if(ExtLights_HLFlag % 2 == STD_HIGH)
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_3);
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_4);
		}
		else
		{
			/* do nothing */
		}
	}
	else
	{
		/* do nothing */
	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_4);
	}
	else
	{
		/* do nothing */
	}

	if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_3);
	}
	else
	{
		/* do nothing */
	}
}
/***********************************************************************************
* END OF ExtLights_TurnSignalHazardLight										   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: ExtLights_PrevStateTSHL										           *
* Description: Checks the current state and previous state of turn signals and     *
* 			   hazard lights. 		   											   *
************************************************************************************/
void ExtLights_PrevStateTSHL()
{
	if(ExtLights_TurnSignalLeft_CurrentState != ExtLights_LTS_PrevState)
	{
		ExtLights_LTS_PrevState = ExtLights_TurnSignalLeft_CurrentState;
		ExtLights_LTSFlag = 0;
		Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag(&ExtLights_LTSFlag);
	}
	else
	{
		/* do nothing */
	}

	if(ExtLights_TurnSignalRight_CurrentState != ExtLights_RTS_PrevState)
	{
		ExtLights_RTS_PrevState = ExtLights_TurnSignalRight_CurrentState;
		ExtLights_RTSFlag = 0;
		Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag(&ExtLights_RTSFlag);
	}
	else
	{
		/* do nothing */
	}

	if(ExtLights_HazardLight_CurrentState != ExtLights_HL_PrevState)
	{
		ExtLights_HL_PrevState = ExtLights_HazardLight_CurrentState;
		ExtLights_HLFlag = 0;
		Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag(&ExtLights_HLFlag);
	}
	else
	{
		/* do nothing */
	}
}
/***********************************************************************************
* END OF ExtLights_PrevStateTSHL										   		   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: ExtLights_LightState										   		   *
* Description: Controls the lights states.								 		   *
************************************************************************************/
void ExtLights_LightState()
{
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
	{
		if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_LOW && ExtLights_LightsSwitch_CurrentState == STD_LOW)
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_3);
			TIM2->CCR1 = 0;
			TIM2->CCR2 = 0;
			TIM2->CCR3 = 0;
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_FollowMeHome_TimerHandle);
	}
	else
	{
		/* do nothing */
	}

	if( ExtLights_ReverseLight_CurrentState == STD_HIGH ||
		ExtLights_BrakeLight_CurrentState == STD_HIGH ||
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
		ExtLights_FrontFogLight_CurrentState == STD_HIGH ||
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
		ExtLights_HazardLight_CurrentState == STD_HIGH ||
		ExtLights_RearFogLight_CurrentState == STD_HIGH)
	{
		CenLoc_FollowMeHomeState = STD_LOW;
		CenLoc_Tim5IRQFlag = 2;
	}
	else
	{
		/* do nothing */
	}

	if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_HIGH)
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_3);
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4);
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_LOW)
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_3);
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_4);
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 2 || Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 4)
	{
		ExtLights_TurnSignalHazardLight();
	}
	else
	{
		/* do nothing */
	}

	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
	{
		ExtLights_LightSwitchMode();
	}
	else
	{
		/* do nothing */
	}

	if(ExtLights_HighBeam_CurrentState != STD_HIGH)
	{
		ExtLights_HighBeam(ExtLights_FlashHighBeam_CurrentState);
	}
	else
	{
		/* do nothing */
	}

	if(ExtLights_BrakeLight_CurrentState == STD_HIGH)
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
	}
	else if(ExtLights_BrakeLight_CurrentState == STD_LOW)
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_2);
		TIM3->CCR2 = 0;
	}
	else
	{
		/* do nothing */
	}

	if(ExtLights_RearFogLight_CurrentState == STD_HIGH)
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
	}
	else if(ExtLights_RearFogLight_CurrentState == STD_LOW)
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_4);
		TIM3->CCR4 = 0;
	}
	else
	{
		/* do nothing */
	}

	if(ExtLights_FrontFogLight_CurrentState == STD_HIGH)
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
	}
	else if(ExtLights_FrontFogLight_CurrentState == STD_LOW)
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_3);
		TIM3->CCR3 = 0;
	}
	else
	{
		/* do nothing */
	}
	ExtLights_ReverseLight(ExtLights_ReverseLight_CurrentState);
	ExtLights_HighBeam(ExtLights_HighBeam_CurrentState);
}
/***********************************************************************************
* END OF ExtLights_LightState										   			   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: ExtLights_MainFunction										   		   *
* Description: Exterior lights application main function. Controls application	   *
* 			   states. 		   													   *
************************************************************************************/
void ExtLights_MainFunction()
{
	ExtLights_LightState();
	ExtLights_PrevStateTSHL();
}
/***********************************************************************************
* END OF ExtLights_MainFunction										   			   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: ExtLights_LightSwitchMode										   	   *
* Description: Control the light switch.								 		   *
************************************************************************************/
void ExtLights_LightSwitchMode()
{
	switch(ExtLights_LightsSwitch_CurrentState)
	{
		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:
			break;
		case EXTLIGHTS_LIGHTSWITCH_STATEONE:
			lightSensorState = ExtLights_LightReadSensorValue();
			if(lightSensorState == STD_HIGH)
			{
			}
			else if(lightSensorState == STD_LOW)
			{
			}
			break;
		case EXTLIGHTS_LIGHTSWITCH_STATETWO:
			break;
		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:
			break;
		default:
			break;
	}
}
/***********************************************************************************
* END OF ExtLights_LightSwitchMode										   		   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: ExtLights_Init										   				   *
* Description: Intialize the application variables to 0. 		   				   *
************************************************************************************/
StdReturnType ExtLights_Init()
{
	ExtLights_ReverseLight_CurrentState 		= STD_LOW;
	ExtLights_BrakeLight_CurrentState 			= STD_LOW;
	ExtLights_FlashHighBeam_CurrentState 		= STD_LOW;
	ExtLights_LightsSwitch_CurrentState 		= STD_LOW;
	ExtLights_HighBeam_CurrentState 			= STD_LOW;
	ExtLights_FrontFogLight_CurrentState 		= STD_LOW;
	ExtLights_TurnSignalLeft_CurrentState 		= STD_LOW;
	ExtLights_TurnSignalRight_CurrentState 		= STD_LOW;
	ExtLights_HazardLight_CurrentState 			= STD_LOW;
	ExtLights_RearFogLight_CurrentState 		= STD_LOW;
	ExtLights_RTSFlag 							= STD_LOW;
	ExtLights_LTSFlag 							= STD_LOW;
	ExtLights_HLFlag 							= STD_LOW;
	return E_OK;
}
/***********************************************************************************
* END OF ExtLights_Init										   					   *													       																	   *
************************************************************************************/
uint32 ExtLights_LightReadSensorValue()
{
	uint8 sensorStatus = STD_LOW;
	uint32 sensorValue  = STD_LOW;
	Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA(&hadc1, Adc_ChannelOne_Buffer, ADC_BUFFER_LENGTH);
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&sensorValue, RTE_P_ADC_BUFFER_LIGHTSEN);
	if(sensorValue < 4000)
	{
		sensorStatus = STD_LOW;
	}
	else if(sensorValue > 4000)
	{
		sensorStatus = STD_HIGH;
	}
	else
	{
		/* do nothing */
	}
	return sensorStatus;
}
/***********************************************************************************
* Function: ExtLights_HighBeam										   			   *
* Description: High beam trigger. 		  										   *
************************************************************************************/
void ExtLights_HighBeam(uint8 PinState)
{
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
}
/***********************************************************************************
* END OF ExtLights_HighBeam										   				   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: ExtLights_ReverseLight										   		   *
* Description: Reverse light trigger. 		   									   *
************************************************************************************/
void ExtLights_ReverseLight(uint8 PinState)
{
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
}
/***********************************************************************************
* END OF ExtLights_ReverseLight										   			   *													       																	   *
************************************************************************************/
