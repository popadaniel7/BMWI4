#include "HVAC.h"

uint8 HVAC_CurrentState;
uint8 HVAC_TemperatureValue;
uint8 HVAC_FanValue;
uint8 HVAC_LegVents_CurrentState;
uint8 HVAC_MidVents_CurrentState;
uint8 HVAC_WindshieldVents_CurrentState;
uint8 HVAC_WindshieldDefrost_CurrentState;
uint8 HVAC_AC_CurrentState;
uint8 HVAC_AutomaticMode_CurrentState;
uint8 HVAC_RecirculationMode_CurrentState;
uint8 HVAC_BackwindowDefrost_CurrentState;
uint8 Btc_TemperatureValue;
uint8 Btc_FanValue;
uint8 Btc_LegVents;
uint8 Btc_MidVents;
uint8 Btc_WindshieldVents;
uint8 Btc_WindshieldDefrost;
uint8 Btc_BackwindowDefrost;
uint8 Btc_AC;
uint8 Btc_AutomaticMode;
uint8 Btc_RecirculationMode;
uint8 Btc_NormalMode;

StdReturnType HVACInit();
void HVACMainFunction();
void HVACState();
void HVACI2cTxToLcd();

void HVACI2cTxToLcd()
{

	/*
	 * 		Character to be displayed on LCD list:
	 * 		L 	= leg vent
	 * 		M 	= mid vent
	 * 		W 	= windshield vent
	 * 		AC 	= AC on
	 * 		WD 	= windshield defrost
	 *      (A)	= automatic recirculation mode
	 *      (C) = manual recirculation mode
	 *      show nothing = no recirculation
	 *      F=x = fan value
	 *      T=x = temperature value
	 *      AUTO = automatic mode
	 *      BD = backwindow defrost
	 *
	 */

}

void HVACMainFunction()
{

	HVACI2cTxToLcd();
	HVACState();

}

void HVACState()
{

	if(HVAC_CurrentState == STD_LOW)
	{

		lcd_clear();

	}
	else
	{

		/* do nothing */

	}

	if(Btc_TemperatureValue != STD_LOW)
	{

		HVAC_TemperatureValue = Btc_TemperatureValue;

	}
	else if(Btc_Temperature == STD_LOW)
	{

		Btc_Temperature = 22;
		Btc_FanValue = 1;

	}
	else
	{

		/* do nothing */

	}

	if(Btc_FanValue == STD_LOW)
	{

		HVAC_CurrentState = STD_LOW;

	}
	else if(Btc_FanValue != STD_LOW)
	{

		HVAC_CurrentState = STD_HIGH;
		HVAC_FanValue = Btc_FanValue;

	}
	else
	{

		/* do nothing */

	}

	HVAC_BackwindowDefrost_CurrentState 	= Btc_BackwindowDefrost;
	HVAC_AC_CurrentState 					= Btc_AC;
	HVAC_RecirculationMode_CurrentState 	= Btc_RecirculationMode;

	if(Btc_AutomaticMode == STD_HIGH)
	{

		HVAC_AutomaticMode_CurrentState 		= STD_HIGH;
		HVAC_WindshieldDefrost_CurrentState 	= STD_LOW;
		HVAC_WindshieldVents_CurrentState 		= STD_LOW;
		HVAC_MidVents_CurrentState 				= STD_LOW;
		HVAC_LegVents_CurrentState 				= STD_LOW;

		if(HVAC_TemperatureValue < TemSenRxTemperature)
		{

			if((TemSenRxTemperature - HVAC_TemperatureValue) * 2 > 7)
			{

				HVAC_FanValue = 7;

			}
			else if((TemSenRxTemperature - HVAC_TemperatureValue) * 2 <= 7)
			{

				HVAC_FanValue = (TemSenRxTemperature - HVAC_TemperatureValue) * 2;

			}
			else
			{

				/* do nothing */

			}

		}
		else if(HVAC_TemperatureValue >= TemSenRxTemperature)
		{

			if((TemSenRxTemperature - HVAC_TemperatureValue) / 2 < 1)
			{

				HVAC_FanValue = 1;

			}
			else if((TemSenRxTemperature - HVAC_TemperatureValue) / 2 > 1)
			{

				HVAC_FanValue = (TemSenRxTemperature - HVAC_TemperatureValue) / 2;

			}
			else
			{

				/* do nothing */

			}

		}

	}
	else if(Btc_NormalMode == STD_HIGH)
	{

		HVAC_AutomaticMode_CurrentState 		= STD_LOW;
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
		HVAC_WindshieldVents_CurrentState 		= Btc_WindshieldVents;
		HVAC_MidVents_CurrentState 				= Btc_MidVents;
		HVAC_LegVents_CurrentState 				= Btc_LegVents;

	}
	else
	{

		/* do nothing */

	}

	if(Btc_LegVents = STD_HIGH)
	{

		Btc_AutomaticMode = STD_LOW;
		HVAC_LegVents_CurrentState = Btc_LegVents;

	}
	else if(Btc_LegVents = STD_LOW)
	{

		Btc_AutomaticMode = STD_LOW;
		HVAC_LegVents_CurrentState = Btc_LegVents;

	}
	else
	{

		/* do nothing */

	}

	if(Btc_MidVents = STD_HIGH)
	{

		Btc_AutomaticMode = STD_LOW;
		HVAC_MidVents_CurrentState = Btc_MidVents;

	}
	else if(Btc_MidVents = STD_LOW)
	{

		Btc_AutomaticMode = STD_LOW;
		HVAC_MidVents_CurrentState = Btc_MidVents;

	}
	else
	{

		/* do nothing */

	}

	if(Btc_WindshieldVents = STD_HIGH)
	{

		Btc_AutomaticMode = STD_LOW;
		HVAC_WindshieldVents_CurrentState = Btc_WindshieldVents;

	}
	else if(Btc_WindshieldVents = STD_LOW)
	{

		Btc_AutomaticMode = STD_LOW;
		HVAC_WindshieldVents_CurrentState = Btc_WindshieldVents;

	}
	else
	{

		/* do nothing */

	}

}

StdReturnType HVACInit()
{

	HVAC_CurrentState					    = STD_HIGH;
	HVAC_TemperatureValue 					= STD_LOW;
	HVAC_FanValue 							= STD_LOW;
	HVAC_LegVents_CurrentState 				= STD_LOW;
	HVAC_MidVents_CurrentState 				= STD_LOW;
	HVAC_WindshieldVents_CurrentState 		= STD_LOW;
	HVAC_WindshieldDefrost_CurrentState 	= STD_LOW;
	HVAC_AC_CurrentState 					= STD_LOW;
	HVAC_AutomaticMode_CurrentState 		= STD_LOW;
	HVAC_RecirculationMode_CurrentState 	= STD_LOW;
	HVAC_BackwindowDefrost_CurrentState     = STD_LOW;
	Btc_TemperatureValue 					= STD_LOW;
	Btc_FanValue 							= STD_LOW;
	Btc_LegVents 							= STD_LOW;
	Btc_MidVents 							= STD_LOW;
	Btc_WindshieldVents 					= STD_LOW;
	Btc_WindshieldDefrost 					= STD_LOW;
	Btc_BackwindowDefrost 					= STD_LOW;
	Btc_AC 									= STD_LOW;
	Btc_AutomaticMode 						= STD_LOW;
	Btc_RecirculationMode 					= STD_LOW;
	Btc_NormalMode							= STD_LOW;

	return E_OK;

}
