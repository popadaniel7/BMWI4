/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Diagnostic Event Manager	     *
******************************************/
/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "Dem.h"
#include "Rte.h"
#include "SystemManager.h"
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		DEFINES					 		 *
******************************************/
/* State define. */
#define DEM_INIT_STATE			0x00
/* State define. */
#define DEM_DEINIT_STATE		0x02
/* State define. */
#define DEM_PROCESSFAULT_STATE 	0x01
/*****************************************
* 		END OF DEFINES					 *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
/* Module state variable. */
uint8 Dem_BswState = STD_LOW;
/* DTC array. */
uint8 Dem_DtcArray[24] = {STD_LOW};
/* Static first run variable. */
static uint8 firstRun = STD_LOW;
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Module initialization. */
StdReturnType Dem_Init();
/* Module de-initialization. */
StdReturnType Dem_DeInit();
/* Module main function. */
VOID Dem_MainFunction();
/* Receive fault from application. */
VOID Dem_ReceiveFault(uint8 faultValue);
/* Process fault from application. */
VOID Dem_ProcessFault();
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/***********************************************************************************
* Function: Dem_Init													           *
* Description: Initialize the module.			       							   *
************************************************************************************/
StdReturnType Dem_Init()
{
	return E_OK;
}
/***********************************************************************************
* END OF Dem_Init											  			           *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Dem_DeInit													           *
* Description: De-initialize the module. 		   							       *
************************************************************************************/
StdReturnType Dem_DeInit()
{
	return E_OK;
}
/***********************************************************************************
* END OF Dem_DeInit											  			           *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Dem_MainFunction													   *
* Description: Module main function.									 		   *
************************************************************************************/
VOID Dem_MainFunction()
{
	switch(Dem_BswState)
	{
		case DEM_INIT_STATE:
			Dem_Init();
			break;
		case DEM_DEINIT_STATE:
			Dem_DeInit();
			break;
		case DEM_PROCESSFAULT_STATE:
			Dem_ProcessFault();
			break;
		default:
			break;
	}
}
/***********************************************************************************
* END OF Dem_MainFunction											  			   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Dem_ReceiveFault													   *
* Description: Receives fault from application.							 		   *
************************************************************************************/
VOID Dem_ReceiveFault(uint8 faultValue)
{
	switch(faultValue)
	{
		case DTC_LOW_BEAM_LEFT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION]++;
			break;
		case DTC_LOW_BEAM_RIGHT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LOW_BEAM_RIGHT_MALFUNCTION]++;
			break;
		case DTC_REAR_POSITION_LIGHT_LEFT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_LEFT_MALFUNCTION]++;
			break;
		case DTC_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION]++;
			break;
		case DTC_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION]++;
			break;
		case DTC_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION]++;
			break;
		case DTC_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION]++;
			break;
		case DTC_LEFT_TURN_SIGNAL_REAR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_REAR_MALFUNCTION]++;
			break;
		case DTC_BRAKE_LIGHT_LEFT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_LEFT_MALFUNCTION]++;
			break;
		case DTC_BRAKE_LIGHT_RIGHT_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_RIGHT_MALFUNCTION]++;
			break;
		case DTC_LIGHT_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LIGHT_SENSOR_MALFUNCTION]++;
			break;
		case DTC_VIBRATION_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_VIBRATION_SENSOR_MALFUNCTION]++;
			break;
		case DTC_AIR_QUALITY_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_AIR_QUALITY_SENSOR_MALFUNCTION]++;
			break;
		case DTC_TEMPERATURE_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_POSITION_DTC_TEMPERATURE_SENSOR_MALFUNCTION]++;
			break;
		case DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION]++;
			break;
		case DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION]++;
			break;
		case DTC_BLUETOOTH_MODULE_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_BLUETOOTH_MODULE_MALFUNCTION]++;
			break;
		case DTC_EXTERNAL_EEPROM_MODULE_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_EXTERNAL_EEPROM_MODULE_MALFUNCTION]++;
			break;
		case DTC_CAN_TRANSCEIVER_MODULE_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_CAN_TRANSCEIVER_MODULE_MALFUNCTION]++;
			break;
		case DTC_CAN_BUS_OFF:
			Dem_DtcArray[POSITION_DTC_CAN_BUS_OFF]++;
			break;
		case DTC_LCD_MODULE_MALFUNCTION:
			Dem_DtcArray[POSITION_DTC_LCD_MODULE_MALFUNCTION]++;
			break;
		case DTC_SOFTWARE_RESET:
			Dem_DtcArray[POSITION_DTC_SOFTWARE_RESET]++;
			break;
		case DTC_HARDWARE_RESET:
			Dem_DtcArray[POSITION_DTC_HARDWARE_RESET]++;
			break;
		case DTC_PERIPHERAL_ERROR:
			Dem_DtcArray[POSITION_DTC_PERIPHERAL_ERROR]++;
			break;
		default:
			break;
	}
}
/***********************************************************************************
* END OF Dem_ReceiveFault											  			   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Dem_ProcessFault													   *
* Description: Process the fault received from the application.			 		   *
************************************************************************************/
VOID Dem_ProcessFault()
{
	if(firstRun == STD_LOW)
	{
		I2cExtEeprom_Read(10, 0, Dem_DtcArray, 24);
		firstRun = STD_HIGH;

		for(uint8 idx = 0; idx < 24; idx++)
		{
			if(Dem_DtcArray[idx] > 254)
			{
				Dem_DtcArray[idx] = 0;
			}
		}
	}
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_LOW)
	{
		Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_LEFT_MALFUNCTION] = 0;
		Dem_DtcArray[POSITION_DTC_BRAKE_LIGHT_RIGHT_MALFUNCTION] = 0;
	}
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearPositionLights_CurrentState == STD_LOW)
	{
		Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_LEFT_MALFUNCTION] = 0;
		Dem_DtcArray[POSITION_DTC_REAR_POSITION_LIGHT_RIGHT_MALFUNCTION] = 0;
	}
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LowBeam_CurrentState == STD_LOW)
	{
		Dem_DtcArray[POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION] = 0;
		Dem_DtcArray[POSITION_DTC_LOW_BEAM_RIGHT_MALFUNCTION] = 0;
	}
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
	{
		Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_FRONT_MALFUNCTION] = 0;
		Dem_DtcArray[POSITION_DTC_LEFT_TURN_SIGNAL_REAR_MALFUNCTION] = 0;
	}
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_LOW)
	{
		Dem_DtcArray[POSITION_DTC_RIGHT_TURN_SIGNAL_FRONT_MALFUNCTION] = 0;
		Dem_DtcArray[POSITION_DTC_RIGHT_TURN_SIGNAL_REAR_MALFUNCTION] = 0;
	}
	else
	{
		/* do nothing */
	}

	for(uint8 index = POSITION_DTC_LOW_BEAM_LEFT_MALFUNCTION; index <)

//	for(uint8 idx = 0; idx < 93; idx++)
//	{
//		if(Dem_ReceivedFaults[idx].value !=  Dem_DtcArray[idx])
//		{
//			Dem_DtcArray[idx] = Dem_ReceivedFaults[idx].value;
//		}
//		else
//		{
//			/* do nothing */
//		}
//
//		if(Dem_DtcArray[idx] != 0)
//		{
//			if(Dem_DtcCount[idx] != Dem_ReceivedFaults[idx].count)
//			{
//				Dem_DtcCount[idx] = Dem_ReceivedFaults[idx].count;
//			}
//			else
//			{
//				/* do nothing */
//			}
//		}
//		else
//		{
//			/* do nothing */
//		}
//	}
//	for(uint8 index = 0; index < 93; index++)
//	{
//		if(Dem_DtcArray[index] != Dem_MemDtcArray[index] && Dem_DtcArray[index] != 0)
//		{
//			//Dem_MemDtcArray[index] = Dem_DtcArray[index];
//			if(index > 63)
//			{
//				//NvM_Write(6, index, &Dem_DtcArray[index], 1);
//			}
//			else if(index <= 63)
//			{
//				//NvM_Write(5, index, &Dem_DtcArray[index], 1);
//			}
//			else
//			{
//				/* do nothing */
//			}
//		}
//		else
//		{
//			/* do nothing */
//		}
//	}
}
/***********************************************************************************
* END OF Dem_ProcessFault											               *													       																	   *
************************************************************************************/
