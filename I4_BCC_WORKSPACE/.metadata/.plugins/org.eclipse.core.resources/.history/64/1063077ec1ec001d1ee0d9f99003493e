/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Diagnostic Control	         *
******************************************/
/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "DiagCtrl.h"
#include "Rte.h"
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		DEFINES					 		 *
******************************************/
/*****************************************
* 		END OF DEFINES					 *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
/* Request value processing variable. */
uint8 DiagCtrl_RequestValue = STD_LOW;
/* Fault value variable. */
uint8 DiagCtrl_FaultValue = STD_LOW;
/* Application state variable. */
uint8 DiagCtrl_ApplState = STD_LOW;
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Initialization function declaration. */
StdReturnType DiagCtrl_Init();
/* De-initialization function declaration. */
StdReturnType DiagCtrl_DeInit();
/* Main function declaration. */
VOID DiagCtrl_MainFunction();
/* Process requested data function declaration. */
VOID DiagCtrl_ProcessRequestedData();
/* Send processed data function declaration. */
VOID DiagCtrl_SendProcessedData();
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/***********************************************************************************
* Function: DiagCtrl_Init										   		   		   *
* Description: Application initialization.		 		   						   *
************************************************************************************/
StdReturnType DiagCtrl_Init()
{
	DiagCtrl_RequestValue 	= STD_LOW;
	DiagCtrl_FaultValue 	= STD_LOW;
	DiagCtrl_ApplState 		= DIAGCTRL_PROCESSDATA_STATE;
	return E_OK;
}
/***********************************************************************************
* END OF DiagCtrl_Init										                       *
************************************************************************************/
/***********************************************************************************
* Function: DiagCtrl_DeInit										   		   		   *
* Description: Application de-initialization.		 		   					   *
************************************************************************************/
StdReturnType DiagCtrl_DeInit()
{
	return E_OK;
}
/***********************************************************************************
* END OF DiagCtrl_DeInit										                   *
************************************************************************************/
/***********************************************************************************
* Function: DiagCtrl_MainFunction										   		   *
* Description: Application main function.		 		   						   *
************************************************************************************/
VOID DiagCtrl_MainFunction()
{
	switch(DiagCtrl_ApplState)
	{
		case DIAGCTRL_INIT_STATE:
			DiagCtrl_Init();
			break;
		case DIAGCTRL_DEINIT_STATE:
			DiagCtrl_DeInit();
			break;
		case DIAGCTRL_PROCESSDATA_STATE:
			DiagCtrl_ProcessRequestedData();
			DiagCtrl_SendProcessedData();
			break;
		default:
			break;
	}
}
/***********************************************************************************
* END OF DiagCtrl_MainFunction										               *
************************************************************************************/
/***********************************************************************************
* Function: DiagCtrl_ProcessRequestedData										   *
* Description: Process the measured requested data.		 		   				   *
************************************************************************************/
VOID DiagCtrl_ProcessRequestedData()
{
	static uint32 LightSensor_RequestedValue = 0;
	static uint32 VibrationSensor_RequestedValue = 0;
	static uint32 AirQualitySensor_RequestedValue = 0;
	static uint32 TemperatureSensor_RequestedValue = 0;
	static uint32 BtcUart_FaultValue_One = 0;
	static uint32 BtcUart_FaultValue_Two = 0;
	static uint32 BtcUart_FaultValue_Three = 0;
	static uint32 BtcUart_FaultValue_Four = 0;
	static uint32 I2cThreeExternalEeeprom_FaultValue_One = 0;
	static uint32 I2cThreeExternalEeeprom_FaultValue_Two = 0;
	static uint32 I2cThreeExternalEeeprom_FaultValue_Three = 0;
	static uint32 I2cThreeExternalEeeprom_FaultValue_Four = 0;
	static uint32 I2cThreeExternalEeeprom_FaultValue_Five = 0;
	static uint32 I2cThreeExternalEeeprom_FaultValue_Six = 0;
	static uint32 I2cThreeExternalEeeprom_FaultValue_Seven = 0;
	static uint32 I2cThreeExternalEeeprom_FaultValue_Eight = 0;
	static uint32 I2cOneLcd_FaultValue_One = 0;
	static uint32 I2cOneLcd_FaultValue_Two = 0;
	static uint32 I2cOneLcd_FaultValue_Three = 0;
	static uint32 I2cOneLcd_FaultValue_Four = 0;
	static uint32 I2cOneLcd_FaultValue_Five = 0;
	static uint32 I2cOneLcd_FaultValue_Six = 0;
	static uint32 I2cOneLcd_FaultValue_Seven = 0;
	static uint32 I2cOneLcd_FaultValue_Eight = 0;
	static uint32 SpiCanTransceiver_FaultValue_One = 0;
	static uint32 SpiCanTransceiver_FaultValue_Two = 0;
	static uint32 SpiCanTransceiver_FaultValue_Three = 0;
	static uint32 SpiCanTransceiver_FaultValue_Four = 0;
	static uint32 SpiCanTransceiver_FaultValue_Five = 0;
	static uint32 SpiCanTransceiver_FaultValue_Six = 0;
	static uint32 SpiCanTransceiver_FaultValue_Seven = 0;
	static uint32 CanBusOff_FaultValue = 0;
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&LightSensor_RequestedValue, 0);
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&VibrationSensor_RequestedValue, 1);
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&AirQualitySensor_RequestedValue, 2);
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&TemperatureSensor_RequestedValue, 3);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(BtcUart_FaultValue_One, 24);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(BtcUart_FaultValue_Two, 25);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(BtcUart_FaultValue_Three, 26);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(BtcUart_FaultValue_Four, 27);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(I2cThreeExternalEeeprom_FaultValue_One, 48);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(I2cThreeExternalEeeprom_FaultValue_Two, 49);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(I2cThreeExternalEeeprom_FaultValue_Three, 50);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(I2cThreeExternalEeeprom_FaultValue_Four, 51);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(I2cThreeExternalEeeprom_FaultValue_Five, 52);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(I2cThreeExternalEeeprom_FaultValue_Six, 53);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(I2cThreeExternalEeeprom_FaultValue_Seven, 54);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(I2cThreeExternalEeeprom_FaultValue_Eight, 55);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(I2cOneLcd_FaultValue_One, 40);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(I2cOneLcd_FaultValue_Two, 41);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(I2cOneLcd_FaultValue_Three, 42);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(I2cOneLcd_FaultValue_Four, 43);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(I2cOneLcd_FaultValue_Five, 44);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(I2cOneLcd_FaultValue_Six, 45);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(I2cOneLcd_FaultValue_Seven, 46);
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(I2cOneLcd_FaultValue_Eight, 47);

	if(LightSensor_RequestedValue < 100)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LIGHT_SENSOR_MALFUNCTION);
	}
	else
	{
		/* do nothing */
	}

	if(VibrationSensor_RequestedValue < 100)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_VIBRATION_SENSOR_MALFUNCTION);
	}
	else
	{
		/* do nothing */
	}

	if(TemperatureSensor_RequestedValue < 100)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_TEMPERATURE_SENSOR_MALFUNCTION);
	}
	else
	{
		/* do nothing */
	}

	if(AirQualitySensor_RequestedValue < 100)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_AIR_QUALITY_SENSOR_MALFUNCTION);
	}
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree == 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION);
	}
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour == 0)
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION);
	}
	else
	{
		/* do nothing */
	}



//	/* Check through all the possible request. */
//	for(uint8 index = DIAGCTRL_LB_L_REQUEST; index <= DIAGCTRL_RTS_F_REQUEST; index++)
//	{
//		/* Call for the request. */
//		Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(index);
//		/* If the request is set. */
//		if(DiagCtrl_FaultValue != 0x00)
//		{
//			/* Check through all the possible states. */
//			for(uint8 idx = DIAGCTRL_LB_L_UV; idx <= DIAGCTRL_RTS_F_SH; idx++)
//			{
//				/* If a state is set, count how many times it shows up. */
//				if(DiagCtrl_ProcessedRequestArray[idx].statusValue != DiagCtrl_FaultValue && DiagCtrl_ProcessedRequestArray[idx].counterValue < 3)
//				{
//					DiagCtrl_ProcessedRequestArray[idx].counterValue = DiagCtrl_ProcessedRequestArray[idx].counterValue + 1;
//				}
//				else
//				{
//					/* do nothing */
//				}
//				/* If it showed enough times, set the status value with the fault value. */
//				if(DiagCtrl_ProcessedRequestArray[idx].counterValue == 3)
//				{
//					if(DiagCtrl_ProcessedRequestArray[idx].statusValue != DiagCtrl_FaultValue)
//					{
//						DiagCtrl_ProcessedRequestArray[idx].statusValue = DiagCtrl_FaultValue + 55;
//						DiagCtrl_ProcessedRequestArray[idx].counterValue = 0;
//						DiagCtrl_ProcessedRequestArray[idx].processedCounterValue = 0;
//					}
//					else
//					{
//						/* do nothing */
//					}
//				}
//				else
//				{
//					/* do nothing */
//				}
//			}
//		}
//		else
//		{
//			/* do nothing */
//		}
//		/* If the functionality checked is not turned on, then set the status value to 0. */
//		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LowBeam_CurrentState == STD_LOW)
//		{
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_LB_L_UV].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_LB_L_SH].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_LB_R_UV].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_LB_R_SH].statusValue = 0;
//		}
//		else
//		{
//			/* do nothing */
//		}
//		/* If the functionality checked is not turned on, then set the status value to 0. */
//		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearPositionLights_CurrentState == STD_LOW)
//		{
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_RPL_L_UV].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_RPL_L_SH].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_RPL_R_UV].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_RPL_R_SH].statusValue = 0;
//		}
//		else
//		{
//			/* do nothing */
//		}
//		/* If the functionality checked is not turned on, then set the status value to 0. */
//		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_LOW)
//		{
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_BL_R_UV].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_BL_R_SH].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_BL_L_UV].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_BL_L_SH].statusValue = 0;
//		}
//		else
//		{
//			/* do nothing */
//		}
//		/* If the functionality checked is not turned on, then set the status value to 0. */
//		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
//		{
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_LTS_F_UV].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_LTS_F_SH].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_LTS_R_UV].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_LTS_R_SH].statusValue = 0;
//		}
//		else
//		{
//			/* do nothing */
//		}
//		/* If the functionality checked is not turned on, then set the status value to 0. */
//		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
//		{
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_RTS_F_UV].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_RTS_F_SH].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_RTS_R_UV].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_RTS_R_SH].statusValue = 0;
//		}
//		else
//		{
//			/* do nothing */
//		}
//		/* If the functionality checked is not turned on, then set the status value to 0. */
//		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_LOW &&
//				Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_LOW &&
//				Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
//		{
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_LTS_F_UV].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_LTS_F_SH].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_LTS_R_UV].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_LTS_R_SH].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_RTS_F_UV].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_RTS_F_SH].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_RTS_R_UV].statusValue = 0;
//			DiagCtrl_ProcessedRequestArray[DIAGCTRL_RTS_R_SH].statusValue = 0;
//		}
//		else
//		{
//			/* do nothing */
//		}
//	}
}
/***********************************************************************************
* END OF DiagCtrl_ProcessRequestedData										       *
************************************************************************************/
/***********************************************************************************
* Function: DiagCtrl_SendProcessedData										   	   *
* Description: Send to diagnostic service the processed data.		 		       *
************************************************************************************/
VOID DiagCtrl_SendProcessedData()
{
//	/* Check through all the requests. */
//	for(uint8 idx = DIAGCTRL_LB_L_UV; idx <= DIAGCTRL_RTS_F_SH; idx++)
//	{
//		/* If there is a request processed, send it to Dem. */
//		if(DiagCtrl_ProcessedRequestArray[idx].statusValue != 0x00)
//		{
//			Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DiagCtrl_ProcessedRequestArray[idx].statusValue);
//		}
//		else if(DiagCtrl_ProcessedRequestArray[idx].statusValue == 0x00)
//		{
//			/* Else count up the occurences. */
//			if(DiagCtrl_ProcessedRequestArray[idx].processedCounterValue < 3)
//			{
//				DiagCtrl_ProcessedRequestArray[idx].processedCounterValue = DiagCtrl_ProcessedRequestArray[idx].processedCounterValue + 1;
//			}
//			else
//			{
//				/* do nothing */
//			}
//			/* If the fault did not appear three times set the counter to 0. */
//			if(DiagCtrl_ProcessedRequestArray[idx].processedCounterValue == 3)
//			{
//				DiagCtrl_ProcessedRequestArray[idx].counterValue = 0;
//			}
//			else
//			{
//				/* do nothing */
//			}
//		}
//		else
//		{
//			/* do nothing */
//		}
//	}
}
/***********************************************************************************
* END OF DiagCtrl_SendProcessedData										           *
************************************************************************************/
