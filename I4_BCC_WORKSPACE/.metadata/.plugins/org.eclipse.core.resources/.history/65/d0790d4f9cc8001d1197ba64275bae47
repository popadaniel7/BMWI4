/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "CenLoc.h"
#include "ExtLights.h"
#include "IntLights.h"
#include "SecAlm.h"
#include "Btc.h"
#include "Std_Types.h"
#include "Project_Definitions.h"
#include "timers.h"
#include "Rte.h"
#include "WatchdogManager.h"
#include "AdcH.h"
#include "CrcH.h"
#include "dma.h"
#include "rtc.h"
#include "SpiH.h"
#include "TimH.h"
#include "UartH.h"
#include "PortH.h"
#include "SystemManager.h"
#include "EcuM.h"
#include "NvM.h"
#include "Dem.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */

unsigned long Os_Counter;

/* USER CODE END Variables */
/* Definitions for OS_Init */
osThreadId_t OS_InitHandle;
const osThreadAttr_t OS_Init_attributes = {
  .name = "OS_Init",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityRealtime6,
};
/* Definitions for OS_Run */
osThreadId_t OS_RunHandle;
const osThreadAttr_t OS_Run_attributes = {
  .name = "OS_Run",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityRealtime5,
};
/* Definitions for OS_PreInit */
osThreadId_t OS_PreInitHandle;
const osThreadAttr_t OS_PreInit_attributes = {
  .name = "OS_PreInit",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityRealtime7,
};
/* Definitions for ASIL_APPL_Task */
osThreadId_t ASIL_APPL_TaskHandle;
const osThreadAttr_t ASIL_APPL_Task_attributes = {
  .name = "ASIL_APPL_Task",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityHigh7,
};
/* Definitions for QM_APPL_Task */
osThreadId_t QM_APPL_TaskHandle;
const osThreadAttr_t QM_APPL_Task_attributes = {
  .name = "QM_APPL_Task",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for Os_SecAlm_AlarmReset */
osTimerId_t Os_SecAlm_AlarmResetHandle;
const osTimerAttr_t Os_SecAlm_AlarmReset_attributes = {
  .name = "Os_SecAlm_AlarmReset"
};
/* Definitions for Os_CenLoc_LockUnlockSequence_Timer */
osTimerId_t Os_CenLoc_LockUnlockSequence_TimerHandle;
const osTimerAttr_t Os_CenLoc_LockUnlockSequence_Timer_attributes = {
  .name = "Os_CenLoc_LockUnlockSequence_Timer"
};
/* Definitions for Os_NvM_Timer */
osTimerId_t Os_NvM_TimerHandle;
const osTimerAttr_t Os_NvM_Timer_attributes = {
  .name = "Os_NvM_Timer"
};
/* Definitions for DemEvent_DTC_HardwareReset */
osEventFlagsId_t DemEvent_DTC_HardwareResetHandle;
const osEventFlagsAttr_t DemEvent_DTC_HardwareReset_attributes = {
  .name = "DemEvent_DTC_HardwareReset"
};
/* Definitions for DemEvent_DTC_SoftwareReset */
osEventFlagsId_t DemEvent_DTC_SoftwareResetHandle;
const osEventFlagsAttr_t DemEvent_DTC_SoftwareReset_attributes = {
  .name = "DemEvent_DTC_SoftwareReset"
};
/* Definitions for DemEvent_DTC_PowerOnReset */
osEventFlagsId_t DemEvent_DTC_PowerOnResetHandle;
const osEventFlagsAttr_t DemEvent_DTC_PowerOnReset_attributes = {
  .name = "DemEvent_DTC_PowerOnReset"
};
/* Definitions for DemEvent_DTC_WatchdogReset */
osEventFlagsId_t DemEvent_DTC_WatchdogResetHandle;
const osEventFlagsAttr_t DemEvent_DTC_WatchdogReset_attributes = {
  .name = "DemEvent_DTC_WatchdogReset"
};
/* Definitions for DemEvent_DTC_DMAFault */
osEventFlagsId_t DemEvent_DTC_DMAFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_DMAFault_attributes = {
  .name = "DemEvent_DTC_DMAFault"
};
/* Definitions for DemEvent_DTC_I2CFault */
osEventFlagsId_t DemEvent_DTC_I2CFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_I2CFault_attributes = {
  .name = "DemEvent_DTC_I2CFault"
};
/* Definitions for DemEvent_DTC_SPIFault */
osEventFlagsId_t DemEvent_DTC_SPIFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_SPIFault_attributes = {
  .name = "DemEvent_DTC_SPIFault"
};
/* Definitions for DemEvent_DTC_ADCFault */
osEventFlagsId_t DemEvent_DTC_ADCFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_ADCFault_attributes = {
  .name = "DemEvent_DTC_ADCFault"
};
/* Definitions for DemEvent_DTC_PWMFault */
osEventFlagsId_t DemEvent_DTC_PWMFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_PWMFault_attributes = {
  .name = "DemEvent_DTC_PWMFault"
};
/* Definitions for DemEvent_DTC_CanFault */
osEventFlagsId_t DemEvent_DTC_CanFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_CanFault_attributes = {
  .name = "DemEvent_DTC_CanFault"
};
/* Definitions for DemEvent_DTC_BtcFault */
osEventFlagsId_t DemEvent_DTC_BtcFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_BtcFault_attributes = {
  .name = "DemEvent_DTC_BtcFault"
};
/* Definitions for DemEvent_DTC_USARTFault */
osEventFlagsId_t DemEvent_DTC_USARTFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_USARTFault_attributes = {
  .name = "DemEvent_DTC_USARTFault"
};
/* Definitions for DemEvent_DTC_WatchdogFault */
osEventFlagsId_t DemEvent_DTC_WatchdogFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_WatchdogFault_attributes = {
  .name = "DemEvent_DTC_WatchdogFault"
};
/* Definitions for DemEvent_DTC_FlashFault */
osEventFlagsId_t DemEvent_DTC_FlashFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_FlashFault_attributes = {
  .name = "DemEvent_DTC_FlashFault"
};
/* Definitions for DemEvent_DTC_RamFault */
osEventFlagsId_t DemEvent_DTC_RamFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_RamFault_attributes = {
  .name = "DemEvent_DTC_RamFault"
};
/* Definitions for DemEvent_DTC_TimerFault */
osEventFlagsId_t DemEvent_DTC_TimerFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_TimerFault_attributes = {
  .name = "DemEvent_DTC_TimerFault"
};
/* Definitions for DemEvent_DTC_EcuUnderVoltage */
osEventFlagsId_t DemEvent_DTC_EcuUnderVoltageHandle;
const osEventFlagsAttr_t DemEvent_DTC_EcuUnderVoltage_attributes = {
  .name = "DemEvent_DTC_EcuUnderVoltage"
};
/* Definitions for DemEvent_DTC_LowBeamShorted */
osEventFlagsId_t DemEvent_DTC_LowBeamShortedHandle;
const osEventFlagsAttr_t DemEvent_DTC_LowBeamShorted_attributes = {
  .name = "DemEvent_DTC_LowBeamShorted"
};
/* Definitions for DemEvent_DTC_LowBeamUnderVoltage */
osEventFlagsId_t DemEvent_DTC_LowBeamUnderVoltageHandle;
const osEventFlagsAttr_t DemEvent_DTC_LowBeamUnderVoltage_attributes = {
  .name = "DemEvent_DTC_LowBeamUnderVoltage"
};
/* Definitions for DemEvent_DTC_RTCFault */
osEventFlagsId_t DemEvent_DTC_RTCFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_RTCFault_attributes = {
  .name = "DemEvent_DTC_RTCFault"
};
/* Definitions for DemEvent_DTC_HighBeamUnderVoltage */
osEventFlagsId_t DemEvent_DTC_HighBeamUnderVoltageHandle;
const osEventFlagsAttr_t DemEvent_DTC_HighBeamUnderVoltage_attributes = {
  .name = "DemEvent_DTC_HighBeamUnderVoltage"
};
/* Definitions for DemEvent_DTC_HighBeamShorted */
osEventFlagsId_t DemEvent_DTC_HighBeamShortedHandle;
const osEventFlagsAttr_t DemEvent_DTC_HighBeamShorted_attributes = {
  .name = "DemEvent_DTC_HighBeamShorted"
};
/* Definitions for DemEvent_DTC_DayTimeRunningLightUnderVoltage */
osEventFlagsId_t DemEvent_DTC_DayTimeRunningLightUnderVoltageHandle;
const osEventFlagsAttr_t DemEvent_DTC_DayTimeRunningLightUnderVoltage_attributes = {
  .name = "DemEvent_DTC_DayTimeRunningLightUnderVoltage"
};
/* Definitions for DemEvent_DTC_DayTimeRunningLightShorted */
osEventFlagsId_t DemEvent_DTC_DayTimeRunningLightShortedHandle;
const osEventFlagsAttr_t DemEvent_DTC_DayTimeRunningLightShorted_attributes = {
  .name = "DemEvent_DTC_DayTimeRunningLightShorted"
};
/* Definitions for DemEvent_DTC_FrontFogLightsUnderVoltage */
osEventFlagsId_t DemEvent_DTC_FrontFogLightsUnderVoltageHandle;
const osEventFlagsAttr_t DemEvent_DTC_FrontFogLightsUnderVoltage_attributes = {
  .name = "DemEvent_DTC_FrontFogLightsUnderVoltage"
};
/* Definitions for DemEvent_DTC_FrontFogLightShorted */
osEventFlagsId_t DemEvent_DTC_FrontFogLightShortedHandle;
const osEventFlagsAttr_t DemEvent_DTC_FrontFogLightShorted_attributes = {
  .name = "DemEvent_DTC_FrontFogLightShorted"
};
/* Definitions for DemEvent_DTC_RearFogLightUnderVoltage */
osEventFlagsId_t DemEvent_DTC_RearFogLightUnderVoltageHandle;
const osEventFlagsAttr_t DemEvent_DTC_RearFogLightUnderVoltage_attributes = {
  .name = "DemEvent_DTC_RearFogLightUnderVoltage"
};
/* Definitions for DemEvent_DTC_RearFogLightShorted */
osEventFlagsId_t DemEvent_DTC_RearFogLightShortedHandle;
const osEventFlagsAttr_t DemEvent_DTC_RearFogLightShorted_attributes = {
  .name = "DemEvent_DTC_RearFogLightShorted"
};
/* Definitions for DemEvent_DTC_RearPositionLightUnderVoltage */
osEventFlagsId_t DemEvent_DTC_RearPositionLightUnderVoltageHandle;
const osEventFlagsAttr_t DemEvent_DTC_RearPositionLightUnderVoltage_attributes = {
  .name = "DemEvent_DTC_RearPositionLightUnderVoltage"
};
/* Definitions for DemEvent_DTC_RearPositionLightShorted */
osEventFlagsId_t DemEvent_DTC_RearPositionLightShortedHandle;
const osEventFlagsAttr_t DemEvent_DTC_RearPositionLightShorted_attributes = {
  .name = "DemEvent_DTC_RearPositionLightShorted"
};
/* Definitions for DemEvent_DTC_RightTurnSignalUnderVoltage */
osEventFlagsId_t DemEvent_DTC_RightTurnSignalUnderVoltageHandle;
const osEventFlagsAttr_t DemEvent_DTC_RightTurnSignalUnderVoltage_attributes = {
  .name = "DemEvent_DTC_RightTurnSignalUnderVoltage"
};
/* Definitions for DemEvent_DTC_LeftTurnSignalUnderVoltage */
osEventFlagsId_t DemEvent_DTC_LeftTurnSignalUnderVoltageHandle;
const osEventFlagsAttr_t DemEvent_DTC_LeftTurnSignalUnderVoltage_attributes = {
  .name = "DemEvent_DTC_LeftTurnSignalUnderVoltage"
};
/* Definitions for DemEvent_DTC_RightTurnSignalShorted */
osEventFlagsId_t DemEvent_DTC_RightTurnSignalShortedHandle;
const osEventFlagsAttr_t DemEvent_DTC_RightTurnSignalShorted_attributes = {
  .name = "DemEvent_DTC_RightTurnSignalShorted"
};
/* Definitions for DemEvent_DTC_LeftTurnSignalShorted */
osEventFlagsId_t DemEvent_DTC_LeftTurnSignalShortedHandle;
const osEventFlagsAttr_t DemEvent_DTC_LeftTurnSignalShorted_attributes = {
  .name = "DemEvent_DTC_LeftTurnSignalShorted"
};
/* Definitions for DemEvent_DTC_ReverseLightUnderVoltage */
osEventFlagsId_t DemEvent_DTC_ReverseLightUnderVoltageHandle;
const osEventFlagsAttr_t DemEvent_DTC_ReverseLightUnderVoltage_attributes = {
  .name = "DemEvent_DTC_ReverseLightUnderVoltage"
};
/* Definitions for DemEvent_DTC_ReverseLightShorted */
osEventFlagsId_t DemEvent_DTC_ReverseLightShortedHandle;
const osEventFlagsAttr_t DemEvent_DTC_ReverseLightShorted_attributes = {
  .name = "DemEvent_DTC_ReverseLightShorted"
};
/* Definitions for DemEvent_DTC_InteriorLightsUnderVoltage */
osEventFlagsId_t DemEvent_DTC_InteriorLightsUnderVoltageHandle;
const osEventFlagsAttr_t DemEvent_DTC_InteriorLightsUnderVoltage_attributes = {
  .name = "DemEvent_DTC_InteriorLightsUnderVoltage"
};
/* Definitions for DemEvent_DTC_InteriorLightsShorted */
osEventFlagsId_t DemEvent_DTC_InteriorLightsShortedHandle;
const osEventFlagsAttr_t DemEvent_DTC_InteriorLightsShorted_attributes = {
  .name = "DemEvent_DTC_InteriorLightsShorted"
};
/* Definitions for DemEvent_DTC_DoorLedUnderVoltage */
osEventFlagsId_t DemEvent_DTC_DoorLedUnderVoltageHandle;
const osEventFlagsAttr_t DemEvent_DTC_DoorLedUnderVoltage_attributes = {
  .name = "DemEvent_DTC_DoorLedUnderVoltage"
};
/* Definitions for DemEvent_DTC_DoorLedShorted */
osEventFlagsId_t DemEvent_DTC_DoorLedShortedHandle;
const osEventFlagsAttr_t DemEvent_DTC_DoorLedShorted_attributes = {
  .name = "DemEvent_DTC_DoorLedShorted"
};
/* Definitions for DemEvent_DTC_LicensePlateLigthUnderVoltage */
osEventFlagsId_t DemEvent_DTC_LicensePlateLigthUnderVoltageHandle;
const osEventFlagsAttr_t DemEvent_DTC_LicensePlateLigthUnderVoltage_attributes = {
  .name = "DemEvent_DTC_LicensePlateLigthUnderVoltage"
};
/* Definitions for DemEvent_DTC_LicensePlateLigthShorted */
osEventFlagsId_t DemEvent_DTC_LicensePlateLigthShortedHandle;
const osEventFlagsAttr_t DemEvent_DTC_LicensePlateLigthShorted_attributes = {
  .name = "DemEvent_DTC_LicensePlateLigthShorted"
};
/* Definitions for DemEvent_DTC_Mcp2515Fault */
osEventFlagsId_t DemEvent_DTC_Mcp2515FaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_Mcp2515Fault_attributes = {
  .name = "DemEvent_DTC_Mcp2515Fault"
};
/* Definitions for DemEvent_DTC_ExtEEPROMFault */
osEventFlagsId_t DemEvent_DTC_ExtEEPROMFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_ExtEEPROMFault_attributes = {
  .name = "DemEvent_DTC_ExtEEPROMFault"
};
/* Definitions for DemEvent_DTC_VibrationSensorFault */
osEventFlagsId_t DemEvent_DTC_VibrationSensorFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_VibrationSensorFault_attributes = {
  .name = "DemEvent_DTC_VibrationSensorFault"
};
/* Definitions for DemEvent_DTC_LightSensorFault */
osEventFlagsId_t DemEvent_DTC_LightSensorFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_LightSensorFault_attributes = {
  .name = "DemEvent_DTC_LightSensorFault"
};
/* Definitions for DemEvent_DTC_HC05Fault */
osEventFlagsId_t DemEvent_DTC_HC05FaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_HC05Fault_attributes = {
  .name = "DemEvent_DTC_HC05Fault"
};
/* Definitions for DemEvent_DTC_AlarmLedUnderVoltage */
osEventFlagsId_t DemEvent_DTC_AlarmLedUnderVoltageHandle;
const osEventFlagsAttr_t DemEvent_DTC_AlarmLedUnderVoltage_attributes = {
  .name = "DemEvent_DTC_AlarmLedUnderVoltage"
};
/* Definitions for DemEvent_DTC_AlarmLedShorted */
osEventFlagsId_t DemEvent_DTC_AlarmLedShortedHandle;
const osEventFlagsAttr_t DemEvent_DTC_AlarmLedShorted_attributes = {
  .name = "DemEvent_DTC_AlarmLedShorted"
};
/* Definitions for DemEvent_DTC_CentralLockBuzzerFault */
osEventFlagsId_t DemEvent_DTC_CentralLockBuzzerFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_CentralLockBuzzerFault_attributes = {
  .name = "DemEvent_DTC_CentralLockBuzzerFault"
};
/* Definitions for DemEvent_DTC_AlarmBuzzerFault */
osEventFlagsId_t DemEvent_DTC_AlarmBuzzerFaultHandle;
const osEventFlagsAttr_t DemEvent_DTC_AlarmBuzzerFault_attributes = {
  .name = "DemEvent_DTC_AlarmBuzzerFault"
};
/* Definitions for SysEvent_NMIHandler */
osEventFlagsId_t SysEvent_NMIHandlerHandle;
const osEventFlagsAttr_t SysEvent_NMIHandler_attributes = {
  .name = "SysEvent_NMIHandler"
};
/* Definitions for SysEvent_HardFault */
osEventFlagsId_t SysEvent_HardFaultHandle;
const osEventFlagsAttr_t SysEvent_HardFault_attributes = {
  .name = "SysEvent_HardFault"
};
/* Definitions for SysEvent_MemManage */
osEventFlagsId_t SysEvent_MemManageHandle;
const osEventFlagsAttr_t SysEvent_MemManage_attributes = {
  .name = "SysEvent_MemManage"
};
/* Definitions for SysEvent_BusFault */
osEventFlagsId_t SysEvent_BusFaultHandle;
const osEventFlagsAttr_t SysEvent_BusFault_attributes = {
  .name = "SysEvent_BusFault"
};
/* Definitions for SysEvent_PVD */
osEventFlagsId_t SysEvent_PVDHandle;
const osEventFlagsAttr_t SysEvent_PVD_attributes = {
  .name = "SysEvent_PVD"
};
/* Definitions for SysEvent_UsageFault */
osEventFlagsId_t SysEvent_UsageFaultHandle;
const osEventFlagsAttr_t SysEvent_UsageFault_attributes = {
  .name = "SysEvent_UsageFault"
};
/* Definitions for SysEvent_FlashFault */
osEventFlagsId_t SysEvent_FlashFaultHandle;
const osEventFlagsAttr_t SysEvent_FlashFault_attributes = {
  .name = "SysEvent_FlashFault"
};
/* Definitions for SysEvent_I2CError */
osEventFlagsId_t SysEvent_I2CErrorHandle;
const osEventFlagsAttr_t SysEvent_I2CError_attributes = {
  .name = "SysEvent_I2CError"
};
/* Definitions for DemEvent_DTC_BOR */
osEventFlagsId_t DemEvent_DTC_BORHandle;
const osEventFlagsAttr_t DemEvent_DTC_BOR_attributes = {
  .name = "DemEvent_DTC_BOR"
};
/* Definitions for DemEvent_DTC_LowPowerReset */
osEventFlagsId_t DemEvent_DTC_LowPowerResetHandle;
const osEventFlagsAttr_t DemEvent_DTC_LowPowerReset_attributes = {
  .name = "DemEvent_DTC_LowPowerReset"
};
/* Definitions for DemEvent_DTC_ButtonReset */
osEventFlagsId_t DemEvent_DTC_ButtonResetHandle;
const osEventFlagsAttr_t DemEvent_DTC_ButtonReset_attributes = {
  .name = "DemEvent_DTC_ButtonReset"
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
/* USER CODE END FunctionPrototypes */

void OS_TASK_OS_INIT(void *argument);
void OS_TASK_OS_RUN(void *argument);
void OS_TASK_OS_PREINIT(void *argument);
void OS_TASK_ASIL_APPL_Task(void *argument);
void OS_TASK_QM_APPL_Task(void *argument);
void Os_SecAlm_AlarmReset_Callback(void *argument);
void Os_CenLoc_LockUnlockSequence_Timer_Callback(void *argument);
void Os_NvM_Timer_Callback(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* Hook prototypes */
void vApplicationIdleHook(void);
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */

void vApplicationIdleHook( void )
{

}

/* USER CODE END 2 */

/* USER CODE BEGIN 3 */

void vApplicationTickHook( void )
{

	Os_Counter++;

}

/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
	SystemManager_PerformReset();
	SystemManager_SetFault(STACK_OVERFLOW_RESET);

}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{

	SystemManager_SetFault(MALLOC_FAILED_RESET);
	SystemManager_PerformReset();

}

/* USER CODE END 5 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
/* place for user code */
}

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
/* place for user code */
}
/* USER CODE END PREPOSTSLEEP */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Os_SecAlm_AlarmReset */
  Os_SecAlm_AlarmResetHandle = osTimerNew(Os_SecAlm_AlarmReset_Callback, osTimerPeriodic, NULL, &Os_SecAlm_AlarmReset_attributes);

  /* creation of Os_CenLoc_LockUnlockSequence_Timer */
  Os_CenLoc_LockUnlockSequence_TimerHandle = osTimerNew(Os_CenLoc_LockUnlockSequence_Timer_Callback, osTimerPeriodic, NULL, &Os_CenLoc_LockUnlockSequence_Timer_attributes);

  /* creation of Os_NvM_Timer */
  Os_NvM_TimerHandle = osTimerNew(Os_NvM_Timer_Callback, osTimerPeriodic, NULL, &Os_NvM_Timer_attributes);

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OS_Init */
  OS_InitHandle = osThreadNew(OS_TASK_OS_INIT, NULL, &OS_Init_attributes);

  /* creation of OS_Run */
  OS_RunHandle = osThreadNew(OS_TASK_OS_RUN, NULL, &OS_Run_attributes);

  /* creation of OS_PreInit */
  OS_PreInitHandle = osThreadNew(OS_TASK_OS_PREINIT, NULL, &OS_PreInit_attributes);

  /* creation of ASIL_APPL_Task */
  ASIL_APPL_TaskHandle = osThreadNew(OS_TASK_ASIL_APPL_Task, NULL, &ASIL_APPL_Task_attributes);

  /* creation of QM_APPL_Task */
  QM_APPL_TaskHandle = osThreadNew(OS_TASK_QM_APPL_Task, NULL, &QM_APPL_Task_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of DemEvent_DTC_HardwareReset */
  DemEvent_DTC_HardwareResetHandle = osEventFlagsNew(&DemEvent_DTC_HardwareReset_attributes);

  /* creation of DemEvent_DTC_SoftwareReset */
  DemEvent_DTC_SoftwareResetHandle = osEventFlagsNew(&DemEvent_DTC_SoftwareReset_attributes);

  /* creation of DemEvent_DTC_PowerOnReset */
  DemEvent_DTC_PowerOnResetHandle = osEventFlagsNew(&DemEvent_DTC_PowerOnReset_attributes);

  /* creation of DemEvent_DTC_WatchdogReset */
  DemEvent_DTC_WatchdogResetHandle = osEventFlagsNew(&DemEvent_DTC_WatchdogReset_attributes);

  /* creation of DemEvent_DTC_DMAFault */
  DemEvent_DTC_DMAFaultHandle = osEventFlagsNew(&DemEvent_DTC_DMAFault_attributes);

  /* creation of DemEvent_DTC_I2CFault */
  DemEvent_DTC_I2CFaultHandle = osEventFlagsNew(&DemEvent_DTC_I2CFault_attributes);

  /* creation of DemEvent_DTC_SPIFault */
  DemEvent_DTC_SPIFaultHandle = osEventFlagsNew(&DemEvent_DTC_SPIFault_attributes);

  /* creation of DemEvent_DTC_ADCFault */
  DemEvent_DTC_ADCFaultHandle = osEventFlagsNew(&DemEvent_DTC_ADCFault_attributes);

  /* creation of DemEvent_DTC_PWMFault */
  DemEvent_DTC_PWMFaultHandle = osEventFlagsNew(&DemEvent_DTC_PWMFault_attributes);

  /* creation of DemEvent_DTC_CanFault */
  DemEvent_DTC_CanFaultHandle = osEventFlagsNew(&DemEvent_DTC_CanFault_attributes);

  /* creation of DemEvent_DTC_BtcFault */
  DemEvent_DTC_BtcFaultHandle = osEventFlagsNew(&DemEvent_DTC_BtcFault_attributes);

  /* creation of DemEvent_DTC_USARTFault */
  DemEvent_DTC_USARTFaultHandle = osEventFlagsNew(&DemEvent_DTC_USARTFault_attributes);

  /* creation of DemEvent_DTC_WatchdogFault */
  DemEvent_DTC_WatchdogFaultHandle = osEventFlagsNew(&DemEvent_DTC_WatchdogFault_attributes);

  /* creation of DemEvent_DTC_FlashFault */
  DemEvent_DTC_FlashFaultHandle = osEventFlagsNew(&DemEvent_DTC_FlashFault_attributes);

  /* creation of DemEvent_DTC_RamFault */
  DemEvent_DTC_RamFaultHandle = osEventFlagsNew(&DemEvent_DTC_RamFault_attributes);

  /* creation of DemEvent_DTC_TimerFault */
  DemEvent_DTC_TimerFaultHandle = osEventFlagsNew(&DemEvent_DTC_TimerFault_attributes);

  /* creation of DemEvent_DTC_EcuUnderVoltage */
  DemEvent_DTC_EcuUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_EcuUnderVoltage_attributes);

  /* creation of DemEvent_DTC_LowBeamShorted */
  DemEvent_DTC_LowBeamShortedHandle = osEventFlagsNew(&DemEvent_DTC_LowBeamShorted_attributes);

  /* creation of DemEvent_DTC_LowBeamUnderVoltage */
  DemEvent_DTC_LowBeamUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_LowBeamUnderVoltage_attributes);

  /* creation of DemEvent_DTC_RTCFault */
  DemEvent_DTC_RTCFaultHandle = osEventFlagsNew(&DemEvent_DTC_RTCFault_attributes);

  /* creation of DemEvent_DTC_HighBeamUnderVoltage */
  DemEvent_DTC_HighBeamUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_HighBeamUnderVoltage_attributes);

  /* creation of DemEvent_DTC_HighBeamShorted */
  DemEvent_DTC_HighBeamShortedHandle = osEventFlagsNew(&DemEvent_DTC_HighBeamShorted_attributes);

  /* creation of DemEvent_DTC_DayTimeRunningLightUnderVoltage */
  DemEvent_DTC_DayTimeRunningLightUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_DayTimeRunningLightUnderVoltage_attributes);

  /* creation of DemEvent_DTC_DayTimeRunningLightShorted */
  DemEvent_DTC_DayTimeRunningLightShortedHandle = osEventFlagsNew(&DemEvent_DTC_DayTimeRunningLightShorted_attributes);

  /* creation of DemEvent_DTC_FrontFogLightsUnderVoltage */
  DemEvent_DTC_FrontFogLightsUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_FrontFogLightsUnderVoltage_attributes);

  /* creation of DemEvent_DTC_FrontFogLightShorted */
  DemEvent_DTC_FrontFogLightShortedHandle = osEventFlagsNew(&DemEvent_DTC_FrontFogLightShorted_attributes);

  /* creation of DemEvent_DTC_RearFogLightUnderVoltage */
  DemEvent_DTC_RearFogLightUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_RearFogLightUnderVoltage_attributes);

  /* creation of DemEvent_DTC_RearFogLightShorted */
  DemEvent_DTC_RearFogLightShortedHandle = osEventFlagsNew(&DemEvent_DTC_RearFogLightShorted_attributes);

  /* creation of DemEvent_DTC_RearPositionLightUnderVoltage */
  DemEvent_DTC_RearPositionLightUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_RearPositionLightUnderVoltage_attributes);

  /* creation of DemEvent_DTC_RearPositionLightShorted */
  DemEvent_DTC_RearPositionLightShortedHandle = osEventFlagsNew(&DemEvent_DTC_RearPositionLightShorted_attributes);

  /* creation of DemEvent_DTC_RightTurnSignalUnderVoltage */
  DemEvent_DTC_RightTurnSignalUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_RightTurnSignalUnderVoltage_attributes);

  /* creation of DemEvent_DTC_LeftTurnSignalUnderVoltage */
  DemEvent_DTC_LeftTurnSignalUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_LeftTurnSignalUnderVoltage_attributes);

  /* creation of DemEvent_DTC_RightTurnSignalShorted */
  DemEvent_DTC_RightTurnSignalShortedHandle = osEventFlagsNew(&DemEvent_DTC_RightTurnSignalShorted_attributes);

  /* creation of DemEvent_DTC_LeftTurnSignalShorted */
  DemEvent_DTC_LeftTurnSignalShortedHandle = osEventFlagsNew(&DemEvent_DTC_LeftTurnSignalShorted_attributes);

  /* creation of DemEvent_DTC_ReverseLightUnderVoltage */
  DemEvent_DTC_ReverseLightUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_ReverseLightUnderVoltage_attributes);

  /* creation of DemEvent_DTC_ReverseLightShorted */
  DemEvent_DTC_ReverseLightShortedHandle = osEventFlagsNew(&DemEvent_DTC_ReverseLightShorted_attributes);

  /* creation of DemEvent_DTC_InteriorLightsUnderVoltage */
  DemEvent_DTC_InteriorLightsUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_InteriorLightsUnderVoltage_attributes);

  /* creation of DemEvent_DTC_InteriorLightsShorted */
  DemEvent_DTC_InteriorLightsShortedHandle = osEventFlagsNew(&DemEvent_DTC_InteriorLightsShorted_attributes);

  /* creation of DemEvent_DTC_DoorLedUnderVoltage */
  DemEvent_DTC_DoorLedUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_DoorLedUnderVoltage_attributes);

  /* creation of DemEvent_DTC_DoorLedShorted */
  DemEvent_DTC_DoorLedShortedHandle = osEventFlagsNew(&DemEvent_DTC_DoorLedShorted_attributes);

  /* creation of DemEvent_DTC_LicensePlateLigthUnderVoltage */
  DemEvent_DTC_LicensePlateLigthUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_LicensePlateLigthUnderVoltage_attributes);

  /* creation of DemEvent_DTC_LicensePlateLigthShorted */
  DemEvent_DTC_LicensePlateLigthShortedHandle = osEventFlagsNew(&DemEvent_DTC_LicensePlateLigthShorted_attributes);

  /* creation of DemEvent_DTC_Mcp2515Fault */
  DemEvent_DTC_Mcp2515FaultHandle = osEventFlagsNew(&DemEvent_DTC_Mcp2515Fault_attributes);

  /* creation of DemEvent_DTC_ExtEEPROMFault */
  DemEvent_DTC_ExtEEPROMFaultHandle = osEventFlagsNew(&DemEvent_DTC_ExtEEPROMFault_attributes);

  /* creation of DemEvent_DTC_VibrationSensorFault */
  DemEvent_DTC_VibrationSensorFaultHandle = osEventFlagsNew(&DemEvent_DTC_VibrationSensorFault_attributes);

  /* creation of DemEvent_DTC_LightSensorFault */
  DemEvent_DTC_LightSensorFaultHandle = osEventFlagsNew(&DemEvent_DTC_LightSensorFault_attributes);

  /* creation of DemEvent_DTC_HC05Fault */
  DemEvent_DTC_HC05FaultHandle = osEventFlagsNew(&DemEvent_DTC_HC05Fault_attributes);

  /* creation of DemEvent_DTC_AlarmLedUnderVoltage */
  DemEvent_DTC_AlarmLedUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_AlarmLedUnderVoltage_attributes);

  /* creation of DemEvent_DTC_AlarmLedShorted */
  DemEvent_DTC_AlarmLedShortedHandle = osEventFlagsNew(&DemEvent_DTC_AlarmLedShorted_attributes);

  /* creation of DemEvent_DTC_CentralLockBuzzerFault */
  DemEvent_DTC_CentralLockBuzzerFaultHandle = osEventFlagsNew(&DemEvent_DTC_CentralLockBuzzerFault_attributes);

  /* creation of DemEvent_DTC_AlarmBuzzerFault */
  DemEvent_DTC_AlarmBuzzerFaultHandle = osEventFlagsNew(&DemEvent_DTC_AlarmBuzzerFault_attributes);

  /* creation of SysEvent_NMIHandler */
  SysEvent_NMIHandlerHandle = osEventFlagsNew(&SysEvent_NMIHandler_attributes);

  /* creation of SysEvent_HardFault */
  SysEvent_HardFaultHandle = osEventFlagsNew(&SysEvent_HardFault_attributes);

  /* creation of SysEvent_MemManage */
  SysEvent_MemManageHandle = osEventFlagsNew(&SysEvent_MemManage_attributes);

  /* creation of SysEvent_BusFault */
  SysEvent_BusFaultHandle = osEventFlagsNew(&SysEvent_BusFault_attributes);

  /* creation of SysEvent_PVD */
  SysEvent_PVDHandle = osEventFlagsNew(&SysEvent_PVD_attributes);

  /* creation of SysEvent_UsageFault */
  SysEvent_UsageFaultHandle = osEventFlagsNew(&SysEvent_UsageFault_attributes);

  /* creation of SysEvent_FlashFault */
  SysEvent_FlashFaultHandle = osEventFlagsNew(&SysEvent_FlashFault_attributes);

  /* creation of SysEvent_I2CError */
  SysEvent_I2CErrorHandle = osEventFlagsNew(&SysEvent_I2CError_attributes);

  /* creation of DemEvent_DTC_BOR */
  DemEvent_DTC_BORHandle = osEventFlagsNew(&DemEvent_DTC_BOR_attributes);

  /* creation of DemEvent_DTC_LowPowerReset */
  DemEvent_DTC_LowPowerResetHandle = osEventFlagsNew(&DemEvent_DTC_LowPowerReset_attributes);

  /* creation of DemEvent_DTC_ButtonReset */
  DemEvent_DTC_ButtonResetHandle = osEventFlagsNew(&DemEvent_DTC_ButtonReset_attributes);

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_OS_TASK_OS_INIT */
/**
  * @brief  Function implementing the OS_Init thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_OS_TASK_OS_INIT */
void OS_TASK_OS_INIT(void *argument)
{
  /* USER CODE BEGIN OS_TASK_OS_INIT */

	for(;;)
	{

		EcuM_DriverInit();

		vTaskSuspend(NULL);
		osDelay(1);

	}

  /* USER CODE END OS_TASK_OS_INIT */
}

/* USER CODE BEGIN Header_OS_TASK_OS_RUN */
/**
* @brief Function implementing the OS_Run thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_OS_RUN */
void OS_TASK_OS_RUN(void *argument)
{
  /* USER CODE BEGIN OS_TASK_OS_RUN */

	for(;;)
	{

		Rte_Runnable_Wdg_MainFunction();

		osDelay(1);

	}

  /* USER CODE END OS_TASK_OS_RUN */
}

/* USER CODE BEGIN Header_OS_TASK_OS_PREINIT */
/**
* @brief Function implementing the OS_PreInit thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_OS_PREINIT */
void OS_TASK_OS_PREINIT(void *argument)
{
  /* USER CODE BEGIN OS_TASK_OS_PREINIT */

	for(;;)
	{

		/* Perform memory read all. */

		SystemManager_ReadFromNvM();
		Dem_ReadFromNvM();

		vTaskSuspend(NULL);

		osDelay(1);

	}

  /* USER CODE END OS_TASK_OS_PREINIT */
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_Task */
/**
* @brief Function implementing the ASIL_APPL_Task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_ASIL_APPL_Task */
void OS_TASK_ASIL_APPL_Task(void *argument)
{
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_Task */

	TickType_t xLastWakeTime = xTaskGetTickCount();
	const TickType_t xTaskPeriod = 5 / portTICK_PERIOD_MS;

	for(;;)
	{

		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);

		if (xLastWakeTime % (5 / portTICK_PERIOD_MS) == 0)
		{

			Rte_Runnable_EcuM_MainFunction();
			Rte_Runnable_SystemManager_MainFunction();
			Rte_Runnable_Crc_MainFunction();
			Rte_Runnable_Uart_MainFunction();
			Rte_Runnable_Adc_MainFunction();
			Rte_Runnable_Spi_MainFunction();
			Rte_Runnable_Tim_MainFunction();

		}
		else
		{

			/* do nothing */

		}

		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);

		if (xLastWakeTime % (10 / portTICK_PERIOD_MS) == 0)
		{

			Rte_Runnable_ExtLights_MainFunction();
			Rte_Runnable_SecAlm_MainFunction();

		}
		else
		{

			/* do nothing */

		}

		osDelay(1);

	}

  /* USER CODE END OS_TASK_ASIL_APPL_Task */
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_Task */
/**
* @brief Function implementing the QM_APPL_Task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_QM_APPL_Task */
void OS_TASK_QM_APPL_Task(void *argument)
{
  /* USER CODE BEGIN OS_TASK_QM_APPL_Task */

	TickType_t xLastWakeTime = xTaskGetTickCount();
	const TickType_t xTaskPeriod = 5 / portTICK_PERIOD_MS;

	for(;;)
	{

		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);

		if (xLastWakeTime % (5 / portTICK_PERIOD_MS) == 0)
		{

			Rte_Runnable_Btc_MainFunction();

		}
		else
		{

			/* do nothing */

		}

		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);

		if (xLastWakeTime % (10 / portTICK_PERIOD_MS) == 0)
		{

			Rte_Runnable_CenLoc_MainFunction();
			Rte_Runnable_IntLights_MainFunction();

		}
		else
		{

			/* do nothing */

		}

		osDelay(1);

	}
  /* USER CODE END OS_TASK_QM_APPL_Task */
}

/* Os_SecAlm_AlarmReset_Callback function */
void Os_SecAlm_AlarmReset_Callback(void *argument)
{
  /* USER CODE BEGIN Os_SecAlm_AlarmReset_Callback */

	Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter((uint16*)0);

  /* USER CODE END Os_SecAlm_AlarmReset_Callback */
}

/* Os_CenLoc_LockUnlockSequence_Timer_Callback function */
void Os_CenLoc_LockUnlockSequence_Timer_Callback(void *argument)
{
  /* USER CODE BEGIN Os_CenLoc_LockUnlockSequence_Timer_Callback */

	if(Timer2Counter_CenLoc_Tim2IRQFlag <= 6
		&& ((Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_HIGH)
		|| (Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_LOW)))
	{

		Timer2Counter_CenLoc_Tim2IRQFlag++;
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(&Timer2Counter_CenLoc_Tim2IRQFlag);

	}
	else
	{

		Timer2Counter_CenLoc_Tim2IRQFlag = 7;
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(&Timer2Counter_CenLoc_Tim2IRQFlag);

	}

  /* USER CODE END Os_CenLoc_LockUnlockSequence_Timer_Callback */
}

/* Os_NvM_Timer_Callback function */
void Os_NvM_Timer_Callback(void *argument)
{
  /* USER CODE BEGIN Os_NvM_Timer_Callback */
  /* USER CODE END Os_NvM_Timer_Callback */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
/* USER CODE END Application */

