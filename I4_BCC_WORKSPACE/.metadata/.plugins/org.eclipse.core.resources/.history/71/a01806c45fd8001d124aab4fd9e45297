#include "SpiH.h"
#include "SystemManager_Types.h"

void Spi_MainFunction();
StdReturnType Spi_Init(uint8 SpiChannel);
StdReturnType Spi_DeInit(uint8 SpiChanne);
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi);

void Spi_MainFunction()
{
}

StdReturnType Spi_Init(uint8 SpiChannel)
{



		hspi3.Instance = SPI1;
		hspi3.Init.Mode = SPI_MODE_MASTER;
		hspi3.Init.Direction = SPI_DIRECTION_2LINES;
		hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
		hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
		hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
		hspi3.Init.NSS = SPI_NSS_SOFT;
		hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
		hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
		hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
		hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
		hspi3.Init.CRCPolynomial = 10;

		if (HAL_SPI_Init(&hspi3) != HAL_OK)
		{

			HAL_SPI_ErrorCallback(&hspi3);

		}
		else
		{

			/* do nothing */

		}




	return E_OK;

}

StdReturnType Spi_DeInit(uint8 SpiChannel)
{

	if(SpiChannel == 1)
	{

		HAL_SPI_DeInit(&hspi3);

	}
	else if(SpiChannel == 2)
	{

		//HAL_SPI_DeInit(&hspi2);

	}
	else
	{

		/* do nothing */

	}

	return E_OK;

}

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{

	uint32 receivedStatus = HAL_SPI_GetError(hspi);

	if(hspi->Instance == SPI1)
	{

		switch(receivedStatus)
		{

			case HAL_SPI_ERROR_NONE:

				/* do nothing */

				break;

			case HAL_SPI_ERROR_MODF:

				//SystemManager_Fault.fault[SPI_ERROR_MODF] = SPI_ERROR_MODF;

				Spi_DeInit(SPI_CHANNEL_ONE);
				Spi_Init(SPI_CHANNEL_ONE);

				break;

			case HAL_SPI_ERROR_FRE:

				//SystemManager_Fault.fault[SPI_ERROR_FRE] = SPI_ERROR_FRE;

				HAL_SPI_Abort_IT(&hspi3);

				break;

			case HAL_SPI_ERROR_CRC:

				//SystemManager_Fault.fault[SPI_ERROR_CRC] = SPI_ERROR_CRC;

				HAL_SPI_Abort_IT(&hspi3);

				break;

			case HAL_SPI_ERROR_OVR:

				//SystemManager_Fault.fault[SPI_ERROR_OVR] = SPI_ERROR_OVR;

				HAL_SPI_Abort_IT(&hspi3);

				break;

			case HAL_SPI_ERROR_DMA:

				//SystemManager_Fault.fault[SPI_ERROR_DMA] = SPI_ERROR_DMA;

				HAL_SPI_Abort_IT(&hspi3);

				break;

			case HAL_SPI_ERROR_FLAG:

				//SystemManager_Fault.fault[SPI_ERROR_FLAG] = SPI_ERROR_FLAG;

				HAL_SPI_Abort_IT(&hspi3);

				break;

			case HAL_SPI_ERROR_ABORT:

				//SystemManager_Fault.fault[SPI_ERROR_ABORT] = SPI_ERROR_ABORT;

				Spi_DeInit(SPI_CHANNEL_ONE);
				Spi_Init(SPI_CHANNEL_ONE);

				break;

			default:

				break;

		}

	}
	else if(hspi->Instance == SPI2)
	{

		switch(receivedStatus)
		{

			case HAL_SPI_ERROR_NONE:

				/* do nothing */

				break;

			case HAL_SPI_ERROR_MODF:

				//SystemManager_Fault.fault[SPI_ERROR_MODF] = SPI_ERROR_MODF;

				Spi_DeInit(SPI_CHANNEL_TWO);
				Spi_Init(SPI_CHANNEL_TWO);

				break;

			case HAL_SPI_ERROR_FRE:

				//SystemManager_Fault.fault[SPI_ERROR_FRE] = SPI_ERROR_FRE;

				//HAL_SPI_Abort_IT(&hspi2);

				break;

			case HAL_SPI_ERROR_CRC:

				//SystemManager_Fault.fault[SPI_ERROR_CRC] = SPI_ERROR_CRC;

				//HAL_SPI_Abort_IT(&hspi2);

				break;

			case HAL_SPI_ERROR_OVR:

				//SystemManager_Fault.fault[SPI_ERROR_OVR] = SPI_ERROR_OVR;

				//HAL_SPI_Abort_IT(&hspi2);

				break;

			case HAL_SPI_ERROR_DMA:

				//SystemManager_Fault.fault[SPI_ERROR_DMA] = SPI_ERROR_DMA;

				//HAL_SPI_Abort_IT(&hspi2);

				break;

			case HAL_SPI_ERROR_FLAG:

				//SystemManager_Fault.fault[SPI_ERROR_FLAG] = SPI_ERROR_FLAG;

				//HAL_SPI_Abort_IT(&hspi2);

				break;

			case HAL_SPI_ERROR_ABORT:

				//SystemManager_Fault.fault[SPI_ERROR_ABORT] = SPI_ERROR_ABORT;

				Spi_DeInit(SPI_CHANNEL_TWO);
				Spi_Init(SPI_CHANNEL_TWO);

				break;

			default:

				break;

		}

	}
	else
	{

		/* do nothing */

	}

}
