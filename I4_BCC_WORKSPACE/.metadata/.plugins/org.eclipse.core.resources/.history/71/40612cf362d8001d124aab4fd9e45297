/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Serial Peripheral Interface    *
******************************************/
/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "SpiH.h"
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Module main function. */
VOID Spi_MainFunction();
/* Module initialization. */
StdReturnType Spi_Init(uint8 SpiChannel);
/* Module de-initialization. */
StdReturnType Spi_DeInit(uint8 SpiChannel);
/* Module error callback. */
VOID HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi);
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/***********************************************************************************
* Function: Spi_MainFunction											 		   *
* Description: Module main function.					           				   *
************************************************************************************/
VOID Spi_MainFunction()
{
}
/***********************************************************************************
* END OF Spi_MainFunction											  	     	   * 		   																	       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Spi_Init											 		   *
* Description: Process bluetooth communication states.					           *
************************************************************************************/
StdReturnType Spi_Init(uint8 SpiChannel)
{
	hspi3.Instance = SPI1;
	hspi3.Init.Mode = SPI_MODE_MASTER;
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
	hspi3.Init.NSS = SPI_NSS_SOFT;
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
	hspi3.Init.CRCPolynomial = 10;
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
	{
		HAL_SPI_ErrorCallback(&hspi3);
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
}
/***********************************************************************************
* END OF Spi_Init											  					   * 		   																	       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Spi_DeInit											 		   *
* Description: Process bluetooth communication states.					           *
************************************************************************************/
StdReturnType Spi_DeInit(uint8 SpiChannel)
{
	HAL_SPI_DeInit(&hspi3);
	return E_OK;
}
/***********************************************************************************
* END OF Spi_DeInit											  					   * 		   																	       																	   *
************************************************************************************/
/***********************************************************************************
* Function: HAL_SPI_ErrorCallback											 		   *
* Description: Process bluetooth communication states.					           *
************************************************************************************/
VOID HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
	uint32 receivedStatus = HAL_SPI_GetError(hspi);
	switch(receivedStatus)
	{
		case HAL_SPI_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_SPI_ERROR_MODF:
			Spi_DeInit(SPI_CHANNEL_ONE);
			Spi_Init(SPI_CHANNEL_ONE);
			break;
		case HAL_SPI_ERROR_FRE:
			HAL_SPI_Abort_IT(&hspi3);
			break;
		case HAL_SPI_ERROR_CRC:
			HAL_SPI_Abort_IT(&hspi3);
			break;
		case HAL_SPI_ERROR_OVR:
			HAL_SPI_Abort_IT(&hspi3);
			break;
		case HAL_SPI_ERROR_DMA:
			HAL_SPI_Abort_IT(&hspi3);
			break;
		case HAL_SPI_ERROR_FLAG:
			HAL_SPI_Abort_IT(&hspi3);
			break;
		case HAL_SPI_ERROR_ABORT:
			Spi_DeInit(SPI_CHANNEL_ONE);
			Spi_Init(SPI_CHANNEL_ONE);
			break;
		default:
			break;
	}
}
/***********************************************************************************
* END OF HAL_SPI_ErrorCallback											  					   * 		   																	       																	   *
************************************************************************************/
