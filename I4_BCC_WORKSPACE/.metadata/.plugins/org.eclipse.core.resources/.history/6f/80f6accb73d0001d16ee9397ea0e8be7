#include "EcuM.h"
#include "AdcH.h"
#include "TimH.h"
#include "PortH.h"
#include "dma.h"
#include "CrcH.h"
#include "UartH.h"
#include "WatchdogManager.h"
#include "SystemManager.h"
#include "main.h"

EcuM_StateType EcuM_GlobalState;

StdReturnType EcuM_DriverInit();
StdReturnType EcuM_DriverDeInit();
void EcuM_MainFunction();
void EcuM_SetWakeupSource(uint32 wakeupSource);
void EcuM_ProcessWakeupEvent();
void EcuM_CheckForWakeupEvent();

void EcuM_CheckForWakeupEvent()
{

	if((PWR->CSR & RCC_CSR_PORRSTF) != 0)
	{

		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_POR);
		RCC->CSR |= RCC_CSR_RMVF;
		RCC->CSR |= RCC_CSR_PORRSTF;

	}
	else if((PWR->CSR & RCC_CSR_BORRSTF) != 0)
	{

		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_BOR);
		RCC->CSR |= RCC_CSR_RMVF;
		RCC->CSR |= RCC_CSR_BORRSTF;

	}
	else if((RCC->CSR & RCC_CSR_SFTRSTF) != 0)
	{

		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
		RCC->CSR |= RCC_CSR_RMVF;
		RCC->CSR |= RCC_CSR_SFTRSTF;

	}
	else if((RCC->CSR & RCC_CSR_WWDGRSTF) != 0)
	{

		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
		RCC->CSR |= RCC_CSR_RMVF;
		RCC->CSR |= RCC_CSR_WWDGRSTF;

	}
	else if((RCC->CSR & RCC_CSR_LPWRRSTF) != 0)
	{

		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
		RCC->CSR |= RCC_CSR_RMVF;
		RCC->CSR |= RCC_CSR_LPWRRSTF;

	}
	else if((RCC->CSR & RCC_CSR_PADRSTF) != 0)
	{

		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_BUTTON_RESET);
		RCC->CSR |= RCC_CSR_RMVF;
		RCC->CSR |= RCC_CSR_PADRSTF;

	}
	else
	{

		/* do nothing */

	}

}

void EcuM_SetWakeupSource(uint32 wakeupSource)
{

	if(wakeupSource != NULL_PTR)
	{

		EcuM_GlobalState.currentState = wakeupSource;

	}
	else
	{

		/* do nothing */

	}

}

void EcuM_ProcessWakeupEvent()
{

	uint8 localWakeupEvent = EcuM_GlobalState.currentState;

	switch(localWakeupEvent)
	{

		case ECUM_WAKEUPSOURCE_POR:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_POR);

			break;

		case ECUM_WAKEUPSOURCE_BOR:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_BOR);

			break;

		case ECUM_WAKEUPSOURCE_SOFTWARE_RESET:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);

			break;

		case ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);

			break;

		case ECUM_WAKEUPSOURCE_LOWPOWER_RESET:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);

			break;

		case ECUM_WAKEUPSOURCE_BUTTON_RESET:

			SystemManager_SetFault(ECUM_WAKEUPSOURCE_BUTTON_RESET);

			break;

		default:

			break;

	}

}

StdReturnType EcuM_DriverInit()
{

//	Port_Init();
//	Wdg_Init();
//	MX_DMA_Init();
//	Crc_Init();
//	Uart_Init();

//	Adc_Init();


	MX_GPIO_Init();
	MX_DMA_Init();
	MX_TIM2_Init();
	MX_TIM3_Init();
	MX_TIM4_Init();
	MX_TIM1_Init();
	//MX_ADC1_Init();
	Adc_Init();
	Crc_Init();
	MX_WWDG_Init();

	return E_OK;

}

StdReturnType EcuM_DriverDeInit()
{

	HAL_DMA_DeInit(&hdma_adc1);
	Crc_DeInit();
	Uart_DeInit();
	Tim_DeInit(2);
	Tim_DeInit(3);
	Tim_DeInit(4);
	Tim_DeInit(5);
	Tim_DeInit(9);
	Tim_DeInit(11);
	Adc_DeInit();

	return E_OK;

}

void EcuM_MainFunction()
{

	EcuM_CheckForWakeupEvent();
	EcuM_ProcessWakeupEvent();

}
