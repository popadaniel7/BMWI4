#include "BTC.h"
#include "CenLoc.h"
#include "IntLights.h"
#include "ExtLights.h"
#include "usart.h"
#include "RTE.h"

uint8 Btc_DataBuffer[BTC_BUFFER_SIZE] = {0};
uint8 Btc_ReceivedDataOnBluetooth;
uint8 Btc_CenLoc;
uint8 Btc_LightSwitch;
uint8 Btc_HighBeam;
uint8 Btc_FlashHighBeam;
uint8 Btc_FrontFogLight;
uint8 Btc_TurnSignalLeft;
uint8 Btc_TurnSignalRight;
uint8 Btc_HazardLight;
uint8 Btc_BrakeLight;
uint8 Btc_RearFogLight;
uint8 Btc_ReverseLight;
uint8 Btc_IntLights;
uint8 Btc_IgnitionStepOne;
uint8 Btc_IgnitionStepTwo;
uint8 Btc_IgnitionTurnOff;

void Btc_MainFunction();
StdReturnType Btc_Init();
StdReturnType Btc_RxVal();
StdReturnType Btc_EnableUart();
StdReturnType Btc_IgnitionState();

StdReturnType Btc_EnableUart()
{

	uint8 localValue = STD_LOW;

	for(int localIndex = 0; localIndex < 9;)
	{

		Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(&huart1, &Btc_DataBuffer[localIndex], 1);



	}

	localValue = atoi((char*)Btc_DataBuffer);
	Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&localValue);

	return E_OK;

}

StdReturnType Btc_IgnitionState()
{

	uint8 stateValue = STD_LOW;
	uint8 returnValue = E_OK;

	if(Btc_IgnitionStepOne == STD_LOW && Btc_IgnitionStepTwo == STD_LOW && Btc_IgnitionTurnOff == STD_LOW)
	{

		Btc_LightSwitch 		= STD_LOW;
		Btc_HighBeam 			= STD_LOW;
		Btc_FlashHighBeam 		= STD_LOW;
		Btc_FrontFogLight 		= STD_LOW;
		Btc_TurnSignalLeft 		= STD_LOW;
		Btc_TurnSignalRight 	= STD_LOW;
		Btc_HazardLight 		= STD_LOW;
		Btc_BrakeLight 			= STD_LOW;
		Btc_RearFogLight 		= STD_LOW;
		Btc_ReverseLight 		= STD_LOW;
		Btc_IntLights 			= STD_LOW;

	}
	else if(Btc_IgnitionStepOne == STD_HIGH)
	{

		stateValue = STD_LOW;
		Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;

		Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(&stateValue);
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);

	}
	else
	{

		/* do nothing */

	}

	return returnValue;

}

StdReturnType Btc_Init()
{

	Btc_ReceivedDataOnBluetooth 	= STD_LOW;
	Btc_CenLoc						= STD_LOW;
	Btc_LightSwitch					= STD_LOW;
	Btc_HighBeam					= STD_LOW;
	Btc_FlashHighBeam				= STD_LOW;
	Btc_FrontFogLight				= STD_LOW;
	Btc_TurnSignalLeft				= STD_LOW;
	Btc_TurnSignalRight				= STD_LOW;
	Btc_HazardLight					= STD_LOW;
	Btc_BrakeLight					= STD_LOW;
	Btc_RearFogLight				= STD_LOW;
	Btc_ReverseLight				= STD_LOW;
	Btc_IntLights					= STD_LOW;
	Btc_IgnitionStepOne 			= STD_LOW;
	Btc_IgnitionStepTwo 			= STD_LOW;
	Btc_IgnitionTurnOff				= STD_LOW;

	return E_OK;

}

StdReturnType Btc_RxVal()
{

	switch(Btc_ReceivedDataOnBluetooth)
	{

		case BTC_RX_IGNITION_STEP_ONE:

			Btc_IgnitionStepOne = STD_HIGH;
			Btc_IgnitionStepTwo = STD_LOW;
			Btc_IgnitionTurnOff = STD_LOW;

			break;

		case BTC_RX_IGNITION_STEP_TWO:

			Btc_IgnitionStepTwo = STD_HIGH;
			Btc_IgnitionStepOne = STD_LOW;
			Btc_IgnitionTurnOff = STD_LOW;

			break;

		case BTC_RX_IGNITION_TURN_OFF:

			Btc_IgnitionStepTwo = STD_LOW;
			Btc_IgnitionStepOne = STD_LOW;
			Btc_IgnitionTurnOff = STD_HIGH;

			break;

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:

			Btc_ReverseLight = STD_HIGH;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);

			break;

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:

			Btc_ReverseLight = STD_LOW;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);

			break;

		case BTC_RX_EXTLIGHTS_POSITIONZERO:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);

			break;

		case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);

			break;

		case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);

			break;

		case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);

			break;

		case BTC_RX_CENLOC_ON:

			Btc_CenLoc = STD_HIGH;
			Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);

			break;

		case BTC_RX_CENLOC_OFF:

			Btc_CenLoc = STD_LOW;
			Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);

			break;

		case BTC_RX_EXTLIGHTS_HIGBEAM_ON:

			Btc_HighBeam = STD_HIGH;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);

			break;

		case BTC_RX_EXTLIGHTS_HIGBEAM_OFF:

			Btc_HighBeam = STD_LOW;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);

			break;

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

			Btc_FlashHighBeam = STD_HIGH;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(&Btc_FlashHighBeam);

			break;

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

			Btc_FlashHighBeam = STD_LOW;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(&Btc_FlashHighBeam);

			break;

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

			Btc_TurnSignalLeft = STD_HIGH;
			Btc_TurnSignalRight = STD_LOW;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);

			break;

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

			Btc_TurnSignalLeft = STD_LOW;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);

			break;

		case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:

			Btc_TurnSignalRight = STD_HIGH;
			Btc_TurnSignalLeft = STD_LOW;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);

			break;

		case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:

			Btc_TurnSignalRight = STD_LOW;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);

			break;

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

			Btc_HazardLight = STD_HIGH;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);

			break;

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

			Btc_HazardLight = STD_LOW;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);

			break;

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

			Btc_FrontFogLight = STD_HIGH;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);

			break;

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

			Btc_FrontFogLight = STD_LOW;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);

			break;

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

			Btc_RearFogLight = STD_HIGH;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);

			break;

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

			Btc_RearFogLight = STD_LOW;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);

			break;

		case BTC_RX_EXTLIGHTS_BRAKELIGHTON:

			Btc_BrakeLight = STD_HIGH;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);

			break;

		case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

			Btc_BrakeLight = STD_LOW;
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);

			break;

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

			Btc_IntLights = STD_HIGH;
			Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);

			break;

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

			Btc_IntLights = STD_LOW;
			Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);

			break;

		default:

			break;

	}

	return E_OK;

}

void Btc_MainFunction()
{

	Btc_RxVal();
	Btc_EnableUart();
	Btc_IgnitionState();

}
