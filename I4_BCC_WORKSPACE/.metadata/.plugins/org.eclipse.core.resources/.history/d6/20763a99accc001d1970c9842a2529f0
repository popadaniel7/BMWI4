/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "CenLoc.h"
#include "ExtLights.h"
#include "IntLights.h"
#include "SecAlm.h"
#include "Btc.h"
#include "Std_Types.h"
#include "Project_Definitions.h"
#include "timers.h"
#include "Rte.h"
#include "WatchdogManager.h"
#include "AdcH.h"
#include "CrcH.h"
#include "dma.h"
#include "SpiH.h"
#include "TimH.h"
#include "UartH.h"
#include "PortH.h"
#include "SystemManager.h"
#include "EcuM.h"
#include "Dem.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */

unsigned long Os_Counter;

/* USER CODE END Variables */
/* Definitions for OS_Init */
osThreadId_t OS_InitHandle;
const osThreadAttr_t OS_Init_attributes = {
  .name = "OS_Init",
  .stack_size = 1024 * 4,
  .priority = (osPriority_t) osPriorityRealtime6,
};
/* Definitions for OS_Run */
osThreadId_t OS_RunHandle;
const osThreadAttr_t OS_Run_attributes = {
  .name = "OS_Run",
  .stack_size = 1024 * 4,
  .priority = (osPriority_t) osPriorityRealtime5,
};
/* Definitions for ASIL_APPL_Task */
osThreadId_t ASIL_APPL_TaskHandle;
const osThreadAttr_t ASIL_APPL_Task_attributes = {
  .name = "ASIL_APPL_Task",
  .stack_size = 1024 * 4,
  .priority = (osPriority_t) osPriorityHigh7,
};
/* Definitions for QM_APPL_Task */
osThreadId_t QM_APPL_TaskHandle;
const osThreadAttr_t QM_APPL_Task_attributes = {
  .name = "QM_APPL_Task",
  .stack_size = 1024 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for Os_SecAlm_AlarmReset */
osTimerId_t Os_SecAlm_AlarmResetHandle;
const osTimerAttr_t Os_SecAlm_AlarmReset_attributes = {
  .name = "Os_SecAlm_AlarmReset"
};
/* Definitions for Os_CenLoc_LockUnlockSequence_Timer */
osTimerId_t Os_CenLoc_LockUnlockSequence_TimerHandle;
const osTimerAttr_t Os_CenLoc_LockUnlockSequence_Timer_attributes = {
  .name = "Os_CenLoc_LockUnlockSequence_Timer"
};
/* Definitions for Os_SecAlmLed_TurnOnCyclic_Timer */
osTimerId_t Os_SecAlmLed_TurnOnCyclic_TimerHandle;
const osTimerAttr_t Os_SecAlmLed_TurnOnCyclic_Timer_attributes = {
  .name = "Os_SecAlmLed_TurnOnCyclic_Timer"
};
/* Definitions for Os_SecAlmLedTurnOn_Timer */
osTimerId_t Os_SecAlmLedTurnOn_TimerHandle;
const osTimerAttr_t Os_SecAlmLedTurnOn_Timer_attributes = {
  .name = "Os_SecAlmLedTurnOn_Timer"
};
/* Definitions for Os_FollowMeHome_Timer */
osTimerId_t Os_FollowMeHome_TimerHandle;
const osTimerAttr_t Os_FollowMeHome_Timer_attributes = {
  .name = "Os_FollowMeHome_Timer"
};
/* Definitions for Os_TurnSignals_Timer */
osTimerId_t Os_TurnSignals_TimerHandle;
const osTimerAttr_t Os_TurnSignals_Timer_attributes = {
  .name = "Os_TurnSignals_Timer"
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
/* USER CODE END FunctionPrototypes */

void OS_TASK_OS_INIT(void *argument);
void OS_TASK_OS_RUN(void *argument);
void OS_TASK_ASIL_APPL_Task(void *argument);
void OS_TASK_QM_APPL_Task(void *argument);
void Os_SecAlm_AlarmReset_Callback(void *argument);
void Os_CenLoc_LockUnlockSequence_Timer_Callback(void *argument);
void Os_SecAlmLed_TurnOnCyclic_Timer_Callback(void *argument);
void Os_SecAlmLedTurnOn_Timer_Callback(void *argument);
void Os_FollowMeHome_Timer_Callback(void *argument);
void Os_TurnSignals_Timer_Callback(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* Hook prototypes */
void vApplicationIdleHook(void);
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */

void vApplicationIdleHook( void )
{

}

/* USER CODE END 2 */

/* USER CODE BEGIN 3 */

void vApplicationTickHook( void )
{

	Os_Counter++;

}

/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
	SystemManager_PerformReset();
	SystemManager_SetFault(STACK_OVERFLOW_RESET);

}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{

	SystemManager_SetFault(MALLOC_FAILED_RESET);
	//SystemManager_PerformReset();

}

/* USER CODE END 5 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
/* place for user code */
}

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
/* place for user code */
}
/* USER CODE END PREPOSTSLEEP */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Os_SecAlm_AlarmReset */
  Os_SecAlm_AlarmResetHandle = osTimerNew(Os_SecAlm_AlarmReset_Callback, osTimerPeriodic, NULL, &Os_SecAlm_AlarmReset_attributes);

  /* creation of Os_CenLoc_LockUnlockSequence_Timer */
  Os_CenLoc_LockUnlockSequence_TimerHandle = osTimerNew(Os_CenLoc_LockUnlockSequence_Timer_Callback, osTimerPeriodic, NULL, &Os_CenLoc_LockUnlockSequence_Timer_attributes);

  /* creation of Os_SecAlmLed_TurnOnCyclic_Timer */
  Os_SecAlmLed_TurnOnCyclic_TimerHandle = osTimerNew(Os_SecAlmLed_TurnOnCyclic_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLed_TurnOnCyclic_Timer_attributes);

  /* creation of Os_SecAlmLedTurnOn_Timer */
  Os_SecAlmLedTurnOn_TimerHandle = osTimerNew(Os_SecAlmLedTurnOn_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLedTurnOn_Timer_attributes);

  /* creation of Os_FollowMeHome_Timer */
  Os_FollowMeHome_TimerHandle = osTimerNew(Os_FollowMeHome_Timer_Callback, osTimerPeriodic, NULL, &Os_FollowMeHome_Timer_attributes);

  /* creation of Os_TurnSignals_Timer */
  Os_TurnSignals_TimerHandle = osTimerNew(Os_TurnSignals_Timer_Callback, osTimerPeriodic, NULL, &Os_TurnSignals_Timer_attributes);

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OS_Init */
  OS_InitHandle = osThreadNew(OS_TASK_OS_INIT, NULL, &OS_Init_attributes);

  /* creation of OS_Run */
  OS_RunHandle = osThreadNew(OS_TASK_OS_RUN, NULL, &OS_Run_attributes);

  /* creation of ASIL_APPL_Task */
  ASIL_APPL_TaskHandle = osThreadNew(OS_TASK_ASIL_APPL_Task, NULL, &ASIL_APPL_Task_attributes);

  /* creation of QM_APPL_Task */
  QM_APPL_TaskHandle = osThreadNew(OS_TASK_QM_APPL_Task, NULL, &QM_APPL_Task_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_OS_TASK_OS_INIT */
/**
  * @brief  Function implementing the OS_Init thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_OS_TASK_OS_INIT */
void OS_TASK_OS_INIT(void *argument)
{
  /* USER CODE BEGIN OS_TASK_OS_INIT */

	for(;;)
	{

		EcuM_DriverInit();

		vTaskSuspend(NULL);
		osDelay(1);

	}

  /* USER CODE END OS_TASK_OS_INIT */
}

/* USER CODE BEGIN Header_OS_TASK_OS_RUN */
/**
* @brief Function implementing the OS_Run thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_OS_RUN */
void OS_TASK_OS_RUN(void *argument)
{
  /* USER CODE BEGIN OS_TASK_OS_RUN */

	for(;;)
	{

		Rte_Runnable_Wdg_MainFunction();

		osDelay(1);

	}

  /* USER CODE END OS_TASK_OS_RUN */
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_Task */
/**
* @brief Function implementing the ASIL_APPL_Task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_ASIL_APPL_Task */
void OS_TASK_ASIL_APPL_Task(void *argument)
{
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_Task */

	TickType_t xLastWakeTime = xTaskGetTickCount();
	const TickType_t xTaskPeriod = 5 / portTICK_PERIOD_MS;

	for(;;)
	{

		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);

		if (xLastWakeTime % (5 / portTICK_PERIOD_MS) == 0)
		{

			Rte_Runnable_EcuM_MainFunction();
			Rte_Runnable_SystemManager_MainFunction();
			Rte_Runnable_Crc_MainFunction();
			Rte_Runnable_Uart_MainFunction();
			Rte_Runnable_Adc_MainFunction();
			Rte_Runnable_Spi_MainFunction();
			Rte_Runnable_Tim_MainFunction();

		}
		else
		{

			/* do nothing */

		}

		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);

		if (xLastWakeTime % (10 / portTICK_PERIOD_MS) == 0)
		{

			Rte_Runnable_ExtLights_MainFunction();
			Rte_Runnable_SecAlm_MainFunction();

		}
		else
		{

			/* do nothing */

		}

		osDelay(1);

	}

  /* USER CODE END OS_TASK_ASIL_APPL_Task */
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_Task */
/**
* @brief Function implementing the QM_APPL_Task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_QM_APPL_Task */
void OS_TASK_QM_APPL_Task(void *argument)
{
  /* USER CODE BEGIN OS_TASK_QM_APPL_Task */

	TickType_t xLastWakeTime = xTaskGetTickCount();
	const TickType_t xTaskPeriod = 5 / portTICK_PERIOD_MS;

	for(;;)
	{

		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);

		if (xLastWakeTime % (5 / portTICK_PERIOD_MS) == 0)
		{

			Rte_Runnable_Btc_MainFunction();

		}
		else
		{

			/* do nothing */

		}

		vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);

		if (xLastWakeTime % (10 / portTICK_PERIOD_MS) == 0)
		{

			Rte_Runnable_CenLoc_MainFunction();
			Rte_Runnable_IntLights_MainFunction();

		}
		else
		{

			/* do nothing */

		}

		osDelay(1);

	}
  /* USER CODE END OS_TASK_QM_APPL_Task */
}

/* Os_SecAlm_AlarmReset_Callback function */
void Os_SecAlm_AlarmReset_Callback(void *argument)
{
  /* USER CODE BEGIN Os_SecAlm_AlarmReset_Callback */

	Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter((uint16*)0);

  /* USER CODE END Os_SecAlm_AlarmReset_Callback */
}

/* Os_CenLoc_LockUnlockSequence_Timer_Callback function */
void Os_CenLoc_LockUnlockSequence_Timer_Callback(void *argument)
{
  /* USER CODE BEGIN Os_CenLoc_LockUnlockSequence_Timer_Callback */

	if(Timer2Counter_CenLoc_Tim2IRQFlag <= 6
		&& ((Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_HIGH)
		|| (Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_LOW)))
	{

		Timer2Counter_CenLoc_Tim2IRQFlag++;
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(&Timer2Counter_CenLoc_Tim2IRQFlag);

	}
	else
	{

		Timer2Counter_CenLoc_Tim2IRQFlag = 7;
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(&Timer2Counter_CenLoc_Tim2IRQFlag);

	}

  /* USER CODE END Os_CenLoc_LockUnlockSequence_Timer_Callback */
}

/* Os_SecAlmLed_TurnOnCyclic_Timer_Callback function */
void Os_SecAlmLed_TurnOnCyclic_Timer_Callback(void *argument)
{
  /* USER CODE BEGIN Os_SecAlmLed_TurnOnCyclic_Timer_Callback */

  /* USER CODE END Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
}

/* Os_SecAlmLedTurnOn_Timer_Callback function */
void Os_SecAlmLedTurnOn_Timer_Callback(void *argument)
{
  /* USER CODE BEGIN Os_SecAlmLedTurnOn_Timer_Callback */

  /* USER CODE END Os_SecAlmLedTurnOn_Timer_Callback */
}

/* Os_FollowMeHome_Timer_Callback function */
void Os_FollowMeHome_Timer_Callback(void *argument)
{
  /* USER CODE BEGIN Os_FollowMeHome_Timer_Callback */

  /* USER CODE END Os_FollowMeHome_Timer_Callback */
}

/* Os_TurnSignals_Timer_Callback function */
void Os_TurnSignals_Timer_Callback(void *argument)
{
  /* USER CODE BEGIN Os_TurnSignals_Timer_Callback */

  /* USER CODE END Os_TurnSignals_Timer_Callback */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
/* USER CODE END Application */

