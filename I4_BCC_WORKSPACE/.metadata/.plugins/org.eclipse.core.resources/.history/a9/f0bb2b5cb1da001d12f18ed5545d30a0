/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Controller Area Network	     *
******************************************/

/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "Can.h"
#include "CanSpi.h"
#include "McpSpi.h"
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		DEFINES					 		 *
******************************************/
#define CAN_INIT_STATE 				0x00
#define CAN_DEINIT_STATE 			0x07
#define CAN_TX_STATE 				0x01
#define CAN_RX_STATE 				0x02
#define CAN_PENDING_MESSAGE_STATE 	0x03
#define CAN_BUSOFF_STATE 			0x04
#define CAN_INIT_FILTER_STATE 		0x05
#define CAN_INIT_MASK_STATE 		0x06
#define CAN_TX_ERROR				0x08
#define CAN_RX_ERROR				0x09
/*****************************************
* 		END OF DEFINES					 *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
/* CAN Message to be transmitted. */
Can_Message CanMsg_BtcState_Tx;
/* CAN Message to be transmitted. */
Can_Message CanMsg_CenLocState_Tx;
/* CAN Message to be transmitted. */
Can_Message CanMsg_ExtLightsState_Tx;
/* CAN Message to be transmitted. */
Can_Message CanMsg_IntLightsState_Tx;
/* CAN Message to be transmitted. */
Can_Message CanMsg_SecAlmState_Tx;
/* CAN Message to be transmitted. */
Can_Message CanMsg_HvacState_Tx;
/* CAN Message to be transmitted. */
Can_Message CanMsg_DtcState_Tx;
/* CAN Message to be transmitted. */
Can_Message CanMsg_EcuState_Tx;
/* Module state variable. */
uint8 Can_BswState = STD_LOW;
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Protocol initialization. */
VOID Can_Init();
/* Protocol de-initialization. */
VOID Can_DeInit();
/* Protocol main function. */
VOID Can_MainFunction();
/* Protocol set mask. */
VOID Can_InitMask(uint8 MaskNumber, uint8 MaskIdType, uint32 MaskId);
/* Protocol set filter. */
VOID Can_InitFilter(uint8 FilterNumber, uint8 FilterIdType, uint32 FilterId);
/* Protocol bus state. */
StdReturnType Can_BusState();
/* Protocol error and status. */
StdReturnType Can_GetErrorStatus();
/* Check for remaining messages. */
StdReturnType Can_MessagePending();
/* Transmit messages. */
StdReturnType Can_Transmit(Can_Message CanMsg);
/* Receive messages. */
StdReturnType Can_Receive(Can_Message CanMsg);
/* Transmit messages. */
VOID Can_TransmitEcuState(Can_Message CanMsg);
/* Receive messages. */
VOID Can_ReceiveNetworkMessages(Can_Message CanMsg);
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/***********************************************************************************
* Function: Can_Init													   		   *
* Description: Driver initialization.		 	   								   *
************************************************************************************/
VOID Can_Init()
{
	Can_BswState = CAN_INIT_STATE;
	CanOverSpi_Init();
}
/***********************************************************************************
* END OF Can_Init											  			           *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Can_DeInit													   		   *
* Description: Driver de-initialization.		 	   							   *
************************************************************************************/
VOID Can_DeInit()
{
	Can_BswState = CAN_DEINIT_STATE;
	Can_InitMask(0, 0, 0);
	Can_InitFilter(0, 0, 0);
	MCP2515_CanOverSpi_Reset();
}
/***********************************************************************************
* END OF Can_DeInit											  			       	   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Can_InitMask													   	   *
* Description: Protocol mask initialization.		 	   						   *
************************************************************************************/
VOID Can_InitMask(uint8 MaskNumber, uint8 MaskIdType, uint32 MaskId)
{
	Can_BswState = CAN_INIT_MASK_STATE;
	CanOverSpi_Init_Mask(MaskNumber, MaskIdType, MaskId);
}
/***********************************************************************************
* END OF Can_InitMask											  			       *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Can_InitFilter													   	   *
* Description: Protocol filter initialization.		 	   						   *
************************************************************************************/
VOID Can_InitFilter(uint8 FilterNumber, uint8 FilterIdType, uint32 FilterId)
{
	Can_BswState = CAN_INIT_FILTER_STATE;
	CanOverSpi_Init_Filter(FilterNumber, FilterIdType, FilterId);
}
/***********************************************************************************
* END OF Can_InitFilter											  			       *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Can_MainFunction													   *
* Description: Driver main function.		 	   								   *
************************************************************************************/
VOID Can_MainFunction()
{
	switch(Can_BswState)
	{
		case CAN_INIT_STATE:
			break;
		case CAN_DEINIT_STATE:
			break;
		case CAN_TX_STATE:
			break;
		case CAN_RX_STATE:
			break;
		case CAN_PENDING_MESSAGE_STATE:
			break;
		case CAN_BUSOFF_STATE:
			Can_DeInit();
			Can_Init();
			break;
		case CAN_INIT_FILTER_STATE:
			break;
		case CAN_INIT_MASK_STATE:
			break;
		case CAN_TX_ERROR:
			Can_DeInit();
			Can_Init();
			break;
		case CAN_RX_ERROR:
			Can_DeInit();
			Can_Init();
			break;
		default:
			break;
	}
}
/***********************************************************************************
* END OF Can_MainFunction											  			   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Can_BusState													   	   *
* Description: Protocol bus state.		 	   									   *
************************************************************************************/
StdReturnType Can_BusState()
{
	if(CanOverSpi_isBussOff() == STD_HIGH)
	{
		Can_BswState = CAN_BUSOFF_STATE;
		return E_NOT_OK;
	}
	else
	{
		return E_OK;
	}
}
/***********************************************************************************
* END OF Can_BusState											  			       *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Can_GetErrorStatus													   *
* Description: Driver errost status.		 	   								   *
************************************************************************************/
StdReturnType Can_GetErrorStatus()
{
	if(CanOverSpi_isRxErrorPassive() == 0)
	{
		Can_BswState = CAN_RX_ERROR;
		return CAN_RX_ERROR;
	}
	else
	{
		/* do nothing */
	}

	if(CanOverSpi_isTxErrorPassive() == 0)
	{
		Can_BswState = CAN_TX_ERROR;
		return CAN_TX_ERROR;
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
}
/***********************************************************************************
* END OF Can_GetErrorStatus											  			   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Btc_MemRead													   		   *
* Description: Read from meory.		 	   										   *
************************************************************************************/
StdReturnType Can_MessagePending()
{
	if(CanOverSpi_messagesInBuffer() !=0)
	{
		Can_BswState = CAN_PENDING_MESSAGE_STATE;
		return Can_MessagePending();
	}
	else
	{
		return Can_MessagePending();
	}
}
/***********************************************************************************
* END OF Btc_MemWrite											  			       *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Btc_MemRead													   		   *
* Description: Read from meory.		 	   										   *
************************************************************************************/
StdReturnType Can_Transmit(Can_Message CanMsg)
{
	Can_BswState = CAN_TX_STATE;
	CanOverSpi_Transmit((uCAN_MSG*)&CanMsg);
	return E_OK;
}
/***********************************************************************************
* END OF Btc_MemWrite											  			       *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Btc_MemRead													   		   *
* Description: Read from meory.		 	   										   *
************************************************************************************/
StdReturnType Can_Receive(Can_Message CanMsg)
{
	Can_BswState = CAN_RX_STATE;
	CanOverSpi_Receive((uCAN_MSG*)&CanMsg);
	return E_OK;
}
/***********************************************************************************
* END OF Btc_MemWrite											  			       *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Btc_MemRead													   		   *
* Description: Read from meory.		 	   										   *
************************************************************************************/
VOID Can_TransmitEcuState(Can_Message CanMsg);
/* Receive messages. */
VOID Can_ReceiveNetworkMessages(Can_Message CanMsg);
/***********************************************************************************
* END OF Btc_MemWrite											  			       *													       																	   *
************************************************************************************/
