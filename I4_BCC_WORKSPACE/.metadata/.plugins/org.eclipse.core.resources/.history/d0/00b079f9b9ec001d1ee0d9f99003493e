/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Diagnostic Event Manager	     *
******************************************/
/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "Dem.h"
#include "Rte.h"
#include "SystemManager.h"
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		DEFINES					 		 *
******************************************/
/* State define. */
#define DEM_INIT_STATE			0x00
/* State define. */
#define DEM_DEINIT_STATE		0x02
/* State define. */
#define DEM_PROCESSFAULT_STATE 	0x01
/*****************************************
* 		END OF DEFINES					 *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
/* Module state variable. */
uint8 Dem_BswState = STD_LOW;

/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Module initialization. */
StdReturnType Dem_Init();
/* Module de-initialization. */
StdReturnType Dem_DeInit();
/* Module main function. */
VOID Dem_MainFunction();
/* Receive fault from application. */
VOID Dem_ReceiveFault(uint8 faultValue);
/* Process fault from application. */
VOID Dem_ProcessFault();
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/***********************************************************************************
* Function: Dem_Init													           *
* Description: Initialize the module.			       							   *
************************************************************************************/
StdReturnType Dem_Init()
{
	return E_OK;
}
/***********************************************************************************
* END OF Dem_Init											  			           *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Dem_DeInit													           *
* Description: De-initialize the module. 		   							       *
************************************************************************************/
StdReturnType Dem_DeInit()
{
	return E_OK;
}
/***********************************************************************************
* END OF Dem_DeInit											  			           *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Dem_MainFunction													   *
* Description: Module main function.									 		   *
************************************************************************************/
VOID Dem_MainFunction()
{
	switch(Dem_BswState)
	{
		case DEM_INIT_STATE:
			Dem_Init();
			break;
		case DEM_DEINIT_STATE:
			Dem_DeInit();
			break;
		case DEM_PROCESSFAULT_STATE:
			Dem_ProcessFault();
			break;
		default:
			break;
	}
}
/***********************************************************************************
* END OF Dem_MainFunction											  			   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Dem_ReceiveFault													   *
* Description: Receives fault from application.							 		   *
************************************************************************************/
VOID Dem_ReceiveFault(uint8 faultValue)
{
//	if(faultValue != 0)
//	{
//		if(Dem_ReceivedFaults[faultValue].value != faultValue)
//		{
//			Dem_ReceivedFaults[faultValue].value = faultValue;
//			Dem_ReceivedFaults[faultValue].count = 0;
//		}
//		else if(Dem_ReceivedFaults[faultValue].value == faultValue)
//		{
//			Dem_ReceivedFaults[faultValue].count = Dem_ReceivedFaults[faultValue].count + 1;
//		}
//		else
//		{
//			/* Do nothing */
//		}
//	}
//	else
//	{
//		/* do nothing */
//	}



}
/***********************************************************************************
* END OF Dem_ReceiveFault											  			   *													       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Dem_ProcessFault													   *
* Description: Process the fault received from the application.			 		   *
************************************************************************************/
VOID Dem_ProcessFault()
{
//	for(uint8 idx = 0; idx < 93; idx++)
//	{
//		if(Dem_ReceivedFaults[idx].value !=  Dem_DtcArray[idx])
//		{
//			Dem_DtcArray[idx] = Dem_ReceivedFaults[idx].value;
//		}
//		else
//		{
//			/* do nothing */
//		}
//
//		if(Dem_DtcArray[idx] != 0)
//		{
//			if(Dem_DtcCount[idx] != Dem_ReceivedFaults[idx].count)
//			{
//				Dem_DtcCount[idx] = Dem_ReceivedFaults[idx].count;
//			}
//			else
//			{
//				/* do nothing */
//			}
//		}
//		else
//		{
//			/* do nothing */
//		}
//	}
//	for(uint8 index = 0; index < 93; index++)
//	{
//		if(Dem_DtcArray[index] != Dem_MemDtcArray[index] && Dem_DtcArray[index] != 0)
//		{
//			//Dem_MemDtcArray[index] = Dem_DtcArray[index];
//			if(index > 63)
//			{
//				//NvM_Write(6, index, &Dem_DtcArray[index], 1);
//			}
//			else if(index <= 63)
//			{
//				//NvM_Write(5, index, &Dem_DtcArray[index], 1);
//			}
//			else
//			{
//				/* do nothing */
//			}
//		}
//		else
//		{
//			/* do nothing */
//		}
//	}
}
/***********************************************************************************
* END OF Dem_ProcessFault											               *													       																	   *
************************************************************************************/
