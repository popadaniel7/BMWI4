/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Heating Ventilation Air		 *
* 		  Conditioning	     			 *
******************************************/
/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "Hvac.h"
#include "Rte.h"
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		DEFINES					 		 *
******************************************/
/*****************************************
* 		END OF DEFINES					 *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
/* Application state variable. */
uint8 Hvac_ApplState;
/* Current state variable. */
uint8 Hvac_CurrentState;
/* Fan value variable. */
uint8 Hvac_FanValue;
/* Climate control temperature value. */
uint8 Hvac_TemperatureValue;
/* Leg vents state. */
uint8 Hvac_LegVent;
/* Mid vents state. */
uint8 Hvac_MidVent;
/* Windshield vents state. */
uint8 Hvac_WindshieldVent;
/* Windshield defrost mode. */
uint8 Hvac_WindshiedlDefrost;
/* Rear windshield defrost mode. */
uint8 Hvac_RearWindshieldDefrost;
/* AC state. */
uint8 Hvac_Ac;
/* Manual recirculation. */
uint8 Hvac_Recirculation;
/* No recirculation. */
uint8 Hvac_NoRecirculation;
/* Automatic recirculation. */
uint8 Hvac_AutomaticRecirculation;
/* Automatic mode. */
uint8 Hvac_AutomaticMode;
/* Static variable for the clearing of the lcd. */
STATIC uint8 Hvac_IsCleared;
/* Static variable for previous value. */
STATIC uint8 Hvac_PreviousFanValue;
/* Static variable for previous value. */
STATIC uint8 Hvac_PreviousTemperatureValue;
/* Static variable for previous value. */
STATIC uint8 Hvac_PreviousLegVent;
/* Static variable for previous value. */
STATIC uint8 Hvac_PreviousMidVent;
/* Static variable for previous value. */
STATIC uint8 Hvac_PreviousWindshieldVent;
/* Static variable for previous value. */
STATIC uint8 Hvac_PreviousWindshiedlDefrost;
/* Static variable for previous value. */
STATIC uint8 Hvac_PreviousRearWindshieldDefrost;
/* Static variable for previous value. */
STATIC uint8 Hvac_PreviousAc;
/* Static variable for previous value. */
STATIC uint8 Hvac_PreviousNoRecirculation;
/* Static variable for previous value. */
STATIC uint8 Hvac_PreviousRecirculation;
/* Static variable for previous value. */
STATIC uint8 Hvac_PreviousAutomaticRecirculation;
/* Static variable for previous value. */
STATIC uint8 Hvac_PreviousAutomaticMode;
/* Static variable for previous value. */
STATIC uint8 Hvac_IsFirstAutomaticSequence;
/* Static variable for previous value. */
STATIC uint8 Hvac_PrevAutoAc;
/* Static variable for previous value. */
STATIC uint8 Hvac_PrevAutoRec;
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Application initialization. */
StdReturnType Hvac_Init();
/* Application de-initialization. */
StdReturnType Hvac_DeInit();
/* Application main function. */
VOID Hvac_MainFunction();
/* Process the received command. */
VOID Hvac_ProcessCommand();
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/***********************************************************************************
* END OF Btc_RxVal											  					   * 		   																	       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Btc_MainFunction											 		   *
* Description: Process bluetooth communication states.					           *
************************************************************************************/
StdReturnType Hvac_Init()
{
	Hvac_CurrentState 				= STD_LOW;
	Hvac_FanValue 					= STD_LOW;
	Hvac_TemperatureValue 			= STD_LOW;
	Hvac_LegVent 					= STD_LOW;
	Hvac_MidVent 					= STD_LOW;
	Hvac_WindshieldVent 			= STD_LOW;
	Hvac_WindshiedlDefrost 			= STD_LOW;
	Hvac_RearWindshieldDefrost 		= STD_LOW;
	Hvac_Ac 						= STD_LOW;
	Hvac_Recirculation 				= STD_LOW;
	Hvac_NoRecirculation 			= STD_LOW;
	Hvac_AutomaticRecirculation 	= STD_LOW;
	Hvac_AutomaticMode 				= STD_LOW;
	Hvac_ApplState 					= HVAC_PROCESSCOMMAND_STATE;
	return E_OK;
}
/***********************************************************************************
* END OF Btc_RxVal											  					   * 		   																	       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Hvac_DeInit											 		  		   *
* Description: Process bluetooth communication states.					           *
************************************************************************************/
StdReturnType Hvac_DeInit()
{
	/* Perform write all in memory. */
	return E_OK;
}
/***********************************************************************************
* END OF Hvac_DeInit											  				   * 		   																	       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Hvac_MainFunction											 		   *
* Description: Application main function.					                       *
************************************************************************************/
VOID Hvac_MainFunction()
{
	/* Process application state. */
	switch(Hvac_ApplState)
	{
		case HVAC_INIT_STATE:
			Hvac_Init();
			break;
		case HVAC_DEINIT_STATE:
			Hvac_DeInit();
			break;
		case HVAC_PROCESSCOMMAND_STATE:
			Hvac_ProcessCommand();
			break;
		default:
			break;
	}
}
/***********************************************************************************
* END OF Hvac_MainFunction											  		       * 		   																	       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Hvac_ProcessCommand											 		   *
* Description: Process HVAC states.					                               *
************************************************************************************/
VOID Hvac_ProcessCommand()
{
	static uint8 sensorValueAqs = 0; /* AQS SENCTRL REQUEST */
	static uint8 sensorValueTs = 0; /* TS SENCTRL REUQEST */
	if(Hvac_CurrentState == STD_LOW && Hvac_IsCleared)
	{
		/* create rte call */I2cLcd_Clear();
		Hvac_IsCleared = STD_HIGH;
	}
	else if(Hvac_CurrentState == STD_HIGH)
	{
		Hvac_IsCleared = STD_LOW;
		if(Hvac_FanValue != Hvac_PreviousFanValue)
		{
			Hvac_PreviousFanValue = Hvac_FanValue;
			I2cLcd_SetCursor(0, 0);
			I2cLcd_SendString("F=");
			I2cLcd_SetCursor(0, 2);
			I2cLcd_SendData(Hvac_FanValue);
		}
		else
		{
			/* do nothing */
		}

		if(Hvac_TemperatureValue != Hvac_PreviousTemperatureValue)
		{
			Hvac_PreviousTemperatureValue = Hvac_TemperatureValue;
			I2cLcd_SetCursor(1, 0);
			I2cLcd_SendString("T=");
			I2cLcd_SetCursor(1, 2);
			I2cLcd_SendData(Hvac_TemperatureValue);
		}
		else
		{
			/* do nothing */
		}
		if(Hvac_AutomaticMode == STD_HIGH)
		{
			if(Hvac_AutomaticMode !=  Hvac_PreviousAutomaticMode)
			{
				Hvac_PreviousLegVent = Hvac_LegVent;
				I2cLcd_SetCursor(1, 6);
				I2cLcd_SendString("AUTO");
			}
			else
			{
				/* do nothing */
			}
			if(Hvac_IsFirstAutomaticSequence == STD_LOW)
			{
				Hvac_IsFirstAutomaticSequence = STD_HIGH;
				I2cLcd_SetCursor(0, 4);
				I2cLcd_SendString(" ");
				I2cLcd_SetCursor(0, 5);
				I2cLcd_SendString(" ");
				I2cLcd_SetCursor(0, 6);
				I2cLcd_SendString(" ");
				I2cLcd_SetCursor(0, 7);
				I2cLcd_SendString("  ");
				I2cLcd_SetCursor(0, 9);
				I2cLcd_SendString("   ");
			}
			else
			{
				/* do nothing */
			}

			if(sensorValueTs >= 22)
			{
				if(Hvac_PrevAutoAc != sensorValueTs)
				{
					Hvac_PrevAutoAc = sensorValueTs;
					I2cLcd_SetCursor(0, 12);
					I2cLcd_SendString("AC"); /* to activate from TS*/
				}
				else
				{
					/* do nothing */
				}
			}
			else if(sensorValueTs < 22)
			{
				if(Hvac_PrevAutoAc != sensorValueTs)
				{
					Hvac_PrevAutoAc = sensorValueTs;
					I2cLcd_SetCursor(0, 12);
					I2cLcd_SendString("  "); /* to activate from TS*/
				}
				else
				{
					/* do nothing */
				}
			}
			else
			{
				/* do nothing */
			}

			if(sensorValueAqs >= 4000)
			{
				if(Hvac_PrevAutoRec != sensorValueAqs)
				{
					Hvac_PrevAutoRec = sensorValueAqs;
					I2cLcd_SetCursor(1, 3);
					I2cLcd_SendString("(A)"); /* to activate from AQS*/
				}
				else
				{
					/* do nothing */
				}
			}
			else if(sensorValueAqs < 4000)
			{
				if(Hvac_PrevAutoRec != sensorValueAqs)
				{
					Hvac_PrevAutoRec = sensorValueAqs;
					I2cLcd_SetCursor(1, 3);
					I2cLcd_SendString("   "); /* to activate from AQS*/
				}
				else
				{
					/* do nothing */
				}
			}
			else
			{
				/* do nothing */
			}
		}
		else if(Hvac_AutomaticMode == STD_LOW)
		{
			Hvac_PreviousAutomaticMode = Hvac_AutomaticMode;
			Hvac_IsFirstAutomaticSequence = Hvac_AutomaticMode;
			I2cLcd_SetCursor(1, 6);
			I2cLcd_SendString("    ");

			if(Hvac_LegVent == STD_HIGH)
			{
				if(Hvac_LegVent != Hvac_PreviousLegVent)
				{
					Hvac_PreviousLegVent = Hvac_LegVent;
					I2cLcd_SetCursor(0, 4);
					I2cLcd_SendString("L");
				}
				else
				{
					/* do nothing */
				}
			}
			else if(Hvac_LegVent == STD_LOW)
			{
				if(Hvac_LegVent != Hvac_PreviousLegVent)
				{
					Hvac_PreviousLegVent = Hvac_LegVent;
					I2cLcd_SetCursor(0, 4);
					I2cLcd_SendString(" ");
				}
				else
				{
					/* do nothing */
				}
			}
			else
			{
				/* do nothing */
			}

			if(Hvac_MidVent == STD_HIGH)
			{
				if(Hvac_MidVent != Hvac_PreviousMidVent)
				{
					Hvac_PreviousMidVent = Hvac_MidVent;
					I2cLcd_SetCursor(0, 5);
					I2cLcd_SendString("M");
				}
				else
				{
					/* do nothing */
				}
			}
			else if(Hvac_MidVent == STD_LOW)
			{
				if(Hvac_MidVent != Hvac_PreviousMidVent)
				{
					Hvac_PreviousMidVent = Hvac_MidVent;
					I2cLcd_SetCursor(0, 5);
					I2cLcd_SendString(" ");
				}
				else
				{
					/* do nothing */
				}
			}
			else
			{
				/* do nothing */
			}

			if(Hvac_WindshieldVent == STD_HIGH)
			{
				if(Hvac_WindshieldVent != Hvac_PreviousWindshieldVent)
				{
					Hvac_PreviousWindshieldVent = Hvac_WindshieldVent;
					I2cLcd_SetCursor(0, 6);
					I2cLcd_SendString("W");
				}
				else
				{
					/* do nothing */
				}
			}
			else if(Hvac_WindshieldVent == STD_LOW)
			{
				if(Hvac_WindshieldVent != Hvac_PreviousWindshieldVent)
				{
					Hvac_PreviousWindshieldVent = Hvac_WindshieldVent;
					I2cLcd_SetCursor(0, 6);
					I2cLcd_SendString(" ");
				}
				else
				{
					/* do nothing */
				}
			}
			else
			{
				/* do nothing */
			}

			if(Hvac_WindshiedlDefrost == STD_HIGH)
			{
				if(Hvac_WindshiedlDefrost != Hvac_PreviousWindshiedlDefrost)
				{
					Hvac_PreviousWindshiedlDefrost = Hvac_WindshiedlDefrost;
					I2cLcd_SetCursor(0, 7);
					I2cLcd_SendString("WD");
				}
				else
				{
					/* do nothing */
				}
			}
			else if(Hvac_WindshiedlDefrost == STD_LOW)
			{
				if(Hvac_WindshiedlDefrost != Hvac_PreviousWindshiedlDefrost)
				{
					Hvac_PreviousWindshiedlDefrost = Hvac_WindshiedlDefrost;
					I2cLcd_SetCursor(0, 7);
					I2cLcd_SendString("  ");
				}
				else
				{
					/* do nothing */
				}
			}
			else
			{
				/* do nothing */
			}

			if(Hvac_RearWindshieldDefrost == STD_HIGH)
			{
				if(Hvac_RearWindshieldDefrost != Hvac_PreviousRearWindshieldDefrost)
				{
					Hvac_PreviousRearWindshieldDefrost = Hvac_RearWindshieldDefrost;
					I2cLcd_SetCursor(0, 9);
					I2cLcd_SendString("RWD");
				}
				else
				{
					/* do nothing */
				}
			}
			else if(Hvac_RearWindshieldDefrost == STD_LOW)
			{
				if(Hvac_RearWindshieldDefrost != Hvac_PreviousRearWindshieldDefrost)
				{
					Hvac_PreviousRearWindshieldDefrost = Hvac_RearWindshieldDefrost;
					I2cLcd_SetCursor(0, 9);
					I2cLcd_SendString("   ");
				}
				else
				{
					/* do nothing */
				}
			}
			else
			{
				/* do nothing */
			}

			if(Hvac_Ac == STD_HIGH)
			{
				if(Hvac_Ac != Hvac_PreviousAc)
				{
					Hvac_PreviousRearWindshieldDefrost = Hvac_Ac;
					I2cLcd_SetCursor(0, 12);
					I2cLcd_SendString("AC");
				}
				else
				{
					/* do nothing */
				}
			}
			else if(Hvac_Ac == STD_LOW)
			{
				if(Hvac_Ac != Hvac_PreviousAc)
				{
					Hvac_PreviousAc = Hvac_Ac;
					I2cLcd_SetCursor(0, 12);
					I2cLcd_SendString("  ");
				}
				else
				{
					/* do nothing */
				}
			}
			else
			{
				/* do nothing */
			}

			if(Hvac_NoRecirculation == STD_HIGH && Hvac_Recirculation == STD_LOW && Hvac_AutomaticRecirculation == STD_LOW)
			{
				if(Hvac_NoRecirculation != Hvac_PreviousNoRecirculation)
				{
					Hvac_PreviousNoRecirculation = Hvac_NoRecirculation;
					I2cLcd_SetCursor(1, 3);
					I2cLcd_SendString("(N)");
				}
				else
				{
					/* do nothing */
				}
			}
			else if(Hvac_NoRecirculation == STD_LOW && Hvac_Recirculation == STD_HIGH && Hvac_AutomaticRecirculation == STD_LOW)
			{
				if(Hvac_Recirculation != Hvac_PreviousRecirculation)
				{
					Hvac_PreviousRecirculation = Hvac_Recirculation;
					I2cLcd_SetCursor(1, 3);
					I2cLcd_SendString("(C)");
				}
				else
				{
					/* do nothing */
				}
			}
			else if(Hvac_NoRecirculation == STD_LOW && Hvac_Recirculation == STD_LOW && Hvac_AutomaticRecirculation == STD_HIGH)
			{
				if(Hvac_AutomaticRecirculation != Hvac_PreviousAutomaticRecirculation)
				{
					Hvac_PreviousAutomaticRecirculation = Hvac_AutomaticRecirculation;
					I2cLcd_SetCursor(1, 3);
					I2cLcd_SendString("(A)"); /* to activate from AQS */
				}
				else
				{
					/* do nothing */
				}
			}
			else
			{
				/* do nothing */
			}
		}
	}
}
/***********************************************************************************
* END OF Hvac_ProcessCommand											 		   * 		   																	       																	   *
************************************************************************************/
