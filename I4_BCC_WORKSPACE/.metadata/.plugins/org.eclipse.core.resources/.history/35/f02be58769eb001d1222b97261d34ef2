/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Flash Eeprom Emulation  		 *
******************************************/
/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "Fee.h"
#include "stm32f4xx_hal.h"
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		DEFINES					 		 *
******************************************/
/* Module state define. */
#define FEE_INIT_STATE 		0x00
/* Module state define. */
#define FEE_DEINIT_STATE 	0x03
/* Module state define. */
#define FEE_READY_STATE		0x01
/* Module state define. */
#define FEE_BUSY_STATE		0x02
/* Module error state. */
#define FEE_ERROR_STATE		0x04
/*****************************************
* 		END OF DEFINES					 *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
uint32 Fee_BswState;
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Function declaration for initialization. */
StdReturnType Fee_Init();
/* Function declaration for de-initialization. */
StdReturnType Fee_DeInit();
/* Function declaration for the main function. */
VOID Fee_MainFunction();
/* Function declaration for writing into memory. */
StdReturnType Fee_Write(uint16 address, uint8 *data, uint16 size);
/* Function declaration for reading from memory. */
StdReturnType Fee_Read(uint16 address, uint8 *data, uint16 size);
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/***********************************************************************************
* Function: Fee_Init										   			           *
* Description: Module initialization.									           *
************************************************************************************/
StdReturnType Fee_Init()
{
	return E_OK;
}
/***********************************************************************************
* END OF Fee_Init										                           *
************************************************************************************/
/***********************************************************************************
* Function: Fee_DeInit										   			           *
* Description: Module de-initialization.									       *
************************************************************************************/
StdReturnType Fee_DeInit()
{
	return E_OK;
}
/***********************************************************************************
* END OF Fee_DeInit										                           *
************************************************************************************/
/***********************************************************************************
* Function: Fee_MainFunction										   			   *
* Description: Module main function.									           *
************************************************************************************/
VOID Fee_MainFunction()
{

}
/***********************************************************************************
* END OF Fee_MainFunction										                   *
************************************************************************************/
/***********************************************************************************
* Function: Fee_Write										   			           *
* Description: Memory writing.									                   *
************************************************************************************/
StdReturnType Fee_Write(uint16 address, uint8 *data, uint16 size)
{
	HAL_FLASH_Unlock();
	uint32_t sectorError;
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
	eraseInit.Sector = FLASH_SECTOR_7;
	eraseInit.NbSectors = 1;
	eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
	if(HAL_FLASHEx_Erase(&eraseInit, &sectorError) != HAL_OK)
	{
	}
	uint32_t pageAddress = FEE_EEPROM_START_ADDRESS + address;
	uint32_t dataIndex = 0;
	while(dataIndex < sizeof(data))
	{
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, pageAddress, data[dataIndex]) != HAL_OK)
		{
			SystemManager_PerformReset();
		}
		else
		{
			/* do nothing */
		}
		dataIndex++;
		pageAddress++;
		if((pageAddress % FEE_PAGE_SIZE) == 0)
		{
			pageAddress += FEE_PAGE_SIZE;
		}
	}
	if(HAL_FLASH_Lock() != HAL_OK)
	{
		SystemManager_PerformReset();
	}
	return E_OK;
}
/***********************************************************************************
* END OF Fee_Write										                           *
************************************************************************************/
/***********************************************************************************
* Function: Fee_Read										   			           *
* Description: Memory reading.									                   *
************************************************************************************/
StdReturnType Fee_Read(uint16 address, uint8 *data, uint16 size)
{

	return E_OK;
}
/***********************************************************************************
* END OF Fee_Read										                           *
************************************************************************************/
