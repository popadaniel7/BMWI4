/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Heating Ventilation Air		 *
* 		  Conditioning	     			 *
******************************************/
/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "Hvac.h"
#include "Rte.h"
#include <stdio.h>
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		DEFINES					 		 *
******************************************/
/* Application request define. */
#define HVAC_AQS_REQUEST			0x06
/* Application request define. */
#define HVAC_TS_REQUEST				0x07
/*****************************************
* 		END OF DEFINES					 *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/
/* Main counter variable. */
uint32 Hvac_MainCounter = STD_LOW;
/* Sensor state variable. */
uint8 Hvac_TsState;
/* Sensor state variable. */
uint8 Hvac_AqsState;
/* Application state variable. */
uint8 Hvac_ApplState = STD_LOW;
/* Current state variable. */
uint8 Hvac_CurrentState = STD_LOW;
/* Fan value variable. */
uint8 Hvac_FanValue = STD_LOW;
/* Climate control temperature value. */
uint8 Hvac_TemperatureValue = STD_LOW;
/* Leg vents state. */
uint8 Hvac_LegVent = STD_LOW;
/* Mid vents state. */
uint8 Hvac_MidVent = STD_LOW;
/* Windshield vents state. */
uint8 Hvac_WindshieldVent = STD_LOW;
/* Windshield defrost mode. */
uint8 Hvac_WindshieldDefrost = STD_LOW;
/* Rear windshield defrost mode. */
uint8 Hvac_RearWindshieldDefrost = STD_LOW;
/* AC state. */
uint8 Hvac_Ac = STD_LOW;
/* Manual recirculation. */
uint8 Hvac_Recirculation = STD_LOW;
/* No recirculation. */
uint8 Hvac_NoRecirculation = STD_LOW;
/* Automatic recirculation. */
uint8 Hvac_AutomaticRecirculation = STD_LOW;
/* Automatic mode. */
uint8 Hvac_AutomaticMode = STD_LOW;
/* Static variable for the clearing of the lcd. */
STATIC uint8 Hvac_IsCleared = STD_LOW;
/* Fan value variable. */
STATIC uint8 prevHvac_FanValue = STD_LOW;
/* Climate control temperature value. */
STATIC uint8 prevHvac_TemperatureValue = STD_LOW;
/* Leg vents state. */
STATIC uint8 prevHvac_LegVent = STD_LOW;
/* Mid vents state. */
STATIC uint8 prevHvac_MidVent = STD_LOW;
/* Windshield vents state. */
STATIC uint8 prevHvac_WindshieldVent = STD_LOW;
/* Windshield defrost mode. */
STATIC uint8 prevHvac_WindshieldDefrost = STD_LOW;
/* Rear windshield defrost mode. */
STATIC uint8 prevHvac_RearWindshieldDefrost = STD_LOW;
/* AC state. */
STATIC uint8 prevHvac_Ac = STD_LOW;
/* Manual recirculation. */
STATIC uint8 prevHvac_Recirculation = STD_LOW;
/* No recirculation. */
STATIC uint8 prevHvac_NoRecirculation = STD_LOW;
/* Automatic recirculation. */
STATIC uint8 prevHvac_AutomaticRecirculation = STD_LOW;
/* Automatic mode. */
STATIC uint8 prevHvac_AutomaticMode = STD_LOW;
/* Static previous fan value variable. */
STATIC uint8 Hvac_prevFanValue = STD_LOW;
/* Static previous climate control temperature value. */
STATIC uint8 Hvac_prevTemperatureValue = STD_LOW;
/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
/* Application initialization. */
StdReturnType Hvac_Init();
/* Application de-initialization. */
StdReturnType Hvac_DeInit();
/* Application main function. */
VOID Hvac_MainFunction();
/* Process the received command. */
VOID Hvac_ProcessCommand();
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/
/***********************************************************************************
* Function: Hvac_Init											 		   		   *
* Description: Application initialization.					           			   *
************************************************************************************/
StdReturnType Hvac_Init()
{
	Hvac_MainCounter 				= STD_LOW;
	Hvac_CurrentState 				= STD_LOW;
	Hvac_FanValue 					= STD_LOW;
	Hvac_TemperatureValue 			= STD_LOW;
	Hvac_LegVent 					= STD_LOW;
	Hvac_MidVent 					= STD_LOW;
	Hvac_WindshieldVent 			= STD_LOW;
	Hvac_WindshieldDefrost 			= STD_LOW;
	Hvac_RearWindshieldDefrost 		= STD_LOW;
	Hvac_Ac 						= STD_LOW;
	Hvac_Recirculation 				= STD_LOW;
	Hvac_NoRecirculation 			= STD_LOW;
	Hvac_AutomaticRecirculation 	= STD_LOW;
	Hvac_AutomaticMode 				= STD_LOW;
	Hvac_ApplState 					= HVAC_PROCESSCOMMAND_STATE;
	return E_OK;
}
/***********************************************************************************
* END OF Hvac_Init											  					   * 		   																	       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Hvac_DeInit											 		  		   *
* Description: Application de-initialization.					           		   *
************************************************************************************/
StdReturnType Hvac_DeInit()
{
	/* Perform write all in memory. */
	return E_OK;
}
/***********************************************************************************
* END OF Hvac_DeInit											  				   * 		   																	       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Hvac_MainFunction											 		   *
* Description: Application main function.					                       *
************************************************************************************/
VOID Hvac_MainFunction()
{
	Hvac_MainCounter++;
	/* Process application state. */
	switch(Hvac_ApplState)
	{
		case HVAC_INIT_STATE:
			Hvac_Init();
			break;
		case HVAC_DEINIT_STATE:
			Hvac_DeInit();
			break;
		case HVAC_PROCESSCOMMAND_STATE:
			Hvac_ProcessCommand();
			break;
		default:
			break;
	}
}
/***********************************************************************************
* END OF Hvac_MainFunction											  		       * 		   																	       																	   *
************************************************************************************/
/***********************************************************************************
* Function: Hvac_ProcessCommand											 		   *
* Description: Process HVAC states.					                               *
************************************************************************************/
VOID Hvac_ProcessCommand()
{
	static uint8 sensorValueTs = 0;
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(HVAC_TS_REQUEST);
	sensorValueAqs = Hvac_AqsState;
	sensorValueTs = Hvac_TsState;
	char buffer_T[3];
	char buffer_F[2];

	Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 15);
	Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
	Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 15);
	Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
	Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 15);

	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
	{
		if(Btc_FanValue == STD_LOW)
		{
			Hvac_FanValue = 1;
		}
		else
		{
			/* do nothing */
		}

		if(Btc_TemperatureValue == STD_LOW)
		{
			Hvac_TemperatureValue = 22;
			Hvac_prevTemperatureValue = Hvac_TemperatureValue;
		}
		else
		{
			/* do nothing */
		}

		if(Hvac_FanValue != STD_LOW)
		{
			Hvac_CurrentState = STD_HIGH;
		}
		else if(Hvac_FanValue == STD_LOW)
		{
			Hvac_CurrentState = STD_LOW;
		}
		else
		{
			/* do nothing */
		}

		if(Hvac_TemperatureValue != Hvac_prevTemperatureValue)
		{
			Btc_FanValue = 1;
			Hvac_FanValue = 1;
			Hvac_prevTemperatureValue = Hvac_TemperatureValue;
			Hvac_CurrentState = STD_HIGH;
		}
		else
		{
			/* do nothing */
		}

		if(prevHvac_Ac != Hvac_Ac)
		{
			Btc_FanValue = 1;
			Hvac_FanValue = 1;
			prevHvac_Ac = Hvac_Ac;
			Hvac_CurrentState = STD_HIGH;
		}

		if(prevHvac_AutomaticMode != Hvac_AutomaticMode)
		{
			Btc_FanValue = 1;
			Hvac_FanValue = 1;
			prevHvac_AutomaticMode = Hvac_AutomaticMode;
			Hvac_CurrentState = STD_HIGH;
		}

		if(prevHvac_LegVent != Hvac_LegVent)
		{
			Btc_FanValue = 1;
			Hvac_FanValue = 1;
			prevHvac_LegVent = Hvac_LegVent;
			Hvac_CurrentState = STD_HIGH;
		}

		if(prevHvac_MidVent != Hvac_MidVent)
		{
			Btc_FanValue = 1;
			Hvac_FanValue = 1;
			prevHvac_MidVent = Hvac_MidVent;
			Hvac_CurrentState = STD_HIGH;
		}

		if(prevHvac_WindshieldVent != Hvac_WindshieldVent)
		{
			Btc_FanValue = 1;
			Hvac_FanValue = 1;
			prevHvac_WindshieldVent = Hvac_WindshieldVent;
			Hvac_CurrentState = STD_HIGH;
		}

		if(prevHvac_WindshieldVent != Hvac_WindshieldVent)
		{
			Btc_FanValue = 1;
			Hvac_FanValue = 1;
			prevHvac_WindshieldVent = Hvac_WindshieldVent;
			Hvac_CurrentState = STD_HIGH;
		}

		if(prevHvac_WindshieldDefrost != Hvac_WindshieldDefrost)
		{
			Btc_FanValue = 1;
			Hvac_FanValue = 1;
			prevHvac_WindshieldDefrost = Hvac_WindshieldDefrost;
			Hvac_CurrentState = STD_HIGH;
		}

		if(prevHvac_RearWindshieldDefrost != Hvac_RearWindshieldDefrost)
		{
			Btc_FanValue = 1;
			Hvac_FanValue = 1;
			prevHvac_RearWindshieldDefrost = Hvac_RearWindshieldDefrost;
			Hvac_CurrentState = STD_HIGH;
		}

		if(prevHvac_Recirculationt != Hvac_Recirculationt)
		{
			Btc_FanValue = 1;
			Hvac_FanValue = 1;
			prevHvac_Recirculationt = Hvac_Recirculationt;
			Hvac_CurrentState = STD_HIGH;
		}

	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
	{
		Hvac_CurrentState = STD_LOW;
		Hvac_IsCleared = STD_LOW;
	}
	else
	{
		/* do nothing */
	}

	sprintf(buffer_T, "%u", (unsigned int) Hvac_TemperatureValue);
	sprintf(buffer_F, "%u", (unsigned int) Hvac_FanValue);

	if(Hvac_CurrentState == STD_LOW && Hvac_IsCleared == STD_LOW)
	{
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_Clear();
		Hvac_IsCleared = STD_HIGH;
	}
	else if(Hvac_CurrentState == STD_HIGH)
	{
		Hvac_IsCleared = STD_LOW;
		if(Hvac_MainCounter % 500 == 0)
		{
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_Clear();
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 0);
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("F=");
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 2);
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(buffer_F);
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 0);
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("T=");
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 2);
		Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(buffer_T);
		if(Hvac_AutomaticMode == STD_HIGH)
		{
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("AUTO");
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 3);
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 5);
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 7);
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 9);
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 12);
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("   ");

			if(sensorValueTs == STD_HIGH)
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 7);
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("AC");
			}
			else if(sensorValueTs == STD_LOW)
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 7);
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
			}
			else
			{
				/* do nothing */
			}
		}
		else if(Hvac_AutomaticMode == STD_LOW)
		{

			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 9);
			Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("    ");

			if(Hvac_LegVent == STD_HIGH)
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 3);
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("L");
			}
			else if(Hvac_LegVent == STD_LOW)
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 3);
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
			}
			else
			{
				/* do nothing */
			}
			if(Hvac_MidVent == STD_HIGH)
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 5);
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("M");
			}
			else if(Hvac_MidVent == STD_LOW)
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 5);
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
			}
			else
			{
				/* do nothing */
			}

			if(Hvac_WindshieldVent == STD_HIGH)
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 7);
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("W");
			}
			else if(Hvac_WindshieldVent == STD_LOW)
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 7);
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString(" ");
			}
			else
			{
				/* do nothing */
			}

			if(Hvac_WindshieldDefrost == STD_HIGH)
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 9);
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("WD");
			}
			else if(Hvac_WindshieldDefrost == STD_LOW)
			{

				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 9);
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
			}
			else
			{
				/* do nothing */
			}

			if(Hvac_RearWindshieldDefrost == STD_HIGH)
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 12);
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("RWD");
			}
			else if(Hvac_RearWindshieldDefrost == STD_LOW)
			{

				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(0, 12);
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("   ");
			}
			else
			{
				/* do nothing */
			}

			if(Hvac_Ac == STD_HIGH)
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 7);
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("AC");
			}
			else if(Hvac_Ac == STD_LOW)
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 7);
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("  ");
			}
			else
			{
				/* do nothing */
			}

			if(Hvac_NoRecirculation == STD_HIGH && Hvac_Recirculation == STD_LOW)
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 5);
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("   ");
			}
			else if(Hvac_NoRecirculation == STD_LOW && Hvac_Recirculation == STD_HIGH)
			{
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SetCursor(1, 5);
				Rte_Call_I2cLcd_P_I2cLcdPort_I2cLcd_SendString("(C)");
			}
			else
			{
				/* do nothing */
			}
		}
	}

}
/***********************************************************************************
* END OF Hvac_ProcessCommand											 		   * 		   																	       																	   *
************************************************************************************/
