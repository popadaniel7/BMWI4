/*****************************************
* Project: BCM I4						 *
* Developer: Daniel Popa				 *
* Module: Controller Area Network	     *
******************************************/

/*****************************************
*		INCLUDE PATHS					 *
******************************************/
#include "Can.h"
/*****************************************
*		END OF INCLUDE PATHS		     *
******************************************/
/*****************************************
*		DEFINES					 		 *
******************************************/
/*****************************************
* 		END OF DEFINES					 *
******************************************/
/*****************************************
*		VARIABLES					 	 *
******************************************/

/*****************************************
*		END OF VARIABLES				 *
******************************************/
/*****************************************
*		FUNCTIONS				 		 *
******************************************/
VOID Can_Init();
VOID Can_DeInit();
VOID Can_MainFunction();
VOID Can_InitMask(uint8 MaskNumber, uint8 MaskIdType, uint32 MaskId);
VOID Can_InitFilter(uint8 FilterNumber, uint8 FilterIdType, uint32 FilterId);
StdReturnType Can_BusState();
StdReturnType Can_GetErrorStatus();
StdReturnType Can_MessagePending();
StdReturnType Can_Transmit(Can_Message CanMsg);
StdReturnType Can_Receive(Can_Message CanMsg);
/*****************************************
*		END OF FUNCTIONS				 *
******************************************/

VOID Can_Init()
{

}

VOID Can_DeInit()
{

}

VOID Can_InitMask(uint8 MaskNumber, uint8 MaskIdType, uint32 MaskId)
{
	CanOverSpi_Init_Mask(MaskNumber, MaskIdType, MaskId);
}

VOID Can_InitFilter(uint8 FilterNumber, uint8 FilterIdType, uint32 FilterId)
{
	CanOverSpi_Init_Filter(FilterNumber, FilterIdType, FilterId);
}

VOID Can_MainFunction()
{

}

StdReturnType Can_BusState()
{
	return CanOverSpi_isBussOff();
}

StdReturnType Can_GetErrorStatus()
{

}

StdReturnType Can_MessagePending()
{
	return CanOverSpi_messagesInBuffer();
}

StdReturnType Can_Transmit(Can_Message CanMsg)
{
	CanOverSpi_Transmit(CanMsg);
	return E_OK;
}

StdReturnType Can_Receive(Can_Message CanMsg)
{
	CanOverSpi_Receive(CanMsg);
	return E_OK;
}
