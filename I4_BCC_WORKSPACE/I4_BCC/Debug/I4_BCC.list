
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fba8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ce4  0800fd48  0800fd48  0001fd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a2c  08011a2c  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08011a2c  08011a2c  00021a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a34  08011a34  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a34  08011a34  00021a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a38  08011a38  00021a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08011a3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000056a0  20000078  08011ab4  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005718  08011ab4  00035718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033b55  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000073a4  00000000  00000000  00063bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029e8  00000000  00000000  0006afa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026e0  00000000  00000000  0006d990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023120  00000000  00000000  00070070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003fb20  00000000  00000000  00093190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb1ce  00000000  00000000  000d2cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018de7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b050  00000000  00000000  0018ded0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fd30 	.word	0x0800fd30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800fd30 	.word	0x0800fd30

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <Btc_EnableUart>:
StdReturnType Btc_RxVal();
StdReturnType Btc_EnableUart();
StdReturnType Btc_IgnitionState();

StdReturnType Btc_EnableUart()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0

	Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(&huart1, &Btc_RxData, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	4903      	ldr	r1, [pc, #12]	; (80004f8 <Btc_EnableUart+0x14>)
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <Btc_EnableUart+0x18>)
 80004ee:	f00f f979 	bl	800f7e4 <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>

	return E_OK;
 80004f2:	2300      	movs	r3, #0

}
 80004f4:	4618      	mov	r0, r3
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000098 	.word	0x20000098
 80004fc:	20000a34 	.word	0x20000a34

08000500 <Btc_IgnitionState>:

StdReturnType Btc_IgnitionState()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

	uint8 stateValue = STD_LOW;
 8000506:	2300      	movs	r3, #0
 8000508:	71bb      	strb	r3, [r7, #6]
	uint8 returnValue = E_OK;
 800050a:	2300      	movs	r3, #0
 800050c:	71fb      	strb	r3, [r7, #7]

	if(Btc_IgnitionStepOne == STD_LOW && Btc_IgnitionStepTwo == STD_LOW && Btc_IgnitionTurnOff == STD_LOW)
 800050e:	4b21      	ldr	r3, [pc, #132]	; (8000594 <Btc_IgnitionState+0x94>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d129      	bne.n	800056a <Btc_IgnitionState+0x6a>
 8000516:	4b20      	ldr	r3, [pc, #128]	; (8000598 <Btc_IgnitionState+0x98>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d125      	bne.n	800056a <Btc_IgnitionState+0x6a>
 800051e:	4b1f      	ldr	r3, [pc, #124]	; (800059c <Btc_IgnitionState+0x9c>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d121      	bne.n	800056a <Btc_IgnitionState+0x6a>
	{

		Btc_LightSwitch 		= STD_LOW;
 8000526:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <Btc_IgnitionState+0xa0>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
		Btc_HighBeam 			= STD_LOW;
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <Btc_IgnitionState+0xa4>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
		Btc_FlashHighBeam 		= STD_LOW;
 8000532:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <Btc_IgnitionState+0xa8>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
		Btc_FrontFogLight 		= STD_LOW;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <Btc_IgnitionState+0xac>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
		Btc_TurnSignalLeft 		= STD_LOW;
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <Btc_IgnitionState+0xb0>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
		Btc_TurnSignalRight 	= STD_LOW;
 8000544:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <Btc_IgnitionState+0xb4>)
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
		Btc_HazardLight 		= STD_LOW;
 800054a:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <Btc_IgnitionState+0xb8>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
		Btc_BrakeLight 			= STD_LOW;
 8000550:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <Btc_IgnitionState+0xbc>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
		Btc_RearFogLight 		= STD_LOW;
 8000556:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <Btc_IgnitionState+0xc0>)
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
		Btc_ReverseLight 		= STD_LOW;
 800055c:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <Btc_IgnitionState+0xc4>)
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
		Btc_IntLights 			= STD_LOW;
 8000562:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <Btc_IgnitionState+0xc8>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
 8000568:	e00f      	b.n	800058a <Btc_IgnitionState+0x8a>

	}
	else if(Btc_IgnitionStepOne == STD_HIGH)
 800056a:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <Btc_IgnitionState+0x94>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d10b      	bne.n	800058a <Btc_IgnitionState+0x8a>
	{

		stateValue = STD_LOW;
 8000572:	2300      	movs	r3, #0
 8000574:	71bb      	strb	r3, [r7, #6]
		Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <Btc_IgnitionState+0xa0>)
 8000578:	2217      	movs	r2, #23
 800057a:	701a      	strb	r2, [r3, #0]

		Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(&stateValue);
 800057c:	1dbb      	adds	r3, r7, #6
 800057e:	4618      	mov	r0, r3
 8000580:	f00e ff44 	bl	800f40c <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000584:	4806      	ldr	r0, [pc, #24]	; (80005a0 <Btc_IgnitionState+0xa0>)
 8000586:	f00e fff1 	bl	800f56c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

		/* do nothing */

	}

	return returnValue;
 800058a:	79fb      	ldrb	r3, [r7, #7]

}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200000a7 	.word	0x200000a7
 8000598:	200000a8 	.word	0x200000a8
 800059c:	200000a9 	.word	0x200000a9
 80005a0:	2000009c 	.word	0x2000009c
 80005a4:	2000009d 	.word	0x2000009d
 80005a8:	2000009e 	.word	0x2000009e
 80005ac:	2000009f 	.word	0x2000009f
 80005b0:	200000a0 	.word	0x200000a0
 80005b4:	200000a1 	.word	0x200000a1
 80005b8:	200000a2 	.word	0x200000a2
 80005bc:	200000a3 	.word	0x200000a3
 80005c0:	200000a4 	.word	0x200000a4
 80005c4:	200000a5 	.word	0x200000a5
 80005c8:	200000a6 	.word	0x200000a6

080005cc <Btc_RxVal>:
	return E_OK;

}

StdReturnType Btc_RxVal()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0

	switch(Btc_ReceivedDataOnBluetooth)
 80005d0:	4b93      	ldr	r3, [pc, #588]	; (8000820 <Btc_RxVal+0x254>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	3b01      	subs	r3, #1
 80005d6:	2b1c      	cmp	r3, #28
 80005d8:	f200 811e 	bhi.w	8000818 <Btc_RxVal+0x24c>
 80005dc:	a201      	add	r2, pc, #4	; (adr r2, 80005e4 <Btc_RxVal+0x18>)
 80005de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e2:	bf00      	nop
 80005e4:	080006e9 	.word	0x080006e9
 80005e8:	080006f7 	.word	0x080006f7
 80005ec:	08000705 	.word	0x08000705
 80005f0:	08000713 	.word	0x08000713
 80005f4:	08000721 	.word	0x08000721
 80005f8:	0800072f 	.word	0x0800072f
 80005fc:	0800073d 	.word	0x0800073d
 8000600:	08000757 	.word	0x08000757
 8000604:	08000765 	.word	0x08000765
 8000608:	0800077f 	.word	0x0800077f
 800060c:	0800078d 	.word	0x0800078d
 8000610:	0800079b 	.word	0x0800079b
 8000614:	080007a9 	.word	0x080007a9
 8000618:	080007b7 	.word	0x080007b7
 800061c:	080007c5 	.word	0x080007c5
 8000620:	080007d3 	.word	0x080007d3
 8000624:	080007e1 	.word	0x080007e1
 8000628:	080007ef 	.word	0x080007ef
 800062c:	080007fd 	.word	0x080007fd
 8000630:	0800080b 	.word	0x0800080b
 8000634:	08000695 	.word	0x08000695
 8000638:	080006a3 	.word	0x080006a3
 800063c:	080006b1 	.word	0x080006b1
 8000640:	080006bf 	.word	0x080006bf
 8000644:	080006cd 	.word	0x080006cd
 8000648:	080006db 	.word	0x080006db
 800064c:	08000659 	.word	0x08000659
 8000650:	0800066d 	.word	0x0800066d
 8000654:	08000681 	.word	0x08000681
	{

		case BTC_RX_IGNITION_STEP_ONE:

			Btc_IgnitionStepOne = STD_HIGH;
 8000658:	4b72      	ldr	r3, [pc, #456]	; (8000824 <Btc_RxVal+0x258>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
			Btc_IgnitionStepTwo = STD_LOW;
 800065e:	4b72      	ldr	r3, [pc, #456]	; (8000828 <Btc_RxVal+0x25c>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
			Btc_IgnitionTurnOff = STD_LOW;
 8000664:	4b71      	ldr	r3, [pc, #452]	; (800082c <Btc_RxVal+0x260>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]

			break;
 800066a:	e0d6      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_IGNITION_STEP_TWO:

			Btc_IgnitionStepTwo = STD_HIGH;
 800066c:	4b6e      	ldr	r3, [pc, #440]	; (8000828 <Btc_RxVal+0x25c>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
			Btc_IgnitionStepOne = STD_LOW;
 8000672:	4b6c      	ldr	r3, [pc, #432]	; (8000824 <Btc_RxVal+0x258>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
			Btc_IgnitionTurnOff = STD_LOW;
 8000678:	4b6c      	ldr	r3, [pc, #432]	; (800082c <Btc_RxVal+0x260>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]

			break;
 800067e:	e0cc      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_IGNITION_TURN_OFF:

			Btc_IgnitionStepTwo = STD_LOW;
 8000680:	4b69      	ldr	r3, [pc, #420]	; (8000828 <Btc_RxVal+0x25c>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
			Btc_IgnitionStepOne = STD_LOW;
 8000686:	4b67      	ldr	r3, [pc, #412]	; (8000824 <Btc_RxVal+0x258>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
			Btc_IgnitionTurnOff = STD_HIGH;
 800068c:	4b67      	ldr	r3, [pc, #412]	; (800082c <Btc_RxVal+0x260>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]

			break;
 8000692:	e0c2      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:

			Btc_ReverseLight = STD_HIGH;
 8000694:	4b66      	ldr	r3, [pc, #408]	; (8000830 <Btc_RxVal+0x264>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 800069a:	4865      	ldr	r0, [pc, #404]	; (8000830 <Btc_RxVal+0x264>)
 800069c:	f00e ff24 	bl	800f4e8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>

			break;
 80006a0:	e0bb      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:

			Btc_ReverseLight = STD_LOW;
 80006a2:	4b63      	ldr	r3, [pc, #396]	; (8000830 <Btc_RxVal+0x264>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 80006a8:	4861      	ldr	r0, [pc, #388]	; (8000830 <Btc_RxVal+0x264>)
 80006aa:	f00e ff1d 	bl	800f4e8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>

			break;
 80006ae:	e0b4      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_POSITIONZERO:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 80006b0:	4b60      	ldr	r3, [pc, #384]	; (8000834 <Btc_RxVal+0x268>)
 80006b2:	2217      	movs	r2, #23
 80006b4:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80006b6:	485f      	ldr	r0, [pc, #380]	; (8000834 <Btc_RxVal+0x268>)
 80006b8:	f00e ff58 	bl	800f56c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

			break;
 80006bc:	e0ad      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 80006be:	4b5d      	ldr	r3, [pc, #372]	; (8000834 <Btc_RxVal+0x268>)
 80006c0:	2218      	movs	r2, #24
 80006c2:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80006c4:	485b      	ldr	r0, [pc, #364]	; (8000834 <Btc_RxVal+0x268>)
 80006c6:	f00e ff51 	bl	800f56c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

			break;
 80006ca:	e0a6      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 80006cc:	4b59      	ldr	r3, [pc, #356]	; (8000834 <Btc_RxVal+0x268>)
 80006ce:	2219      	movs	r2, #25
 80006d0:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80006d2:	4858      	ldr	r0, [pc, #352]	; (8000834 <Btc_RxVal+0x268>)
 80006d4:	f00e ff4a 	bl	800f56c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

			break;
 80006d8:	e09f      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 80006da:	4b56      	ldr	r3, [pc, #344]	; (8000834 <Btc_RxVal+0x268>)
 80006dc:	221a      	movs	r2, #26
 80006de:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80006e0:	4854      	ldr	r0, [pc, #336]	; (8000834 <Btc_RxVal+0x268>)
 80006e2:	f00e ff43 	bl	800f56c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

			break;
 80006e6:	e098      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_CENLOC_ON:

			Btc_CenLoc = STD_HIGH;
 80006e8:	4b53      	ldr	r3, [pc, #332]	; (8000838 <Btc_RxVal+0x26c>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
			Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 80006ee:	4852      	ldr	r0, [pc, #328]	; (8000838 <Btc_RxVal+0x26c>)
 80006f0:	f00e fe76 	bl	800f3e0 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>

			break;
 80006f4:	e091      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_CENLOC_OFF:

			Btc_CenLoc = STD_LOW;
 80006f6:	4b50      	ldr	r3, [pc, #320]	; (8000838 <Btc_RxVal+0x26c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
			Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 80006fc:	484e      	ldr	r0, [pc, #312]	; (8000838 <Btc_RxVal+0x26c>)
 80006fe:	f00e fe6f 	bl	800f3e0 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>

			break;
 8000702:	e08a      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_HIGBEAM_ON:

			Btc_HighBeam = STD_HIGH;
 8000704:	4b4d      	ldr	r3, [pc, #308]	; (800083c <Btc_RxVal+0x270>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 800070a:	484c      	ldr	r0, [pc, #304]	; (800083c <Btc_RxVal+0x270>)
 800070c:	f00e ff44 	bl	800f598 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>

			break;
 8000710:	e083      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_HIGBEAM_OFF:

			Btc_HighBeam = STD_LOW;
 8000712:	4b4a      	ldr	r3, [pc, #296]	; (800083c <Btc_RxVal+0x270>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 8000718:	4848      	ldr	r0, [pc, #288]	; (800083c <Btc_RxVal+0x270>)
 800071a:	f00e ff3d 	bl	800f598 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>

			break;
 800071e:	e07c      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

			Btc_FlashHighBeam = STD_HIGH;
 8000720:	4b47      	ldr	r3, [pc, #284]	; (8000840 <Btc_RxVal+0x274>)
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(&Btc_FlashHighBeam);
 8000726:	4846      	ldr	r0, [pc, #280]	; (8000840 <Btc_RxVal+0x274>)
 8000728:	f00e fef4 	bl	800f514 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState>

			break;
 800072c:	e075      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

			Btc_FlashHighBeam = STD_LOW;
 800072e:	4b44      	ldr	r3, [pc, #272]	; (8000840 <Btc_RxVal+0x274>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(&Btc_FlashHighBeam);
 8000734:	4842      	ldr	r0, [pc, #264]	; (8000840 <Btc_RxVal+0x274>)
 8000736:	f00e feed 	bl	800f514 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState>

			break;
 800073a:	e06e      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

			Btc_TurnSignalLeft = STD_HIGH;
 800073c:	4b41      	ldr	r3, [pc, #260]	; (8000844 <Btc_RxVal+0x278>)
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalRight = STD_LOW;
 8000742:	4b41      	ldr	r3, [pc, #260]	; (8000848 <Btc_RxVal+0x27c>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8000748:	483e      	ldr	r0, [pc, #248]	; (8000844 <Btc_RxVal+0x278>)
 800074a:	f00e ff51 	bl	800f5f0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 800074e:	483e      	ldr	r0, [pc, #248]	; (8000848 <Btc_RxVal+0x27c>)
 8000750:	f00e ff64 	bl	800f61c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>

			break;
 8000754:	e061      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

			Btc_TurnSignalLeft = STD_LOW;
 8000756:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <Btc_RxVal+0x278>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 800075c:	4839      	ldr	r0, [pc, #228]	; (8000844 <Btc_RxVal+0x278>)
 800075e:	f00e ff47 	bl	800f5f0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>

			break;
 8000762:	e05a      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:

			Btc_TurnSignalRight = STD_HIGH;
 8000764:	4b38      	ldr	r3, [pc, #224]	; (8000848 <Btc_RxVal+0x27c>)
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalLeft = STD_LOW;
 800076a:	4b36      	ldr	r3, [pc, #216]	; (8000844 <Btc_RxVal+0x278>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8000770:	4834      	ldr	r0, [pc, #208]	; (8000844 <Btc_RxVal+0x278>)
 8000772:	f00e ff3d 	bl	800f5f0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8000776:	4834      	ldr	r0, [pc, #208]	; (8000848 <Btc_RxVal+0x27c>)
 8000778:	f00e ff50 	bl	800f61c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>

			break;
 800077c:	e04d      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:

			Btc_TurnSignalRight = STD_LOW;
 800077e:	4b32      	ldr	r3, [pc, #200]	; (8000848 <Btc_RxVal+0x27c>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8000784:	4830      	ldr	r0, [pc, #192]	; (8000848 <Btc_RxVal+0x27c>)
 8000786:	f00e ff49 	bl	800f61c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>

			break;
 800078a:	e046      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

			Btc_HazardLight = STD_HIGH;
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <Btc_RxVal+0x280>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 8000792:	482e      	ldr	r0, [pc, #184]	; (800084c <Btc_RxVal+0x280>)
 8000794:	f00e ff58 	bl	800f648 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>

			break;
 8000798:	e03f      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

			Btc_HazardLight = STD_LOW;
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <Btc_RxVal+0x280>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 80007a0:	482a      	ldr	r0, [pc, #168]	; (800084c <Btc_RxVal+0x280>)
 80007a2:	f00e ff51 	bl	800f648 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>

			break;
 80007a6:	e038      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

			Btc_FrontFogLight = STD_HIGH;
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <Btc_RxVal+0x284>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 80007ae:	4828      	ldr	r0, [pc, #160]	; (8000850 <Btc_RxVal+0x284>)
 80007b0:	f00e ff08 	bl	800f5c4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>

			break;
 80007b4:	e031      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

			Btc_FrontFogLight = STD_LOW;
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <Btc_RxVal+0x284>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 80007bc:	4824      	ldr	r0, [pc, #144]	; (8000850 <Btc_RxVal+0x284>)
 80007be:	f00e ff01 	bl	800f5c4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>

			break;
 80007c2:	e02a      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

			Btc_RearFogLight = STD_HIGH;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <Btc_RxVal+0x288>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 80007ca:	4822      	ldr	r0, [pc, #136]	; (8000854 <Btc_RxVal+0x288>)
 80007cc:	f00e ff52 	bl	800f674 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>

			break;
 80007d0:	e023      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

			Btc_RearFogLight = STD_LOW;
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <Btc_RxVal+0x288>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 80007d8:	481e      	ldr	r0, [pc, #120]	; (8000854 <Btc_RxVal+0x288>)
 80007da:	f00e ff4b 	bl	800f674 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>

			break;
 80007de:	e01c      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTON:

			Btc_BrakeLight = STD_HIGH;
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <Btc_RxVal+0x28c>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 80007e6:	481c      	ldr	r0, [pc, #112]	; (8000858 <Btc_RxVal+0x28c>)
 80007e8:	f00e feaa 	bl	800f540 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>

			break;
 80007ec:	e015      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

			Btc_BrakeLight = STD_LOW;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <Btc_RxVal+0x28c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 80007f4:	4818      	ldr	r0, [pc, #96]	; (8000858 <Btc_RxVal+0x28c>)
 80007f6:	f00e fea3 	bl	800f540 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>

			break;
 80007fa:	e00e      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

			Btc_IntLights = STD_HIGH;
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <Btc_RxVal+0x290>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
			Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8000802:	4816      	ldr	r0, [pc, #88]	; (800085c <Btc_RxVal+0x290>)
 8000804:	f00e ff8e 	bl	800f724 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>

			break;
 8000808:	e007      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

			Btc_IntLights = STD_LOW;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <Btc_RxVal+0x290>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
			Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8000810:	4812      	ldr	r0, [pc, #72]	; (800085c <Btc_RxVal+0x290>)
 8000812:	f00e ff87 	bl	800f724 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>

			break;
 8000816:	e000      	b.n	800081a <Btc_RxVal+0x24e>

		default:

			break;
 8000818:	bf00      	nop

	}

	return E_OK;
 800081a:	2300      	movs	r3, #0

}
 800081c:	4618      	mov	r0, r3
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000009a 	.word	0x2000009a
 8000824:	200000a7 	.word	0x200000a7
 8000828:	200000a8 	.word	0x200000a8
 800082c:	200000a9 	.word	0x200000a9
 8000830:	200000a5 	.word	0x200000a5
 8000834:	2000009c 	.word	0x2000009c
 8000838:	2000009b 	.word	0x2000009b
 800083c:	2000009d 	.word	0x2000009d
 8000840:	2000009e 	.word	0x2000009e
 8000844:	200000a0 	.word	0x200000a0
 8000848:	200000a1 	.word	0x200000a1
 800084c:	200000a2 	.word	0x200000a2
 8000850:	2000009f 	.word	0x2000009f
 8000854:	200000a4 	.word	0x200000a4
 8000858:	200000a3 	.word	0x200000a3
 800085c:	200000a6 	.word	0x200000a6

08000860 <Btc_MainFunction>:

void Btc_MainFunction()
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

	Btc_RxVal();
 8000864:	f7ff feb2 	bl	80005cc <Btc_RxVal>
	Btc_EnableUart();
 8000868:	f7ff fe3c 	bl	80004e4 <Btc_EnableUart>
	Btc_IgnitionState();
 800086c:	f7ff fe48 	bl	8000500 <Btc_IgnitionState>

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <CenLoc_State>:
	return E_OK;

}

StdReturnType CenLoc_State()
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

	uint8 status = E_OK;
 800087a:	2300      	movs	r3, #0
 800087c:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_PreviousState != CenLoc_CurrentState)
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <CenLoc_State+0x88>)
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <CenLoc_State+0x8c>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	429a      	cmp	r2, r3
 8000888:	d033      	beq.n	80008f2 <CenLoc_State+0x7e>
	{

		CenLoc_PreviousStateFlag 			= CenLoc_PreviousState;
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <CenLoc_State+0x88>)
 800088c:	781a      	ldrb	r2, [r3, #0]
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <CenLoc_State+0x90>)
 8000890:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 				= CenLoc_CurrentState;
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <CenLoc_State+0x8c>)
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <CenLoc_State+0x88>)
 8000898:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim2IRQFlag 					= STD_LOW;
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <CenLoc_State+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim5IRQFlag 					= STD_LOW;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <CenLoc_State+0x98>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim3IRQFlag					= STD_LOW;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <CenLoc_State+0x9c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim11IRQFlag					= STD_LOW;
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <CenLoc_State+0xa0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]

		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 80008b2:	f000 fe4d 	bl	8001550 <SecAlm_Init>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_CenLoc_LockUnlockSequence_TimerHandle, 250);
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <CenLoc_State+0xa4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	21fa      	movs	r1, #250	; 0xfa
 80008bc:	4618      	mov	r0, r3
 80008be:	f00e fff1 	bl	800f8a4 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag(&CenLoc_Tim2IRQFlag);
 80008c2:	4811      	ldr	r0, [pc, #68]	; (8000908 <CenLoc_State+0x94>)
 80008c4:	f00f f83e 	bl	800f944 <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag>
		Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag(&CenLoc_Tim5IRQFlag);
 80008c8:	4810      	ldr	r0, [pc, #64]	; (800090c <CenLoc_State+0x98>)
 80008ca:	f00f f851 	bl	800f970 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag>
		Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag(&CenLoc_Tim3IRQFlag);
 80008ce:	4810      	ldr	r0, [pc, #64]	; (8000910 <CenLoc_State+0x9c>)
 80008d0:	f00f f864 	bl	800f99c <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag>
		Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(&CenLoc_Tim11IRQFlag);
 80008d4:	480f      	ldr	r0, [pc, #60]	; (8000914 <CenLoc_State+0xa0>)
 80008d6:	f00f f877 	bl	800f9c8 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(&htim2);
 80008da:	4810      	ldr	r0, [pc, #64]	; (800091c <CenLoc_State+0xa8>)
 80008dc:	f00e ff94 	bl	800f808 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(&htim3);
 80008e0:	480f      	ldr	r0, [pc, #60]	; (8000920 <CenLoc_State+0xac>)
 80008e2:	f00e ff91 	bl	800f808 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(&htim4);
 80008e6:	480f      	ldr	r0, [pc, #60]	; (8000924 <CenLoc_State+0xb0>)
 80008e8:	f00e ff8e 	bl	800f808 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(&htim5);
 80008ec:	480e      	ldr	r0, [pc, #56]	; (8000928 <CenLoc_State+0xb4>)
 80008ee:	f00e ff8b 	bl	800f808 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>

		/* do nothing */

	}

	return status;
 80008f2:	79fb      	ldrb	r3, [r7, #7]

}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000ab 	.word	0x200000ab
 8000900:	200000aa 	.word	0x200000aa
 8000904:	200000ad 	.word	0x200000ad
 8000908:	200000ae 	.word	0x200000ae
 800090c:	200000b0 	.word	0x200000b0
 8000910:	200000af 	.word	0x200000af
 8000914:	200000b1 	.word	0x200000b1
 8000918:	200001ec 	.word	0x200001ec
 800091c:	200005fc 	.word	0x200005fc
 8000920:	200006b0 	.word	0x200006b0
 8000924:	20000764 	.word	0x20000764
 8000928:	20000818 	.word	0x20000818

0800092c <CenLoc_SecAlmStateToOff>:

void CenLoc_SecAlmStateToOff()
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <CenLoc_SecAlmStateToOff+0x14>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d101      	bne.n	800093c <CenLoc_SecAlmStateToOff+0x10>
	{

		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 8000938:	f000 fe0a 	bl	8001550 <SecAlm_Init>

		/* do nothing */

	}

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200000aa 	.word	0x200000aa

08000944 <CenLoc_ToggleDoorLED>:

void CenLoc_ToggleDoorLED(uint8 PinState)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(CENLOC_DOOR_LED_PORT, CENLOC_DOOR_LED_PIN, PinState);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	461a      	mov	r2, r3
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	4803      	ldr	r0, [pc, #12]	; (8000964 <CenLoc_ToggleDoorLED+0x20>)
 8000956:	f00e ff7b 	bl	800f850 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40020400 	.word	0x40020400

08000968 <CenLoc_FollowMeHome>:

void CenLoc_FollowMeHome()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

	if(CenLoc_Tim5IRQFlag == 1)
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <CenLoc_FollowMeHome+0x40>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d103      	bne.n	800097c <CenLoc_FollowMeHome+0x14>
	{

		CenLoc_FollowMeHomeState = STD_HIGH;
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <CenLoc_FollowMeHome+0x44>)
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 800097a:	e013      	b.n	80009a4 <CenLoc_FollowMeHome+0x3c>
	else if(CenLoc_Tim5IRQFlag == 2)
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <CenLoc_FollowMeHome+0x40>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d10f      	bne.n	80009a4 <CenLoc_FollowMeHome+0x3c>
		CenLoc_FollowMeHomeState = STD_LOW;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <CenLoc_FollowMeHome+0x44>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim5);
 800098a:	4809      	ldr	r0, [pc, #36]	; (80009b0 <CenLoc_FollowMeHome+0x48>)
 800098c:	f00e ff54 	bl	800f838 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_SET_COUNTER(&htim5, 0);
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <CenLoc_FollowMeHome+0x48>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2200      	movs	r2, #0
 8000996:	625a      	str	r2, [r3, #36]	; 0x24
		CenLoc_Tim5IRQFlag = STD_LOW;
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <CenLoc_FollowMeHome+0x40>)
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag(&CenLoc_Tim5IRQFlag);
 800099e:	4802      	ldr	r0, [pc, #8]	; (80009a8 <CenLoc_FollowMeHome+0x40>)
 80009a0:	f00e ffe6 	bl	800f970 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag>
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000b0 	.word	0x200000b0
 80009ac:	200000ac 	.word	0x200000ac
 80009b0:	20000818 	.word	0x20000818

080009b4 <CenLoc_UnlockSequence>:
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_TurnSignalRight(CenLoc_BlinkState);

}

void CenLoc_UnlockSequence()
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

	Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim3);
 80009b8:	482e      	ldr	r0, [pc, #184]	; (8000a74 <CenLoc_UnlockSequence+0xc0>)
 80009ba:	f00e ff3d 	bl	800f838 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>

	CenLoc_ToggleDoorLED(CenLoc_CurrentState);
 80009be:	4b2e      	ldr	r3, [pc, #184]	; (8000a78 <CenLoc_UnlockSequence+0xc4>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ffbe 	bl	8000944 <CenLoc_ToggleDoorLED>
	CenLoc_FollowMeHome();
 80009c8:	f7ff ffce 	bl	8000968 <CenLoc_FollowMeHome>

	localPreviousState = STD_HIGH;
 80009cc:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <CenLoc_UnlockSequence+0xc8>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]

	if(CenLoc_Tim2IRQFlag <= 4)
 80009d2:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <CenLoc_UnlockSequence+0xcc>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	d83a      	bhi.n	8000a50 <CenLoc_UnlockSequence+0x9c>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim2);
 80009da:	482a      	ldr	r0, [pc, #168]	; (8000a84 <CenLoc_UnlockSequence+0xd0>)
 80009dc:	f00e ff20 	bl	800f820 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim5);
 80009e0:	4829      	ldr	r0, [pc, #164]	; (8000a88 <CenLoc_UnlockSequence+0xd4>)
 80009e2:	f00e ff1d 	bl	800f820 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>

		switch(CenLoc_Tim2IRQFlag)
 80009e6:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <CenLoc_UnlockSequence+0xcc>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d83d      	bhi.n	8000a6c <CenLoc_UnlockSequence+0xb8>
 80009f0:	a201      	add	r2, pc, #4	; (adr r2, 80009f8 <CenLoc_UnlockSequence+0x44>)
 80009f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f6:	bf00      	nop
 80009f8:	08000a09 	.word	0x08000a09
 80009fc:	08000a1b 	.word	0x08000a1b
 8000a00:	08000a2d 	.word	0x08000a2d
 8000a04:	08000a3f 	.word	0x08000a3f
		{

			case 1:

				CenLoc_BlinkState = STD_HIGH;
 8000a08:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f8fc 	bl	8000c10 <CenLoc_ToggleBuzzer>

				break;
 8000a18:	e029      	b.n	8000a6e <CenLoc_UnlockSequence+0xba>

			case 2:

				CenLoc_BlinkState = STD_LOW;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 f8f3 	bl	8000c10 <CenLoc_ToggleBuzzer>

				break;
 8000a2a:	e020      	b.n	8000a6e <CenLoc_UnlockSequence+0xba>

			case 3:

				CenLoc_BlinkState = STD_HIGH;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f8ea 	bl	8000c10 <CenLoc_ToggleBuzzer>

				break;
 8000a3c:	e017      	b.n	8000a6e <CenLoc_UnlockSequence+0xba>

			case 4:

				CenLoc_BlinkState = STD_LOW;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 f8e1 	bl	8000c10 <CenLoc_ToggleBuzzer>

				break;
 8000a4e:	e00e      	b.n	8000a6e <CenLoc_UnlockSequence+0xba>
				break;

		}

	}
	else if(CenLoc_Tim2IRQFlag == 5)
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <CenLoc_UnlockSequence+0xcc>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b05      	cmp	r3, #5
 8000a56:	d10a      	bne.n	8000a6e <CenLoc_UnlockSequence+0xba>
	{

		CenLoc_BlinkState = 2;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim2IRQFlag = 6;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <CenLoc_UnlockSequence+0xcc>)
 8000a60:	2206      	movs	r2, #6
 8000a62:	701a      	strb	r2, [r3, #0]
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim2);
 8000a64:	4807      	ldr	r0, [pc, #28]	; (8000a84 <CenLoc_UnlockSequence+0xd0>)
 8000a66:	f00e fee7 	bl	800f838 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>

		/* do nothing */

	}

}
 8000a6a:	e000      	b.n	8000a6e <CenLoc_UnlockSequence+0xba>
				break;
 8000a6c:	bf00      	nop
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200006b0 	.word	0x200006b0
 8000a78:	200000aa 	.word	0x200000aa
 8000a7c:	200000b2 	.word	0x200000b2
 8000a80:	200000ae 	.word	0x200000ae
 8000a84:	200005fc 	.word	0x200005fc
 8000a88:	20000818 	.word	0x20000818
 8000a8c:	20000000 	.word	0x20000000

08000a90 <CenLoc_LockSequence>:

void CenLoc_LockSequence()
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

	CenLoc_ToggleDoorLED(CenLoc_CurrentState);
 8000a94:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <CenLoc_LockSequence+0x8c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff53 	bl	8000944 <CenLoc_ToggleDoorLED>
	CenLoc_FollowMeHome();
 8000a9e:	f7ff ff63 	bl	8000968 <CenLoc_FollowMeHome>

	if(CenLoc_Tim2IRQFlag <= 2 && localPreviousState == STD_HIGH)
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <CenLoc_LockSequence+0x90>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d824      	bhi.n	8000af4 <CenLoc_LockSequence+0x64>
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <CenLoc_LockSequence+0x94>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d120      	bne.n	8000af4 <CenLoc_LockSequence+0x64>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim5);
 8000ab2:	481d      	ldr	r0, [pc, #116]	; (8000b28 <CenLoc_LockSequence+0x98>)
 8000ab4:	f00e feb4 	bl	800f820 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>
		//Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim2);

		switch(CenLoc_Tim2IRQFlag)
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <CenLoc_LockSequence+0x90>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d002      	beq.n	8000ac6 <CenLoc_LockSequence+0x36>
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d009      	beq.n	8000ad8 <CenLoc_LockSequence+0x48>

				break;

			default:

				break;
 8000ac4:	e014      	b.n	8000af0 <CenLoc_LockSequence+0x60>
				CenLoc_BlinkState = STD_HIGH;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <CenLoc_LockSequence+0x9c>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <CenLoc_LockSequence+0x9c>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 f89d 	bl	8000c10 <CenLoc_ToggleBuzzer>
				break;
 8000ad6:	e00b      	b.n	8000af0 <CenLoc_LockSequence+0x60>
				CenLoc_BlinkState = STD_LOW;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <CenLoc_LockSequence+0x9c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <CenLoc_LockSequence+0x9c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f894 	bl	8000c10 <CenLoc_ToggleBuzzer>
				localPreviousState = STD_LOW;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <CenLoc_LockSequence+0x94>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
				break;
 8000aee:	bf00      	nop
		switch(CenLoc_Tim2IRQFlag)
 8000af0:	bf00      	nop
	else
	{
		/* do nothing */
	}

}
 8000af2:	e011      	b.n	8000b18 <CenLoc_LockSequence+0x88>
	else if(CenLoc_Tim2IRQFlag == 3)
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <CenLoc_LockSequence+0x90>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d10d      	bne.n	8000b18 <CenLoc_LockSequence+0x88>
		CenLoc_BlinkState = 2;
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <CenLoc_LockSequence+0x9c>)
 8000afe:	2202      	movs	r2, #2
 8000b00:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim2IRQFlag = 4;
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <CenLoc_LockSequence+0x90>)
 8000b04:	2204      	movs	r2, #4
 8000b06:	701a      	strb	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag(&CenLoc_Tim2IRQFlag);
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <CenLoc_LockSequence+0x90>)
 8000b0a:	f00e ff1b 	bl	800f944 <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <CenLoc_LockSequence+0xa0>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f00e ff6e 	bl	800f9f4 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200000aa 	.word	0x200000aa
 8000b20:	200000ae 	.word	0x200000ae
 8000b24:	200000b2 	.word	0x200000b2
 8000b28:	20000818 	.word	0x20000818
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	200001ec 	.word	0x200001ec

08000b34 <CenLoc_ControlAlarmLed>:

void CenLoc_ControlAlarmLed()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <CenLoc_ControlAlarmLed+0x84>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d10c      	bne.n	8000b5a <CenLoc_ControlAlarmLed+0x26>
	{

		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 fd3b 	bl	80015bc <SecAlm_ToggleAlarmLed>
		CenLoc_Tim11IRQFlag = STD_LOW;
 8000b46:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <CenLoc_ControlAlarmLed+0x88>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(&CenLoc_Tim11IRQFlag);
 8000b4c:	481b      	ldr	r0, [pc, #108]	; (8000bbc <CenLoc_ControlAlarmLed+0x88>)
 8000b4e:	f00e ff3b 	bl	800f9c8 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim11);
 8000b52:	481b      	ldr	r0, [pc, #108]	; (8000bc0 <CenLoc_ControlAlarmLed+0x8c>)
 8000b54:	f00e fe70 	bl	800f838 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>

		}

	}

}
 8000b58:	e02b      	b.n	8000bb2 <CenLoc_ControlAlarmLed+0x7e>
	else if(CenLoc_CurrentState == STD_LOW)
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <CenLoc_ControlAlarmLed+0x84>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d127      	bne.n	8000bb2 <CenLoc_ControlAlarmLed+0x7e>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim3);
 8000b62:	4818      	ldr	r0, [pc, #96]	; (8000bc4 <CenLoc_ControlAlarmLed+0x90>)
 8000b64:	f00e fe5c 	bl	800f820 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>
		if(CenLoc_Tim3IRQFlag == 2)
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <CenLoc_ControlAlarmLed+0x94>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d120      	bne.n	8000bb2 <CenLoc_ControlAlarmLed+0x7e>
			Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim11);
 8000b70:	4813      	ldr	r0, [pc, #76]	; (8000bc0 <CenLoc_ControlAlarmLed+0x8c>)
 8000b72:	f00e fe55 	bl	800f820 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>
			if(CenLoc_Tim11IRQFlag == 1)
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <CenLoc_ControlAlarmLed+0x88>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d103      	bne.n	8000b86 <CenLoc_ControlAlarmLed+0x52>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_HIGH);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f000 fd1c 	bl	80015bc <SecAlm_ToggleAlarmLed>
}
 8000b84:	e015      	b.n	8000bb2 <CenLoc_ControlAlarmLed+0x7e>
			else if(CenLoc_Tim11IRQFlag > 1)
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <CenLoc_ControlAlarmLed+0x88>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d911      	bls.n	8000bb2 <CenLoc_ControlAlarmLed+0x7e>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 fd14 	bl	80015bc <SecAlm_ToggleAlarmLed>
				CenLoc_Tim11IRQFlag = 0;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <CenLoc_ControlAlarmLed+0x88>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
				CenLoc_Tim3IRQFlag = 1;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <CenLoc_ControlAlarmLed+0x94>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(&CenLoc_Tim11IRQFlag);
 8000ba0:	4806      	ldr	r0, [pc, #24]	; (8000bbc <CenLoc_ControlAlarmLed+0x88>)
 8000ba2:	f00e ff11 	bl	800f9c8 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag>
				Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag(&CenLoc_Tim3IRQFlag);
 8000ba6:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <CenLoc_ControlAlarmLed+0x94>)
 8000ba8:	f00e fef8 	bl	800f99c <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag>
				Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim11);
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <CenLoc_ControlAlarmLed+0x8c>)
 8000bae:	f00e fe43 	bl	800f838 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000aa 	.word	0x200000aa
 8000bbc:	200000b1 	.word	0x200000b1
 8000bc0:	20000980 	.word	0x20000980
 8000bc4:	200006b0 	.word	0x200006b0
 8000bc8:	200000af 	.word	0x200000af

08000bcc <CenLoc_LockUnlockStates>:

StdReturnType CenLoc_LockUnlockStates()
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH && SecAlm_Trigger == STD_LOW)
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <CenLoc_LockUnlockStates+0x3c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d108      	bne.n	8000bea <CenLoc_LockUnlockStates+0x1e>
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <CenLoc_LockUnlockStates+0x40>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d104      	bne.n	8000bea <CenLoc_LockUnlockStates+0x1e>
	{

		CenLoc_UnlockSequence();
 8000be0:	f7ff fee8 	bl	80009b4 <CenLoc_UnlockSequence>
		CenLoc_ControlAlarmLed();
 8000be4:	f7ff ffa6 	bl	8000b34 <CenLoc_ControlAlarmLed>
 8000be8:	e00b      	b.n	8000c02 <CenLoc_LockUnlockStates+0x36>

	}
	else if(CenLoc_CurrentState == STD_LOW && SecAlm_Trigger == STD_LOW)
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <CenLoc_LockUnlockStates+0x3c>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d107      	bne.n	8000c02 <CenLoc_LockUnlockStates+0x36>
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <CenLoc_LockUnlockStates+0x40>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d103      	bne.n	8000c02 <CenLoc_LockUnlockStates+0x36>
	{

		CenLoc_LockSequence();
 8000bfa:	f7ff ff49 	bl	8000a90 <CenLoc_LockSequence>
		CenLoc_ControlAlarmLed();
 8000bfe:	f7ff ff99 	bl	8000b34 <CenLoc_ControlAlarmLed>

	}

	return E_OK;
 8000c02:	2300      	movs	r3, #0

}
 8000c04:	4618      	mov	r0, r3
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200000aa 	.word	0x200000aa
 8000c0c:	200000d6 	.word	0x200000d6

08000c10 <CenLoc_ToggleBuzzer>:

void CenLoc_ToggleBuzzer(uint8 PinState)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2110      	movs	r1, #16
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <CenLoc_ToggleBuzzer+0x20>)
 8000c22:	f00e fe15 	bl	800f850 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40020800 	.word	0x40020800

08000c34 <CenLoc_MainFunction>:

void CenLoc_MainFunction()
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

	CenLoc_State();
 8000c38:	f7ff fe1c 	bl	8000874 <CenLoc_State>
	CenLoc_SecAlmStateToOff();
 8000c3c:	f7ff fe76 	bl	800092c <CenLoc_SecAlmStateToOff>
	CenLoc_LockUnlockStates();
 8000c40:	f7ff ffc4 	bl	8000bcc <CenLoc_LockUnlockStates>

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <ExtLights_TurnSignalHazardLight>:
void ExtLights_PrevStateTSHL();
StdReturnType ExtLights_Init();
uint32 ExtLights_LightReadSensorValue();

void ExtLights_TurnSignalHazardLight()
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8000c4c:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <ExtLights_TurnSignalHazardLight+0xdc>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d115      	bne.n	8000c80 <ExtLights_TurnSignalHazardLight+0x38>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim2);
 8000c54:	4834      	ldr	r0, [pc, #208]	; (8000d28 <ExtLights_TurnSignalHazardLight+0xe0>)
 8000c56:	f00e fde3 	bl	800f820 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>

		if(ExtLights_LTSFlag % 2 == 0)
 8000c5a:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <ExtLights_TurnSignalHazardLight+0xe4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d103      	bne.n	8000c6e <ExtLights_TurnSignalHazardLight+0x26>
		{

			ExtLights_TurnSignalLeft(STD_HIGH);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f000 fa5e 	bl	8001128 <ExtLights_TurnSignalLeft>
 8000c6c:	e008      	b.n	8000c80 <ExtLights_TurnSignalHazardLight+0x38>

		}
		else if(ExtLights_LTSFlag % 2 == STD_HIGH)
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <ExtLights_TurnSignalHazardLight+0xe4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <ExtLights_TurnSignalHazardLight+0x38>
		{

			ExtLights_TurnSignalLeft(STD_LOW);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 fa54 	bl	8001128 <ExtLights_TurnSignalLeft>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8000c80:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <ExtLights_TurnSignalHazardLight+0xe8>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d115      	bne.n	8000cb4 <ExtLights_TurnSignalHazardLight+0x6c>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim2);
 8000c88:	4827      	ldr	r0, [pc, #156]	; (8000d28 <ExtLights_TurnSignalHazardLight+0xe0>)
 8000c8a:	f00e fdc9 	bl	800f820 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>

		if(ExtLights_RTSFlag % 2 == STD_LOW)
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <ExtLights_TurnSignalHazardLight+0xec>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d103      	bne.n	8000ca2 <ExtLights_TurnSignalHazardLight+0x5a>
		{

			ExtLights_TurnSignalRight(STD_HIGH);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 fa56 	bl	800114c <ExtLights_TurnSignalRight>
 8000ca0:	e008      	b.n	8000cb4 <ExtLights_TurnSignalHazardLight+0x6c>

		}
		else if(ExtLights_RTSFlag % 2 == STD_HIGH)
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <ExtLights_TurnSignalHazardLight+0xec>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <ExtLights_TurnSignalHazardLight+0x6c>
		{

			ExtLights_TurnSignalRight(STD_LOW);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 fa4c 	bl	800114c <ExtLights_TurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <ExtLights_TurnSignalHazardLight+0xf0>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d11b      	bne.n	8000cf4 <ExtLights_TurnSignalHazardLight+0xac>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim2);
 8000cbc:	481a      	ldr	r0, [pc, #104]	; (8000d28 <ExtLights_TurnSignalHazardLight+0xe0>)
 8000cbe:	f00e fdaf 	bl	800f820 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>

		if(ExtLights_HLFlag % 2 == STD_LOW)
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <ExtLights_TurnSignalHazardLight+0xf4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d106      	bne.n	8000cdc <ExtLights_TurnSignalHazardLight+0x94>
		{

			ExtLights_TurnSignalLeft(STD_HIGH);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f000 fa2a 	bl	8001128 <ExtLights_TurnSignalLeft>
			ExtLights_TurnSignalRight(STD_HIGH);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f000 fa39 	bl	800114c <ExtLights_TurnSignalRight>
 8000cda:	e00b      	b.n	8000cf4 <ExtLights_TurnSignalHazardLight+0xac>

		}
		else if(ExtLights_HLFlag % 2 == STD_HIGH)
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <ExtLights_TurnSignalHazardLight+0xf4>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <ExtLights_TurnSignalHazardLight+0xac>
		{

			ExtLights_TurnSignalLeft(STD_LOW);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f000 fa1d 	bl	8001128 <ExtLights_TurnSignalLeft>
			ExtLights_TurnSignalRight(STD_LOW);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 fa2c 	bl	800114c <ExtLights_TurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <ExtLights_TurnSignalHazardLight+0xe8>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d106      	bne.n	8000d0a <ExtLights_TurnSignalHazardLight+0xc2>
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <ExtLights_TurnSignalHazardLight+0xf0>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <ExtLights_TurnSignalHazardLight+0xc2>
	{

		ExtLights_TurnSignalRight(STD_LOW);
 8000d04:	2000      	movs	r0, #0
 8000d06:	f000 fa21 	bl	800114c <ExtLights_TurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <ExtLights_TurnSignalHazardLight+0xdc>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d106      	bne.n	8000d20 <ExtLights_TurnSignalHazardLight+0xd8>
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <ExtLights_TurnSignalHazardLight+0xf0>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d102      	bne.n	8000d20 <ExtLights_TurnSignalHazardLight+0xd8>
	{

		ExtLights_TurnSignalLeft(STD_LOW);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 fa04 	bl	8001128 <ExtLights_TurnSignalLeft>

		/* do nothing */

	}

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200000b9 	.word	0x200000b9
 8000d28:	200005fc 	.word	0x200005fc
 8000d2c:	200000c4 	.word	0x200000c4
 8000d30:	200000ba 	.word	0x200000ba
 8000d34:	200000c0 	.word	0x200000c0
 8000d38:	200000bb 	.word	0x200000bb
 8000d3c:	200000c8 	.word	0x200000c8

08000d40 <ExtLights_PrevStateTSHL>:

void ExtLights_PrevStateTSHL()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

	if(ExtLights_TurnSignalLeft_CurrentState != ExtLights_LTS_PrevState)
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <ExtLights_PrevStateTSHL+0x68>)
 8000d46:	781a      	ldrb	r2, [r3, #0]
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <ExtLights_PrevStateTSHL+0x6c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d009      	beq.n	8000d64 <ExtLights_PrevStateTSHL+0x24>
	{

		ExtLights_LTS_PrevState = ExtLights_TurnSignalLeft_CurrentState;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <ExtLights_PrevStateTSHL+0x68>)
 8000d52:	781a      	ldrb	r2, [r3, #0]
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <ExtLights_PrevStateTSHL+0x6c>)
 8000d56:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag = 0;
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <ExtLights_PrevStateTSHL+0x70>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag(&ExtLights_LTSFlag);
 8000d5e:	4814      	ldr	r0, [pc, #80]	; (8000db0 <ExtLights_PrevStateTSHL+0x70>)
 8000d60:	f00e fdae 	bl	800f8c0 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState != ExtLights_RTS_PrevState)
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <ExtLights_PrevStateTSHL+0x74>)
 8000d66:	781a      	ldrb	r2, [r3, #0]
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <ExtLights_PrevStateTSHL+0x78>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d009      	beq.n	8000d84 <ExtLights_PrevStateTSHL+0x44>
	{

		ExtLights_RTS_PrevState = ExtLights_TurnSignalRight_CurrentState;
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <ExtLights_PrevStateTSHL+0x74>)
 8000d72:	781a      	ldrb	r2, [r3, #0]
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <ExtLights_PrevStateTSHL+0x78>)
 8000d76:	701a      	strb	r2, [r3, #0]
		ExtLights_RTSFlag = 0;
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <ExtLights_PrevStateTSHL+0x7c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag(&ExtLights_RTSFlag);
 8000d7e:	480f      	ldr	r0, [pc, #60]	; (8000dbc <ExtLights_PrevStateTSHL+0x7c>)
 8000d80:	f00e fdb4 	bl	800f8ec <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState != ExtLights_HL_PrevState)
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <ExtLights_PrevStateTSHL+0x80>)
 8000d86:	781a      	ldrb	r2, [r3, #0]
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <ExtLights_PrevStateTSHL+0x84>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d009      	beq.n	8000da4 <ExtLights_PrevStateTSHL+0x64>
	{

		ExtLights_HL_PrevState = ExtLights_HazardLight_CurrentState;
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <ExtLights_PrevStateTSHL+0x80>)
 8000d92:	781a      	ldrb	r2, [r3, #0]
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <ExtLights_PrevStateTSHL+0x84>)
 8000d96:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag = 0;
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <ExtLights_PrevStateTSHL+0x88>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag(&ExtLights_HLFlag);
 8000d9e:	480a      	ldr	r0, [pc, #40]	; (8000dc8 <ExtLights_PrevStateTSHL+0x88>)
 8000da0:	f00e fdba 	bl	800f918 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag>

		/* do nothing */

	}

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200000b9 	.word	0x200000b9
 8000dac:	200000be 	.word	0x200000be
 8000db0:	200000c4 	.word	0x200000c4
 8000db4:	200000ba 	.word	0x200000ba
 8000db8:	200000bd 	.word	0x200000bd
 8000dbc:	200000c0 	.word	0x200000c0
 8000dc0:	200000bb 	.word	0x200000bb
 8000dc4:	200000bf 	.word	0x200000bf
 8000dc8:	200000c8 	.word	0x200000c8

08000dcc <ExtLights_LightState>:

void ExtLights_LightState()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0



	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8000dd0:	4b59      	ldr	r3, [pc, #356]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d114      	bne.n	8000e02 <ExtLights_LightState+0x36>
	{

		ExtLights_LowBeam(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000dd8:	4b57      	ldr	r3, [pc, #348]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f95b 	bl	8001098 <ExtLights_LowBeam>
		ExtLights_DayTimeRunningLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000de2:	4b55      	ldr	r3, [pc, #340]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f97a 	bl	80010e0 <ExtLights_DayTimeRunningLight>
		ExtLights_RearPositionLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000dec:	4b52      	ldr	r3, [pc, #328]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f9bd 	bl	8001170 <ExtLights_RearPositionLight>
		ExtLights_LicensePlateLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000df6:	4b50      	ldr	r3, [pc, #320]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fa00 	bl	8001200 <ExtLights_LicensePlateLight>
 8000e00:	e01a      	b.n	8000e38 <ExtLights_LightState+0x6c>

	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 8000e02:	4b4d      	ldr	r3, [pc, #308]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d116      	bne.n	8000e38 <ExtLights_LightState+0x6c>
	{

		ExtLights_LowBeam(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000e0a:	4b4b      	ldr	r3, [pc, #300]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f942 	bl	8001098 <ExtLights_LowBeam>
		ExtLights_DayTimeRunningLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000e14:	4b48      	ldr	r3, [pc, #288]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f961 	bl	80010e0 <ExtLights_DayTimeRunningLight>
		ExtLights_RearPositionLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000e1e:	4b46      	ldr	r3, [pc, #280]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f9a4 	bl	8001170 <ExtLights_RearPositionLight>
		ExtLights_LicensePlateLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000e28:	4b43      	ldr	r3, [pc, #268]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 f9e7 	bl	8001200 <ExtLights_LicensePlateLight>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim5);
 8000e32:	4842      	ldr	r0, [pc, #264]	; (8000f3c <ExtLights_LightState+0x170>)
 8000e34:	f00e fd00 	bl	800f838 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>

		/* do nothing */

	}

	if( ExtLights_ReverseLight_CurrentState == STD_HIGH ||
 8000e38:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <ExtLights_LightState+0x174>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d023      	beq.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 8000e40:	4b40      	ldr	r3, [pc, #256]	; (8000f44 <ExtLights_LightState+0x178>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
	if( ExtLights_ReverseLight_CurrentState == STD_HIGH ||
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d01f      	beq.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 8000e48:	4b3f      	ldr	r3, [pc, #252]	; (8000f48 <ExtLights_LightState+0x17c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
		ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d01b      	beq.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 8000e50:	4b3e      	ldr	r3, [pc, #248]	; (8000f4c <ExtLights_LightState+0x180>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d117      	bne.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8000e58:	4b3d      	ldr	r3, [pc, #244]	; (8000f50 <ExtLights_LightState+0x184>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d013      	beq.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_FrontFogLight_CurrentState == STD_HIGH ||
 8000e60:	4b3c      	ldr	r3, [pc, #240]	; (8000f54 <ExtLights_LightState+0x188>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d00f      	beq.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8000e68:	4b3b      	ldr	r3, [pc, #236]	; (8000f58 <ExtLights_LightState+0x18c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FrontFogLight_CurrentState == STD_HIGH ||
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d00b      	beq.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8000e70:	4b3a      	ldr	r3, [pc, #232]	; (8000f5c <ExtLights_LightState+0x190>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d007      	beq.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_HazardLight_CurrentState == STD_HIGH ||
 8000e78:	4b39      	ldr	r3, [pc, #228]	; (8000f60 <ExtLights_LightState+0x194>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d003      	beq.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8000e80:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <ExtLights_LightState+0x198>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HazardLight_CurrentState == STD_HIGH ||
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d105      	bne.n	8000e94 <ExtLights_LightState+0xc8>
	{

		CenLoc_FollowMeHomeState = STD_LOW;
 8000e88:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim5IRQFlag = 2;
 8000e8e:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <ExtLights_LightState+0x19c>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_HIGH)
 8000e94:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <ExtLights_LightState+0x1a0>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d10a      	bne.n	8000eb2 <ExtLights_LightState+0xe6>
	{

		ExtLights_TurnSignalLeft(CenLoc_BlinkState);
 8000e9c:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <ExtLights_LightState+0x1a0>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f941 	bl	8001128 <ExtLights_TurnSignalLeft>
		ExtLights_TurnSignalRight(CenLoc_BlinkState);
 8000ea6:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <ExtLights_LightState+0x1a0>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f94e 	bl	800114c <ExtLights_TurnSignalRight>
 8000eb0:	e018      	b.n	8000ee4 <ExtLights_LightState+0x118>

	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_LOW)
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <ExtLights_LightState+0x1a0>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10a      	bne.n	8000ed0 <ExtLights_LightState+0x104>
	{

		ExtLights_TurnSignalLeft(CenLoc_BlinkState);
 8000eba:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <ExtLights_LightState+0x1a0>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f932 	bl	8001128 <ExtLights_TurnSignalLeft>
		ExtLights_TurnSignalRight(CenLoc_BlinkState);
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <ExtLights_LightState+0x1a0>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 f93f 	bl	800114c <ExtLights_TurnSignalRight>
 8000ece:	e009      	b.n	8000ee4 <ExtLights_LightState+0x118>

	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 2 || Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 4)
 8000ed0:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <ExtLights_LightState+0x1a0>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d003      	beq.n	8000ee0 <ExtLights_LightState+0x114>
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <ExtLights_LightState+0x1a0>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b04      	cmp	r3, #4
 8000ede:	d101      	bne.n	8000ee4 <ExtLights_LightState+0x118>
	{

		ExtLights_TurnSignalHazardLight();
 8000ee0:	f7ff feb2 	bl	8000c48 <ExtLights_TurnSignalHazardLight>

		/* do nothing */

	}

	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <ExtLights_LightState+0x124>
	{

		ExtLights_LightSwitchMode();
 8000eec:	f000 f848 	bl	8000f80 <ExtLights_LightSwitchMode>

		/* do nothing */

	}

	if(ExtLights_HighBeam_CurrentState != STD_HIGH)
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <ExtLights_LightState+0x184>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d004      	beq.n	8000f02 <ExtLights_LightState+0x136>
	{

		ExtLights_HighBeam(ExtLights_FlashHighBeam_CurrentState);
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <ExtLights_LightState+0x17c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f8dd 	bl	80010bc <ExtLights_HighBeam>

		/* do nothing */

	}

	ExtLights_ReverseLight(ExtLights_ReverseLight_CurrentState);
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <ExtLights_LightState+0x174>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f968 	bl	80011dc <ExtLights_ReverseLight>
	ExtLights_BrakeLight(ExtLights_BrakeLight_CurrentState);
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <ExtLights_LightState+0x178>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f951 	bl	80011b8 <ExtLights_BrakeLight>
	ExtLights_HighBeam(ExtLights_HighBeam_CurrentState);
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <ExtLights_LightState+0x184>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f8ce 	bl	80010bc <ExtLights_HighBeam>
	ExtLights_RearFogLight(ExtLights_RearFogLight_CurrentState);
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <ExtLights_LightState+0x198>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 f935 	bl	8001194 <ExtLights_RearFogLight>
	ExtLights_FrontFogLight(ExtLights_FrontFogLight_CurrentState);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <ExtLights_LightState+0x188>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f8e8 	bl	8001104 <ExtLights_FrontFogLight>

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200000ac 	.word	0x200000ac
 8000f3c:	20000818 	.word	0x20000818
 8000f40:	200000b3 	.word	0x200000b3
 8000f44:	200000b4 	.word	0x200000b4
 8000f48:	200000b5 	.word	0x200000b5
 8000f4c:	200000b6 	.word	0x200000b6
 8000f50:	200000b7 	.word	0x200000b7
 8000f54:	200000b8 	.word	0x200000b8
 8000f58:	200000b9 	.word	0x200000b9
 8000f5c:	200000ba 	.word	0x200000ba
 8000f60:	200000bb 	.word	0x200000bb
 8000f64:	200000bc 	.word	0x200000bc
 8000f68:	200000b0 	.word	0x200000b0
 8000f6c:	20000000 	.word	0x20000000

08000f70 <ExtLights_MainFunction>:

void ExtLights_MainFunction()
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0

	ExtLights_LightState();
 8000f74:	f7ff ff2a 	bl	8000dcc <ExtLights_LightState>
	ExtLights_PrevStateTSHL();
 8000f78:	f7ff fee2 	bl	8000d40 <ExtLights_PrevStateTSHL>

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <ExtLights_LightSwitchMode>:

void ExtLights_LightSwitchMode()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0

	switch(ExtLights_LightsSwitch_CurrentState)
 8000f84:	4b31      	ldr	r3, [pc, #196]	; (800104c <ExtLights_LightSwitchMode+0xcc>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	3b17      	subs	r3, #23
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d859      	bhi.n	8001042 <ExtLights_LightSwitchMode+0xc2>
 8000f8e:	a201      	add	r2, pc, #4	; (adr r2, 8000f94 <ExtLights_LightSwitchMode+0x14>)
 8000f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f94:	08000fa5 	.word	0x08000fa5
 8000f98:	08000fbf 	.word	0x08000fbf
 8000f9c:	0800100f 	.word	0x0800100f
 8000fa0:	08001029 	.word	0x08001029
	{
		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:

			ExtLights_LowBeam(STD_LOW);
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 f877 	bl	8001098 <ExtLights_LowBeam>
			ExtLights_DayTimeRunningLight(STD_LOW);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f898 	bl	80010e0 <ExtLights_DayTimeRunningLight>
			ExtLights_RearPositionLight(STD_LOW);
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 f8dd 	bl	8001170 <ExtLights_RearPositionLight>
			ExtLights_LicensePlateLight(STD_LOW);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f922 	bl	8001200 <ExtLights_LicensePlateLight>

			break;
 8000fbc:	e044      	b.n	8001048 <ExtLights_LightSwitchMode+0xc8>

		case EXTLIGHTS_LIGHTSWITCH_STATEONE:

			lightSensorState = ExtLights_LightReadSensorValue();
 8000fbe:	f000 f849 	bl	8001054 <ExtLights_LightReadSensorValue>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <ExtLights_LightSwitchMode+0xd0>)
 8000fc8:	701a      	strb	r2, [r3, #0]

			if(lightSensorState == STD_HIGH)
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <ExtLights_LightSwitchMode+0xd0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d10c      	bne.n	8000fec <ExtLights_LightSwitchMode+0x6c>
			{

				ExtLights_LowBeam(STD_HIGH);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 f860 	bl	8001098 <ExtLights_LowBeam>
				ExtLights_DayTimeRunningLight(STD_HIGH);
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f000 f881 	bl	80010e0 <ExtLights_DayTimeRunningLight>
				ExtLights_RearPositionLight(STD_HIGH);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f000 f8c6 	bl	8001170 <ExtLights_RearPositionLight>
				ExtLights_LicensePlateLight(STD_HIGH);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 f90b 	bl	8001200 <ExtLights_LicensePlateLight>
				ExtLights_RearPositionLight(STD_LOW);
				ExtLights_LicensePlateLight(STD_LOW);

			}

			break;
 8000fea:	e02c      	b.n	8001046 <ExtLights_LightSwitchMode+0xc6>
			else if(lightSensorState == STD_LOW)
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <ExtLights_LightSwitchMode+0xd0>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d128      	bne.n	8001046 <ExtLights_LightSwitchMode+0xc6>
				ExtLights_LowBeam(STD_LOW);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 f84f 	bl	8001098 <ExtLights_LowBeam>
				ExtLights_DayTimeRunningLight(STD_HIGH);
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f000 f870 	bl	80010e0 <ExtLights_DayTimeRunningLight>
				ExtLights_RearPositionLight(STD_LOW);
 8001000:	2000      	movs	r0, #0
 8001002:	f000 f8b5 	bl	8001170 <ExtLights_RearPositionLight>
				ExtLights_LicensePlateLight(STD_LOW);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 f8fa 	bl	8001200 <ExtLights_LicensePlateLight>
			break;
 800100c:	e01b      	b.n	8001046 <ExtLights_LightSwitchMode+0xc6>

		case EXTLIGHTS_LIGHTSWITCH_STATETWO:

			ExtLights_LowBeam(STD_LOW);
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f842 	bl	8001098 <ExtLights_LowBeam>
			ExtLights_DayTimeRunningLight(STD_HIGH);
 8001014:	2001      	movs	r0, #1
 8001016:	f000 f863 	bl	80010e0 <ExtLights_DayTimeRunningLight>
			ExtLights_RearPositionLight(STD_HIGH);
 800101a:	2001      	movs	r0, #1
 800101c:	f000 f8a8 	bl	8001170 <ExtLights_RearPositionLight>
			ExtLights_LicensePlateLight(STD_HIGH);
 8001020:	2001      	movs	r0, #1
 8001022:	f000 f8ed 	bl	8001200 <ExtLights_LicensePlateLight>

			break;
 8001026:	e00f      	b.n	8001048 <ExtLights_LightSwitchMode+0xc8>

		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:

			ExtLights_LowBeam(STD_HIGH);
 8001028:	2001      	movs	r0, #1
 800102a:	f000 f835 	bl	8001098 <ExtLights_LowBeam>
			ExtLights_DayTimeRunningLight(STD_HIGH);
 800102e:	2001      	movs	r0, #1
 8001030:	f000 f856 	bl	80010e0 <ExtLights_DayTimeRunningLight>
			ExtLights_RearPositionLight(STD_HIGH);
 8001034:	2001      	movs	r0, #1
 8001036:	f000 f89b 	bl	8001170 <ExtLights_RearPositionLight>
			ExtLights_LicensePlateLight(STD_HIGH);
 800103a:	2001      	movs	r0, #1
 800103c:	f000 f8e0 	bl	8001200 <ExtLights_LicensePlateLight>

			break;
 8001040:	e002      	b.n	8001048 <ExtLights_LightSwitchMode+0xc8>

		default:

			break;
 8001042:	bf00      	nop
 8001044:	e000      	b.n	8001048 <ExtLights_LightSwitchMode+0xc8>
			break;
 8001046:	bf00      	nop

	}

}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200000b6 	.word	0x200000b6
 8001050:	200000d4 	.word	0x200000d4

08001054 <ExtLights_LightReadSensorValue>:
	return E_OK;

}

uint32 ExtLights_LightReadSensorValue()
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
	uint8 sensorValue = STD_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	71fb      	strb	r3, [r7, #7]

	Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, 2);
 800105e:	2202      	movs	r2, #2
 8001060:	490b      	ldr	r1, [pc, #44]	; (8001090 <ExtLights_LightReadSensorValue+0x3c>)
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <ExtLights_LightReadSensorValue+0x40>)
 8001064:	f00e fc07 	bl	800f876 <Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA>

	if(ADC_BUFFER[1] < 4000)
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <ExtLights_LightReadSensorValue+0x3c>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001070:	d202      	bcs.n	8001078 <ExtLights_LightReadSensorValue+0x24>
	{

		sensorValue = STD_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	71fb      	strb	r3, [r7, #7]
 8001076:	e006      	b.n	8001086 <ExtLights_LightReadSensorValue+0x32>

	}
	else if(ADC_BUFFER[1] > 4000)
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <ExtLights_LightReadSensorValue+0x3c>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001080:	d901      	bls.n	8001086 <ExtLights_LightReadSensorValue+0x32>
	{

		sensorValue = STD_HIGH;
 8001082:	2301      	movs	r3, #1
 8001084:	71fb      	strb	r3, [r7, #7]

		/* do nothing */

	}

	return sensorValue;
 8001086:	79fb      	ldrb	r3, [r7, #7]

}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200000cc 	.word	0x200000cc
 8001094:	200000ec 	.word	0x200000ec

08001098 <ExtLights_LowBeam>:

void ExtLights_LowBeam(uint8 PinState)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_LOWBEAM_PORT, EXTLIGHTS_LOWBEAM_PIN, PinState);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	461a      	mov	r2, r3
 80010a6:	2110      	movs	r1, #16
 80010a8:	4803      	ldr	r0, [pc, #12]	; (80010b8 <ExtLights_LowBeam+0x20>)
 80010aa:	f00e fbd1 	bl	800f850 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40020000 	.word	0x40020000

080010bc <ExtLights_HighBeam>:

void ExtLights_HighBeam(uint8 PinState)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	461a      	mov	r2, r3
 80010ca:	2101      	movs	r1, #1
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <ExtLights_HighBeam+0x20>)
 80010ce:	f00e fbbf 	bl	800f850 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40020400 	.word	0x40020400

080010e0 <ExtLights_DayTimeRunningLight>:

void ExtLights_DayTimeRunningLight(uint8 PinState)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_DAYTIMERUNNINGLIGHT_PORT, EXTLIGHTS_DAYTIMERUNNINGLIGHT_PIN, PinState);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	461a      	mov	r2, r3
 80010ee:	2102      	movs	r1, #2
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <ExtLights_DayTimeRunningLight+0x20>)
 80010f2:	f00e fbad 	bl	800f850 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40020000 	.word	0x40020000

08001104 <ExtLights_FrontFogLight>:

void ExtLights_FrontFogLight(uint8 PinState)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_FRONTFOGLIGHT_PORT, EXTLIGHTS_FRONTFOGLIGHT_PIN, PinState);
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	461a      	mov	r2, r3
 8001112:	2108      	movs	r1, #8
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <ExtLights_FrontFogLight+0x20>)
 8001116:	f00e fb9b 	bl	800f850 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40020800 	.word	0x40020800

08001128 <ExtLights_TurnSignalLeft>:

void ExtLights_TurnSignalLeft(uint8 PinState)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALLEFT_PORT, EXTLIGHTS_TURNSIGNALLEFT_PIN, PinState);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	461a      	mov	r2, r3
 8001136:	2101      	movs	r1, #1
 8001138:	4803      	ldr	r0, [pc, #12]	; (8001148 <ExtLights_TurnSignalLeft+0x20>)
 800113a:	f00e fb89 	bl	800f850 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40020800 	.word	0x40020800

0800114c <ExtLights_TurnSignalRight>:

void ExtLights_TurnSignalRight(uint8 PinState)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALRIGHT_PORT, EXTLIGHTS_TURNSIGNALRIGHT_PIN, PinState);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	461a      	mov	r2, r3
 800115a:	2102      	movs	r1, #2
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <ExtLights_TurnSignalRight+0x20>)
 800115e:	f00e fb77 	bl	800f850 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40020800 	.word	0x40020800

08001170 <ExtLights_RearPositionLight>:

void ExtLights_RearPositionLight(uint8 PinState)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REARPOSITIONLIGHT_PORT, EXTLIGHTS_REARPOSITIONLIGHT_PIN, PinState);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	461a      	mov	r2, r3
 800117e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <ExtLights_RearPositionLight+0x20>)
 8001184:	f00e fb64 	bl	800f850 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40020800 	.word	0x40020800

08001194 <ExtLights_RearFogLight>:

void ExtLights_RearFogLight(uint8 PinState)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REARFOGLIGHT_PORT, EXTLIGHTS_REARFOGLIGHT_PIN, PinState);
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	461a      	mov	r2, r3
 80011a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a6:	4803      	ldr	r0, [pc, #12]	; (80011b4 <ExtLights_RearFogLight+0x20>)
 80011a8:	f00e fb52 	bl	800f850 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40020800 	.word	0x40020800

080011b8 <ExtLights_BrakeLight>:

void ExtLights_BrakeLight(uint8 PinState)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_BRAKELIGHT_PORT, EXTLIGHTS_BRAKELIGHT_PIN, PinState);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	461a      	mov	r2, r3
 80011c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ca:	4803      	ldr	r0, [pc, #12]	; (80011d8 <ExtLights_BrakeLight+0x20>)
 80011cc:	f00e fb40 	bl	800f850 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40020800 	.word	0x40020800

080011dc <ExtLights_ReverseLight>:

void ExtLights_ReverseLight(uint8 PinState)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	461a      	mov	r2, r3
 80011ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <ExtLights_ReverseLight+0x20>)
 80011f0:	f00e fb2e 	bl	800f850 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40020000 	.word	0x40020000

08001200 <ExtLights_LicensePlateLight>:

void ExtLights_LicensePlateLight(uint8 PinState)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_LICENSEPLATELIGHT_PORT, EXTLIGHTS_LICENSEPLATELIGHT_PIN, PinState);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	461a      	mov	r2, r3
 800120e:	2104      	movs	r1, #4
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <ExtLights_LicensePlateLight+0x20>)
 8001212:	f00e fb1d 	bl	800f850 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40020000 	.word	0x40020000

08001224 <IntLights_RxBtcState>:
void IntLights_MainFunction();
void IntLights_ToggleIntLights(uint8 PinState);
void IntLights_RxBtcState();

void IntLights_RxBtcState()
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0

	uint8 lightsStateFromBtcCommand;

	Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&lightsStateFromBtcCommand);
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	4618      	mov	r0, r3
 800122e:	f00e fac3 	bl	800f7b8 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>

	switch(lightsStateFromBtcCommand)
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	3b01      	subs	r3, #1
 8001236:	2b13      	cmp	r3, #19
 8001238:	d83a      	bhi.n	80012b0 <IntLights_RxBtcState+0x8c>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <IntLights_RxBtcState+0x1c>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	08001291 	.word	0x08001291
 8001244:	08001299 	.word	0x08001299
 8001248:	080012b1 	.word	0x080012b1
 800124c:	080012b1 	.word	0x080012b1
 8001250:	080012b1 	.word	0x080012b1
 8001254:	080012b1 	.word	0x080012b1
 8001258:	080012b1 	.word	0x080012b1
 800125c:	080012b1 	.word	0x080012b1
 8001260:	080012b1 	.word	0x080012b1
 8001264:	080012b1 	.word	0x080012b1
 8001268:	080012b1 	.word	0x080012b1
 800126c:	080012b1 	.word	0x080012b1
 8001270:	080012b1 	.word	0x080012b1
 8001274:	080012b1 	.word	0x080012b1
 8001278:	080012b1 	.word	0x080012b1
 800127c:	080012b1 	.word	0x080012b1
 8001280:	080012b1 	.word	0x080012b1
 8001284:	080012b1 	.word	0x080012b1
 8001288:	080012a1 	.word	0x080012a1
 800128c:	080012a9 	.word	0x080012a9
	{
		case LIGHTSON_CENLOCON:

			IntLights_CurrentState = STD_HIGH;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <IntLights_RxBtcState+0x94>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]

			break;
 8001296:	e00b      	b.n	80012b0 <IntLights_RxBtcState+0x8c>

		case LIGHTSOFF_CENLOCOFF:

			IntLights_CurrentState = STD_LOW;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <IntLights_RxBtcState+0x94>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]

			break;
 800129e:	e007      	b.n	80012b0 <IntLights_RxBtcState+0x8c>

		case LIGHTSON_INTLIGHTSON:

			IntLights_CurrentState = STD_HIGH;
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <IntLights_RxBtcState+0x94>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]

			break;
 80012a6:	e003      	b.n	80012b0 <IntLights_RxBtcState+0x8c>

		case LIGHTSOFF_INTLIGHTSOFF:

			IntLights_CurrentState = STD_LOW;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <IntLights_RxBtcState+0x94>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]

			break;
 80012ae:	bf00      	nop

	}

}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200000d5 	.word	0x200000d5

080012bc <IntLights_MainFunction>:

void IntLights_MainFunction()
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0

	IntLights_RxBtcState();
 80012c0:	f7ff ffb0 	bl	8001224 <IntLights_RxBtcState>
	IntLights_ToggleIntLights(IntLights_CurrentState);
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <IntLights_MainFunction+0x18>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f805 	bl	80012d8 <IntLights_ToggleIntLights>

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200000d5 	.word	0x200000d5

080012d8 <IntLights_ToggleIntLights>:
	return E_OK;

}

void IntLights_ToggleIntLights(uint8 PinState)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	461a      	mov	r2, r3
 80012e6:	2104      	movs	r1, #4
 80012e8:	4803      	ldr	r0, [pc, #12]	; (80012f8 <IntLights_ToggleIntLights+0x20>)
 80012ea:	f00e fab1 	bl	800f850 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40020800 	.word	0x40020800

080012fc <SecAlm_LightsBuzzerControl>:


uint8 SecAlm_TriggerPreviousState;

void SecAlm_LightsBuzzerControl()
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0

	uint16 sensorStatus = STD_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	80fb      	strh	r3, [r7, #6]

	sensorStatus = SecAlm_VibSenStatus();
 8001306:	f000 f89b 	bl	8001440 <SecAlm_VibSenStatus>
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]

	if(SecAlm_TriggerPreviousState != SecAlm_Trigger && !SecAlm_Trigger)
 800130e:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <SecAlm_LightsBuzzerControl+0xf4>)
 8001310:	781a      	ldrb	r2, [r3, #0]
 8001312:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <SecAlm_LightsBuzzerControl+0xf8>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d006      	beq.n	8001328 <SecAlm_LightsBuzzerControl+0x2c>
 800131a:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <SecAlm_LightsBuzzerControl+0xf8>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <SecAlm_LightsBuzzerControl+0x2c>
	{

		SecAlm_TriggerIRQCounterForTimer4 = STD_LOW;
 8001322:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <SecAlm_LightsBuzzerControl+0xfc>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
 8001328:	4b33      	ldr	r3, [pc, #204]	; (80013f8 <SecAlm_LightsBuzzerControl+0xfc>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b13      	cmp	r3, #19
 800132e:	d920      	bls.n	8001372 <SecAlm_LightsBuzzerControl+0x76>
	{

		SecAlm_TriggerPreviousState 		= SecAlm_Trigger;
 8001330:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <SecAlm_LightsBuzzerControl+0xf8>)
 8001332:	781a      	ldrb	r2, [r3, #0]
 8001334:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <SecAlm_LightsBuzzerControl+0xf4>)
 8001336:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim3IRQFlag 					= STD_HIGH;
 8001338:	4b30      	ldr	r3, [pc, #192]	; (80013fc <SecAlm_LightsBuzzerControl+0x100>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim11IRQFlag 				= STD_LOW;
 800133e:	4b30      	ldr	r3, [pc, #192]	; (8001400 <SecAlm_LightsBuzzerControl+0x104>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
		SecAlm_Trigger 						= STD_LOW;
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <SecAlm_LightsBuzzerControl+0xf8>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange 				= STD_LOW;
 800134a:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <SecAlm_LightsBuzzerControl+0x108>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
		SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 8001350:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <SecAlm_LightsBuzzerControl+0xfc>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
		SecAlm_SensorStatusCounter 			= STD_LOW;
 8001356:	4b2c      	ldr	r3, [pc, #176]	; (8001408 <SecAlm_LightsBuzzerControl+0x10c>)
 8001358:	2200      	movs	r2, #0
 800135a:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatus 				= STD_LOW;
 800135c:	4b2b      	ldr	r3, [pc, #172]	; (800140c <SecAlm_LightsBuzzerControl+0x110>)
 800135e:	2200      	movs	r2, #0
 8001360:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatusCounter 			= STD_LOW;
 8001362:	4b29      	ldr	r3, [pc, #164]	; (8001408 <SecAlm_LightsBuzzerControl+0x10c>)
 8001364:	2200      	movs	r2, #0
 8001366:	801a      	strh	r2, [r3, #0]

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim4);
 8001368:	4829      	ldr	r0, [pc, #164]	; (8001410 <SecAlm_LightsBuzzerControl+0x114>)
 800136a:	f00e fa65 	bl	800f838 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>
		SecAlm_TurnOnExtLights();
 800136e:	f000 f8bf 	bl	80014f0 <SecAlm_TurnOnExtLights>

		/* do nothing */

	}

	if(SecAlm_SensorStatusCounter == STD_LOW)
 8001372:	4b25      	ldr	r3, [pc, #148]	; (8001408 <SecAlm_LightsBuzzerControl+0x10c>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d107      	bne.n	800138a <SecAlm_LightsBuzzerControl+0x8e>
	{

		sensorStatus 	= STD_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	80fb      	strh	r3, [r7, #6]
		SecAlm_Trigger 	= STD_LOW;
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <SecAlm_LightsBuzzerControl+0xf8>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange = STD_LOW;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <SecAlm_LightsBuzzerControl+0x108>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(sensorStatus == STD_HIGH)
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d102      	bne.n	8001396 <SecAlm_LightsBuzzerControl+0x9a>
	{

		SecAlm_Trigger = STD_HIGH;
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <SecAlm_LightsBuzzerControl+0xf8>)
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(SecAlm_Trigger == STD_HIGH)
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <SecAlm_LightsBuzzerControl+0xf8>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d11c      	bne.n	80013d8 <SecAlm_LightsBuzzerControl+0xdc>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim4);
 800139e:	481c      	ldr	r0, [pc, #112]	; (8001410 <SecAlm_LightsBuzzerControl+0x114>)
 80013a0:	f00e fa3e 	bl	800f820 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>

		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <SecAlm_LightsBuzzerControl+0xfc>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d005      	beq.n	80013be <SecAlm_LightsBuzzerControl+0xc2>
		{

			SecAlm_PinStateChange = STD_HIGH;
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <SecAlm_LightsBuzzerControl+0x108>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 80013b8:	f000 f89a 	bl	80014f0 <SecAlm_TurnOnExtLights>

		/* do nothing */

	}

}
 80013bc:	e013      	b.n	80013e6 <SecAlm_LightsBuzzerControl+0xea>
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <SecAlm_LightsBuzzerControl+0xfc>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10c      	bne.n	80013e6 <SecAlm_LightsBuzzerControl+0xea>
			SecAlm_PinStateChange = STD_LOW;
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <SecAlm_LightsBuzzerControl+0x108>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 80013d2:	f000 f88d 	bl	80014f0 <SecAlm_TurnOnExtLights>
}
 80013d6:	e006      	b.n	80013e6 <SecAlm_LightsBuzzerControl+0xea>
	else if(SecAlm_Trigger == STD_LOW)
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <SecAlm_LightsBuzzerControl+0xf8>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <SecAlm_LightsBuzzerControl+0xea>
		SecAlm_ToggleAlarmBuzzer(STD_LOW);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 f8d9 	bl	8001598 <SecAlm_ToggleAlarmBuzzer>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200000ea 	.word	0x200000ea
 80013f4:	200000d6 	.word	0x200000d6
 80013f8:	200000d8 	.word	0x200000d8
 80013fc:	200000af 	.word	0x200000af
 8001400:	200000b1 	.word	0x200000b1
 8001404:	200000d7 	.word	0x200000d7
 8001408:	200000da 	.word	0x200000da
 800140c:	200000dc 	.word	0x200000dc
 8001410:	20000764 	.word	0x20000764

08001414 <SecAlm_VibSenReadSensorValue>:


uint16 SecAlm_VibSenReadSensorValue()
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0

	uint16 sensorValue = STD_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	80fb      	strh	r3, [r7, #6]

	Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, 2);
 800141e:	2202      	movs	r2, #2
 8001420:	4905      	ldr	r1, [pc, #20]	; (8001438 <SecAlm_VibSenReadSensorValue+0x24>)
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <SecAlm_VibSenReadSensorValue+0x28>)
 8001424:	f00e fa27 	bl	800f876 <Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA>

	sensorValue = ADC_BUFFER[0];
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <SecAlm_VibSenReadSensorValue+0x24>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	80fb      	strh	r3, [r7, #6]

	return sensorValue;
 800142e:	88fb      	ldrh	r3, [r7, #6]

}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200000cc 	.word	0x200000cc
 800143c:	200000ec 	.word	0x200000ec

08001440 <SecAlm_VibSenStatus>:

StdReturnType SecAlm_VibSenStatus()
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0

	uint16 sensorValue 		= STD_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	80bb      	strh	r3, [r7, #4]
	uint16 sensorStatus 	= STD_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	80fb      	strh	r3, [r7, #6]

	sensorValue = SecAlm_VibSenReadSensorValue();
 800144e:	f7ff ffe1 	bl	8001414 <SecAlm_VibSenReadSensorValue>
 8001452:	4603      	mov	r3, r0
 8001454:	80bb      	strh	r3, [r7, #4]
	currentTick = Rte_Call_SysTick_R_SysTickPort_HAL_GetTick();
 8001456:	f00e fa1e 	bl	800f896 <Rte_Call_SysTick_R_SysTickPort_HAL_GetTick>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <SecAlm_VibSenStatus+0x9c>)
 8001460:	601a      	str	r2, [r3, #0]

	if(sensorValue != debouncedSensorValue)
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <SecAlm_VibSenStatus+0xa0>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	88ba      	ldrh	r2, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	d01d      	beq.n	80014a8 <SecAlm_VibSenStatus+0x68>
	{

		if((currentTick - lastTick) >= SECALM_DEBOUNCETIME_SENSOR_VALUE)
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <SecAlm_VibSenStatus+0x9c>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <SecAlm_VibSenStatus+0xa4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b31      	cmp	r3, #49	; 0x31
 8001478:	d902      	bls.n	8001480 <SecAlm_VibSenStatus+0x40>
		{

			debouncedSensorValue = sensorValue;
 800147a:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <SecAlm_VibSenStatus+0xa0>)
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	8013      	strh	r3, [r2, #0]

			/* do nothing */

		}

		if(debouncedSensorValue == 4095)
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <SecAlm_VibSenStatus+0xa0>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001488:	4293      	cmp	r3, r2
 800148a:	d111      	bne.n	80014b0 <SecAlm_VibSenStatus+0x70>
		{

			SecAlm_SensorStatusCounter = SecAlm_SensorStatusCounter + 1;
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <SecAlm_VibSenStatus+0xa8>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <SecAlm_VibSenStatus+0xa8>)
 8001496:	801a      	strh	r2, [r3, #0]
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlm_AlarmResetHandle, 10000);
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <SecAlm_VibSenStatus+0xac>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f242 7110 	movw	r1, #10000	; 0x2710
 80014a0:	4618      	mov	r0, r3
 80014a2:	f00e f9ff 	bl	800f8a4 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
 80014a6:	e003      	b.n	80014b0 <SecAlm_VibSenStatus+0x70>

	}
	else
	{

		lastTick = currentTick;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <SecAlm_VibSenStatus+0x9c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <SecAlm_VibSenStatus+0xa4>)
 80014ae:	6013      	str	r3, [r2, #0]

	}

	if(SecAlm_SensorStatusCounter >= 2000)
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <SecAlm_VibSenStatus+0xa8>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014b8:	d302      	bcc.n	80014c0 <SecAlm_VibSenStatus+0x80>
	{

		sensorStatus = STD_HIGH;
 80014ba:	2301      	movs	r3, #1
 80014bc:	80fb      	strh	r3, [r7, #6]
 80014be:	e006      	b.n	80014ce <SecAlm_VibSenStatus+0x8e>

	}
	else if(SecAlm_SensorStatusCounter < 2000)
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <SecAlm_VibSenStatus+0xa8>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014c8:	d201      	bcs.n	80014ce <SecAlm_VibSenStatus+0x8e>
	{

		sensorStatus = STD_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	80fb      	strh	r3, [r7, #6]

		/* do nothing */

	}

	return sensorStatus;
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	b2db      	uxtb	r3, r3

}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200000e4 	.word	0x200000e4
 80014e0:	200000e8 	.word	0x200000e8
 80014e4:	200000e0 	.word	0x200000e0
 80014e8:	200000da 	.word	0x200000da
 80014ec:	200001e8 	.word	0x200001e8

080014f0 <SecAlm_TurnOnExtLights>:


void SecAlm_TurnOnExtLights()
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0

	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_LowBeam(SecAlm_PinStateChange);
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <SecAlm_TurnOnExtLights+0x50>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fdcd 	bl	8001098 <ExtLights_LowBeam>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_RearPositionLight(SecAlm_PinStateChange);
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <SecAlm_TurnOnExtLights+0x50>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fe34 	bl	8001170 <ExtLights_RearPositionLight>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_FrontFogLight(SecAlm_PinStateChange);
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <SecAlm_TurnOnExtLights+0x50>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fdf9 	bl	8001104 <ExtLights_FrontFogLight>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_RearFogLight(SecAlm_PinStateChange);
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <SecAlm_TurnOnExtLights+0x50>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fe3c 	bl	8001194 <ExtLights_RearFogLight>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_TurnSignalRight(SecAlm_PinStateChange);
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <SecAlm_TurnOnExtLights+0x50>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fe13 	bl	800114c <ExtLights_TurnSignalRight>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_TurnSignalLeft(SecAlm_PinStateChange);
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <SecAlm_TurnOnExtLights+0x50>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fdfc 	bl	8001128 <ExtLights_TurnSignalLeft>
	SecAlm_ToggleAlarmBuzzer(SecAlm_PinStateChange);
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <SecAlm_TurnOnExtLights+0x50>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f000 f82f 	bl	8001598 <SecAlm_ToggleAlarmBuzzer>

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200000d7 	.word	0x200000d7

08001544 <SecAlm_MainFunction>:

void SecAlm_MainFunction()
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0

	SecAlm_LightsBuzzerControl();
 8001548:	f7ff fed8 	bl	80012fc <SecAlm_LightsBuzzerControl>

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}

08001550 <SecAlm_Init>:


StdReturnType SecAlm_Init()
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0

	SecAlm_Trigger 						= STD_LOW;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <SecAlm_Init+0x30>)
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
	SecAlm_PinStateChange 				= STD_LOW;
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <SecAlm_Init+0x34>)
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <SecAlm_Init+0x38>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
	SecAlm_SensorStatusCounter 			= STD_LOW;
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <SecAlm_Init+0x3c>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorStatus 				= STD_LOW;
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <SecAlm_Init+0x40>)
 800156e:	2200      	movs	r2, #0
 8001570:	801a      	strh	r2, [r3, #0]

	Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(&htim4);
 8001572:	4808      	ldr	r0, [pc, #32]	; (8001594 <SecAlm_Init+0x44>)
 8001574:	f00e f948 	bl	800f808 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>

	return E_OK;
 8001578:	2300      	movs	r3, #0

}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200000d6 	.word	0x200000d6
 8001584:	200000d7 	.word	0x200000d7
 8001588:	200000d8 	.word	0x200000d8
 800158c:	200000da 	.word	0x200000da
 8001590:	200000dc 	.word	0x200000dc
 8001594:	20000764 	.word	0x20000764

08001598 <SecAlm_ToggleAlarmBuzzer>:


void SecAlm_ToggleAlarmBuzzer(uint8 PinState)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	461a      	mov	r2, r3
 80015a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015aa:	4803      	ldr	r0, [pc, #12]	; (80015b8 <SecAlm_ToggleAlarmBuzzer+0x20>)
 80015ac:	f00e f950 	bl	800f850 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40020400 	.word	0x40020400

080015bc <SecAlm_ToggleAlarmLed>:


void SecAlm_ToggleAlarmLed(uint8 PinState)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	461a      	mov	r2, r3
 80015ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ce:	4803      	ldr	r0, [pc, #12]	; (80015dc <SecAlm_ToggleAlarmLed+0x20>)
 80015d0:	f00e f93e 	bl	800f850 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40020000 	.word	0x40020000

080015e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015e6:	463b      	mov	r3, r7
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015f2:	4b28      	ldr	r3, [pc, #160]	; (8001694 <MX_ADC1_Init+0xb4>)
 80015f4:	4a28      	ldr	r2, [pc, #160]	; (8001698 <MX_ADC1_Init+0xb8>)
 80015f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015f8:	4b26      	ldr	r3, [pc, #152]	; (8001694 <MX_ADC1_Init+0xb4>)
 80015fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001600:	4b24      	ldr	r3, [pc, #144]	; (8001694 <MX_ADC1_Init+0xb4>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <MX_ADC1_Init+0xb4>)
 8001608:	2201      	movs	r2, #1
 800160a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800160c:	4b21      	ldr	r3, [pc, #132]	; (8001694 <MX_ADC1_Init+0xb4>)
 800160e:	2201      	movs	r2, #1
 8001610:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <MX_ADC1_Init+0xb4>)
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800161a:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <MX_ADC1_Init+0xb4>)
 800161c:	2200      	movs	r2, #0
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001620:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <MX_ADC1_Init+0xb4>)
 8001622:	4a1e      	ldr	r2, [pc, #120]	; (800169c <MX_ADC1_Init+0xbc>)
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <MX_ADC1_Init+0xb4>)
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <MX_ADC1_Init+0xb4>)
 800162e:	2202      	movs	r2, #2
 8001630:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <MX_ADC1_Init+0xb4>)
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MX_ADC1_Init+0xb4>)
 800163c:	2201      	movs	r2, #1
 800163e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001640:	4814      	ldr	r0, [pc, #80]	; (8001694 <MX_ADC1_Init+0xb4>)
 8001642:	f002 f8ff 	bl	8003844 <HAL_ADC_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800164c:	f001 f914 	bl	8002878 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001650:	2306      	movs	r3, #6
 8001652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001654:	2301      	movs	r3, #1
 8001656:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800165c:	463b      	mov	r3, r7
 800165e:	4619      	mov	r1, r3
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <MX_ADC1_Init+0xb4>)
 8001662:	f002 fcf3 	bl	800404c <HAL_ADC_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800166c:	f001 f904 	bl	8002878 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001670:	230f      	movs	r3, #15
 8001672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001674:	2302      	movs	r3, #2
 8001676:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001678:	463b      	mov	r3, r7
 800167a:	4619      	mov	r1, r3
 800167c:	4805      	ldr	r0, [pc, #20]	; (8001694 <MX_ADC1_Init+0xb4>)
 800167e:	f002 fce5 	bl	800404c <HAL_ADC_ConfigChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001688:	f001 f8f6 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200000ec 	.word	0x200000ec
 8001698:	40012000 	.word	0x40012000
 800169c:	0f000001 	.word	0x0f000001

080016a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a3f      	ldr	r2, [pc, #252]	; (80017bc <HAL_ADC_MspInit+0x11c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d178      	bne.n	80017b4 <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b3e      	ldr	r3, [pc, #248]	; (80017c0 <HAL_ADC_MspInit+0x120>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	4a3d      	ldr	r2, [pc, #244]	; (80017c0 <HAL_ADC_MspInit+0x120>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d0:	6453      	str	r3, [r2, #68]	; 0x44
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <HAL_ADC_MspInit+0x120>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <HAL_ADC_MspInit+0x120>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a36      	ldr	r2, [pc, #216]	; (80017c0 <HAL_ADC_MspInit+0x120>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <HAL_ADC_MspInit+0x120>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HAL_ADC_MspInit+0x120>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a2f      	ldr	r2, [pc, #188]	; (80017c0 <HAL_ADC_MspInit+0x120>)
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <HAL_ADC_MspInit+0x120>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001716:	2340      	movs	r3, #64	; 0x40
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800171a:	2303      	movs	r3, #3
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4826      	ldr	r0, [pc, #152]	; (80017c4 <HAL_ADC_MspInit+0x124>)
 800172a:	f004 f877 	bl	800581c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LIGHTSEN_Pin;
 800172e:	2320      	movs	r3, #32
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001732:	2303      	movs	r3, #3
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LIGHTSEN_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	4821      	ldr	r0, [pc, #132]	; (80017c8 <HAL_ADC_MspInit+0x128>)
 8001742:	f004 f86b 	bl	800581c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001746:	4b21      	ldr	r3, [pc, #132]	; (80017cc <HAL_ADC_MspInit+0x12c>)
 8001748:	4a21      	ldr	r2, [pc, #132]	; (80017d0 <HAL_ADC_MspInit+0x130>)
 800174a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <HAL_ADC_MspInit+0x12c>)
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001752:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <HAL_ADC_MspInit+0x12c>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001758:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <HAL_ADC_MspInit+0x12c>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800175e:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_ADC_MspInit+0x12c>)
 8001760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001764:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_ADC_MspInit+0x12c>)
 8001768:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800176c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_ADC_MspInit+0x12c>)
 8001770:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001774:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_ADC_MspInit+0x12c>)
 8001778:	2200      	movs	r2, #0
 800177a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <HAL_ADC_MspInit+0x12c>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_ADC_MspInit+0x12c>)
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001788:	4810      	ldr	r0, [pc, #64]	; (80017cc <HAL_ADC_MspInit+0x12c>)
 800178a:	f003 f8e7 	bl	800495c <HAL_DMA_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001794:	f001 f870 	bl	8002878 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a0c      	ldr	r2, [pc, #48]	; (80017cc <HAL_ADC_MspInit+0x12c>)
 800179c:	639a      	str	r2, [r3, #56]	; 0x38
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <HAL_ADC_MspInit+0x12c>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2105      	movs	r1, #5
 80017a8:	2012      	movs	r0, #18
 80017aa:	f003 f851 	bl	8004850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80017ae:	2012      	movs	r0, #18
 80017b0:	f003 f87a 	bl	80048a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80017b4:	bf00      	nop
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40012000 	.word	0x40012000
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40020800 	.word	0x40020800
 80017cc:	20000150 	.word	0x20000150
 80017d0:	40026410 	.word	0x40026410

080017d4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_CRC_Init+0x20>)
 80017da:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <MX_CRC_Init+0x24>)
 80017dc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_CRC_Init+0x20>)
 80017e0:	f003 f892 	bl	8004908 <HAL_CRC_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80017ea:	f001 f845 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200001b0 	.word	0x200001b0
 80017f8:	40023000 	.word	0x40023000

080017fc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <HAL_CRC_MspInit+0x3c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d10d      	bne.n	800182a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_CRC_MspInit+0x40>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <HAL_CRC_MspInit+0x40>)
 8001818:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <HAL_CRC_MspInit+0x40>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40023000 	.word	0x40023000
 800183c:	40023800 	.word	0x40023800

08001840 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_DMA_Init+0x3c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a0b      	ldr	r2, [pc, #44]	; (800187c <MX_DMA_Init+0x3c>)
 8001850:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_DMA_Init+0x3c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2105      	movs	r1, #5
 8001866:	2038      	movs	r0, #56	; 0x38
 8001868:	f002 fff2 	bl	8004850 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800186c:	2038      	movs	r0, #56	; 0x38
 800186e:	f003 f81b 	bl	80048a8 <HAL_NVIC_EnableIRQ>

}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800

08001880 <configureTimerForRunTimeStats>:
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0

}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
return 0;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <PreSleepProcessing>:
/* USER CODE END DAEMON_TASK_STARTUP_HOOK */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Os_SecAlm_AlarmReset */
  Os_SecAlm_AlarmResetHandle = osTimerNew(Os_SecAlm_AlarmReset_Callback, osTimerPeriodic, NULL, &Os_SecAlm_AlarmReset_attributes);
 8001918:	4ba9      	ldr	r3, [pc, #676]	; (8001bc0 <MX_FREERTOS_Init+0x2ac>)
 800191a:	2200      	movs	r2, #0
 800191c:	2101      	movs	r1, #1
 800191e:	48a9      	ldr	r0, [pc, #676]	; (8001bc4 <MX_FREERTOS_Init+0x2b0>)
 8001920:	f00a fdda 	bl	800c4d8 <osTimerNew>
 8001924:	4603      	mov	r3, r0
 8001926:	4aa8      	ldr	r2, [pc, #672]	; (8001bc8 <MX_FREERTOS_Init+0x2b4>)
 8001928:	6013      	str	r3, [r2, #0]

  /* creation of Os_CenLoc_LockUnlockSequence_Timer */
  Os_CenLoc_LockUnlockSequence_TimerHandle = osTimerNew(Os_CenLoc_LockUnlockSequence_Timer_Callback, osTimerPeriodic, NULL, &Os_CenLoc_LockUnlockSequence_Timer_attributes);
 800192a:	4ba8      	ldr	r3, [pc, #672]	; (8001bcc <MX_FREERTOS_Init+0x2b8>)
 800192c:	2200      	movs	r2, #0
 800192e:	2101      	movs	r1, #1
 8001930:	48a7      	ldr	r0, [pc, #668]	; (8001bd0 <MX_FREERTOS_Init+0x2bc>)
 8001932:	f00a fdd1 	bl	800c4d8 <osTimerNew>
 8001936:	4603      	mov	r3, r0
 8001938:	4aa6      	ldr	r2, [pc, #664]	; (8001bd4 <MX_FREERTOS_Init+0x2c0>)
 800193a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of QM_APPL_HP */
  QM_APPL_HPHandle = osThreadNew(OS_TASK_QM_APPL_HP, NULL, &QM_APPL_HP_attributes);
 800193c:	4aa6      	ldr	r2, [pc, #664]	; (8001bd8 <MX_FREERTOS_Init+0x2c4>)
 800193e:	2100      	movs	r1, #0
 8001940:	48a6      	ldr	r0, [pc, #664]	; (8001bdc <MX_FREERTOS_Init+0x2c8>)
 8001942:	f00a fd05 	bl	800c350 <osThreadNew>
 8001946:	4603      	mov	r3, r0
 8001948:	4aa5      	ldr	r2, [pc, #660]	; (8001be0 <MX_FREERTOS_Init+0x2cc>)
 800194a:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_LP */
  QM_APPL_LPHandle = osThreadNew(OS_TASK_QM_APPL_LP, NULL, &QM_APPL_LP_attributes);
 800194c:	4aa5      	ldr	r2, [pc, #660]	; (8001be4 <MX_FREERTOS_Init+0x2d0>)
 800194e:	2100      	movs	r1, #0
 8001950:	48a5      	ldr	r0, [pc, #660]	; (8001be8 <MX_FREERTOS_Init+0x2d4>)
 8001952:	f00a fcfd 	bl	800c350 <osThreadNew>
 8001956:	4603      	mov	r3, r0
 8001958:	4aa4      	ldr	r2, [pc, #656]	; (8001bec <MX_FREERTOS_Init+0x2d8>)
 800195a:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_HP */
  ASIL_APPL_HPHandle = osThreadNew(OS_TASK_ASIL_APPL_HP, NULL, &ASIL_APPL_HP_attributes);
 800195c:	4aa4      	ldr	r2, [pc, #656]	; (8001bf0 <MX_FREERTOS_Init+0x2dc>)
 800195e:	2100      	movs	r1, #0
 8001960:	48a4      	ldr	r0, [pc, #656]	; (8001bf4 <MX_FREERTOS_Init+0x2e0>)
 8001962:	f00a fcf5 	bl	800c350 <osThreadNew>
 8001966:	4603      	mov	r3, r0
 8001968:	4aa3      	ldr	r2, [pc, #652]	; (8001bf8 <MX_FREERTOS_Init+0x2e4>)
 800196a:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_LP */
  ASIL_APPL_LPHandle = osThreadNew(OS_TASK_ASIL_APPL_LP, NULL, &ASIL_APPL_LP_attributes);
 800196c:	4aa3      	ldr	r2, [pc, #652]	; (8001bfc <MX_FREERTOS_Init+0x2e8>)
 800196e:	2100      	movs	r1, #0
 8001970:	48a3      	ldr	r0, [pc, #652]	; (8001c00 <MX_FREERTOS_Init+0x2ec>)
 8001972:	f00a fced 	bl	800c350 <osThreadNew>
 8001976:	4603      	mov	r3, r0
 8001978:	4aa2      	ldr	r2, [pc, #648]	; (8001c04 <MX_FREERTOS_Init+0x2f0>)
 800197a:	6013      	str	r3, [r2, #0]

  /* creation of OS_COUNTER */
  OS_COUNTERHandle = osThreadNew(OS_TASK_OS_COUNTER, NULL, &OS_COUNTER_attributes);
 800197c:	4aa2      	ldr	r2, [pc, #648]	; (8001c08 <MX_FREERTOS_Init+0x2f4>)
 800197e:	2100      	movs	r1, #0
 8001980:	48a2      	ldr	r0, [pc, #648]	; (8001c0c <MX_FREERTOS_Init+0x2f8>)
 8001982:	f00a fce5 	bl	800c350 <osThreadNew>
 8001986:	4603      	mov	r3, r0
 8001988:	4aa1      	ldr	r2, [pc, #644]	; (8001c10 <MX_FREERTOS_Init+0x2fc>)
 800198a:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_HP */
  QM_BSW_HPHandle = osThreadNew(OS_TASK_QM_BSW_HP, NULL, &QM_BSW_HP_attributes);
 800198c:	4aa1      	ldr	r2, [pc, #644]	; (8001c14 <MX_FREERTOS_Init+0x300>)
 800198e:	2100      	movs	r1, #0
 8001990:	48a1      	ldr	r0, [pc, #644]	; (8001c18 <MX_FREERTOS_Init+0x304>)
 8001992:	f00a fcdd 	bl	800c350 <osThreadNew>
 8001996:	4603      	mov	r3, r0
 8001998:	4aa0      	ldr	r2, [pc, #640]	; (8001c1c <MX_FREERTOS_Init+0x308>)
 800199a:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_LP */
  QM_BSW_LPHandle = osThreadNew(OS_TASK_QM_BSW_LP, NULL, &QM_BSW_LP_attributes);
 800199c:	4aa0      	ldr	r2, [pc, #640]	; (8001c20 <MX_FREERTOS_Init+0x30c>)
 800199e:	2100      	movs	r1, #0
 80019a0:	48a0      	ldr	r0, [pc, #640]	; (8001c24 <MX_FREERTOS_Init+0x310>)
 80019a2:	f00a fcd5 	bl	800c350 <osThreadNew>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4a9f      	ldr	r2, [pc, #636]	; (8001c28 <MX_FREERTOS_Init+0x314>)
 80019aa:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_HP */
  ASIL_BSW_HPHandle = osThreadNew(OS_TASK_ASIL_BSW_HP, NULL, &ASIL_BSW_HP_attributes);
 80019ac:	4a9f      	ldr	r2, [pc, #636]	; (8001c2c <MX_FREERTOS_Init+0x318>)
 80019ae:	2100      	movs	r1, #0
 80019b0:	489f      	ldr	r0, [pc, #636]	; (8001c30 <MX_FREERTOS_Init+0x31c>)
 80019b2:	f00a fccd 	bl	800c350 <osThreadNew>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4a9e      	ldr	r2, [pc, #632]	; (8001c34 <MX_FREERTOS_Init+0x320>)
 80019ba:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_LP */
  ASIL_BSW_LPHandle = osThreadNew(OS_TASK_ASIL_BSW_LP, NULL, &ASIL_BSW_LP_attributes);
 80019bc:	4a9e      	ldr	r2, [pc, #632]	; (8001c38 <MX_FREERTOS_Init+0x324>)
 80019be:	2100      	movs	r1, #0
 80019c0:	489e      	ldr	r0, [pc, #632]	; (8001c3c <MX_FREERTOS_Init+0x328>)
 80019c2:	f00a fcc5 	bl	800c350 <osThreadNew>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a9d      	ldr	r2, [pc, #628]	; (8001c40 <MX_FREERTOS_Init+0x32c>)
 80019ca:	6013      	str	r3, [r2, #0]

  /* creation of OsInit */
  OsInitHandle = osThreadNew(TASK_OS_OsInit, NULL, &OsInit_attributes);
 80019cc:	4a9d      	ldr	r2, [pc, #628]	; (8001c44 <MX_FREERTOS_Init+0x330>)
 80019ce:	2100      	movs	r1, #0
 80019d0:	489d      	ldr	r0, [pc, #628]	; (8001c48 <MX_FREERTOS_Init+0x334>)
 80019d2:	f00a fcbd 	bl	800c350 <osThreadNew>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4a9c      	ldr	r2, [pc, #624]	; (8001c4c <MX_FREERTOS_Init+0x338>)
 80019da:	6013      	str	r3, [r2, #0]

  /* creation of Watchdog_MainFunction */
  Watchdog_MainFunctionHandle = osThreadNew(TASK_OS_Watchdog_MainFunction, NULL, &Watchdog_MainFunction_attributes);
 80019dc:	4a9c      	ldr	r2, [pc, #624]	; (8001c50 <MX_FREERTOS_Init+0x33c>)
 80019de:	2100      	movs	r1, #0
 80019e0:	489c      	ldr	r0, [pc, #624]	; (8001c54 <MX_FREERTOS_Init+0x340>)
 80019e2:	f00a fcb5 	bl	800c350 <osThreadNew>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4a9b      	ldr	r2, [pc, #620]	; (8001c58 <MX_FREERTOS_Init+0x344>)
 80019ea:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of SysEvent_WatchdogReset */
  SysEvent_WatchdogResetHandle = osEventFlagsNew(&SysEvent_WatchdogReset_attributes);
 80019ec:	489b      	ldr	r0, [pc, #620]	; (8001c5c <MX_FREERTOS_Init+0x348>)
 80019ee:	f00a fe54 	bl	800c69a <osEventFlagsNew>
 80019f2:	4603      	mov	r3, r0
 80019f4:	4a9a      	ldr	r2, [pc, #616]	; (8001c60 <MX_FREERTOS_Init+0x34c>)
 80019f6:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_PowerOnReset */
  SysEvent_PowerOnResetHandle = osEventFlagsNew(&SysEvent_PowerOnReset_attributes);
 80019f8:	489a      	ldr	r0, [pc, #616]	; (8001c64 <MX_FREERTOS_Init+0x350>)
 80019fa:	f00a fe4e 	bl	800c69a <osEventFlagsNew>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4a99      	ldr	r2, [pc, #612]	; (8001c68 <MX_FREERTOS_Init+0x354>)
 8001a02:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_CoreReset */
  SysEvent_CoreResetHandle = osEventFlagsNew(&SysEvent_CoreReset_attributes);
 8001a04:	4899      	ldr	r0, [pc, #612]	; (8001c6c <MX_FREERTOS_Init+0x358>)
 8001a06:	f00a fe48 	bl	800c69a <osEventFlagsNew>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4a98      	ldr	r2, [pc, #608]	; (8001c70 <MX_FREERTOS_Init+0x35c>)
 8001a0e:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_HardwareReset */
  SysEvent_HardwareResetHandle = osEventFlagsNew(&SysEvent_HardwareReset_attributes);
 8001a10:	4898      	ldr	r0, [pc, #608]	; (8001c74 <MX_FREERTOS_Init+0x360>)
 8001a12:	f00a fe42 	bl	800c69a <osEventFlagsNew>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4a97      	ldr	r2, [pc, #604]	; (8001c78 <MX_FREERTOS_Init+0x364>)
 8001a1a:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_HardFault */
  SysEvent_HardFaultHandle = osEventFlagsNew(&SysEvent_HardFault_attributes);
 8001a1c:	4897      	ldr	r0, [pc, #604]	; (8001c7c <MX_FREERTOS_Init+0x368>)
 8001a1e:	f00a fe3c 	bl	800c69a <osEventFlagsNew>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4a96      	ldr	r2, [pc, #600]	; (8001c80 <MX_FREERTOS_Init+0x36c>)
 8001a26:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_MemHandlerFault */
  SysEvent_MemHandlerFaultHandle = osEventFlagsNew(&SysEvent_MemHandlerFault_attributes);
 8001a28:	4896      	ldr	r0, [pc, #600]	; (8001c84 <MX_FREERTOS_Init+0x370>)
 8001a2a:	f00a fe36 	bl	800c69a <osEventFlagsNew>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4a95      	ldr	r2, [pc, #596]	; (8001c88 <MX_FREERTOS_Init+0x374>)
 8001a32:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_BusFault */
  SysEvent_BusFaultHandle = osEventFlagsNew(&SysEvent_BusFault_attributes);
 8001a34:	4895      	ldr	r0, [pc, #596]	; (8001c8c <MX_FREERTOS_Init+0x378>)
 8001a36:	f00a fe30 	bl	800c69a <osEventFlagsNew>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4a94      	ldr	r2, [pc, #592]	; (8001c90 <MX_FREERTOS_Init+0x37c>)
 8001a3e:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_NonMaskableInterrupt */
  SysEvent_NonMaskableInterruptHandle = osEventFlagsNew(&SysEvent_NonMaskableInterrupt_attributes);
 8001a40:	4894      	ldr	r0, [pc, #592]	; (8001c94 <MX_FREERTOS_Init+0x380>)
 8001a42:	f00a fe2a 	bl	800c69a <osEventFlagsNew>
 8001a46:	4603      	mov	r3, r0
 8001a48:	4a93      	ldr	r2, [pc, #588]	; (8001c98 <MX_FREERTOS_Init+0x384>)
 8001a4a:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_UsageFault */
  SysEvent_UsageFaultHandle = osEventFlagsNew(&SysEvent_UsageFault_attributes);
 8001a4c:	4893      	ldr	r0, [pc, #588]	; (8001c9c <MX_FREERTOS_Init+0x388>)
 8001a4e:	f00a fe24 	bl	800c69a <osEventFlagsNew>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4a92      	ldr	r2, [pc, #584]	; (8001ca0 <MX_FREERTOS_Init+0x38c>)
 8001a56:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_DebugMonFault */
  SysEvent_DebugMonFaultHandle = osEventFlagsNew(&SysEvent_DebugMonFault_attributes);
 8001a58:	4892      	ldr	r0, [pc, #584]	; (8001ca4 <MX_FREERTOS_Init+0x390>)
 8001a5a:	f00a fe1e 	bl	800c69a <osEventFlagsNew>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4a91      	ldr	r2, [pc, #580]	; (8001ca8 <MX_FREERTOS_Init+0x394>)
 8001a62:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_WWDGInterrupt */
  SysEvent_WWDGInterruptHandle = osEventFlagsNew(&SysEvent_WWDGInterrupt_attributes);
 8001a64:	4891      	ldr	r0, [pc, #580]	; (8001cac <MX_FREERTOS_Init+0x398>)
 8001a66:	f00a fe18 	bl	800c69a <osEventFlagsNew>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4a90      	ldr	r2, [pc, #576]	; (8001cb0 <MX_FREERTOS_Init+0x39c>)
 8001a6e:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_PVDInterrupt */
  SysEvent_PVDInterruptHandle = osEventFlagsNew(&SysEvent_PVDInterrupt_attributes);
 8001a70:	4890      	ldr	r0, [pc, #576]	; (8001cb4 <MX_FREERTOS_Init+0x3a0>)
 8001a72:	f00a fe12 	bl	800c69a <osEventFlagsNew>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4a8f      	ldr	r2, [pc, #572]	; (8001cb8 <MX_FREERTOS_Init+0x3a4>)
 8001a7a:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_RTCWakeupInterrupt */
  SysEvent_RTCWakeupInterruptHandle = osEventFlagsNew(&SysEvent_RTCWakeupInterrupt_attributes);
 8001a7c:	488f      	ldr	r0, [pc, #572]	; (8001cbc <MX_FREERTOS_Init+0x3a8>)
 8001a7e:	f00a fe0c 	bl	800c69a <osEventFlagsNew>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4a8e      	ldr	r2, [pc, #568]	; (8001cc0 <MX_FREERTOS_Init+0x3ac>)
 8001a86:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_FlashInterurpt */
  SysEvent_FlashInterurptHandle = osEventFlagsNew(&SysEvent_FlashInterurpt_attributes);
 8001a88:	488e      	ldr	r0, [pc, #568]	; (8001cc4 <MX_FREERTOS_Init+0x3b0>)
 8001a8a:	f00a fe06 	bl	800c69a <osEventFlagsNew>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4a8d      	ldr	r2, [pc, #564]	; (8001cc8 <MX_FREERTOS_Init+0x3b4>)
 8001a92:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_RCCInterrupt */
  SysEvent_RCCInterruptHandle = osEventFlagsNew(&SysEvent_RCCInterrupt_attributes);
 8001a94:	488d      	ldr	r0, [pc, #564]	; (8001ccc <MX_FREERTOS_Init+0x3b8>)
 8001a96:	f00a fe00 	bl	800c69a <osEventFlagsNew>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4a8c      	ldr	r2, [pc, #560]	; (8001cd0 <MX_FREERTOS_Init+0x3bc>)
 8001a9e:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_ADCInterrupt */
  SysEvent_ADCInterruptHandle = osEventFlagsNew(&SysEvent_ADCInterrupt_attributes);
 8001aa0:	488c      	ldr	r0, [pc, #560]	; (8001cd4 <MX_FREERTOS_Init+0x3c0>)
 8001aa2:	f00a fdfa 	bl	800c69a <osEventFlagsNew>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4a8b      	ldr	r2, [pc, #556]	; (8001cd8 <MX_FREERTOS_Init+0x3c4>)
 8001aaa:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_TIM1Interrupt */
  SysEvent_TIM1InterruptHandle = osEventFlagsNew(&SysEvent_TIM1Interrupt_attributes);
 8001aac:	488b      	ldr	r0, [pc, #556]	; (8001cdc <MX_FREERTOS_Init+0x3c8>)
 8001aae:	f00a fdf4 	bl	800c69a <osEventFlagsNew>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a8a      	ldr	r2, [pc, #552]	; (8001ce0 <MX_FREERTOS_Init+0x3cc>)
 8001ab6:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_TIM2Interrupt */
  SysEvent_TIM2InterruptHandle = osEventFlagsNew(&SysEvent_TIM2Interrupt_attributes);
 8001ab8:	488a      	ldr	r0, [pc, #552]	; (8001ce4 <MX_FREERTOS_Init+0x3d0>)
 8001aba:	f00a fdee 	bl	800c69a <osEventFlagsNew>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4a89      	ldr	r2, [pc, #548]	; (8001ce8 <MX_FREERTOS_Init+0x3d4>)
 8001ac2:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_TIM3Interrupt */
  SysEvent_TIM3InterruptHandle = osEventFlagsNew(&SysEvent_TIM3Interrupt_attributes);
 8001ac4:	4889      	ldr	r0, [pc, #548]	; (8001cec <MX_FREERTOS_Init+0x3d8>)
 8001ac6:	f00a fde8 	bl	800c69a <osEventFlagsNew>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a88      	ldr	r2, [pc, #544]	; (8001cf0 <MX_FREERTOS_Init+0x3dc>)
 8001ace:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_TIM4Interrupt */
  SysEvent_TIM4InterruptHandle = osEventFlagsNew(&SysEvent_TIM4Interrupt_attributes);
 8001ad0:	4888      	ldr	r0, [pc, #544]	; (8001cf4 <MX_FREERTOS_Init+0x3e0>)
 8001ad2:	f00a fde2 	bl	800c69a <osEventFlagsNew>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4a87      	ldr	r2, [pc, #540]	; (8001cf8 <MX_FREERTOS_Init+0x3e4>)
 8001ada:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_TIM5Interrupt */
  SysEvent_TIM5InterruptHandle = osEventFlagsNew(&SysEvent_TIM5Interrupt_attributes);
 8001adc:	4887      	ldr	r0, [pc, #540]	; (8001cfc <MX_FREERTOS_Init+0x3e8>)
 8001ade:	f00a fddc 	bl	800c69a <osEventFlagsNew>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4a86      	ldr	r2, [pc, #536]	; (8001d00 <MX_FREERTOS_Init+0x3ec>)
 8001ae6:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_TIM9Interrupt */
  SysEvent_TIM9InterruptHandle = osEventFlagsNew(&SysEvent_TIM9Interrupt_attributes);
 8001ae8:	4886      	ldr	r0, [pc, #536]	; (8001d04 <MX_FREERTOS_Init+0x3f0>)
 8001aea:	f00a fdd6 	bl	800c69a <osEventFlagsNew>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4a85      	ldr	r2, [pc, #532]	; (8001d08 <MX_FREERTOS_Init+0x3f4>)
 8001af2:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_TIM11Interrupt */
  SysEvent_TIM11InterruptHandle = osEventFlagsNew(&SysEvent_TIM11Interrupt_attributes);
 8001af4:	4885      	ldr	r0, [pc, #532]	; (8001d0c <MX_FREERTOS_Init+0x3f8>)
 8001af6:	f00a fdd0 	bl	800c69a <osEventFlagsNew>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4a84      	ldr	r2, [pc, #528]	; (8001d10 <MX_FREERTOS_Init+0x3fc>)
 8001afe:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_TIMFault */
  SysEvent_TIMFaultHandle = osEventFlagsNew(&SysEvent_TIMFault_attributes);
 8001b00:	4884      	ldr	r0, [pc, #528]	; (8001d14 <MX_FREERTOS_Init+0x400>)
 8001b02:	f00a fdca 	bl	800c69a <osEventFlagsNew>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4a83      	ldr	r2, [pc, #524]	; (8001d18 <MX_FREERTOS_Init+0x404>)
 8001b0a:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_I2CInterrupt */
  SysEvent_I2CInterruptHandle = osEventFlagsNew(&SysEvent_I2CInterrupt_attributes);
 8001b0c:	4883      	ldr	r0, [pc, #524]	; (8001d1c <MX_FREERTOS_Init+0x408>)
 8001b0e:	f00a fdc4 	bl	800c69a <osEventFlagsNew>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a82      	ldr	r2, [pc, #520]	; (8001d20 <MX_FREERTOS_Init+0x40c>)
 8001b16:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_I2CFault */
  SysEvent_I2CFaultHandle = osEventFlagsNew(&SysEvent_I2CFault_attributes);
 8001b18:	4882      	ldr	r0, [pc, #520]	; (8001d24 <MX_FREERTOS_Init+0x410>)
 8001b1a:	f00a fdbe 	bl	800c69a <osEventFlagsNew>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a81      	ldr	r2, [pc, #516]	; (8001d28 <MX_FREERTOS_Init+0x414>)
 8001b22:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_SPIFault */
  SysEvent_SPIFaultHandle = osEventFlagsNew(&SysEvent_SPIFault_attributes);
 8001b24:	4881      	ldr	r0, [pc, #516]	; (8001d2c <MX_FREERTOS_Init+0x418>)
 8001b26:	f00a fdb8 	bl	800c69a <osEventFlagsNew>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4a80      	ldr	r2, [pc, #512]	; (8001d30 <MX_FREERTOS_Init+0x41c>)
 8001b2e:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_SPIInterrupt */
  SysEvent_SPIInterruptHandle = osEventFlagsNew(&SysEvent_SPIInterrupt_attributes);
 8001b30:	4880      	ldr	r0, [pc, #512]	; (8001d34 <MX_FREERTOS_Init+0x420>)
 8001b32:	f00a fdb2 	bl	800c69a <osEventFlagsNew>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a7f      	ldr	r2, [pc, #508]	; (8001d38 <MX_FREERTOS_Init+0x424>)
 8001b3a:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_USARTInterrupt */
  SysEvent_USARTInterruptHandle = osEventFlagsNew(&SysEvent_USARTInterrupt_attributes);
 8001b3c:	487f      	ldr	r0, [pc, #508]	; (8001d3c <MX_FREERTOS_Init+0x428>)
 8001b3e:	f00a fdac 	bl	800c69a <osEventFlagsNew>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4a7e      	ldr	r2, [pc, #504]	; (8001d40 <MX_FREERTOS_Init+0x42c>)
 8001b46:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_USARTFault */
  SysEvent_USARTFaultHandle = osEventFlagsNew(&SysEvent_USARTFault_attributes);
 8001b48:	487e      	ldr	r0, [pc, #504]	; (8001d44 <MX_FREERTOS_Init+0x430>)
 8001b4a:	f00a fda6 	bl	800c69a <osEventFlagsNew>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a7d      	ldr	r2, [pc, #500]	; (8001d48 <MX_FREERTOS_Init+0x434>)
 8001b52:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_DMAInterrupt */
  SysEvent_DMAInterruptHandle = osEventFlagsNew(&SysEvent_DMAInterrupt_attributes);
 8001b54:	487d      	ldr	r0, [pc, #500]	; (8001d4c <MX_FREERTOS_Init+0x438>)
 8001b56:	f00a fda0 	bl	800c69a <osEventFlagsNew>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4a7c      	ldr	r2, [pc, #496]	; (8001d50 <MX_FREERTOS_Init+0x43c>)
 8001b5e:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_SoftwareReset */
  SysEvent_SoftwareResetHandle = osEventFlagsNew(&SysEvent_SoftwareReset_attributes);
 8001b60:	487c      	ldr	r0, [pc, #496]	; (8001d54 <MX_FREERTOS_Init+0x440>)
 8001b62:	f00a fd9a 	bl	800c69a <osEventFlagsNew>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4a7b      	ldr	r2, [pc, #492]	; (8001d58 <MX_FREERTOS_Init+0x444>)
 8001b6a:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_HardwareReset */
  DemEvent_DTC_HardwareResetHandle = osEventFlagsNew(&DemEvent_DTC_HardwareReset_attributes);
 8001b6c:	487b      	ldr	r0, [pc, #492]	; (8001d5c <MX_FREERTOS_Init+0x448>)
 8001b6e:	f00a fd94 	bl	800c69a <osEventFlagsNew>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4a7a      	ldr	r2, [pc, #488]	; (8001d60 <MX_FREERTOS_Init+0x44c>)
 8001b76:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_SoftwareReset */
  DemEvent_DTC_SoftwareResetHandle = osEventFlagsNew(&DemEvent_DTC_SoftwareReset_attributes);
 8001b78:	487a      	ldr	r0, [pc, #488]	; (8001d64 <MX_FREERTOS_Init+0x450>)
 8001b7a:	f00a fd8e 	bl	800c69a <osEventFlagsNew>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4a79      	ldr	r2, [pc, #484]	; (8001d68 <MX_FREERTOS_Init+0x454>)
 8001b82:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_PowerOnReset */
  DemEvent_DTC_PowerOnResetHandle = osEventFlagsNew(&DemEvent_DTC_PowerOnReset_attributes);
 8001b84:	4879      	ldr	r0, [pc, #484]	; (8001d6c <MX_FREERTOS_Init+0x458>)
 8001b86:	f00a fd88 	bl	800c69a <osEventFlagsNew>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4a78      	ldr	r2, [pc, #480]	; (8001d70 <MX_FREERTOS_Init+0x45c>)
 8001b8e:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_WatchdogReset */
  DemEvent_DTC_WatchdogResetHandle = osEventFlagsNew(&DemEvent_DTC_WatchdogReset_attributes);
 8001b90:	4878      	ldr	r0, [pc, #480]	; (8001d74 <MX_FREERTOS_Init+0x460>)
 8001b92:	f00a fd82 	bl	800c69a <osEventFlagsNew>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4a77      	ldr	r2, [pc, #476]	; (8001d78 <MX_FREERTOS_Init+0x464>)
 8001b9a:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_DMAFault */
  DemEvent_DTC_DMAFaultHandle = osEventFlagsNew(&DemEvent_DTC_DMAFault_attributes);
 8001b9c:	4877      	ldr	r0, [pc, #476]	; (8001d7c <MX_FREERTOS_Init+0x468>)
 8001b9e:	f00a fd7c 	bl	800c69a <osEventFlagsNew>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4a76      	ldr	r2, [pc, #472]	; (8001d80 <MX_FREERTOS_Init+0x46c>)
 8001ba6:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_I2CFault */
  DemEvent_DTC_I2CFaultHandle = osEventFlagsNew(&DemEvent_DTC_I2CFault_attributes);
 8001ba8:	4876      	ldr	r0, [pc, #472]	; (8001d84 <MX_FREERTOS_Init+0x470>)
 8001baa:	f00a fd76 	bl	800c69a <osEventFlagsNew>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a75      	ldr	r2, [pc, #468]	; (8001d88 <MX_FREERTOS_Init+0x474>)
 8001bb2:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_SPIFault */
  DemEvent_DTC_SPIFaultHandle = osEventFlagsNew(&DemEvent_DTC_SPIFault_attributes);
 8001bb4:	4875      	ldr	r0, [pc, #468]	; (8001d8c <MX_FREERTOS_Init+0x478>)
 8001bb6:	f00a fd70 	bl	800c69a <osEventFlagsNew>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	e0e8      	b.n	8001d90 <MX_FREERTOS_Init+0x47c>
 8001bbe:	bf00      	nop
 8001bc0:	08011228 	.word	0x08011228
 8001bc4:	0800236d 	.word	0x0800236d
 8001bc8:	200001e8 	.word	0x200001e8
 8001bcc:	08011238 	.word	0x08011238
 8001bd0:	08002381 	.word	0x08002381
 8001bd4:	200001ec 	.word	0x200001ec
 8001bd8:	0801109c 	.word	0x0801109c
 8001bdc:	0800228d 	.word	0x0800228d
 8001be0:	200001bc 	.word	0x200001bc
 8001be4:	080110c0 	.word	0x080110c0
 8001be8:	080022a1 	.word	0x080022a1
 8001bec:	200001c0 	.word	0x200001c0
 8001bf0:	080110e4 	.word	0x080110e4
 8001bf4:	080022b5 	.word	0x080022b5
 8001bf8:	200001c4 	.word	0x200001c4
 8001bfc:	08011108 	.word	0x08011108
 8001c00:	080022c9 	.word	0x080022c9
 8001c04:	200001c8 	.word	0x200001c8
 8001c08:	0801112c 	.word	0x0801112c
 8001c0c:	080022e1 	.word	0x080022e1
 8001c10:	200001cc 	.word	0x200001cc
 8001c14:	08011150 	.word	0x08011150
 8001c18:	08002301 	.word	0x08002301
 8001c1c:	200001d0 	.word	0x200001d0
 8001c20:	08011174 	.word	0x08011174
 8001c24:	08002311 	.word	0x08002311
 8001c28:	200001d4 	.word	0x200001d4
 8001c2c:	08011198 	.word	0x08011198
 8001c30:	08002321 	.word	0x08002321
 8001c34:	200001d8 	.word	0x200001d8
 8001c38:	080111bc 	.word	0x080111bc
 8001c3c:	08002331 	.word	0x08002331
 8001c40:	200001dc 	.word	0x200001dc
 8001c44:	080111e0 	.word	0x080111e0
 8001c48:	08002341 	.word	0x08002341
 8001c4c:	200001e0 	.word	0x200001e0
 8001c50:	08011204 	.word	0x08011204
 8001c54:	08002351 	.word	0x08002351
 8001c58:	200001e4 	.word	0x200001e4
 8001c5c:	08011248 	.word	0x08011248
 8001c60:	200001f0 	.word	0x200001f0
 8001c64:	08011258 	.word	0x08011258
 8001c68:	200001f4 	.word	0x200001f4
 8001c6c:	08011268 	.word	0x08011268
 8001c70:	200001f8 	.word	0x200001f8
 8001c74:	08011278 	.word	0x08011278
 8001c78:	200001fc 	.word	0x200001fc
 8001c7c:	08011288 	.word	0x08011288
 8001c80:	20000200 	.word	0x20000200
 8001c84:	08011298 	.word	0x08011298
 8001c88:	20000204 	.word	0x20000204
 8001c8c:	080112a8 	.word	0x080112a8
 8001c90:	20000208 	.word	0x20000208
 8001c94:	080112b8 	.word	0x080112b8
 8001c98:	2000020c 	.word	0x2000020c
 8001c9c:	080112c8 	.word	0x080112c8
 8001ca0:	20000210 	.word	0x20000210
 8001ca4:	080112d8 	.word	0x080112d8
 8001ca8:	20000214 	.word	0x20000214
 8001cac:	080112e8 	.word	0x080112e8
 8001cb0:	20000218 	.word	0x20000218
 8001cb4:	080112f8 	.word	0x080112f8
 8001cb8:	2000021c 	.word	0x2000021c
 8001cbc:	08011308 	.word	0x08011308
 8001cc0:	20000220 	.word	0x20000220
 8001cc4:	08011318 	.word	0x08011318
 8001cc8:	20000224 	.word	0x20000224
 8001ccc:	08011328 	.word	0x08011328
 8001cd0:	20000228 	.word	0x20000228
 8001cd4:	08011338 	.word	0x08011338
 8001cd8:	2000022c 	.word	0x2000022c
 8001cdc:	08011348 	.word	0x08011348
 8001ce0:	20000230 	.word	0x20000230
 8001ce4:	08011358 	.word	0x08011358
 8001ce8:	20000234 	.word	0x20000234
 8001cec:	08011368 	.word	0x08011368
 8001cf0:	20000238 	.word	0x20000238
 8001cf4:	08011378 	.word	0x08011378
 8001cf8:	2000023c 	.word	0x2000023c
 8001cfc:	08011388 	.word	0x08011388
 8001d00:	20000240 	.word	0x20000240
 8001d04:	08011398 	.word	0x08011398
 8001d08:	20000244 	.word	0x20000244
 8001d0c:	080113a8 	.word	0x080113a8
 8001d10:	20000248 	.word	0x20000248
 8001d14:	080113b8 	.word	0x080113b8
 8001d18:	2000024c 	.word	0x2000024c
 8001d1c:	080113c8 	.word	0x080113c8
 8001d20:	20000250 	.word	0x20000250
 8001d24:	080113d8 	.word	0x080113d8
 8001d28:	20000254 	.word	0x20000254
 8001d2c:	080113e8 	.word	0x080113e8
 8001d30:	20000258 	.word	0x20000258
 8001d34:	080113f8 	.word	0x080113f8
 8001d38:	2000025c 	.word	0x2000025c
 8001d3c:	08011408 	.word	0x08011408
 8001d40:	20000260 	.word	0x20000260
 8001d44:	08011418 	.word	0x08011418
 8001d48:	20000264 	.word	0x20000264
 8001d4c:	08011428 	.word	0x08011428
 8001d50:	20000268 	.word	0x20000268
 8001d54:	08011438 	.word	0x08011438
 8001d58:	2000026c 	.word	0x2000026c
 8001d5c:	08011448 	.word	0x08011448
 8001d60:	20000270 	.word	0x20000270
 8001d64:	08011458 	.word	0x08011458
 8001d68:	20000274 	.word	0x20000274
 8001d6c:	08011468 	.word	0x08011468
 8001d70:	20000278 	.word	0x20000278
 8001d74:	08011478 	.word	0x08011478
 8001d78:	2000027c 	.word	0x2000027c
 8001d7c:	08011488 	.word	0x08011488
 8001d80:	20000280 	.word	0x20000280
 8001d84:	08011498 	.word	0x08011498
 8001d88:	20000284 	.word	0x20000284
 8001d8c:	080114a8 	.word	0x080114a8
 8001d90:	4aa9      	ldr	r2, [pc, #676]	; (8002038 <MX_FREERTOS_Init+0x724>)
 8001d92:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_OSFault */
  SysEvent_OSFaultHandle = osEventFlagsNew(&SysEvent_OSFault_attributes);
 8001d94:	48a9      	ldr	r0, [pc, #676]	; (800203c <MX_FREERTOS_Init+0x728>)
 8001d96:	f00a fc80 	bl	800c69a <osEventFlagsNew>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4aa8      	ldr	r2, [pc, #672]	; (8002040 <MX_FREERTOS_Init+0x72c>)
 8001d9e:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_ComFault */
  SysEvent_ComFaultHandle = osEventFlagsNew(&SysEvent_ComFault_attributes);
 8001da0:	48a8      	ldr	r0, [pc, #672]	; (8002044 <MX_FREERTOS_Init+0x730>)
 8001da2:	f00a fc7a 	bl	800c69a <osEventFlagsNew>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4aa7      	ldr	r2, [pc, #668]	; (8002048 <MX_FREERTOS_Init+0x734>)
 8001daa:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_IOFault */
  SysEvent_IOFaultHandle = osEventFlagsNew(&SysEvent_IOFault_attributes);
 8001dac:	48a7      	ldr	r0, [pc, #668]	; (800204c <MX_FREERTOS_Init+0x738>)
 8001dae:	f00a fc74 	bl	800c69a <osEventFlagsNew>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4aa6      	ldr	r2, [pc, #664]	; (8002050 <MX_FREERTOS_Init+0x73c>)
 8001db6:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_DiagFault */
  SysEvent_DiagFaultHandle = osEventFlagsNew(&SysEvent_DiagFault_attributes);
 8001db8:	48a6      	ldr	r0, [pc, #664]	; (8002054 <MX_FREERTOS_Init+0x740>)
 8001dba:	f00a fc6e 	bl	800c69a <osEventFlagsNew>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4aa5      	ldr	r2, [pc, #660]	; (8002058 <MX_FREERTOS_Init+0x744>)
 8001dc2:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_MemFault */
  SysEvent_MemFaultHandle = osEventFlagsNew(&SysEvent_MemFault_attributes);
 8001dc4:	48a5      	ldr	r0, [pc, #660]	; (800205c <MX_FREERTOS_Init+0x748>)
 8001dc6:	f00a fc68 	bl	800c69a <osEventFlagsNew>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4aa4      	ldr	r2, [pc, #656]	; (8002060 <MX_FREERTOS_Init+0x74c>)
 8001dce:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_SysFault */
  SysEvent_SysFaultHandle = osEventFlagsNew(&SysEvent_SysFault_attributes);
 8001dd0:	48a4      	ldr	r0, [pc, #656]	; (8002064 <MX_FREERTOS_Init+0x750>)
 8001dd2:	f00a fc62 	bl	800c69a <osEventFlagsNew>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4aa3      	ldr	r2, [pc, #652]	; (8002068 <MX_FREERTOS_Init+0x754>)
 8001dda:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_ApplFault */
  SysEvent_ApplFaultHandle = osEventFlagsNew(&SysEvent_ApplFault_attributes);
 8001ddc:	48a3      	ldr	r0, [pc, #652]	; (800206c <MX_FREERTOS_Init+0x758>)
 8001dde:	f00a fc5c 	bl	800c69a <osEventFlagsNew>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4aa2      	ldr	r2, [pc, #648]	; (8002070 <MX_FREERTOS_Init+0x75c>)
 8001de6:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_CenLocFault */
  SysEvent_CenLocFaultHandle = osEventFlagsNew(&SysEvent_CenLocFault_attributes);
 8001de8:	48a2      	ldr	r0, [pc, #648]	; (8002074 <MX_FREERTOS_Init+0x760>)
 8001dea:	f00a fc56 	bl	800c69a <osEventFlagsNew>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4aa1      	ldr	r2, [pc, #644]	; (8002078 <MX_FREERTOS_Init+0x764>)
 8001df2:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_SecAlmFault */
  SysEvent_SecAlmFaultHandle = osEventFlagsNew(&SysEvent_SecAlmFault_attributes);
 8001df4:	48a1      	ldr	r0, [pc, #644]	; (800207c <MX_FREERTOS_Init+0x768>)
 8001df6:	f00a fc50 	bl	800c69a <osEventFlagsNew>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4aa0      	ldr	r2, [pc, #640]	; (8002080 <MX_FREERTOS_Init+0x76c>)
 8001dfe:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_BtcFault */
  SysEvent_BtcFaultHandle = osEventFlagsNew(&SysEvent_BtcFault_attributes);
 8001e00:	48a0      	ldr	r0, [pc, #640]	; (8002084 <MX_FREERTOS_Init+0x770>)
 8001e02:	f00a fc4a 	bl	800c69a <osEventFlagsNew>
 8001e06:	4603      	mov	r3, r0
 8001e08:	4a9f      	ldr	r2, [pc, #636]	; (8002088 <MX_FREERTOS_Init+0x774>)
 8001e0a:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_IntLightsFault */
  SysEvent_IntLightsFaultHandle = osEventFlagsNew(&SysEvent_IntLightsFault_attributes);
 8001e0c:	489f      	ldr	r0, [pc, #636]	; (800208c <MX_FREERTOS_Init+0x778>)
 8001e0e:	f00a fc44 	bl	800c69a <osEventFlagsNew>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a9e      	ldr	r2, [pc, #632]	; (8002090 <MX_FREERTOS_Init+0x77c>)
 8001e16:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_CanFault */
  SysEvent_CanFaultHandle = osEventFlagsNew(&SysEvent_CanFault_attributes);
 8001e18:	489e      	ldr	r0, [pc, #632]	; (8002094 <MX_FREERTOS_Init+0x780>)
 8001e1a:	f00a fc3e 	bl	800c69a <osEventFlagsNew>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4a9d      	ldr	r2, [pc, #628]	; (8002098 <MX_FREERTOS_Init+0x784>)
 8001e22:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_DcmFault */
  SysEvent_DcmFaultHandle = osEventFlagsNew(&SysEvent_DcmFault_attributes);
 8001e24:	489d      	ldr	r0, [pc, #628]	; (800209c <MX_FREERTOS_Init+0x788>)
 8001e26:	f00a fc38 	bl	800c69a <osEventFlagsNew>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4a9c      	ldr	r2, [pc, #624]	; (80020a0 <MX_FREERTOS_Init+0x78c>)
 8001e2e:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_RteFault */
  SysEvent_RteFaultHandle = osEventFlagsNew(&SysEvent_RteFault_attributes);
 8001e30:	489c      	ldr	r0, [pc, #624]	; (80020a4 <MX_FREERTOS_Init+0x790>)
 8001e32:	f00a fc32 	bl	800c69a <osEventFlagsNew>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4a9b      	ldr	r2, [pc, #620]	; (80020a8 <MX_FREERTOS_Init+0x794>)
 8001e3a:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_DemFault */
  SysEvent_DemFaultHandle = osEventFlagsNew(&SysEvent_DemFault_attributes);
 8001e3c:	489b      	ldr	r0, [pc, #620]	; (80020ac <MX_FREERTOS_Init+0x798>)
 8001e3e:	f00a fc2c 	bl	800c69a <osEventFlagsNew>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4a9a      	ldr	r2, [pc, #616]	; (80020b0 <MX_FREERTOS_Init+0x79c>)
 8001e46:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_CrcFault */
  SysEvent_CrcFaultHandle = osEventFlagsNew(&SysEvent_CrcFault_attributes);
 8001e48:	489a      	ldr	r0, [pc, #616]	; (80020b4 <MX_FREERTOS_Init+0x7a0>)
 8001e4a:	f00a fc26 	bl	800c69a <osEventFlagsNew>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4a99      	ldr	r2, [pc, #612]	; (80020b8 <MX_FREERTOS_Init+0x7a4>)
 8001e52:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_EcuFault */
  SysEvent_EcuFaultHandle = osEventFlagsNew(&SysEvent_EcuFault_attributes);
 8001e54:	4899      	ldr	r0, [pc, #612]	; (80020bc <MX_FREERTOS_Init+0x7a8>)
 8001e56:	f00a fc20 	bl	800c69a <osEventFlagsNew>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4a98      	ldr	r2, [pc, #608]	; (80020c0 <MX_FREERTOS_Init+0x7ac>)
 8001e5e:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_PortFault */
  SysEvent_PortFaultHandle = osEventFlagsNew(&SysEvent_PortFault_attributes);
 8001e60:	4898      	ldr	r0, [pc, #608]	; (80020c4 <MX_FREERTOS_Init+0x7b0>)
 8001e62:	f00a fc1a 	bl	800c69a <osEventFlagsNew>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a97      	ldr	r2, [pc, #604]	; (80020c8 <MX_FREERTOS_Init+0x7b4>)
 8001e6a:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_PWMFault */
  SysEvent_PWMFaultHandle = osEventFlagsNew(&SysEvent_PWMFault_attributes);
 8001e6c:	4897      	ldr	r0, [pc, #604]	; (80020cc <MX_FREERTOS_Init+0x7b8>)
 8001e6e:	f00a fc14 	bl	800c69a <osEventFlagsNew>
 8001e72:	4603      	mov	r3, r0
 8001e74:	4a96      	ldr	r2, [pc, #600]	; (80020d0 <MX_FREERTOS_Init+0x7bc>)
 8001e76:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_ADCFault */
  DemEvent_DTC_ADCFaultHandle = osEventFlagsNew(&DemEvent_DTC_ADCFault_attributes);
 8001e78:	4896      	ldr	r0, [pc, #600]	; (80020d4 <MX_FREERTOS_Init+0x7c0>)
 8001e7a:	f00a fc0e 	bl	800c69a <osEventFlagsNew>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4a95      	ldr	r2, [pc, #596]	; (80020d8 <MX_FREERTOS_Init+0x7c4>)
 8001e82:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_PWMFault */
  DemEvent_DTC_PWMFaultHandle = osEventFlagsNew(&DemEvent_DTC_PWMFault_attributes);
 8001e84:	4895      	ldr	r0, [pc, #596]	; (80020dc <MX_FREERTOS_Init+0x7c8>)
 8001e86:	f00a fc08 	bl	800c69a <osEventFlagsNew>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4a94      	ldr	r2, [pc, #592]	; (80020e0 <MX_FREERTOS_Init+0x7cc>)
 8001e8e:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_CanFault */
  DemEvent_DTC_CanFaultHandle = osEventFlagsNew(&DemEvent_DTC_CanFault_attributes);
 8001e90:	4894      	ldr	r0, [pc, #592]	; (80020e4 <MX_FREERTOS_Init+0x7d0>)
 8001e92:	f00a fc02 	bl	800c69a <osEventFlagsNew>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4a93      	ldr	r2, [pc, #588]	; (80020e8 <MX_FREERTOS_Init+0x7d4>)
 8001e9a:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_BtcFault */
  DemEvent_DTC_BtcFaultHandle = osEventFlagsNew(&DemEvent_DTC_BtcFault_attributes);
 8001e9c:	4893      	ldr	r0, [pc, #588]	; (80020ec <MX_FREERTOS_Init+0x7d8>)
 8001e9e:	f00a fbfc 	bl	800c69a <osEventFlagsNew>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	4a92      	ldr	r2, [pc, #584]	; (80020f0 <MX_FREERTOS_Init+0x7dc>)
 8001ea6:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_USARTFault */
  DemEvent_DTC_USARTFaultHandle = osEventFlagsNew(&DemEvent_DTC_USARTFault_attributes);
 8001ea8:	4892      	ldr	r0, [pc, #584]	; (80020f4 <MX_FREERTOS_Init+0x7e0>)
 8001eaa:	f00a fbf6 	bl	800c69a <osEventFlagsNew>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4a91      	ldr	r2, [pc, #580]	; (80020f8 <MX_FREERTOS_Init+0x7e4>)
 8001eb2:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_WatchdogFault */
  DemEvent_DTC_WatchdogFaultHandle = osEventFlagsNew(&DemEvent_DTC_WatchdogFault_attributes);
 8001eb4:	4891      	ldr	r0, [pc, #580]	; (80020fc <MX_FREERTOS_Init+0x7e8>)
 8001eb6:	f00a fbf0 	bl	800c69a <osEventFlagsNew>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4a90      	ldr	r2, [pc, #576]	; (8002100 <MX_FREERTOS_Init+0x7ec>)
 8001ebe:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_FlashFault */
  DemEvent_DTC_FlashFaultHandle = osEventFlagsNew(&DemEvent_DTC_FlashFault_attributes);
 8001ec0:	4890      	ldr	r0, [pc, #576]	; (8002104 <MX_FREERTOS_Init+0x7f0>)
 8001ec2:	f00a fbea 	bl	800c69a <osEventFlagsNew>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4a8f      	ldr	r2, [pc, #572]	; (8002108 <MX_FREERTOS_Init+0x7f4>)
 8001eca:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_RamFault */
  DemEvent_DTC_RamFaultHandle = osEventFlagsNew(&DemEvent_DTC_RamFault_attributes);
 8001ecc:	488f      	ldr	r0, [pc, #572]	; (800210c <MX_FREERTOS_Init+0x7f8>)
 8001ece:	f00a fbe4 	bl	800c69a <osEventFlagsNew>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4a8e      	ldr	r2, [pc, #568]	; (8002110 <MX_FREERTOS_Init+0x7fc>)
 8001ed6:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_TimerFault */
  DemEvent_DTC_TimerFaultHandle = osEventFlagsNew(&DemEvent_DTC_TimerFault_attributes);
 8001ed8:	488e      	ldr	r0, [pc, #568]	; (8002114 <MX_FREERTOS_Init+0x800>)
 8001eda:	f00a fbde 	bl	800c69a <osEventFlagsNew>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4a8d      	ldr	r2, [pc, #564]	; (8002118 <MX_FREERTOS_Init+0x804>)
 8001ee2:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_EcuUnderVoltage */
  DemEvent_DTC_EcuUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_EcuUnderVoltage_attributes);
 8001ee4:	488d      	ldr	r0, [pc, #564]	; (800211c <MX_FREERTOS_Init+0x808>)
 8001ee6:	f00a fbd8 	bl	800c69a <osEventFlagsNew>
 8001eea:	4603      	mov	r3, r0
 8001eec:	4a8c      	ldr	r2, [pc, #560]	; (8002120 <MX_FREERTOS_Init+0x80c>)
 8001eee:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_LowBeamShorted */
  DemEvent_DTC_LowBeamShortedHandle = osEventFlagsNew(&DemEvent_DTC_LowBeamShorted_attributes);
 8001ef0:	488c      	ldr	r0, [pc, #560]	; (8002124 <MX_FREERTOS_Init+0x810>)
 8001ef2:	f00a fbd2 	bl	800c69a <osEventFlagsNew>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4a8b      	ldr	r2, [pc, #556]	; (8002128 <MX_FREERTOS_Init+0x814>)
 8001efa:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_LowBeamUnderVoltage */
  DemEvent_DTC_LowBeamUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_LowBeamUnderVoltage_attributes);
 8001efc:	488b      	ldr	r0, [pc, #556]	; (800212c <MX_FREERTOS_Init+0x818>)
 8001efe:	f00a fbcc 	bl	800c69a <osEventFlagsNew>
 8001f02:	4603      	mov	r3, r0
 8001f04:	4a8a      	ldr	r2, [pc, #552]	; (8002130 <MX_FREERTOS_Init+0x81c>)
 8001f06:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_RTCFault */
  DemEvent_DTC_RTCFaultHandle = osEventFlagsNew(&DemEvent_DTC_RTCFault_attributes);
 8001f08:	488a      	ldr	r0, [pc, #552]	; (8002134 <MX_FREERTOS_Init+0x820>)
 8001f0a:	f00a fbc6 	bl	800c69a <osEventFlagsNew>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a89      	ldr	r2, [pc, #548]	; (8002138 <MX_FREERTOS_Init+0x824>)
 8001f12:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_HighBeamUnderVoltage */
  DemEvent_DTC_HighBeamUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_HighBeamUnderVoltage_attributes);
 8001f14:	4889      	ldr	r0, [pc, #548]	; (800213c <MX_FREERTOS_Init+0x828>)
 8001f16:	f00a fbc0 	bl	800c69a <osEventFlagsNew>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4a88      	ldr	r2, [pc, #544]	; (8002140 <MX_FREERTOS_Init+0x82c>)
 8001f1e:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_HighBeamShorted */
  DemEvent_DTC_HighBeamShortedHandle = osEventFlagsNew(&DemEvent_DTC_HighBeamShorted_attributes);
 8001f20:	4888      	ldr	r0, [pc, #544]	; (8002144 <MX_FREERTOS_Init+0x830>)
 8001f22:	f00a fbba 	bl	800c69a <osEventFlagsNew>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4a87      	ldr	r2, [pc, #540]	; (8002148 <MX_FREERTOS_Init+0x834>)
 8001f2a:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_DayTimeRunningLightUnderVoltage */
  DemEvent_DTC_DayTimeRunningLightUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_DayTimeRunningLightUnderVoltage_attributes);
 8001f2c:	4887      	ldr	r0, [pc, #540]	; (800214c <MX_FREERTOS_Init+0x838>)
 8001f2e:	f00a fbb4 	bl	800c69a <osEventFlagsNew>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4a86      	ldr	r2, [pc, #536]	; (8002150 <MX_FREERTOS_Init+0x83c>)
 8001f36:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_DayTimeRunningLightShorted */
  DemEvent_DTC_DayTimeRunningLightShortedHandle = osEventFlagsNew(&DemEvent_DTC_DayTimeRunningLightShorted_attributes);
 8001f38:	4886      	ldr	r0, [pc, #536]	; (8002154 <MX_FREERTOS_Init+0x840>)
 8001f3a:	f00a fbae 	bl	800c69a <osEventFlagsNew>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4a85      	ldr	r2, [pc, #532]	; (8002158 <MX_FREERTOS_Init+0x844>)
 8001f42:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_FrontFogLightsUnderVoltage */
  DemEvent_DTC_FrontFogLightsUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_FrontFogLightsUnderVoltage_attributes);
 8001f44:	4885      	ldr	r0, [pc, #532]	; (800215c <MX_FREERTOS_Init+0x848>)
 8001f46:	f00a fba8 	bl	800c69a <osEventFlagsNew>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4a84      	ldr	r2, [pc, #528]	; (8002160 <MX_FREERTOS_Init+0x84c>)
 8001f4e:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_FrontFogLightShorted */
  DemEvent_DTC_FrontFogLightShortedHandle = osEventFlagsNew(&DemEvent_DTC_FrontFogLightShorted_attributes);
 8001f50:	4884      	ldr	r0, [pc, #528]	; (8002164 <MX_FREERTOS_Init+0x850>)
 8001f52:	f00a fba2 	bl	800c69a <osEventFlagsNew>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4a83      	ldr	r2, [pc, #524]	; (8002168 <MX_FREERTOS_Init+0x854>)
 8001f5a:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_RearFogLightUnderVoltage */
  DemEvent_DTC_RearFogLightUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_RearFogLightUnderVoltage_attributes);
 8001f5c:	4883      	ldr	r0, [pc, #524]	; (800216c <MX_FREERTOS_Init+0x858>)
 8001f5e:	f00a fb9c 	bl	800c69a <osEventFlagsNew>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4a82      	ldr	r2, [pc, #520]	; (8002170 <MX_FREERTOS_Init+0x85c>)
 8001f66:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_RearFogLightShorted */
  DemEvent_DTC_RearFogLightShortedHandle = osEventFlagsNew(&DemEvent_DTC_RearFogLightShorted_attributes);
 8001f68:	4882      	ldr	r0, [pc, #520]	; (8002174 <MX_FREERTOS_Init+0x860>)
 8001f6a:	f00a fb96 	bl	800c69a <osEventFlagsNew>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4a81      	ldr	r2, [pc, #516]	; (8002178 <MX_FREERTOS_Init+0x864>)
 8001f72:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_RearPositionLightUnderVoltage */
  DemEvent_DTC_RearPositionLightUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_RearPositionLightUnderVoltage_attributes);
 8001f74:	4881      	ldr	r0, [pc, #516]	; (800217c <MX_FREERTOS_Init+0x868>)
 8001f76:	f00a fb90 	bl	800c69a <osEventFlagsNew>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4a80      	ldr	r2, [pc, #512]	; (8002180 <MX_FREERTOS_Init+0x86c>)
 8001f7e:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_RearPositionLightShorted */
  DemEvent_DTC_RearPositionLightShortedHandle = osEventFlagsNew(&DemEvent_DTC_RearPositionLightShorted_attributes);
 8001f80:	4880      	ldr	r0, [pc, #512]	; (8002184 <MX_FREERTOS_Init+0x870>)
 8001f82:	f00a fb8a 	bl	800c69a <osEventFlagsNew>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4a7f      	ldr	r2, [pc, #508]	; (8002188 <MX_FREERTOS_Init+0x874>)
 8001f8a:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_RightTurnSignalUnderVoltage */
  DemEvent_DTC_RightTurnSignalUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_RightTurnSignalUnderVoltage_attributes);
 8001f8c:	487f      	ldr	r0, [pc, #508]	; (800218c <MX_FREERTOS_Init+0x878>)
 8001f8e:	f00a fb84 	bl	800c69a <osEventFlagsNew>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4a7e      	ldr	r2, [pc, #504]	; (8002190 <MX_FREERTOS_Init+0x87c>)
 8001f96:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_LeftTurnSignalUnderVoltage */
  DemEvent_DTC_LeftTurnSignalUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_LeftTurnSignalUnderVoltage_attributes);
 8001f98:	487e      	ldr	r0, [pc, #504]	; (8002194 <MX_FREERTOS_Init+0x880>)
 8001f9a:	f00a fb7e 	bl	800c69a <osEventFlagsNew>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4a7d      	ldr	r2, [pc, #500]	; (8002198 <MX_FREERTOS_Init+0x884>)
 8001fa2:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_RightTurnSignalShorted */
  DemEvent_DTC_RightTurnSignalShortedHandle = osEventFlagsNew(&DemEvent_DTC_RightTurnSignalShorted_attributes);
 8001fa4:	487d      	ldr	r0, [pc, #500]	; (800219c <MX_FREERTOS_Init+0x888>)
 8001fa6:	f00a fb78 	bl	800c69a <osEventFlagsNew>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4a7c      	ldr	r2, [pc, #496]	; (80021a0 <MX_FREERTOS_Init+0x88c>)
 8001fae:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_LeftTurnSignalShorted */
  DemEvent_DTC_LeftTurnSignalShortedHandle = osEventFlagsNew(&DemEvent_DTC_LeftTurnSignalShorted_attributes);
 8001fb0:	487c      	ldr	r0, [pc, #496]	; (80021a4 <MX_FREERTOS_Init+0x890>)
 8001fb2:	f00a fb72 	bl	800c69a <osEventFlagsNew>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4a7b      	ldr	r2, [pc, #492]	; (80021a8 <MX_FREERTOS_Init+0x894>)
 8001fba:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_ReverseLightUnderVoltage */
  DemEvent_DTC_ReverseLightUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_ReverseLightUnderVoltage_attributes);
 8001fbc:	487b      	ldr	r0, [pc, #492]	; (80021ac <MX_FREERTOS_Init+0x898>)
 8001fbe:	f00a fb6c 	bl	800c69a <osEventFlagsNew>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4a7a      	ldr	r2, [pc, #488]	; (80021b0 <MX_FREERTOS_Init+0x89c>)
 8001fc6:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_ReverseLightShorted */
  DemEvent_DTC_ReverseLightShortedHandle = osEventFlagsNew(&DemEvent_DTC_ReverseLightShorted_attributes);
 8001fc8:	487a      	ldr	r0, [pc, #488]	; (80021b4 <MX_FREERTOS_Init+0x8a0>)
 8001fca:	f00a fb66 	bl	800c69a <osEventFlagsNew>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4a79      	ldr	r2, [pc, #484]	; (80021b8 <MX_FREERTOS_Init+0x8a4>)
 8001fd2:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_InteriorLightsUnderVoltage */
  DemEvent_DTC_InteriorLightsUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_InteriorLightsUnderVoltage_attributes);
 8001fd4:	4879      	ldr	r0, [pc, #484]	; (80021bc <MX_FREERTOS_Init+0x8a8>)
 8001fd6:	f00a fb60 	bl	800c69a <osEventFlagsNew>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4a78      	ldr	r2, [pc, #480]	; (80021c0 <MX_FREERTOS_Init+0x8ac>)
 8001fde:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_InteriorLightsShorted */
  DemEvent_DTC_InteriorLightsShortedHandle = osEventFlagsNew(&DemEvent_DTC_InteriorLightsShorted_attributes);
 8001fe0:	4878      	ldr	r0, [pc, #480]	; (80021c4 <MX_FREERTOS_Init+0x8b0>)
 8001fe2:	f00a fb5a 	bl	800c69a <osEventFlagsNew>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4a77      	ldr	r2, [pc, #476]	; (80021c8 <MX_FREERTOS_Init+0x8b4>)
 8001fea:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_DoorLedUnderVoltage */
  DemEvent_DTC_DoorLedUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_DoorLedUnderVoltage_attributes);
 8001fec:	4877      	ldr	r0, [pc, #476]	; (80021cc <MX_FREERTOS_Init+0x8b8>)
 8001fee:	f00a fb54 	bl	800c69a <osEventFlagsNew>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4a76      	ldr	r2, [pc, #472]	; (80021d0 <MX_FREERTOS_Init+0x8bc>)
 8001ff6:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_DoorLedShorted */
  DemEvent_DTC_DoorLedShortedHandle = osEventFlagsNew(&DemEvent_DTC_DoorLedShorted_attributes);
 8001ff8:	4876      	ldr	r0, [pc, #472]	; (80021d4 <MX_FREERTOS_Init+0x8c0>)
 8001ffa:	f00a fb4e 	bl	800c69a <osEventFlagsNew>
 8001ffe:	4603      	mov	r3, r0
 8002000:	4a75      	ldr	r2, [pc, #468]	; (80021d8 <MX_FREERTOS_Init+0x8c4>)
 8002002:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_LicensePlateLigthUnderVoltage */
  DemEvent_DTC_LicensePlateLigthUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_LicensePlateLigthUnderVoltage_attributes);
 8002004:	4875      	ldr	r0, [pc, #468]	; (80021dc <MX_FREERTOS_Init+0x8c8>)
 8002006:	f00a fb48 	bl	800c69a <osEventFlagsNew>
 800200a:	4603      	mov	r3, r0
 800200c:	4a74      	ldr	r2, [pc, #464]	; (80021e0 <MX_FREERTOS_Init+0x8cc>)
 800200e:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_LicensePlateLigthShorted */
  DemEvent_DTC_LicensePlateLigthShortedHandle = osEventFlagsNew(&DemEvent_DTC_LicensePlateLigthShorted_attributes);
 8002010:	4874      	ldr	r0, [pc, #464]	; (80021e4 <MX_FREERTOS_Init+0x8d0>)
 8002012:	f00a fb42 	bl	800c69a <osEventFlagsNew>
 8002016:	4603      	mov	r3, r0
 8002018:	4a73      	ldr	r2, [pc, #460]	; (80021e8 <MX_FREERTOS_Init+0x8d4>)
 800201a:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_Mcp2515Fault */
  DemEvent_DTC_Mcp2515FaultHandle = osEventFlagsNew(&DemEvent_DTC_Mcp2515Fault_attributes);
 800201c:	4873      	ldr	r0, [pc, #460]	; (80021ec <MX_FREERTOS_Init+0x8d8>)
 800201e:	f00a fb3c 	bl	800c69a <osEventFlagsNew>
 8002022:	4603      	mov	r3, r0
 8002024:	4a72      	ldr	r2, [pc, #456]	; (80021f0 <MX_FREERTOS_Init+0x8dc>)
 8002026:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_ExtEEPROMFault */
  DemEvent_DTC_ExtEEPROMFaultHandle = osEventFlagsNew(&DemEvent_DTC_ExtEEPROMFault_attributes);
 8002028:	4872      	ldr	r0, [pc, #456]	; (80021f4 <MX_FREERTOS_Init+0x8e0>)
 800202a:	f00a fb36 	bl	800c69a <osEventFlagsNew>
 800202e:	4603      	mov	r3, r0
 8002030:	4a71      	ldr	r2, [pc, #452]	; (80021f8 <MX_FREERTOS_Init+0x8e4>)
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	e0e2      	b.n	80021fc <MX_FREERTOS_Init+0x8e8>
 8002036:	bf00      	nop
 8002038:	20000288 	.word	0x20000288
 800203c:	080114b8 	.word	0x080114b8
 8002040:	2000028c 	.word	0x2000028c
 8002044:	080114c8 	.word	0x080114c8
 8002048:	20000290 	.word	0x20000290
 800204c:	080114d8 	.word	0x080114d8
 8002050:	20000294 	.word	0x20000294
 8002054:	080114e8 	.word	0x080114e8
 8002058:	20000298 	.word	0x20000298
 800205c:	080114f8 	.word	0x080114f8
 8002060:	2000029c 	.word	0x2000029c
 8002064:	08011508 	.word	0x08011508
 8002068:	200002a0 	.word	0x200002a0
 800206c:	08011518 	.word	0x08011518
 8002070:	200002a4 	.word	0x200002a4
 8002074:	08011528 	.word	0x08011528
 8002078:	200002a8 	.word	0x200002a8
 800207c:	08011538 	.word	0x08011538
 8002080:	200002ac 	.word	0x200002ac
 8002084:	08011548 	.word	0x08011548
 8002088:	200002b0 	.word	0x200002b0
 800208c:	08011558 	.word	0x08011558
 8002090:	200002b4 	.word	0x200002b4
 8002094:	08011568 	.word	0x08011568
 8002098:	200002b8 	.word	0x200002b8
 800209c:	08011578 	.word	0x08011578
 80020a0:	200002bc 	.word	0x200002bc
 80020a4:	08011588 	.word	0x08011588
 80020a8:	200002c0 	.word	0x200002c0
 80020ac:	08011598 	.word	0x08011598
 80020b0:	200002c4 	.word	0x200002c4
 80020b4:	080115a8 	.word	0x080115a8
 80020b8:	200002c8 	.word	0x200002c8
 80020bc:	080115b8 	.word	0x080115b8
 80020c0:	200002cc 	.word	0x200002cc
 80020c4:	080115c8 	.word	0x080115c8
 80020c8:	200002d0 	.word	0x200002d0
 80020cc:	080115d8 	.word	0x080115d8
 80020d0:	200002d4 	.word	0x200002d4
 80020d4:	080115e8 	.word	0x080115e8
 80020d8:	200002d8 	.word	0x200002d8
 80020dc:	080115f8 	.word	0x080115f8
 80020e0:	200002dc 	.word	0x200002dc
 80020e4:	08011608 	.word	0x08011608
 80020e8:	200002e0 	.word	0x200002e0
 80020ec:	08011618 	.word	0x08011618
 80020f0:	200002e4 	.word	0x200002e4
 80020f4:	08011628 	.word	0x08011628
 80020f8:	200002e8 	.word	0x200002e8
 80020fc:	08011638 	.word	0x08011638
 8002100:	200002ec 	.word	0x200002ec
 8002104:	08011648 	.word	0x08011648
 8002108:	200002f0 	.word	0x200002f0
 800210c:	08011658 	.word	0x08011658
 8002110:	200002f4 	.word	0x200002f4
 8002114:	08011668 	.word	0x08011668
 8002118:	200002f8 	.word	0x200002f8
 800211c:	08011678 	.word	0x08011678
 8002120:	200002fc 	.word	0x200002fc
 8002124:	08011688 	.word	0x08011688
 8002128:	20000300 	.word	0x20000300
 800212c:	08011698 	.word	0x08011698
 8002130:	20000304 	.word	0x20000304
 8002134:	080116a8 	.word	0x080116a8
 8002138:	20000308 	.word	0x20000308
 800213c:	080116b8 	.word	0x080116b8
 8002140:	2000030c 	.word	0x2000030c
 8002144:	080116c8 	.word	0x080116c8
 8002148:	20000310 	.word	0x20000310
 800214c:	080116d8 	.word	0x080116d8
 8002150:	20000314 	.word	0x20000314
 8002154:	080116e8 	.word	0x080116e8
 8002158:	20000318 	.word	0x20000318
 800215c:	080116f8 	.word	0x080116f8
 8002160:	2000031c 	.word	0x2000031c
 8002164:	08011708 	.word	0x08011708
 8002168:	20000320 	.word	0x20000320
 800216c:	08011718 	.word	0x08011718
 8002170:	20000324 	.word	0x20000324
 8002174:	08011728 	.word	0x08011728
 8002178:	20000328 	.word	0x20000328
 800217c:	08011738 	.word	0x08011738
 8002180:	2000032c 	.word	0x2000032c
 8002184:	08011748 	.word	0x08011748
 8002188:	20000330 	.word	0x20000330
 800218c:	08011758 	.word	0x08011758
 8002190:	20000334 	.word	0x20000334
 8002194:	08011768 	.word	0x08011768
 8002198:	20000338 	.word	0x20000338
 800219c:	08011778 	.word	0x08011778
 80021a0:	2000033c 	.word	0x2000033c
 80021a4:	08011788 	.word	0x08011788
 80021a8:	20000340 	.word	0x20000340
 80021ac:	08011798 	.word	0x08011798
 80021b0:	20000344 	.word	0x20000344
 80021b4:	080117a8 	.word	0x080117a8
 80021b8:	20000348 	.word	0x20000348
 80021bc:	080117b8 	.word	0x080117b8
 80021c0:	2000034c 	.word	0x2000034c
 80021c4:	080117c8 	.word	0x080117c8
 80021c8:	20000350 	.word	0x20000350
 80021cc:	080117d8 	.word	0x080117d8
 80021d0:	20000354 	.word	0x20000354
 80021d4:	080117e8 	.word	0x080117e8
 80021d8:	20000358 	.word	0x20000358
 80021dc:	080117f8 	.word	0x080117f8
 80021e0:	2000035c 	.word	0x2000035c
 80021e4:	08011808 	.word	0x08011808
 80021e8:	20000360 	.word	0x20000360
 80021ec:	08011818 	.word	0x08011818
 80021f0:	20000364 	.word	0x20000364
 80021f4:	08011828 	.word	0x08011828
 80021f8:	20000368 	.word	0x20000368

  /* creation of DemEvent_DTC_VibrationSensorFault */
  DemEvent_DTC_VibrationSensorFaultHandle = osEventFlagsNew(&DemEvent_DTC_VibrationSensorFault_attributes);
 80021fc:	4815      	ldr	r0, [pc, #84]	; (8002254 <MX_FREERTOS_Init+0x940>)
 80021fe:	f00a fa4c 	bl	800c69a <osEventFlagsNew>
 8002202:	4603      	mov	r3, r0
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <MX_FREERTOS_Init+0x944>)
 8002206:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_LightSensorFault */
  DemEvent_DTC_LightSensorFaultHandle = osEventFlagsNew(&DemEvent_DTC_LightSensorFault_attributes);
 8002208:	4814      	ldr	r0, [pc, #80]	; (800225c <MX_FREERTOS_Init+0x948>)
 800220a:	f00a fa46 	bl	800c69a <osEventFlagsNew>
 800220e:	4603      	mov	r3, r0
 8002210:	4a13      	ldr	r2, [pc, #76]	; (8002260 <MX_FREERTOS_Init+0x94c>)
 8002212:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_HC05Fault */
  DemEvent_DTC_HC05FaultHandle = osEventFlagsNew(&DemEvent_DTC_HC05Fault_attributes);
 8002214:	4813      	ldr	r0, [pc, #76]	; (8002264 <MX_FREERTOS_Init+0x950>)
 8002216:	f00a fa40 	bl	800c69a <osEventFlagsNew>
 800221a:	4603      	mov	r3, r0
 800221c:	4a12      	ldr	r2, [pc, #72]	; (8002268 <MX_FREERTOS_Init+0x954>)
 800221e:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_AlarmLedUnderVoltage */
  DemEvent_DTC_AlarmLedUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_AlarmLedUnderVoltage_attributes);
 8002220:	4812      	ldr	r0, [pc, #72]	; (800226c <MX_FREERTOS_Init+0x958>)
 8002222:	f00a fa3a 	bl	800c69a <osEventFlagsNew>
 8002226:	4603      	mov	r3, r0
 8002228:	4a11      	ldr	r2, [pc, #68]	; (8002270 <MX_FREERTOS_Init+0x95c>)
 800222a:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_AlarmLedShorted */
  DemEvent_DTC_AlarmLedShortedHandle = osEventFlagsNew(&DemEvent_DTC_AlarmLedShorted_attributes);
 800222c:	4811      	ldr	r0, [pc, #68]	; (8002274 <MX_FREERTOS_Init+0x960>)
 800222e:	f00a fa34 	bl	800c69a <osEventFlagsNew>
 8002232:	4603      	mov	r3, r0
 8002234:	4a10      	ldr	r2, [pc, #64]	; (8002278 <MX_FREERTOS_Init+0x964>)
 8002236:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_CentralLockBuzzerFault */
  DemEvent_DTC_CentralLockBuzzerFaultHandle = osEventFlagsNew(&DemEvent_DTC_CentralLockBuzzerFault_attributes);
 8002238:	4810      	ldr	r0, [pc, #64]	; (800227c <MX_FREERTOS_Init+0x968>)
 800223a:	f00a fa2e 	bl	800c69a <osEventFlagsNew>
 800223e:	4603      	mov	r3, r0
 8002240:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <MX_FREERTOS_Init+0x96c>)
 8002242:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_AlarmBuzzerFault */
  DemEvent_DTC_AlarmBuzzerFaultHandle = osEventFlagsNew(&DemEvent_DTC_AlarmBuzzerFault_attributes);
 8002244:	480f      	ldr	r0, [pc, #60]	; (8002284 <MX_FREERTOS_Init+0x970>)
 8002246:	f00a fa28 	bl	800c69a <osEventFlagsNew>
 800224a:	4603      	mov	r3, r0
 800224c:	4a0e      	ldr	r2, [pc, #56]	; (8002288 <MX_FREERTOS_Init+0x974>)
 800224e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	08011838 	.word	0x08011838
 8002258:	2000036c 	.word	0x2000036c
 800225c:	08011848 	.word	0x08011848
 8002260:	20000370 	.word	0x20000370
 8002264:	08011858 	.word	0x08011858
 8002268:	20000374 	.word	0x20000374
 800226c:	08011868 	.word	0x08011868
 8002270:	20000378 	.word	0x20000378
 8002274:	08011878 	.word	0x08011878
 8002278:	2000037c 	.word	0x2000037c
 800227c:	08011888 	.word	0x08011888
 8002280:	20000380 	.word	0x20000380
 8002284:	08011898 	.word	0x08011898
 8002288:	20000384 	.word	0x20000384

0800228c <OS_TASK_QM_APPL_HP>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_OS_TASK_QM_APPL_HP */
void OS_TASK_QM_APPL_HP(void *argument)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		//vTaskDelayUntil(&osAlarmLastCount, osAlarmPeriod);

		Rte_Runnable_CenLoc_MainFunction();
 8002294:	f00d fa78 	bl	800f788 <Rte_Runnable_CenLoc_MainFunction>

		osDelay(1);
 8002298:	2001      	movs	r0, #1
 800229a:	f00a f8ec 	bl	800c476 <osDelay>
		Rte_Runnable_CenLoc_MainFunction();
 800229e:	e7f9      	b.n	8002294 <OS_TASK_QM_APPL_HP+0x8>

080022a0 <OS_TASK_QM_APPL_LP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_QM_APPL_LP */
void OS_TASK_QM_APPL_LP(void *argument)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		//vTaskDelayUntil(&osAlarmLastCount, osAlarmPeriod);

		Rte_Runnable_IntLights_MainFunction();
 80022a8:	f00d fa7a 	bl	800f7a0 <Rte_Runnable_IntLights_MainFunction>

		osDelay(1);
 80022ac:	2001      	movs	r0, #1
 80022ae:	f00a f8e2 	bl	800c476 <osDelay>
		Rte_Runnable_IntLights_MainFunction();
 80022b2:	e7f9      	b.n	80022a8 <OS_TASK_QM_APPL_LP+0x8>

080022b4 <OS_TASK_ASIL_APPL_HP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_ASIL_APPL_HP */
void OS_TASK_ASIL_APPL_HP(void *argument)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		//vTaskDelayUntil(&osAlarmLastCount, osAlarmPeriod);

		Rte_Runnable_Btc_MainFunction();
 80022bc:	f00d fa5e 	bl	800f77c <Rte_Runnable_Btc_MainFunction>

		osDelay(1);
 80022c0:	2001      	movs	r0, #1
 80022c2:	f00a f8d8 	bl	800c476 <osDelay>
		Rte_Runnable_Btc_MainFunction();
 80022c6:	e7f9      	b.n	80022bc <OS_TASK_ASIL_APPL_HP+0x8>

080022c8 <OS_TASK_ASIL_APPL_LP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_ASIL_APPL_LP */
void OS_TASK_ASIL_APPL_LP(void *argument)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		//vTaskDelayUntil(&osAlarmLastCount, osAlarmPeriod);

		Rte_Runnable_ExtLights_MainFunction();
 80022d0:	f00d fa60 	bl	800f794 <Rte_Runnable_ExtLights_MainFunction>
		Rte_Runnable_SecAlm_MainFunction();
 80022d4:	f00d fa6a 	bl	800f7ac <Rte_Runnable_SecAlm_MainFunction>

		osDelay(1);
 80022d8:	2001      	movs	r0, #1
 80022da:	f00a f8cc 	bl	800c476 <osDelay>
		Rte_Runnable_ExtLights_MainFunction();
 80022de:	e7f7      	b.n	80022d0 <OS_TASK_ASIL_APPL_LP+0x8>

080022e0 <OS_TASK_OS_COUNTER>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_OS_COUNTER */
void OS_TASK_OS_COUNTER(void *argument)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_OS_COUNTER */

	for(;;)
	{

	  OS_Counter++;
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <OS_TASK_OS_COUNTER+0x1c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	4a03      	ldr	r2, [pc, #12]	; (80022fc <OS_TASK_OS_COUNTER+0x1c>)
 80022f0:	6013      	str	r3, [r2, #0]

	  osDelay(1);
 80022f2:	2001      	movs	r0, #1
 80022f4:	f00a f8bf 	bl	800c476 <osDelay>
	  OS_Counter++;
 80022f8:	e7f6      	b.n	80022e8 <OS_TASK_OS_COUNTER+0x8>
 80022fa:	bf00      	nop
 80022fc:	200001b8 	.word	0x200001b8

08002300 <OS_TASK_QM_BSW_HP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_QM_BSW_HP */
void OS_TASK_QM_BSW_HP(void *argument)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_HP */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002308:	2001      	movs	r0, #1
 800230a:	f00a f8b4 	bl	800c476 <osDelay>
 800230e:	e7fb      	b.n	8002308 <OS_TASK_QM_BSW_HP+0x8>

08002310 <OS_TASK_QM_BSW_LP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_QM_BSW_LP */
void OS_TASK_QM_BSW_LP(void *argument)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_LP */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002318:	2001      	movs	r0, #1
 800231a:	f00a f8ac 	bl	800c476 <osDelay>
 800231e:	e7fb      	b.n	8002318 <OS_TASK_QM_BSW_LP+0x8>

08002320 <OS_TASK_ASIL_BSW_HP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_ASIL_BSW_HP */
void OS_TASK_ASIL_BSW_HP(void *argument)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_HP */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002328:	2001      	movs	r0, #1
 800232a:	f00a f8a4 	bl	800c476 <osDelay>
 800232e:	e7fb      	b.n	8002328 <OS_TASK_ASIL_BSW_HP+0x8>

08002330 <OS_TASK_ASIL_BSW_LP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_ASIL_BSW_LP */
void OS_TASK_ASIL_BSW_LP(void *argument)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_LP */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002338:	2001      	movs	r0, #1
 800233a:	f00a f89c 	bl	800c476 <osDelay>
 800233e:	e7fb      	b.n	8002338 <OS_TASK_ASIL_BSW_LP+0x8>

08002340 <TASK_OS_OsInit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_OS_OsInit */
void TASK_OS_OsInit(void *argument)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK_OS_OsInit */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002348:	2001      	movs	r0, #1
 800234a:	f00a f894 	bl	800c476 <osDelay>
 800234e:	e7fb      	b.n	8002348 <TASK_OS_OsInit+0x8>

08002350 <TASK_OS_Watchdog_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_OS_Watchdog_MainFunction */
void TASK_OS_Watchdog_MainFunction(void *argument)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK_OS_Watchdog_MainFunction */
  /* Infinite loop */
  for(;;)
  {

	  HAL_WWDG_Refresh(&hwwdg);
 8002358:	4803      	ldr	r0, [pc, #12]	; (8002368 <TASK_OS_Watchdog_MainFunction+0x18>)
 800235a:	f009 ff51 	bl	800c200 <HAL_WWDG_Refresh>
    osDelay(1);
 800235e:	2001      	movs	r0, #1
 8002360:	f00a f889 	bl	800c476 <osDelay>
	  HAL_WWDG_Refresh(&hwwdg);
 8002364:	e7f8      	b.n	8002358 <TASK_OS_Watchdog_MainFunction+0x8>
 8002366:	bf00      	nop
 8002368:	20000aa8 	.word	0x20000aa8

0800236c <Os_SecAlm_AlarmReset_Callback>:
  /* USER CODE END TASK_OS_Watchdog_MainFunction */
}

/* Os_SecAlm_AlarmReset_Callback function */
void Os_SecAlm_AlarmReset_Callback(void *argument)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlm_AlarmReset_Callback */

  /* USER CODE END Os_SecAlm_AlarmReset_Callback */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <Os_CenLoc_LockUnlockSequence_Timer_Callback>:

/* Os_CenLoc_LockUnlockSequence_Timer_Callback function */
void Os_CenLoc_LockUnlockSequence_Timer_Callback(void *argument)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_CenLoc_LockUnlockSequence_Timer_Callback */

	if(Timer2Counter_CenLoc_Tim2IRQFlag <= 6
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b06      	cmp	r3, #6
 800238e:	d819      	bhi.n	80023c4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
		&& ((Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_HIGH)
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d103      	bne.n	80023a0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x20>
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d007      	beq.n	80023b0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x30>
		|| (Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_LOW)))
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d10d      	bne.n	80023c4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
 80023a8:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d109      	bne.n	80023c4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
	{

		Timer2Counter_CenLoc_Tim2IRQFlag++;
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 80023ba:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(&Timer2Counter_CenLoc_Tim2IRQFlag);
 80023bc:	4807      	ldr	r0, [pc, #28]	; (80023dc <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 80023be:	f00d f83b 	bl	800f438 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag>
 80023c2:	e006      	b.n	80023d2 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x52>

	}
	else
	{

		Timer2Counter_CenLoc_Tim2IRQFlag = 7;
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 80023c6:	2207      	movs	r2, #7
 80023c8:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(&Timer2Counter_CenLoc_Tim2IRQFlag);
 80023ca:	4804      	ldr	r0, [pc, #16]	; (80023dc <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 80023cc:	f00d f834 	bl	800f438 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag>

	}

  /* USER CODE END Os_CenLoc_LockUnlockSequence_Timer_Callback */
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000b00 	.word	0x20000b00
 80023e0:	200000aa 	.word	0x200000aa
 80023e4:	200000ad 	.word	0x200000ad

080023e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	; 0x28
 80023ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]
 80023fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	4b5d      	ldr	r3, [pc, #372]	; (8002578 <MX_GPIO_Init+0x190>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a5c      	ldr	r2, [pc, #368]	; (8002578 <MX_GPIO_Init+0x190>)
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b5a      	ldr	r3, [pc, #360]	; (8002578 <MX_GPIO_Init+0x190>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	4b56      	ldr	r3, [pc, #344]	; (8002578 <MX_GPIO_Init+0x190>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a55      	ldr	r2, [pc, #340]	; (8002578 <MX_GPIO_Init+0x190>)
 8002424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b53      	ldr	r3, [pc, #332]	; (8002578 <MX_GPIO_Init+0x190>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	4b4f      	ldr	r3, [pc, #316]	; (8002578 <MX_GPIO_Init+0x190>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a4e      	ldr	r2, [pc, #312]	; (8002578 <MX_GPIO_Init+0x190>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b4c      	ldr	r3, [pc, #304]	; (8002578 <MX_GPIO_Init+0x190>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	4b48      	ldr	r3, [pc, #288]	; (8002578 <MX_GPIO_Init+0x190>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a47      	ldr	r2, [pc, #284]	; (8002578 <MX_GPIO_Init+0x190>)
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b45      	ldr	r3, [pc, #276]	; (8002578 <MX_GPIO_Init+0x190>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	603b      	str	r3, [r7, #0]
 8002472:	4b41      	ldr	r3, [pc, #260]	; (8002578 <MX_GPIO_Init+0x190>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a40      	ldr	r2, [pc, #256]	; (8002578 <MX_GPIO_Init+0x190>)
 8002478:	f043 0308 	orr.w	r3, r3, #8
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b3e      	ldr	r3, [pc, #248]	; (8002578 <MX_GPIO_Init+0x190>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTS_Pin|RTS_Pin|IL_Pin|FL_Pin
 800248a:	2200      	movs	r2, #0
 800248c:	f641 411f 	movw	r1, #7199	; 0x1c1f
 8002490:	483a      	ldr	r0, [pc, #232]	; (800257c <MX_GPIO_Init+0x194>)
 8002492:	f003 fc5d 	bl	8005d50 <HAL_GPIO_WritePin>
                          |BUZZ1_Pin|RFL_Pin|BL_Pin|PRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRL_Pin|LPN_Pin|LB_Pin|CAN2_CS_Pin
 8002496:	2200      	movs	r2, #0
 8002498:	f249 2116 	movw	r1, #37398	; 0x9216
 800249c:	4838      	ldr	r0, [pc, #224]	; (8002580 <MX_GPIO_Init+0x198>)
 800249e:	f003 fc57 	bl	8005d50 <HAL_GPIO_WritePin>
                          |RL_Pin|SAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HB_Pin|CAN1_CS_Pin|BUZZ2_Pin|CLL_Pin, GPIO_PIN_RESET);
 80024a2:	2200      	movs	r2, #0
 80024a4:	f242 0183 	movw	r1, #8323	; 0x2083
 80024a8:	4836      	ldr	r0, [pc, #216]	; (8002584 <MX_GPIO_Init+0x19c>)
 80024aa:	f003 fc51 	bl	8005d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC6 PC7
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7
 80024ae:	f24c 33c0 	movw	r3, #50112	; 0xc3c0
 80024b2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024b4:	2303      	movs	r3, #3
 80024b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	4619      	mov	r1, r3
 80024c2:	482e      	ldr	r0, [pc, #184]	; (800257c <MX_GPIO_Init+0x194>)
 80024c4:	f003 f9aa 	bl	800581c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTS_Pin|RTS_Pin|IL_Pin|FL_Pin
 80024c8:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80024cc:	617b      	str	r3, [r7, #20]
                          |BUZZ1_Pin|RFL_Pin|BL_Pin|PRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ce:	2301      	movs	r3, #1
 80024d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	4826      	ldr	r0, [pc, #152]	; (800257c <MX_GPIO_Init+0x194>)
 80024e2:	f003 f99b 	bl	800581c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = DRL_Pin|LPN_Pin|LB_Pin|CAN2_CS_Pin
 80024e6:	f249 2316 	movw	r3, #37398	; 0x9216
 80024ea:	617b      	str	r3, [r7, #20]
                          |RL_Pin|SAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ec:	2301      	movs	r3, #1
 80024ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f4:	2300      	movs	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	4619      	mov	r1, r3
 80024fe:	4820      	ldr	r0, [pc, #128]	; (8002580 <MX_GPIO_Init+0x198>)
 8002500:	f003 f98c 	bl	800581c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA7 PA8 PA10
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8002504:	f640 5388 	movw	r3, #3464	; 0xd88
 8002508:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800250a:	2303      	movs	r3, #3
 800250c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	4619      	mov	r1, r3
 8002518:	4819      	ldr	r0, [pc, #100]	; (8002580 <MX_GPIO_Init+0x198>)
 800251a:	f003 f97f 	bl	800581c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HB_Pin|CAN1_CS_Pin|BUZZ2_Pin|CLL_Pin;
 800251e:	f242 0383 	movw	r3, #8323	; 0x2083
 8002522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002524:	2301      	movs	r3, #1
 8002526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252c:	2300      	movs	r3, #0
 800252e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	4619      	mov	r1, r3
 8002536:	4813      	ldr	r0, [pc, #76]	; (8002584 <MX_GPIO_Init+0x19c>)
 8002538:	f003 f970 	bl	800581c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800253c:	f241 0304 	movw	r3, #4100	; 0x1004
 8002540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002542:	2303      	movs	r3, #3
 8002544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254a:	f107 0314 	add.w	r3, r7, #20
 800254e:	4619      	mov	r1, r3
 8002550:	480c      	ldr	r0, [pc, #48]	; (8002584 <MX_GPIO_Init+0x19c>)
 8002552:	f003 f963 	bl	800581c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002556:	2304      	movs	r3, #4
 8002558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255a:	2303      	movs	r3, #3
 800255c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	4807      	ldr	r0, [pc, #28]	; (8002588 <MX_GPIO_Init+0x1a0>)
 800256a:	f003 f957 	bl	800581c <HAL_GPIO_Init>

}
 800256e:	bf00      	nop
 8002570:	3728      	adds	r7, #40	; 0x28
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
 800257c:	40020800 	.word	0x40020800
 8002580:	40020000 	.word	0x40020000
 8002584:	40020400 	.word	0x40020400
 8002588:	40020c00 	.word	0x40020c00

0800258c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <MX_I2C1_Init+0x50>)
 8002592:	4a13      	ldr	r2, [pc, #76]	; (80025e0 <MX_I2C1_Init+0x54>)
 8002594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <MX_I2C1_Init+0x50>)
 8002598:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <MX_I2C1_Init+0x58>)
 800259a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800259c:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <MX_I2C1_Init+0x50>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <MX_I2C1_Init+0x50>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <MX_I2C1_Init+0x50>)
 80025aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <MX_I2C1_Init+0x50>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <MX_I2C1_Init+0x50>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025bc:	4b07      	ldr	r3, [pc, #28]	; (80025dc <MX_I2C1_Init+0x50>)
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <MX_I2C1_Init+0x50>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025c8:	4804      	ldr	r0, [pc, #16]	; (80025dc <MX_I2C1_Init+0x50>)
 80025ca:	f003 fbf3 	bl	8005db4 <HAL_I2C_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025d4:	f000 f950 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000388 	.word	0x20000388
 80025e0:	40005400 	.word	0x40005400
 80025e4:	000186a0 	.word	0x000186a0

080025e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	; 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a21      	ldr	r2, [pc, #132]	; (800268c <HAL_I2C_MspInit+0xa4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d13c      	bne.n	8002684 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	4b20      	ldr	r3, [pc, #128]	; (8002690 <HAL_I2C_MspInit+0xa8>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	4a1f      	ldr	r2, [pc, #124]	; (8002690 <HAL_I2C_MspInit+0xa8>)
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	6313      	str	r3, [r2, #48]	; 0x30
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_I2C_MspInit+0xa8>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002626:	f44f 7340 	mov.w	r3, #768	; 0x300
 800262a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800262c:	2312      	movs	r3, #18
 800262e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002634:	2303      	movs	r3, #3
 8002636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002638:	2304      	movs	r3, #4
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	4619      	mov	r1, r3
 8002642:	4814      	ldr	r0, [pc, #80]	; (8002694 <HAL_I2C_MspInit+0xac>)
 8002644:	f003 f8ea 	bl	800581c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	4b10      	ldr	r3, [pc, #64]	; (8002690 <HAL_I2C_MspInit+0xa8>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	4a0f      	ldr	r2, [pc, #60]	; (8002690 <HAL_I2C_MspInit+0xa8>)
 8002652:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002656:	6413      	str	r3, [r2, #64]	; 0x40
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <HAL_I2C_MspInit+0xa8>)
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002664:	2200      	movs	r2, #0
 8002666:	2105      	movs	r1, #5
 8002668:	201f      	movs	r0, #31
 800266a:	f002 f8f1 	bl	8004850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800266e:	201f      	movs	r0, #31
 8002670:	f002 f91a 	bl	80048a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002674:	2200      	movs	r2, #0
 8002676:	2105      	movs	r1, #5
 8002678:	2020      	movs	r0, #32
 800267a:	f002 f8e9 	bl	8004850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800267e:	2020      	movs	r0, #32
 8002680:	f002 f912 	bl	80048a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002684:	bf00      	nop
 8002686:	3728      	adds	r7, #40	; 0x28
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40005400 	.word	0x40005400
 8002690:	40023800 	.word	0x40023800
 8002694:	40020400 	.word	0x40020400

08002698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800269c:	f001 f890 	bl	80037c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026a0:	f000 f828 	bl	80026f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026a4:	f7ff fea0 	bl	80023e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80026a8:	f7ff f8ca 	bl	8001840 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80026ac:	f000 fed4 	bl	8003458 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80026b0:	f000 fc7e 	bl	8002fb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80026b4:	f000 fcca 	bl	800304c <MX_TIM3_Init>
  MX_TIM5_Init();
 80026b8:	f000 fd64 	bl	8003184 <MX_TIM5_Init>
  MX_TIM4_Init();
 80026bc:	f000 fd14 	bl	80030e8 <MX_TIM4_Init>
  MX_ADC1_Init();
 80026c0:	f7fe ff8e 	bl	80015e0 <MX_ADC1_Init>
  MX_CRC_Init();
 80026c4:	f7ff f886 	bl	80017d4 <MX_CRC_Init>
  MX_TIM9_Init();
 80026c8:	f000 fdac 	bl	8003224 <MX_TIM9_Init>
  MX_SPI1_Init();
 80026cc:	f000 f99e 	bl	8002a0c <MX_SPI1_Init>
  MX_TIM11_Init();
 80026d0:	f000 fde2 	bl	8003298 <MX_TIM11_Init>
  MX_I2C1_Init();
 80026d4:	f7ff ff5a 	bl	800258c <MX_I2C1_Init>
  MX_RTC_Init();
 80026d8:	f000 f8de 	bl	8002898 <MX_RTC_Init>
  MX_SPI2_Init();
 80026dc:	f000 f9ce 	bl	8002a7c <MX_SPI2_Init>
  MX_WWDG_Init();
 80026e0:	f000 ff80 	bl	80035e4 <MX_WWDG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80026e4:	f009 fdea 	bl	800c2bc <osKernelInitialize>
  MX_FREERTOS_Init();
 80026e8:	f7ff f914 	bl	8001914 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80026ec:	f009 fe0a 	bl	800c304 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026f0:	e7fe      	b.n	80026f0 <main+0x58>
	...

080026f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b094      	sub	sp, #80	; 0x50
 80026f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026fa:	f107 0320 	add.w	r3, r7, #32
 80026fe:	2230      	movs	r2, #48	; 0x30
 8002700:	2100      	movs	r1, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f00d f9be 	bl	800fa84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002708:	f107 030c 	add.w	r3, r7, #12
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <SystemClock_Config+0xcc>)
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	4a27      	ldr	r2, [pc, #156]	; (80027c0 <SystemClock_Config+0xcc>)
 8002722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002726:	6413      	str	r3, [r2, #64]	; 0x40
 8002728:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <SystemClock_Config+0xcc>)
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002734:	2300      	movs	r3, #0
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <SystemClock_Config+0xd0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a21      	ldr	r2, [pc, #132]	; (80027c4 <SystemClock_Config+0xd0>)
 800273e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <SystemClock_Config+0xd0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002750:	2309      	movs	r3, #9
 8002752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800275a:	2301      	movs	r3, #1
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800275e:	2302      	movs	r3, #2
 8002760:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002768:	2304      	movs	r3, #4
 800276a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800276c:	2364      	movs	r3, #100	; 0x64
 800276e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002770:	2302      	movs	r3, #2
 8002772:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002774:	2304      	movs	r3, #4
 8002776:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002778:	f107 0320 	add.w	r3, r7, #32
 800277c:	4618      	mov	r0, r3
 800277e:	f005 fa33 	bl	8007be8 <HAL_RCC_OscConfig>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002788:	f000 f876 	bl	8002878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800278c:	230f      	movs	r3, #15
 800278e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002790:	2302      	movs	r3, #2
 8002792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800279c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80027a2:	f107 030c 	add.w	r3, r7, #12
 80027a6:	2103      	movs	r1, #3
 80027a8:	4618      	mov	r0, r3
 80027aa:	f005 fd45 	bl	8008238 <HAL_RCC_ClockConfig>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80027b4:	f000 f860 	bl	8002878 <Error_Handler>
  }
}
 80027b8:	bf00      	nop
 80027ba:	3750      	adds	r7, #80	; 0x50
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40007000 	.word	0x40007000

080027c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if(htim->Instance == TIM11)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d108      	bne.n	80027ec <HAL_TIM_PeriodElapsedCallback+0x24>
	{

		Timer11Counter_CenLoc_Tim11IRQFlag++;
 80027da:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	3301      	adds	r3, #1
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80027e4:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag(&Timer11Counter_CenLoc_Tim11IRQFlag);
 80027e6:	481c      	ldr	r0, [pc, #112]	; (8002858 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80027e8:	f00c fe68 	bl	800f4bc <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag>

		/* do nothing */

	}

	if(htim->Instance == TIM2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f4:	d123      	bne.n	800283e <HAL_TIM_PeriodElapsedCallback+0x76>
	{

		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 80027f6:	4b19      	ldr	r3, [pc, #100]	; (800285c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d107      	bne.n	800280e <HAL_TIM_PeriodElapsedCallback+0x46>
		{

			Timer2Counter_ExtLights_LTSFlag++;
 80027fe:	4b18      	ldr	r3, [pc, #96]	; (8002860 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3301      	adds	r3, #1
 8002804:	4a16      	ldr	r2, [pc, #88]	; (8002860 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002806:	6013      	str	r3, [r2, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(&Timer2Counter_ExtLights_LTSFlag);
 8002808:	4815      	ldr	r0, [pc, #84]	; (8002860 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800280a:	f00c ff5f 	bl	800f6cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>

			/* do nothing */

		}

		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d107      	bne.n	8002826 <HAL_TIM_PeriodElapsedCallback+0x5e>
		{

			Timer2Counter_ExtLights_RTSFlag++;
 8002816:	4b14      	ldr	r3, [pc, #80]	; (8002868 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3301      	adds	r3, #1
 800281c:	4a12      	ldr	r2, [pc, #72]	; (8002868 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800281e:	6013      	str	r3, [r2, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(&Timer2Counter_ExtLights_RTSFlag);
 8002820:	4811      	ldr	r0, [pc, #68]	; (8002868 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002822:	f00c ff3d 	bl	800f6a0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>

			/* do nothing */

		}

		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_HIGH)
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d107      	bne.n	800283e <HAL_TIM_PeriodElapsedCallback+0x76>
		{

			Timer2Counter_ExtLights_HLFlag++;
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	3301      	adds	r3, #1
 8002834:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002836:	6013      	str	r3, [r2, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(&Timer2Counter_ExtLights_HLFlag);
 8002838:	480d      	ldr	r0, [pc, #52]	; (8002870 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800283a:	f00c ff5d 	bl	800f6f8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>
		/* do nothin */

	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d101      	bne.n	800284c <HAL_TIM_PeriodElapsedCallback+0x84>
    HAL_IncTick();
 8002848:	f000 ffdc 	bl	8003804 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40014800 	.word	0x40014800
 8002858:	20000b02 	.word	0x20000b02
 800285c:	200000b9 	.word	0x200000b9
 8002860:	20000af4 	.word	0x20000af4
 8002864:	200000ba 	.word	0x200000ba
 8002868:	20000af8 	.word	0x20000af8
 800286c:	200000bb 	.word	0x200000bb
 8002870:	20000afc 	.word	0x20000afc
 8002874:	40010000 	.word	0x40010000

08002878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800287c:	b672      	cpsid	i
}
 800287e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002880:	e7fe      	b.n	8002880 <Error_Handler+0x8>

08002882 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80028ac:	2300      	movs	r3, #0
 80028ae:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028b0:	4b2e      	ldr	r3, [pc, #184]	; (800296c <MX_RTC_Init+0xd4>)
 80028b2:	4a2f      	ldr	r2, [pc, #188]	; (8002970 <MX_RTC_Init+0xd8>)
 80028b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028b6:	4b2d      	ldr	r3, [pc, #180]	; (800296c <MX_RTC_Init+0xd4>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80028bc:	4b2b      	ldr	r3, [pc, #172]	; (800296c <MX_RTC_Init+0xd4>)
 80028be:	227f      	movs	r2, #127	; 0x7f
 80028c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80028c2:	4b2a      	ldr	r3, [pc, #168]	; (800296c <MX_RTC_Init+0xd4>)
 80028c4:	22ff      	movs	r2, #255	; 0xff
 80028c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028c8:	4b28      	ldr	r3, [pc, #160]	; (800296c <MX_RTC_Init+0xd4>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028ce:	4b27      	ldr	r3, [pc, #156]	; (800296c <MX_RTC_Init+0xd4>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <MX_RTC_Init+0xd4>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028da:	4824      	ldr	r0, [pc, #144]	; (800296c <MX_RTC_Init+0xd4>)
 80028dc:	f006 f9bc 	bl	8008c58 <HAL_RTC_Init>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80028e6:	f7ff ffc7 	bl	8002878 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	2201      	movs	r2, #1
 8002902:	4619      	mov	r1, r3
 8002904:	4819      	ldr	r0, [pc, #100]	; (800296c <MX_RTC_Init+0xd4>)
 8002906:	f006 faab 	bl	8008e60 <HAL_RTC_SetTime>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002910:	f7ff ffb2 	bl	8002878 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002914:	2301      	movs	r3, #1
 8002916:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002918:	2301      	movs	r3, #1
 800291a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800291c:	2301      	movs	r3, #1
 800291e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002920:	2300      	movs	r3, #0
 8002922:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002924:	463b      	mov	r3, r7
 8002926:	2201      	movs	r2, #1
 8002928:	4619      	mov	r1, r3
 800292a:	4810      	ldr	r0, [pc, #64]	; (800296c <MX_RTC_Init+0xd4>)
 800292c:	f006 fbe0 	bl	80090f0 <HAL_RTC_SetDate>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002936:	f7ff ff9f 	bl	8002878 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800293a:	2200      	movs	r2, #0
 800293c:	2100      	movs	r1, #0
 800293e:	480b      	ldr	r0, [pc, #44]	; (800296c <MX_RTC_Init+0xd4>)
 8002940:	f006 fdbe 	bl	80094c0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 800294a:	f7ff ff95 	bl	8002878 <Error_Handler>
  }

  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 800294e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002952:	4806      	ldr	r0, [pc, #24]	; (800296c <MX_RTC_Init+0xd4>)
 8002954:	f006 fec4 	bl	80096e0 <HAL_RTCEx_SetCalibrationOutPut>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_RTC_Init+0xca>
  {
    Error_Handler();
 800295e:	f7ff ff8b 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	2000040c 	.word	0x2000040c
 8002970:	40002800 	.word	0x40002800

08002974 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800297c:	f107 0308 	add.w	r3, r7, #8
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
 800298c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <HAL_RTC_MspInit+0x60>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d119      	bne.n	80029cc <HAL_RTC_MspInit+0x58>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002998:	2302      	movs	r3, #2
 800299a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800299c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029a0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029a2:	f107 0308 	add.w	r3, r7, #8
 80029a6:	4618      	mov	r0, r3
 80029a8:	f005 ff40 	bl	800882c <HAL_RCCEx_PeriphCLKConfig>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80029b2:	f7ff ff61 	bl	8002878 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_RTC_MspInit+0x64>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 80029bc:	2200      	movs	r2, #0
 80029be:	2105      	movs	r1, #5
 80029c0:	2003      	movs	r0, #3
 80029c2:	f001 ff45 	bl	8004850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80029c6:	2003      	movs	r0, #3
 80029c8:	f001 ff6e 	bl	80048a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80029cc:	bf00      	nop
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40002800 	.word	0x40002800
 80029d8:	42470e3c 	.word	0x42470e3c

080029dc <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a06      	ldr	r2, [pc, #24]	; (8002a04 <HAL_RTC_MspDeInit+0x28>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d105      	bne.n	80029fa <HAL_RTC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_RTC_MspDeInit+0x2c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Deinit */
    HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);
 80029f4:	2003      	movs	r0, #3
 80029f6:	f001 ff6f 	bl	80048d8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40002800 	.word	0x40002800
 8002a08:	42470e3c 	.word	0x42470e3c

08002a0c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a10:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <MX_SPI1_Init+0x68>)
 8002a12:	4a19      	ldr	r2, [pc, #100]	; (8002a78 <MX_SPI1_Init+0x6c>)
 8002a14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a16:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <MX_SPI1_Init+0x68>)
 8002a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <MX_SPI1_Init+0x68>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a24:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <MX_SPI1_Init+0x68>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a2a:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <MX_SPI1_Init+0x68>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a30:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <MX_SPI1_Init+0x68>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a36:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <MX_SPI1_Init+0x68>)
 8002a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <MX_SPI1_Init+0x68>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <MX_SPI1_Init+0x68>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <MX_SPI1_Init+0x68>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <MX_SPI1_Init+0x68>)
 8002a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <MX_SPI1_Init+0x68>)
 8002a5a:	220a      	movs	r2, #10
 8002a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a5e:	4805      	ldr	r0, [pc, #20]	; (8002a74 <MX_SPI1_Init+0x68>)
 8002a60:	f006 fe96 	bl	8009790 <HAL_SPI_Init>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002a6a:	f7ff ff05 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000448 	.word	0x20000448
 8002a78:	40013000 	.word	0x40013000

08002a7c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002a80:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <MX_SPI2_Init+0x68>)
 8002a82:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <MX_SPI2_Init+0x6c>)
 8002a84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a86:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <MX_SPI2_Init+0x68>)
 8002a88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a8e:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <MX_SPI2_Init+0x68>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a94:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <MX_SPI2_Init+0x68>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a9a:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <MX_SPI2_Init+0x68>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aa0:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <MX_SPI2_Init+0x68>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <MX_SPI2_Init+0x68>)
 8002aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <MX_SPI2_Init+0x68>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <MX_SPI2_Init+0x68>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <MX_SPI2_Init+0x68>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8002ac0:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <MX_SPI2_Init+0x68>)
 8002ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <MX_SPI2_Init+0x68>)
 8002aca:	220a      	movs	r2, #10
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ace:	4805      	ldr	r0, [pc, #20]	; (8002ae4 <MX_SPI2_Init+0x68>)
 8002ad0:	f006 fe5e 	bl	8009790 <HAL_SPI_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8002ada:	f7ff fecd 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200004c8 	.word	0x200004c8
 8002ae8:	40003800 	.word	0x40003800

08002aec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08c      	sub	sp, #48	; 0x30
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 031c 	add.w	r3, r7, #28
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a49      	ldr	r2, [pc, #292]	; (8002c30 <HAL_SPI_MspInit+0x144>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d152      	bne.n	8002bb4 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	4b48      	ldr	r3, [pc, #288]	; (8002c34 <HAL_SPI_MspInit+0x148>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4a47      	ldr	r2, [pc, #284]	; (8002c34 <HAL_SPI_MspInit+0x148>)
 8002b18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1e:	4b45      	ldr	r3, [pc, #276]	; (8002c34 <HAL_SPI_MspInit+0x148>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b26:	61bb      	str	r3, [r7, #24]
 8002b28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <HAL_SPI_MspInit+0x148>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a40      	ldr	r2, [pc, #256]	; (8002c34 <HAL_SPI_MspInit+0x148>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b3e      	ldr	r3, [pc, #248]	; (8002c34 <HAL_SPI_MspInit+0x148>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	4b3a      	ldr	r3, [pc, #232]	; (8002c34 <HAL_SPI_MspInit+0x148>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a39      	ldr	r2, [pc, #228]	; (8002c34 <HAL_SPI_MspInit+0x148>)
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b37      	ldr	r3, [pc, #220]	; (8002c34 <HAL_SPI_MspInit+0x148>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b62:	2320      	movs	r3, #32
 8002b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b72:	2305      	movs	r3, #5
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b76:	f107 031c 	add.w	r3, r7, #28
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	482e      	ldr	r0, [pc, #184]	; (8002c38 <HAL_SPI_MspInit+0x14c>)
 8002b7e:	f002 fe4d 	bl	800581c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b82:	2330      	movs	r3, #48	; 0x30
 8002b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b92:	2305      	movs	r3, #5
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b96:	f107 031c 	add.w	r3, r7, #28
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4827      	ldr	r0, [pc, #156]	; (8002c3c <HAL_SPI_MspInit+0x150>)
 8002b9e:	f002 fe3d 	bl	800581c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2105      	movs	r1, #5
 8002ba6:	2023      	movs	r0, #35	; 0x23
 8002ba8:	f001 fe52 	bl	8004850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002bac:	2023      	movs	r0, #35	; 0x23
 8002bae:	f001 fe7b 	bl	80048a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002bb2:	e039      	b.n	8002c28 <HAL_SPI_MspInit+0x13c>
  else if(spiHandle->Instance==SPI2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <HAL_SPI_MspInit+0x154>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d134      	bne.n	8002c28 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <HAL_SPI_MspInit+0x148>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	4a1b      	ldr	r2, [pc, #108]	; (8002c34 <HAL_SPI_MspInit+0x148>)
 8002bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bce:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <HAL_SPI_MspInit+0x148>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <HAL_SPI_MspInit+0x148>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <HAL_SPI_MspInit+0x148>)
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bea:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <HAL_SPI_MspInit+0x148>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002bf6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c04:	2303      	movs	r3, #3
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c08:	2305      	movs	r3, #5
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	4619      	mov	r1, r3
 8002c12:	480a      	ldr	r0, [pc, #40]	; (8002c3c <HAL_SPI_MspInit+0x150>)
 8002c14:	f002 fe02 	bl	800581c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2105      	movs	r1, #5
 8002c1c:	2024      	movs	r0, #36	; 0x24
 8002c1e:	f001 fe17 	bl	8004850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002c22:	2024      	movs	r0, #36	; 0x24
 8002c24:	f001 fe40 	bl	80048a8 <HAL_NVIC_EnableIRQ>
}
 8002c28:	bf00      	nop
 8002c2a:	3730      	adds	r7, #48	; 0x30
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40013000 	.word	0x40013000
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40020000 	.word	0x40020000
 8002c3c:	40020400 	.word	0x40020400
 8002c40:	40003800 	.word	0x40003800

08002c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <HAL_MspInit+0x94>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	4a21      	ldr	r2, [pc, #132]	; (8002cd8 <HAL_MspInit+0x94>)
 8002c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c58:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5a:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <HAL_MspInit+0x94>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	603b      	str	r3, [r7, #0]
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <HAL_MspInit+0x94>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	4a1a      	ldr	r2, [pc, #104]	; (8002cd8 <HAL_MspInit+0x94>)
 8002c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c74:	6413      	str	r3, [r2, #64]	; 0x40
 8002c76:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <HAL_MspInit+0x94>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c82:	2200      	movs	r2, #0
 8002c84:	210f      	movs	r1, #15
 8002c86:	f06f 0001 	mvn.w	r0, #1
 8002c8a:	f001 fde1 	bl	8004850 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2105      	movs	r1, #5
 8002c92:	2001      	movs	r0, #1
 8002c94:	f001 fddc 	bl	8004850 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8002c98:	2001      	movs	r0, #1
 8002c9a:	f001 fe05 	bl	80048a8 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2105      	movs	r1, #5
 8002ca2:	2004      	movs	r0, #4
 8002ca4:	f001 fdd4 	bl	8004850 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002ca8:	2004      	movs	r0, #4
 8002caa:	f001 fdfd 	bl	80048a8 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2105      	movs	r1, #5
 8002cb2:	2005      	movs	r0, #5
 8002cb4:	f001 fdcc 	bl	8004850 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002cb8:	2005      	movs	r0, #5
 8002cba:	f001 fdf5 	bl	80048a8 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2105      	movs	r1, #5
 8002cc2:	2051      	movs	r0, #81	; 0x51
 8002cc4:	f001 fdc4 	bl	8004850 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002cc8:	2051      	movs	r0, #81	; 0x51
 8002cca:	f001 fded 	bl	80048a8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800

08002cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08c      	sub	sp, #48	; 0x30
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002cec:	2300      	movs	r3, #0
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	4b2e      	ldr	r3, [pc, #184]	; (8002dac <HAL_InitTick+0xd0>)
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	4a2d      	ldr	r2, [pc, #180]	; (8002dac <HAL_InitTick+0xd0>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfc:	4b2b      	ldr	r3, [pc, #172]	; (8002dac <HAL_InitTick+0xd0>)
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d08:	f107 020c 	add.w	r2, r7, #12
 8002d0c:	f107 0310 	add.w	r3, r7, #16
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f005 fd58 	bl	80087c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002d18:	f005 fd42 	bl	80087a0 <HAL_RCC_GetPCLK2Freq>
 8002d1c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d20:	4a23      	ldr	r2, [pc, #140]	; (8002db0 <HAL_InitTick+0xd4>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0c9b      	lsrs	r3, r3, #18
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002d2c:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <HAL_InitTick+0xd8>)
 8002d2e:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <HAL_InitTick+0xdc>)
 8002d30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002d32:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <HAL_InitTick+0xd8>)
 8002d34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002d3a:	4a1e      	ldr	r2, [pc, #120]	; (8002db4 <HAL_InitTick+0xd8>)
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002d40:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <HAL_InitTick+0xd8>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d46:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <HAL_InitTick+0xd8>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_InitTick+0xd8>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002d52:	4818      	ldr	r0, [pc, #96]	; (8002db4 <HAL_InitTick+0xd8>)
 8002d54:	f007 f880 	bl	8009e58 <HAL_TIM_Base_Init>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d11b      	bne.n	8002d9e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002d66:	4813      	ldr	r0, [pc, #76]	; (8002db4 <HAL_InitTick+0xd8>)
 8002d68:	f007 f948 	bl	8009ffc <HAL_TIM_Base_Start_IT>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002d72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d111      	bne.n	8002d9e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d7a:	2019      	movs	r0, #25
 8002d7c:	f001 fd94 	bl	80048a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b0f      	cmp	r3, #15
 8002d84:	d808      	bhi.n	8002d98 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002d86:	2200      	movs	r2, #0
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	2019      	movs	r0, #25
 8002d8c:	f001 fd60 	bl	8004850 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d90:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <HAL_InitTick+0xe0>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e002      	b.n	8002d9e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002d9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3730      	adds	r7, #48	; 0x30
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800
 8002db0:	431bde83 	.word	0x431bde83
 8002db4:	20000548 	.word	0x20000548
 8002db8:	40010000 	.word	0x40010000
 8002dbc:	20000008 	.word	0x20000008

08002dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <NMI_Handler+0x4>

08002dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dca:	e7fe      	b.n	8002dca <HardFault_Handler+0x4>

08002dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd0:	e7fe      	b.n	8002dd0 <MemManage_Handler+0x4>

08002dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dd6:	e7fe      	b.n	8002dd6 <BusFault_Handler+0x4>

08002dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ddc:	e7fe      	b.n	8002ddc <UsageFault_Handler+0x4>

08002dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002df0:	f004 fee0 	bl	8007bb4 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002dfc:	4802      	ldr	r0, [pc, #8]	; (8002e08 <RTC_WKUP_IRQHandler+0x10>)
 8002dfe:	f006 fc3f 	bl	8009680 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	2000040c 	.word	0x2000040c

08002e0c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002e10:	f002 fb2e 	bl	8005470 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002e2c:	4802      	ldr	r0, [pc, #8]	; (8002e38 <ADC_IRQHandler+0x10>)
 8002e2e:	f000 fe8b 	bl	8003b48 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200000ec 	.word	0x200000ec

08002e3c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002e42:	f007 f9d7 	bl	800a1f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	200008cc 	.word	0x200008cc

08002e50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e56:	f007 f9cd 	bl	800a1f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000548 	.word	0x20000548

08002e64 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002e68:	4802      	ldr	r0, [pc, #8]	; (8002e74 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002e6a:	f007 f9c3 	bl	800a1f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000980 	.word	0x20000980

08002e78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e7c:	4802      	ldr	r0, [pc, #8]	; (8002e88 <TIM2_IRQHandler+0x10>)
 8002e7e:	f007 f9b9 	bl	800a1f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	200005fc 	.word	0x200005fc

08002e8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	Timer3Counter_CenLoc_Tim3IRQFlag++;
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <TIM3_IRQHandler+0x20>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	3301      	adds	r3, #1
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <TIM3_IRQHandler+0x20>)
 8002e9a:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag(&Timer3Counter_CenLoc_Tim3IRQFlag);
 8002e9c:	4803      	ldr	r0, [pc, #12]	; (8002eac <TIM3_IRQHandler+0x20>)
 8002e9e:	f00c fae1 	bl	800f464 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ea2:	4803      	ldr	r0, [pc, #12]	; (8002eb0 <TIM3_IRQHandler+0x24>)
 8002ea4:	f007 f9a6 	bl	800a1f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ea8:	bf00      	nop
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000b03 	.word	0x20000b03
 8002eb0:	200006b0 	.word	0x200006b0

08002eb4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	SecAlm_TriggerIRQCounterForTimer4++;
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <TIM4_IRQHandler+0x20>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <TIM4_IRQHandler+0x20>)
 8002ec2:	701a      	strb	r2, [r3, #0]
	Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(&SecAlm_TriggerIRQCounterForTimer4);
 8002ec4:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <TIM4_IRQHandler+0x20>)
 8002ec6:	f00c fc43 	bl	800f750 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002eca:	4803      	ldr	r0, [pc, #12]	; (8002ed8 <TIM4_IRQHandler+0x24>)
 8002ecc:	f007 f992 	bl	800a1f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	200000d8 	.word	0x200000d8
 8002ed8:	20000764 	.word	0x20000764

08002edc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ee0:	4802      	ldr	r0, [pc, #8]	; (8002eec <I2C1_EV_IRQHandler+0x10>)
 8002ee2:	f003 f971 	bl	80061c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000388 	.word	0x20000388

08002ef0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002ef4:	4802      	ldr	r0, [pc, #8]	; (8002f00 <I2C1_ER_IRQHandler+0x10>)
 8002ef6:	f003 fad8 	bl	80064aa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000388 	.word	0x20000388

08002f04 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002f08:	4802      	ldr	r0, [pc, #8]	; (8002f14 <SPI1_IRQHandler+0x10>)
 8002f0a:	f006 fe3f 	bl	8009b8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000448 	.word	0x20000448

08002f18 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002f1c:	4802      	ldr	r0, [pc, #8]	; (8002f28 <SPI2_IRQHandler+0x10>)
 8002f1e:	f006 fe35 	bl	8009b8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	200004c8 	.word	0x200004c8

08002f2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f30:	4802      	ldr	r0, [pc, #8]	; (8002f3c <USART1_IRQHandler+0x10>)
 8002f32:	f008 f933 	bl	800b19c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000a34 	.word	0x20000a34

08002f40 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

	Timer5Counter_CenLoc_Tim5IRQFlag++;
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <TIM5_IRQHandler+0x20>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <TIM5_IRQHandler+0x20>)
 8002f4e:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag(&Timer5Counter_CenLoc_Tim5IRQFlag);
 8002f50:	4803      	ldr	r0, [pc, #12]	; (8002f60 <TIM5_IRQHandler+0x20>)
 8002f52:	f00c fa9d 	bl	800f490 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag>

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002f56:	4803      	ldr	r0, [pc, #12]	; (8002f64 <TIM5_IRQHandler+0x24>)
 8002f58:	f007 f94c 	bl	800a1f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002f5c:	bf00      	nop
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000b01 	.word	0x20000b01
 8002f64:	20000818 	.word	0x20000818

08002f68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f6c:	4802      	ldr	r0, [pc, #8]	; (8002f78 <DMA2_Stream0_IRQHandler+0x10>)
 8002f6e:	f002 f807 	bl	8004f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000150 	.word	0x20000150

08002f7c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <SystemInit+0x20>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	4a05      	ldr	r2, [pc, #20]	; (8002fac <SystemInit+0x20>)
 8002f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fb6:	f107 0308 	add.w	r3, r7, #8
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	609a      	str	r2, [r3, #8]
 8002fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc4:	463b      	mov	r3, r7
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fcc:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <MX_TIM2_Init+0x98>)
 8002fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8002fd4:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <MX_TIM2_Init+0x98>)
 8002fd6:	f242 720f 	movw	r2, #9999	; 0x270f
 8002fda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <MX_TIM2_Init+0x98>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8002fe2:	4b19      	ldr	r3, [pc, #100]	; (8003048 <MX_TIM2_Init+0x98>)
 8002fe4:	f241 3287 	movw	r2, #4999	; 0x1387
 8002fe8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <MX_TIM2_Init+0x98>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff0:	4b15      	ldr	r3, [pc, #84]	; (8003048 <MX_TIM2_Init+0x98>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ff6:	4814      	ldr	r0, [pc, #80]	; (8003048 <MX_TIM2_Init+0x98>)
 8002ff8:	f006 ff2e 	bl	8009e58 <HAL_TIM_Base_Init>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003002:	f7ff fc39 	bl	8002878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800300a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800300c:	f107 0308 	add.w	r3, r7, #8
 8003010:	4619      	mov	r1, r3
 8003012:	480d      	ldr	r0, [pc, #52]	; (8003048 <MX_TIM2_Init+0x98>)
 8003014:	f007 fa16 	bl	800a444 <HAL_TIM_ConfigClockSource>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800301e:	f7ff fc2b 	bl	8002878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003022:	2300      	movs	r3, #0
 8003024:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003026:	2300      	movs	r3, #0
 8003028:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800302a:	463b      	mov	r3, r7
 800302c:	4619      	mov	r1, r3
 800302e:	4806      	ldr	r0, [pc, #24]	; (8003048 <MX_TIM2_Init+0x98>)
 8003030:	f007 fee4 	bl	800adfc <HAL_TIMEx_MasterConfigSynchronization>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800303a:	f7ff fc1d 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800303e:	bf00      	nop
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200005fc 	.word	0x200005fc

0800304c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003052:	f107 0308 	add.w	r3, r7, #8
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003060:	463b      	mov	r3, r7
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003068:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <MX_TIM3_Init+0x94>)
 800306a:	4a1e      	ldr	r2, [pc, #120]	; (80030e4 <MX_TIM3_Init+0x98>)
 800306c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 800306e:	4b1c      	ldr	r3, [pc, #112]	; (80030e0 <MX_TIM3_Init+0x94>)
 8003070:	f242 720f 	movw	r2, #9999	; 0x270f
 8003074:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003076:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <MX_TIM3_Init+0x94>)
 8003078:	2200      	movs	r2, #0
 800307a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 800307c:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <MX_TIM3_Init+0x94>)
 800307e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003082:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003084:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <MX_TIM3_Init+0x94>)
 8003086:	2200      	movs	r2, #0
 8003088:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <MX_TIM3_Init+0x94>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003090:	4813      	ldr	r0, [pc, #76]	; (80030e0 <MX_TIM3_Init+0x94>)
 8003092:	f006 fee1 	bl	8009e58 <HAL_TIM_Base_Init>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800309c:	f7ff fbec 	bl	8002878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030a6:	f107 0308 	add.w	r3, r7, #8
 80030aa:	4619      	mov	r1, r3
 80030ac:	480c      	ldr	r0, [pc, #48]	; (80030e0 <MX_TIM3_Init+0x94>)
 80030ae:	f007 f9c9 	bl	800a444 <HAL_TIM_ConfigClockSource>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80030b8:	f7ff fbde 	bl	8002878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030bc:	2300      	movs	r3, #0
 80030be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030c4:	463b      	mov	r3, r7
 80030c6:	4619      	mov	r1, r3
 80030c8:	4805      	ldr	r0, [pc, #20]	; (80030e0 <MX_TIM3_Init+0x94>)
 80030ca:	f007 fe97 	bl	800adfc <HAL_TIMEx_MasterConfigSynchronization>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80030d4:	f7ff fbd0 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80030d8:	bf00      	nop
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	200006b0 	.word	0x200006b0
 80030e4:	40000400 	.word	0x40000400

080030e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ee:	f107 0308 	add.w	r3, r7, #8
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030fc:	463b      	mov	r3, r7
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003104:	4b1d      	ldr	r3, [pc, #116]	; (800317c <MX_TIM4_Init+0x94>)
 8003106:	4a1e      	ldr	r2, [pc, #120]	; (8003180 <MX_TIM4_Init+0x98>)
 8003108:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 800310a:	4b1c      	ldr	r3, [pc, #112]	; (800317c <MX_TIM4_Init+0x94>)
 800310c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003110:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003112:	4b1a      	ldr	r3, [pc, #104]	; (800317c <MX_TIM4_Init+0x94>)
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 8003118:	4b18      	ldr	r3, [pc, #96]	; (800317c <MX_TIM4_Init+0x94>)
 800311a:	f241 3287 	movw	r2, #4999	; 0x1387
 800311e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003120:	4b16      	ldr	r3, [pc, #88]	; (800317c <MX_TIM4_Init+0x94>)
 8003122:	2200      	movs	r2, #0
 8003124:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <MX_TIM4_Init+0x94>)
 8003128:	2200      	movs	r2, #0
 800312a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800312c:	4813      	ldr	r0, [pc, #76]	; (800317c <MX_TIM4_Init+0x94>)
 800312e:	f006 fe93 	bl	8009e58 <HAL_TIM_Base_Init>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003138:	f7ff fb9e 	bl	8002878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800313c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003140:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003142:	f107 0308 	add.w	r3, r7, #8
 8003146:	4619      	mov	r1, r3
 8003148:	480c      	ldr	r0, [pc, #48]	; (800317c <MX_TIM4_Init+0x94>)
 800314a:	f007 f97b 	bl	800a444 <HAL_TIM_ConfigClockSource>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003154:	f7ff fb90 	bl	8002878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003158:	2300      	movs	r3, #0
 800315a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003160:	463b      	mov	r3, r7
 8003162:	4619      	mov	r1, r3
 8003164:	4805      	ldr	r0, [pc, #20]	; (800317c <MX_TIM4_Init+0x94>)
 8003166:	f007 fe49 	bl	800adfc <HAL_TIMEx_MasterConfigSynchronization>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003170:	f7ff fb82 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003174:	bf00      	nop
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000764 	.word	0x20000764
 8003180:	40000800 	.word	0x40000800

08003184 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800318a:	f107 0308 	add.w	r3, r7, #8
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	605a      	str	r2, [r3, #4]
 8003194:	609a      	str	r2, [r3, #8]
 8003196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003198:	463b      	mov	r3, r7
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80031a0:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <MX_TIM5_Init+0x94>)
 80031a2:	4a1e      	ldr	r2, [pc, #120]	; (800321c <MX_TIM5_Init+0x98>)
 80031a4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000-1;
 80031a6:	4b1c      	ldr	r3, [pc, #112]	; (8003218 <MX_TIM5_Init+0x94>)
 80031a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80031ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ae:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <MX_TIM5_Init+0x94>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 80031b4:	4b18      	ldr	r3, [pc, #96]	; (8003218 <MX_TIM5_Init+0x94>)
 80031b6:	4a1a      	ldr	r2, [pc, #104]	; (8003220 <MX_TIM5_Init+0x9c>)
 80031b8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031ba:	4b17      	ldr	r3, [pc, #92]	; (8003218 <MX_TIM5_Init+0x94>)
 80031bc:	2200      	movs	r2, #0
 80031be:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031c0:	4b15      	ldr	r3, [pc, #84]	; (8003218 <MX_TIM5_Init+0x94>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80031c6:	4814      	ldr	r0, [pc, #80]	; (8003218 <MX_TIM5_Init+0x94>)
 80031c8:	f006 fe46 	bl	8009e58 <HAL_TIM_Base_Init>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80031d2:	f7ff fb51 	bl	8002878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80031dc:	f107 0308 	add.w	r3, r7, #8
 80031e0:	4619      	mov	r1, r3
 80031e2:	480d      	ldr	r0, [pc, #52]	; (8003218 <MX_TIM5_Init+0x94>)
 80031e4:	f007 f92e 	bl	800a444 <HAL_TIM_ConfigClockSource>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80031ee:	f7ff fb43 	bl	8002878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031f2:	2300      	movs	r3, #0
 80031f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80031fa:	463b      	mov	r3, r7
 80031fc:	4619      	mov	r1, r3
 80031fe:	4806      	ldr	r0, [pc, #24]	; (8003218 <MX_TIM5_Init+0x94>)
 8003200:	f007 fdfc 	bl	800adfc <HAL_TIMEx_MasterConfigSynchronization>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800320a:	f7ff fb35 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800320e:	bf00      	nop
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000818 	.word	0x20000818
 800321c:	40000c00 	.word	0x40000c00
 8003220:	0001869f 	.word	0x0001869f

08003224 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800322a:	463b      	mov	r3, r7
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003236:	4b16      	ldr	r3, [pc, #88]	; (8003290 <MX_TIM9_Init+0x6c>)
 8003238:	4a16      	ldr	r2, [pc, #88]	; (8003294 <MX_TIM9_Init+0x70>)
 800323a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 800323c:	4b14      	ldr	r3, [pc, #80]	; (8003290 <MX_TIM9_Init+0x6c>)
 800323e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003242:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003244:	4b12      	ldr	r3, [pc, #72]	; (8003290 <MX_TIM9_Init+0x6c>)
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 800324a:	4b11      	ldr	r3, [pc, #68]	; (8003290 <MX_TIM9_Init+0x6c>)
 800324c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003250:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003252:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <MX_TIM9_Init+0x6c>)
 8003254:	2200      	movs	r2, #0
 8003256:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003258:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <MX_TIM9_Init+0x6c>)
 800325a:	2200      	movs	r2, #0
 800325c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800325e:	480c      	ldr	r0, [pc, #48]	; (8003290 <MX_TIM9_Init+0x6c>)
 8003260:	f006 fdfa 	bl	8009e58 <HAL_TIM_Base_Init>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800326a:	f7ff fb05 	bl	8002878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800326e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003272:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003274:	463b      	mov	r3, r7
 8003276:	4619      	mov	r1, r3
 8003278:	4805      	ldr	r0, [pc, #20]	; (8003290 <MX_TIM9_Init+0x6c>)
 800327a:	f007 f8e3 	bl	800a444 <HAL_TIM_ConfigClockSource>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8003284:	f7ff faf8 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	200008cc 	.word	0x200008cc
 8003294:	40014000 	.word	0x40014000

08003298 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <MX_TIM11_Init+0x40>)
 800329e:	4a0f      	ldr	r2, [pc, #60]	; (80032dc <MX_TIM11_Init+0x44>)
 80032a0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 80032a2:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <MX_TIM11_Init+0x40>)
 80032a4:	f242 720f 	movw	r2, #9999	; 0x270f
 80032a8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <MX_TIM11_Init+0x40>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 5000-1;
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <MX_TIM11_Init+0x40>)
 80032b2:	f241 3287 	movw	r2, #4999	; 0x1387
 80032b6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032b8:	4b07      	ldr	r3, [pc, #28]	; (80032d8 <MX_TIM11_Init+0x40>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <MX_TIM11_Init+0x40>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80032c4:	4804      	ldr	r0, [pc, #16]	; (80032d8 <MX_TIM11_Init+0x40>)
 80032c6:	f006 fdc7 	bl	8009e58 <HAL_TIM_Base_Init>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80032d0:	f7ff fad2 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80032d4:	bf00      	nop
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20000980 	.word	0x20000980
 80032dc:	40014800 	.word	0x40014800

080032e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f0:	d116      	bne.n	8003320 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	4b52      	ldr	r3, [pc, #328]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	4a51      	ldr	r2, [pc, #324]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6413      	str	r3, [r2, #64]	; 0x40
 8003302:	4b4f      	ldr	r3, [pc, #316]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	61fb      	str	r3, [r7, #28]
 800330c:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800330e:	2200      	movs	r2, #0
 8003310:	2105      	movs	r1, #5
 8003312:	201c      	movs	r0, #28
 8003314:	f001 fa9c 	bl	8004850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003318:	201c      	movs	r0, #28
 800331a:	f001 fac5 	bl	80048a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800331e:	e08a      	b.n	8003436 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM3)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a47      	ldr	r2, [pc, #284]	; (8003444 <HAL_TIM_Base_MspInit+0x164>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d116      	bne.n	8003358 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	61bb      	str	r3, [r7, #24]
 800332e:	4b44      	ldr	r3, [pc, #272]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a43      	ldr	r2, [pc, #268]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 8003334:	f043 0302 	orr.w	r3, r3, #2
 8003338:	6413      	str	r3, [r2, #64]	; 0x40
 800333a:	4b41      	ldr	r3, [pc, #260]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003346:	2200      	movs	r2, #0
 8003348:	2105      	movs	r1, #5
 800334a:	201d      	movs	r0, #29
 800334c:	f001 fa80 	bl	8004850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003350:	201d      	movs	r0, #29
 8003352:	f001 faa9 	bl	80048a8 <HAL_NVIC_EnableIRQ>
}
 8003356:	e06e      	b.n	8003436 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM4)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a3a      	ldr	r2, [pc, #232]	; (8003448 <HAL_TIM_Base_MspInit+0x168>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d116      	bne.n	8003390 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	4b36      	ldr	r3, [pc, #216]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a35      	ldr	r2, [pc, #212]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 800336c:	f043 0304 	orr.w	r3, r3, #4
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b33      	ldr	r3, [pc, #204]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800337e:	2200      	movs	r2, #0
 8003380:	2105      	movs	r1, #5
 8003382:	201e      	movs	r0, #30
 8003384:	f001 fa64 	bl	8004850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003388:	201e      	movs	r0, #30
 800338a:	f001 fa8d 	bl	80048a8 <HAL_NVIC_EnableIRQ>
}
 800338e:	e052      	b.n	8003436 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM5)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a2d      	ldr	r2, [pc, #180]	; (800344c <HAL_TIM_Base_MspInit+0x16c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d116      	bne.n	80033c8 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	4b28      	ldr	r3, [pc, #160]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	4a27      	ldr	r2, [pc, #156]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 80033a4:	f043 0308 	orr.w	r3, r3, #8
 80033a8:	6413      	str	r3, [r2, #64]	; 0x40
 80033aa:	4b25      	ldr	r3, [pc, #148]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80033b6:	2200      	movs	r2, #0
 80033b8:	2105      	movs	r1, #5
 80033ba:	2032      	movs	r0, #50	; 0x32
 80033bc:	f001 fa48 	bl	8004850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80033c0:	2032      	movs	r0, #50	; 0x32
 80033c2:	f001 fa71 	bl	80048a8 <HAL_NVIC_EnableIRQ>
}
 80033c6:	e036      	b.n	8003436 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM9)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a20      	ldr	r2, [pc, #128]	; (8003450 <HAL_TIM_Base_MspInit+0x170>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d116      	bne.n	8003400 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	4a19      	ldr	r2, [pc, #100]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6453      	str	r3, [r2, #68]	; 0x44
 80033e2:	4b17      	ldr	r3, [pc, #92]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80033ee:	2200      	movs	r2, #0
 80033f0:	2105      	movs	r1, #5
 80033f2:	2018      	movs	r0, #24
 80033f4:	f001 fa2c 	bl	8004850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80033f8:	2018      	movs	r0, #24
 80033fa:	f001 fa55 	bl	80048a8 <HAL_NVIC_EnableIRQ>
}
 80033fe:	e01a      	b.n	8003436 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM11)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a13      	ldr	r2, [pc, #76]	; (8003454 <HAL_TIM_Base_MspInit+0x174>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d115      	bne.n	8003436 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 8003414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003418:	6453      	str	r3, [r2, #68]	; 0x44
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <HAL_TIM_Base_MspInit+0x160>)
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	2105      	movs	r1, #5
 800342a:	201a      	movs	r0, #26
 800342c:	f001 fa10 	bl	8004850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003430:	201a      	movs	r0, #26
 8003432:	f001 fa39 	bl	80048a8 <HAL_NVIC_EnableIRQ>
}
 8003436:	bf00      	nop
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
 8003444:	40000400 	.word	0x40000400
 8003448:	40000800 	.word	0x40000800
 800344c:	40000c00 	.word	0x40000c00
 8003450:	40014000 	.word	0x40014000
 8003454:	40014800 	.word	0x40014800

08003458 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <MX_USART1_UART_Init+0x4c>)
 800345e:	4a12      	ldr	r2, [pc, #72]	; (80034a8 <MX_USART1_UART_Init+0x50>)
 8003460:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003462:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <MX_USART1_UART_Init+0x4c>)
 8003464:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003468:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <MX_USART1_UART_Init+0x4c>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <MX_USART1_UART_Init+0x4c>)
 8003472:	2200      	movs	r2, #0
 8003474:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003476:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <MX_USART1_UART_Init+0x4c>)
 8003478:	2200      	movs	r2, #0
 800347a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800347c:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <MX_USART1_UART_Init+0x4c>)
 800347e:	220c      	movs	r2, #12
 8003480:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <MX_USART1_UART_Init+0x4c>)
 8003484:	2200      	movs	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <MX_USART1_UART_Init+0x4c>)
 800348a:	2200      	movs	r2, #0
 800348c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800348e:	4805      	ldr	r0, [pc, #20]	; (80034a4 <MX_USART1_UART_Init+0x4c>)
 8003490:	f007 fd90 	bl	800afb4 <HAL_UART_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800349a:	f7ff f9ed 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000a34 	.word	0x20000a34
 80034a8:	40011000 	.word	0x40011000

080034ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08a      	sub	sp, #40	; 0x28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b4:	f107 0314 	add.w	r3, r7, #20
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1d      	ldr	r2, [pc, #116]	; (8003540 <HAL_UART_MspInit+0x94>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d133      	bne.n	8003536 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <HAL_UART_MspInit+0x98>)
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	4a1b      	ldr	r2, [pc, #108]	; (8003544 <HAL_UART_MspInit+0x98>)
 80034d8:	f043 0310 	orr.w	r3, r3, #16
 80034dc:	6453      	str	r3, [r2, #68]	; 0x44
 80034de:	4b19      	ldr	r3, [pc, #100]	; (8003544 <HAL_UART_MspInit+0x98>)
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <HAL_UART_MspInit+0x98>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	4a14      	ldr	r2, [pc, #80]	; (8003544 <HAL_UART_MspInit+0x98>)
 80034f4:	f043 0302 	orr.w	r3, r3, #2
 80034f8:	6313      	str	r3, [r2, #48]	; 0x30
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_UART_MspInit+0x98>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB3     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8003506:	2348      	movs	r3, #72	; 0x48
 8003508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350a:	2302      	movs	r3, #2
 800350c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003512:	2303      	movs	r3, #3
 8003514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003516:	2307      	movs	r3, #7
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351a:	f107 0314 	add.w	r3, r7, #20
 800351e:	4619      	mov	r1, r3
 8003520:	4809      	ldr	r0, [pc, #36]	; (8003548 <HAL_UART_MspInit+0x9c>)
 8003522:	f002 f97b 	bl	800581c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003526:	2200      	movs	r2, #0
 8003528:	2105      	movs	r1, #5
 800352a:	2025      	movs	r0, #37	; 0x25
 800352c:	f001 f990 	bl	8004850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003530:	2025      	movs	r0, #37	; 0x25
 8003532:	f001 f9b9 	bl	80048a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003536:	bf00      	nop
 8003538:	3728      	adds	r7, #40	; 0x28
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40011000 	.word	0x40011000
 8003544:	40023800 	.word	0x40023800
 8003548:	40020400 	.word	0x40020400

0800354c <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a1d      	ldr	r2, [pc, #116]	; (80035d0 <HAL_UART_RxCpltCallback+0x84>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d133      	bne.n	80035c6 <HAL_UART_RxCpltCallback+0x7a>
	{

		if(Btc_RxData == '\n')
 800355e:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <HAL_UART_RxCpltCallback+0x88>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b0a      	cmp	r3, #10
 8003564:	d117      	bne.n	8003596 <HAL_UART_RxCpltCallback+0x4a>
		{

			if(Btc_RxCount <= 3)
 8003566:	4b1c      	ldr	r3, [pc, #112]	; (80035d8 <HAL_UART_RxCpltCallback+0x8c>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b03      	cmp	r3, #3
 800356c:	d80f      	bhi.n	800358e <HAL_UART_RxCpltCallback+0x42>
			{

				Btc_DataBuffer[Btc_RxCount] = '\0';
 800356e:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <HAL_UART_RxCpltCallback+0x8c>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_UART_RxCpltCallback+0x90>)
 8003576:	2100      	movs	r1, #0
 8003578:	5499      	strb	r1, [r3, r2]
				Btc_RxData = atoi((char*)Btc_DataBuffer);
 800357a:	4818      	ldr	r0, [pc, #96]	; (80035dc <HAL_UART_RxCpltCallback+0x90>)
 800357c:	f00c fa46 	bl	800fa0c <atoi>
 8003580:	4603      	mov	r3, r0
 8003582:	b2da      	uxtb	r2, r3
 8003584:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <HAL_UART_RxCpltCallback+0x88>)
 8003586:	701a      	strb	r2, [r3, #0]
				Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&Btc_RxData);
 8003588:	4812      	ldr	r0, [pc, #72]	; (80035d4 <HAL_UART_RxCpltCallback+0x88>)
 800358a:	f00b ff13 	bl	800f3b4 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>

				/* do nothing */

			}

			Btc_RxCount = 0;
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_UART_RxCpltCallback+0x8c>)
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	e012      	b.n	80035bc <HAL_UART_RxCpltCallback+0x70>

		}
		else if(Btc_RxCount < 3)
 8003596:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <HAL_UART_RxCpltCallback+0x8c>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d80b      	bhi.n	80035b6 <HAL_UART_RxCpltCallback+0x6a>
		{

			Btc_DataBuffer[Btc_RxCount++] = Btc_RxData;
 800359e:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <HAL_UART_RxCpltCallback+0x8c>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	b2d1      	uxtb	r1, r2
 80035a6:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <HAL_UART_RxCpltCallback+0x8c>)
 80035a8:	7011      	strb	r1, [r2, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_UART_RxCpltCallback+0x88>)
 80035ae:	7819      	ldrb	r1, [r3, #0]
 80035b0:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <HAL_UART_RxCpltCallback+0x90>)
 80035b2:	5499      	strb	r1, [r3, r2]
 80035b4:	e002      	b.n	80035bc <HAL_UART_RxCpltCallback+0x70>

		}
		else
		{

			Btc_RxCount = 0;
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <HAL_UART_RxCpltCallback+0x8c>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]

		}

		Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(&huart1, &Btc_RxData, 1);
 80035bc:	2201      	movs	r2, #1
 80035be:	4905      	ldr	r1, [pc, #20]	; (80035d4 <HAL_UART_RxCpltCallback+0x88>)
 80035c0:	4807      	ldr	r0, [pc, #28]	; (80035e0 <HAL_UART_RxCpltCallback+0x94>)
 80035c2:	f00c f90f 	bl	800f7e4 <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>

		/* do nothing */

	}

}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40011000 	.word	0x40011000
 80035d4:	20000098 	.word	0x20000098
 80035d8:	20000099 	.word	0x20000099
 80035dc:	20000094 	.word	0x20000094
 80035e0:	20000a34 	.word	0x20000a34

080035e4 <MX_WWDG_Init>:

WWDG_HandleTypeDef hwwdg;

/* WWDG init function */
void MX_WWDG_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <MX_WWDG_Init+0x38>)
 80035ea:	4a0d      	ldr	r2, [pc, #52]	; (8003620 <MX_WWDG_Init+0x3c>)
 80035ec:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 80035ee:	4b0b      	ldr	r3, [pc, #44]	; (800361c <MX_WWDG_Init+0x38>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 126;
 80035f4:	4b09      	ldr	r3, [pc, #36]	; (800361c <MX_WWDG_Init+0x38>)
 80035f6:	227e      	movs	r2, #126	; 0x7e
 80035f8:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 127;
 80035fa:	4b08      	ldr	r3, [pc, #32]	; (800361c <MX_WWDG_Init+0x38>)
 80035fc:	227f      	movs	r2, #127	; 0x7f
 80035fe:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_ENABLE;
 8003600:	4b06      	ldr	r3, [pc, #24]	; (800361c <MX_WWDG_Init+0x38>)
 8003602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003606:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8003608:	4804      	ldr	r0, [pc, #16]	; (800361c <MX_WWDG_Init+0x38>)
 800360a:	f008 fd79 	bl	800c100 <HAL_WWDG_Init>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 8003614:	f7ff f930 	bl	8002878 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8003618:	bf00      	nop
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20000aa8 	.word	0x20000aa8
 8003620:	40002c00 	.word	0x40002c00

08003624 <HAL_WWDG_MspInit>:

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* wwdgHandle)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

  if(wwdgHandle->Instance==WWDG)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0b      	ldr	r2, [pc, #44]	; (8003660 <HAL_WWDG_MspInit+0x3c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d10d      	bne.n	8003652 <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* WWDG clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <HAL_WWDG_MspInit+0x40>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	4a09      	ldr	r2, [pc, #36]	; (8003664 <HAL_WWDG_MspInit+0x40>)
 8003640:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003644:	6413      	str	r3, [r2, #64]	; 0x40
 8003646:	4b07      	ldr	r3, [pc, #28]	; (8003664 <HAL_WWDG_MspInit+0x40>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }
}
 8003652:	bf00      	nop
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40002c00 	.word	0x40002c00
 8003664:	40023800 	.word	0x40023800

08003668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003668:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800366c:	480d      	ldr	r0, [pc, #52]	; (80036a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800366e:	490e      	ldr	r1, [pc, #56]	; (80036a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003670:	4a0e      	ldr	r2, [pc, #56]	; (80036ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003674:	e002      	b.n	800367c <LoopCopyDataInit>

08003676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800367a:	3304      	adds	r3, #4

0800367c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800367c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800367e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003680:	d3f9      	bcc.n	8003676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003682:	4a0b      	ldr	r2, [pc, #44]	; (80036b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003684:	4c0b      	ldr	r4, [pc, #44]	; (80036b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003688:	e001      	b.n	800368e <LoopFillZerobss>

0800368a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800368a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800368c:	3204      	adds	r2, #4

0800368e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800368e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003690:	d3fb      	bcc.n	800368a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003692:	f7ff fc7b 	bl	8002f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003696:	f00c f9c3 	bl	800fa20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800369a:	f7fe fffd 	bl	8002698 <main>
  bx  lr    
 800369e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80036a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036a8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80036ac:	08011a3c 	.word	0x08011a3c
  ldr r2, =_sbss
 80036b0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80036b4:	20005718 	.word	0x20005718

080036b8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036b8:	e7fe      	b.n	80036b8 <DMA1_Stream0_IRQHandler>

080036ba <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d104      	bne.n	80036d2 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80036c8:	b672      	cpsid	i
}
 80036ca:	bf00      	nop
 80036cc:	f7ff f8d4 	bl	8002878 <Error_Handler>
 80036d0:	e7fe      	b.n	80036d0 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	7a1b      	ldrb	r3, [r3, #8]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d904      	bls.n	80036e4 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80036da:	b672      	cpsid	i
}
 80036dc:	bf00      	nop
 80036de:	f7ff f8cb 	bl	8002878 <Error_Handler>
 80036e2:	e7fe      	b.n	80036e2 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	7a1b      	ldrb	r3, [r3, #8]
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	b2d1      	uxtb	r1, r2
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	7211      	strb	r1, [r2, #8]
 80036f0:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036f2:	f3ef 8211 	mrs	r2, BASEPRI
 80036f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	60fa      	str	r2, [r7, #12]
 8003708:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d104      	bne.n	8003732 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003728:	b672      	cpsid	i
}
 800372a:	bf00      	nop
 800372c:	f7ff f8a4 	bl	8002878 <Error_Handler>
 8003730:	e7fe      	b.n	8003730 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	7a1b      	ldrb	r3, [r3, #8]
 8003736:	3b01      	subs	r3, #1
 8003738:	b2da      	uxtb	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	7a1b      	ldrb	r3, [r3, #8]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d904      	bls.n	8003750 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8003746:	b672      	cpsid	i
}
 8003748:	bf00      	nop
 800374a:	f7ff f895 	bl	8002878 <Error_Handler>
 800374e:	e7fe      	b.n	800374e <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	7a1b      	ldrb	r3, [r3, #8]
 8003754:	461a      	mov	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800375c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003764:	bf00      	nop
}
 8003766:	bf00      	nop
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d104      	bne.n	8003786 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800377c:	b672      	cpsid	i
}
 800377e:	bf00      	nop
 8003780:	f7ff f87a 	bl	8002878 <Error_Handler>
 8003784:	e7fe      	b.n	8003784 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff ff96 	bl	80036ba <stm32_lock_acquire>
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d104      	bne.n	80037ae <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80037a4:	b672      	cpsid	i
}
 80037a6:	bf00      	nop
 80037a8:	f7ff f866 	bl	8002878 <Error_Handler>
 80037ac:	e7fe      	b.n	80037ac <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ffb2 	bl	800371a <stm32_lock_release>
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037c4:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <HAL_Init+0x40>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a0d      	ldr	r2, [pc, #52]	; (8003800 <HAL_Init+0x40>)
 80037ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_Init+0x40>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <HAL_Init+0x40>)
 80037d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037dc:	4b08      	ldr	r3, [pc, #32]	; (8003800 <HAL_Init+0x40>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a07      	ldr	r2, [pc, #28]	; (8003800 <HAL_Init+0x40>)
 80037e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037e8:	2003      	movs	r0, #3
 80037ea:	f001 f811 	bl	8004810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ee:	2000      	movs	r0, #0
 80037f0:	f7ff fa74 	bl	8002cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037f4:	f7ff fa26 	bl	8002c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023c00 	.word	0x40023c00

08003804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_IncTick+0x20>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_IncTick+0x24>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4413      	add	r3, r2
 8003814:	4a04      	ldr	r2, [pc, #16]	; (8003828 <HAL_IncTick+0x24>)
 8003816:	6013      	str	r3, [r2, #0]
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	2000000c 	.word	0x2000000c
 8003828:	20000ad0 	.word	0x20000ad0

0800382c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return uwTick;
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <HAL_GetTick+0x14>)
 8003832:	681b      	ldr	r3, [r3, #0]
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000ad0 	.word	0x20000ad0

08003844 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e16f      	b.n	8003b3a <HAL_ADC_Init+0x2f6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a93      	ldr	r2, [pc, #588]	; (8003aac <HAL_ADC_Init+0x268>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d004      	beq.n	800386e <HAL_ADC_Init+0x2a>
 8003864:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003868:	4891      	ldr	r0, [pc, #580]	; (8003ab0 <HAL_ADC_Init+0x26c>)
 800386a:	f7ff f80a 	bl	8002882 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d013      	beq.n	800389e <HAL_ADC_Init+0x5a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387e:	d00e      	beq.n	800389e <HAL_ADC_Init+0x5a>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003888:	d009      	beq.n	800389e <HAL_ADC_Init+0x5a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003892:	d004      	beq.n	800389e <HAL_ADC_Init+0x5a>
 8003894:	f240 1143 	movw	r1, #323	; 0x143
 8003898:	4885      	ldr	r0, [pc, #532]	; (8003ab0 <HAL_ADC_Init+0x26c>)
 800389a:	f7fe fff2 	bl	8002882 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d013      	beq.n	80038ce <HAL_ADC_Init+0x8a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ae:	d00e      	beq.n	80038ce <HAL_ADC_Init+0x8a>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038b8:	d009      	beq.n	80038ce <HAL_ADC_Init+0x8a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038c2:	d004      	beq.n	80038ce <HAL_ADC_Init+0x8a>
 80038c4:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80038c8:	4879      	ldr	r0, [pc, #484]	; (8003ab0 <HAL_ADC_Init+0x26c>)
 80038ca:	f7fe ffda 	bl	8002882 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_ADC_Init+0xa4>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d004      	beq.n	80038e8 <HAL_ADC_Init+0xa4>
 80038de:	f240 1145 	movw	r1, #325	; 0x145
 80038e2:	4873      	ldr	r0, [pc, #460]	; (8003ab0 <HAL_ADC_Init+0x26c>)
 80038e4:	f7fe ffcd 	bl	8002882 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	7e1b      	ldrb	r3, [r3, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_ADC_Init+0xbe>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	7e1b      	ldrb	r3, [r3, #24]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d004      	beq.n	8003902 <HAL_ADC_Init+0xbe>
 80038f8:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80038fc:	486c      	ldr	r0, [pc, #432]	; (8003ab0 <HAL_ADC_Init+0x26c>)
 80038fe:	f7fe ffc0 	bl	8002882 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	2b00      	cmp	r3, #0
 8003908:	d054      	beq.n	80039b4 <HAL_ADC_Init+0x170>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003912:	d04f      	beq.n	80039b4 <HAL_ADC_Init+0x170>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800391c:	d04a      	beq.n	80039b4 <HAL_ADC_Init+0x170>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003926:	d045      	beq.n	80039b4 <HAL_ADC_Init+0x170>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003930:	d040      	beq.n	80039b4 <HAL_ADC_Init+0x170>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003936:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800393a:	d03b      	beq.n	80039b4 <HAL_ADC_Init+0x170>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003944:	d036      	beq.n	80039b4 <HAL_ADC_Init+0x170>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800394e:	d031      	beq.n	80039b4 <HAL_ADC_Init+0x170>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003958:	d02c      	beq.n	80039b4 <HAL_ADC_Init+0x170>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8003962:	d027      	beq.n	80039b4 <HAL_ADC_Init+0x170>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800396c:	d022      	beq.n	80039b4 <HAL_ADC_Init+0x170>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8003976:	d01d      	beq.n	80039b4 <HAL_ADC_Init+0x170>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003980:	d018      	beq.n	80039b4 <HAL_ADC_Init+0x170>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003986:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 800398a:	d013      	beq.n	80039b4 <HAL_ADC_Init+0x170>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003994:	d00e      	beq.n	80039b4 <HAL_ADC_Init+0x170>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800399e:	d009      	beq.n	80039b4 <HAL_ADC_Init+0x170>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	4a43      	ldr	r2, [pc, #268]	; (8003ab4 <HAL_ADC_Init+0x270>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d004      	beq.n	80039b4 <HAL_ADC_Init+0x170>
 80039aa:	f240 1147 	movw	r1, #327	; 0x147
 80039ae:	4840      	ldr	r0, [pc, #256]	; (8003ab0 <HAL_ADC_Init+0x26c>)
 80039b0:	f7fe ff67 	bl	8002882 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d009      	beq.n	80039d0 <HAL_ADC_Init+0x18c>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039c4:	d004      	beq.n	80039d0 <HAL_ADC_Init+0x18c>
 80039c6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80039ca:	4839      	ldr	r0, [pc, #228]	; (8003ab0 <HAL_ADC_Init+0x26c>)
 80039cc:	f7fe ff59 	bl	8002882 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_ADC_Init+0x19c>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	2b10      	cmp	r3, #16
 80039de:	d904      	bls.n	80039ea <HAL_ADC_Init+0x1a6>
 80039e0:	f240 1149 	movw	r1, #329	; 0x149
 80039e4:	4832      	ldr	r0, [pc, #200]	; (8003ab0 <HAL_ADC_Init+0x26c>)
 80039e6:	f7fe ff4c 	bl	8002882 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d009      	beq.n	8003a08 <HAL_ADC_Init+0x1c4>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d004      	beq.n	8003a08 <HAL_ADC_Init+0x1c4>
 80039fe:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8003a02:	482b      	ldr	r0, [pc, #172]	; (8003ab0 <HAL_ADC_Init+0x26c>)
 8003a04:	f7fe ff3d 	bl	8002882 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d00c      	beq.n	8003a2a <HAL_ADC_Init+0x1e6>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_ADC_Init+0x1e6>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d004      	beq.n	8003a2a <HAL_ADC_Init+0x1e6>
 8003a20:	f240 114b 	movw	r1, #331	; 0x14b
 8003a24:	4822      	ldr	r0, [pc, #136]	; (8003ab0 <HAL_ADC_Init+0x26c>)
 8003a26:	f7fe ff2c 	bl	8002882 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d009      	beq.n	8003a48 <HAL_ADC_Init+0x204>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d004      	beq.n	8003a48 <HAL_ADC_Init+0x204>
 8003a3e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8003a42:	481b      	ldr	r0, [pc, #108]	; (8003ab0 <HAL_ADC_Init+0x26c>)
 8003a44:	f7fe ff1d 	bl	8002882 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	4a19      	ldr	r2, [pc, #100]	; (8003ab4 <HAL_ADC_Init+0x270>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d017      	beq.n	8003a82 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d013      	beq.n	8003a82 <HAL_ADC_Init+0x23e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a62:	d00e      	beq.n	8003a82 <HAL_ADC_Init+0x23e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a6c:	d009      	beq.n	8003a82 <HAL_ADC_Init+0x23e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a76:	d004      	beq.n	8003a82 <HAL_ADC_Init+0x23e>
 8003a78:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003a7c:	480c      	ldr	r0, [pc, #48]	; (8003ab0 <HAL_ADC_Init+0x26c>)
 8003a7e:	f7fe ff00 	bl	8002882 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d131      	bne.n	8003aee <HAL_ADC_Init+0x2aa>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <HAL_ADC_Init+0x274>)
 8003a8e:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <HAL_ADC_Init+0x278>)
 8003a94:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a09      	ldr	r2, [pc, #36]	; (8003ac0 <HAL_ADC_Init+0x27c>)
 8003a9a:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a09      	ldr	r2, [pc, #36]	; (8003ac4 <HAL_ADC_Init+0x280>)
 8003aa0:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a08      	ldr	r2, [pc, #32]	; (8003ac8 <HAL_ADC_Init+0x284>)
 8003aa6:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	e00f      	b.n	8003acc <HAL_ADC_Init+0x288>
 8003aac:	40012000 	.word	0x40012000
 8003ab0:	08010908 	.word	0x08010908
 8003ab4:	0f000001 	.word	0x0f000001
 8003ab8:	08003ffd 	.word	0x08003ffd
 8003abc:	08004011 	.word	0x08004011
 8003ac0:	08004025 	.word	0x08004025
 8003ac4:	08004039 	.word	0x08004039
 8003ac8:	08004659 	.word	0x08004659
 8003acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d102      	bne.n	8003ad8 <HAL_ADC_Init+0x294>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a1b      	ldr	r2, [pc, #108]	; (8003b44 <HAL_ADC_Init+0x300>)
 8003ad6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d118      	bne.n	8003b2c <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b02:	f023 0302 	bic.w	r3, r3, #2
 8003b06:	f043 0202 	orr.w	r2, r3, #2
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fc12 	bl	8004338 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f023 0303 	bic.w	r3, r3, #3
 8003b22:	f043 0201 	orr.w	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40
 8003b2a:	e001      	b.n	8003b30 <HAL_ADC_Init+0x2ec>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	080016a1 	.word	0x080016a1

08003b48 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	2300      	movs	r3, #0
 8003b56:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	7e1b      	ldrb	r3, [r3, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_ADC_IRQHandler+0x3a>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	7e1b      	ldrb	r3, [r3, #24]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d004      	beq.n	8003b82 <HAL_ADC_IRQHandler+0x3a>
 8003b78:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8003b7c:	4892      	ldr	r0, [pc, #584]	; (8003dc8 <HAL_ADC_IRQHandler+0x280>)
 8003b7e:	f7fe fe80 	bl	8002882 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_ADC_IRQHandler+0x4a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	2b10      	cmp	r3, #16
 8003b90:	d904      	bls.n	8003b9c <HAL_ADC_IRQHandler+0x54>
 8003b92:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 8003b96:	488c      	ldr	r0, [pc, #560]	; (8003dc8 <HAL_ADC_IRQHandler+0x280>)
 8003b98:	f7fe fe73 	bl	8002882 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d00c      	beq.n	8003bbe <HAL_ADC_IRQHandler+0x76>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_ADC_IRQHandler+0x76>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d004      	beq.n	8003bbe <HAL_ADC_IRQHandler+0x76>
 8003bb4:	f240 41b9 	movw	r1, #1209	; 0x4b9
 8003bb8:	4883      	ldr	r0, [pc, #524]	; (8003dc8 <HAL_ADC_IRQHandler+0x280>)
 8003bba:	f7fe fe62 	bl	8002882 <assert_failed>
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d04a      	beq.n	8003c6a <HAL_ADC_IRQHandler+0x122>
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d047      	beq.n	8003c6a <HAL_ADC_IRQHandler+0x122>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d105      	bne.n	8003bf2 <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d12b      	bne.n	8003c58 <HAL_ADC_IRQHandler+0x110>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d127      	bne.n	8003c58 <HAL_ADC_IRQHandler+0x110>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d006      	beq.n	8003c24 <HAL_ADC_IRQHandler+0xdc>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d119      	bne.n	8003c58 <HAL_ADC_IRQHandler+0x110>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0220 	bic.w	r2, r2, #32
 8003c32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d105      	bne.n	8003c58 <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	f043 0201 	orr.w	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0212 	mvn.w	r2, #18
 8003c68:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c78:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d058      	beq.n	8003d32 <HAL_ADC_IRQHandler+0x1ea>
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d055      	beq.n	8003d32 <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d105      	bne.n	8003c9e <HAL_ADC_IRQHandler+0x156>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d139      	bne.n	8003d20 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d006      	beq.n	8003cc8 <HAL_ADC_IRQHandler+0x180>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d12b      	bne.n	8003d20 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d124      	bne.n	8003d20 <HAL_ADC_IRQHandler+0x1d8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d11d      	bne.n	8003d20 <HAL_ADC_IRQHandler+0x1d8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d119      	bne.n	8003d20 <HAL_ADC_IRQHandler+0x1d8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cfa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d105      	bne.n	8003d20 <HAL_ADC_IRQHandler+0x1d8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	f043 0201 	orr.w	r2, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 020c 	mvn.w	r2, #12
 8003d30:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d40:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d018      	beq.n	8003d7a <HAL_ADC_IRQHandler+0x232>
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d015      	beq.n	8003d7a <HAL_ADC_IRQHandler+0x232>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d10e      	bne.n	8003d7a <HAL_ADC_IRQHandler+0x232>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0201 	mvn.w	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d88:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d016      	beq.n	8003dbe <HAL_ADC_IRQHandler+0x276>
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d013      	beq.n	8003dbe <HAL_ADC_IRQHandler+0x276>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	f043 0202 	orr.w	r2, r3, #2
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f06f 0220 	mvn.w	r2, #32
 8003daa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0220 	mvn.w	r2, #32
 8003dbc:	601a      	str	r2, [r3, #0]
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	08010908 	.word	0x08010908

08003dcc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	7e1b      	ldrb	r3, [r3, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_ADC_Start_DMA+0x2a>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	7e1b      	ldrb	r3, [r3, #24]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d004      	beq.n	8003df6 <HAL_ADC_Start_DMA+0x2a>
 8003dec:	f240 515a 	movw	r1, #1370	; 0x55a
 8003df0:	487a      	ldr	r0, [pc, #488]	; (8003fdc <HAL_ADC_Start_DMA+0x210>)
 8003df2:	f7fe fd46 	bl	8002882 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d013      	beq.n	8003e26 <HAL_ADC_Start_DMA+0x5a>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e06:	d00e      	beq.n	8003e26 <HAL_ADC_Start_DMA+0x5a>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e10:	d009      	beq.n	8003e26 <HAL_ADC_Start_DMA+0x5a>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e1a:	d004      	beq.n	8003e26 <HAL_ADC_Start_DMA+0x5a>
 8003e1c:	f240 515b 	movw	r1, #1371	; 0x55b
 8003e20:	486e      	ldr	r0, [pc, #440]	; (8003fdc <HAL_ADC_Start_DMA+0x210>)
 8003e22:	f7fe fd2e 	bl	8002882 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_ADC_Start_DMA+0x68>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e0ce      	b.n	8003fd2 <HAL_ADC_Start_DMA+0x206>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d018      	beq.n	8003e7c <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0201 	orr.w	r2, r2, #1
 8003e58:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e5a:	4b61      	ldr	r3, [pc, #388]	; (8003fe0 <HAL_ADC_Start_DMA+0x214>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a61      	ldr	r2, [pc, #388]	; (8003fe4 <HAL_ADC_Start_DMA+0x218>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	0c9a      	lsrs	r2, r3, #18
 8003e66:	4613      	mov	r3, r2
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	4413      	add	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e6e:	e002      	b.n	8003e76 <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f9      	bne.n	8003e70 <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8a:	d107      	bne.n	8003e9c <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e9a:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	f040 8086 	bne.w	8003fb8 <HAL_ADC_Start_DMA+0x1ec>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ed6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eea:	d106      	bne.n	8003efa <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef0:	f023 0206 	bic.w	r2, r3, #6
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	645a      	str	r2, [r3, #68]	; 0x44
 8003ef8:	e002      	b.n	8003f00 <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f08:	4b37      	ldr	r3, [pc, #220]	; (8003fe8 <HAL_ADC_Start_DMA+0x21c>)
 8003f0a:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	4a36      	ldr	r2, [pc, #216]	; (8003fec <HAL_ADC_Start_DMA+0x220>)
 8003f12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	4a35      	ldr	r2, [pc, #212]	; (8003ff0 <HAL_ADC_Start_DMA+0x224>)
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	4a34      	ldr	r2, [pc, #208]	; (8003ff4 <HAL_ADC_Start_DMA+0x228>)
 8003f22:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f2c:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f3c:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f4c:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	334c      	adds	r3, #76	; 0x4c
 8003f58:	4619      	mov	r1, r3
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f000 ff17 	bl	8004d90 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 031f 	and.w	r3, r3, #31
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10f      	bne.n	8003f8e <HAL_ADC_Start_DMA+0x1c2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d129      	bne.n	8003fd0 <HAL_ADC_Start_DMA+0x204>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	e020      	b.n	8003fd0 <HAL_ADC_Start_DMA+0x204>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a19      	ldr	r2, [pc, #100]	; (8003ff8 <HAL_ADC_Start_DMA+0x22c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d11b      	bne.n	8003fd0 <HAL_ADC_Start_DMA+0x204>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d114      	bne.n	8003fd0 <HAL_ADC_Start_DMA+0x204>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fb4:	609a      	str	r2, [r3, #8]
 8003fb6:	e00b      	b.n	8003fd0 <HAL_ADC_Start_DMA+0x204>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	f043 0210 	orr.w	r2, r3, #16
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc8:	f043 0201 	orr.w	r2, r3, #1
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	08010908 	.word	0x08010908
 8003fe0:	20000004 	.word	0x20000004
 8003fe4:	431bde83 	.word	0x431bde83
 8003fe8:	40012300 	.word	0x40012300
 8003fec:	0800454d 	.word	0x0800454d
 8003ff0:	0800460b 	.word	0x0800460b
 8003ff4:	08004629 	.word	0x08004629
 8003ff8:	40012000 	.word	0x40012000

08003ffc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b12      	cmp	r3, #18
 8004060:	d909      	bls.n	8004076 <HAL_ADC_ConfigChannel+0x2a>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a72      	ldr	r2, [pc, #456]	; (8004230 <HAL_ADC_ConfigChannel+0x1e4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d004      	beq.n	8004076 <HAL_ADC_ConfigChannel+0x2a>
 800406c:	f240 618b 	movw	r1, #1675	; 0x68b
 8004070:	4870      	ldr	r0, [pc, #448]	; (8004234 <HAL_ADC_ConfigChannel+0x1e8>)
 8004072:	f7fe fc06 	bl	8002882 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_ADC_ConfigChannel+0x3a>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b10      	cmp	r3, #16
 8004084:	d904      	bls.n	8004090 <HAL_ADC_ConfigChannel+0x44>
 8004086:	f240 618c 	movw	r1, #1676	; 0x68c
 800408a:	486a      	ldr	r0, [pc, #424]	; (8004234 <HAL_ADC_ConfigChannel+0x1e8>)
 800408c:	f7fe fbf9 	bl	8002882 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d020      	beq.n	80040da <HAL_ADC_ConfigChannel+0x8e>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d01c      	beq.n	80040da <HAL_ADC_ConfigChannel+0x8e>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d018      	beq.n	80040da <HAL_ADC_ConfigChannel+0x8e>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d014      	beq.n	80040da <HAL_ADC_ConfigChannel+0x8e>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d010      	beq.n	80040da <HAL_ADC_ConfigChannel+0x8e>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b05      	cmp	r3, #5
 80040be:	d00c      	beq.n	80040da <HAL_ADC_ConfigChannel+0x8e>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b06      	cmp	r3, #6
 80040c6:	d008      	beq.n	80040da <HAL_ADC_ConfigChannel+0x8e>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b07      	cmp	r3, #7
 80040ce:	d004      	beq.n	80040da <HAL_ADC_ConfigChannel+0x8e>
 80040d0:	f240 618d 	movw	r1, #1677	; 0x68d
 80040d4:	4857      	ldr	r0, [pc, #348]	; (8004234 <HAL_ADC_ConfigChannel+0x1e8>)
 80040d6:	f7fe fbd4 	bl	8002882 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x9c>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e118      	b.n	800431a <HAL_ADC_ConfigChannel+0x2ce>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b09      	cmp	r3, #9
 80040f6:	d925      	bls.n	8004144 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68d9      	ldr	r1, [r3, #12]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	461a      	mov	r2, r3
 8004106:	4613      	mov	r3, r2
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	4413      	add	r3, r2
 800410c:	3b1e      	subs	r3, #30
 800410e:	2207      	movs	r2, #7
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43da      	mvns	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	400a      	ands	r2, r1
 800411c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68d9      	ldr	r1, [r3, #12]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	b29b      	uxth	r3, r3
 800412e:	4618      	mov	r0, r3
 8004130:	4603      	mov	r3, r0
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	4403      	add	r3, r0
 8004136:	3b1e      	subs	r3, #30
 8004138:	409a      	lsls	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	e022      	b.n	800418a <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6919      	ldr	r1, [r3, #16]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	4613      	mov	r3, r2
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4413      	add	r3, r2
 8004158:	2207      	movs	r2, #7
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	43da      	mvns	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	400a      	ands	r2, r1
 8004166:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6919      	ldr	r1, [r3, #16]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	4618      	mov	r0, r3
 800417a:	4603      	mov	r3, r0
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	4403      	add	r3, r0
 8004180:	409a      	lsls	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b06      	cmp	r3, #6
 8004190:	d824      	bhi.n	80041dc <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	3b05      	subs	r3, #5
 80041a4:	221f      	movs	r2, #31
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43da      	mvns	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	400a      	ands	r2, r1
 80041b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	4618      	mov	r0, r3
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	3b05      	subs	r3, #5
 80041ce:	fa00 f203 	lsl.w	r2, r0, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	635a      	str	r2, [r3, #52]	; 0x34
 80041da:	e051      	b.n	8004280 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b0c      	cmp	r3, #12
 80041e2:	d829      	bhi.n	8004238 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	3b23      	subs	r3, #35	; 0x23
 80041f6:	221f      	movs	r2, #31
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	43da      	mvns	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	400a      	ands	r2, r1
 8004204:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	4618      	mov	r0, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	3b23      	subs	r3, #35	; 0x23
 8004220:	fa00 f203 	lsl.w	r2, r0, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	631a      	str	r2, [r3, #48]	; 0x30
 800422c:	e028      	b.n	8004280 <HAL_ADC_ConfigChannel+0x234>
 800422e:	bf00      	nop
 8004230:	10000012 	.word	0x10000012
 8004234:	08010908 	.word	0x08010908
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	3b41      	subs	r3, #65	; 0x41
 800424a:	221f      	movs	r2, #31
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	43da      	mvns	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	400a      	ands	r2, r1
 8004258:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	4618      	mov	r0, r3
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	3b41      	subs	r3, #65	; 0x41
 8004274:	fa00 f203 	lsl.w	r2, r0, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004280:	4b28      	ldr	r3, [pc, #160]	; (8004324 <HAL_ADC_ConfigChannel+0x2d8>)
 8004282:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a27      	ldr	r2, [pc, #156]	; (8004328 <HAL_ADC_ConfigChannel+0x2dc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d10f      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x262>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b12      	cmp	r3, #18
 8004294:	d10b      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <HAL_ADC_ConfigChannel+0x2dc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d12b      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x2c4>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1b      	ldr	r2, [pc, #108]	; (800432c <HAL_ADC_ConfigChannel+0x2e0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <HAL_ADC_ConfigChannel+0x27e>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b11      	cmp	r3, #17
 80042c8:	d122      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a11      	ldr	r2, [pc, #68]	; (800432c <HAL_ADC_ConfigChannel+0x2e0>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d111      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <HAL_ADC_ConfigChannel+0x2e4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a10      	ldr	r2, [pc, #64]	; (8004334 <HAL_ADC_ConfigChannel+0x2e8>)
 80042f2:	fba2 2303 	umull	r2, r3, r2, r3
 80042f6:	0c9a      	lsrs	r2, r3, #18
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004302:	e002      	b.n	800430a <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	3b01      	subs	r3, #1
 8004308:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1f9      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40012300 	.word	0x40012300
 8004328:	40012000 	.word	0x40012000
 800432c:	10000012 	.word	0x10000012
 8004330:	20000004 	.word	0x20000004
 8004334:	431bde83 	.word	0x431bde83

08004338 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004340:	4b7f      	ldr	r3, [pc, #508]	; (8004540 <ADC_Init+0x208>)
 8004342:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	431a      	orrs	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800436c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6859      	ldr	r1, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	021a      	lsls	r2, r3, #8
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6899      	ldr	r1, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	4a5e      	ldr	r2, [pc, #376]	; (8004544 <ADC_Init+0x20c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d022      	beq.n	8004416 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6899      	ldr	r1, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6899      	ldr	r1, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	609a      	str	r2, [r3, #8]
 8004414:	e00f      	b.n	8004436 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004434:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0202 	bic.w	r2, r2, #2
 8004444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6899      	ldr	r1, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	7e1b      	ldrb	r3, [r3, #24]
 8004450:	005a      	lsls	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d028      	beq.n	80044b6 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <ADC_Init+0x13c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	2b08      	cmp	r3, #8
 8004472:	d904      	bls.n	800447e <ADC_Init+0x146>
 8004474:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8004478:	4833      	ldr	r0, [pc, #204]	; (8004548 <ADC_Init+0x210>)
 800447a:	f7fe fa02 	bl	8002882 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800448c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800449c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6859      	ldr	r1, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	3b01      	subs	r3, #1
 80044aa:	035a      	lsls	r2, r3, #13
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	605a      	str	r2, [r3, #4]
 80044b4:	e007      	b.n	80044c6 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80044d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	051a      	lsls	r2, r3, #20
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6899      	ldr	r1, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004508:	025a      	lsls	r2, r3, #9
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004520:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6899      	ldr	r1, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	029a      	lsls	r2, r3, #10
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	609a      	str	r2, [r3, #8]
}
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40012300 	.word	0x40012300
 8004544:	0f000001 	.word	0x0f000001
 8004548:	08010908 	.word	0x08010908

0800454c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004562:	2b00      	cmp	r3, #0
 8004564:	d13d      	bne.n	80045e2 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d12b      	bne.n	80045d8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004584:	2b00      	cmp	r3, #0
 8004586:	d127      	bne.n	80045d8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004592:	2b00      	cmp	r3, #0
 8004594:	d006      	beq.n	80045a4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d119      	bne.n	80045d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0220 	bic.w	r2, r2, #32
 80045b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d105      	bne.n	80045d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	f043 0201 	orr.w	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80045e0:	e00f      	b.n	8004602 <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d004      	beq.n	80045f8 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	4798      	blx	r3
}
 80045f6:	e004      	b.n	8004602 <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	4798      	blx	r3
}
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b084      	sub	sp, #16
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2240      	movs	r2, #64	; 0x40
 800463a:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004640:	f043 0204 	orr.w	r2, r3, #4
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <__NVIC_SetPriorityGrouping+0x44>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004688:	4013      	ands	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800469c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800469e:	4a04      	ldr	r2, [pc, #16]	; (80046b0 <__NVIC_SetPriorityGrouping+0x44>)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	60d3      	str	r3, [r2, #12]
}
 80046a4:	bf00      	nop
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <__NVIC_GetPriorityGrouping+0x18>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	0a1b      	lsrs	r3, r3, #8
 80046be:	f003 0307 	and.w	r3, r3, #7
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	4603      	mov	r3, r0
 80046d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	db0b      	blt.n	80046fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	f003 021f 	and.w	r2, r3, #31
 80046e8:	4907      	ldr	r1, [pc, #28]	; (8004708 <__NVIC_EnableIRQ+0x38>)
 80046ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	2001      	movs	r0, #1
 80046f2:	fa00 f202 	lsl.w	r2, r0, r2
 80046f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	e000e100 	.word	0xe000e100

0800470c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	4603      	mov	r3, r0
 8004714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471a:	2b00      	cmp	r3, #0
 800471c:	db12      	blt.n	8004744 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	f003 021f 	and.w	r2, r3, #31
 8004724:	490a      	ldr	r1, [pc, #40]	; (8004750 <__NVIC_DisableIRQ+0x44>)
 8004726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	2001      	movs	r0, #1
 800472e:	fa00 f202 	lsl.w	r2, r0, r2
 8004732:	3320      	adds	r3, #32
 8004734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004738:	f3bf 8f4f 	dsb	sy
}
 800473c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800473e:	f3bf 8f6f 	isb	sy
}
 8004742:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	e000e100 	.word	0xe000e100

08004754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	6039      	str	r1, [r7, #0]
 800475e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004764:	2b00      	cmp	r3, #0
 8004766:	db0a      	blt.n	800477e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	b2da      	uxtb	r2, r3
 800476c:	490c      	ldr	r1, [pc, #48]	; (80047a0 <__NVIC_SetPriority+0x4c>)
 800476e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004772:	0112      	lsls	r2, r2, #4
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	440b      	add	r3, r1
 8004778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800477c:	e00a      	b.n	8004794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	b2da      	uxtb	r2, r3
 8004782:	4908      	ldr	r1, [pc, #32]	; (80047a4 <__NVIC_SetPriority+0x50>)
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	3b04      	subs	r3, #4
 800478c:	0112      	lsls	r2, r2, #4
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	440b      	add	r3, r1
 8004792:	761a      	strb	r2, [r3, #24]
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	e000e100 	.word	0xe000e100
 80047a4:	e000ed00 	.word	0xe000ed00

080047a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b089      	sub	sp, #36	; 0x24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f1c3 0307 	rsb	r3, r3, #7
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	bf28      	it	cs
 80047c6:	2304      	movcs	r3, #4
 80047c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	3304      	adds	r3, #4
 80047ce:	2b06      	cmp	r3, #6
 80047d0:	d902      	bls.n	80047d8 <NVIC_EncodePriority+0x30>
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	3b03      	subs	r3, #3
 80047d6:	e000      	b.n	80047da <NVIC_EncodePriority+0x32>
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047dc:	f04f 32ff 	mov.w	r2, #4294967295
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	43da      	mvns	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	401a      	ands	r2, r3
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047f0:	f04f 31ff 	mov.w	r1, #4294967295
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	fa01 f303 	lsl.w	r3, r1, r3
 80047fa:	43d9      	mvns	r1, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004800:	4313      	orrs	r3, r2
         );
}
 8004802:	4618      	mov	r0, r3
 8004804:	3724      	adds	r7, #36	; 0x24
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
	...

08004810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b07      	cmp	r3, #7
 800481c:	d00f      	beq.n	800483e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b06      	cmp	r3, #6
 8004822:	d00c      	beq.n	800483e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b05      	cmp	r3, #5
 8004828:	d009      	beq.n	800483e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b04      	cmp	r3, #4
 800482e:	d006      	beq.n	800483e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b03      	cmp	r3, #3
 8004834:	d003      	beq.n	800483e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004836:	2190      	movs	r1, #144	; 0x90
 8004838:	4804      	ldr	r0, [pc, #16]	; (800484c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800483a:	f7fe f822 	bl	8002882 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ff14 	bl	800466c <__NVIC_SetPriorityGrouping>
}
 8004844:	bf00      	nop
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	0801097c 	.word	0x0801097c

08004850 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b0f      	cmp	r3, #15
 8004866:	d903      	bls.n	8004870 <HAL_NVIC_SetPriority+0x20>
 8004868:	21a8      	movs	r1, #168	; 0xa8
 800486a:	480e      	ldr	r0, [pc, #56]	; (80048a4 <HAL_NVIC_SetPriority+0x54>)
 800486c:	f7fe f809 	bl	8002882 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2b0f      	cmp	r3, #15
 8004874:	d903      	bls.n	800487e <HAL_NVIC_SetPriority+0x2e>
 8004876:	21a9      	movs	r1, #169	; 0xa9
 8004878:	480a      	ldr	r0, [pc, #40]	; (80048a4 <HAL_NVIC_SetPriority+0x54>)
 800487a:	f7fe f802 	bl	8002882 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800487e:	f7ff ff19 	bl	80046b4 <__NVIC_GetPriorityGrouping>
 8004882:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	6978      	ldr	r0, [r7, #20]
 800488a:	f7ff ff8d 	bl	80047a8 <NVIC_EncodePriority>
 800488e:	4602      	mov	r2, r0
 8004890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004894:	4611      	mov	r1, r2
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff ff5c 	bl	8004754 <__NVIC_SetPriority>
}
 800489c:	bf00      	nop
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	0801097c 	.word	0x0801097c

080048a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80048b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	da03      	bge.n	80048c2 <HAL_NVIC_EnableIRQ+0x1a>
 80048ba:	21bc      	movs	r1, #188	; 0xbc
 80048bc:	4805      	ldr	r0, [pc, #20]	; (80048d4 <HAL_NVIC_EnableIRQ+0x2c>)
 80048be:	f7fd ffe0 	bl	8002882 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff ff02 	bl	80046d0 <__NVIC_EnableIRQ>
}
 80048cc:	bf00      	nop
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	0801097c 	.word	0x0801097c

080048d8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80048e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	da03      	bge.n	80048f2 <HAL_NVIC_DisableIRQ+0x1a>
 80048ea:	21cc      	movs	r1, #204	; 0xcc
 80048ec:	4805      	ldr	r0, [pc, #20]	; (8004904 <HAL_NVIC_DisableIRQ+0x2c>)
 80048ee:	f7fd ffc8 	bl	8002882 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80048f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff ff08 	bl	800470c <__NVIC_DisableIRQ>
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	0801097c 	.word	0x0801097c

08004908 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e017      	b.n	800494a <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a0d      	ldr	r2, [pc, #52]	; (8004954 <HAL_CRC_Init+0x4c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <HAL_CRC_Init+0x24>
 8004924:	2168      	movs	r1, #104	; 0x68
 8004926:	480c      	ldr	r0, [pc, #48]	; (8004958 <HAL_CRC_Init+0x50>)
 8004928:	f7fd ffab 	bl	8002882 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	795b      	ldrb	r3, [r3, #5]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d105      	bne.n	8004942 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7fc ff5d 	bl	80017fc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40023000 	.word	0x40023000
 8004958:	080109f4 	.word	0x080109f4

0800495c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004968:	f7fe ff60 	bl	800382c <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e203      	b.n	8004d80 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a8b      	ldr	r2, [pc, #556]	; (8004bac <HAL_DMA_Init+0x250>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d04e      	beq.n	8004a20 <HAL_DMA_Init+0xc4>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a8a      	ldr	r2, [pc, #552]	; (8004bb0 <HAL_DMA_Init+0x254>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d049      	beq.n	8004a20 <HAL_DMA_Init+0xc4>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a88      	ldr	r2, [pc, #544]	; (8004bb4 <HAL_DMA_Init+0x258>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d044      	beq.n	8004a20 <HAL_DMA_Init+0xc4>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a87      	ldr	r2, [pc, #540]	; (8004bb8 <HAL_DMA_Init+0x25c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d03f      	beq.n	8004a20 <HAL_DMA_Init+0xc4>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a85      	ldr	r2, [pc, #532]	; (8004bbc <HAL_DMA_Init+0x260>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d03a      	beq.n	8004a20 <HAL_DMA_Init+0xc4>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a84      	ldr	r2, [pc, #528]	; (8004bc0 <HAL_DMA_Init+0x264>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d035      	beq.n	8004a20 <HAL_DMA_Init+0xc4>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a82      	ldr	r2, [pc, #520]	; (8004bc4 <HAL_DMA_Init+0x268>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d030      	beq.n	8004a20 <HAL_DMA_Init+0xc4>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a81      	ldr	r2, [pc, #516]	; (8004bc8 <HAL_DMA_Init+0x26c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d02b      	beq.n	8004a20 <HAL_DMA_Init+0xc4>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a7f      	ldr	r2, [pc, #508]	; (8004bcc <HAL_DMA_Init+0x270>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d026      	beq.n	8004a20 <HAL_DMA_Init+0xc4>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a7e      	ldr	r2, [pc, #504]	; (8004bd0 <HAL_DMA_Init+0x274>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d021      	beq.n	8004a20 <HAL_DMA_Init+0xc4>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a7c      	ldr	r2, [pc, #496]	; (8004bd4 <HAL_DMA_Init+0x278>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d01c      	beq.n	8004a20 <HAL_DMA_Init+0xc4>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a7b      	ldr	r2, [pc, #492]	; (8004bd8 <HAL_DMA_Init+0x27c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d017      	beq.n	8004a20 <HAL_DMA_Init+0xc4>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a79      	ldr	r2, [pc, #484]	; (8004bdc <HAL_DMA_Init+0x280>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d012      	beq.n	8004a20 <HAL_DMA_Init+0xc4>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a78      	ldr	r2, [pc, #480]	; (8004be0 <HAL_DMA_Init+0x284>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00d      	beq.n	8004a20 <HAL_DMA_Init+0xc4>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a76      	ldr	r2, [pc, #472]	; (8004be4 <HAL_DMA_Init+0x288>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d008      	beq.n	8004a20 <HAL_DMA_Init+0xc4>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a75      	ldr	r2, [pc, #468]	; (8004be8 <HAL_DMA_Init+0x28c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <HAL_DMA_Init+0xc4>
 8004a18:	21b7      	movs	r1, #183	; 0xb7
 8004a1a:	4874      	ldr	r0, [pc, #464]	; (8004bec <HAL_DMA_Init+0x290>)
 8004a1c:	f7fd ff31 	bl	8002882 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d026      	beq.n	8004a76 <HAL_DMA_Init+0x11a>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a30:	d021      	beq.n	8004a76 <HAL_DMA_Init+0x11a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a3a:	d01c      	beq.n	8004a76 <HAL_DMA_Init+0x11a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004a44:	d017      	beq.n	8004a76 <HAL_DMA_Init+0x11a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a4e:	d012      	beq.n	8004a76 <HAL_DMA_Init+0x11a>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004a58:	d00d      	beq.n	8004a76 <HAL_DMA_Init+0x11a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a62:	d008      	beq.n	8004a76 <HAL_DMA_Init+0x11a>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004a6c:	d003      	beq.n	8004a76 <HAL_DMA_Init+0x11a>
 8004a6e:	21b8      	movs	r1, #184	; 0xb8
 8004a70:	485e      	ldr	r0, [pc, #376]	; (8004bec <HAL_DMA_Init+0x290>)
 8004a72:	f7fd ff06 	bl	8002882 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00b      	beq.n	8004a96 <HAL_DMA_Init+0x13a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b40      	cmp	r3, #64	; 0x40
 8004a84:	d007      	beq.n	8004a96 <HAL_DMA_Init+0x13a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b80      	cmp	r3, #128	; 0x80
 8004a8c:	d003      	beq.n	8004a96 <HAL_DMA_Init+0x13a>
 8004a8e:	21b9      	movs	r1, #185	; 0xb9
 8004a90:	4856      	ldr	r0, [pc, #344]	; (8004bec <HAL_DMA_Init+0x290>)
 8004a92:	f7fd fef6 	bl	8002882 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a9e:	d007      	beq.n	8004ab0 <HAL_DMA_Init+0x154>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_DMA_Init+0x154>
 8004aa8:	21ba      	movs	r1, #186	; 0xba
 8004aaa:	4850      	ldr	r0, [pc, #320]	; (8004bec <HAL_DMA_Init+0x290>)
 8004aac:	f7fd fee9 	bl	8002882 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab8:	d007      	beq.n	8004aca <HAL_DMA_Init+0x16e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_DMA_Init+0x16e>
 8004ac2:	21bb      	movs	r1, #187	; 0xbb
 8004ac4:	4849      	ldr	r0, [pc, #292]	; (8004bec <HAL_DMA_Init+0x290>)
 8004ac6:	f7fd fedc 	bl	8002882 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00d      	beq.n	8004aee <HAL_DMA_Init+0x192>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ada:	d008      	beq.n	8004aee <HAL_DMA_Init+0x192>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae4:	d003      	beq.n	8004aee <HAL_DMA_Init+0x192>
 8004ae6:	21bc      	movs	r1, #188	; 0xbc
 8004ae8:	4840      	ldr	r0, [pc, #256]	; (8004bec <HAL_DMA_Init+0x290>)
 8004aea:	f7fd feca 	bl	8002882 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00d      	beq.n	8004b12 <HAL_DMA_Init+0x1b6>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afe:	d008      	beq.n	8004b12 <HAL_DMA_Init+0x1b6>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b08:	d003      	beq.n	8004b12 <HAL_DMA_Init+0x1b6>
 8004b0a:	21bd      	movs	r1, #189	; 0xbd
 8004b0c:	4837      	ldr	r0, [pc, #220]	; (8004bec <HAL_DMA_Init+0x290>)
 8004b0e:	f7fd feb8 	bl	8002882 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00c      	beq.n	8004b34 <HAL_DMA_Init+0x1d8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b22:	d007      	beq.n	8004b34 <HAL_DMA_Init+0x1d8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d003      	beq.n	8004b34 <HAL_DMA_Init+0x1d8>
 8004b2c:	21be      	movs	r1, #190	; 0xbe
 8004b2e:	482f      	ldr	r0, [pc, #188]	; (8004bec <HAL_DMA_Init+0x290>)
 8004b30:	f7fd fea7 	bl	8002882 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d012      	beq.n	8004b62 <HAL_DMA_Init+0x206>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d00d      	beq.n	8004b62 <HAL_DMA_Init+0x206>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b4e:	d008      	beq.n	8004b62 <HAL_DMA_Init+0x206>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b58:	d003      	beq.n	8004b62 <HAL_DMA_Init+0x206>
 8004b5a:	21bf      	movs	r1, #191	; 0xbf
 8004b5c:	4823      	ldr	r0, [pc, #140]	; (8004bec <HAL_DMA_Init+0x290>)
 8004b5e:	f7fd fe90 	bl	8002882 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d007      	beq.n	8004b7a <HAL_DMA_Init+0x21e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d003      	beq.n	8004b7a <HAL_DMA_Init+0x21e>
 8004b72:	21c0      	movs	r1, #192	; 0xc0
 8004b74:	481d      	ldr	r0, [pc, #116]	; (8004bec <HAL_DMA_Init+0x290>)
 8004b76:	f7fd fe84 	bl	8002882 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d064      	beq.n	8004c4c <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d032      	beq.n	8004bf0 <HAL_DMA_Init+0x294>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d02e      	beq.n	8004bf0 <HAL_DMA_Init+0x294>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d02a      	beq.n	8004bf0 <HAL_DMA_Init+0x294>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d026      	beq.n	8004bf0 <HAL_DMA_Init+0x294>
 8004ba2:	21c5      	movs	r1, #197	; 0xc5
 8004ba4:	4811      	ldr	r0, [pc, #68]	; (8004bec <HAL_DMA_Init+0x290>)
 8004ba6:	f7fd fe6c 	bl	8002882 <assert_failed>
 8004baa:	e021      	b.n	8004bf0 <HAL_DMA_Init+0x294>
 8004bac:	40026010 	.word	0x40026010
 8004bb0:	40026028 	.word	0x40026028
 8004bb4:	40026040 	.word	0x40026040
 8004bb8:	40026058 	.word	0x40026058
 8004bbc:	40026070 	.word	0x40026070
 8004bc0:	40026088 	.word	0x40026088
 8004bc4:	400260a0 	.word	0x400260a0
 8004bc8:	400260b8 	.word	0x400260b8
 8004bcc:	40026410 	.word	0x40026410
 8004bd0:	40026428 	.word	0x40026428
 8004bd4:	40026440 	.word	0x40026440
 8004bd8:	40026458 	.word	0x40026458
 8004bdc:	40026470 	.word	0x40026470
 8004be0:	40026488 	.word	0x40026488
 8004be4:	400264a0 	.word	0x400264a0
 8004be8:	400264b8 	.word	0x400264b8
 8004bec:	08010a68 	.word	0x08010a68
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d012      	beq.n	8004c1e <HAL_DMA_Init+0x2c2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c00:	d00d      	beq.n	8004c1e <HAL_DMA_Init+0x2c2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c0a:	d008      	beq.n	8004c1e <HAL_DMA_Init+0x2c2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c14:	d003      	beq.n	8004c1e <HAL_DMA_Init+0x2c2>
 8004c16:	21c6      	movs	r1, #198	; 0xc6
 8004c18:	485b      	ldr	r0, [pc, #364]	; (8004d88 <HAL_DMA_Init+0x42c>)
 8004c1a:	f7fd fe32 	bl	8002882 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d012      	beq.n	8004c4c <HAL_DMA_Init+0x2f0>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c2e:	d00d      	beq.n	8004c4c <HAL_DMA_Init+0x2f0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c38:	d008      	beq.n	8004c4c <HAL_DMA_Init+0x2f0>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c42:	d003      	beq.n	8004c4c <HAL_DMA_Init+0x2f0>
 8004c44:	21c7      	movs	r1, #199	; 0xc7
 8004c46:	4850      	ldr	r0, [pc, #320]	; (8004d88 <HAL_DMA_Init+0x42c>)
 8004c48:	f7fd fe1b 	bl	8002882 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c6c:	e00f      	b.n	8004c8e <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c6e:	f7fe fddd 	bl	800382c <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b05      	cmp	r3, #5
 8004c7a:	d908      	bls.n	8004c8e <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2203      	movs	r2, #3
 8004c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e078      	b.n	8004d80 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1e8      	bne.n	8004c6e <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4b39      	ldr	r3, [pc, #228]	; (8004d8c <HAL_DMA_Init+0x430>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d107      	bne.n	8004cf8 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f023 0307 	bic.w	r3, r3, #7
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d117      	bne.n	8004d52 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00e      	beq.n	8004d52 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fb1f 	bl	8005378 <DMA_CheckFifoParam>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2240      	movs	r2, #64	; 0x40
 8004d44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e016      	b.n	8004d80 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fad6 	bl	800530c <DMA_CalcBaseAndBitshift>
 8004d60:	4603      	mov	r3, r0
 8004d62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d68:	223f      	movs	r2, #63	; 0x3f
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	08010a68 	.word	0x08010a68
 8004d8c:	f010803f 	.word	0xf010803f

08004d90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
 8004d9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_DMA_Start_IT+0x26>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db4:	d304      	bcc.n	8004dc0 <HAL_DMA_Start_IT+0x30>
 8004db6:	f240 11cb 	movw	r1, #459	; 0x1cb
 8004dba:	4827      	ldr	r0, [pc, #156]	; (8004e58 <HAL_DMA_Start_IT+0xc8>)
 8004dbc:	f7fd fd61 	bl	8002882 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_DMA_Start_IT+0x3e>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e040      	b.n	8004e50 <HAL_DMA_Start_IT+0xc0>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d12f      	bne.n	8004e42 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2202      	movs	r2, #2
 8004de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 fa5a 	bl	80052b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e00:	223f      	movs	r2, #63	; 0x3f
 8004e02:	409a      	lsls	r2, r3
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0216 	orr.w	r2, r2, #22
 8004e16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d007      	beq.n	8004e30 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0208 	orr.w	r2, r2, #8
 8004e2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0201 	orr.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	e005      	b.n	8004e4e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	08010a68 	.word	0x08010a68

08004e5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e6a:	f7fe fcdf 	bl	800382c <HAL_GetTick>
 8004e6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d008      	beq.n	8004e8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2280      	movs	r2, #128	; 0x80
 8004e80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e052      	b.n	8004f34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0216 	bic.w	r2, r2, #22
 8004e9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695a      	ldr	r2, [r3, #20]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004eac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <HAL_DMA_Abort+0x62>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d007      	beq.n	8004ece <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0208 	bic.w	r2, r2, #8
 8004ecc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0201 	bic.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ede:	e013      	b.n	8004f08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ee0:	f7fe fca4 	bl	800382c <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b05      	cmp	r3, #5
 8004eec:	d90c      	bls.n	8004f08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e015      	b.n	8004f34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e4      	bne.n	8004ee0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1a:	223f      	movs	r2, #63	; 0x3f
 8004f1c:	409a      	lsls	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d004      	beq.n	8004f5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2280      	movs	r2, #128	; 0x80
 8004f54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e00c      	b.n	8004f74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2205      	movs	r2, #5
 8004f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f8c:	4b8e      	ldr	r3, [pc, #568]	; (80051c8 <HAL_DMA_IRQHandler+0x248>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a8e      	ldr	r2, [pc, #568]	; (80051cc <HAL_DMA_IRQHandler+0x24c>)
 8004f92:	fba2 2303 	umull	r2, r3, r2, r3
 8004f96:	0a9b      	lsrs	r3, r3, #10
 8004f98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004faa:	2208      	movs	r2, #8
 8004fac:	409a      	lsls	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d01a      	beq.n	8004fec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d013      	beq.n	8004fec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0204 	bic.w	r2, r2, #4
 8004fd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd8:	2208      	movs	r2, #8
 8004fda:	409a      	lsls	r2, r3
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe4:	f043 0201 	orr.w	r2, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	409a      	lsls	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d012      	beq.n	8005022 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00b      	beq.n	8005022 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500e:	2201      	movs	r2, #1
 8005010:	409a      	lsls	r2, r3
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	f043 0202 	orr.w	r2, r3, #2
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005026:	2204      	movs	r2, #4
 8005028:	409a      	lsls	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4013      	ands	r3, r2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d012      	beq.n	8005058 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00b      	beq.n	8005058 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005044:	2204      	movs	r2, #4
 8005046:	409a      	lsls	r2, r3
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005050:	f043 0204 	orr.w	r2, r3, #4
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505c:	2210      	movs	r2, #16
 800505e:	409a      	lsls	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4013      	ands	r3, r2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d043      	beq.n	80050f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d03c      	beq.n	80050f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800507a:	2210      	movs	r2, #16
 800507c:	409a      	lsls	r2, r3
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d018      	beq.n	80050c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d108      	bne.n	80050b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d024      	beq.n	80050f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	4798      	blx	r3
 80050ae:	e01f      	b.n	80050f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01b      	beq.n	80050f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	4798      	blx	r3
 80050c0:	e016      	b.n	80050f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d107      	bne.n	80050e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0208 	bic.w	r2, r2, #8
 80050de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f4:	2220      	movs	r2, #32
 80050f6:	409a      	lsls	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 808f 	beq.w	8005220 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 8087 	beq.w	8005220 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005116:	2220      	movs	r2, #32
 8005118:	409a      	lsls	r2, r3
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b05      	cmp	r3, #5
 8005128:	d136      	bne.n	8005198 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0216 	bic.w	r2, r2, #22
 8005138:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695a      	ldr	r2, [r3, #20]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005148:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d103      	bne.n	800515a <HAL_DMA_IRQHandler+0x1da>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005156:	2b00      	cmp	r3, #0
 8005158:	d007      	beq.n	800516a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0208 	bic.w	r2, r2, #8
 8005168:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516e:	223f      	movs	r2, #63	; 0x3f
 8005170:	409a      	lsls	r2, r3
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518a:	2b00      	cmp	r3, #0
 800518c:	d07e      	beq.n	800528c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	4798      	blx	r3
        }
        return;
 8005196:	e079      	b.n	800528c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01d      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10d      	bne.n	80051d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d031      	beq.n	8005220 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	4798      	blx	r3
 80051c4:	e02c      	b.n	8005220 <HAL_DMA_IRQHandler+0x2a0>
 80051c6:	bf00      	nop
 80051c8:	20000004 	.word	0x20000004
 80051cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d023      	beq.n	8005220 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	4798      	blx	r3
 80051e0:	e01e      	b.n	8005220 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10f      	bne.n	8005210 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0210 	bic.w	r2, r2, #16
 80051fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005224:	2b00      	cmp	r3, #0
 8005226:	d032      	beq.n	800528e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d022      	beq.n	800527a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2205      	movs	r2, #5
 8005238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	3301      	adds	r3, #1
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	429a      	cmp	r2, r3
 8005256:	d307      	bcc.n	8005268 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f2      	bne.n	800524c <HAL_DMA_IRQHandler+0x2cc>
 8005266:	e000      	b.n	800526a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005268:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527e:	2b00      	cmp	r3, #0
 8005280:	d005      	beq.n	800528e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	4798      	blx	r3
 800528a:	e000      	b.n	800528e <HAL_DMA_IRQHandler+0x30e>
        return;
 800528c:	bf00      	nop
    }
  }
}
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052a2:	b2db      	uxtb	r3, r3
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b40      	cmp	r3, #64	; 0x40
 80052dc:	d108      	bne.n	80052f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052ee:	e007      	b.n	8005300 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	60da      	str	r2, [r3, #12]
}
 8005300:	bf00      	nop
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	b2db      	uxtb	r3, r3
 800531a:	3b10      	subs	r3, #16
 800531c:	4a14      	ldr	r2, [pc, #80]	; (8005370 <DMA_CalcBaseAndBitshift+0x64>)
 800531e:	fba2 2303 	umull	r2, r3, r2, r3
 8005322:	091b      	lsrs	r3, r3, #4
 8005324:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005326:	4a13      	ldr	r2, [pc, #76]	; (8005374 <DMA_CalcBaseAndBitshift+0x68>)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4413      	add	r3, r2
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	461a      	mov	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b03      	cmp	r3, #3
 8005338:	d909      	bls.n	800534e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005342:	f023 0303 	bic.w	r3, r3, #3
 8005346:	1d1a      	adds	r2, r3, #4
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	659a      	str	r2, [r3, #88]	; 0x58
 800534c:	e007      	b.n	800535e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005356:	f023 0303 	bic.w	r3, r3, #3
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	aaaaaaab 	.word	0xaaaaaaab
 8005374:	080118c0 	.word	0x080118c0

08005378 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d11f      	bne.n	80053d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b03      	cmp	r3, #3
 8005396:	d856      	bhi.n	8005446 <DMA_CheckFifoParam+0xce>
 8005398:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <DMA_CheckFifoParam+0x28>)
 800539a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539e:	bf00      	nop
 80053a0:	080053b1 	.word	0x080053b1
 80053a4:	080053c3 	.word	0x080053c3
 80053a8:	080053b1 	.word	0x080053b1
 80053ac:	08005447 	.word	0x08005447
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d046      	beq.n	800544a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053c0:	e043      	b.n	800544a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053ca:	d140      	bne.n	800544e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053d0:	e03d      	b.n	800544e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053da:	d121      	bne.n	8005420 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d837      	bhi.n	8005452 <DMA_CheckFifoParam+0xda>
 80053e2:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <DMA_CheckFifoParam+0x70>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	080053f9 	.word	0x080053f9
 80053ec:	080053ff 	.word	0x080053ff
 80053f0:	080053f9 	.word	0x080053f9
 80053f4:	08005411 	.word	0x08005411
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	73fb      	strb	r3, [r7, #15]
      break;
 80053fc:	e030      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d025      	beq.n	8005456 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800540e:	e022      	b.n	8005456 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005418:	d11f      	bne.n	800545a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800541e:	e01c      	b.n	800545a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d903      	bls.n	800542e <DMA_CheckFifoParam+0xb6>
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b03      	cmp	r3, #3
 800542a:	d003      	beq.n	8005434 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800542c:	e018      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	73fb      	strb	r3, [r7, #15]
      break;
 8005432:	e015      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00e      	beq.n	800545e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	73fb      	strb	r3, [r7, #15]
      break;
 8005444:	e00b      	b.n	800545e <DMA_CheckFifoParam+0xe6>
      break;
 8005446:	bf00      	nop
 8005448:	e00a      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
      break;
 800544a:	bf00      	nop
 800544c:	e008      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
      break;
 800544e:	bf00      	nop
 8005450:	e006      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
      break;
 8005452:	bf00      	nop
 8005454:	e004      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
      break;
 8005456:	bf00      	nop
 8005458:	e002      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
      break;   
 800545a:	bf00      	nop
 800545c:	e000      	b.n	8005460 <DMA_CheckFifoParam+0xe8>
      break;
 800545e:	bf00      	nop
    }
  } 
  
  return status; 
 8005460:	7bfb      	ldrb	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop

08005470 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800547a:	4b4b      	ldr	r3, [pc, #300]	; (80055a8 <HAL_FLASH_IRQHandler+0x138>)
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d020      	beq.n	80054c8 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005486:	4b49      	ldr	r3, [pc, #292]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b01      	cmp	r3, #1
 800548e:	d107      	bne.n	80054a0 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8005490:	4b46      	ldr	r3, [pc, #280]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8005496:	4b45      	ldr	r3, [pc, #276]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 8005498:	f04f 32ff 	mov.w	r2, #4294967295
 800549c:	60da      	str	r2, [r3, #12]
 800549e:	e00b      	b.n	80054b8 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80054a0:	4b42      	ldr	r3, [pc, #264]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d103      	bne.n	80054b2 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 80054aa:	4b40      	ldr	r3, [pc, #256]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	607b      	str	r3, [r7, #4]
 80054b0:	e002      	b.n	80054b8 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 80054b2:	4b3e      	ldr	r3, [pc, #248]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 80054b8:	f000 f88e 	bl	80055d8 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f881 	bl	80055c4 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80054c2:	4b3a      	ldr	r3, [pc, #232]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80054c8:	4b37      	ldr	r3, [pc, #220]	; (80055a8 <HAL_FLASH_IRQHandler+0x138>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d04a      	beq.n	800556a <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80054d4:	4b34      	ldr	r3, [pc, #208]	; (80055a8 <HAL_FLASH_IRQHandler+0x138>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80054da:	4b34      	ldr	r3, [pc, #208]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d12d      	bne.n	8005540 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 80054e4:	4b31      	ldr	r3, [pc, #196]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	4a30      	ldr	r2, [pc, #192]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 80054ec:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 80054ee:	4b2f      	ldr	r3, [pc, #188]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d015      	beq.n	8005522 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 80054f6:	4b2d      	ldr	r3, [pc, #180]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f857 	bl	80055b0 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8005502:	4b2a      	ldr	r3, [pc, #168]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	3301      	adds	r3, #1
 8005508:	4a28      	ldr	r2, [pc, #160]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 800550a:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800550c:	4b27      	ldr	r3, [pc, #156]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8005512:	4b26      	ldr	r3, [pc, #152]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 8005514:	7a1b      	ldrb	r3, [r3, #8]
 8005516:	b2db      	uxtb	r3, r3
 8005518:	4619      	mov	r1, r3
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f8c2 	bl	80056a4 <FLASH_Erase_Sector>
 8005520:	e023      	b.n	800556a <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8005522:	f04f 33ff 	mov.w	r3, #4294967295
 8005526:	607b      	str	r3, [r7, #4]
 8005528:	4a20      	ldr	r2, [pc, #128]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800552e:	4b1f      	ldr	r3, [pc, #124]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 8005530:	2200      	movs	r2, #0
 8005532:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8005534:	f000 f92c 	bl	8005790 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f839 	bl	80055b0 <HAL_FLASH_EndOfOperationCallback>
 800553e:	e014      	b.n	800556a <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8005540:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d107      	bne.n	800555a <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800554a:	f000 f921 	bl	8005790 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800554e:	4b17      	ldr	r3, [pc, #92]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 f82c 	bl	80055b0 <HAL_FLASH_EndOfOperationCallback>
 8005558:	e004      	b.n	8005564 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800555a:	4b14      	ldr	r3, [pc, #80]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	4618      	mov	r0, r3
 8005560:	f000 f826 	bl	80055b0 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005564:	4b11      	ldr	r3, [pc, #68]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800556a:	4b10      	ldr	r3, [pc, #64]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d114      	bne.n	800559e <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8005574:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <HAL_FLASH_IRQHandler+0x138>)
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	4a0b      	ldr	r2, [pc, #44]	; (80055a8 <HAL_FLASH_IRQHandler+0x138>)
 800557a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800557e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8005580:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <HAL_FLASH_IRQHandler+0x138>)
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	4a08      	ldr	r2, [pc, #32]	; (80055a8 <HAL_FLASH_IRQHandler+0x138>)
 8005586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800558a:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <HAL_FLASH_IRQHandler+0x138>)
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	4a05      	ldr	r2, [pc, #20]	; (80055a8 <HAL_FLASH_IRQHandler+0x138>)
 8005592:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005596:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005598:	4b04      	ldr	r3, [pc, #16]	; (80055ac <HAL_FLASH_IRQHandler+0x13c>)
 800559a:	2200      	movs	r2, #0
 800559c:	761a      	strb	r2, [r3, #24]
  }
}
 800559e:	bf00      	nop
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	40023c00 	.word	0x40023c00
 80055ac:	20000ad4 	.word	0x20000ad4

080055b0 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80055dc:	4b2f      	ldr	r3, [pc, #188]	; (800569c <FLASH_SetErrorCode+0xc4>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0310 	and.w	r3, r3, #16
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80055e8:	4b2d      	ldr	r3, [pc, #180]	; (80056a0 <FLASH_SetErrorCode+0xc8>)
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	f043 0310 	orr.w	r3, r3, #16
 80055f0:	4a2b      	ldr	r2, [pc, #172]	; (80056a0 <FLASH_SetErrorCode+0xc8>)
 80055f2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80055f4:	4b29      	ldr	r3, [pc, #164]	; (800569c <FLASH_SetErrorCode+0xc4>)
 80055f6:	2210      	movs	r2, #16
 80055f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80055fa:	4b28      	ldr	r3, [pc, #160]	; (800569c <FLASH_SetErrorCode+0xc4>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f003 0320 	and.w	r3, r3, #32
 8005602:	2b00      	cmp	r3, #0
 8005604:	d008      	beq.n	8005618 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005606:	4b26      	ldr	r3, [pc, #152]	; (80056a0 <FLASH_SetErrorCode+0xc8>)
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f043 0308 	orr.w	r3, r3, #8
 800560e:	4a24      	ldr	r2, [pc, #144]	; (80056a0 <FLASH_SetErrorCode+0xc8>)
 8005610:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005612:	4b22      	ldr	r3, [pc, #136]	; (800569c <FLASH_SetErrorCode+0xc4>)
 8005614:	2220      	movs	r2, #32
 8005616:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005618:	4b20      	ldr	r3, [pc, #128]	; (800569c <FLASH_SetErrorCode+0xc4>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005620:	2b00      	cmp	r3, #0
 8005622:	d008      	beq.n	8005636 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005624:	4b1e      	ldr	r3, [pc, #120]	; (80056a0 <FLASH_SetErrorCode+0xc8>)
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	f043 0304 	orr.w	r3, r3, #4
 800562c:	4a1c      	ldr	r2, [pc, #112]	; (80056a0 <FLASH_SetErrorCode+0xc8>)
 800562e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005630:	4b1a      	ldr	r3, [pc, #104]	; (800569c <FLASH_SetErrorCode+0xc4>)
 8005632:	2240      	movs	r2, #64	; 0x40
 8005634:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005636:	4b19      	ldr	r3, [pc, #100]	; (800569c <FLASH_SetErrorCode+0xc4>)
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563e:	2b00      	cmp	r3, #0
 8005640:	d008      	beq.n	8005654 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005642:	4b17      	ldr	r3, [pc, #92]	; (80056a0 <FLASH_SetErrorCode+0xc8>)
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f043 0302 	orr.w	r3, r3, #2
 800564a:	4a15      	ldr	r2, [pc, #84]	; (80056a0 <FLASH_SetErrorCode+0xc8>)
 800564c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800564e:	4b13      	ldr	r3, [pc, #76]	; (800569c <FLASH_SetErrorCode+0xc4>)
 8005650:	2280      	movs	r2, #128	; 0x80
 8005652:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005654:	4b11      	ldr	r3, [pc, #68]	; (800569c <FLASH_SetErrorCode+0xc4>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d009      	beq.n	8005674 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005660:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <FLASH_SetErrorCode+0xc8>)
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	f043 0301 	orr.w	r3, r3, #1
 8005668:	4a0d      	ldr	r2, [pc, #52]	; (80056a0 <FLASH_SetErrorCode+0xc8>)
 800566a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800566c:	4b0b      	ldr	r3, [pc, #44]	; (800569c <FLASH_SetErrorCode+0xc4>)
 800566e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005672:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005674:	4b09      	ldr	r3, [pc, #36]	; (800569c <FLASH_SetErrorCode+0xc4>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005680:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <FLASH_SetErrorCode+0xc8>)
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	f043 0320 	orr.w	r3, r3, #32
 8005688:	4a05      	ldr	r2, [pc, #20]	; (80056a0 <FLASH_SetErrorCode+0xc8>)
 800568a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800568c:	4b03      	ldr	r3, [pc, #12]	; (800569c <FLASH_SetErrorCode+0xc4>)
 800568e:	2202      	movs	r2, #2
 8005690:	60da      	str	r2, [r3, #12]
  }
}
 8005692:	bf00      	nop
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	40023c00 	.word	0x40023c00
 80056a0:	20000ad4 	.word	0x20000ad4

080056a4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d019      	beq.n	80056ee <FLASH_Erase_Sector+0x4a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d016      	beq.n	80056ee <FLASH_Erase_Sector+0x4a>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d013      	beq.n	80056ee <FLASH_Erase_Sector+0x4a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d010      	beq.n	80056ee <FLASH_Erase_Sector+0x4a>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d00d      	beq.n	80056ee <FLASH_Erase_Sector+0x4a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b05      	cmp	r3, #5
 80056d6:	d00a      	beq.n	80056ee <FLASH_Erase_Sector+0x4a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b06      	cmp	r3, #6
 80056dc:	d007      	beq.n	80056ee <FLASH_Erase_Sector+0x4a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b07      	cmp	r3, #7
 80056e2:	d004      	beq.n	80056ee <FLASH_Erase_Sector+0x4a>
 80056e4:	f240 31d9 	movw	r1, #985	; 0x3d9
 80056e8:	4827      	ldr	r0, [pc, #156]	; (8005788 <FLASH_Erase_Sector+0xe4>)
 80056ea:	f7fd f8ca 	bl	8002882 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00d      	beq.n	8005710 <FLASH_Erase_Sector+0x6c>
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d00a      	beq.n	8005710 <FLASH_Erase_Sector+0x6c>
 80056fa:	78fb      	ldrb	r3, [r7, #3]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d007      	beq.n	8005710 <FLASH_Erase_Sector+0x6c>
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	2b03      	cmp	r3, #3
 8005704:	d004      	beq.n	8005710 <FLASH_Erase_Sector+0x6c>
 8005706:	f240 31da 	movw	r1, #986	; 0x3da
 800570a:	481f      	ldr	r0, [pc, #124]	; (8005788 <FLASH_Erase_Sector+0xe4>)
 800570c:	f7fd f8b9 	bl	8002882 <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d102      	bne.n	800571c <FLASH_Erase_Sector+0x78>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	e010      	b.n	800573e <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d103      	bne.n	800572a <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e009      	b.n	800573e <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800572a:	78fb      	ldrb	r3, [r7, #3]
 800572c:	2b02      	cmp	r3, #2
 800572e:	d103      	bne.n	8005738 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	e002      	b.n	800573e <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005738:	f44f 7340 	mov.w	r3, #768	; 0x300
 800573c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800573e:	4b13      	ldr	r3, [pc, #76]	; (800578c <FLASH_Erase_Sector+0xe8>)
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	4a12      	ldr	r2, [pc, #72]	; (800578c <FLASH_Erase_Sector+0xe8>)
 8005744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005748:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800574a:	4b10      	ldr	r3, [pc, #64]	; (800578c <FLASH_Erase_Sector+0xe8>)
 800574c:	691a      	ldr	r2, [r3, #16]
 800574e:	490f      	ldr	r1, [pc, #60]	; (800578c <FLASH_Erase_Sector+0xe8>)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005756:	4b0d      	ldr	r3, [pc, #52]	; (800578c <FLASH_Erase_Sector+0xe8>)
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	4a0c      	ldr	r2, [pc, #48]	; (800578c <FLASH_Erase_Sector+0xe8>)
 800575c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005760:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005762:	4b0a      	ldr	r3, [pc, #40]	; (800578c <FLASH_Erase_Sector+0xe8>)
 8005764:	691a      	ldr	r2, [r3, #16]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	4313      	orrs	r3, r2
 800576c:	4a07      	ldr	r2, [pc, #28]	; (800578c <FLASH_Erase_Sector+0xe8>)
 800576e:	f043 0302 	orr.w	r3, r3, #2
 8005772:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005774:	4b05      	ldr	r3, [pc, #20]	; (800578c <FLASH_Erase_Sector+0xe8>)
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	4a04      	ldr	r2, [pc, #16]	; (800578c <FLASH_Erase_Sector+0xe8>)
 800577a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800577e:	6113      	str	r3, [r2, #16]
}
 8005780:	bf00      	nop
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	08010adc 	.word	0x08010adc
 800578c:	40023c00 	.word	0x40023c00

08005790 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005794:	4b20      	ldr	r3, [pc, #128]	; (8005818 <FLASH_FlushCaches+0x88>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800579c:	2b00      	cmp	r3, #0
 800579e:	d017      	beq.n	80057d0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80057a0:	4b1d      	ldr	r3, [pc, #116]	; (8005818 <FLASH_FlushCaches+0x88>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1c      	ldr	r2, [pc, #112]	; (8005818 <FLASH_FlushCaches+0x88>)
 80057a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057aa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80057ac:	4b1a      	ldr	r3, [pc, #104]	; (8005818 <FLASH_FlushCaches+0x88>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a19      	ldr	r2, [pc, #100]	; (8005818 <FLASH_FlushCaches+0x88>)
 80057b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	4b17      	ldr	r3, [pc, #92]	; (8005818 <FLASH_FlushCaches+0x88>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a16      	ldr	r2, [pc, #88]	; (8005818 <FLASH_FlushCaches+0x88>)
 80057be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057c2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057c4:	4b14      	ldr	r3, [pc, #80]	; (8005818 <FLASH_FlushCaches+0x88>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a13      	ldr	r2, [pc, #76]	; (8005818 <FLASH_FlushCaches+0x88>)
 80057ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057ce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80057d0:	4b11      	ldr	r3, [pc, #68]	; (8005818 <FLASH_FlushCaches+0x88>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d017      	beq.n	800580c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80057dc:	4b0e      	ldr	r3, [pc, #56]	; (8005818 <FLASH_FlushCaches+0x88>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a0d      	ldr	r2, [pc, #52]	; (8005818 <FLASH_FlushCaches+0x88>)
 80057e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057e6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80057e8:	4b0b      	ldr	r3, [pc, #44]	; (8005818 <FLASH_FlushCaches+0x88>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a0a      	ldr	r2, [pc, #40]	; (8005818 <FLASH_FlushCaches+0x88>)
 80057ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	4b08      	ldr	r3, [pc, #32]	; (8005818 <FLASH_FlushCaches+0x88>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a07      	ldr	r2, [pc, #28]	; (8005818 <FLASH_FlushCaches+0x88>)
 80057fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057fe:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005800:	4b05      	ldr	r3, [pc, #20]	; (8005818 <FLASH_FlushCaches+0x88>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a04      	ldr	r2, [pc, #16]	; (8005818 <FLASH_FlushCaches+0x88>)
 8005806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800580a:	6013      	str	r3, [r2, #0]
  }
}
 800580c:	bf00      	nop
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40023c00 	.word	0x40023c00

0800581c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b088      	sub	sp, #32
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800582a:	2300      	movs	r3, #0
 800582c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800582e:	2300      	movs	r3, #0
 8005830:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a33      	ldr	r2, [pc, #204]	; (8005904 <HAL_GPIO_Init+0xe8>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d017      	beq.n	800586a <HAL_GPIO_Init+0x4e>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a32      	ldr	r2, [pc, #200]	; (8005908 <HAL_GPIO_Init+0xec>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d013      	beq.n	800586a <HAL_GPIO_Init+0x4e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a31      	ldr	r2, [pc, #196]	; (800590c <HAL_GPIO_Init+0xf0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d00f      	beq.n	800586a <HAL_GPIO_Init+0x4e>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a30      	ldr	r2, [pc, #192]	; (8005910 <HAL_GPIO_Init+0xf4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00b      	beq.n	800586a <HAL_GPIO_Init+0x4e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a2f      	ldr	r2, [pc, #188]	; (8005914 <HAL_GPIO_Init+0xf8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d007      	beq.n	800586a <HAL_GPIO_Init+0x4e>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a2e      	ldr	r2, [pc, #184]	; (8005918 <HAL_GPIO_Init+0xfc>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d003      	beq.n	800586a <HAL_GPIO_Init+0x4e>
 8005862:	21ac      	movs	r1, #172	; 0xac
 8005864:	482d      	ldr	r0, [pc, #180]	; (800591c <HAL_GPIO_Init+0x100>)
 8005866:	f7fd f80c 	bl	8002882 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d005      	beq.n	8005880 <HAL_GPIO_Init+0x64>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	0c1b      	lsrs	r3, r3, #16
 800587a:	041b      	lsls	r3, r3, #16
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_GPIO_Init+0x6c>
 8005880:	21ad      	movs	r1, #173	; 0xad
 8005882:	4826      	ldr	r0, [pc, #152]	; (800591c <HAL_GPIO_Init+0x100>)
 8005884:	f7fc fffd 	bl	8002882 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d035      	beq.n	80058fc <HAL_GPIO_Init+0xe0>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d031      	beq.n	80058fc <HAL_GPIO_Init+0xe0>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b11      	cmp	r3, #17
 800589e:	d02d      	beq.n	80058fc <HAL_GPIO_Init+0xe0>
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d029      	beq.n	80058fc <HAL_GPIO_Init+0xe0>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b12      	cmp	r3, #18
 80058ae:	d025      	beq.n	80058fc <HAL_GPIO_Init+0xe0>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80058b8:	d020      	beq.n	80058fc <HAL_GPIO_Init+0xe0>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80058c2:	d01b      	beq.n	80058fc <HAL_GPIO_Init+0xe0>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80058cc:	d016      	beq.n	80058fc <HAL_GPIO_Init+0xe0>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80058d6:	d011      	beq.n	80058fc <HAL_GPIO_Init+0xe0>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80058e0:	d00c      	beq.n	80058fc <HAL_GPIO_Init+0xe0>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80058ea:	d007      	beq.n	80058fc <HAL_GPIO_Init+0xe0>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d003      	beq.n	80058fc <HAL_GPIO_Init+0xe0>
 80058f4:	21ae      	movs	r1, #174	; 0xae
 80058f6:	4809      	ldr	r0, [pc, #36]	; (800591c <HAL_GPIO_Init+0x100>)
 80058f8:	f7fc ffc3 	bl	8002882 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	e20c      	b.n	8005d1c <HAL_GPIO_Init+0x500>
 8005902:	bf00      	nop
 8005904:	40020000 	.word	0x40020000
 8005908:	40020400 	.word	0x40020400
 800590c:	40020800 	.word	0x40020800
 8005910:	40020c00 	.word	0x40020c00
 8005914:	40021000 	.word	0x40021000
 8005918:	40021c00 	.word	0x40021c00
 800591c:	08010b54 	.word	0x08010b54
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005920:	2201      	movs	r2, #1
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	fa02 f303 	lsl.w	r3, r2, r3
 8005928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	4013      	ands	r3, r2
 8005932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	429a      	cmp	r2, r3
 800593a:	f040 81ec 	bne.w	8005d16 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	2b01      	cmp	r3, #1
 8005948:	d005      	beq.n	8005956 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005952:	2b02      	cmp	r3, #2
 8005954:	d144      	bne.n	80059e0 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00f      	beq.n	800597e <HAL_GPIO_Init+0x162>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d00b      	beq.n	800597e <HAL_GPIO_Init+0x162>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	2b02      	cmp	r3, #2
 800596c:	d007      	beq.n	800597e <HAL_GPIO_Init+0x162>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	2b03      	cmp	r3, #3
 8005974:	d003      	beq.n	800597e <HAL_GPIO_Init+0x162>
 8005976:	21c0      	movs	r1, #192	; 0xc0
 8005978:	4884      	ldr	r0, [pc, #528]	; (8005b8c <HAL_GPIO_Init+0x370>)
 800597a:	f7fc ff82 	bl	8002882 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	2203      	movs	r2, #3
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43db      	mvns	r3, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4013      	ands	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059b4:	2201      	movs	r2, #1
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	43db      	mvns	r3, r3
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	4013      	ands	r3, r2
 80059c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	091b      	lsrs	r3, r3, #4
 80059ca:	f003 0201 	and.w	r2, r3, #1
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f003 0303 	and.w	r3, r3, #3
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d027      	beq.n	8005a3c <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00b      	beq.n	8005a0c <HAL_GPIO_Init+0x1f0>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d007      	beq.n	8005a0c <HAL_GPIO_Init+0x1f0>
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d003      	beq.n	8005a0c <HAL_GPIO_Init+0x1f0>
 8005a04:	21d1      	movs	r1, #209	; 0xd1
 8005a06:	4861      	ldr	r0, [pc, #388]	; (8005b8c <HAL_GPIO_Init+0x370>)
 8005a08:	f7fc ff3b 	bl	8002882 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	2203      	movs	r2, #3
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	4013      	ands	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f003 0303 	and.w	r3, r3, #3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	f040 80a3 	bne.w	8005b90 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d077      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2b09      	cmp	r3, #9
 8005a58:	d073      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d06f      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d06b      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d067      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d063      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d05f      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d05b      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d057      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d053      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d04f      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d04b      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d047      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d043      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	2b05      	cmp	r3, #5
 8005ac0:	d03f      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b05      	cmp	r3, #5
 8005ac8:	d03b      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	2b05      	cmp	r3, #5
 8005ad0:	d037      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b06      	cmp	r3, #6
 8005ad8:	d033      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b06      	cmp	r3, #6
 8005ae0:	d02f      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	2b05      	cmp	r3, #5
 8005ae8:	d02b      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b06      	cmp	r3, #6
 8005af0:	d027      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	2b07      	cmp	r3, #7
 8005af8:	d023      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b07      	cmp	r3, #7
 8005b00:	d01f      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	2b07      	cmp	r3, #7
 8005b08:	d01b      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d017      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	2b0a      	cmp	r3, #10
 8005b18:	d013      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b09      	cmp	r3, #9
 8005b20:	d00f      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2b09      	cmp	r3, #9
 8005b28:	d00b      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	2b0c      	cmp	r3, #12
 8005b30:	d007      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b0f      	cmp	r3, #15
 8005b38:	d003      	beq.n	8005b42 <HAL_GPIO_Init+0x326>
 8005b3a:	21de      	movs	r1, #222	; 0xde
 8005b3c:	4813      	ldr	r0, [pc, #76]	; (8005b8c <HAL_GPIO_Init+0x370>)
 8005b3e:	f7fc fea0 	bl	8002882 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	08da      	lsrs	r2, r3, #3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	3208      	adds	r2, #8
 8005b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	220f      	movs	r2, #15
 8005b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5e:	43db      	mvns	r3, r3
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	4013      	ands	r3, r2
 8005b64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	691a      	ldr	r2, [r3, #16]
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	08da      	lsrs	r2, r3, #3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3208      	adds	r2, #8
 8005b84:	69b9      	ldr	r1, [r7, #24]
 8005b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005b8a:	e001      	b.n	8005b90 <HAL_GPIO_Init+0x374>
 8005b8c:	08010b54 	.word	0x08010b54
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	2203      	movs	r2, #3
 8005b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f003 0203 	and.w	r2, r3, #3
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 80a2 	beq.w	8005d16 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	4b56      	ldr	r3, [pc, #344]	; (8005d30 <HAL_GPIO_Init+0x514>)
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bda:	4a55      	ldr	r2, [pc, #340]	; (8005d30 <HAL_GPIO_Init+0x514>)
 8005bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005be0:	6453      	str	r3, [r2, #68]	; 0x44
 8005be2:	4b53      	ldr	r3, [pc, #332]	; (8005d30 <HAL_GPIO_Init+0x514>)
 8005be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bee:	4a51      	ldr	r2, [pc, #324]	; (8005d34 <HAL_GPIO_Init+0x518>)
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	089b      	lsrs	r3, r3, #2
 8005bf4:	3302      	adds	r3, #2
 8005bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	220f      	movs	r2, #15
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	43db      	mvns	r3, r3
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a48      	ldr	r2, [pc, #288]	; (8005d38 <HAL_GPIO_Init+0x51c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d019      	beq.n	8005c4e <HAL_GPIO_Init+0x432>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a47      	ldr	r2, [pc, #284]	; (8005d3c <HAL_GPIO_Init+0x520>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d013      	beq.n	8005c4a <HAL_GPIO_Init+0x42e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a46      	ldr	r2, [pc, #280]	; (8005d40 <HAL_GPIO_Init+0x524>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00d      	beq.n	8005c46 <HAL_GPIO_Init+0x42a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a45      	ldr	r2, [pc, #276]	; (8005d44 <HAL_GPIO_Init+0x528>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d007      	beq.n	8005c42 <HAL_GPIO_Init+0x426>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a44      	ldr	r2, [pc, #272]	; (8005d48 <HAL_GPIO_Init+0x52c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d101      	bne.n	8005c3e <HAL_GPIO_Init+0x422>
 8005c3a:	2304      	movs	r3, #4
 8005c3c:	e008      	b.n	8005c50 <HAL_GPIO_Init+0x434>
 8005c3e:	2307      	movs	r3, #7
 8005c40:	e006      	b.n	8005c50 <HAL_GPIO_Init+0x434>
 8005c42:	2303      	movs	r3, #3
 8005c44:	e004      	b.n	8005c50 <HAL_GPIO_Init+0x434>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e002      	b.n	8005c50 <HAL_GPIO_Init+0x434>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <HAL_GPIO_Init+0x434>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	69fa      	ldr	r2, [r7, #28]
 8005c52:	f002 0203 	and.w	r2, r2, #3
 8005c56:	0092      	lsls	r2, r2, #2
 8005c58:	4093      	lsls	r3, r2
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c60:	4934      	ldr	r1, [pc, #208]	; (8005d34 <HAL_GPIO_Init+0x518>)
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	089b      	lsrs	r3, r3, #2
 8005c66:	3302      	adds	r3, #2
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c6e:	4b37      	ldr	r3, [pc, #220]	; (8005d4c <HAL_GPIO_Init+0x530>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	43db      	mvns	r3, r3
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c92:	4a2e      	ldr	r2, [pc, #184]	; (8005d4c <HAL_GPIO_Init+0x530>)
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c98:	4b2c      	ldr	r3, [pc, #176]	; (8005d4c <HAL_GPIO_Init+0x530>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005cbc:	4a23      	ldr	r2, [pc, #140]	; (8005d4c <HAL_GPIO_Init+0x530>)
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005cc2:	4b22      	ldr	r3, [pc, #136]	; (8005d4c <HAL_GPIO_Init+0x530>)
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	43db      	mvns	r3, r3
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ce6:	4a19      	ldr	r2, [pc, #100]	; (8005d4c <HAL_GPIO_Init+0x530>)
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005cec:	4b17      	ldr	r3, [pc, #92]	; (8005d4c <HAL_GPIO_Init+0x530>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d10:	4a0e      	ldr	r2, [pc, #56]	; (8005d4c <HAL_GPIO_Init+0x530>)
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	61fb      	str	r3, [r7, #28]
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	2b0f      	cmp	r3, #15
 8005d20:	f67f adfe 	bls.w	8005920 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop
 8005d28:	3720      	adds	r7, #32
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	40023800 	.word	0x40023800
 8005d34:	40013800 	.word	0x40013800
 8005d38:	40020000 	.word	0x40020000
 8005d3c:	40020400 	.word	0x40020400
 8005d40:	40020800 	.word	0x40020800
 8005d44:	40020c00 	.word	0x40020c00
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	40013c00 	.word	0x40013c00

08005d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	807b      	strh	r3, [r7, #2]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005d60:	887b      	ldrh	r3, [r7, #2]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d004      	beq.n	8005d70 <HAL_GPIO_WritePin+0x20>
 8005d66:	887b      	ldrh	r3, [r7, #2]
 8005d68:	0c1b      	lsrs	r3, r3, #16
 8005d6a:	041b      	lsls	r3, r3, #16
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d004      	beq.n	8005d7a <HAL_GPIO_WritePin+0x2a>
 8005d70:	f240 119d 	movw	r1, #413	; 0x19d
 8005d74:	480e      	ldr	r0, [pc, #56]	; (8005db0 <HAL_GPIO_WritePin+0x60>)
 8005d76:	f7fc fd84 	bl	8002882 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005d7a:	787b      	ldrb	r3, [r7, #1]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <HAL_GPIO_WritePin+0x40>
 8005d80:	787b      	ldrb	r3, [r7, #1]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d004      	beq.n	8005d90 <HAL_GPIO_WritePin+0x40>
 8005d86:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8005d8a:	4809      	ldr	r0, [pc, #36]	; (8005db0 <HAL_GPIO_WritePin+0x60>)
 8005d8c:	f7fc fd79 	bl	8002882 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005d90:	787b      	ldrb	r3, [r7, #1]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d96:	887a      	ldrh	r2, [r7, #2]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d9c:	e003      	b.n	8005da6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d9e:	887b      	ldrh	r3, [r7, #2]
 8005da0:	041a      	lsls	r2, r3, #16
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	619a      	str	r2, [r3, #24]
}
 8005da6:	bf00      	nop
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	08010b54 	.word	0x08010b54

08005db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e1f7      	b.n	80061b6 <HAL_I2C_Init+0x402>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a81      	ldr	r2, [pc, #516]	; (8005fd0 <HAL_I2C_Init+0x21c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d00e      	beq.n	8005dee <HAL_I2C_Init+0x3a>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a7f      	ldr	r2, [pc, #508]	; (8005fd4 <HAL_I2C_Init+0x220>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d009      	beq.n	8005dee <HAL_I2C_Init+0x3a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a7e      	ldr	r2, [pc, #504]	; (8005fd8 <HAL_I2C_Init+0x224>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d004      	beq.n	8005dee <HAL_I2C_Init+0x3a>
 8005de4:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8005de8:	487c      	ldr	r0, [pc, #496]	; (8005fdc <HAL_I2C_Init+0x228>)
 8005dea:	f7fc fd4a 	bl	8002882 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d004      	beq.n	8005e00 <HAL_I2C_Init+0x4c>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	4a79      	ldr	r2, [pc, #484]	; (8005fe0 <HAL_I2C_Init+0x22c>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d904      	bls.n	8005e0a <HAL_I2C_Init+0x56>
 8005e00:	f240 11bf 	movw	r1, #447	; 0x1bf
 8005e04:	4875      	ldr	r0, [pc, #468]	; (8005fdc <HAL_I2C_Init+0x228>)
 8005e06:	f7fc fd3c 	bl	8002882 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <HAL_I2C_Init+0x72>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e1a:	d004      	beq.n	8005e26 <HAL_I2C_Init+0x72>
 8005e1c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005e20:	486e      	ldr	r0, [pc, #440]	; (8005fdc <HAL_I2C_Init+0x228>)
 8005e22:	f7fc fd2e 	bl	8002882 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e2e:	f023 0303 	bic.w	r3, r3, #3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d004      	beq.n	8005e40 <HAL_I2C_Init+0x8c>
 8005e36:	f240 11c1 	movw	r1, #449	; 0x1c1
 8005e3a:	4868      	ldr	r0, [pc, #416]	; (8005fdc <HAL_I2C_Init+0x228>)
 8005e3c:	f7fc fd21 	bl	8002882 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e48:	d009      	beq.n	8005e5e <HAL_I2C_Init+0xaa>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e52:	d004      	beq.n	8005e5e <HAL_I2C_Init+0xaa>
 8005e54:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8005e58:	4860      	ldr	r0, [pc, #384]	; (8005fdc <HAL_I2C_Init+0x228>)
 8005e5a:	f7fc fd12 	bl	8002882 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d008      	beq.n	8005e78 <HAL_I2C_Init+0xc4>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d004      	beq.n	8005e78 <HAL_I2C_Init+0xc4>
 8005e6e:	f240 11c3 	movw	r1, #451	; 0x1c3
 8005e72:	485a      	ldr	r0, [pc, #360]	; (8005fdc <HAL_I2C_Init+0x228>)
 8005e74:	f7fc fd05 	bl	8002882 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d004      	beq.n	8005e8e <HAL_I2C_Init+0xda>
 8005e84:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8005e88:	4854      	ldr	r0, [pc, #336]	; (8005fdc <HAL_I2C_Init+0x228>)
 8005e8a:	f7fc fcfa 	bl	8002882 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d008      	beq.n	8005ea8 <HAL_I2C_Init+0xf4>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	2b40      	cmp	r3, #64	; 0x40
 8005e9c:	d004      	beq.n	8005ea8 <HAL_I2C_Init+0xf4>
 8005e9e:	f240 11c5 	movw	r1, #453	; 0x1c5
 8005ea2:	484e      	ldr	r0, [pc, #312]	; (8005fdc <HAL_I2C_Init+0x228>)
 8005ea4:	f7fc fced 	bl	8002882 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d008      	beq.n	8005ec2 <HAL_I2C_Init+0x10e>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	2b80      	cmp	r3, #128	; 0x80
 8005eb6:	d004      	beq.n	8005ec2 <HAL_I2C_Init+0x10e>
 8005eb8:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8005ebc:	4847      	ldr	r0, [pc, #284]	; (8005fdc <HAL_I2C_Init+0x228>)
 8005ebe:	f7fc fce0 	bl	8002882 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d12c      	bne.n	8005f28 <HAL_I2C_Init+0x174>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a42      	ldr	r2, [pc, #264]	; (8005fe4 <HAL_I2C_Init+0x230>)
 8005eda:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a42      	ldr	r2, [pc, #264]	; (8005fe8 <HAL_I2C_Init+0x234>)
 8005ee0:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a41      	ldr	r2, [pc, #260]	; (8005fec <HAL_I2C_Init+0x238>)
 8005ee6:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a41      	ldr	r2, [pc, #260]	; (8005ff0 <HAL_I2C_Init+0x23c>)
 8005eec:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a40      	ldr	r2, [pc, #256]	; (8005ff4 <HAL_I2C_Init+0x240>)
 8005ef2:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a40      	ldr	r2, [pc, #256]	; (8005ff8 <HAL_I2C_Init+0x244>)
 8005ef8:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a3f      	ldr	r2, [pc, #252]	; (8005ffc <HAL_I2C_Init+0x248>)
 8005efe:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a3f      	ldr	r2, [pc, #252]	; (8006000 <HAL_I2C_Init+0x24c>)
 8005f04:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a3e      	ldr	r2, [pc, #248]	; (8006004 <HAL_I2C_Init+0x250>)
 8005f0a:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a3e      	ldr	r2, [pc, #248]	; (8006008 <HAL_I2C_Init+0x254>)
 8005f10:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d102      	bne.n	8005f20 <HAL_I2C_Init+0x16c>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a3b      	ldr	r2, [pc, #236]	; (800600c <HAL_I2C_Init+0x258>)
 8005f1e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2224      	movs	r2, #36	; 0x24
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0201 	bic.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f60:	f002 fc0a 	bl	8008778 <HAL_RCC_GetPCLK1Freq>
 8005f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	4a29      	ldr	r2, [pc, #164]	; (8006010 <HAL_I2C_Init+0x25c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d807      	bhi.n	8005f80 <HAL_I2C_Init+0x1cc>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4a28      	ldr	r2, [pc, #160]	; (8006014 <HAL_I2C_Init+0x260>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	bf94      	ite	ls
 8005f78:	2301      	movls	r3, #1
 8005f7a:	2300      	movhi	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	e006      	b.n	8005f8e <HAL_I2C_Init+0x1da>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4a25      	ldr	r2, [pc, #148]	; (8006018 <HAL_I2C_Init+0x264>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	bf94      	ite	ls
 8005f88:	2301      	movls	r3, #1
 8005f8a:	2300      	movhi	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <HAL_I2C_Init+0x1e2>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e10f      	b.n	80061b6 <HAL_I2C_Init+0x402>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4a20      	ldr	r2, [pc, #128]	; (800601c <HAL_I2C_Init+0x268>)
 8005f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9e:	0c9b      	lsrs	r3, r3, #18
 8005fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	4a12      	ldr	r2, [pc, #72]	; (8006010 <HAL_I2C_Init+0x25c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d82a      	bhi.n	8006020 <HAL_I2C_Init+0x26c>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	e031      	b.n	8006034 <HAL_I2C_Init+0x280>
 8005fd0:	40005400 	.word	0x40005400
 8005fd4:	40005800 	.word	0x40005800
 8005fd8:	40005c00 	.word	0x40005c00
 8005fdc:	08010bc8 	.word	0x08010bc8
 8005fe0:	00061a80 	.word	0x00061a80
 8005fe4:	080065f9 	.word	0x080065f9
 8005fe8:	0800660d 	.word	0x0800660d
 8005fec:	08006621 	.word	0x08006621
 8005ff0:	08006635 	.word	0x08006635
 8005ff4:	08006665 	.word	0x08006665
 8005ff8:	08006679 	.word	0x08006679
 8005ffc:	0800668d 	.word	0x0800668d
 8006000:	080066a1 	.word	0x080066a1
 8006004:	080066b5 	.word	0x080066b5
 8006008:	08006649 	.word	0x08006649
 800600c:	080025e9 	.word	0x080025e9
 8006010:	000186a0 	.word	0x000186a0
 8006014:	001e847f 	.word	0x001e847f
 8006018:	003d08ff 	.word	0x003d08ff
 800601c:	431bde83 	.word	0x431bde83
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006026:	fb02 f303 	mul.w	r3, r2, r3
 800602a:	4a65      	ldr	r2, [pc, #404]	; (80061c0 <HAL_I2C_Init+0x40c>)
 800602c:	fba2 2303 	umull	r2, r3, r2, r3
 8006030:	099b      	lsrs	r3, r3, #6
 8006032:	3301      	adds	r3, #1
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6812      	ldr	r2, [r2, #0]
 8006038:	430b      	orrs	r3, r1
 800603a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006046:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	495d      	ldr	r1, [pc, #372]	; (80061c4 <HAL_I2C_Init+0x410>)
 8006050:	428b      	cmp	r3, r1
 8006052:	d819      	bhi.n	8006088 <HAL_I2C_Init+0x2d4>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	1e59      	subs	r1, r3, #1
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	005b      	lsls	r3, r3, #1
 800605e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006062:	1c59      	adds	r1, r3, #1
 8006064:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006068:	400b      	ands	r3, r1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <HAL_I2C_Init+0x2d0>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	1e59      	subs	r1, r3, #1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	fbb1 f3f3 	udiv	r3, r1, r3
 800607c:	3301      	adds	r3, #1
 800607e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006082:	e051      	b.n	8006128 <HAL_I2C_Init+0x374>
 8006084:	2304      	movs	r3, #4
 8006086:	e04f      	b.n	8006128 <HAL_I2C_Init+0x374>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d111      	bne.n	80060b4 <HAL_I2C_Init+0x300>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	1e58      	subs	r0, r3, #1
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6859      	ldr	r1, [r3, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	440b      	add	r3, r1
 800609e:	fbb0 f3f3 	udiv	r3, r0, r3
 80060a2:	3301      	adds	r3, #1
 80060a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	bf0c      	ite	eq
 80060ac:	2301      	moveq	r3, #1
 80060ae:	2300      	movne	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	e012      	b.n	80060da <HAL_I2C_Init+0x326>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	1e58      	subs	r0, r3, #1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6859      	ldr	r1, [r3, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	440b      	add	r3, r1
 80060c2:	0099      	lsls	r1, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ca:	3301      	adds	r3, #1
 80060cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bf0c      	ite	eq
 80060d4:	2301      	moveq	r3, #1
 80060d6:	2300      	movne	r3, #0
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_I2C_Init+0x32e>
 80060de:	2301      	movs	r3, #1
 80060e0:	e022      	b.n	8006128 <HAL_I2C_Init+0x374>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10e      	bne.n	8006108 <HAL_I2C_Init+0x354>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	1e58      	subs	r0, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6859      	ldr	r1, [r3, #4]
 80060f2:	460b      	mov	r3, r1
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	440b      	add	r3, r1
 80060f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80060fc:	3301      	adds	r3, #1
 80060fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006106:	e00f      	b.n	8006128 <HAL_I2C_Init+0x374>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	1e58      	subs	r0, r3, #1
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6859      	ldr	r1, [r3, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	440b      	add	r3, r1
 8006116:	0099      	lsls	r1, r3, #2
 8006118:	440b      	add	r3, r1
 800611a:	fbb0 f3f3 	udiv	r3, r0, r3
 800611e:	3301      	adds	r3, #1
 8006120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006124:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	6809      	ldr	r1, [r1, #0]
 800612c:	4313      	orrs	r3, r2
 800612e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69da      	ldr	r2, [r3, #28]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006156:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6911      	ldr	r1, [r2, #16]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	68d2      	ldr	r2, [r2, #12]
 8006162:	4311      	orrs	r1, r2
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6812      	ldr	r2, [r2, #0]
 8006168:	430b      	orrs	r3, r1
 800616a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0201 	orr.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	10624dd3 	.word	0x10624dd3
 80061c4:	000186a0 	.word	0x000186a0

080061c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	2b10      	cmp	r3, #16
 80061f6:	d003      	beq.n	8006200 <HAL_I2C_EV_IRQHandler+0x38>
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	2b40      	cmp	r3, #64	; 0x40
 80061fc:	f040 80c1 	bne.w	8006382 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10d      	bne.n	8006236 <HAL_I2C_EV_IRQHandler+0x6e>
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006220:	d003      	beq.n	800622a <HAL_I2C_EV_IRQHandler+0x62>
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006228:	d101      	bne.n	800622e <HAL_I2C_EV_IRQHandler+0x66>
 800622a:	2301      	movs	r3, #1
 800622c:	e000      	b.n	8006230 <HAL_I2C_EV_IRQHandler+0x68>
 800622e:	2300      	movs	r3, #0
 8006230:	2b01      	cmp	r3, #1
 8006232:	f000 8132 	beq.w	800649a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00c      	beq.n	800625a <HAL_I2C_EV_IRQHandler+0x92>
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	0a5b      	lsrs	r3, r3, #9
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d006      	beq.n	800625a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 fc95 	bl	8007b7c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fd8f 	bl	8006d76 <I2C_Master_SB>
 8006258:	e092      	b.n	8006380 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	08db      	lsrs	r3, r3, #3
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d009      	beq.n	800627a <HAL_I2C_EV_IRQHandler+0xb2>
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	0a5b      	lsrs	r3, r3, #9
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fe05 	bl	8006e82 <I2C_Master_ADD10>
 8006278:	e082      	b.n	8006380 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	085b      	lsrs	r3, r3, #1
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d009      	beq.n	800629a <HAL_I2C_EV_IRQHandler+0xd2>
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	0a5b      	lsrs	r3, r3, #9
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fe1f 	bl	8006ed6 <I2C_Master_ADDR>
 8006298:	e072      	b.n	8006380 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	089b      	lsrs	r3, r3, #2
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d03b      	beq.n	800631e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062b4:	f000 80f3 	beq.w	800649e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	09db      	lsrs	r3, r3, #7
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00f      	beq.n	80062e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	0a9b      	lsrs	r3, r3, #10
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d009      	beq.n	80062e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	089b      	lsrs	r3, r3, #2
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d103      	bne.n	80062e4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f9f3 	bl	80066c8 <I2C_MasterTransmit_TXE>
 80062e2:	e04d      	b.n	8006380 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	089b      	lsrs	r3, r3, #2
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 80d6 	beq.w	800649e <HAL_I2C_EV_IRQHandler+0x2d6>
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	0a5b      	lsrs	r3, r3, #9
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 80cf 	beq.w	800649e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006300:	7bbb      	ldrb	r3, [r7, #14]
 8006302:	2b21      	cmp	r3, #33	; 0x21
 8006304:	d103      	bne.n	800630e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa7d 	bl	8006806 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800630c:	e0c7      	b.n	800649e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800630e:	7bfb      	ldrb	r3, [r7, #15]
 8006310:	2b40      	cmp	r3, #64	; 0x40
 8006312:	f040 80c4 	bne.w	800649e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 faee 	bl	80068f8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800631c:	e0bf      	b.n	800649e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800632c:	f000 80b7 	beq.w	800649e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	099b      	lsrs	r3, r3, #6
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00f      	beq.n	800635c <HAL_I2C_EV_IRQHandler+0x194>
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	0a9b      	lsrs	r3, r3, #10
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d009      	beq.n	800635c <HAL_I2C_EV_IRQHandler+0x194>
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	089b      	lsrs	r3, r3, #2
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d103      	bne.n	800635c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fb64 	bl	8006a22 <I2C_MasterReceive_RXNE>
 800635a:	e011      	b.n	8006380 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	089b      	lsrs	r3, r3, #2
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 809a 	beq.w	800649e <HAL_I2C_EV_IRQHandler+0x2d6>
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	0a5b      	lsrs	r3, r3, #9
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 8093 	beq.w	800649e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fc10 	bl	8006b9e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800637e:	e08e      	b.n	800649e <HAL_I2C_EV_IRQHandler+0x2d6>
 8006380:	e08d      	b.n	800649e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d004      	beq.n	8006394 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	61fb      	str	r3, [r7, #28]
 8006392:	e007      	b.n	80063a4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	085b      	lsrs	r3, r3, #1
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d012      	beq.n	80063d6 <HAL_I2C_EV_IRQHandler+0x20e>
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	0a5b      	lsrs	r3, r3, #9
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00c      	beq.n	80063d6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80063cc:	69b9      	ldr	r1, [r7, #24]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 ffd2 	bl	8007378 <I2C_Slave_ADDR>
 80063d4:	e066      	b.n	80064a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	091b      	lsrs	r3, r3, #4
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d009      	beq.n	80063f6 <HAL_I2C_EV_IRQHandler+0x22e>
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	0a5b      	lsrs	r3, r3, #9
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 f80c 	bl	800740c <I2C_Slave_STOPF>
 80063f4:	e056      	b.n	80064a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80063f6:	7bbb      	ldrb	r3, [r7, #14]
 80063f8:	2b21      	cmp	r3, #33	; 0x21
 80063fa:	d002      	beq.n	8006402 <HAL_I2C_EV_IRQHandler+0x23a>
 80063fc:	7bbb      	ldrb	r3, [r7, #14]
 80063fe:	2b29      	cmp	r3, #41	; 0x29
 8006400:	d125      	bne.n	800644e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	09db      	lsrs	r3, r3, #7
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00f      	beq.n	800642e <HAL_I2C_EV_IRQHandler+0x266>
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	0a9b      	lsrs	r3, r3, #10
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <HAL_I2C_EV_IRQHandler+0x266>
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	089b      	lsrs	r3, r3, #2
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d103      	bne.n	800642e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fee6 	bl	80071f8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800642c:	e039      	b.n	80064a2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	089b      	lsrs	r3, r3, #2
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d033      	beq.n	80064a2 <HAL_I2C_EV_IRQHandler+0x2da>
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	0a5b      	lsrs	r3, r3, #9
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d02d      	beq.n	80064a2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 ff14 	bl	8007274 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800644c:	e029      	b.n	80064a2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	099b      	lsrs	r3, r3, #6
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00f      	beq.n	800647a <HAL_I2C_EV_IRQHandler+0x2b2>
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	0a9b      	lsrs	r3, r3, #10
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d009      	beq.n	800647a <HAL_I2C_EV_IRQHandler+0x2b2>
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	089b      	lsrs	r3, r3, #2
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 ff1f 	bl	80072b6 <I2C_SlaveReceive_RXNE>
 8006478:	e014      	b.n	80064a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	089b      	lsrs	r3, r3, #2
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00e      	beq.n	80064a4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	0a5b      	lsrs	r3, r3, #9
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d008      	beq.n	80064a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 ff4e 	bl	8007334 <I2C_SlaveReceive_BTF>
 8006498:	e004      	b.n	80064a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800649a:	bf00      	nop
 800649c:	e002      	b.n	80064a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800649e:	bf00      	nop
 80064a0:	e000      	b.n	80064a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80064a4:	3720      	adds	r7, #32
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b08a      	sub	sp, #40	; 0x28
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80064c2:	2300      	movs	r3, #0
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064cc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	0a1b      	lsrs	r3, r3, #8
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00e      	beq.n	80064f8 <HAL_I2C_ER_IRQHandler+0x4e>
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	0a1b      	lsrs	r3, r3, #8
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d008      	beq.n	80064f8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	f043 0301 	orr.w	r3, r3, #1
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80064f6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	0a5b      	lsrs	r3, r3, #9
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00e      	beq.n	8006522 <HAL_I2C_ER_IRQHandler+0x78>
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	0a1b      	lsrs	r3, r3, #8
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d008      	beq.n	8006522 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	f043 0302 	orr.w	r3, r3, #2
 8006516:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006520:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	0a9b      	lsrs	r3, r3, #10
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d03f      	beq.n	80065ae <HAL_I2C_ER_IRQHandler+0x104>
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	0a1b      	lsrs	r3, r3, #8
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d039      	beq.n	80065ae <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800653a:	7efb      	ldrb	r3, [r7, #27]
 800653c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006542:	b29b      	uxth	r3, r3
 8006544:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800654c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006552:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006554:	7ebb      	ldrb	r3, [r7, #26]
 8006556:	2b20      	cmp	r3, #32
 8006558:	d112      	bne.n	8006580 <HAL_I2C_ER_IRQHandler+0xd6>
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10f      	bne.n	8006580 <HAL_I2C_ER_IRQHandler+0xd6>
 8006560:	7cfb      	ldrb	r3, [r7, #19]
 8006562:	2b21      	cmp	r3, #33	; 0x21
 8006564:	d008      	beq.n	8006578 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006566:	7cfb      	ldrb	r3, [r7, #19]
 8006568:	2b29      	cmp	r3, #41	; 0x29
 800656a:	d005      	beq.n	8006578 <HAL_I2C_ER_IRQHandler+0xce>
 800656c:	7cfb      	ldrb	r3, [r7, #19]
 800656e:	2b28      	cmp	r3, #40	; 0x28
 8006570:	d106      	bne.n	8006580 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b21      	cmp	r3, #33	; 0x21
 8006576:	d103      	bne.n	8006580 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 f87b 	bl	8007674 <I2C_Slave_AF>
 800657e:	e016      	b.n	80065ae <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006588:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	f043 0304 	orr.w	r3, r3, #4
 8006590:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006592:	7efb      	ldrb	r3, [r7, #27]
 8006594:	2b10      	cmp	r3, #16
 8006596:	d002      	beq.n	800659e <HAL_I2C_ER_IRQHandler+0xf4>
 8006598:	7efb      	ldrb	r3, [r7, #27]
 800659a:	2b40      	cmp	r3, #64	; 0x40
 800659c:	d107      	bne.n	80065ae <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ac:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	0adb      	lsrs	r3, r3, #11
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00e      	beq.n	80065d8 <HAL_I2C_ER_IRQHandler+0x12e>
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	0a1b      	lsrs	r3, r3, #8
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d008      	beq.n	80065d8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	f043 0308 	orr.w	r3, r3, #8
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80065d6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d008      	beq.n	80065f0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f001 f8b4 	bl	8007758 <I2C_ITError>
  }
}
 80065f0:	bf00      	nop
 80065f2:	3728      	adds	r7, #40	; 0x28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
 8006654:	4613      	mov	r3, r2
 8006656:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d153      	bne.n	8006796 <I2C_MasterTransmit_TXE+0xce>
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
 80066f0:	2b21      	cmp	r3, #33	; 0x21
 80066f2:	d150      	bne.n	8006796 <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b08      	cmp	r3, #8
 80066f8:	d01e      	beq.n	8006738 <I2C_MasterTransmit_TXE+0x70>
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	d01b      	beq.n	8006738 <I2C_MasterTransmit_TXE+0x70>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006706:	d017      	beq.n	8006738 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006716:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2211      	movs	r2, #17
 800671c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006736:	e062      	b.n	80067fe <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006746:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006756:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b40      	cmp	r3, #64	; 0x40
 8006770:	d108      	bne.n	8006784 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006782:	e03c      	b.n	80067fe <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006794:	e033      	b.n	80067fe <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	2b21      	cmp	r3, #33	; 0x21
 800679a:	d005      	beq.n	80067a8 <I2C_MasterTransmit_TXE+0xe0>
 800679c:	7bbb      	ldrb	r3, [r7, #14]
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d12d      	bne.n	80067fe <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	2b22      	cmp	r3, #34	; 0x22
 80067a6:	d12a      	bne.n	80067fe <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d108      	bne.n	80067c4 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80067c2:	e01c      	b.n	80067fe <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b40      	cmp	r3, #64	; 0x40
 80067ce:	d103      	bne.n	80067d8 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f891 	bl	80068f8 <I2C_MemoryTransmit_TXE_BTF>
}
 80067d6:	e012      	b.n	80067fe <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	781a      	ldrb	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	3b01      	subs	r3, #1
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80067fc:	e7ff      	b.n	80067fe <I2C_MasterTransmit_TXE+0x136>
 80067fe:	bf00      	nop
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b21      	cmp	r3, #33	; 0x21
 800681e:	d167      	bne.n	80068f0 <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d012      	beq.n	8006850 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	781a      	ldrb	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006844:	b29b      	uxth	r3, r3
 8006846:	3b01      	subs	r3, #1
 8006848:	b29a      	uxth	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800684e:	e04f      	b.n	80068f0 <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b08      	cmp	r3, #8
 8006854:	d01e      	beq.n	8006894 <I2C_MasterTransmit_BTF+0x8e>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b20      	cmp	r3, #32
 800685a:	d01b      	beq.n	8006894 <I2C_MasterTransmit_BTF+0x8e>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006862:	d017      	beq.n	8006894 <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006872:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2211      	movs	r2, #17
 8006878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2220      	movs	r2, #32
 8006886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4798      	blx	r3
}
 8006892:	e02d      	b.n	80068f0 <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068a2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068b2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2220      	movs	r2, #32
 80068be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b40      	cmp	r3, #64	; 0x40
 80068cc:	d108      	bne.n	80068e0 <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	4798      	blx	r3
}
 80068de:	e007      	b.n	80068f0 <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	4798      	blx	r3
}
 80068f0:	bf00      	nop
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006906:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800690c:	2b00      	cmp	r3, #0
 800690e:	d11d      	bne.n	800694c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006914:	2b01      	cmp	r3, #1
 8006916:	d10b      	bne.n	8006930 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800691c:	b2da      	uxtb	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006928:	1c9a      	adds	r2, r3, #2
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800692e:	e074      	b.n	8006a1a <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006934:	b29b      	uxth	r3, r3
 8006936:	121b      	asrs	r3, r3, #8
 8006938:	b2da      	uxtb	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	651a      	str	r2, [r3, #80]	; 0x50
}
 800694a:	e066      	b.n	8006a1a <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006950:	2b01      	cmp	r3, #1
 8006952:	d10b      	bne.n	800696c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006958:	b2da      	uxtb	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	651a      	str	r2, [r3, #80]	; 0x50
}
 800696a:	e056      	b.n	8006a1a <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006970:	2b02      	cmp	r3, #2
 8006972:	d152      	bne.n	8006a1a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	2b22      	cmp	r3, #34	; 0x22
 8006978:	d10d      	bne.n	8006996 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006988:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006994:	e041      	b.n	8006a1a <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699a:	b29b      	uxth	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d015      	beq.n	80069cc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	2b21      	cmp	r3, #33	; 0x21
 80069a4:	d112      	bne.n	80069cc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	781a      	ldrb	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80069ca:	e026      	b.n	8006a1a <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d121      	bne.n	8006a1a <I2C_MemoryTransmit_TXE_BTF+0x122>
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
 80069d8:	2b21      	cmp	r3, #33	; 0x21
 80069da:	d11e      	bne.n	8006a1a <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069ea:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	4798      	blx	r3
}
 8006a1a:	bf00      	nop
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b22      	cmp	r3, #34	; 0x22
 8006a34:	f040 80af 	bne.w	8006b96 <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d921      	bls.n	8006a8a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	691a      	ldr	r2, [r3, #16]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a50:	b2d2      	uxtb	r2, r2
 8006a52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	3b01      	subs	r3, #1
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	f040 808f 	bne.w	8006b96 <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a86:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006a88:	e085      	b.n	8006b96 <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d078      	beq.n	8006b84 <I2C_MasterReceive_RXNE+0x162>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d002      	beq.n	8006a9e <I2C_MasterReceive_RXNE+0x7c>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d172      	bne.n	8006b84 <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 f83a 	bl	8007b18 <I2C_WaitOnSTOPRequestThroughIT>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d144      	bne.n	8006b34 <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ab8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ac8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b40      	cmp	r3, #64	; 0x40
 8006b02:	d10b      	bne.n	8006b1c <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b1a:	e03c      	b.n	8006b96 <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2212      	movs	r2, #18
 8006b28:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b32:	e030      	b.n	8006b96 <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b42:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	691a      	ldr	r2, [r3, #16]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4e:	b2d2      	uxtb	r2, r2
 8006b50:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b82:	e008      	b.n	8006b96 <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b92:	605a      	str	r2, [r3, #4]
}
 8006b94:	e7ff      	b.n	8006b96 <I2C_MasterReceive_RXNE+0x174>
 8006b96:	bf00      	nop
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006baa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d11b      	bne.n	8006bee <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bc4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	691a      	ldr	r2, [r3, #16]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	3b01      	subs	r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006bec:	e0bf      	b.n	8006d6e <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d129      	bne.n	8006c4c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c06:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d00a      	beq.n	8006c24 <I2C_MasterReceive_BTF+0x86>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d007      	beq.n	8006c24 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c22:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	3b01      	subs	r3, #1
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006c4a:	e090      	b.n	8006d6e <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d178      	bne.n	8006d48 <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d002      	beq.n	8006c62 <I2C_MasterReceive_BTF+0xc4>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b10      	cmp	r3, #16
 8006c60:	d108      	bne.n	8006c74 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	e019      	b.n	8006ca8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	d002      	beq.n	8006c80 <I2C_MasterReceive_BTF+0xe2>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d108      	bne.n	8006c92 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	e00a      	b.n	8006ca8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b10      	cmp	r3, #16
 8006c96:	d007      	beq.n	8006ca8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ca6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	691a      	ldr	r2, [r3, #16]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	b2d2      	uxtb	r2, r2
 8006cda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	3b01      	subs	r3, #1
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006d02:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b40      	cmp	r3, #64	; 0x40
 8006d16:	d10b      	bne.n	8006d30 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	4798      	blx	r3
}
 8006d2e:	e01e      	b.n	8006d6e <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2212      	movs	r2, #18
 8006d3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	4798      	blx	r3
}
 8006d46:	e012      	b.n	8006d6e <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	691a      	ldr	r2, [r3, #16]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d52:	b2d2      	uxtb	r2, r2
 8006d54:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b40      	cmp	r3, #64	; 0x40
 8006d88:	d117      	bne.n	8006dba <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	461a      	mov	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006da2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006da4:	e067      	b.n	8006e76 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	f043 0301 	orr.w	r3, r3, #1
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	611a      	str	r2, [r3, #16]
}
 8006db8:	e05d      	b.n	8006e76 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dc2:	d133      	bne.n	8006e2c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b21      	cmp	r3, #33	; 0x21
 8006dce:	d109      	bne.n	8006de4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006de0:	611a      	str	r2, [r3, #16]
 8006de2:	e008      	b.n	8006df6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	f043 0301 	orr.w	r3, r3, #1
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d004      	beq.n	8006e08 <I2C_Master_SB+0x92>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d108      	bne.n	8006e1a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d032      	beq.n	8006e76 <I2C_Master_SB+0x100>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d02d      	beq.n	8006e76 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e28:	605a      	str	r2, [r3, #4]
}
 8006e2a:	e024      	b.n	8006e76 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10e      	bne.n	8006e52 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	11db      	asrs	r3, r3, #7
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	f003 0306 	and.w	r3, r3, #6
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	f063 030f 	orn	r3, r3, #15
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	611a      	str	r2, [r3, #16]
}
 8006e50:	e011      	b.n	8006e76 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d10d      	bne.n	8006e76 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	11db      	asrs	r3, r3, #7
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	f003 0306 	and.w	r3, r3, #6
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	f063 030e 	orn	r3, r3, #14
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	611a      	str	r2, [r3, #16]
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d004      	beq.n	8006ea8 <I2C_Master_ADD10+0x26>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d108      	bne.n	8006eba <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00c      	beq.n	8006eca <I2C_Master_ADD10+0x48>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d007      	beq.n	8006eca <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ec8:	605a      	str	r2, [r3, #4]
  }
}
 8006eca:	bf00      	nop
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b091      	sub	sp, #68	; 0x44
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ee4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b22      	cmp	r3, #34	; 0x22
 8006efe:	f040 8169 	bne.w	80071d4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10f      	bne.n	8006f2a <I2C_Master_ADDR+0x54>
 8006f0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006f0e:	2b40      	cmp	r3, #64	; 0x40
 8006f10:	d10b      	bne.n	8006f2a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f12:	2300      	movs	r3, #0
 8006f14:	633b      	str	r3, [r7, #48]	; 0x30
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	633b      	str	r3, [r7, #48]	; 0x30
 8006f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f28:	e160      	b.n	80071ec <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d11d      	bne.n	8006f6e <I2C_Master_ADDR+0x98>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f3a:	d118      	bne.n	8006f6e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f60:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	651a      	str	r2, [r3, #80]	; 0x50
 8006f6c:	e13e      	b.n	80071ec <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d113      	bne.n	8006fa0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f78:	2300      	movs	r3, #0
 8006f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	e115      	b.n	80071cc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	f040 808a 	bne.w	80070c0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fb2:	d137      	bne.n	8007024 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fc2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fd2:	d113      	bne.n	8006ffc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fe2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	e0e7      	b.n	80071cc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	623b      	str	r3, [r7, #32]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	623b      	str	r3, [r7, #32]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	623b      	str	r3, [r7, #32]
 8007010:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	e0d3      	b.n	80071cc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	2b08      	cmp	r3, #8
 8007028:	d02e      	beq.n	8007088 <I2C_Master_ADDR+0x1b2>
 800702a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702c:	2b20      	cmp	r3, #32
 800702e:	d02b      	beq.n	8007088 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007032:	2b12      	cmp	r3, #18
 8007034:	d102      	bne.n	800703c <I2C_Master_ADDR+0x166>
 8007036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007038:	2b01      	cmp	r3, #1
 800703a:	d125      	bne.n	8007088 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703e:	2b04      	cmp	r3, #4
 8007040:	d00e      	beq.n	8007060 <I2C_Master_ADDR+0x18a>
 8007042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007044:	2b02      	cmp	r3, #2
 8007046:	d00b      	beq.n	8007060 <I2C_Master_ADDR+0x18a>
 8007048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704a:	2b10      	cmp	r3, #16
 800704c:	d008      	beq.n	8007060 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	e007      	b.n	8007070 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800706e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007070:	2300      	movs	r3, #0
 8007072:	61fb      	str	r3, [r7, #28]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	61fb      	str	r3, [r7, #28]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	61fb      	str	r3, [r7, #28]
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	e0a1      	b.n	80071cc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007096:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007098:	2300      	movs	r3, #0
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	61bb      	str	r3, [r7, #24]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	61bb      	str	r3, [r7, #24]
 80070ac:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	e085      	b.n	80071cc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d14d      	bne.n	8007166 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80070ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	d016      	beq.n	80070fe <I2C_Master_ADDR+0x228>
 80070d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d013      	beq.n	80070fe <I2C_Master_ADDR+0x228>
 80070d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d8:	2b10      	cmp	r3, #16
 80070da:	d010      	beq.n	80070fe <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ea:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	e007      	b.n	800710e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800710c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800711c:	d117      	bne.n	800714e <I2C_Master_ADDR+0x278>
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007124:	d00b      	beq.n	800713e <I2C_Master_ADDR+0x268>
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	2b01      	cmp	r3, #1
 800712a:	d008      	beq.n	800713e <I2C_Master_ADDR+0x268>
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	2b08      	cmp	r3, #8
 8007130:	d005      	beq.n	800713e <I2C_Master_ADDR+0x268>
 8007132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007134:	2b10      	cmp	r3, #16
 8007136:	d002      	beq.n	800713e <I2C_Master_ADDR+0x268>
 8007138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713a:	2b20      	cmp	r3, #32
 800713c:	d107      	bne.n	800714e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800714c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800714e:	2300      	movs	r3, #0
 8007150:	617b      	str	r3, [r7, #20]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	617b      	str	r3, [r7, #20]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	e032      	b.n	80071cc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007174:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007184:	d117      	bne.n	80071b6 <I2C_Master_ADDR+0x2e0>
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800718c:	d00b      	beq.n	80071a6 <I2C_Master_ADDR+0x2d0>
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	2b01      	cmp	r3, #1
 8007192:	d008      	beq.n	80071a6 <I2C_Master_ADDR+0x2d0>
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	2b08      	cmp	r3, #8
 8007198:	d005      	beq.n	80071a6 <I2C_Master_ADDR+0x2d0>
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	2b10      	cmp	r3, #16
 800719e:	d002      	beq.n	80071a6 <I2C_Master_ADDR+0x2d0>
 80071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	d107      	bne.n	80071b6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071b6:	2300      	movs	r3, #0
 80071b8:	613b      	str	r3, [r7, #16]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	613b      	str	r3, [r7, #16]
 80071ca:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80071d2:	e00b      	b.n	80071ec <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071d4:	2300      	movs	r3, #0
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	68fb      	ldr	r3, [r7, #12]
}
 80071ea:	e7ff      	b.n	80071ec <I2C_Master_ADDR+0x316>
 80071ec:	bf00      	nop
 80071ee:	3744      	adds	r7, #68	; 0x44
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007206:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800720c:	b29b      	uxth	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d02c      	beq.n	800726c <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	781a      	ldrb	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800722c:	b29b      	uxth	r3, r3
 800722e:	3b01      	subs	r3, #1
 8007230:	b29a      	uxth	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800723a:	b29b      	uxth	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	d115      	bne.n	800726c <I2C_SlaveTransmit_TXE+0x74>
 8007240:	7bfb      	ldrb	r3, [r7, #15]
 8007242:	2b29      	cmp	r3, #41	; 0x29
 8007244:	d112      	bne.n	800726c <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007254:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2221      	movs	r2, #33	; 0x21
 800725a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2228      	movs	r2, #40	; 0x28
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800726c:	bf00      	nop
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d011      	beq.n	80072aa <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	781a      	ldrb	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80072aa:	bf00      	nop
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072c4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d02d      	beq.n	800732c <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691a      	ldr	r2, [r3, #16]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	3b01      	subs	r3, #1
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d115      	bne.n	800732c <I2C_SlaveReceive_RXNE+0x76>
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	2b2a      	cmp	r3, #42	; 0x2a
 8007304:	d112      	bne.n	800732c <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007314:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2222      	movs	r2, #34	; 0x22
 800731a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2228      	movs	r2, #40	; 0x28
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800732c:	bf00      	nop
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007340:	b29b      	uxth	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d012      	beq.n	800736c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	691a      	ldr	r2, [r3, #16]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	b2d2      	uxtb	r2, r2
 8007352:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007362:	b29b      	uxth	r3, r3
 8007364:	3b01      	subs	r3, #1
 8007366:	b29a      	uxth	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800738c:	b2db      	uxtb	r3, r3
 800738e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007392:	2b28      	cmp	r3, #40	; 0x28
 8007394:	d127      	bne.n	80073e6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	089b      	lsrs	r3, r3, #2
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80073b2:	2301      	movs	r3, #1
 80073b4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	09db      	lsrs	r3, r3, #7
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d103      	bne.n	80073ca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	81bb      	strh	r3, [r7, #12]
 80073c8:	e002      	b.n	80073d0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073dc:	89ba      	ldrh	r2, [r7, #12]
 80073de:	7bf9      	ldrb	r1, [r7, #15]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80073e4:	e00e      	b.n	8007404 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073e6:	2300      	movs	r3, #0
 80073e8:	60bb      	str	r3, [r7, #8]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	60bb      	str	r3, [r7, #8]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	60bb      	str	r3, [r7, #8]
 80073fa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007404:	bf00      	nop
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800741a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800742a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800742c:	2300      	movs	r3, #0
 800742e:	60bb      	str	r3, [r7, #8]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	60bb      	str	r3, [r7, #8]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f042 0201 	orr.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]
 8007448:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007458:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007468:	d172      	bne.n	8007550 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	2b22      	cmp	r3, #34	; 0x22
 800746e:	d002      	beq.n	8007476 <I2C_Slave_STOPF+0x6a>
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	2b2a      	cmp	r3, #42	; 0x2a
 8007474:	d135      	bne.n	80074e2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	b29a      	uxth	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d005      	beq.n	800749a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	f043 0204 	orr.w	r2, r3, #4
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fd fef0 	bl	8005294 <HAL_DMA_GetState>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d049      	beq.n	800754e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074be:	4a6b      	ldr	r2, [pc, #428]	; (800766c <I2C_Slave_STOPF+0x260>)
 80074c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fd fd38 	bl	8004f3c <HAL_DMA_Abort_IT>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d03d      	beq.n	800754e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074dc:	4610      	mov	r0, r2
 80074de:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80074e0:	e035      	b.n	800754e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d005      	beq.n	8007506 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f043 0204 	orr.w	r2, r3, #4
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007514:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751a:	4618      	mov	r0, r3
 800751c:	f7fd feba 	bl	8005294 <HAL_DMA_GetState>
 8007520:	4603      	mov	r3, r0
 8007522:	2b01      	cmp	r3, #1
 8007524:	d014      	beq.n	8007550 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752a:	4a50      	ldr	r2, [pc, #320]	; (800766c <I2C_Slave_STOPF+0x260>)
 800752c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007532:	4618      	mov	r0, r3
 8007534:	f7fd fd02 	bl	8004f3c <HAL_DMA_Abort_IT>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d008      	beq.n	8007550 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007548:	4610      	mov	r0, r2
 800754a:	4798      	blx	r3
 800754c:	e000      	b.n	8007550 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800754e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007554:	b29b      	uxth	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d03e      	beq.n	80075d8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b04      	cmp	r3, #4
 8007566:	d112      	bne.n	800758e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	691a      	ldr	r2, [r3, #16]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007572:	b2d2      	uxtb	r2, r2
 8007574:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007584:	b29b      	uxth	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007598:	2b40      	cmp	r3, #64	; 0x40
 800759a:	d112      	bne.n	80075c2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	691a      	ldr	r2, [r3, #16]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	b2d2      	uxtb	r2, r2
 80075a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	3b01      	subs	r3, #1
 80075bc:	b29a      	uxth	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d005      	beq.n	80075d8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d0:	f043 0204 	orr.w	r2, r3, #4
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f8b9 	bl	8007758 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80075e6:	e03c      	b.n	8007662 <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	2b2a      	cmp	r3, #42	; 0x2a
 80075ec:	d10a      	bne.n	8007604 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2228      	movs	r2, #40	; 0x28
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b28      	cmp	r3, #40	; 0x28
 800760e:	d112      	bne.n	8007636 <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a17      	ldr	r2, [pc, #92]	; (8007670 <I2C_Slave_STOPF+0x264>)
 8007614:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
}
 8007634:	e015      	b.n	8007662 <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763a:	2b22      	cmp	r3, #34	; 0x22
 800763c:	d002      	beq.n	8007644 <I2C_Slave_STOPF+0x238>
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	2b22      	cmp	r3, #34	; 0x22
 8007642:	d10e      	bne.n	8007662 <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2220      	movs	r2, #32
 800764e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	4798      	blx	r3
}
 8007662:	bf00      	nop
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	080079c5 	.word	0x080079c5
 8007670:	ffff0000 	.word	0xffff0000

08007674 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007682:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2b08      	cmp	r3, #8
 800768e:	d002      	beq.n	8007696 <I2C_Slave_AF+0x22>
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2b20      	cmp	r3, #32
 8007694:	d12a      	bne.n	80076ec <I2C_Slave_AF+0x78>
 8007696:	7bfb      	ldrb	r3, [r7, #15]
 8007698:	2b28      	cmp	r3, #40	; 0x28
 800769a:	d127      	bne.n	80076ec <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a2d      	ldr	r2, [pc, #180]	; (8007754 <I2C_Slave_AF+0xe0>)
 80076a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80076b0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076ba:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ca:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2220      	movs	r2, #32
 80076d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80076ea:	e02f      	b.n	800774c <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	2b21      	cmp	r3, #33	; 0x21
 80076f0:	d127      	bne.n	8007742 <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a17      	ldr	r2, [pc, #92]	; (8007754 <I2C_Slave_AF+0xe0>)
 80076f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2221      	movs	r2, #33	; 0x21
 80076fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800771c:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007726:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007736:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	4798      	blx	r3
}
 8007740:	e004      	b.n	800774c <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800774a:	615a      	str	r2, [r3, #20]
}
 800774c:	bf00      	nop
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	ffff0000 	.word	0xffff0000

08007758 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007766:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800776e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007770:	7bbb      	ldrb	r3, [r7, #14]
 8007772:	2b10      	cmp	r3, #16
 8007774:	d002      	beq.n	800777c <I2C_ITError+0x24>
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	2b40      	cmp	r3, #64	; 0x40
 800777a:	d10a      	bne.n	8007792 <I2C_ITError+0x3a>
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	2b22      	cmp	r3, #34	; 0x22
 8007780:	d107      	bne.n	8007792 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007790:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007792:	7bfb      	ldrb	r3, [r7, #15]
 8007794:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007798:	2b28      	cmp	r3, #40	; 0x28
 800779a:	d107      	bne.n	80077ac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2228      	movs	r2, #40	; 0x28
 80077a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80077aa:	e015      	b.n	80077d8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ba:	d00a      	beq.n	80077d2 <I2C_ITError+0x7a>
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	2b60      	cmp	r3, #96	; 0x60
 80077c0:	d007      	beq.n	80077d2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077e6:	d162      	bne.n	80078ae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b01      	cmp	r3, #1
 8007804:	d020      	beq.n	8007848 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780a:	4a6c      	ldr	r2, [pc, #432]	; (80079bc <I2C_ITError+0x264>)
 800780c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007812:	4618      	mov	r0, r3
 8007814:	f7fd fb92 	bl	8004f3c <HAL_DMA_Abort_IT>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 808b 	beq.w	8007936 <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f022 0201 	bic.w	r2, r2, #1
 800782e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2220      	movs	r2, #32
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007842:	4610      	mov	r0, r2
 8007844:	4798      	blx	r3
 8007846:	e076      	b.n	8007936 <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784c:	4a5b      	ldr	r2, [pc, #364]	; (80079bc <I2C_ITError+0x264>)
 800784e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007854:	4618      	mov	r0, r3
 8007856:	f7fd fb71 	bl	8004f3c <HAL_DMA_Abort_IT>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d06a      	beq.n	8007936 <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786a:	2b40      	cmp	r3, #64	; 0x40
 800786c:	d10b      	bne.n	8007886 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	691a      	ldr	r2, [r3, #16]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	b2d2      	uxtb	r2, r2
 800787a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 0201 	bic.w	r2, r2, #1
 8007894:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2220      	movs	r2, #32
 800789a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078a8:	4610      	mov	r0, r2
 80078aa:	4798      	blx	r3
 80078ac:	e043      	b.n	8007936 <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b60      	cmp	r3, #96	; 0x60
 80078b8:	d126      	bne.n	8007908 <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2220      	movs	r2, #32
 80078be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d2:	2b40      	cmp	r3, #64	; 0x40
 80078d4:	d10b      	bne.n	80078ee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	691a      	ldr	r2, [r3, #16]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	b2d2      	uxtb	r2, r2
 80078e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 0201 	bic.w	r2, r2, #1
 80078fc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	4798      	blx	r3
 8007906:	e016      	b.n	8007936 <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007912:	2b40      	cmp	r3, #64	; 0x40
 8007914:	d10b      	bne.n	800792e <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	691a      	ldr	r2, [r3, #16]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	b2d2      	uxtb	r2, r2
 8007922:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10e      	bne.n	8007964 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800794c:	2b00      	cmp	r3, #0
 800794e:	d109      	bne.n	8007964 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007956:	2b00      	cmp	r3, #0
 8007958:	d104      	bne.n	8007964 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007960:	2b00      	cmp	r3, #0
 8007962:	d007      	beq.n	8007974 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685a      	ldr	r2, [r3, #4]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007972:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800797a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	f003 0304 	and.w	r3, r3, #4
 8007984:	2b04      	cmp	r3, #4
 8007986:	d114      	bne.n	80079b2 <I2C_ITError+0x25a>
 8007988:	7bfb      	ldrb	r3, [r7, #15]
 800798a:	2b28      	cmp	r3, #40	; 0x28
 800798c:	d111      	bne.n	80079b2 <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a0b      	ldr	r2, [pc, #44]	; (80079c0 <I2C_ITError+0x268>)
 8007992:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80079b2:	bf00      	nop
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	080079c5 	.word	0x080079c5
 80079c0:	ffff0000 	.word	0xffff0000

080079c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079dc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80079de:	4b4c      	ldr	r3, [pc, #304]	; (8007b10 <I2C_DMAAbort+0x14c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	08db      	lsrs	r3, r3, #3
 80079e4:	4a4b      	ldr	r2, [pc, #300]	; (8007b14 <I2C_DMAAbort+0x150>)
 80079e6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ea:	0a1a      	lsrs	r2, r3, #8
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	00da      	lsls	r2, r3, #3
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d106      	bne.n	8007a0c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	f043 0220 	orr.w	r2, r3, #32
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007a0a:	e00a      	b.n	8007a22 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a20:	d0ea      	beq.n	80079f8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2e:	2200      	movs	r2, #0
 8007a30:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3e:	2200      	movs	r2, #0
 8007a40:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a50:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2200      	movs	r2, #0
 8007a56:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a64:	2200      	movs	r2, #0
 8007a66:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	2200      	movs	r2, #0
 8007a76:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f022 0201 	bic.w	r2, r2, #1
 8007a86:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b60      	cmp	r3, #96	; 0x60
 8007a92:	d10f      	bne.n	8007ab4 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aae:	6978      	ldr	r0, [r7, #20]
 8007ab0:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ab2:	e028      	b.n	8007b06 <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ab4:	7cfb      	ldrb	r3, [r7, #19]
 8007ab6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007aba:	2b28      	cmp	r3, #40	; 0x28
 8007abc:	d117      	bne.n	8007aee <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f042 0201 	orr.w	r2, r2, #1
 8007acc:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007adc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2228      	movs	r2, #40	; 0x28
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007aec:	e007      	b.n	8007afe <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	2220      	movs	r2, #32
 8007af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b02:	6978      	ldr	r0, [r7, #20]
 8007b04:	4798      	blx	r3
}
 8007b06:	bf00      	nop
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	20000004 	.word	0x20000004
 8007b14:	14f8b589 	.word	0x14f8b589

08007b18 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b24:	4b13      	ldr	r3, [pc, #76]	; (8007b74 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	08db      	lsrs	r3, r3, #3
 8007b2a:	4a13      	ldr	r2, [pc, #76]	; (8007b78 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b30:	0a1a      	lsrs	r2, r3, #8
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d107      	bne.n	8007b56 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	f043 0220 	orr.w	r2, r3, #32
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e008      	b.n	8007b68 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b64:	d0e9      	beq.n	8007b3a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	20000004 	.word	0x20000004
 8007b78:	14f8b589 	.word	0x14f8b589

08007b7c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007b8c:	d103      	bne.n	8007b96 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007b94:	e007      	b.n	8007ba6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007b9e:	d102      	bne.n	8007ba6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2208      	movs	r2, #8
 8007ba4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007ba6:	bf00      	nop
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
	...

08007bb4 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8007bb8:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <HAL_PWR_PVD_IRQHandler+0x20>)
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d005      	beq.n	8007bd0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8007bc4:	f000 f808 	bl	8007bd8 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8007bc8:	4b02      	ldr	r3, [pc, #8]	; (8007bd4 <HAL_PWR_PVD_IRQHandler+0x20>)
 8007bca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007bce:	615a      	str	r2, [r3, #20]
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	40013c00 	.word	0x40013c00

08007bd8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8007bdc:	bf00      	nop
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
	...

08007be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e314      	b.n	8008224 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b0f      	cmp	r3, #15
 8007c00:	d903      	bls.n	8007c0a <HAL_RCC_OscConfig+0x22>
 8007c02:	21e6      	movs	r1, #230	; 0xe6
 8007c04:	4897      	ldr	r0, [pc, #604]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007c06:	f7fa fe3c 	bl	8002882 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 8088 	beq.w	8007d28 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00d      	beq.n	8007c3c <HAL_RCC_OscConfig+0x54>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c28:	d008      	beq.n	8007c3c <HAL_RCC_OscConfig+0x54>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c32:	d003      	beq.n	8007c3c <HAL_RCC_OscConfig+0x54>
 8007c34:	21eb      	movs	r1, #235	; 0xeb
 8007c36:	488b      	ldr	r0, [pc, #556]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007c38:	f7fa fe23 	bl	8002882 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c3c:	4b8a      	ldr	r3, [pc, #552]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f003 030c 	and.w	r3, r3, #12
 8007c44:	2b04      	cmp	r3, #4
 8007c46:	d00c      	beq.n	8007c62 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c48:	4b87      	ldr	r3, [pc, #540]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c50:	2b08      	cmp	r3, #8
 8007c52:	d112      	bne.n	8007c7a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c54:	4b84      	ldr	r3, [pc, #528]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c60:	d10b      	bne.n	8007c7a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c62:	4b81      	ldr	r3, [pc, #516]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d05b      	beq.n	8007d26 <HAL_RCC_OscConfig+0x13e>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d157      	bne.n	8007d26 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e2d4      	b.n	8008224 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c82:	d106      	bne.n	8007c92 <HAL_RCC_OscConfig+0xaa>
 8007c84:	4b78      	ldr	r3, [pc, #480]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a77      	ldr	r2, [pc, #476]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c8e:	6013      	str	r3, [r2, #0]
 8007c90:	e01d      	b.n	8007cce <HAL_RCC_OscConfig+0xe6>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c9a:	d10c      	bne.n	8007cb6 <HAL_RCC_OscConfig+0xce>
 8007c9c:	4b72      	ldr	r3, [pc, #456]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a71      	ldr	r2, [pc, #452]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007ca2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ca6:	6013      	str	r3, [r2, #0]
 8007ca8:	4b6f      	ldr	r3, [pc, #444]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a6e      	ldr	r2, [pc, #440]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cb2:	6013      	str	r3, [r2, #0]
 8007cb4:	e00b      	b.n	8007cce <HAL_RCC_OscConfig+0xe6>
 8007cb6:	4b6c      	ldr	r3, [pc, #432]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a6b      	ldr	r2, [pc, #428]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cc0:	6013      	str	r3, [r2, #0]
 8007cc2:	4b69      	ldr	r3, [pc, #420]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a68      	ldr	r2, [pc, #416]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ccc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d013      	beq.n	8007cfe <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cd6:	f7fb fda9 	bl	800382c <HAL_GetTick>
 8007cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cdc:	e008      	b.n	8007cf0 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cde:	f7fb fda5 	bl	800382c <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	2b64      	cmp	r3, #100	; 0x64
 8007cea:	d901      	bls.n	8007cf0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e299      	b.n	8008224 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cf0:	4b5d      	ldr	r3, [pc, #372]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d0f0      	beq.n	8007cde <HAL_RCC_OscConfig+0xf6>
 8007cfc:	e014      	b.n	8007d28 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cfe:	f7fb fd95 	bl	800382c <HAL_GetTick>
 8007d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d04:	e008      	b.n	8007d18 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d06:	f7fb fd91 	bl	800382c <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	2b64      	cmp	r3, #100	; 0x64
 8007d12:	d901      	bls.n	8007d18 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e285      	b.n	8008224 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d18:	4b53      	ldr	r3, [pc, #332]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1f0      	bne.n	8007d06 <HAL_RCC_OscConfig+0x11e>
 8007d24:	e000      	b.n	8007d28 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d26:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d079      	beq.n	8007e28 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d008      	beq.n	8007d4e <HAL_RCC_OscConfig+0x166>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d004      	beq.n	8007d4e <HAL_RCC_OscConfig+0x166>
 8007d44:	f240 111d 	movw	r1, #285	; 0x11d
 8007d48:	4846      	ldr	r0, [pc, #280]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007d4a:	f7fa fd9a 	bl	8002882 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	2b1f      	cmp	r3, #31
 8007d54:	d904      	bls.n	8007d60 <HAL_RCC_OscConfig+0x178>
 8007d56:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8007d5a:	4842      	ldr	r0, [pc, #264]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007d5c:	f7fa fd91 	bl	8002882 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d60:	4b41      	ldr	r3, [pc, #260]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f003 030c 	and.w	r3, r3, #12
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00b      	beq.n	8007d84 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d6c:	4b3e      	ldr	r3, [pc, #248]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d11c      	bne.n	8007db2 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d78:	4b3b      	ldr	r3, [pc, #236]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d116      	bne.n	8007db2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d84:	4b38      	ldr	r3, [pc, #224]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0302 	and.w	r3, r3, #2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d005      	beq.n	8007d9c <HAL_RCC_OscConfig+0x1b4>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d001      	beq.n	8007d9c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e243      	b.n	8008224 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d9c:	4b32      	ldr	r3, [pc, #200]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	00db      	lsls	r3, r3, #3
 8007daa:	492f      	ldr	r1, [pc, #188]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007db0:	e03a      	b.n	8007e28 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d020      	beq.n	8007dfc <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007dba:	4b2c      	ldr	r3, [pc, #176]	; (8007e6c <HAL_RCC_OscConfig+0x284>)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc0:	f7fb fd34 	bl	800382c <HAL_GetTick>
 8007dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dc6:	e008      	b.n	8007dda <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dc8:	f7fb fd30 	bl	800382c <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d901      	bls.n	8007dda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e224      	b.n	8008224 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dda:	4b23      	ldr	r3, [pc, #140]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0f0      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007de6:	4b20      	ldr	r3, [pc, #128]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	491c      	ldr	r1, [pc, #112]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	600b      	str	r3, [r1, #0]
 8007dfa:	e015      	b.n	8007e28 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dfc:	4b1b      	ldr	r3, [pc, #108]	; (8007e6c <HAL_RCC_OscConfig+0x284>)
 8007dfe:	2200      	movs	r2, #0
 8007e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e02:	f7fb fd13 	bl	800382c <HAL_GetTick>
 8007e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e08:	e008      	b.n	8007e1c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e0a:	f7fb fd0f 	bl	800382c <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d901      	bls.n	8007e1c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e203      	b.n	8008224 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e1c:	4b12      	ldr	r3, [pc, #72]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0302 	and.w	r3, r3, #2
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1f0      	bne.n	8007e0a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0308 	and.w	r3, r3, #8
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d045      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d008      	beq.n	8007e4e <HAL_RCC_OscConfig+0x266>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d004      	beq.n	8007e4e <HAL_RCC_OscConfig+0x266>
 8007e44:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007e48:	4806      	ldr	r0, [pc, #24]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007e4a:	f7fa fd1a 	bl	8002882 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d01e      	beq.n	8007e94 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e56:	4b06      	ldr	r3, [pc, #24]	; (8007e70 <HAL_RCC_OscConfig+0x288>)
 8007e58:	2201      	movs	r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e5c:	f7fb fce6 	bl	800382c <HAL_GetTick>
 8007e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e62:	e010      	b.n	8007e86 <HAL_RCC_OscConfig+0x29e>
 8007e64:	08010c3c 	.word	0x08010c3c
 8007e68:	40023800 	.word	0x40023800
 8007e6c:	42470000 	.word	0x42470000
 8007e70:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e74:	f7fb fcda 	bl	800382c <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d901      	bls.n	8007e86 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e1ce      	b.n	8008224 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e86:	4b5e      	ldr	r3, [pc, #376]	; (8008000 <HAL_RCC_OscConfig+0x418>)
 8007e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d0f0      	beq.n	8007e74 <HAL_RCC_OscConfig+0x28c>
 8007e92:	e015      	b.n	8007ec0 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e94:	4b5b      	ldr	r3, [pc, #364]	; (8008004 <HAL_RCC_OscConfig+0x41c>)
 8007e96:	2200      	movs	r2, #0
 8007e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e9a:	f7fb fcc7 	bl	800382c <HAL_GetTick>
 8007e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ea0:	e008      	b.n	8007eb4 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ea2:	f7fb fcc3 	bl	800382c <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d901      	bls.n	8007eb4 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e1b7      	b.n	8008224 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007eb4:	4b52      	ldr	r3, [pc, #328]	; (8008000 <HAL_RCC_OscConfig+0x418>)
 8007eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eb8:	f003 0302 	and.w	r3, r3, #2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1f0      	bne.n	8007ea2 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0304 	and.w	r3, r3, #4
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 80b0 	beq.w	800802e <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00c      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x30c>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d008      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x30c>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	2b05      	cmp	r3, #5
 8007ee8:	d004      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x30c>
 8007eea:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8007eee:	4846      	ldr	r0, [pc, #280]	; (8008008 <HAL_RCC_OscConfig+0x420>)
 8007ef0:	f7fa fcc7 	bl	8002882 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ef4:	4b42      	ldr	r3, [pc, #264]	; (8008000 <HAL_RCC_OscConfig+0x418>)
 8007ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10f      	bne.n	8007f20 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f00:	2300      	movs	r3, #0
 8007f02:	60bb      	str	r3, [r7, #8]
 8007f04:	4b3e      	ldr	r3, [pc, #248]	; (8008000 <HAL_RCC_OscConfig+0x418>)
 8007f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f08:	4a3d      	ldr	r2, [pc, #244]	; (8008000 <HAL_RCC_OscConfig+0x418>)
 8007f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8007f10:	4b3b      	ldr	r3, [pc, #236]	; (8008000 <HAL_RCC_OscConfig+0x418>)
 8007f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f18:	60bb      	str	r3, [r7, #8]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f20:	4b3a      	ldr	r3, [pc, #232]	; (800800c <HAL_RCC_OscConfig+0x424>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d118      	bne.n	8007f5e <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f2c:	4b37      	ldr	r3, [pc, #220]	; (800800c <HAL_RCC_OscConfig+0x424>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a36      	ldr	r2, [pc, #216]	; (800800c <HAL_RCC_OscConfig+0x424>)
 8007f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f38:	f7fb fc78 	bl	800382c <HAL_GetTick>
 8007f3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f3e:	e008      	b.n	8007f52 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f40:	f7fb fc74 	bl	800382c <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e168      	b.n	8008224 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f52:	4b2e      	ldr	r3, [pc, #184]	; (800800c <HAL_RCC_OscConfig+0x424>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d0f0      	beq.n	8007f40 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d106      	bne.n	8007f74 <HAL_RCC_OscConfig+0x38c>
 8007f66:	4b26      	ldr	r3, [pc, #152]	; (8008000 <HAL_RCC_OscConfig+0x418>)
 8007f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f6a:	4a25      	ldr	r2, [pc, #148]	; (8008000 <HAL_RCC_OscConfig+0x418>)
 8007f6c:	f043 0301 	orr.w	r3, r3, #1
 8007f70:	6713      	str	r3, [r2, #112]	; 0x70
 8007f72:	e01c      	b.n	8007fae <HAL_RCC_OscConfig+0x3c6>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	2b05      	cmp	r3, #5
 8007f7a:	d10c      	bne.n	8007f96 <HAL_RCC_OscConfig+0x3ae>
 8007f7c:	4b20      	ldr	r3, [pc, #128]	; (8008000 <HAL_RCC_OscConfig+0x418>)
 8007f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f80:	4a1f      	ldr	r2, [pc, #124]	; (8008000 <HAL_RCC_OscConfig+0x418>)
 8007f82:	f043 0304 	orr.w	r3, r3, #4
 8007f86:	6713      	str	r3, [r2, #112]	; 0x70
 8007f88:	4b1d      	ldr	r3, [pc, #116]	; (8008000 <HAL_RCC_OscConfig+0x418>)
 8007f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8c:	4a1c      	ldr	r2, [pc, #112]	; (8008000 <HAL_RCC_OscConfig+0x418>)
 8007f8e:	f043 0301 	orr.w	r3, r3, #1
 8007f92:	6713      	str	r3, [r2, #112]	; 0x70
 8007f94:	e00b      	b.n	8007fae <HAL_RCC_OscConfig+0x3c6>
 8007f96:	4b1a      	ldr	r3, [pc, #104]	; (8008000 <HAL_RCC_OscConfig+0x418>)
 8007f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9a:	4a19      	ldr	r2, [pc, #100]	; (8008000 <HAL_RCC_OscConfig+0x418>)
 8007f9c:	f023 0301 	bic.w	r3, r3, #1
 8007fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8007fa2:	4b17      	ldr	r3, [pc, #92]	; (8008000 <HAL_RCC_OscConfig+0x418>)
 8007fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa6:	4a16      	ldr	r2, [pc, #88]	; (8008000 <HAL_RCC_OscConfig+0x418>)
 8007fa8:	f023 0304 	bic.w	r3, r3, #4
 8007fac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d015      	beq.n	8007fe2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fb6:	f7fb fc39 	bl	800382c <HAL_GetTick>
 8007fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fbc:	e00a      	b.n	8007fd4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fbe:	f7fb fc35 	bl	800382c <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d901      	bls.n	8007fd4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e127      	b.n	8008224 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fd4:	4b0a      	ldr	r3, [pc, #40]	; (8008000 <HAL_RCC_OscConfig+0x418>)
 8007fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0ee      	beq.n	8007fbe <HAL_RCC_OscConfig+0x3d6>
 8007fe0:	e01c      	b.n	800801c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fe2:	f7fb fc23 	bl	800382c <HAL_GetTick>
 8007fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fe8:	e012      	b.n	8008010 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fea:	f7fb fc1f 	bl	800382c <HAL_GetTick>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d909      	bls.n	8008010 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e111      	b.n	8008224 <HAL_RCC_OscConfig+0x63c>
 8008000:	40023800 	.word	0x40023800
 8008004:	42470e80 	.word	0x42470e80
 8008008:	08010c3c 	.word	0x08010c3c
 800800c:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008010:	4b86      	ldr	r3, [pc, #536]	; (800822c <HAL_RCC_OscConfig+0x644>)
 8008012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008014:	f003 0302 	and.w	r3, r3, #2
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1e6      	bne.n	8007fea <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d105      	bne.n	800802e <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008022:	4b82      	ldr	r3, [pc, #520]	; (800822c <HAL_RCC_OscConfig+0x644>)
 8008024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008026:	4a81      	ldr	r2, [pc, #516]	; (800822c <HAL_RCC_OscConfig+0x644>)
 8008028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800802c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00c      	beq.n	8008050 <HAL_RCC_OscConfig+0x468>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d008      	beq.n	8008050 <HAL_RCC_OscConfig+0x468>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	2b02      	cmp	r3, #2
 8008044:	d004      	beq.n	8008050 <HAL_RCC_OscConfig+0x468>
 8008046:	f240 11cd 	movw	r1, #461	; 0x1cd
 800804a:	4879      	ldr	r0, [pc, #484]	; (8008230 <HAL_RCC_OscConfig+0x648>)
 800804c:	f7fa fc19 	bl	8002882 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 80e4 	beq.w	8008222 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800805a:	4b74      	ldr	r3, [pc, #464]	; (800822c <HAL_RCC_OscConfig+0x644>)
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f003 030c 	and.w	r3, r3, #12
 8008062:	2b08      	cmp	r3, #8
 8008064:	f000 80a5 	beq.w	80081b2 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	2b02      	cmp	r3, #2
 800806e:	f040 8089 	bne.w	8008184 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d009      	beq.n	800808e <HAL_RCC_OscConfig+0x4a6>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008082:	d004      	beq.n	800808e <HAL_RCC_OscConfig+0x4a6>
 8008084:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8008088:	4869      	ldr	r0, [pc, #420]	; (8008230 <HAL_RCC_OscConfig+0x648>)
 800808a:	f7fa fbfa 	bl	8002882 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	2b3f      	cmp	r3, #63	; 0x3f
 8008094:	d904      	bls.n	80080a0 <HAL_RCC_OscConfig+0x4b8>
 8008096:	f240 11d7 	movw	r1, #471	; 0x1d7
 800809a:	4865      	ldr	r0, [pc, #404]	; (8008230 <HAL_RCC_OscConfig+0x648>)
 800809c:	f7fa fbf1 	bl	8002882 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a4:	2b31      	cmp	r3, #49	; 0x31
 80080a6:	d904      	bls.n	80080b2 <HAL_RCC_OscConfig+0x4ca>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80080b0:	d904      	bls.n	80080bc <HAL_RCC_OscConfig+0x4d4>
 80080b2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80080b6:	485e      	ldr	r0, [pc, #376]	; (8008230 <HAL_RCC_OscConfig+0x648>)
 80080b8:	f7fa fbe3 	bl	8002882 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d010      	beq.n	80080e6 <HAL_RCC_OscConfig+0x4fe>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c8:	2b04      	cmp	r3, #4
 80080ca:	d00c      	beq.n	80080e6 <HAL_RCC_OscConfig+0x4fe>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d0:	2b06      	cmp	r3, #6
 80080d2:	d008      	beq.n	80080e6 <HAL_RCC_OscConfig+0x4fe>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d8:	2b08      	cmp	r3, #8
 80080da:	d004      	beq.n	80080e6 <HAL_RCC_OscConfig+0x4fe>
 80080dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80080e0:	4853      	ldr	r0, [pc, #332]	; (8008230 <HAL_RCC_OscConfig+0x648>)
 80080e2:	f7fa fbce 	bl	8002882 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d903      	bls.n	80080f6 <HAL_RCC_OscConfig+0x50e>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f2:	2b0f      	cmp	r3, #15
 80080f4:	d904      	bls.n	8008100 <HAL_RCC_OscConfig+0x518>
 80080f6:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80080fa:	484d      	ldr	r0, [pc, #308]	; (8008230 <HAL_RCC_OscConfig+0x648>)
 80080fc:	f7fa fbc1 	bl	8002882 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008100:	4b4c      	ldr	r3, [pc, #304]	; (8008234 <HAL_RCC_OscConfig+0x64c>)
 8008102:	2200      	movs	r2, #0
 8008104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008106:	f7fb fb91 	bl	800382c <HAL_GetTick>
 800810a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800810c:	e008      	b.n	8008120 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800810e:	f7fb fb8d 	bl	800382c <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d901      	bls.n	8008120 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e081      	b.n	8008224 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008120:	4b42      	ldr	r3, [pc, #264]	; (800822c <HAL_RCC_OscConfig+0x644>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1f0      	bne.n	800810e <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	69da      	ldr	r2, [r3, #28]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a1b      	ldr	r3, [r3, #32]
 8008134:	431a      	orrs	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	019b      	lsls	r3, r3, #6
 800813c:	431a      	orrs	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008142:	085b      	lsrs	r3, r3, #1
 8008144:	3b01      	subs	r3, #1
 8008146:	041b      	lsls	r3, r3, #16
 8008148:	431a      	orrs	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814e:	061b      	lsls	r3, r3, #24
 8008150:	4936      	ldr	r1, [pc, #216]	; (800822c <HAL_RCC_OscConfig+0x644>)
 8008152:	4313      	orrs	r3, r2
 8008154:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008156:	4b37      	ldr	r3, [pc, #220]	; (8008234 <HAL_RCC_OscConfig+0x64c>)
 8008158:	2201      	movs	r2, #1
 800815a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800815c:	f7fb fb66 	bl	800382c <HAL_GetTick>
 8008160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008162:	e008      	b.n	8008176 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008164:	f7fb fb62 	bl	800382c <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d901      	bls.n	8008176 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e056      	b.n	8008224 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008176:	4b2d      	ldr	r3, [pc, #180]	; (800822c <HAL_RCC_OscConfig+0x644>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d0f0      	beq.n	8008164 <HAL_RCC_OscConfig+0x57c>
 8008182:	e04e      	b.n	8008222 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008184:	4b2b      	ldr	r3, [pc, #172]	; (8008234 <HAL_RCC_OscConfig+0x64c>)
 8008186:	2200      	movs	r2, #0
 8008188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800818a:	f7fb fb4f 	bl	800382c <HAL_GetTick>
 800818e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008190:	e008      	b.n	80081a4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008192:	f7fb fb4b 	bl	800382c <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d901      	bls.n	80081a4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e03f      	b.n	8008224 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081a4:	4b21      	ldr	r3, [pc, #132]	; (800822c <HAL_RCC_OscConfig+0x644>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1f0      	bne.n	8008192 <HAL_RCC_OscConfig+0x5aa>
 80081b0:	e037      	b.n	8008222 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d101      	bne.n	80081be <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e032      	b.n	8008224 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80081be:	4b1b      	ldr	r3, [pc, #108]	; (800822c <HAL_RCC_OscConfig+0x644>)
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d028      	beq.n	800821e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d121      	bne.n	800821e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d11a      	bne.n	800821e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80081ee:	4013      	ands	r3, r2
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d111      	bne.n	800821e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008204:	085b      	lsrs	r3, r3, #1
 8008206:	3b01      	subs	r3, #1
 8008208:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800820a:	429a      	cmp	r2, r3
 800820c:	d107      	bne.n	800821e <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008218:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800821a:	429a      	cmp	r2, r3
 800821c:	d001      	beq.n	8008222 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e000      	b.n	8008224 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	40023800 	.word	0x40023800
 8008230:	08010c3c 	.word	0x08010c3c
 8008234:	42470060 	.word	0x42470060

08008238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e174      	b.n	8008536 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d003      	beq.n	800825c <HAL_RCC_ClockConfig+0x24>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b0f      	cmp	r3, #15
 800825a:	d904      	bls.n	8008266 <HAL_RCC_ClockConfig+0x2e>
 800825c:	f240 215a 	movw	r1, #602	; 0x25a
 8008260:	487b      	ldr	r0, [pc, #492]	; (8008450 <HAL_RCC_ClockConfig+0x218>)
 8008262:	f7fa fb0e 	bl	8002882 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d019      	beq.n	80082a0 <HAL_RCC_ClockConfig+0x68>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d016      	beq.n	80082a0 <HAL_RCC_ClockConfig+0x68>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	2b02      	cmp	r3, #2
 8008276:	d013      	beq.n	80082a0 <HAL_RCC_ClockConfig+0x68>
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	2b03      	cmp	r3, #3
 800827c:	d010      	beq.n	80082a0 <HAL_RCC_ClockConfig+0x68>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b04      	cmp	r3, #4
 8008282:	d00d      	beq.n	80082a0 <HAL_RCC_ClockConfig+0x68>
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2b05      	cmp	r3, #5
 8008288:	d00a      	beq.n	80082a0 <HAL_RCC_ClockConfig+0x68>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b06      	cmp	r3, #6
 800828e:	d007      	beq.n	80082a0 <HAL_RCC_ClockConfig+0x68>
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	2b07      	cmp	r3, #7
 8008294:	d004      	beq.n	80082a0 <HAL_RCC_ClockConfig+0x68>
 8008296:	f240 215b 	movw	r1, #603	; 0x25b
 800829a:	486d      	ldr	r0, [pc, #436]	; (8008450 <HAL_RCC_ClockConfig+0x218>)
 800829c:	f7fa faf1 	bl	8002882 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082a0:	4b6c      	ldr	r3, [pc, #432]	; (8008454 <HAL_RCC_ClockConfig+0x21c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d90c      	bls.n	80082c8 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ae:	4b69      	ldr	r3, [pc, #420]	; (8008454 <HAL_RCC_ClockConfig+0x21c>)
 80082b0:	683a      	ldr	r2, [r7, #0]
 80082b2:	b2d2      	uxtb	r2, r2
 80082b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082b6:	4b67      	ldr	r3, [pc, #412]	; (8008454 <HAL_RCC_ClockConfig+0x21c>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0307 	and.w	r3, r3, #7
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d001      	beq.n	80082c8 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e136      	b.n	8008536 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0302 	and.w	r3, r3, #2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d049      	beq.n	8008368 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0304 	and.w	r3, r3, #4
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d005      	beq.n	80082ec <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082e0:	4b5d      	ldr	r3, [pc, #372]	; (8008458 <HAL_RCC_ClockConfig+0x220>)
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	4a5c      	ldr	r2, [pc, #368]	; (8008458 <HAL_RCC_ClockConfig+0x220>)
 80082e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0308 	and.w	r3, r3, #8
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082f8:	4b57      	ldr	r3, [pc, #348]	; (8008458 <HAL_RCC_ClockConfig+0x220>)
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	4a56      	ldr	r2, [pc, #344]	; (8008458 <HAL_RCC_ClockConfig+0x220>)
 80082fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d024      	beq.n	8008356 <HAL_RCC_ClockConfig+0x11e>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	2b80      	cmp	r3, #128	; 0x80
 8008312:	d020      	beq.n	8008356 <HAL_RCC_ClockConfig+0x11e>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	2b90      	cmp	r3, #144	; 0x90
 800831a:	d01c      	beq.n	8008356 <HAL_RCC_ClockConfig+0x11e>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	2ba0      	cmp	r3, #160	; 0xa0
 8008322:	d018      	beq.n	8008356 <HAL_RCC_ClockConfig+0x11e>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	2bb0      	cmp	r3, #176	; 0xb0
 800832a:	d014      	beq.n	8008356 <HAL_RCC_ClockConfig+0x11e>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	2bc0      	cmp	r3, #192	; 0xc0
 8008332:	d010      	beq.n	8008356 <HAL_RCC_ClockConfig+0x11e>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	2bd0      	cmp	r3, #208	; 0xd0
 800833a:	d00c      	beq.n	8008356 <HAL_RCC_ClockConfig+0x11e>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	2be0      	cmp	r3, #224	; 0xe0
 8008342:	d008      	beq.n	8008356 <HAL_RCC_ClockConfig+0x11e>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	2bf0      	cmp	r3, #240	; 0xf0
 800834a:	d004      	beq.n	8008356 <HAL_RCC_ClockConfig+0x11e>
 800834c:	f240 217e 	movw	r1, #638	; 0x27e
 8008350:	483f      	ldr	r0, [pc, #252]	; (8008450 <HAL_RCC_ClockConfig+0x218>)
 8008352:	f7fa fa96 	bl	8002882 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008356:	4b40      	ldr	r3, [pc, #256]	; (8008458 <HAL_RCC_ClockConfig+0x220>)
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	493d      	ldr	r1, [pc, #244]	; (8008458 <HAL_RCC_ClockConfig+0x220>)
 8008364:	4313      	orrs	r3, r2
 8008366:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	2b00      	cmp	r3, #0
 8008372:	d059      	beq.n	8008428 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d010      	beq.n	800839e <HAL_RCC_ClockConfig+0x166>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d00c      	beq.n	800839e <HAL_RCC_ClockConfig+0x166>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	2b02      	cmp	r3, #2
 800838a:	d008      	beq.n	800839e <HAL_RCC_ClockConfig+0x166>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	2b03      	cmp	r3, #3
 8008392:	d004      	beq.n	800839e <HAL_RCC_ClockConfig+0x166>
 8008394:	f240 2185 	movw	r1, #645	; 0x285
 8008398:	482d      	ldr	r0, [pc, #180]	; (8008450 <HAL_RCC_ClockConfig+0x218>)
 800839a:	f7fa fa72 	bl	8002882 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d107      	bne.n	80083b6 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083a6:	4b2c      	ldr	r3, [pc, #176]	; (8008458 <HAL_RCC_ClockConfig+0x220>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d119      	bne.n	80083e6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e0bf      	b.n	8008536 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d003      	beq.n	80083c6 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d107      	bne.n	80083d6 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083c6:	4b24      	ldr	r3, [pc, #144]	; (8008458 <HAL_RCC_ClockConfig+0x220>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d109      	bne.n	80083e6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e0af      	b.n	8008536 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083d6:	4b20      	ldr	r3, [pc, #128]	; (8008458 <HAL_RCC_ClockConfig+0x220>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e0a7      	b.n	8008536 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083e6:	4b1c      	ldr	r3, [pc, #112]	; (8008458 <HAL_RCC_ClockConfig+0x220>)
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f023 0203 	bic.w	r2, r3, #3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	4919      	ldr	r1, [pc, #100]	; (8008458 <HAL_RCC_ClockConfig+0x220>)
 80083f4:	4313      	orrs	r3, r2
 80083f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80083f8:	f7fb fa18 	bl	800382c <HAL_GetTick>
 80083fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083fe:	e00a      	b.n	8008416 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008400:	f7fb fa14 	bl	800382c <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	f241 3288 	movw	r2, #5000	; 0x1388
 800840e:	4293      	cmp	r3, r2
 8008410:	d901      	bls.n	8008416 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e08f      	b.n	8008536 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008416:	4b10      	ldr	r3, [pc, #64]	; (8008458 <HAL_RCC_ClockConfig+0x220>)
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f003 020c 	and.w	r2, r3, #12
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	429a      	cmp	r2, r3
 8008426:	d1eb      	bne.n	8008400 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008428:	4b0a      	ldr	r3, [pc, #40]	; (8008454 <HAL_RCC_ClockConfig+0x21c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 0307 	and.w	r3, r3, #7
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	429a      	cmp	r2, r3
 8008434:	d212      	bcs.n	800845c <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008436:	4b07      	ldr	r3, [pc, #28]	; (8008454 <HAL_RCC_ClockConfig+0x21c>)
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	b2d2      	uxtb	r2, r2
 800843c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800843e:	4b05      	ldr	r3, [pc, #20]	; (8008454 <HAL_RCC_ClockConfig+0x21c>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0307 	and.w	r3, r3, #7
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	429a      	cmp	r2, r3
 800844a:	d007      	beq.n	800845c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	e072      	b.n	8008536 <HAL_RCC_ClockConfig+0x2fe>
 8008450:	08010c3c 	.word	0x08010c3c
 8008454:	40023c00 	.word	0x40023c00
 8008458:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0304 	and.w	r3, r3, #4
 8008464:	2b00      	cmp	r3, #0
 8008466:	d025      	beq.n	80084b4 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d018      	beq.n	80084a2 <HAL_RCC_ClockConfig+0x26a>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008478:	d013      	beq.n	80084a2 <HAL_RCC_ClockConfig+0x26a>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008482:	d00e      	beq.n	80084a2 <HAL_RCC_ClockConfig+0x26a>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800848c:	d009      	beq.n	80084a2 <HAL_RCC_ClockConfig+0x26a>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008496:	d004      	beq.n	80084a2 <HAL_RCC_ClockConfig+0x26a>
 8008498:	f240 21c3 	movw	r1, #707	; 0x2c3
 800849c:	4828      	ldr	r0, [pc, #160]	; (8008540 <HAL_RCC_ClockConfig+0x308>)
 800849e:	f7fa f9f0 	bl	8002882 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084a2:	4b28      	ldr	r3, [pc, #160]	; (8008544 <HAL_RCC_ClockConfig+0x30c>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	4925      	ldr	r1, [pc, #148]	; (8008544 <HAL_RCC_ClockConfig+0x30c>)
 80084b0:	4313      	orrs	r3, r2
 80084b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0308 	and.w	r3, r3, #8
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d026      	beq.n	800850e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d018      	beq.n	80084fa <HAL_RCC_ClockConfig+0x2c2>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d0:	d013      	beq.n	80084fa <HAL_RCC_ClockConfig+0x2c2>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80084da:	d00e      	beq.n	80084fa <HAL_RCC_ClockConfig+0x2c2>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80084e4:	d009      	beq.n	80084fa <HAL_RCC_ClockConfig+0x2c2>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80084ee:	d004      	beq.n	80084fa <HAL_RCC_ClockConfig+0x2c2>
 80084f0:	f240 21ca 	movw	r1, #714	; 0x2ca
 80084f4:	4812      	ldr	r0, [pc, #72]	; (8008540 <HAL_RCC_ClockConfig+0x308>)
 80084f6:	f7fa f9c4 	bl	8002882 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084fa:	4b12      	ldr	r3, [pc, #72]	; (8008544 <HAL_RCC_ClockConfig+0x30c>)
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	00db      	lsls	r3, r3, #3
 8008508:	490e      	ldr	r1, [pc, #56]	; (8008544 <HAL_RCC_ClockConfig+0x30c>)
 800850a:	4313      	orrs	r3, r2
 800850c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800850e:	f000 f821 	bl	8008554 <HAL_RCC_GetSysClockFreq>
 8008512:	4602      	mov	r2, r0
 8008514:	4b0b      	ldr	r3, [pc, #44]	; (8008544 <HAL_RCC_ClockConfig+0x30c>)
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	091b      	lsrs	r3, r3, #4
 800851a:	f003 030f 	and.w	r3, r3, #15
 800851e:	490a      	ldr	r1, [pc, #40]	; (8008548 <HAL_RCC_ClockConfig+0x310>)
 8008520:	5ccb      	ldrb	r3, [r1, r3]
 8008522:	fa22 f303 	lsr.w	r3, r2, r3
 8008526:	4a09      	ldr	r2, [pc, #36]	; (800854c <HAL_RCC_ClockConfig+0x314>)
 8008528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800852a:	4b09      	ldr	r3, [pc, #36]	; (8008550 <HAL_RCC_ClockConfig+0x318>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4618      	mov	r0, r3
 8008530:	f7fa fbd4 	bl	8002cdc <HAL_InitTick>

  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	08010c3c 	.word	0x08010c3c
 8008544:	40023800 	.word	0x40023800
 8008548:	080118a8 	.word	0x080118a8
 800854c:	20000004 	.word	0x20000004
 8008550:	20000008 	.word	0x20000008

08008554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008558:	b094      	sub	sp, #80	; 0x50
 800855a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800855c:	2300      	movs	r3, #0
 800855e:	647b      	str	r3, [r7, #68]	; 0x44
 8008560:	2300      	movs	r3, #0
 8008562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008564:	2300      	movs	r3, #0
 8008566:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008568:	2300      	movs	r3, #0
 800856a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800856c:	4b79      	ldr	r3, [pc, #484]	; (8008754 <HAL_RCC_GetSysClockFreq+0x200>)
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f003 030c 	and.w	r3, r3, #12
 8008574:	2b08      	cmp	r3, #8
 8008576:	d00d      	beq.n	8008594 <HAL_RCC_GetSysClockFreq+0x40>
 8008578:	2b08      	cmp	r3, #8
 800857a:	f200 80e1 	bhi.w	8008740 <HAL_RCC_GetSysClockFreq+0x1ec>
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <HAL_RCC_GetSysClockFreq+0x34>
 8008582:	2b04      	cmp	r3, #4
 8008584:	d003      	beq.n	800858e <HAL_RCC_GetSysClockFreq+0x3a>
 8008586:	e0db      	b.n	8008740 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008588:	4b73      	ldr	r3, [pc, #460]	; (8008758 <HAL_RCC_GetSysClockFreq+0x204>)
 800858a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800858c:	e0db      	b.n	8008746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800858e:	4b73      	ldr	r3, [pc, #460]	; (800875c <HAL_RCC_GetSysClockFreq+0x208>)
 8008590:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008592:	e0d8      	b.n	8008746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008594:	4b6f      	ldr	r3, [pc, #444]	; (8008754 <HAL_RCC_GetSysClockFreq+0x200>)
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800859c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800859e:	4b6d      	ldr	r3, [pc, #436]	; (8008754 <HAL_RCC_GetSysClockFreq+0x200>)
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d063      	beq.n	8008672 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085aa:	4b6a      	ldr	r3, [pc, #424]	; (8008754 <HAL_RCC_GetSysClockFreq+0x200>)
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	099b      	lsrs	r3, r3, #6
 80085b0:	2200      	movs	r2, #0
 80085b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80085b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80085b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085bc:	633b      	str	r3, [r7, #48]	; 0x30
 80085be:	2300      	movs	r3, #0
 80085c0:	637b      	str	r3, [r7, #52]	; 0x34
 80085c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80085c6:	4622      	mov	r2, r4
 80085c8:	462b      	mov	r3, r5
 80085ca:	f04f 0000 	mov.w	r0, #0
 80085ce:	f04f 0100 	mov.w	r1, #0
 80085d2:	0159      	lsls	r1, r3, #5
 80085d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80085d8:	0150      	lsls	r0, r2, #5
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	4621      	mov	r1, r4
 80085e0:	1a51      	subs	r1, r2, r1
 80085e2:	6139      	str	r1, [r7, #16]
 80085e4:	4629      	mov	r1, r5
 80085e6:	eb63 0301 	sbc.w	r3, r3, r1
 80085ea:	617b      	str	r3, [r7, #20]
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	f04f 0300 	mov.w	r3, #0
 80085f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085f8:	4659      	mov	r1, fp
 80085fa:	018b      	lsls	r3, r1, #6
 80085fc:	4651      	mov	r1, sl
 80085fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008602:	4651      	mov	r1, sl
 8008604:	018a      	lsls	r2, r1, #6
 8008606:	4651      	mov	r1, sl
 8008608:	ebb2 0801 	subs.w	r8, r2, r1
 800860c:	4659      	mov	r1, fp
 800860e:	eb63 0901 	sbc.w	r9, r3, r1
 8008612:	f04f 0200 	mov.w	r2, #0
 8008616:	f04f 0300 	mov.w	r3, #0
 800861a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800861e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008626:	4690      	mov	r8, r2
 8008628:	4699      	mov	r9, r3
 800862a:	4623      	mov	r3, r4
 800862c:	eb18 0303 	adds.w	r3, r8, r3
 8008630:	60bb      	str	r3, [r7, #8]
 8008632:	462b      	mov	r3, r5
 8008634:	eb49 0303 	adc.w	r3, r9, r3
 8008638:	60fb      	str	r3, [r7, #12]
 800863a:	f04f 0200 	mov.w	r2, #0
 800863e:	f04f 0300 	mov.w	r3, #0
 8008642:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008646:	4629      	mov	r1, r5
 8008648:	024b      	lsls	r3, r1, #9
 800864a:	4621      	mov	r1, r4
 800864c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008650:	4621      	mov	r1, r4
 8008652:	024a      	lsls	r2, r1, #9
 8008654:	4610      	mov	r0, r2
 8008656:	4619      	mov	r1, r3
 8008658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800865a:	2200      	movs	r2, #0
 800865c:	62bb      	str	r3, [r7, #40]	; 0x28
 800865e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008660:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008664:	f7f7 fdbc 	bl	80001e0 <__aeabi_uldivmod>
 8008668:	4602      	mov	r2, r0
 800866a:	460b      	mov	r3, r1
 800866c:	4613      	mov	r3, r2
 800866e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008670:	e058      	b.n	8008724 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008672:	4b38      	ldr	r3, [pc, #224]	; (8008754 <HAL_RCC_GetSysClockFreq+0x200>)
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	099b      	lsrs	r3, r3, #6
 8008678:	2200      	movs	r2, #0
 800867a:	4618      	mov	r0, r3
 800867c:	4611      	mov	r1, r2
 800867e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008682:	623b      	str	r3, [r7, #32]
 8008684:	2300      	movs	r3, #0
 8008686:	627b      	str	r3, [r7, #36]	; 0x24
 8008688:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800868c:	4642      	mov	r2, r8
 800868e:	464b      	mov	r3, r9
 8008690:	f04f 0000 	mov.w	r0, #0
 8008694:	f04f 0100 	mov.w	r1, #0
 8008698:	0159      	lsls	r1, r3, #5
 800869a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800869e:	0150      	lsls	r0, r2, #5
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4641      	mov	r1, r8
 80086a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80086aa:	4649      	mov	r1, r9
 80086ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80086b0:	f04f 0200 	mov.w	r2, #0
 80086b4:	f04f 0300 	mov.w	r3, #0
 80086b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80086bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80086c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80086c4:	ebb2 040a 	subs.w	r4, r2, sl
 80086c8:	eb63 050b 	sbc.w	r5, r3, fp
 80086cc:	f04f 0200 	mov.w	r2, #0
 80086d0:	f04f 0300 	mov.w	r3, #0
 80086d4:	00eb      	lsls	r3, r5, #3
 80086d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80086da:	00e2      	lsls	r2, r4, #3
 80086dc:	4614      	mov	r4, r2
 80086de:	461d      	mov	r5, r3
 80086e0:	4643      	mov	r3, r8
 80086e2:	18e3      	adds	r3, r4, r3
 80086e4:	603b      	str	r3, [r7, #0]
 80086e6:	464b      	mov	r3, r9
 80086e8:	eb45 0303 	adc.w	r3, r5, r3
 80086ec:	607b      	str	r3, [r7, #4]
 80086ee:	f04f 0200 	mov.w	r2, #0
 80086f2:	f04f 0300 	mov.w	r3, #0
 80086f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80086fa:	4629      	mov	r1, r5
 80086fc:	028b      	lsls	r3, r1, #10
 80086fe:	4621      	mov	r1, r4
 8008700:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008704:	4621      	mov	r1, r4
 8008706:	028a      	lsls	r2, r1, #10
 8008708:	4610      	mov	r0, r2
 800870a:	4619      	mov	r1, r3
 800870c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800870e:	2200      	movs	r2, #0
 8008710:	61bb      	str	r3, [r7, #24]
 8008712:	61fa      	str	r2, [r7, #28]
 8008714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008718:	f7f7 fd62 	bl	80001e0 <__aeabi_uldivmod>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4613      	mov	r3, r2
 8008722:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008724:	4b0b      	ldr	r3, [pc, #44]	; (8008754 <HAL_RCC_GetSysClockFreq+0x200>)
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	0c1b      	lsrs	r3, r3, #16
 800872a:	f003 0303 	and.w	r3, r3, #3
 800872e:	3301      	adds	r3, #1
 8008730:	005b      	lsls	r3, r3, #1
 8008732:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008734:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008738:	fbb2 f3f3 	udiv	r3, r2, r3
 800873c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800873e:	e002      	b.n	8008746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008740:	4b05      	ldr	r3, [pc, #20]	; (8008758 <HAL_RCC_GetSysClockFreq+0x204>)
 8008742:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008748:	4618      	mov	r0, r3
 800874a:	3750      	adds	r7, #80	; 0x50
 800874c:	46bd      	mov	sp, r7
 800874e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008752:	bf00      	nop
 8008754:	40023800 	.word	0x40023800
 8008758:	00f42400 	.word	0x00f42400
 800875c:	007a1200 	.word	0x007a1200

08008760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008760:	b480      	push	{r7}
 8008762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008764:	4b03      	ldr	r3, [pc, #12]	; (8008774 <HAL_RCC_GetHCLKFreq+0x14>)
 8008766:	681b      	ldr	r3, [r3, #0]
}
 8008768:	4618      	mov	r0, r3
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	20000004 	.word	0x20000004

08008778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800877c:	f7ff fff0 	bl	8008760 <HAL_RCC_GetHCLKFreq>
 8008780:	4602      	mov	r2, r0
 8008782:	4b05      	ldr	r3, [pc, #20]	; (8008798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	0a9b      	lsrs	r3, r3, #10
 8008788:	f003 0307 	and.w	r3, r3, #7
 800878c:	4903      	ldr	r1, [pc, #12]	; (800879c <HAL_RCC_GetPCLK1Freq+0x24>)
 800878e:	5ccb      	ldrb	r3, [r1, r3]
 8008790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008794:	4618      	mov	r0, r3
 8008796:	bd80      	pop	{r7, pc}
 8008798:	40023800 	.word	0x40023800
 800879c:	080118b8 	.word	0x080118b8

080087a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80087a4:	f7ff ffdc 	bl	8008760 <HAL_RCC_GetHCLKFreq>
 80087a8:	4602      	mov	r2, r0
 80087aa:	4b05      	ldr	r3, [pc, #20]	; (80087c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	0b5b      	lsrs	r3, r3, #13
 80087b0:	f003 0307 	and.w	r3, r3, #7
 80087b4:	4903      	ldr	r1, [pc, #12]	; (80087c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80087b6:	5ccb      	ldrb	r3, [r1, r3]
 80087b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087bc:	4618      	mov	r0, r3
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	40023800 	.word	0x40023800
 80087c4:	080118b8 	.word	0x080118b8

080087c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	220f      	movs	r2, #15
 80087d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80087d8:	4b12      	ldr	r3, [pc, #72]	; (8008824 <HAL_RCC_GetClockConfig+0x5c>)
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f003 0203 	and.w	r2, r3, #3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80087e4:	4b0f      	ldr	r3, [pc, #60]	; (8008824 <HAL_RCC_GetClockConfig+0x5c>)
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80087f0:	4b0c      	ldr	r3, [pc, #48]	; (8008824 <HAL_RCC_GetClockConfig+0x5c>)
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80087fc:	4b09      	ldr	r3, [pc, #36]	; (8008824 <HAL_RCC_GetClockConfig+0x5c>)
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	08db      	lsrs	r3, r3, #3
 8008802:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800880a:	4b07      	ldr	r3, [pc, #28]	; (8008828 <HAL_RCC_GetClockConfig+0x60>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0207 	and.w	r2, r3, #7
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	601a      	str	r2, [r3, #0]
}
 8008816:	bf00      	nop
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	40023800 	.word	0x40023800
 8008828:	40023c00 	.word	0x40023c00

0800882c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b086      	sub	sp, #24
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008834:	2300      	movs	r3, #0
 8008836:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008838:	2300      	movs	r3, #0
 800883a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d003      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b0f      	cmp	r3, #15
 800884a:	d904      	bls.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 800884c:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8008850:	4834      	ldr	r0, [pc, #208]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8008852:	f7fa f816 	bl	8002882 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d105      	bne.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800886a:	2b00      	cmp	r3, #0
 800886c:	d066      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d903      	bls.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	2b07      	cmp	r3, #7
 800887c:	d904      	bls.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800887e:	f640 11de 	movw	r1, #2526	; 0x9de
 8008882:	4828      	ldr	r0, [pc, #160]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8008884:	f7f9 fffd 	bl	8002882 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	2b31      	cmp	r3, #49	; 0x31
 800888e:	d904      	bls.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8008898:	d904      	bls.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800889a:	f640 11df 	movw	r1, #2527	; 0x9df
 800889e:	4821      	ldr	r0, [pc, #132]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80088a0:	f7f9 ffef 	bl	8002882 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d903      	bls.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	2b3f      	cmp	r3, #63	; 0x3f
 80088b2:	d904      	bls.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x92>
 80088b4:	f640 11e1 	movw	r1, #2529	; 0x9e1
 80088b8:	481a      	ldr	r0, [pc, #104]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80088ba:	f7f9 ffe2 	bl	8002882 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80088be:	4b1a      	ldr	r3, [pc, #104]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80088c0:	2200      	movs	r2, #0
 80088c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088c4:	f7fa ffb2 	bl	800382c <HAL_GetTick>
 80088c8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088ca:	e008      	b.n	80088de <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80088cc:	f7fa ffae 	bl	800382c <HAL_GetTick>
 80088d0:	4602      	mov	r2, r0
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d901      	bls.n	80088de <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e1b3      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088de:	4b13      	ldr	r3, [pc, #76]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1f0      	bne.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	019b      	lsls	r3, r3, #6
 80088f4:	431a      	orrs	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	071b      	lsls	r3, r3, #28
 80088fc:	490b      	ldr	r1, [pc, #44]	; (800892c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008904:	4b08      	ldr	r3, [pc, #32]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8008906:	2201      	movs	r2, #1
 8008908:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800890a:	f7fa ff8f 	bl	800382c <HAL_GetTick>
 800890e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008910:	e00e      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008912:	f7fa ff8b 	bl	800382c <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	2b02      	cmp	r3, #2
 800891e:	d907      	bls.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e190      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008924:	08010cb0 	.word	0x08010cb0
 8008928:	42470068 	.word	0x42470068
 800892c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008930:	4b88      	ldr	r3, [pc, #544]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d0ea      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0302 	and.w	r3, r3, #2
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 8173 	beq.w	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008952:	f000 80a6 	beq.w	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800895e:	f000 80a0 	beq.w	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	4a7c      	ldr	r2, [pc, #496]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8008968:	4293      	cmp	r3, r2
 800896a:	f000 809a 	beq.w	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	4a7a      	ldr	r2, [pc, #488]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008974:	4293      	cmp	r3, r2
 8008976:	f000 8094 	beq.w	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	4a78      	ldr	r2, [pc, #480]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8008980:	4293      	cmp	r3, r2
 8008982:	f000 808e 	beq.w	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	4a76      	ldr	r2, [pc, #472]	; (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800898c:	4293      	cmp	r3, r2
 800898e:	f000 8088 	beq.w	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	4a74      	ldr	r2, [pc, #464]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008998:	4293      	cmp	r3, r2
 800899a:	f000 8082 	beq.w	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	4a72      	ldr	r2, [pc, #456]	; (8008b6c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d07c      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	4a70      	ldr	r2, [pc, #448]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d077      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	4a6f      	ldr	r2, [pc, #444]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d072      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	4a6d      	ldr	r2, [pc, #436]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d06d      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	4a6c      	ldr	r2, [pc, #432]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d068      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	4a6a      	ldr	r2, [pc, #424]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d063      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	4a69      	ldr	r2, [pc, #420]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d05e      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	4a67      	ldr	r2, [pc, #412]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d059      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	4a66      	ldr	r2, [pc, #408]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d054      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	4a64      	ldr	r2, [pc, #400]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d04f      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	4a63      	ldr	r2, [pc, #396]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d04a      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	4a61      	ldr	r2, [pc, #388]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d045      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	4a60      	ldr	r2, [pc, #384]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d040      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	4a5e      	ldr	r2, [pc, #376]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d03b      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	4a5d      	ldr	r2, [pc, #372]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d036      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	4a5b      	ldr	r2, [pc, #364]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d031      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	4a5a      	ldr	r2, [pc, #360]	; (8008bac <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d02c      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	4a58      	ldr	r2, [pc, #352]	; (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d027      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	4a57      	ldr	r2, [pc, #348]	; (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d022      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	4a55      	ldr	r2, [pc, #340]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d01d      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	4a54      	ldr	r2, [pc, #336]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d018      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	4a52      	ldr	r2, [pc, #328]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d013      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	4a51      	ldr	r2, [pc, #324]	; (8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d00e      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	4a4f      	ldr	r2, [pc, #316]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d009      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	4a4e      	ldr	r2, [pc, #312]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d004      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a98:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8008a9c:	484c      	ldr	r0, [pc, #304]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8008a9e:	f7f9 fef0 	bl	8002882 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	4b2b      	ldr	r3, [pc, #172]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aaa:	4a2a      	ldr	r2, [pc, #168]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8008ab2:	4b28      	ldr	r3, [pc, #160]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aba:	60fb      	str	r3, [r7, #12]
 8008abc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008abe:	4b45      	ldr	r3, [pc, #276]	; (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a44      	ldr	r2, [pc, #272]	; (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ac8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008aca:	f7fa feaf 	bl	800382c <HAL_GetTick>
 8008ace:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008ad0:	e008      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008ad2:	f7fa feab 	bl	800382c <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d901      	bls.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e0b0      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008ae4:	4b3b      	ldr	r3, [pc, #236]	; (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d0f0      	beq.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008af0:	4b18      	ldr	r3, [pc, #96]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008af8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d073      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d06c      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b0e:	4b11      	ldr	r3, [pc, #68]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b18:	4b2f      	ldr	r3, [pc, #188]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b1e:	4b2e      	ldr	r3, [pc, #184]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008b24:	4a0b      	ldr	r2, [pc, #44]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008b2a:	4b0a      	ldr	r3, [pc, #40]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d158      	bne.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008b36:	f7fa fe79 	bl	800382c <HAL_GetTick>
 8008b3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b3c:	e04e      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b3e:	f7fa fe75 	bl	800382c <HAL_GetTick>
 8008b42:	4602      	mov	r2, r0
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d945      	bls.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e078      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008b54:	40023800 	.word	0x40023800
 8008b58:	00020300 	.word	0x00020300
 8008b5c:	00030300 	.word	0x00030300
 8008b60:	00040300 	.word	0x00040300
 8008b64:	00050300 	.word	0x00050300
 8008b68:	00060300 	.word	0x00060300
 8008b6c:	00070300 	.word	0x00070300
 8008b70:	00080300 	.word	0x00080300
 8008b74:	00090300 	.word	0x00090300
 8008b78:	000a0300 	.word	0x000a0300
 8008b7c:	000b0300 	.word	0x000b0300
 8008b80:	000c0300 	.word	0x000c0300
 8008b84:	000d0300 	.word	0x000d0300
 8008b88:	000e0300 	.word	0x000e0300
 8008b8c:	000f0300 	.word	0x000f0300
 8008b90:	00100300 	.word	0x00100300
 8008b94:	00110300 	.word	0x00110300
 8008b98:	00120300 	.word	0x00120300
 8008b9c:	00130300 	.word	0x00130300
 8008ba0:	00140300 	.word	0x00140300
 8008ba4:	00150300 	.word	0x00150300
 8008ba8:	00160300 	.word	0x00160300
 8008bac:	00170300 	.word	0x00170300
 8008bb0:	00180300 	.word	0x00180300
 8008bb4:	00190300 	.word	0x00190300
 8008bb8:	001a0300 	.word	0x001a0300
 8008bbc:	001b0300 	.word	0x001b0300
 8008bc0:	001c0300 	.word	0x001c0300
 8008bc4:	001d0300 	.word	0x001d0300
 8008bc8:	001e0300 	.word	0x001e0300
 8008bcc:	001f0300 	.word	0x001f0300
 8008bd0:	08010cb0 	.word	0x08010cb0
 8008bd4:	40007000 	.word	0x40007000
 8008bd8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bdc:	4b1c      	ldr	r3, [pc, #112]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d0aa      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bf4:	d10d      	bne.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008bf6:	4b16      	ldr	r3, [pc, #88]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c0a:	4911      	ldr	r1, [pc, #68]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	608b      	str	r3, [r1, #8]
 8008c10:	e005      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008c12:	4b0f      	ldr	r3, [pc, #60]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	4a0e      	ldr	r2, [pc, #56]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008c18:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008c1c:	6093      	str	r3, [r2, #8]
 8008c1e:	4b0c      	ldr	r3, [pc, #48]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008c20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c2a:	4909      	ldr	r1, [pc, #36]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0308 	and.w	r3, r3, #8
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d003      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	7d1a      	ldrb	r2, [r3, #20]
 8008c40:	4b04      	ldr	r3, [pc, #16]	; (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8008c42:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	40023800 	.word	0x40023800
 8008c54:	424711e0 	.word	0x424711e0

08008c58 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d101      	bne.n	8008c6e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e0e2      	b.n	8008e34 <HAL_RTC_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a72      	ldr	r2, [pc, #456]	; (8008e3c <HAL_RTC_Init+0x1e4>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d004      	beq.n	8008c82 <HAL_RTC_Init+0x2a>
 8008c78:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008c7c:	4870      	ldr	r0, [pc, #448]	; (8008e40 <HAL_RTC_Init+0x1e8>)
 8008c7e:	f7f9 fe00 	bl	8002882 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	2b40      	cmp	r3, #64	; 0x40
 8008c88:	d008      	beq.n	8008c9c <HAL_RTC_Init+0x44>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d004      	beq.n	8008c9c <HAL_RTC_Init+0x44>
 8008c92:	f240 1105 	movw	r1, #261	; 0x105
 8008c96:	486a      	ldr	r0, [pc, #424]	; (8008e40 <HAL_RTC_Init+0x1e8>)
 8008c98:	f7f9 fdf3 	bl	8002882 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8008ca2:	d904      	bls.n	8008cae <HAL_RTC_Init+0x56>
 8008ca4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008ca8:	4865      	ldr	r0, [pc, #404]	; (8008e40 <HAL_RTC_Init+0x1e8>)
 8008caa:	f7f9 fdea 	bl	8002882 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cb6:	d304      	bcc.n	8008cc2 <HAL_RTC_Init+0x6a>
 8008cb8:	f240 1107 	movw	r1, #263	; 0x107
 8008cbc:	4860      	ldr	r0, [pc, #384]	; (8008e40 <HAL_RTC_Init+0x1e8>)
 8008cbe:	f7f9 fde0 	bl	8002882 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d013      	beq.n	8008cf2 <HAL_RTC_Init+0x9a>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cd2:	d00e      	beq.n	8008cf2 <HAL_RTC_Init+0x9a>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cdc:	d009      	beq.n	8008cf2 <HAL_RTC_Init+0x9a>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ce6:	d004      	beq.n	8008cf2 <HAL_RTC_Init+0x9a>
 8008ce8:	f44f 7184 	mov.w	r1, #264	; 0x108
 8008cec:	4854      	ldr	r0, [pc, #336]	; (8008e40 <HAL_RTC_Init+0x1e8>)
 8008cee:	f7f9 fdc8 	bl	8002882 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d009      	beq.n	8008d0e <HAL_RTC_Init+0xb6>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d02:	d004      	beq.n	8008d0e <HAL_RTC_Init+0xb6>
 8008d04:	f240 1109 	movw	r1, #265	; 0x109
 8008d08:	484d      	ldr	r0, [pc, #308]	; (8008e40 <HAL_RTC_Init+0x1e8>)
 8008d0a:	f7f9 fdba 	bl	8002882 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d009      	beq.n	8008d2a <HAL_RTC_Init+0xd2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d1e:	d004      	beq.n	8008d2a <HAL_RTC_Init+0xd2>
 8008d20:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8008d24:	4846      	ldr	r0, [pc, #280]	; (8008e40 <HAL_RTC_Init+0x1e8>)
 8008d26:	f7f9 fdac 	bl	8002882 <assert_failed>

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	7f5b      	ldrb	r3, [r3, #29]
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d123      	bne.n	8008d7c <HAL_RTC_Init+0x124>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a41      	ldr	r2, [pc, #260]	; (8008e44 <HAL_RTC_Init+0x1ec>)
 8008d3e:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a41      	ldr	r2, [pc, #260]	; (8008e48 <HAL_RTC_Init+0x1f0>)
 8008d44:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a40      	ldr	r2, [pc, #256]	; (8008e4c <HAL_RTC_Init+0x1f4>)
 8008d4a:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a40      	ldr	r2, [pc, #256]	; (8008e50 <HAL_RTC_Init+0x1f8>)
 8008d50:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a3f      	ldr	r2, [pc, #252]	; (8008e54 <HAL_RTC_Init+0x1fc>)
 8008d56:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER2_SUPPORT)
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
#endif /* RTC_TAMPER2_SUPPORT */

    if (hrtc->MspInitCallback == NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d102      	bne.n	8008d66 <HAL_RTC_Init+0x10e>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a3d      	ldr	r2, [pc, #244]	; (8008e58 <HAL_RTC_Init+0x200>)
 8008d64:	635a      	str	r2, [r3, #52]	; 0x34
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	4798      	blx	r3

    if (hrtc->MspDeInitCallback == NULL)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d102      	bne.n	8008d7c <HAL_RTC_Init+0x124>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a38      	ldr	r2, [pc, #224]	; (8008e5c <HAL_RTC_Init+0x204>)
 8008d7a:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	22ca      	movs	r2, #202	; 0xca
 8008d88:	625a      	str	r2, [r3, #36]	; 0x24
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2253      	movs	r2, #83	; 0x53
 8008d90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 faea 	bl	800936c <RTC_EnterInitMode>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d12c      	bne.n	8008dfc <HAL_RTC_Init+0x1a4>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	6812      	ldr	r2, [r2, #0]
 8008dac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008db4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	6899      	ldr	r1, [r3, #8]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	431a      	orrs	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	430a      	orrs	r2, r1
 8008dd2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	68d2      	ldr	r2, [r2, #12]
 8008ddc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	6919      	ldr	r1, [r3, #16]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	041a      	lsls	r2, r3, #16
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	430a      	orrs	r2, r1
 8008df0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 faf1 	bl	80093da <RTC_ExitInitMode>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d113      	bne.n	8008e2a <HAL_RTC_Init+0x1d2>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e10:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	699a      	ldr	r2, [r3, #24]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	22ff      	movs	r2, #255	; 0xff
 8008e30:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	40002800 	.word	0x40002800
 8008e40:	08010d28 	.word	0x08010d28
 8008e44:	08009309 	.word	0x08009309
 8008e48:	0800977d 	.word	0x0800977d
 8008e4c:	08009497 	.word	0x08009497
 8008e50:	080096cd 	.word	0x080096cd
 8008e54:	080094ab 	.word	0x080094ab
 8008e58:	08002975 	.word	0x08002975
 8008e5c:	080029dd 	.word	0x080029dd

08008e60 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008e60:	b590      	push	{r4, r7, lr}
 8008e62:	b087      	sub	sp, #28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d007      	beq.n	8008e86 <HAL_RTC_SetTime+0x26>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d004      	beq.n	8008e86 <HAL_RTC_SetTime+0x26>
 8008e7c:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8008e80:	489a      	ldr	r0, [pc, #616]	; (80090ec <HAL_RTC_SetTime+0x28c>)
 8008e82:	f7f9 fcfe 	bl	8002882 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e8e:	d00d      	beq.n	8008eac <HAL_RTC_SetTime+0x4c>
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e98:	d008      	beq.n	8008eac <HAL_RTC_SetTime+0x4c>
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d004      	beq.n	8008eac <HAL_RTC_SetTime+0x4c>
 8008ea2:	f240 21b5 	movw	r1, #693	; 0x2b5
 8008ea6:	4891      	ldr	r0, [pc, #580]	; (80090ec <HAL_RTC_SetTime+0x28c>)
 8008ea8:	f7f9 fceb 	bl	8002882 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d009      	beq.n	8008ec8 <HAL_RTC_SetTime+0x68>
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ebc:	d004      	beq.n	8008ec8 <HAL_RTC_SetTime+0x68>
 8008ebe:	f240 21b6 	movw	r1, #694	; 0x2b6
 8008ec2:	488a      	ldr	r0, [pc, #552]	; (80090ec <HAL_RTC_SetTime+0x28c>)
 8008ec4:	f7f9 fcdd 	bl	8002882 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	7f1b      	ldrb	r3, [r3, #28]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d101      	bne.n	8008ed4 <HAL_RTC_SetTime+0x74>
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	e107      	b.n	80090e4 <HAL_RTC_SetTime+0x284>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2202      	movs	r2, #2
 8008ede:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d15c      	bne.n	8008fa0 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d01a      	beq.n	8008f2a <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <HAL_RTC_SetTime+0xa4>
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	2b0c      	cmp	r3, #12
 8008f02:	d904      	bls.n	8008f0e <HAL_RTC_SetTime+0xae>
 8008f04:	f240 21c1 	movw	r1, #705	; 0x2c1
 8008f08:	4878      	ldr	r0, [pc, #480]	; (80090ec <HAL_RTC_SetTime+0x28c>)
 8008f0a:	f7f9 fcba 	bl	8002882 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	78db      	ldrb	r3, [r3, #3]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d015      	beq.n	8008f42 <HAL_RTC_SetTime+0xe2>
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	78db      	ldrb	r3, [r3, #3]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d011      	beq.n	8008f42 <HAL_RTC_SetTime+0xe2>
 8008f1e:	f240 21c2 	movw	r1, #706	; 0x2c2
 8008f22:	4872      	ldr	r0, [pc, #456]	; (80090ec <HAL_RTC_SetTime+0x28c>)
 8008f24:	f7f9 fcad 	bl	8002882 <assert_failed>
 8008f28:	e00b      	b.n	8008f42 <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	2b17      	cmp	r3, #23
 8008f36:	d904      	bls.n	8008f42 <HAL_RTC_SetTime+0xe2>
 8008f38:	f240 21c7 	movw	r1, #711	; 0x2c7
 8008f3c:	486b      	ldr	r0, [pc, #428]	; (80090ec <HAL_RTC_SetTime+0x28c>)
 8008f3e:	f7f9 fca0 	bl	8002882 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	785b      	ldrb	r3, [r3, #1]
 8008f46:	2b3b      	cmp	r3, #59	; 0x3b
 8008f48:	d904      	bls.n	8008f54 <HAL_RTC_SetTime+0xf4>
 8008f4a:	f240 21c9 	movw	r1, #713	; 0x2c9
 8008f4e:	4867      	ldr	r0, [pc, #412]	; (80090ec <HAL_RTC_SetTime+0x28c>)
 8008f50:	f7f9 fc97 	bl	8002882 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	789b      	ldrb	r3, [r3, #2]
 8008f58:	2b3b      	cmp	r3, #59	; 0x3b
 8008f5a:	d904      	bls.n	8008f66 <HAL_RTC_SetTime+0x106>
 8008f5c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8008f60:	4862      	ldr	r0, [pc, #392]	; (80090ec <HAL_RTC_SetTime+0x28c>)
 8008f62:	f7f9 fc8e 	bl	8002882 <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 fa5a 	bl	8009424 <RTC_ByteToBcd2>
 8008f70:	4603      	mov	r3, r0
 8008f72:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	785b      	ldrb	r3, [r3, #1]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f000 fa53 	bl	8009424 <RTC_ByteToBcd2>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008f82:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	789b      	ldrb	r3, [r3, #2]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 fa4b 	bl	8009424 <RTC_ByteToBcd2>
 8008f8e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008f90:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	78db      	ldrb	r3, [r3, #3]
 8008f98:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	617b      	str	r3, [r7, #20]
 8008f9e:	e062      	b.n	8009066 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d022      	beq.n	8008ff4 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 fa53 	bl	800945e <RTC_Bcd2ToByte>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d007      	beq.n	8008fce <HAL_RTC_SetTime+0x16e>
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 fa4b 	bl	800945e <RTC_Bcd2ToByte>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b0c      	cmp	r3, #12
 8008fcc:	d904      	bls.n	8008fd8 <HAL_RTC_SetTime+0x178>
 8008fce:	f240 21d5 	movw	r1, #725	; 0x2d5
 8008fd2:	4846      	ldr	r0, [pc, #280]	; (80090ec <HAL_RTC_SetTime+0x28c>)
 8008fd4:	f7f9 fc55 	bl	8002882 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	78db      	ldrb	r3, [r3, #3]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d019      	beq.n	8009014 <HAL_RTC_SetTime+0x1b4>
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	78db      	ldrb	r3, [r3, #3]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d015      	beq.n	8009014 <HAL_RTC_SetTime+0x1b4>
 8008fe8:	f240 21d6 	movw	r1, #726	; 0x2d6
 8008fec:	483f      	ldr	r0, [pc, #252]	; (80090ec <HAL_RTC_SetTime+0x28c>)
 8008fee:	f7f9 fc48 	bl	8002882 <assert_failed>
 8008ff2:	e00f      	b.n	8009014 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 fa2d 	bl	800945e <RTC_Bcd2ToByte>
 8009004:	4603      	mov	r3, r0
 8009006:	2b17      	cmp	r3, #23
 8009008:	d904      	bls.n	8009014 <HAL_RTC_SetTime+0x1b4>
 800900a:	f240 21db 	movw	r1, #731	; 0x2db
 800900e:	4837      	ldr	r0, [pc, #220]	; (80090ec <HAL_RTC_SetTime+0x28c>)
 8009010:	f7f9 fc37 	bl	8002882 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	785b      	ldrb	r3, [r3, #1]
 8009018:	4618      	mov	r0, r3
 800901a:	f000 fa20 	bl	800945e <RTC_Bcd2ToByte>
 800901e:	4603      	mov	r3, r0
 8009020:	2b3b      	cmp	r3, #59	; 0x3b
 8009022:	d904      	bls.n	800902e <HAL_RTC_SetTime+0x1ce>
 8009024:	f240 21dd 	movw	r1, #733	; 0x2dd
 8009028:	4830      	ldr	r0, [pc, #192]	; (80090ec <HAL_RTC_SetTime+0x28c>)
 800902a:	f7f9 fc2a 	bl	8002882 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	789b      	ldrb	r3, [r3, #2]
 8009032:	4618      	mov	r0, r3
 8009034:	f000 fa13 	bl	800945e <RTC_Bcd2ToByte>
 8009038:	4603      	mov	r3, r0
 800903a:	2b3b      	cmp	r3, #59	; 0x3b
 800903c:	d904      	bls.n	8009048 <HAL_RTC_SetTime+0x1e8>
 800903e:	f240 21de 	movw	r1, #734	; 0x2de
 8009042:	482a      	ldr	r0, [pc, #168]	; (80090ec <HAL_RTC_SetTime+0x28c>)
 8009044:	f7f9 fc1d 	bl	8002882 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	785b      	ldrb	r3, [r3, #1]
 8009052:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009054:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800905a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	78db      	ldrb	r3, [r3, #3]
 8009060:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009062:	4313      	orrs	r3, r2
 8009064:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	22ca      	movs	r2, #202	; 0xca
 800906c:	625a      	str	r2, [r3, #36]	; 0x24
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2253      	movs	r2, #83	; 0x53
 8009074:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f000 f978 	bl	800936c <RTC_EnterInitMode>
 800907c:	4603      	mov	r3, r0
 800907e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009080:	7cfb      	ldrb	r3, [r7, #19]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d120      	bne.n	80090c8 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009090:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009094:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80090a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6899      	ldr	r1, [r3, #8]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	68da      	ldr	r2, [r3, #12]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	431a      	orrs	r2, r3
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 f98b 	bl	80093da <RTC_ExitInitMode>
 80090c4:	4603      	mov	r3, r0
 80090c6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80090c8:	7cfb      	ldrb	r3, [r7, #19]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d102      	bne.n	80090d4 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2201      	movs	r2, #1
 80090d2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	22ff      	movs	r2, #255	; 0xff
 80090da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	771a      	strb	r2, [r3, #28]

  return status;
 80090e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	371c      	adds	r7, #28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd90      	pop	{r4, r7, pc}
 80090ec:	08010d28 	.word	0x08010d28

080090f0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80090f0:	b590      	push	{r4, r7, lr}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80090fc:	2300      	movs	r3, #0
 80090fe:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d007      	beq.n	8009116 <HAL_RTC_SetDate+0x26>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d004      	beq.n	8009116 <HAL_RTC_SetDate+0x26>
 800910c:	f240 3153 	movw	r1, #851	; 0x353
 8009110:	487c      	ldr	r0, [pc, #496]	; (8009304 <HAL_RTC_SetDate+0x214>)
 8009112:	f7f9 fbb6 	bl	8002882 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	7f1b      	ldrb	r3, [r3, #28]
 800911a:	2b01      	cmp	r3, #1
 800911c:	d101      	bne.n	8009122 <HAL_RTC_SetDate+0x32>
 800911e:	2302      	movs	r3, #2
 8009120:	e0ec      	b.n	80092fc <HAL_RTC_SetDate+0x20c>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2201      	movs	r2, #1
 8009126:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2202      	movs	r2, #2
 800912c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10e      	bne.n	8009152 <HAL_RTC_SetDate+0x62>
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	785b      	ldrb	r3, [r3, #1]
 8009138:	f003 0310 	and.w	r3, r3, #16
 800913c:	2b00      	cmp	r3, #0
 800913e:	d008      	beq.n	8009152 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	785b      	ldrb	r3, [r3, #1]
 8009144:	f023 0310 	bic.w	r3, r3, #16
 8009148:	b2db      	uxtb	r3, r3
 800914a:	330a      	adds	r3, #10
 800914c:	b2da      	uxtb	r2, r3
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d01c      	beq.n	8009194 <HAL_RTC_SetDate+0xa4>
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	2b02      	cmp	r3, #2
 8009160:	d018      	beq.n	8009194 <HAL_RTC_SetDate+0xa4>
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	2b03      	cmp	r3, #3
 8009168:	d014      	beq.n	8009194 <HAL_RTC_SetDate+0xa4>
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	2b04      	cmp	r3, #4
 8009170:	d010      	beq.n	8009194 <HAL_RTC_SetDate+0xa4>
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	2b05      	cmp	r3, #5
 8009178:	d00c      	beq.n	8009194 <HAL_RTC_SetDate+0xa4>
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	2b06      	cmp	r3, #6
 8009180:	d008      	beq.n	8009194 <HAL_RTC_SetDate+0xa4>
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	2b07      	cmp	r3, #7
 8009188:	d004      	beq.n	8009194 <HAL_RTC_SetDate+0xa4>
 800918a:	f240 315f 	movw	r1, #863	; 0x35f
 800918e:	485d      	ldr	r0, [pc, #372]	; (8009304 <HAL_RTC_SetDate+0x214>)
 8009190:	f7f9 fb77 	bl	8002882 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d13f      	bne.n	800921a <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	78db      	ldrb	r3, [r3, #3]
 800919e:	2b63      	cmp	r3, #99	; 0x63
 80091a0:	d904      	bls.n	80091ac <HAL_RTC_SetDate+0xbc>
 80091a2:	f240 3163 	movw	r1, #867	; 0x363
 80091a6:	4857      	ldr	r0, [pc, #348]	; (8009304 <HAL_RTC_SetDate+0x214>)
 80091a8:	f7f9 fb6b 	bl	8002882 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	785b      	ldrb	r3, [r3, #1]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <HAL_RTC_SetDate+0xcc>
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	785b      	ldrb	r3, [r3, #1]
 80091b8:	2b0c      	cmp	r3, #12
 80091ba:	d904      	bls.n	80091c6 <HAL_RTC_SetDate+0xd6>
 80091bc:	f44f 7159 	mov.w	r1, #868	; 0x364
 80091c0:	4850      	ldr	r0, [pc, #320]	; (8009304 <HAL_RTC_SetDate+0x214>)
 80091c2:	f7f9 fb5e 	bl	8002882 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	789b      	ldrb	r3, [r3, #2]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <HAL_RTC_SetDate+0xe6>
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	789b      	ldrb	r3, [r3, #2]
 80091d2:	2b1f      	cmp	r3, #31
 80091d4:	d904      	bls.n	80091e0 <HAL_RTC_SetDate+0xf0>
 80091d6:	f240 3165 	movw	r1, #869	; 0x365
 80091da:	484a      	ldr	r0, [pc, #296]	; (8009304 <HAL_RTC_SetDate+0x214>)
 80091dc:	f7f9 fb51 	bl	8002882 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	78db      	ldrb	r3, [r3, #3]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 f91d 	bl	8009424 <RTC_ByteToBcd2>
 80091ea:	4603      	mov	r3, r0
 80091ec:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	785b      	ldrb	r3, [r3, #1]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 f916 	bl	8009424 <RTC_ByteToBcd2>
 80091f8:	4603      	mov	r3, r0
 80091fa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80091fc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	789b      	ldrb	r3, [r3, #2]
 8009202:	4618      	mov	r0, r3
 8009204:	f000 f90e 	bl	8009424 <RTC_ByteToBcd2>
 8009208:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800920a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009214:	4313      	orrs	r3, r2
 8009216:	617b      	str	r3, [r7, #20]
 8009218:	e045      	b.n	80092a6 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	78db      	ldrb	r3, [r3, #3]
 800921e:	4618      	mov	r0, r3
 8009220:	f000 f91d 	bl	800945e <RTC_Bcd2ToByte>
 8009224:	4603      	mov	r3, r0
 8009226:	2b63      	cmp	r3, #99	; 0x63
 8009228:	d904      	bls.n	8009234 <HAL_RTC_SetDate+0x144>
 800922a:	f240 316e 	movw	r1, #878	; 0x36e
 800922e:	4835      	ldr	r0, [pc, #212]	; (8009304 <HAL_RTC_SetDate+0x214>)
 8009230:	f7f9 fb27 	bl	8002882 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	785b      	ldrb	r3, [r3, #1]
 8009238:	4618      	mov	r0, r3
 800923a:	f000 f910 	bl	800945e <RTC_Bcd2ToByte>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d007      	beq.n	8009254 <HAL_RTC_SetDate+0x164>
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	785b      	ldrb	r3, [r3, #1]
 8009248:	4618      	mov	r0, r3
 800924a:	f000 f908 	bl	800945e <RTC_Bcd2ToByte>
 800924e:	4603      	mov	r3, r0
 8009250:	2b0c      	cmp	r3, #12
 8009252:	d904      	bls.n	800925e <HAL_RTC_SetDate+0x16e>
 8009254:	f240 316f 	movw	r1, #879	; 0x36f
 8009258:	482a      	ldr	r0, [pc, #168]	; (8009304 <HAL_RTC_SetDate+0x214>)
 800925a:	f7f9 fb12 	bl	8002882 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	789b      	ldrb	r3, [r3, #2]
 8009262:	4618      	mov	r0, r3
 8009264:	f000 f8fb 	bl	800945e <RTC_Bcd2ToByte>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d007      	beq.n	800927e <HAL_RTC_SetDate+0x18e>
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	789b      	ldrb	r3, [r3, #2]
 8009272:	4618      	mov	r0, r3
 8009274:	f000 f8f3 	bl	800945e <RTC_Bcd2ToByte>
 8009278:	4603      	mov	r3, r0
 800927a:	2b1f      	cmp	r3, #31
 800927c:	d904      	bls.n	8009288 <HAL_RTC_SetDate+0x198>
 800927e:	f44f 715c 	mov.w	r1, #880	; 0x370
 8009282:	4820      	ldr	r0, [pc, #128]	; (8009304 <HAL_RTC_SetDate+0x214>)
 8009284:	f7f9 fafd 	bl	8002882 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	78db      	ldrb	r3, [r3, #3]
 800928c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	785b      	ldrb	r3, [r3, #1]
 8009292:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009294:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800929a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80092a2:	4313      	orrs	r3, r2
 80092a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	22ca      	movs	r2, #202	; 0xca
 80092ac:	625a      	str	r2, [r3, #36]	; 0x24
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2253      	movs	r2, #83	; 0x53
 80092b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 f858 	bl	800936c <RTC_EnterInitMode>
 80092bc:	4603      	mov	r3, r0
 80092be:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80092c0:	7cfb      	ldrb	r3, [r7, #19]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10c      	bne.n	80092e0 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80092d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80092d4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f000 f87f 	bl	80093da <RTC_ExitInitMode>
 80092dc:	4603      	mov	r3, r0
 80092de:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80092e0:	7cfb      	ldrb	r3, [r7, #19]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d102      	bne.n	80092ec <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2201      	movs	r2, #1
 80092ea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	22ff      	movs	r2, #255	; 0xff
 80092f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	771a      	strb	r2, [r3, #28]

  return status;
 80092fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	371c      	adds	r7, #28
 8009300:	46bd      	mov	sp, r7
 8009302:	bd90      	pop	{r4, r7, pc}
 8009304:	08010d28 	.word	0x08010d28

08009308 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009324:	2300      	movs	r3, #0
 8009326:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68da      	ldr	r2, [r3, #12]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009336:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009338:	f7fa fa78 	bl	800382c <HAL_GetTick>
 800933c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800933e:	e009      	b.n	8009354 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009340:	f7fa fa74 	bl	800382c <HAL_GetTick>
 8009344:	4602      	mov	r2, r0
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800934e:	d901      	bls.n	8009354 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e007      	b.n	8009364 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	f003 0320 	and.w	r3, r3, #32
 800935e:	2b00      	cmp	r3, #0
 8009360:	d0ee      	beq.n	8009340 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009374:	2300      	movs	r3, #0
 8009376:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009378:	2300      	movs	r3, #0
 800937a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009386:	2b00      	cmp	r3, #0
 8009388:	d122      	bne.n	80093d0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68da      	ldr	r2, [r3, #12]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009398:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800939a:	f7fa fa47 	bl	800382c <HAL_GetTick>
 800939e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80093a0:	e00c      	b.n	80093bc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80093a2:	f7fa fa43 	bl	800382c <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093b0:	d904      	bls.n	80093bc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2204      	movs	r2, #4
 80093b6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d102      	bne.n	80093d0 <RTC_EnterInitMode+0x64>
 80093ca:	7bfb      	ldrb	r3, [r7, #15]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d1e8      	bne.n	80093a2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68da      	ldr	r2, [r3, #12]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093f4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	f003 0320 	and.w	r3, r3, #32
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10a      	bne.n	800941a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7ff ff89 	bl	800931c <HAL_RTC_WaitForSynchro>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d004      	beq.n	800941a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2204      	movs	r2, #4
 8009414:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800941a:	7bfb      	ldrb	r3, [r7, #15]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	4603      	mov	r3, r0
 800942c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800942e:	2300      	movs	r3, #0
 8009430:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8009432:	e005      	b.n	8009440 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	3301      	adds	r3, #1
 8009438:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800943a:	79fb      	ldrb	r3, [r7, #7]
 800943c:	3b0a      	subs	r3, #10
 800943e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009440:	79fb      	ldrb	r3, [r7, #7]
 8009442:	2b09      	cmp	r3, #9
 8009444:	d8f6      	bhi.n	8009434 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009446:	7bfb      	ldrb	r3, [r7, #15]
 8009448:	011b      	lsls	r3, r3, #4
 800944a:	b2da      	uxtb	r2, r3
 800944c:	79fb      	ldrb	r3, [r7, #7]
 800944e:	4313      	orrs	r3, r2
 8009450:	b2db      	uxtb	r3, r3
}
 8009452:	4618      	mov	r0, r3
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800945e:	b480      	push	{r7}
 8009460:	b085      	sub	sp, #20
 8009462:	af00      	add	r7, sp, #0
 8009464:	4603      	mov	r3, r0
 8009466:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8009468:	2300      	movs	r3, #0
 800946a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800946c:	79fb      	ldrb	r3, [r7, #7]
 800946e:	091b      	lsrs	r3, r3, #4
 8009470:	b2db      	uxtb	r3, r3
 8009472:	461a      	mov	r2, r3
 8009474:	0092      	lsls	r2, r2, #2
 8009476:	4413      	add	r3, r2
 8009478:	005b      	lsls	r3, r3, #1
 800947a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800947c:	79fb      	ldrb	r3, [r7, #7]
 800947e:	f003 030f 	and.w	r3, r3, #15
 8009482:	b2da      	uxtb	r2, r3
 8009484:	7bfb      	ldrb	r3, [r7, #15]
 8009486:	4413      	add	r3, r2
 8009488:	b2db      	uxtb	r3, r3
}
 800948a:	4618      	mov	r0, r3
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr

08009496 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009496:	b480      	push	{r7}
 8009498:	b083      	sub	sp, #12
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 800949e:	bf00      	nop
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 80094b2:	bf00      	nop
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
	...

080094c0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80094cc:	4b68      	ldr	r3, [pc, #416]	; (8009670 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b0>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a68      	ldr	r2, [pc, #416]	; (8009674 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b4>)
 80094d2:	fba2 2303 	umull	r2, r3, r2, r3
 80094d6:	0adb      	lsrs	r3, r3, #11
 80094d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094dc:	fb02 f303 	mul.w	r3, r2, r3
 80094e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d013      	beq.n	8009510 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d010      	beq.n	8009510 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	d00d      	beq.n	8009510 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b03      	cmp	r3, #3
 80094f8:	d00a      	beq.n	8009510 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b04      	cmp	r3, #4
 80094fe:	d007      	beq.n	8009510 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b06      	cmp	r3, #6
 8009504:	d004      	beq.n	8009510 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 8009506:	f240 31c5 	movw	r1, #965	; 0x3c5
 800950a:	485b      	ldr	r0, [pc, #364]	; (8009678 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b8>)
 800950c:	f7f9 f9b9 	bl	8002882 <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009516:	d304      	bcc.n	8009522 <HAL_RTCEx_SetWakeUpTimer_IT+0x62>
 8009518:	f240 31c6 	movw	r1, #966	; 0x3c6
 800951c:	4856      	ldr	r0, [pc, #344]	; (8009678 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b8>)
 800951e:	f7f9 f9b0 	bl	8002882 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	7f1b      	ldrb	r3, [r3, #28]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d101      	bne.n	800952e <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
 800952a:	2302      	movs	r3, #2
 800952c:	e09b      	b.n	8009666 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2201      	movs	r2, #1
 8009532:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2202      	movs	r2, #2
 8009538:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	22ca      	movs	r2, #202	; 0xca
 8009540:	625a      	str	r2, [r3, #36]	; 0x24
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2253      	movs	r2, #83	; 0x53
 8009548:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009554:	2b00      	cmp	r3, #0
 8009556:	d017      	beq.n	8009588 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	1e5a      	subs	r2, r3, #1
 800955c:	617a      	str	r2, [r7, #20]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10b      	bne.n	800957a <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	22ff      	movs	r2, #255	; 0xff
 8009568:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2203      	movs	r2, #3
 800956e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009576:	2303      	movs	r3, #3
 8009578:	e075      	b.n	8009666 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e7      	bne.n	8009558 <HAL_RTCEx_SetWakeUpTimer_IT+0x98>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	689a      	ldr	r2, [r3, #8]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009596:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80095a8:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80095aa:	4b31      	ldr	r3, [pc, #196]	; (8009670 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b0>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a31      	ldr	r2, [pc, #196]	; (8009674 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b4>)
 80095b0:	fba2 2303 	umull	r2, r3, r2, r3
 80095b4:	0adb      	lsrs	r3, r3, #11
 80095b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80095ba:	fb02 f303 	mul.w	r3, r2, r3
 80095be:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	1e5a      	subs	r2, r3, #1
 80095c4:	617a      	str	r2, [r7, #20]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10b      	bne.n	80095e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	22ff      	movs	r2, #255	; 0xff
 80095d0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2203      	movs	r2, #3
 80095d6:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2200      	movs	r2, #0
 80095dc:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	e041      	b.n	8009666 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	f003 0304 	and.w	r3, r3, #4
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d0e7      	beq.n	80095c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x100>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689a      	ldr	r2, [r3, #8]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f022 0207 	bic.w	r2, r2, #7
 80095fe:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6899      	ldr	r1, [r3, #8]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	430a      	orrs	r2, r1
 800960e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009618:	4b18      	ldr	r3, [pc, #96]	; (800967c <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a17      	ldr	r2, [pc, #92]	; (800967c <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 800961e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009622:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8009624:	4b15      	ldr	r3, [pc, #84]	; (800967c <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	4a14      	ldr	r2, [pc, #80]	; (800967c <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 800962a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800962e:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	689a      	ldr	r2, [r3, #8]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800963e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689a      	ldr	r2, [r3, #8]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800964e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	22ff      	movs	r2, #255	; 0xff
 8009656:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2201      	movs	r2, #1
 800965c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20000004 	.word	0x20000004
 8009674:	10624dd3 	.word	0x10624dd3
 8009678:	08010d9c 	.word	0x08010d9c
 800967c:	40013c00 	.word	0x40013c00

08009680 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00c      	beq.n	80096b0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>
  {
    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	4798      	blx	r3
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80096ae:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80096b0:	4b05      	ldr	r3, [pc, #20]	; (80096c8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80096b2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80096b6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	775a      	strb	r2, [r3, #29]
}
 80096be:	bf00      	nop
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	40013c00 	.word	0x40013c00

080096cc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d008      	beq.n	8009702 <HAL_RTCEx_SetCalibrationOutPut+0x22>
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80096f6:	d004      	beq.n	8009702 <HAL_RTCEx_SetCalibrationOutPut+0x22>
 80096f8:	f240 612a 	movw	r1, #1578	; 0x62a
 80096fc:	481e      	ldr	r0, [pc, #120]	; (8009778 <HAL_RTCEx_SetCalibrationOutPut+0x98>)
 80096fe:	f7f9 f8c0 	bl	8002882 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	7f1b      	ldrb	r3, [r3, #28]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d101      	bne.n	800970e <HAL_RTCEx_SetCalibrationOutPut+0x2e>
 800970a:	2302      	movs	r3, #2
 800970c:	e030      	b.n	8009770 <HAL_RTCEx_SetCalibrationOutPut+0x90>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2202      	movs	r2, #2
 8009718:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	22ca      	movs	r2, #202	; 0xca
 8009720:	625a      	str	r2, [r3, #36]	; 0x24
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2253      	movs	r2, #83	; 0x53
 8009728:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	689a      	ldr	r2, [r3, #8]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8009738:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	6899      	ldr	r1, [r3, #8]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	683a      	ldr	r2, [r7, #0]
 8009746:	430a      	orrs	r2, r1
 8009748:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689a      	ldr	r2, [r3, #8]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009758:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	22ff      	movs	r2, #255	; 0xff
 8009760:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	08010d9c 	.word	0x08010d9c

0800977c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d101      	bne.n	80097a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	e1db      	b.n	8009b5a <HAL_SPI_Init+0x3ca>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a75      	ldr	r2, [pc, #468]	; (800997c <HAL_SPI_Init+0x1ec>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d018      	beq.n	80097de <HAL_SPI_Init+0x4e>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a73      	ldr	r2, [pc, #460]	; (8009980 <HAL_SPI_Init+0x1f0>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d013      	beq.n	80097de <HAL_SPI_Init+0x4e>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a72      	ldr	r2, [pc, #456]	; (8009984 <HAL_SPI_Init+0x1f4>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d00e      	beq.n	80097de <HAL_SPI_Init+0x4e>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a70      	ldr	r2, [pc, #448]	; (8009988 <HAL_SPI_Init+0x1f8>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d009      	beq.n	80097de <HAL_SPI_Init+0x4e>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a6f      	ldr	r2, [pc, #444]	; (800998c <HAL_SPI_Init+0x1fc>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d004      	beq.n	80097de <HAL_SPI_Init+0x4e>
 80097d4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80097d8:	486d      	ldr	r0, [pc, #436]	; (8009990 <HAL_SPI_Init+0x200>)
 80097da:	f7f9 f852 	bl	8002882 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d009      	beq.n	80097fa <HAL_SPI_Init+0x6a>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097ee:	d004      	beq.n	80097fa <HAL_SPI_Init+0x6a>
 80097f0:	f240 1141 	movw	r1, #321	; 0x141
 80097f4:	4866      	ldr	r0, [pc, #408]	; (8009990 <HAL_SPI_Init+0x200>)
 80097f6:	f7f9 f844 	bl	8002882 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00e      	beq.n	8009820 <HAL_SPI_Init+0x90>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800980a:	d009      	beq.n	8009820 <HAL_SPI_Init+0x90>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009814:	d004      	beq.n	8009820 <HAL_SPI_Init+0x90>
 8009816:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800981a:	485d      	ldr	r0, [pc, #372]	; (8009990 <HAL_SPI_Init+0x200>)
 800981c:	f7f9 f831 	bl	8002882 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009828:	d008      	beq.n	800983c <HAL_SPI_Init+0xac>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d004      	beq.n	800983c <HAL_SPI_Init+0xac>
 8009832:	f240 1143 	movw	r1, #323	; 0x143
 8009836:	4856      	ldr	r0, [pc, #344]	; (8009990 <HAL_SPI_Init+0x200>)
 8009838:	f7f9 f823 	bl	8002882 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009844:	d00d      	beq.n	8009862 <HAL_SPI_Init+0xd2>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d009      	beq.n	8009862 <HAL_SPI_Init+0xd2>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009856:	d004      	beq.n	8009862 <HAL_SPI_Init+0xd2>
 8009858:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800985c:	484c      	ldr	r0, [pc, #304]	; (8009990 <HAL_SPI_Init+0x200>)
 800985e:	f7f9 f810 	bl	8002882 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	69db      	ldr	r3, [r3, #28]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d020      	beq.n	80098ac <HAL_SPI_Init+0x11c>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	69db      	ldr	r3, [r3, #28]
 800986e:	2b08      	cmp	r3, #8
 8009870:	d01c      	beq.n	80098ac <HAL_SPI_Init+0x11c>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	69db      	ldr	r3, [r3, #28]
 8009876:	2b10      	cmp	r3, #16
 8009878:	d018      	beq.n	80098ac <HAL_SPI_Init+0x11c>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	69db      	ldr	r3, [r3, #28]
 800987e:	2b18      	cmp	r3, #24
 8009880:	d014      	beq.n	80098ac <HAL_SPI_Init+0x11c>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	69db      	ldr	r3, [r3, #28]
 8009886:	2b20      	cmp	r3, #32
 8009888:	d010      	beq.n	80098ac <HAL_SPI_Init+0x11c>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	69db      	ldr	r3, [r3, #28]
 800988e:	2b28      	cmp	r3, #40	; 0x28
 8009890:	d00c      	beq.n	80098ac <HAL_SPI_Init+0x11c>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	69db      	ldr	r3, [r3, #28]
 8009896:	2b30      	cmp	r3, #48	; 0x30
 8009898:	d008      	beq.n	80098ac <HAL_SPI_Init+0x11c>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	2b38      	cmp	r3, #56	; 0x38
 80098a0:	d004      	beq.n	80098ac <HAL_SPI_Init+0x11c>
 80098a2:	f240 1145 	movw	r1, #325	; 0x145
 80098a6:	483a      	ldr	r0, [pc, #232]	; (8009990 <HAL_SPI_Init+0x200>)
 80098a8:	f7f8 ffeb 	bl	8002882 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a1b      	ldr	r3, [r3, #32]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d008      	beq.n	80098c6 <HAL_SPI_Init+0x136>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a1b      	ldr	r3, [r3, #32]
 80098b8:	2b80      	cmp	r3, #128	; 0x80
 80098ba:	d004      	beq.n	80098c6 <HAL_SPI_Init+0x136>
 80098bc:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80098c0:	4833      	ldr	r0, [pc, #204]	; (8009990 <HAL_SPI_Init+0x200>)
 80098c2:	f7f8 ffde 	bl	8002882 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d008      	beq.n	80098e0 <HAL_SPI_Init+0x150>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d2:	2b10      	cmp	r3, #16
 80098d4:	d004      	beq.n	80098e0 <HAL_SPI_Init+0x150>
 80098d6:	f240 1147 	movw	r1, #327	; 0x147
 80098da:	482d      	ldr	r0, [pc, #180]	; (8009990 <HAL_SPI_Init+0x200>)
 80098dc:	f7f8 ffd1 	bl	8002882 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d155      	bne.n	8009994 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d008      	beq.n	8009902 <HAL_SPI_Init+0x172>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d004      	beq.n	8009902 <HAL_SPI_Init+0x172>
 80098f8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80098fc:	4824      	ldr	r0, [pc, #144]	; (8009990 <HAL_SPI_Init+0x200>)
 80098fe:	f7f8 ffc0 	bl	8002882 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d008      	beq.n	800991c <HAL_SPI_Init+0x18c>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d004      	beq.n	800991c <HAL_SPI_Init+0x18c>
 8009912:	f240 114b 	movw	r1, #331	; 0x14b
 8009916:	481e      	ldr	r0, [pc, #120]	; (8009990 <HAL_SPI_Init+0x200>)
 8009918:	f7f8 ffb3 	bl	8002882 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009924:	d125      	bne.n	8009972 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	69db      	ldr	r3, [r3, #28]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d05d      	beq.n	80099ea <HAL_SPI_Init+0x25a>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	69db      	ldr	r3, [r3, #28]
 8009932:	2b08      	cmp	r3, #8
 8009934:	d059      	beq.n	80099ea <HAL_SPI_Init+0x25a>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	69db      	ldr	r3, [r3, #28]
 800993a:	2b10      	cmp	r3, #16
 800993c:	d055      	beq.n	80099ea <HAL_SPI_Init+0x25a>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	69db      	ldr	r3, [r3, #28]
 8009942:	2b18      	cmp	r3, #24
 8009944:	d051      	beq.n	80099ea <HAL_SPI_Init+0x25a>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	69db      	ldr	r3, [r3, #28]
 800994a:	2b20      	cmp	r3, #32
 800994c:	d04d      	beq.n	80099ea <HAL_SPI_Init+0x25a>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	69db      	ldr	r3, [r3, #28]
 8009952:	2b28      	cmp	r3, #40	; 0x28
 8009954:	d049      	beq.n	80099ea <HAL_SPI_Init+0x25a>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	2b30      	cmp	r3, #48	; 0x30
 800995c:	d045      	beq.n	80099ea <HAL_SPI_Init+0x25a>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	2b38      	cmp	r3, #56	; 0x38
 8009964:	d041      	beq.n	80099ea <HAL_SPI_Init+0x25a>
 8009966:	f240 114f 	movw	r1, #335	; 0x14f
 800996a:	4809      	ldr	r0, [pc, #36]	; (8009990 <HAL_SPI_Init+0x200>)
 800996c:	f7f8 ff89 	bl	8002882 <assert_failed>
 8009970:	e03b      	b.n	80099ea <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	61da      	str	r2, [r3, #28]
 8009978:	e037      	b.n	80099ea <HAL_SPI_Init+0x25a>
 800997a:	bf00      	nop
 800997c:	40013000 	.word	0x40013000
 8009980:	40003800 	.word	0x40003800
 8009984:	40003c00 	.word	0x40003c00
 8009988:	40013400 	.word	0x40013400
 800998c:	40015000 	.word	0x40015000
 8009990:	08010e14 	.word	0x08010e14
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d020      	beq.n	80099de <HAL_SPI_Init+0x24e>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	2b08      	cmp	r3, #8
 80099a2:	d01c      	beq.n	80099de <HAL_SPI_Init+0x24e>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	2b10      	cmp	r3, #16
 80099aa:	d018      	beq.n	80099de <HAL_SPI_Init+0x24e>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	69db      	ldr	r3, [r3, #28]
 80099b0:	2b18      	cmp	r3, #24
 80099b2:	d014      	beq.n	80099de <HAL_SPI_Init+0x24e>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	69db      	ldr	r3, [r3, #28]
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	d010      	beq.n	80099de <HAL_SPI_Init+0x24e>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	69db      	ldr	r3, [r3, #28]
 80099c0:	2b28      	cmp	r3, #40	; 0x28
 80099c2:	d00c      	beq.n	80099de <HAL_SPI_Init+0x24e>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	69db      	ldr	r3, [r3, #28]
 80099c8:	2b30      	cmp	r3, #48	; 0x30
 80099ca:	d008      	beq.n	80099de <HAL_SPI_Init+0x24e>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	69db      	ldr	r3, [r3, #28]
 80099d0:	2b38      	cmp	r3, #56	; 0x38
 80099d2:	d004      	beq.n	80099de <HAL_SPI_Init+0x24e>
 80099d4:	f240 1159 	movw	r1, #345	; 0x159
 80099d8:	4862      	ldr	r0, [pc, #392]	; (8009b64 <HAL_SPI_Init+0x3d4>)
 80099da:	f7f8 ff52 	bl	8002882 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	615a      	str	r2, [r3, #20]
  }
#if (USE_SPI_CRC != 0U)
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d009      	beq.n	8009a06 <HAL_SPI_Init+0x276>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099fa:	d004      	beq.n	8009a06 <HAL_SPI_Init+0x276>
 80099fc:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8009a00:	4858      	ldr	r0, [pc, #352]	; (8009b64 <HAL_SPI_Init+0x3d4>)
 8009a02:	f7f8 ff3e 	bl	8002882 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a0e:	d113      	bne.n	8009a38 <HAL_SPI_Init+0x2a8>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00a      	beq.n	8009a2e <HAL_SPI_Init+0x29e>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a20:	d205      	bcs.n	8009a2e <HAL_SPI_Init+0x29e>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d104      	bne.n	8009a38 <HAL_SPI_Init+0x2a8>
 8009a2e:	f240 1163 	movw	r1, #355	; 0x163
 8009a32:	484c      	ldr	r0, [pc, #304]	; (8009b64 <HAL_SPI_Init+0x3d4>)
 8009a34:	f7f8 ff25 	bl	8002882 <assert_failed>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d126      	bne.n	8009a92 <HAL_SPI_Init+0x302>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a46      	ldr	r2, [pc, #280]	; (8009b68 <HAL_SPI_Init+0x3d8>)
 8009a50:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a45      	ldr	r2, [pc, #276]	; (8009b6c <HAL_SPI_Init+0x3dc>)
 8009a56:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a45      	ldr	r2, [pc, #276]	; (8009b70 <HAL_SPI_Init+0x3e0>)
 8009a5c:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4a44      	ldr	r2, [pc, #272]	; (8009b74 <HAL_SPI_Init+0x3e4>)
 8009a62:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a44      	ldr	r2, [pc, #272]	; (8009b78 <HAL_SPI_Init+0x3e8>)
 8009a68:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a43      	ldr	r2, [pc, #268]	; (8009b7c <HAL_SPI_Init+0x3ec>)
 8009a6e:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a43      	ldr	r2, [pc, #268]	; (8009b80 <HAL_SPI_Init+0x3f0>)
 8009a74:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4a42      	ldr	r2, [pc, #264]	; (8009b84 <HAL_SPI_Init+0x3f4>)
 8009a7a:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d102      	bne.n	8009a8a <HAL_SPI_Init+0x2fa>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a40      	ldr	r2, [pc, #256]	; (8009b88 <HAL_SPI_Init+0x3f8>)
 8009a88:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2202      	movs	r2, #2
 8009a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009aa8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009aba:	431a      	orrs	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ac4:	431a      	orrs	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	f003 0302 	and.w	r3, r3, #2
 8009ace:	431a      	orrs	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	695b      	ldr	r3, [r3, #20]
 8009ad4:	f003 0301 	and.w	r3, r3, #1
 8009ad8:	431a      	orrs	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ae2:	431a      	orrs	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	69db      	ldr	r3, [r3, #28]
 8009ae8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009aec:	431a      	orrs	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009af6:	ea42 0103 	orr.w	r1, r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	0c1b      	lsrs	r3, r3, #16
 8009b10:	f003 0104 	and.w	r1, r3, #4
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b18:	f003 0210 	and.w	r2, r3, #16
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	430a      	orrs	r2, r1
 8009b22:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b2c:	d105      	bne.n	8009b3a <HAL_SPI_Init+0x3aa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	b292      	uxth	r2, r2
 8009b38:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	69da      	ldr	r2, [r3, #28]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	08010e14 	.word	0x08010e14
 8009b68:	08009d8d 	.word	0x08009d8d
 8009b6c:	08009da1 	.word	0x08009da1
 8009b70:	08009db5 	.word	0x08009db5
 8009b74:	08009dc9 	.word	0x08009dc9
 8009b78:	08009ddd 	.word	0x08009ddd
 8009b7c:	08009df1 	.word	0x08009df1
 8009b80:	08009e05 	.word	0x08009e05
 8009b84:	08009e19 	.word	0x08009e19
 8009b88:	08002aed 	.word	0x08002aed

08009b8c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b088      	sub	sp, #32
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	099b      	lsrs	r3, r3, #6
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d10f      	bne.n	8009bd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00a      	beq.n	8009bd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	099b      	lsrs	r3, r3, #6
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d004      	beq.n	8009bd0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	4798      	blx	r3
    return;
 8009bce:	e0d8      	b.n	8009d82 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	085b      	lsrs	r3, r3, #1
 8009bd4:	f003 0301 	and.w	r3, r3, #1
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00a      	beq.n	8009bf2 <HAL_SPI_IRQHandler+0x66>
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	09db      	lsrs	r3, r3, #7
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d004      	beq.n	8009bf2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	4798      	blx	r3
    return;
 8009bf0:	e0c7      	b.n	8009d82 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	095b      	lsrs	r3, r3, #5
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10c      	bne.n	8009c18 <HAL_SPI_IRQHandler+0x8c>
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	099b      	lsrs	r3, r3, #6
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d106      	bne.n	8009c18 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	0a1b      	lsrs	r3, r3, #8
 8009c0e:	f003 0301 	and.w	r3, r3, #1
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f000 80b5 	beq.w	8009d82 <HAL_SPI_IRQHandler+0x1f6>
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	095b      	lsrs	r3, r3, #5
 8009c1c:	f003 0301 	and.w	r3, r3, #1
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 80ae 	beq.w	8009d82 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	099b      	lsrs	r3, r3, #6
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d023      	beq.n	8009c7a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b03      	cmp	r3, #3
 8009c3c:	d011      	beq.n	8009c62 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c42:	f043 0204 	orr.w	r2, r3, #4
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	617b      	str	r3, [r7, #20]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	617b      	str	r3, [r7, #20]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	617b      	str	r3, [r7, #20]
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	e00b      	b.n	8009c7a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c62:	2300      	movs	r3, #0
 8009c64:	613b      	str	r3, [r7, #16]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	613b      	str	r3, [r7, #16]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	613b      	str	r3, [r7, #16]
 8009c76:	693b      	ldr	r3, [r7, #16]
        return;
 8009c78:	e083      	b.n	8009d82 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	095b      	lsrs	r3, r3, #5
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d014      	beq.n	8009cb0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c8a:	f043 0201 	orr.w	r2, r3, #1
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009c92:	2300      	movs	r3, #0
 8009c94:	60fb      	str	r3, [r7, #12]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	0a1b      	lsrs	r3, r3, #8
 8009cb4:	f003 0301 	and.w	r3, r3, #1
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00c      	beq.n	8009cd6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cc0:	f043 0208 	orr.w	r2, r3, #8
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009cc8:	2300      	movs	r3, #0
 8009cca:	60bb      	str	r3, [r7, #8]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	60bb      	str	r3, [r7, #8]
 8009cd4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d050      	beq.n	8009d80 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	685a      	ldr	r2, [r3, #4]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009cec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	f003 0302 	and.w	r3, r3, #2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d104      	bne.n	8009d0a <HAL_SPI_IRQHandler+0x17e>
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	f003 0301 	and.w	r3, r3, #1
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d034      	beq.n	8009d74 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	685a      	ldr	r2, [r3, #4]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f022 0203 	bic.w	r2, r2, #3
 8009d18:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d011      	beq.n	8009d46 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d26:	4a18      	ldr	r2, [pc, #96]	; (8009d88 <HAL_SPI_IRQHandler+0x1fc>)
 8009d28:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fb f904 	bl	8004f3c <HAL_DMA_Abort_IT>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d005      	beq.n	8009d46 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d017      	beq.n	8009d7e <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d52:	4a0d      	ldr	r2, [pc, #52]	; (8009d88 <HAL_SPI_IRQHandler+0x1fc>)
 8009d54:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fb f8ee 	bl	8004f3c <HAL_DMA_Abort_IT>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00b      	beq.n	8009d7e <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009d72:	e004      	b.n	8009d7e <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009d7c:	e000      	b.n	8009d80 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8009d7e:	bf00      	nop
    return;
 8009d80:	bf00      	nop
  }
}
 8009d82:	3720      	adds	r7, #32
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	08009e2d 	.word	0x08009e2d

08009d8c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009d94:	bf00      	nop
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009da8:	bf00      	nop
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009dbc:	bf00      	nop
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e38:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009e4e:	bf00      	nop
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
	...

08009e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e0b2      	b.n	8009fd0 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a5a      	ldr	r2, [pc, #360]	; (8009fd8 <HAL_TIM_Base_Init+0x180>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d027      	beq.n	8009ec4 <HAL_TIM_Base_Init+0x6c>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e7c:	d022      	beq.n	8009ec4 <HAL_TIM_Base_Init+0x6c>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a56      	ldr	r2, [pc, #344]	; (8009fdc <HAL_TIM_Base_Init+0x184>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d01d      	beq.n	8009ec4 <HAL_TIM_Base_Init+0x6c>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a54      	ldr	r2, [pc, #336]	; (8009fe0 <HAL_TIM_Base_Init+0x188>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d018      	beq.n	8009ec4 <HAL_TIM_Base_Init+0x6c>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a53      	ldr	r2, [pc, #332]	; (8009fe4 <HAL_TIM_Base_Init+0x18c>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d013      	beq.n	8009ec4 <HAL_TIM_Base_Init+0x6c>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a51      	ldr	r2, [pc, #324]	; (8009fe8 <HAL_TIM_Base_Init+0x190>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d00e      	beq.n	8009ec4 <HAL_TIM_Base_Init+0x6c>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a50      	ldr	r2, [pc, #320]	; (8009fec <HAL_TIM_Base_Init+0x194>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d009      	beq.n	8009ec4 <HAL_TIM_Base_Init+0x6c>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a4e      	ldr	r2, [pc, #312]	; (8009ff0 <HAL_TIM_Base_Init+0x198>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d004      	beq.n	8009ec4 <HAL_TIM_Base_Init+0x6c>
 8009eba:	f240 1113 	movw	r1, #275	; 0x113
 8009ebe:	484d      	ldr	r0, [pc, #308]	; (8009ff4 <HAL_TIM_Base_Init+0x19c>)
 8009ec0:	f7f8 fcdf 	bl	8002882 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d014      	beq.n	8009ef6 <HAL_TIM_Base_Init+0x9e>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	2b10      	cmp	r3, #16
 8009ed2:	d010      	beq.n	8009ef6 <HAL_TIM_Base_Init+0x9e>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	2b20      	cmp	r3, #32
 8009eda:	d00c      	beq.n	8009ef6 <HAL_TIM_Base_Init+0x9e>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	2b40      	cmp	r3, #64	; 0x40
 8009ee2:	d008      	beq.n	8009ef6 <HAL_TIM_Base_Init+0x9e>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	2b60      	cmp	r3, #96	; 0x60
 8009eea:	d004      	beq.n	8009ef6 <HAL_TIM_Base_Init+0x9e>
 8009eec:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009ef0:	4840      	ldr	r0, [pc, #256]	; (8009ff4 <HAL_TIM_Base_Init+0x19c>)
 8009ef2:	f7f8 fcc6 	bl	8002882 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00e      	beq.n	8009f1c <HAL_TIM_Base_Init+0xc4>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f06:	d009      	beq.n	8009f1c <HAL_TIM_Base_Init+0xc4>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f10:	d004      	beq.n	8009f1c <HAL_TIM_Base_Init+0xc4>
 8009f12:	f240 1115 	movw	r1, #277	; 0x115
 8009f16:	4837      	ldr	r0, [pc, #220]	; (8009ff4 <HAL_TIM_Base_Init+0x19c>)
 8009f18:	f7f8 fcb3 	bl	8002882 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d008      	beq.n	8009f36 <HAL_TIM_Base_Init+0xde>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	699b      	ldr	r3, [r3, #24]
 8009f28:	2b80      	cmp	r3, #128	; 0x80
 8009f2a:	d004      	beq.n	8009f36 <HAL_TIM_Base_Init+0xde>
 8009f2c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8009f30:	4830      	ldr	r0, [pc, #192]	; (8009ff4 <HAL_TIM_Base_Init+0x19c>)
 8009f32:	f7f8 fca6 	bl	8002882 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d111      	bne.n	8009f66 <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fefe 	bl	800ad4c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d102      	bne.n	8009f5e <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a27      	ldr	r2, [pc, #156]	; (8009ff8 <HAL_TIM_Base_Init+0x1a0>)
 8009f5c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2202      	movs	r2, #2
 8009f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	3304      	adds	r3, #4
 8009f76:	4619      	mov	r1, r3
 8009f78:	4610      	mov	r0, r2
 8009f7a:	f000 fdcd 	bl	800ab18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	40010000 	.word	0x40010000
 8009fdc:	40000400 	.word	0x40000400
 8009fe0:	40000800 	.word	0x40000800
 8009fe4:	40000c00 	.word	0x40000c00
 8009fe8:	40014000 	.word	0x40014000
 8009fec:	40014400 	.word	0x40014400
 8009ff0:	40014800 	.word	0x40014800
 8009ff4:	08010e88 	.word	0x08010e88
 8009ff8:	080032e1 	.word	0x080032e1

08009ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a3d      	ldr	r2, [pc, #244]	; (800a100 <HAL_TIM_Base_Start_IT+0x104>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d027      	beq.n	800a05e <HAL_TIM_Base_Start_IT+0x62>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a016:	d022      	beq.n	800a05e <HAL_TIM_Base_Start_IT+0x62>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a39      	ldr	r2, [pc, #228]	; (800a104 <HAL_TIM_Base_Start_IT+0x108>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d01d      	beq.n	800a05e <HAL_TIM_Base_Start_IT+0x62>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a38      	ldr	r2, [pc, #224]	; (800a108 <HAL_TIM_Base_Start_IT+0x10c>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d018      	beq.n	800a05e <HAL_TIM_Base_Start_IT+0x62>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a36      	ldr	r2, [pc, #216]	; (800a10c <HAL_TIM_Base_Start_IT+0x110>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d013      	beq.n	800a05e <HAL_TIM_Base_Start_IT+0x62>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a35      	ldr	r2, [pc, #212]	; (800a110 <HAL_TIM_Base_Start_IT+0x114>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d00e      	beq.n	800a05e <HAL_TIM_Base_Start_IT+0x62>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a33      	ldr	r2, [pc, #204]	; (800a114 <HAL_TIM_Base_Start_IT+0x118>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d009      	beq.n	800a05e <HAL_TIM_Base_Start_IT+0x62>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a32      	ldr	r2, [pc, #200]	; (800a118 <HAL_TIM_Base_Start_IT+0x11c>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d004      	beq.n	800a05e <HAL_TIM_Base_Start_IT+0x62>
 800a054:	f240 11cf 	movw	r1, #463	; 0x1cf
 800a058:	4830      	ldr	r0, [pc, #192]	; (800a11c <HAL_TIM_Base_Start_IT+0x120>)
 800a05a:	f7f8 fc12 	bl	8002882 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b01      	cmp	r3, #1
 800a068:	d001      	beq.n	800a06e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e044      	b.n	800a0f8 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2202      	movs	r2, #2
 800a072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68da      	ldr	r2, [r3, #12]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f042 0201 	orr.w	r2, r2, #1
 800a084:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a1d      	ldr	r2, [pc, #116]	; (800a100 <HAL_TIM_Base_Start_IT+0x104>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d018      	beq.n	800a0c2 <HAL_TIM_Base_Start_IT+0xc6>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a098:	d013      	beq.n	800a0c2 <HAL_TIM_Base_Start_IT+0xc6>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a19      	ldr	r2, [pc, #100]	; (800a104 <HAL_TIM_Base_Start_IT+0x108>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d00e      	beq.n	800a0c2 <HAL_TIM_Base_Start_IT+0xc6>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a17      	ldr	r2, [pc, #92]	; (800a108 <HAL_TIM_Base_Start_IT+0x10c>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d009      	beq.n	800a0c2 <HAL_TIM_Base_Start_IT+0xc6>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a16      	ldr	r2, [pc, #88]	; (800a10c <HAL_TIM_Base_Start_IT+0x110>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d004      	beq.n	800a0c2 <HAL_TIM_Base_Start_IT+0xc6>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a14      	ldr	r2, [pc, #80]	; (800a110 <HAL_TIM_Base_Start_IT+0x114>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d111      	bne.n	800a0e6 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	f003 0307 	and.w	r3, r3, #7
 800a0cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2b06      	cmp	r3, #6
 800a0d2:	d010      	beq.n	800a0f6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f042 0201 	orr.w	r2, r2, #1
 800a0e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0e4:	e007      	b.n	800a0f6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f042 0201 	orr.w	r2, r2, #1
 800a0f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	40010000 	.word	0x40010000
 800a104:	40000400 	.word	0x40000400
 800a108:	40000800 	.word	0x40000800
 800a10c:	40000c00 	.word	0x40000c00
 800a110:	40014000 	.word	0x40014000
 800a114:	40014400 	.word	0x40014400
 800a118:	40014800 	.word	0x40014800
 800a11c:	08010e88 	.word	0x08010e88

0800a120 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a29      	ldr	r2, [pc, #164]	; (800a1d4 <HAL_TIM_Base_Stop_IT+0xb4>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d027      	beq.n	800a182 <HAL_TIM_Base_Stop_IT+0x62>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a13a:	d022      	beq.n	800a182 <HAL_TIM_Base_Stop_IT+0x62>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a25      	ldr	r2, [pc, #148]	; (800a1d8 <HAL_TIM_Base_Stop_IT+0xb8>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d01d      	beq.n	800a182 <HAL_TIM_Base_Stop_IT+0x62>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a24      	ldr	r2, [pc, #144]	; (800a1dc <HAL_TIM_Base_Stop_IT+0xbc>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d018      	beq.n	800a182 <HAL_TIM_Base_Stop_IT+0x62>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a22      	ldr	r2, [pc, #136]	; (800a1e0 <HAL_TIM_Base_Stop_IT+0xc0>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d013      	beq.n	800a182 <HAL_TIM_Base_Stop_IT+0x62>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a21      	ldr	r2, [pc, #132]	; (800a1e4 <HAL_TIM_Base_Stop_IT+0xc4>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d00e      	beq.n	800a182 <HAL_TIM_Base_Stop_IT+0x62>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a1f      	ldr	r2, [pc, #124]	; (800a1e8 <HAL_TIM_Base_Stop_IT+0xc8>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d009      	beq.n	800a182 <HAL_TIM_Base_Stop_IT+0x62>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a1e      	ldr	r2, [pc, #120]	; (800a1ec <HAL_TIM_Base_Stop_IT+0xcc>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d004      	beq.n	800a182 <HAL_TIM_Base_Stop_IT+0x62>
 800a178:	f240 11f7 	movw	r1, #503	; 0x1f7
 800a17c:	481c      	ldr	r0, [pc, #112]	; (800a1f0 <HAL_TIM_Base_Stop_IT+0xd0>)
 800a17e:	f7f8 fb80 	bl	8002882 <assert_failed>

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68da      	ldr	r2, [r3, #12]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f022 0201 	bic.w	r2, r2, #1
 800a190:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	6a1a      	ldr	r2, [r3, #32]
 800a198:	f241 1311 	movw	r3, #4369	; 0x1111
 800a19c:	4013      	ands	r3, r2
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10f      	bne.n	800a1c2 <HAL_TIM_Base_Stop_IT+0xa2>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	6a1a      	ldr	r2, [r3, #32]
 800a1a8:	f240 4344 	movw	r3, #1092	; 0x444
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d107      	bne.n	800a1c2 <HAL_TIM_Base_Stop_IT+0xa2>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f022 0201 	bic.w	r2, r2, #1
 800a1c0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3708      	adds	r7, #8
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	40010000 	.word	0x40010000
 800a1d8:	40000400 	.word	0x40000400
 800a1dc:	40000800 	.word	0x40000800
 800a1e0:	40000c00 	.word	0x40000c00
 800a1e4:	40014000 	.word	0x40014000
 800a1e8:	40014400 	.word	0x40014400
 800a1ec:	40014800 	.word	0x40014800
 800a1f0:	08010e88 	.word	0x08010e88

0800a1f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	f003 0302 	and.w	r3, r3, #2
 800a206:	2b02      	cmp	r3, #2
 800a208:	d128      	bne.n	800a25c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	f003 0302 	and.w	r3, r3, #2
 800a214:	2b02      	cmp	r3, #2
 800a216:	d121      	bne.n	800a25c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f06f 0202 	mvn.w	r2, #2
 800a220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2201      	movs	r2, #1
 800a226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	699b      	ldr	r3, [r3, #24]
 800a22e:	f003 0303 	and.w	r3, r3, #3
 800a232:	2b00      	cmp	r3, #0
 800a234:	d005      	beq.n	800a242 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	4798      	blx	r3
 800a240:	e009      	b.n	800a256 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	f003 0304 	and.w	r3, r3, #4
 800a266:	2b04      	cmp	r3, #4
 800a268:	d128      	bne.n	800a2bc <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	f003 0304 	and.w	r3, r3, #4
 800a274:	2b04      	cmp	r3, #4
 800a276:	d121      	bne.n	800a2bc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f06f 0204 	mvn.w	r2, #4
 800a280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2202      	movs	r2, #2
 800a286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	699b      	ldr	r3, [r3, #24]
 800a28e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a292:	2b00      	cmp	r3, #0
 800a294:	d005      	beq.n	800a2a2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	4798      	blx	r3
 800a2a0:	e009      	b.n	800a2b6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	f003 0308 	and.w	r3, r3, #8
 800a2c6:	2b08      	cmp	r3, #8
 800a2c8:	d128      	bne.n	800a31c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	f003 0308 	and.w	r3, r3, #8
 800a2d4:	2b08      	cmp	r3, #8
 800a2d6:	d121      	bne.n	800a31c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f06f 0208 	mvn.w	r2, #8
 800a2e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2204      	movs	r2, #4
 800a2e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	69db      	ldr	r3, [r3, #28]
 800a2ee:	f003 0303 	and.w	r3, r3, #3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d005      	beq.n	800a302 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	4798      	blx	r3
 800a300:	e009      	b.n	800a316 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	f003 0310 	and.w	r3, r3, #16
 800a326:	2b10      	cmp	r3, #16
 800a328:	d128      	bne.n	800a37c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	f003 0310 	and.w	r3, r3, #16
 800a334:	2b10      	cmp	r3, #16
 800a336:	d121      	bne.n	800a37c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f06f 0210 	mvn.w	r2, #16
 800a340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2208      	movs	r2, #8
 800a346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	69db      	ldr	r3, [r3, #28]
 800a34e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a352:	2b00      	cmp	r3, #0
 800a354:	d005      	beq.n	800a362 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	4798      	blx	r3
 800a360:	e009      	b.n	800a376 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	f003 0301 	and.w	r3, r3, #1
 800a386:	2b01      	cmp	r3, #1
 800a388:	d110      	bne.n	800a3ac <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	2b01      	cmp	r3, #1
 800a396:	d109      	bne.n	800a3ac <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f06f 0201 	mvn.w	r2, #1
 800a3a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3b6:	2b80      	cmp	r3, #128	; 0x80
 800a3b8:	d110      	bne.n	800a3dc <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c4:	2b80      	cmp	r3, #128	; 0x80
 800a3c6:	d109      	bne.n	800a3dc <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a3d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3e6:	2b40      	cmp	r3, #64	; 0x40
 800a3e8:	d110      	bne.n	800a40c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f4:	2b40      	cmp	r3, #64	; 0x40
 800a3f6:	d109      	bne.n	800a40c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	f003 0320 	and.w	r3, r3, #32
 800a416:	2b20      	cmp	r3, #32
 800a418:	d110      	bne.n	800a43c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	f003 0320 	and.w	r3, r3, #32
 800a424:	2b20      	cmp	r3, #32
 800a426:	d109      	bne.n	800a43c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f06f 0220 	mvn.w	r2, #32
 800a430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a43c:	bf00      	nop
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d101      	bne.n	800a460 <HAL_TIM_ConfigClockSource+0x1c>
 800a45c:	2302      	movs	r3, #2
 800a45e:	e2f0      	b.n	800aa42 <HAL_TIM_ConfigClockSource+0x5fe>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2202      	movs	r2, #2
 800a46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a478:	d029      	beq.n	800a4ce <HAL_TIM_ConfigClockSource+0x8a>
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b70      	cmp	r3, #112	; 0x70
 800a480:	d025      	beq.n	800a4ce <HAL_TIM_ConfigClockSource+0x8a>
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a48a:	d020      	beq.n	800a4ce <HAL_TIM_ConfigClockSource+0x8a>
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b40      	cmp	r3, #64	; 0x40
 800a492:	d01c      	beq.n	800a4ce <HAL_TIM_ConfigClockSource+0x8a>
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b50      	cmp	r3, #80	; 0x50
 800a49a:	d018      	beq.n	800a4ce <HAL_TIM_ConfigClockSource+0x8a>
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b60      	cmp	r3, #96	; 0x60
 800a4a2:	d014      	beq.n	800a4ce <HAL_TIM_ConfigClockSource+0x8a>
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d010      	beq.n	800a4ce <HAL_TIM_ConfigClockSource+0x8a>
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b10      	cmp	r3, #16
 800a4b2:	d00c      	beq.n	800a4ce <HAL_TIM_ConfigClockSource+0x8a>
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2b20      	cmp	r3, #32
 800a4ba:	d008      	beq.n	800a4ce <HAL_TIM_ConfigClockSource+0x8a>
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2b30      	cmp	r3, #48	; 0x30
 800a4c2:	d004      	beq.n	800a4ce <HAL_TIM_ConfigClockSource+0x8a>
 800a4c4:	f241 41b7 	movw	r1, #5303	; 0x14b7
 800a4c8:	487c      	ldr	r0, [pc, #496]	; (800a6bc <HAL_TIM_ConfigClockSource+0x278>)
 800a4ca:	f7f8 f9da 	bl	8002882 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a4dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4f6:	f000 80f1 	beq.w	800a6dc <HAL_TIM_ConfigClockSource+0x298>
 800a4fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4fe:	f200 8293 	bhi.w	800aa28 <HAL_TIM_ConfigClockSource+0x5e4>
 800a502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a506:	d02d      	beq.n	800a564 <HAL_TIM_ConfigClockSource+0x120>
 800a508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a50c:	f200 828c 	bhi.w	800aa28 <HAL_TIM_ConfigClockSource+0x5e4>
 800a510:	2b70      	cmp	r3, #112	; 0x70
 800a512:	d05d      	beq.n	800a5d0 <HAL_TIM_ConfigClockSource+0x18c>
 800a514:	2b70      	cmp	r3, #112	; 0x70
 800a516:	f200 8287 	bhi.w	800aa28 <HAL_TIM_ConfigClockSource+0x5e4>
 800a51a:	2b60      	cmp	r3, #96	; 0x60
 800a51c:	f000 81a0 	beq.w	800a860 <HAL_TIM_ConfigClockSource+0x41c>
 800a520:	2b60      	cmp	r3, #96	; 0x60
 800a522:	f200 8281 	bhi.w	800aa28 <HAL_TIM_ConfigClockSource+0x5e4>
 800a526:	2b50      	cmp	r3, #80	; 0x50
 800a528:	f000 8144 	beq.w	800a7b4 <HAL_TIM_ConfigClockSource+0x370>
 800a52c:	2b50      	cmp	r3, #80	; 0x50
 800a52e:	f200 827b 	bhi.w	800aa28 <HAL_TIM_ConfigClockSource+0x5e4>
 800a532:	2b40      	cmp	r3, #64	; 0x40
 800a534:	f000 81f6 	beq.w	800a924 <HAL_TIM_ConfigClockSource+0x4e0>
 800a538:	2b40      	cmp	r3, #64	; 0x40
 800a53a:	f200 8275 	bhi.w	800aa28 <HAL_TIM_ConfigClockSource+0x5e4>
 800a53e:	2b30      	cmp	r3, #48	; 0x30
 800a540:	f000 8246 	beq.w	800a9d0 <HAL_TIM_ConfigClockSource+0x58c>
 800a544:	2b30      	cmp	r3, #48	; 0x30
 800a546:	f200 826f 	bhi.w	800aa28 <HAL_TIM_ConfigClockSource+0x5e4>
 800a54a:	2b20      	cmp	r3, #32
 800a54c:	f000 8240 	beq.w	800a9d0 <HAL_TIM_ConfigClockSource+0x58c>
 800a550:	2b20      	cmp	r3, #32
 800a552:	f200 8269 	bhi.w	800aa28 <HAL_TIM_ConfigClockSource+0x5e4>
 800a556:	2b00      	cmp	r3, #0
 800a558:	f000 823a 	beq.w	800a9d0 <HAL_TIM_ConfigClockSource+0x58c>
 800a55c:	2b10      	cmp	r3, #16
 800a55e:	f000 8237 	beq.w	800a9d0 <HAL_TIM_ConfigClockSource+0x58c>
 800a562:	e261      	b.n	800aa28 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a55      	ldr	r2, [pc, #340]	; (800a6c0 <HAL_TIM_ConfigClockSource+0x27c>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	f000 825f 	beq.w	800aa2e <HAL_TIM_ConfigClockSource+0x5ea>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a578:	f000 8259 	beq.w	800aa2e <HAL_TIM_ConfigClockSource+0x5ea>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a50      	ldr	r2, [pc, #320]	; (800a6c4 <HAL_TIM_ConfigClockSource+0x280>)
 800a582:	4293      	cmp	r3, r2
 800a584:	f000 8253 	beq.w	800aa2e <HAL_TIM_ConfigClockSource+0x5ea>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a4e      	ldr	r2, [pc, #312]	; (800a6c8 <HAL_TIM_ConfigClockSource+0x284>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	f000 824d 	beq.w	800aa2e <HAL_TIM_ConfigClockSource+0x5ea>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a4c      	ldr	r2, [pc, #304]	; (800a6cc <HAL_TIM_ConfigClockSource+0x288>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	f000 8247 	beq.w	800aa2e <HAL_TIM_ConfigClockSource+0x5ea>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a4a      	ldr	r2, [pc, #296]	; (800a6d0 <HAL_TIM_ConfigClockSource+0x28c>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	f000 8241 	beq.w	800aa2e <HAL_TIM_ConfigClockSource+0x5ea>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a48      	ldr	r2, [pc, #288]	; (800a6d4 <HAL_TIM_ConfigClockSource+0x290>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	f000 823b 	beq.w	800aa2e <HAL_TIM_ConfigClockSource+0x5ea>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a46      	ldr	r2, [pc, #280]	; (800a6d8 <HAL_TIM_ConfigClockSource+0x294>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	f000 8235 	beq.w	800aa2e <HAL_TIM_ConfigClockSource+0x5ea>
 800a5c4:	f241 41c3 	movw	r1, #5315	; 0x14c3
 800a5c8:	483c      	ldr	r0, [pc, #240]	; (800a6bc <HAL_TIM_ConfigClockSource+0x278>)
 800a5ca:	f7f8 f95a 	bl	8002882 <assert_failed>
      break;
 800a5ce:	e22e      	b.n	800aa2e <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a3a      	ldr	r2, [pc, #232]	; (800a6c0 <HAL_TIM_ConfigClockSource+0x27c>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d01d      	beq.n	800a616 <HAL_TIM_ConfigClockSource+0x1d2>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5e2:	d018      	beq.n	800a616 <HAL_TIM_ConfigClockSource+0x1d2>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a36      	ldr	r2, [pc, #216]	; (800a6c4 <HAL_TIM_ConfigClockSource+0x280>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d013      	beq.n	800a616 <HAL_TIM_ConfigClockSource+0x1d2>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a35      	ldr	r2, [pc, #212]	; (800a6c8 <HAL_TIM_ConfigClockSource+0x284>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d00e      	beq.n	800a616 <HAL_TIM_ConfigClockSource+0x1d2>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a33      	ldr	r2, [pc, #204]	; (800a6cc <HAL_TIM_ConfigClockSource+0x288>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d009      	beq.n	800a616 <HAL_TIM_ConfigClockSource+0x1d2>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a32      	ldr	r2, [pc, #200]	; (800a6d0 <HAL_TIM_ConfigClockSource+0x28c>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d004      	beq.n	800a616 <HAL_TIM_ConfigClockSource+0x1d2>
 800a60c:	f241 41ca 	movw	r1, #5322	; 0x14ca
 800a610:	482a      	ldr	r0, [pc, #168]	; (800a6bc <HAL_TIM_ConfigClockSource+0x278>)
 800a612:	f7f8 f936 	bl	8002882 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d013      	beq.n	800a646 <HAL_TIM_ConfigClockSource+0x202>
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a626:	d00e      	beq.n	800a646 <HAL_TIM_ConfigClockSource+0x202>
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a630:	d009      	beq.n	800a646 <HAL_TIM_ConfigClockSource+0x202>
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a63a:	d004      	beq.n	800a646 <HAL_TIM_ConfigClockSource+0x202>
 800a63c:	f241 41cd 	movw	r1, #5325	; 0x14cd
 800a640:	481e      	ldr	r0, [pc, #120]	; (800a6bc <HAL_TIM_ConfigClockSource+0x278>)
 800a642:	f7f8 f91e 	bl	8002882 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a64e:	d014      	beq.n	800a67a <HAL_TIM_ConfigClockSource+0x236>
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d010      	beq.n	800a67a <HAL_TIM_ConfigClockSource+0x236>
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00c      	beq.n	800a67a <HAL_TIM_ConfigClockSource+0x236>
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	2b02      	cmp	r3, #2
 800a666:	d008      	beq.n	800a67a <HAL_TIM_ConfigClockSource+0x236>
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	2b0a      	cmp	r3, #10
 800a66e:	d004      	beq.n	800a67a <HAL_TIM_ConfigClockSource+0x236>
 800a670:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800a674:	4811      	ldr	r0, [pc, #68]	; (800a6bc <HAL_TIM_ConfigClockSource+0x278>)
 800a676:	f7f8 f904 	bl	8002882 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	2b0f      	cmp	r3, #15
 800a680:	d904      	bls.n	800a68c <HAL_TIM_ConfigClockSource+0x248>
 800a682:	f241 41cf 	movw	r1, #5327	; 0x14cf
 800a686:	480d      	ldr	r0, [pc, #52]	; (800a6bc <HAL_TIM_ConfigClockSource+0x278>)
 800a688:	f7f8 f8fb 	bl	8002882 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6818      	ldr	r0, [r3, #0]
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	6899      	ldr	r1, [r3, #8]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	f000 fb36 	bl	800ad0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a6ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	609a      	str	r2, [r3, #8]
      break;
 800a6b8:	e1ba      	b.n	800aa30 <HAL_TIM_ConfigClockSource+0x5ec>
 800a6ba:	bf00      	nop
 800a6bc:	08010e88 	.word	0x08010e88
 800a6c0:	40010000 	.word	0x40010000
 800a6c4:	40000400 	.word	0x40000400
 800a6c8:	40000800 	.word	0x40000800
 800a6cc:	40000c00 	.word	0x40000c00
 800a6d0:	40014000 	.word	0x40014000
 800a6d4:	40014400 	.word	0x40014400
 800a6d8:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a8a      	ldr	r2, [pc, #552]	; (800a90c <HAL_TIM_ConfigClockSource+0x4c8>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d018      	beq.n	800a718 <HAL_TIM_ConfigClockSource+0x2d4>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6ee:	d013      	beq.n	800a718 <HAL_TIM_ConfigClockSource+0x2d4>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a86      	ldr	r2, [pc, #536]	; (800a910 <HAL_TIM_ConfigClockSource+0x4cc>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d00e      	beq.n	800a718 <HAL_TIM_ConfigClockSource+0x2d4>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a85      	ldr	r2, [pc, #532]	; (800a914 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d009      	beq.n	800a718 <HAL_TIM_ConfigClockSource+0x2d4>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a83      	ldr	r2, [pc, #524]	; (800a918 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d004      	beq.n	800a718 <HAL_TIM_ConfigClockSource+0x2d4>
 800a70e:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800a712:	4882      	ldr	r0, [pc, #520]	; (800a91c <HAL_TIM_ConfigClockSource+0x4d8>)
 800a714:	f7f8 f8b5 	bl	8002882 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d013      	beq.n	800a748 <HAL_TIM_ConfigClockSource+0x304>
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a728:	d00e      	beq.n	800a748 <HAL_TIM_ConfigClockSource+0x304>
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a732:	d009      	beq.n	800a748 <HAL_TIM_ConfigClockSource+0x304>
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a73c:	d004      	beq.n	800a748 <HAL_TIM_ConfigClockSource+0x304>
 800a73e:	f241 41e5 	movw	r1, #5349	; 0x14e5
 800a742:	4876      	ldr	r0, [pc, #472]	; (800a91c <HAL_TIM_ConfigClockSource+0x4d8>)
 800a744:	f7f8 f89d 	bl	8002882 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a750:	d014      	beq.n	800a77c <HAL_TIM_ConfigClockSource+0x338>
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d010      	beq.n	800a77c <HAL_TIM_ConfigClockSource+0x338>
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00c      	beq.n	800a77c <HAL_TIM_ConfigClockSource+0x338>
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	2b02      	cmp	r3, #2
 800a768:	d008      	beq.n	800a77c <HAL_TIM_ConfigClockSource+0x338>
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	2b0a      	cmp	r3, #10
 800a770:	d004      	beq.n	800a77c <HAL_TIM_ConfigClockSource+0x338>
 800a772:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800a776:	4869      	ldr	r0, [pc, #420]	; (800a91c <HAL_TIM_ConfigClockSource+0x4d8>)
 800a778:	f7f8 f883 	bl	8002882 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	2b0f      	cmp	r3, #15
 800a782:	d904      	bls.n	800a78e <HAL_TIM_ConfigClockSource+0x34a>
 800a784:	f241 41e7 	movw	r1, #5351	; 0x14e7
 800a788:	4864      	ldr	r0, [pc, #400]	; (800a91c <HAL_TIM_ConfigClockSource+0x4d8>)
 800a78a:	f7f8 f87a 	bl	8002882 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6818      	ldr	r0, [r3, #0]
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	6899      	ldr	r1, [r3, #8]
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	685a      	ldr	r2, [r3, #4]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	f000 fab5 	bl	800ad0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	689a      	ldr	r2, [r3, #8]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7b0:	609a      	str	r2, [r3, #8]
      break;
 800a7b2:	e13d      	b.n	800aa30 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a54      	ldr	r2, [pc, #336]	; (800a90c <HAL_TIM_ConfigClockSource+0x4c8>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d01d      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0x3b6>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7c6:	d018      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0x3b6>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a50      	ldr	r2, [pc, #320]	; (800a910 <HAL_TIM_ConfigClockSource+0x4cc>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d013      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0x3b6>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a4f      	ldr	r2, [pc, #316]	; (800a914 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d00e      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0x3b6>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a4d      	ldr	r2, [pc, #308]	; (800a918 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d009      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0x3b6>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a4d      	ldr	r2, [pc, #308]	; (800a920 <HAL_TIM_ConfigClockSource+0x4dc>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d004      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0x3b6>
 800a7f0:	f241 41f6 	movw	r1, #5366	; 0x14f6
 800a7f4:	4849      	ldr	r0, [pc, #292]	; (800a91c <HAL_TIM_ConfigClockSource+0x4d8>)
 800a7f6:	f7f8 f844 	bl	8002882 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a802:	d014      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0x3ea>
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d010      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0x3ea>
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00c      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0x3ea>
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	2b02      	cmp	r3, #2
 800a81a:	d008      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0x3ea>
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	2b0a      	cmp	r3, #10
 800a822:	d004      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0x3ea>
 800a824:	f241 41f9 	movw	r1, #5369	; 0x14f9
 800a828:	483c      	ldr	r0, [pc, #240]	; (800a91c <HAL_TIM_ConfigClockSource+0x4d8>)
 800a82a:	f7f8 f82a 	bl	8002882 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	2b0f      	cmp	r3, #15
 800a834:	d904      	bls.n	800a840 <HAL_TIM_ConfigClockSource+0x3fc>
 800a836:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800a83a:	4838      	ldr	r0, [pc, #224]	; (800a91c <HAL_TIM_ConfigClockSource+0x4d8>)
 800a83c:	f7f8 f821 	bl	8002882 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6818      	ldr	r0, [r3, #0]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	6859      	ldr	r1, [r3, #4]
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	461a      	mov	r2, r3
 800a84e:	f000 f9e3 	bl	800ac18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2150      	movs	r1, #80	; 0x50
 800a858:	4618      	mov	r0, r3
 800a85a:	f000 fa3c 	bl	800acd6 <TIM_ITRx_SetConfig>
      break;
 800a85e:	e0e7      	b.n	800aa30 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a29      	ldr	r2, [pc, #164]	; (800a90c <HAL_TIM_ConfigClockSource+0x4c8>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d01d      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x462>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a872:	d018      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x462>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a25      	ldr	r2, [pc, #148]	; (800a910 <HAL_TIM_ConfigClockSource+0x4cc>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d013      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x462>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a24      	ldr	r2, [pc, #144]	; (800a914 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d00e      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x462>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a22      	ldr	r2, [pc, #136]	; (800a918 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d009      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x462>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a22      	ldr	r2, [pc, #136]	; (800a920 <HAL_TIM_ConfigClockSource+0x4dc>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d004      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x462>
 800a89c:	f241 5106 	movw	r1, #5382	; 0x1506
 800a8a0:	481e      	ldr	r0, [pc, #120]	; (800a91c <HAL_TIM_ConfigClockSource+0x4d8>)
 800a8a2:	f7f7 ffee 	bl	8002882 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8ae:	d014      	beq.n	800a8da <HAL_TIM_ConfigClockSource+0x496>
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d010      	beq.n	800a8da <HAL_TIM_ConfigClockSource+0x496>
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00c      	beq.n	800a8da <HAL_TIM_ConfigClockSource+0x496>
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d008      	beq.n	800a8da <HAL_TIM_ConfigClockSource+0x496>
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	2b0a      	cmp	r3, #10
 800a8ce:	d004      	beq.n	800a8da <HAL_TIM_ConfigClockSource+0x496>
 800a8d0:	f241 5109 	movw	r1, #5385	; 0x1509
 800a8d4:	4811      	ldr	r0, [pc, #68]	; (800a91c <HAL_TIM_ConfigClockSource+0x4d8>)
 800a8d6:	f7f7 ffd4 	bl	8002882 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	2b0f      	cmp	r3, #15
 800a8e0:	d904      	bls.n	800a8ec <HAL_TIM_ConfigClockSource+0x4a8>
 800a8e2:	f241 510a 	movw	r1, #5386	; 0x150a
 800a8e6:	480d      	ldr	r0, [pc, #52]	; (800a91c <HAL_TIM_ConfigClockSource+0x4d8>)
 800a8e8:	f7f7 ffcb 	bl	8002882 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6818      	ldr	r0, [r3, #0]
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	6859      	ldr	r1, [r3, #4]
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	f000 f9bc 	bl	800ac76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2160      	movs	r1, #96	; 0x60
 800a904:	4618      	mov	r0, r3
 800a906:	f000 f9e6 	bl	800acd6 <TIM_ITRx_SetConfig>
      break;
 800a90a:	e091      	b.n	800aa30 <HAL_TIM_ConfigClockSource+0x5ec>
 800a90c:	40010000 	.word	0x40010000
 800a910:	40000400 	.word	0x40000400
 800a914:	40000800 	.word	0x40000800
 800a918:	40000c00 	.word	0x40000c00
 800a91c:	08010e88 	.word	0x08010e88
 800a920:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a48      	ldr	r2, [pc, #288]	; (800aa4c <HAL_TIM_ConfigClockSource+0x608>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d01d      	beq.n	800a96a <HAL_TIM_ConfigClockSource+0x526>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a936:	d018      	beq.n	800a96a <HAL_TIM_ConfigClockSource+0x526>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a44      	ldr	r2, [pc, #272]	; (800aa50 <HAL_TIM_ConfigClockSource+0x60c>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d013      	beq.n	800a96a <HAL_TIM_ConfigClockSource+0x526>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a43      	ldr	r2, [pc, #268]	; (800aa54 <HAL_TIM_ConfigClockSource+0x610>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d00e      	beq.n	800a96a <HAL_TIM_ConfigClockSource+0x526>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a41      	ldr	r2, [pc, #260]	; (800aa58 <HAL_TIM_ConfigClockSource+0x614>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d009      	beq.n	800a96a <HAL_TIM_ConfigClockSource+0x526>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a40      	ldr	r2, [pc, #256]	; (800aa5c <HAL_TIM_ConfigClockSource+0x618>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d004      	beq.n	800a96a <HAL_TIM_ConfigClockSource+0x526>
 800a960:	f241 5116 	movw	r1, #5398	; 0x1516
 800a964:	483e      	ldr	r0, [pc, #248]	; (800aa60 <HAL_TIM_ConfigClockSource+0x61c>)
 800a966:	f7f7 ff8c 	bl	8002882 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a972:	d014      	beq.n	800a99e <HAL_TIM_ConfigClockSource+0x55a>
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d010      	beq.n	800a99e <HAL_TIM_ConfigClockSource+0x55a>
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00c      	beq.n	800a99e <HAL_TIM_ConfigClockSource+0x55a>
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d008      	beq.n	800a99e <HAL_TIM_ConfigClockSource+0x55a>
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	2b0a      	cmp	r3, #10
 800a992:	d004      	beq.n	800a99e <HAL_TIM_ConfigClockSource+0x55a>
 800a994:	f241 5119 	movw	r1, #5401	; 0x1519
 800a998:	4831      	ldr	r0, [pc, #196]	; (800aa60 <HAL_TIM_ConfigClockSource+0x61c>)
 800a99a:	f7f7 ff72 	bl	8002882 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	2b0f      	cmp	r3, #15
 800a9a4:	d904      	bls.n	800a9b0 <HAL_TIM_ConfigClockSource+0x56c>
 800a9a6:	f241 511a 	movw	r1, #5402	; 0x151a
 800a9aa:	482d      	ldr	r0, [pc, #180]	; (800aa60 <HAL_TIM_ConfigClockSource+0x61c>)
 800a9ac:	f7f7 ff69 	bl	8002882 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6818      	ldr	r0, [r3, #0]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	6859      	ldr	r1, [r3, #4]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	f000 f92b 	bl	800ac18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2140      	movs	r1, #64	; 0x40
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 f984 	bl	800acd6 <TIM_ITRx_SetConfig>
      break;
 800a9ce:	e02f      	b.n	800aa30 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a1d      	ldr	r2, [pc, #116]	; (800aa4c <HAL_TIM_ConfigClockSource+0x608>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d01d      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0x5d2>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9e2:	d018      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0x5d2>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a19      	ldr	r2, [pc, #100]	; (800aa50 <HAL_TIM_ConfigClockSource+0x60c>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d013      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0x5d2>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a18      	ldr	r2, [pc, #96]	; (800aa54 <HAL_TIM_ConfigClockSource+0x610>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d00e      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0x5d2>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a16      	ldr	r2, [pc, #88]	; (800aa58 <HAL_TIM_ConfigClockSource+0x614>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d009      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0x5d2>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a15      	ldr	r2, [pc, #84]	; (800aa5c <HAL_TIM_ConfigClockSource+0x618>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d004      	beq.n	800aa16 <HAL_TIM_ConfigClockSource+0x5d2>
 800aa0c:	f241 5129 	movw	r1, #5417	; 0x1529
 800aa10:	4813      	ldr	r0, [pc, #76]	; (800aa60 <HAL_TIM_ConfigClockSource+0x61c>)
 800aa12:	f7f7 ff36 	bl	8002882 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4619      	mov	r1, r3
 800aa20:	4610      	mov	r0, r2
 800aa22:	f000 f958 	bl	800acd6 <TIM_ITRx_SetConfig>
      break;
 800aa26:	e003      	b.n	800aa30 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa2c:	e000      	b.n	800aa30 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800aa2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	40010000 	.word	0x40010000
 800aa50:	40000400 	.word	0x40000400
 800aa54:	40000800 	.word	0x40000800
 800aa58:	40000c00 	.word	0x40000c00
 800aa5c:	40014000 	.word	0x40014000
 800aa60:	08010e88 	.word	0x08010e88

0800aa64 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa94:	bf00      	nop
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800aaa8:	bf00      	nop
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aae4:	bf00      	nop
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800aaf8:	bf00      	nop
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ab0c:	bf00      	nop
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a34      	ldr	r2, [pc, #208]	; (800abfc <TIM_Base_SetConfig+0xe4>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d00f      	beq.n	800ab50 <TIM_Base_SetConfig+0x38>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab36:	d00b      	beq.n	800ab50 <TIM_Base_SetConfig+0x38>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a31      	ldr	r2, [pc, #196]	; (800ac00 <TIM_Base_SetConfig+0xe8>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d007      	beq.n	800ab50 <TIM_Base_SetConfig+0x38>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a30      	ldr	r2, [pc, #192]	; (800ac04 <TIM_Base_SetConfig+0xec>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d003      	beq.n	800ab50 <TIM_Base_SetConfig+0x38>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a2f      	ldr	r2, [pc, #188]	; (800ac08 <TIM_Base_SetConfig+0xf0>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d108      	bne.n	800ab62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a25      	ldr	r2, [pc, #148]	; (800abfc <TIM_Base_SetConfig+0xe4>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d01b      	beq.n	800aba2 <TIM_Base_SetConfig+0x8a>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab70:	d017      	beq.n	800aba2 <TIM_Base_SetConfig+0x8a>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a22      	ldr	r2, [pc, #136]	; (800ac00 <TIM_Base_SetConfig+0xe8>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d013      	beq.n	800aba2 <TIM_Base_SetConfig+0x8a>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a21      	ldr	r2, [pc, #132]	; (800ac04 <TIM_Base_SetConfig+0xec>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d00f      	beq.n	800aba2 <TIM_Base_SetConfig+0x8a>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a20      	ldr	r2, [pc, #128]	; (800ac08 <TIM_Base_SetConfig+0xf0>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d00b      	beq.n	800aba2 <TIM_Base_SetConfig+0x8a>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a1f      	ldr	r2, [pc, #124]	; (800ac0c <TIM_Base_SetConfig+0xf4>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d007      	beq.n	800aba2 <TIM_Base_SetConfig+0x8a>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a1e      	ldr	r2, [pc, #120]	; (800ac10 <TIM_Base_SetConfig+0xf8>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d003      	beq.n	800aba2 <TIM_Base_SetConfig+0x8a>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a1d      	ldr	r2, [pc, #116]	; (800ac14 <TIM_Base_SetConfig+0xfc>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d108      	bne.n	800abb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	695b      	ldr	r3, [r3, #20]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	689a      	ldr	r2, [r3, #8]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4a08      	ldr	r2, [pc, #32]	; (800abfc <TIM_Base_SetConfig+0xe4>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d103      	bne.n	800abe8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	691a      	ldr	r2, [r3, #16]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	615a      	str	r2, [r3, #20]
}
 800abee:	bf00      	nop
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	40010000 	.word	0x40010000
 800ac00:	40000400 	.word	0x40000400
 800ac04:	40000800 	.word	0x40000800
 800ac08:	40000c00 	.word	0x40000c00
 800ac0c:	40014000 	.word	0x40014000
 800ac10:	40014400 	.word	0x40014400
 800ac14:	40014800 	.word	0x40014800

0800ac18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b087      	sub	sp, #28
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	f023 0201 	bic.w	r2, r3, #1
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	011b      	lsls	r3, r3, #4
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	f023 030a 	bic.w	r3, r3, #10
 800ac54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	693a      	ldr	r2, [r7, #16]
 800ac62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	697a      	ldr	r2, [r7, #20]
 800ac68:	621a      	str	r2, [r3, #32]
}
 800ac6a:	bf00      	nop
 800ac6c:	371c      	adds	r7, #28
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr

0800ac76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b087      	sub	sp, #28
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	60f8      	str	r0, [r7, #12]
 800ac7e:	60b9      	str	r1, [r7, #8]
 800ac80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6a1b      	ldr	r3, [r3, #32]
 800ac86:	f023 0210 	bic.w	r2, r3, #16
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6a1b      	ldr	r3, [r3, #32]
 800ac98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	031b      	lsls	r3, r3, #12
 800aca6:	697a      	ldr	r2, [r7, #20]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800acb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	011b      	lsls	r3, r3, #4
 800acb8:	693a      	ldr	r2, [r7, #16]
 800acba:	4313      	orrs	r3, r2
 800acbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	621a      	str	r2, [r3, #32]
}
 800acca:	bf00      	nop
 800accc:	371c      	adds	r7, #28
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr

0800acd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800acd6:	b480      	push	{r7}
 800acd8:	b085      	sub	sp, #20
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
 800acde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acee:	683a      	ldr	r2, [r7, #0]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	f043 0307 	orr.w	r3, r3, #7
 800acf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	609a      	str	r2, [r3, #8]
}
 800ad00:	bf00      	nop
 800ad02:	3714      	adds	r7, #20
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b087      	sub	sp, #28
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
 800ad18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	021a      	lsls	r2, r3, #8
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	431a      	orrs	r2, r3
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	697a      	ldr	r2, [r7, #20]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	697a      	ldr	r2, [r7, #20]
 800ad3e:	609a      	str	r2, [r3, #8]
}
 800ad40:	bf00      	nop
 800ad42:	371c      	adds	r7, #28
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a1c      	ldr	r2, [pc, #112]	; (800adc8 <TIM_ResetCallback+0x7c>)
 800ad58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a1b      	ldr	r2, [pc, #108]	; (800adcc <TIM_ResetCallback+0x80>)
 800ad60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a1a      	ldr	r2, [pc, #104]	; (800add0 <TIM_ResetCallback+0x84>)
 800ad68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4a19      	ldr	r2, [pc, #100]	; (800add4 <TIM_ResetCallback+0x88>)
 800ad70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a18      	ldr	r2, [pc, #96]	; (800add8 <TIM_ResetCallback+0x8c>)
 800ad78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4a17      	ldr	r2, [pc, #92]	; (800addc <TIM_ResetCallback+0x90>)
 800ad80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4a16      	ldr	r2, [pc, #88]	; (800ade0 <TIM_ResetCallback+0x94>)
 800ad88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4a15      	ldr	r2, [pc, #84]	; (800ade4 <TIM_ResetCallback+0x98>)
 800ad90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a14      	ldr	r2, [pc, #80]	; (800ade8 <TIM_ResetCallback+0x9c>)
 800ad98:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a13      	ldr	r2, [pc, #76]	; (800adec <TIM_ResetCallback+0xa0>)
 800ada0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a12      	ldr	r2, [pc, #72]	; (800adf0 <TIM_ResetCallback+0xa4>)
 800ada8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a11      	ldr	r2, [pc, #68]	; (800adf4 <TIM_ResetCallback+0xa8>)
 800adb0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a10      	ldr	r2, [pc, #64]	; (800adf8 <TIM_ResetCallback+0xac>)
 800adb8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800adbc:	bf00      	nop
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr
 800adc8:	080027c9 	.word	0x080027c9
 800adcc:	0800aa65 	.word	0x0800aa65
 800add0:	0800aadd 	.word	0x0800aadd
 800add4:	0800aaf1 	.word	0x0800aaf1
 800add8:	0800aa8d 	.word	0x0800aa8d
 800addc:	0800aaa1 	.word	0x0800aaa1
 800ade0:	0800aa79 	.word	0x0800aa79
 800ade4:	0800aab5 	.word	0x0800aab5
 800ade8:	0800aac9 	.word	0x0800aac9
 800adec:	0800ab05 	.word	0x0800ab05
 800adf0:	0800af79 	.word	0x0800af79
 800adf4:	0800af8d 	.word	0x0800af8d
 800adf8:	0800afa1 	.word	0x0800afa1

0800adfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a55      	ldr	r2, [pc, #340]	; (800af60 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d018      	beq.n	800ae42 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae18:	d013      	beq.n	800ae42 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a51      	ldr	r2, [pc, #324]	; (800af64 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d00e      	beq.n	800ae42 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a4f      	ldr	r2, [pc, #316]	; (800af68 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d009      	beq.n	800ae42 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a4e      	ldr	r2, [pc, #312]	; (800af6c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d004      	beq.n	800ae42 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800ae38:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800ae3c:	484c      	ldr	r0, [pc, #304]	; (800af70 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ae3e:	f7f7 fd20 	bl	8002882 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d020      	beq.n	800ae8c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b10      	cmp	r3, #16
 800ae50:	d01c      	beq.n	800ae8c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2b20      	cmp	r3, #32
 800ae58:	d018      	beq.n	800ae8c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b30      	cmp	r3, #48	; 0x30
 800ae60:	d014      	beq.n	800ae8c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b40      	cmp	r3, #64	; 0x40
 800ae68:	d010      	beq.n	800ae8c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b50      	cmp	r3, #80	; 0x50
 800ae70:	d00c      	beq.n	800ae8c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b60      	cmp	r3, #96	; 0x60
 800ae78:	d008      	beq.n	800ae8c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2b70      	cmp	r3, #112	; 0x70
 800ae80:	d004      	beq.n	800ae8c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae82:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800ae86:	483a      	ldr	r0, [pc, #232]	; (800af70 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ae88:	f7f7 fcfb 	bl	8002882 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	2b80      	cmp	r3, #128	; 0x80
 800ae92:	d008      	beq.n	800aea6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d004      	beq.n	800aea6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800ae9c:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800aea0:	4833      	ldr	r0, [pc, #204]	; (800af70 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800aea2:	f7f7 fcee 	bl	8002882 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d101      	bne.n	800aeb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	e050      	b.n	800af56 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2202      	movs	r2, #2
 800aec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a1b      	ldr	r2, [pc, #108]	; (800af60 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d018      	beq.n	800af2a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af00:	d013      	beq.n	800af2a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a17      	ldr	r2, [pc, #92]	; (800af64 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d00e      	beq.n	800af2a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a15      	ldr	r2, [pc, #84]	; (800af68 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d009      	beq.n	800af2a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a14      	ldr	r2, [pc, #80]	; (800af6c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d004      	beq.n	800af2a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a13      	ldr	r2, [pc, #76]	; (800af74 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d10c      	bne.n	800af44 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	4313      	orrs	r3, r2
 800af3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68ba      	ldr	r2, [r7, #8]
 800af42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	40010000 	.word	0x40010000
 800af64:	40000400 	.word	0x40000400
 800af68:	40000800 	.word	0x40000800
 800af6c:	40000c00 	.word	0x40000c00
 800af70:	08010efc 	.word	0x08010efc
 800af74:	40014000 	.word	0x40014000

0800af78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af80:	bf00      	nop
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d101      	bne.n	800afc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	e0ab      	b.n	800b11e <HAL_UART_Init+0x16a>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	699b      	ldr	r3, [r3, #24]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d02c      	beq.n	800b028 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a55      	ldr	r2, [pc, #340]	; (800b128 <HAL_UART_Init+0x174>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d00e      	beq.n	800aff6 <HAL_UART_Init+0x42>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a53      	ldr	r2, [pc, #332]	; (800b12c <HAL_UART_Init+0x178>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d009      	beq.n	800aff6 <HAL_UART_Init+0x42>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a52      	ldr	r2, [pc, #328]	; (800b130 <HAL_UART_Init+0x17c>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d004      	beq.n	800aff6 <HAL_UART_Init+0x42>
 800afec:	f240 1173 	movw	r1, #371	; 0x173
 800aff0:	4850      	ldr	r0, [pc, #320]	; (800b134 <HAL_UART_Init+0x180>)
 800aff2:	f7f7 fc46 	bl	8002882 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	699b      	ldr	r3, [r3, #24]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d028      	beq.n	800b050 <HAL_UART_Init+0x9c>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b006:	d023      	beq.n	800b050 <HAL_UART_Init+0x9c>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b010:	d01e      	beq.n	800b050 <HAL_UART_Init+0x9c>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	699b      	ldr	r3, [r3, #24]
 800b016:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b01a:	d019      	beq.n	800b050 <HAL_UART_Init+0x9c>
 800b01c:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800b020:	4844      	ldr	r0, [pc, #272]	; (800b134 <HAL_UART_Init+0x180>)
 800b022:	f7f7 fc2e 	bl	8002882 <assert_failed>
 800b026:	e013      	b.n	800b050 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a3e      	ldr	r2, [pc, #248]	; (800b128 <HAL_UART_Init+0x174>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d00e      	beq.n	800b050 <HAL_UART_Init+0x9c>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a3d      	ldr	r2, [pc, #244]	; (800b12c <HAL_UART_Init+0x178>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d009      	beq.n	800b050 <HAL_UART_Init+0x9c>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a3b      	ldr	r2, [pc, #236]	; (800b130 <HAL_UART_Init+0x17c>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d004      	beq.n	800b050 <HAL_UART_Init+0x9c>
 800b046:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800b04a:	483a      	ldr	r0, [pc, #232]	; (800b134 <HAL_UART_Init+0x180>)
 800b04c:	f7f7 fc19 	bl	8002882 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d009      	beq.n	800b06c <HAL_UART_Init+0xb8>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b060:	d004      	beq.n	800b06c <HAL_UART_Init+0xb8>
 800b062:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800b066:	4833      	ldr	r0, [pc, #204]	; (800b134 <HAL_UART_Init+0x180>)
 800b068:	f7f7 fc0b 	bl	8002882 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	69db      	ldr	r3, [r3, #28]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d009      	beq.n	800b088 <HAL_UART_Init+0xd4>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	69db      	ldr	r3, [r3, #28]
 800b078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b07c:	d004      	beq.n	800b088 <HAL_UART_Init+0xd4>
 800b07e:	f240 117b 	movw	r1, #379	; 0x17b
 800b082:	482c      	ldr	r0, [pc, #176]	; (800b134 <HAL_UART_Init+0x180>)
 800b084:	f7f7 fbfd 	bl	8002882 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	2b00      	cmp	r3, #0
 800b092:	d111      	bne.n	800b0b8 <HAL_UART_Init+0x104>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 fb61 	bl	800b764 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d102      	bne.n	800b0b0 <HAL_UART_Init+0xfc>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4a22      	ldr	r2, [pc, #136]	; (800b138 <HAL_UART_Init+0x184>)
 800b0ae:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2224      	movs	r2, #36	; 0x24
 800b0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68da      	ldr	r2, [r3, #12]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b0ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 fd5b 	bl	800bb8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	691a      	ldr	r2, [r3, #16]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b0e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	695a      	ldr	r2, [r3, #20]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b0f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68da      	ldr	r2, [r3, #12]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2220      	movs	r2, #32
 800b110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2220      	movs	r2, #32
 800b118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3708      	adds	r7, #8
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	40011000 	.word	0x40011000
 800b12c:	40004400 	.word	0x40004400
 800b130:	40011400 	.word	0x40011400
 800b134:	08010f74 	.word	0x08010f74
 800b138:	080034ad 	.word	0x080034ad

0800b13c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	4613      	mov	r3, r2
 800b148:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b150:	b2db      	uxtb	r3, r3
 800b152:	2b20      	cmp	r3, #32
 800b154:	d11d      	bne.n	800b192 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d002      	beq.n	800b162 <HAL_UART_Receive_IT+0x26>
 800b15c:	88fb      	ldrh	r3, [r7, #6]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b162:	2301      	movs	r3, #1
 800b164:	e016      	b.n	800b194 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d101      	bne.n	800b174 <HAL_UART_Receive_IT+0x38>
 800b170:	2302      	movs	r3, #2
 800b172:	e00f      	b.n	800b194 <HAL_UART_Receive_IT+0x58>
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2200      	movs	r2, #0
 800b180:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b182:	88fb      	ldrh	r3, [r7, #6]
 800b184:	461a      	mov	r2, r3
 800b186:	68b9      	ldr	r1, [r7, #8]
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	f000 fb23 	bl	800b7d4 <UART_Start_Receive_IT>
 800b18e:	4603      	mov	r3, r0
 800b190:	e000      	b.n	800b194 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b192:	2302      	movs	r3, #2
  }
}
 800b194:	4618      	mov	r0, r3
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b0ba      	sub	sp, #232	; 0xe8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	695b      	ldr	r3, [r3, #20]
 800b1be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b1ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1d2:	f003 030f 	and.w	r3, r3, #15
 800b1d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b1da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d10f      	bne.n	800b202 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b1e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1e6:	f003 0320 	and.w	r3, r3, #32
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d009      	beq.n	800b202 <HAL_UART_IRQHandler+0x66>
 800b1ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1f2:	f003 0320 	and.w	r3, r3, #32
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d003      	beq.n	800b202 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fc09 	bl	800ba12 <UART_Receive_IT>
      return;
 800b200:	e25b      	b.n	800b6ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b206:	2b00      	cmp	r3, #0
 800b208:	f000 80e1 	beq.w	800b3ce <HAL_UART_IRQHandler+0x232>
 800b20c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b210:	f003 0301 	and.w	r3, r3, #1
 800b214:	2b00      	cmp	r3, #0
 800b216:	d106      	bne.n	800b226 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b21c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b220:	2b00      	cmp	r3, #0
 800b222:	f000 80d4 	beq.w	800b3ce <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b22a:	f003 0301 	and.w	r3, r3, #1
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00b      	beq.n	800b24a <HAL_UART_IRQHandler+0xae>
 800b232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d005      	beq.n	800b24a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b242:	f043 0201 	orr.w	r2, r3, #1
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b24a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b24e:	f003 0304 	and.w	r3, r3, #4
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00b      	beq.n	800b26e <HAL_UART_IRQHandler+0xd2>
 800b256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b25a:	f003 0301 	and.w	r3, r3, #1
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d005      	beq.n	800b26e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b266:	f043 0202 	orr.w	r2, r3, #2
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b26e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b272:	f003 0302 	and.w	r3, r3, #2
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00b      	beq.n	800b292 <HAL_UART_IRQHandler+0xf6>
 800b27a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b27e:	f003 0301 	and.w	r3, r3, #1
 800b282:	2b00      	cmp	r3, #0
 800b284:	d005      	beq.n	800b292 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b28a:	f043 0204 	orr.w	r2, r3, #4
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b296:	f003 0308 	and.w	r3, r3, #8
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d011      	beq.n	800b2c2 <HAL_UART_IRQHandler+0x126>
 800b29e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2a2:	f003 0320 	and.w	r3, r3, #32
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d105      	bne.n	800b2b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b2aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d005      	beq.n	800b2c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ba:	f043 0208 	orr.w	r2, r3, #8
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	f000 81f2 	beq.w	800b6b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b2cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2d0:	f003 0320 	and.w	r3, r3, #32
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d008      	beq.n	800b2ea <HAL_UART_IRQHandler+0x14e>
 800b2d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2dc:	f003 0320 	and.w	r3, r3, #32
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fb94 	bl	800ba12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	695b      	ldr	r3, [r3, #20]
 800b2f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f4:	2b40      	cmp	r3, #64	; 0x40
 800b2f6:	bf0c      	ite	eq
 800b2f8:	2301      	moveq	r3, #1
 800b2fa:	2300      	movne	r3, #0
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b306:	f003 0308 	and.w	r3, r3, #8
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d103      	bne.n	800b316 <HAL_UART_IRQHandler+0x17a>
 800b30e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b312:	2b00      	cmp	r3, #0
 800b314:	d051      	beq.n	800b3ba <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fa9a 	bl	800b850 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	695b      	ldr	r3, [r3, #20]
 800b322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b326:	2b40      	cmp	r3, #64	; 0x40
 800b328:	d142      	bne.n	800b3b0 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	3314      	adds	r3, #20
 800b330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b338:	e853 3f00 	ldrex	r3, [r3]
 800b33c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	3314      	adds	r3, #20
 800b352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b356:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b35a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b366:	e841 2300 	strex	r3, r2, [r1]
 800b36a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b36e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1d9      	bne.n	800b32a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d013      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b382:	4a7f      	ldr	r2, [pc, #508]	; (800b580 <HAL_UART_IRQHandler+0x3e4>)
 800b384:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7f9 fdd6 	bl	8004f3c <HAL_DMA_Abort_IT>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d019      	beq.n	800b3ca <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b39a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3a4:	e011      	b.n	800b3ca <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3ae:	e00c      	b.n	800b3ca <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3b8:	e007      	b.n	800b3ca <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b3c8:	e172      	b.n	800b6b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3ca:	bf00      	nop
    return;
 800b3cc:	e170      	b.n	800b6b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	f040 814c 	bne.w	800b670 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3dc:	f003 0310 	and.w	r3, r3, #16
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	f000 8145 	beq.w	800b670 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b3e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3ea:	f003 0310 	and.w	r3, r3, #16
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f000 813e 	beq.w	800b670 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	60bb      	str	r3, [r7, #8]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	60bb      	str	r3, [r7, #8]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	60bb      	str	r3, [r7, #8]
 800b408:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	695b      	ldr	r3, [r3, #20]
 800b410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b414:	2b40      	cmp	r3, #64	; 0x40
 800b416:	f040 80b5 	bne.w	800b584 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b426:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f000 8142 	beq.w	800b6b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b434:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b438:	429a      	cmp	r2, r3
 800b43a:	f080 813b 	bcs.w	800b6b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b444:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44a:	69db      	ldr	r3, [r3, #28]
 800b44c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b450:	f000 8088 	beq.w	800b564 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	330c      	adds	r3, #12
 800b45a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b462:	e853 3f00 	ldrex	r3, [r3]
 800b466:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b46a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b46e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b472:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	330c      	adds	r3, #12
 800b47c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b480:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b484:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b488:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b48c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b490:	e841 2300 	strex	r3, r2, [r1]
 800b494:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b498:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1d9      	bne.n	800b454 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	3314      	adds	r3, #20
 800b4a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4aa:	e853 3f00 	ldrex	r3, [r3]
 800b4ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b4b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4b2:	f023 0301 	bic.w	r3, r3, #1
 800b4b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	3314      	adds	r3, #20
 800b4c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b4c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b4c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b4cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b4d0:	e841 2300 	strex	r3, r2, [r1]
 800b4d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b4d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d1e1      	bne.n	800b4a0 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	3314      	adds	r3, #20
 800b4e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4e6:	e853 3f00 	ldrex	r3, [r3]
 800b4ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b4ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3314      	adds	r3, #20
 800b4fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b500:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b502:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b504:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b506:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b508:	e841 2300 	strex	r3, r2, [r1]
 800b50c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b50e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b510:	2b00      	cmp	r3, #0
 800b512:	d1e3      	bne.n	800b4dc <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2220      	movs	r2, #32
 800b518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	330c      	adds	r3, #12
 800b528:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b52c:	e853 3f00 	ldrex	r3, [r3]
 800b530:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b534:	f023 0310 	bic.w	r3, r3, #16
 800b538:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	330c      	adds	r3, #12
 800b542:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b546:	65ba      	str	r2, [r7, #88]	; 0x58
 800b548:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b54c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b54e:	e841 2300 	strex	r3, r2, [r1]
 800b552:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1e3      	bne.n	800b522 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b55e:	4618      	mov	r0, r3
 800b560:	f7f9 fc7c 	bl	8004e5c <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b570:	b292      	uxth	r2, r2
 800b572:	1a8a      	subs	r2, r1, r2
 800b574:	b292      	uxth	r2, r2
 800b576:	4611      	mov	r1, r2
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b57c:	e09a      	b.n	800b6b4 <HAL_UART_IRQHandler+0x518>
 800b57e:	bf00      	nop
 800b580:	0800b917 	.word	0x0800b917
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b598:	b29b      	uxth	r3, r3
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f000 808c 	beq.w	800b6b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b5a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 8087 	beq.w	800b6b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	330c      	adds	r3, #12
 800b5b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b4:	e853 3f00 	ldrex	r3, [r3]
 800b5b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	330c      	adds	r3, #12
 800b5ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b5ce:	647a      	str	r2, [r7, #68]	; 0x44
 800b5d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b5d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5d6:	e841 2300 	strex	r3, r2, [r1]
 800b5da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1e3      	bne.n	800b5aa <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	3314      	adds	r3, #20
 800b5e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	e853 3f00 	ldrex	r3, [r3]
 800b5f0:	623b      	str	r3, [r7, #32]
   return(result);
 800b5f2:	6a3b      	ldr	r3, [r7, #32]
 800b5f4:	f023 0301 	bic.w	r3, r3, #1
 800b5f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	3314      	adds	r3, #20
 800b602:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b606:	633a      	str	r2, [r7, #48]	; 0x30
 800b608:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b60c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b60e:	e841 2300 	strex	r3, r2, [r1]
 800b612:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1e3      	bne.n	800b5e2 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2220      	movs	r2, #32
 800b61e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	330c      	adds	r3, #12
 800b62e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	e853 3f00 	ldrex	r3, [r3]
 800b636:	60fb      	str	r3, [r7, #12]
   return(result);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f023 0310 	bic.w	r3, r3, #16
 800b63e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	330c      	adds	r3, #12
 800b648:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b64c:	61fa      	str	r2, [r7, #28]
 800b64e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b650:	69b9      	ldr	r1, [r7, #24]
 800b652:	69fa      	ldr	r2, [r7, #28]
 800b654:	e841 2300 	strex	r3, r2, [r1]
 800b658:	617b      	str	r3, [r7, #20]
   return(result);
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1e3      	bne.n	800b628 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b664:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b668:	4611      	mov	r1, r2
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b66e:	e023      	b.n	800b6b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d009      	beq.n	800b690 <HAL_UART_IRQHandler+0x4f4>
 800b67c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b684:	2b00      	cmp	r3, #0
 800b686:	d003      	beq.n	800b690 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f959 	bl	800b940 <UART_Transmit_IT>
    return;
 800b68e:	e014      	b.n	800b6ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d00e      	beq.n	800b6ba <HAL_UART_IRQHandler+0x51e>
 800b69c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d008      	beq.n	800b6ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 f999 	bl	800b9e0 <UART_EndTransmit_IT>
    return;
 800b6ae:	e004      	b.n	800b6ba <HAL_UART_IRQHandler+0x51e>
    return;
 800b6b0:	bf00      	nop
 800b6b2:	e002      	b.n	800b6ba <HAL_UART_IRQHandler+0x51e>
      return;
 800b6b4:	bf00      	nop
 800b6b6:	e000      	b.n	800b6ba <HAL_UART_IRQHandler+0x51e>
      return;
 800b6b8:	bf00      	nop
  }
}
 800b6ba:	37e8      	adds	r7, #232	; 0xe8
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b6c8:	bf00      	nop
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b6dc:	bf00      	nop
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b6f0:	bf00      	nop
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b704:	bf00      	nop
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b718:	bf00      	nop
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b740:	bf00      	nop
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	460b      	mov	r3, r1
 800b756:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4a10      	ldr	r2, [pc, #64]	; (800b7b0 <UART_InitCallbacksToDefault+0x4c>)
 800b770:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	4a0f      	ldr	r2, [pc, #60]	; (800b7b4 <UART_InitCallbacksToDefault+0x50>)
 800b776:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a0f      	ldr	r2, [pc, #60]	; (800b7b8 <UART_InitCallbacksToDefault+0x54>)
 800b77c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4a0e      	ldr	r2, [pc, #56]	; (800b7bc <UART_InitCallbacksToDefault+0x58>)
 800b782:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a0e      	ldr	r2, [pc, #56]	; (800b7c0 <UART_InitCallbacksToDefault+0x5c>)
 800b788:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4a0d      	ldr	r2, [pc, #52]	; (800b7c4 <UART_InitCallbacksToDefault+0x60>)
 800b78e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4a0d      	ldr	r2, [pc, #52]	; (800b7c8 <UART_InitCallbacksToDefault+0x64>)
 800b794:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4a0c      	ldr	r2, [pc, #48]	; (800b7cc <UART_InitCallbacksToDefault+0x68>)
 800b79a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a0c      	ldr	r2, [pc, #48]	; (800b7d0 <UART_InitCallbacksToDefault+0x6c>)
 800b7a0:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b7a2:	bf00      	nop
 800b7a4:	370c      	adds	r7, #12
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	0800b6d5 	.word	0x0800b6d5
 800b7b4:	0800b6c1 	.word	0x0800b6c1
 800b7b8:	0800b6e9 	.word	0x0800b6e9
 800b7bc:	0800354d 	.word	0x0800354d
 800b7c0:	0800b6fd 	.word	0x0800b6fd
 800b7c4:	0800b711 	.word	0x0800b711
 800b7c8:	0800b725 	.word	0x0800b725
 800b7cc:	0800b739 	.word	0x0800b739
 800b7d0:	0800b74d 	.word	0x0800b74d

0800b7d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	4613      	mov	r3, r2
 800b7e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	88fa      	ldrh	r2, [r7, #6]
 800b7ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	88fa      	ldrh	r2, [r7, #6]
 800b7f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2222      	movs	r2, #34	; 0x22
 800b7fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2200      	movs	r2, #0
 800b806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d007      	beq.n	800b822 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	68da      	ldr	r2, [r3, #12]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b820:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	695a      	ldr	r2, [r3, #20]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f042 0201 	orr.w	r2, r2, #1
 800b830:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	68da      	ldr	r2, [r3, #12]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f042 0220 	orr.w	r2, r2, #32
 800b840:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b850:	b480      	push	{r7}
 800b852:	b095      	sub	sp, #84	; 0x54
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	330c      	adds	r3, #12
 800b85e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b862:	e853 3f00 	ldrex	r3, [r3]
 800b866:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b86e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	330c      	adds	r3, #12
 800b876:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b878:	643a      	str	r2, [r7, #64]	; 0x40
 800b87a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b87e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b880:	e841 2300 	strex	r3, r2, [r1]
 800b884:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1e5      	bne.n	800b858 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	3314      	adds	r3, #20
 800b892:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b894:	6a3b      	ldr	r3, [r7, #32]
 800b896:	e853 3f00 	ldrex	r3, [r3]
 800b89a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	f023 0301 	bic.w	r3, r3, #1
 800b8a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	3314      	adds	r3, #20
 800b8aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b8ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8b4:	e841 2300 	strex	r3, r2, [r1]
 800b8b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d1e5      	bne.n	800b88c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d119      	bne.n	800b8fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	330c      	adds	r3, #12
 800b8ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	e853 3f00 	ldrex	r3, [r3]
 800b8d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	f023 0310 	bic.w	r3, r3, #16
 800b8de:	647b      	str	r3, [r7, #68]	; 0x44
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	330c      	adds	r3, #12
 800b8e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8e8:	61ba      	str	r2, [r7, #24]
 800b8ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ec:	6979      	ldr	r1, [r7, #20]
 800b8ee:	69ba      	ldr	r2, [r7, #24]
 800b8f0:	e841 2300 	strex	r3, r2, [r1]
 800b8f4:	613b      	str	r3, [r7, #16]
   return(result);
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1e5      	bne.n	800b8c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2220      	movs	r2, #32
 800b900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b90a:	bf00      	nop
 800b90c:	3754      	adds	r7, #84	; 0x54
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b084      	sub	sp, #16
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b922:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2200      	movs	r2, #0
 800b928:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2200      	movs	r2, #0
 800b92e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b938:	bf00      	nop
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	2b21      	cmp	r3, #33	; 0x21
 800b952:	d13e      	bne.n	800b9d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b95c:	d114      	bne.n	800b988 <UART_Transmit_IT+0x48>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	691b      	ldr	r3, [r3, #16]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d110      	bne.n	800b988 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a1b      	ldr	r3, [r3, #32]
 800b96a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	881b      	ldrh	r3, [r3, #0]
 800b970:	461a      	mov	r2, r3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b97a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6a1b      	ldr	r3, [r3, #32]
 800b980:	1c9a      	adds	r2, r3, #2
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	621a      	str	r2, [r3, #32]
 800b986:	e008      	b.n	800b99a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6a1b      	ldr	r3, [r3, #32]
 800b98c:	1c59      	adds	r1, r3, #1
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	6211      	str	r1, [r2, #32]
 800b992:	781a      	ldrb	r2, [r3, #0]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d10f      	bne.n	800b9ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	68da      	ldr	r2, [r3, #12]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b9bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	68da      	ldr	r2, [r3, #12]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	e000      	b.n	800b9d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b9d2:	2302      	movs	r3, #2
  }
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3714      	adds	r7, #20
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	68da      	ldr	r2, [r3, #12]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2220      	movs	r2, #32
 800b9fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b08c      	sub	sp, #48	; 0x30
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	2b22      	cmp	r3, #34	; 0x22
 800ba24:	f040 80ad 	bne.w	800bb82 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba30:	d117      	bne.n	800ba62 <UART_Receive_IT+0x50>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	691b      	ldr	r3, [r3, #16]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d113      	bne.n	800ba62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba5a:	1c9a      	adds	r2, r3, #2
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	629a      	str	r2, [r3, #40]	; 0x28
 800ba60:	e026      	b.n	800bab0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba74:	d007      	beq.n	800ba86 <UART_Receive_IT+0x74>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d10a      	bne.n	800ba94 <UART_Receive_IT+0x82>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	691b      	ldr	r3, [r3, #16]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d106      	bne.n	800ba94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	b2da      	uxtb	r2, r3
 800ba8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba90:	701a      	strb	r2, [r3, #0]
 800ba92:	e008      	b.n	800baa6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baa0:	b2da      	uxtb	r2, r3
 800baa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baaa:	1c5a      	adds	r2, r3, #1
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	3b01      	subs	r3, #1
 800bab8:	b29b      	uxth	r3, r3
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	4619      	mov	r1, r3
 800babe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d15c      	bne.n	800bb7e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68da      	ldr	r2, [r3, #12]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f022 0220 	bic.w	r2, r2, #32
 800bad2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68da      	ldr	r2, [r3, #12]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bae2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	695a      	ldr	r2, [r3, #20]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f022 0201 	bic.w	r2, r2, #1
 800baf2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2220      	movs	r2, #32
 800baf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d136      	bne.n	800bb72 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	330c      	adds	r3, #12
 800bb10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	e853 3f00 	ldrex	r3, [r3]
 800bb18:	613b      	str	r3, [r7, #16]
   return(result);
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	f023 0310 	bic.w	r3, r3, #16
 800bb20:	627b      	str	r3, [r7, #36]	; 0x24
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	330c      	adds	r3, #12
 800bb28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb2a:	623a      	str	r2, [r7, #32]
 800bb2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2e:	69f9      	ldr	r1, [r7, #28]
 800bb30:	6a3a      	ldr	r2, [r7, #32]
 800bb32:	e841 2300 	strex	r3, r2, [r1]
 800bb36:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1e5      	bne.n	800bb0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f003 0310 	and.w	r3, r3, #16
 800bb48:	2b10      	cmp	r3, #16
 800bb4a:	d10a      	bne.n	800bb62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	60fb      	str	r3, [r7, #12]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	60fb      	str	r3, [r7, #12]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	60fb      	str	r3, [r7, #12]
 800bb60:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800bb6a:	4611      	mov	r1, r2
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	4798      	blx	r3
 800bb70:	e003      	b.n	800bb7a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	e002      	b.n	800bb84 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	e000      	b.n	800bb84 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800bb82:	2302      	movs	r3, #2
  }
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3730      	adds	r7, #48	; 0x30
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb90:	b0c0      	sub	sp, #256	; 0x100
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bb98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb9c:	685a      	ldr	r2, [r3, #4]
 800bb9e:	4bcf      	ldr	r3, [pc, #828]	; (800bedc <UART_SetConfig+0x350>)
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d904      	bls.n	800bbae <UART_SetConfig+0x22>
 800bba4:	f640 6161 	movw	r1, #3681	; 0xe61
 800bba8:	48cd      	ldr	r0, [pc, #820]	; (800bee0 <UART_SetConfig+0x354>)
 800bbaa:	f7f6 fe6a 	bl	8002882 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800bbae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00a      	beq.n	800bbce <UART_SetConfig+0x42>
 800bbb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbc2:	d004      	beq.n	800bbce <UART_SetConfig+0x42>
 800bbc4:	f640 6162 	movw	r1, #3682	; 0xe62
 800bbc8:	48c5      	ldr	r0, [pc, #788]	; (800bee0 <UART_SetConfig+0x354>)
 800bbca:	f7f6 fe5a 	bl	8002882 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800bbce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbd2:	691b      	ldr	r3, [r3, #16]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d010      	beq.n	800bbfa <UART_SetConfig+0x6e>
 800bbd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbdc:	691b      	ldr	r3, [r3, #16]
 800bbde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbe2:	d00a      	beq.n	800bbfa <UART_SetConfig+0x6e>
 800bbe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bbee:	d004      	beq.n	800bbfa <UART_SetConfig+0x6e>
 800bbf0:	f640 6163 	movw	r1, #3683	; 0xe63
 800bbf4:	48ba      	ldr	r0, [pc, #744]	; (800bee0 <UART_SetConfig+0x354>)
 800bbf6:	f7f6 fe44 	bl	8002882 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800bbfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbfe:	695a      	ldr	r2, [r3, #20]
 800bc00:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800bc04:	4013      	ands	r3, r2
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d104      	bne.n	800bc14 <UART_SetConfig+0x88>
 800bc0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc0e:	695b      	ldr	r3, [r3, #20]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d104      	bne.n	800bc1e <UART_SetConfig+0x92>
 800bc14:	f640 6164 	movw	r1, #3684	; 0xe64
 800bc18:	48b1      	ldr	r0, [pc, #708]	; (800bee0 <UART_SetConfig+0x354>)
 800bc1a:	f7f6 fe32 	bl	8002882 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bc2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc2e:	68d9      	ldr	r1, [r3, #12]
 800bc30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	ea40 0301 	orr.w	r3, r0, r1
 800bc3a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bc3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc40:	689a      	ldr	r2, [r3, #8]
 800bc42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	431a      	orrs	r2, r3
 800bc4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc4e:	695b      	ldr	r3, [r3, #20]
 800bc50:	431a      	orrs	r2, r3
 800bc52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc56:	69db      	ldr	r3, [r3, #28]
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bc5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bc6a:	f021 010c 	bic.w	r1, r1, #12
 800bc6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bc78:	430b      	orrs	r3, r1
 800bc7a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bc7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	695b      	ldr	r3, [r3, #20]
 800bc84:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bc88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc8c:	6999      	ldr	r1, [r3, #24]
 800bc8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	ea40 0301 	orr.w	r3, r0, r1
 800bc98:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bc9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	4b90      	ldr	r3, [pc, #576]	; (800bee4 <UART_SetConfig+0x358>)
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d005      	beq.n	800bcb2 <UART_SetConfig+0x126>
 800bca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	4b8e      	ldr	r3, [pc, #568]	; (800bee8 <UART_SetConfig+0x35c>)
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d104      	bne.n	800bcbc <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bcb2:	f7fc fd75 	bl	80087a0 <HAL_RCC_GetPCLK2Freq>
 800bcb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bcba:	e003      	b.n	800bcc4 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bcbc:	f7fc fd5c 	bl	8008778 <HAL_RCC_GetPCLK1Freq>
 800bcc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bcc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcc8:	69db      	ldr	r3, [r3, #28]
 800bcca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcce:	f040 810f 	bne.w	800bef0 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bcd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bcdc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bce0:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bce4:	4622      	mov	r2, r4
 800bce6:	462b      	mov	r3, r5
 800bce8:	1891      	adds	r1, r2, r2
 800bcea:	65b9      	str	r1, [r7, #88]	; 0x58
 800bcec:	415b      	adcs	r3, r3
 800bcee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcf0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bcf4:	4621      	mov	r1, r4
 800bcf6:	eb12 0801 	adds.w	r8, r2, r1
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	eb43 0901 	adc.w	r9, r3, r1
 800bd00:	f04f 0200 	mov.w	r2, #0
 800bd04:	f04f 0300 	mov.w	r3, #0
 800bd08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bd0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bd10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bd14:	4690      	mov	r8, r2
 800bd16:	4699      	mov	r9, r3
 800bd18:	4623      	mov	r3, r4
 800bd1a:	eb18 0303 	adds.w	r3, r8, r3
 800bd1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bd22:	462b      	mov	r3, r5
 800bd24:	eb49 0303 	adc.w	r3, r9, r3
 800bd28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bd38:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bd3c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bd40:	460b      	mov	r3, r1
 800bd42:	18db      	adds	r3, r3, r3
 800bd44:	653b      	str	r3, [r7, #80]	; 0x50
 800bd46:	4613      	mov	r3, r2
 800bd48:	eb42 0303 	adc.w	r3, r2, r3
 800bd4c:	657b      	str	r3, [r7, #84]	; 0x54
 800bd4e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bd52:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bd56:	f7f4 fa43 	bl	80001e0 <__aeabi_uldivmod>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	4b63      	ldr	r3, [pc, #396]	; (800beec <UART_SetConfig+0x360>)
 800bd60:	fba3 2302 	umull	r2, r3, r3, r2
 800bd64:	095b      	lsrs	r3, r3, #5
 800bd66:	011c      	lsls	r4, r3, #4
 800bd68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd72:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bd76:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bd7a:	4642      	mov	r2, r8
 800bd7c:	464b      	mov	r3, r9
 800bd7e:	1891      	adds	r1, r2, r2
 800bd80:	64b9      	str	r1, [r7, #72]	; 0x48
 800bd82:	415b      	adcs	r3, r3
 800bd84:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd86:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bd8a:	4641      	mov	r1, r8
 800bd8c:	eb12 0a01 	adds.w	sl, r2, r1
 800bd90:	4649      	mov	r1, r9
 800bd92:	eb43 0b01 	adc.w	fp, r3, r1
 800bd96:	f04f 0200 	mov.w	r2, #0
 800bd9a:	f04f 0300 	mov.w	r3, #0
 800bd9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bda2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bda6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bdaa:	4692      	mov	sl, r2
 800bdac:	469b      	mov	fp, r3
 800bdae:	4643      	mov	r3, r8
 800bdb0:	eb1a 0303 	adds.w	r3, sl, r3
 800bdb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bdb8:	464b      	mov	r3, r9
 800bdba:	eb4b 0303 	adc.w	r3, fp, r3
 800bdbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bdc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bdce:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bdd2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	18db      	adds	r3, r3, r3
 800bdda:	643b      	str	r3, [r7, #64]	; 0x40
 800bddc:	4613      	mov	r3, r2
 800bdde:	eb42 0303 	adc.w	r3, r2, r3
 800bde2:	647b      	str	r3, [r7, #68]	; 0x44
 800bde4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bde8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bdec:	f7f4 f9f8 	bl	80001e0 <__aeabi_uldivmod>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	4b3d      	ldr	r3, [pc, #244]	; (800beec <UART_SetConfig+0x360>)
 800bdf8:	fba3 2301 	umull	r2, r3, r3, r1
 800bdfc:	095b      	lsrs	r3, r3, #5
 800bdfe:	2264      	movs	r2, #100	; 0x64
 800be00:	fb02 f303 	mul.w	r3, r2, r3
 800be04:	1acb      	subs	r3, r1, r3
 800be06:	00db      	lsls	r3, r3, #3
 800be08:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800be0c:	4b37      	ldr	r3, [pc, #220]	; (800beec <UART_SetConfig+0x360>)
 800be0e:	fba3 2302 	umull	r2, r3, r3, r2
 800be12:	095b      	lsrs	r3, r3, #5
 800be14:	005b      	lsls	r3, r3, #1
 800be16:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800be1a:	441c      	add	r4, r3
 800be1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be20:	2200      	movs	r2, #0
 800be22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be26:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800be2a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800be2e:	4642      	mov	r2, r8
 800be30:	464b      	mov	r3, r9
 800be32:	1891      	adds	r1, r2, r2
 800be34:	63b9      	str	r1, [r7, #56]	; 0x38
 800be36:	415b      	adcs	r3, r3
 800be38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be3a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800be3e:	4641      	mov	r1, r8
 800be40:	1851      	adds	r1, r2, r1
 800be42:	6339      	str	r1, [r7, #48]	; 0x30
 800be44:	4649      	mov	r1, r9
 800be46:	414b      	adcs	r3, r1
 800be48:	637b      	str	r3, [r7, #52]	; 0x34
 800be4a:	f04f 0200 	mov.w	r2, #0
 800be4e:	f04f 0300 	mov.w	r3, #0
 800be52:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800be56:	4659      	mov	r1, fp
 800be58:	00cb      	lsls	r3, r1, #3
 800be5a:	4651      	mov	r1, sl
 800be5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be60:	4651      	mov	r1, sl
 800be62:	00ca      	lsls	r2, r1, #3
 800be64:	4610      	mov	r0, r2
 800be66:	4619      	mov	r1, r3
 800be68:	4603      	mov	r3, r0
 800be6a:	4642      	mov	r2, r8
 800be6c:	189b      	adds	r3, r3, r2
 800be6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be72:	464b      	mov	r3, r9
 800be74:	460a      	mov	r2, r1
 800be76:	eb42 0303 	adc.w	r3, r2, r3
 800be7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800be8a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800be8e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800be92:	460b      	mov	r3, r1
 800be94:	18db      	adds	r3, r3, r3
 800be96:	62bb      	str	r3, [r7, #40]	; 0x28
 800be98:	4613      	mov	r3, r2
 800be9a:	eb42 0303 	adc.w	r3, r2, r3
 800be9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bea0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bea4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bea8:	f7f4 f99a 	bl	80001e0 <__aeabi_uldivmod>
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	4b0e      	ldr	r3, [pc, #56]	; (800beec <UART_SetConfig+0x360>)
 800beb2:	fba3 1302 	umull	r1, r3, r3, r2
 800beb6:	095b      	lsrs	r3, r3, #5
 800beb8:	2164      	movs	r1, #100	; 0x64
 800beba:	fb01 f303 	mul.w	r3, r1, r3
 800bebe:	1ad3      	subs	r3, r2, r3
 800bec0:	00db      	lsls	r3, r3, #3
 800bec2:	3332      	adds	r3, #50	; 0x32
 800bec4:	4a09      	ldr	r2, [pc, #36]	; (800beec <UART_SetConfig+0x360>)
 800bec6:	fba2 2303 	umull	r2, r3, r2, r3
 800beca:	095b      	lsrs	r3, r3, #5
 800becc:	f003 0207 	and.w	r2, r3, #7
 800bed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4422      	add	r2, r4
 800bed8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800beda:	e108      	b.n	800c0ee <UART_SetConfig+0x562>
 800bedc:	00a037a0 	.word	0x00a037a0
 800bee0:	08010f74 	.word	0x08010f74
 800bee4:	40011000 	.word	0x40011000
 800bee8:	40011400 	.word	0x40011400
 800beec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bef4:	2200      	movs	r2, #0
 800bef6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800befa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800befe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bf02:	4642      	mov	r2, r8
 800bf04:	464b      	mov	r3, r9
 800bf06:	1891      	adds	r1, r2, r2
 800bf08:	6239      	str	r1, [r7, #32]
 800bf0a:	415b      	adcs	r3, r3
 800bf0c:	627b      	str	r3, [r7, #36]	; 0x24
 800bf0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bf12:	4641      	mov	r1, r8
 800bf14:	1854      	adds	r4, r2, r1
 800bf16:	4649      	mov	r1, r9
 800bf18:	eb43 0501 	adc.w	r5, r3, r1
 800bf1c:	f04f 0200 	mov.w	r2, #0
 800bf20:	f04f 0300 	mov.w	r3, #0
 800bf24:	00eb      	lsls	r3, r5, #3
 800bf26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bf2a:	00e2      	lsls	r2, r4, #3
 800bf2c:	4614      	mov	r4, r2
 800bf2e:	461d      	mov	r5, r3
 800bf30:	4643      	mov	r3, r8
 800bf32:	18e3      	adds	r3, r4, r3
 800bf34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bf38:	464b      	mov	r3, r9
 800bf3a:	eb45 0303 	adc.w	r3, r5, r3
 800bf3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bf42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bf4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bf52:	f04f 0200 	mov.w	r2, #0
 800bf56:	f04f 0300 	mov.w	r3, #0
 800bf5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bf5e:	4629      	mov	r1, r5
 800bf60:	008b      	lsls	r3, r1, #2
 800bf62:	4621      	mov	r1, r4
 800bf64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf68:	4621      	mov	r1, r4
 800bf6a:	008a      	lsls	r2, r1, #2
 800bf6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bf70:	f7f4 f936 	bl	80001e0 <__aeabi_uldivmod>
 800bf74:	4602      	mov	r2, r0
 800bf76:	460b      	mov	r3, r1
 800bf78:	4b60      	ldr	r3, [pc, #384]	; (800c0fc <UART_SetConfig+0x570>)
 800bf7a:	fba3 2302 	umull	r2, r3, r3, r2
 800bf7e:	095b      	lsrs	r3, r3, #5
 800bf80:	011c      	lsls	r4, r3, #4
 800bf82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf86:	2200      	movs	r2, #0
 800bf88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bf90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bf94:	4642      	mov	r2, r8
 800bf96:	464b      	mov	r3, r9
 800bf98:	1891      	adds	r1, r2, r2
 800bf9a:	61b9      	str	r1, [r7, #24]
 800bf9c:	415b      	adcs	r3, r3
 800bf9e:	61fb      	str	r3, [r7, #28]
 800bfa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bfa4:	4641      	mov	r1, r8
 800bfa6:	1851      	adds	r1, r2, r1
 800bfa8:	6139      	str	r1, [r7, #16]
 800bfaa:	4649      	mov	r1, r9
 800bfac:	414b      	adcs	r3, r1
 800bfae:	617b      	str	r3, [r7, #20]
 800bfb0:	f04f 0200 	mov.w	r2, #0
 800bfb4:	f04f 0300 	mov.w	r3, #0
 800bfb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bfbc:	4659      	mov	r1, fp
 800bfbe:	00cb      	lsls	r3, r1, #3
 800bfc0:	4651      	mov	r1, sl
 800bfc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bfc6:	4651      	mov	r1, sl
 800bfc8:	00ca      	lsls	r2, r1, #3
 800bfca:	4610      	mov	r0, r2
 800bfcc:	4619      	mov	r1, r3
 800bfce:	4603      	mov	r3, r0
 800bfd0:	4642      	mov	r2, r8
 800bfd2:	189b      	adds	r3, r3, r2
 800bfd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bfd8:	464b      	mov	r3, r9
 800bfda:	460a      	mov	r2, r1
 800bfdc:	eb42 0303 	adc.w	r3, r2, r3
 800bfe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bfe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	67bb      	str	r3, [r7, #120]	; 0x78
 800bfee:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bff0:	f04f 0200 	mov.w	r2, #0
 800bff4:	f04f 0300 	mov.w	r3, #0
 800bff8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bffc:	4649      	mov	r1, r9
 800bffe:	008b      	lsls	r3, r1, #2
 800c000:	4641      	mov	r1, r8
 800c002:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c006:	4641      	mov	r1, r8
 800c008:	008a      	lsls	r2, r1, #2
 800c00a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c00e:	f7f4 f8e7 	bl	80001e0 <__aeabi_uldivmod>
 800c012:	4602      	mov	r2, r0
 800c014:	460b      	mov	r3, r1
 800c016:	4b39      	ldr	r3, [pc, #228]	; (800c0fc <UART_SetConfig+0x570>)
 800c018:	fba3 1302 	umull	r1, r3, r3, r2
 800c01c:	095b      	lsrs	r3, r3, #5
 800c01e:	2164      	movs	r1, #100	; 0x64
 800c020:	fb01 f303 	mul.w	r3, r1, r3
 800c024:	1ad3      	subs	r3, r2, r3
 800c026:	011b      	lsls	r3, r3, #4
 800c028:	3332      	adds	r3, #50	; 0x32
 800c02a:	4a34      	ldr	r2, [pc, #208]	; (800c0fc <UART_SetConfig+0x570>)
 800c02c:	fba2 2303 	umull	r2, r3, r2, r3
 800c030:	095b      	lsrs	r3, r3, #5
 800c032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c036:	441c      	add	r4, r3
 800c038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c03c:	2200      	movs	r2, #0
 800c03e:	673b      	str	r3, [r7, #112]	; 0x70
 800c040:	677a      	str	r2, [r7, #116]	; 0x74
 800c042:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c046:	4642      	mov	r2, r8
 800c048:	464b      	mov	r3, r9
 800c04a:	1891      	adds	r1, r2, r2
 800c04c:	60b9      	str	r1, [r7, #8]
 800c04e:	415b      	adcs	r3, r3
 800c050:	60fb      	str	r3, [r7, #12]
 800c052:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c056:	4641      	mov	r1, r8
 800c058:	1851      	adds	r1, r2, r1
 800c05a:	6039      	str	r1, [r7, #0]
 800c05c:	4649      	mov	r1, r9
 800c05e:	414b      	adcs	r3, r1
 800c060:	607b      	str	r3, [r7, #4]
 800c062:	f04f 0200 	mov.w	r2, #0
 800c066:	f04f 0300 	mov.w	r3, #0
 800c06a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c06e:	4659      	mov	r1, fp
 800c070:	00cb      	lsls	r3, r1, #3
 800c072:	4651      	mov	r1, sl
 800c074:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c078:	4651      	mov	r1, sl
 800c07a:	00ca      	lsls	r2, r1, #3
 800c07c:	4610      	mov	r0, r2
 800c07e:	4619      	mov	r1, r3
 800c080:	4603      	mov	r3, r0
 800c082:	4642      	mov	r2, r8
 800c084:	189b      	adds	r3, r3, r2
 800c086:	66bb      	str	r3, [r7, #104]	; 0x68
 800c088:	464b      	mov	r3, r9
 800c08a:	460a      	mov	r2, r1
 800c08c:	eb42 0303 	adc.w	r3, r2, r3
 800c090:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	663b      	str	r3, [r7, #96]	; 0x60
 800c09c:	667a      	str	r2, [r7, #100]	; 0x64
 800c09e:	f04f 0200 	mov.w	r2, #0
 800c0a2:	f04f 0300 	mov.w	r3, #0
 800c0a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c0aa:	4649      	mov	r1, r9
 800c0ac:	008b      	lsls	r3, r1, #2
 800c0ae:	4641      	mov	r1, r8
 800c0b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c0b4:	4641      	mov	r1, r8
 800c0b6:	008a      	lsls	r2, r1, #2
 800c0b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c0bc:	f7f4 f890 	bl	80001e0 <__aeabi_uldivmod>
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	4b0d      	ldr	r3, [pc, #52]	; (800c0fc <UART_SetConfig+0x570>)
 800c0c6:	fba3 1302 	umull	r1, r3, r3, r2
 800c0ca:	095b      	lsrs	r3, r3, #5
 800c0cc:	2164      	movs	r1, #100	; 0x64
 800c0ce:	fb01 f303 	mul.w	r3, r1, r3
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	011b      	lsls	r3, r3, #4
 800c0d6:	3332      	adds	r3, #50	; 0x32
 800c0d8:	4a08      	ldr	r2, [pc, #32]	; (800c0fc <UART_SetConfig+0x570>)
 800c0da:	fba2 2303 	umull	r2, r3, r2, r3
 800c0de:	095b      	lsrs	r3, r3, #5
 800c0e0:	f003 020f 	and.w	r2, r3, #15
 800c0e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4422      	add	r2, r4
 800c0ec:	609a      	str	r2, [r3, #8]
}
 800c0ee:	bf00      	nop
 800c0f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c0fa:	bf00      	nop
 800c0fc:	51eb851f 	.word	0x51eb851f

0800c100 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d101      	bne.n	800c112 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	e069      	b.n	800c1e6 <HAL_WWDG_Init+0xe6>
  }

  /* Check the parameters */
  assert_param(IS_WWDG_ALL_INSTANCE(hwwdg->Instance));
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a36      	ldr	r2, [pc, #216]	; (800c1f0 <HAL_WWDG_Init+0xf0>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d003      	beq.n	800c124 <HAL_WWDG_Init+0x24>
 800c11c:	21b9      	movs	r1, #185	; 0xb9
 800c11e:	4835      	ldr	r0, [pc, #212]	; (800c1f4 <HAL_WWDG_Init+0xf4>)
 800c120:	f7f6 fbaf 	bl	8002882 <assert_failed>
  assert_param(IS_WWDG_PRESCALER(hwwdg->Init.Prescaler));
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d011      	beq.n	800c150 <HAL_WWDG_Init+0x50>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	2b80      	cmp	r3, #128	; 0x80
 800c132:	d00d      	beq.n	800c150 <HAL_WWDG_Init+0x50>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c13c:	d008      	beq.n	800c150 <HAL_WWDG_Init+0x50>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800c146:	d003      	beq.n	800c150 <HAL_WWDG_Init+0x50>
 800c148:	21ba      	movs	r1, #186	; 0xba
 800c14a:	482a      	ldr	r0, [pc, #168]	; (800c1f4 <HAL_WWDG_Init+0xf4>)
 800c14c:	f7f6 fb99 	bl	8002882 <assert_failed>
  assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	2b3f      	cmp	r3, #63	; 0x3f
 800c156:	d903      	bls.n	800c160 <HAL_WWDG_Init+0x60>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	2b7f      	cmp	r3, #127	; 0x7f
 800c15e:	d903      	bls.n	800c168 <HAL_WWDG_Init+0x68>
 800c160:	21bb      	movs	r1, #187	; 0xbb
 800c162:	4824      	ldr	r0, [pc, #144]	; (800c1f4 <HAL_WWDG_Init+0xf4>)
 800c164:	f7f6 fb8d 	bl	8002882 <assert_failed>
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	2b3f      	cmp	r3, #63	; 0x3f
 800c16e:	d903      	bls.n	800c178 <HAL_WWDG_Init+0x78>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	2b7f      	cmp	r3, #127	; 0x7f
 800c176:	d903      	bls.n	800c180 <HAL_WWDG_Init+0x80>
 800c178:	21bc      	movs	r1, #188	; 0xbc
 800c17a:	481e      	ldr	r0, [pc, #120]	; (800c1f4 <HAL_WWDG_Init+0xf4>)
 800c17c:	f7f6 fb81 	bl	8002882 <assert_failed>
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	691b      	ldr	r3, [r3, #16]
 800c184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c188:	d007      	beq.n	800c19a <HAL_WWDG_Init+0x9a>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d003      	beq.n	800c19a <HAL_WWDG_Init+0x9a>
 800c192:	21bd      	movs	r1, #189	; 0xbd
 800c194:	4817      	ldr	r0, [pc, #92]	; (800c1f4 <HAL_WWDG_Init+0xf4>)
 800c196:	f7f6 fb74 	bl	8002882 <assert_failed>

#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
  /* Reset Callback pointers */
  if (hwwdg->EwiCallback == NULL)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	695b      	ldr	r3, [r3, #20]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d102      	bne.n	800c1a8 <HAL_WWDG_Init+0xa8>
  {
    hwwdg->EwiCallback = HAL_WWDG_EarlyWakeupCallback;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a14      	ldr	r2, [pc, #80]	; (800c1f8 <HAL_WWDG_Init+0xf8>)
 800c1a6:	615a      	str	r2, [r3, #20]
  }

  if (hwwdg->MspInitCallback == NULL)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	699b      	ldr	r3, [r3, #24]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d102      	bne.n	800c1b6 <HAL_WWDG_Init+0xb6>
  {
    hwwdg->MspInitCallback = HAL_WWDG_MspInit;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a12      	ldr	r2, [pc, #72]	; (800c1fc <HAL_WWDG_Init+0xfc>)
 800c1b4:	619a      	str	r2, [r3, #24]
  }

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	699b      	ldr	r3, [r3, #24]
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	4798      	blx	r3
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	68da      	ldr	r2, [r3, #12]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c1ca:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	691a      	ldr	r2, [r3, #16]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	ea42 0103 	orr.w	r1, r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	689a      	ldr	r2, [r3, #8]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	430a      	orrs	r2, r1
 800c1e2:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800c1e4:	2300      	movs	r3, #0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	40002c00 	.word	0x40002c00
 800c1f4:	08010fe8 	.word	0x08010fe8
 800c1f8:	0800c221 	.word	0x0800c221
 800c1fc:	08003625 	.word	0x08003625

0800c200 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	68d2      	ldr	r2, [r2, #12]
 800c210:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	370c      	adds	r7, #12
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 800c228:	bf00      	nop
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <__NVIC_SetPriority>:
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	4603      	mov	r3, r0
 800c23c:	6039      	str	r1, [r7, #0]
 800c23e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c244:	2b00      	cmp	r3, #0
 800c246:	db0a      	blt.n	800c25e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	b2da      	uxtb	r2, r3
 800c24c:	490c      	ldr	r1, [pc, #48]	; (800c280 <__NVIC_SetPriority+0x4c>)
 800c24e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c252:	0112      	lsls	r2, r2, #4
 800c254:	b2d2      	uxtb	r2, r2
 800c256:	440b      	add	r3, r1
 800c258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c25c:	e00a      	b.n	800c274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	b2da      	uxtb	r2, r3
 800c262:	4908      	ldr	r1, [pc, #32]	; (800c284 <__NVIC_SetPriority+0x50>)
 800c264:	79fb      	ldrb	r3, [r7, #7]
 800c266:	f003 030f 	and.w	r3, r3, #15
 800c26a:	3b04      	subs	r3, #4
 800c26c:	0112      	lsls	r2, r2, #4
 800c26e:	b2d2      	uxtb	r2, r2
 800c270:	440b      	add	r3, r1
 800c272:	761a      	strb	r2, [r3, #24]
}
 800c274:	bf00      	nop
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr
 800c280:	e000e100 	.word	0xe000e100
 800c284:	e000ed00 	.word	0xe000ed00

0800c288 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c288:	b580      	push	{r7, lr}
 800c28a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c28c:	4b05      	ldr	r3, [pc, #20]	; (800c2a4 <SysTick_Handler+0x1c>)
 800c28e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c290:	f002 fb70 	bl	800e974 <xTaskGetSchedulerState>
 800c294:	4603      	mov	r3, r0
 800c296:	2b01      	cmp	r3, #1
 800c298:	d001      	beq.n	800c29e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c29a:	f000 fd95 	bl	800cdc8 <xPortSysTickHandler>
  }
}
 800c29e:	bf00      	nop
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	e000e010 	.word	0xe000e010

0800c2a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c2ac:	2100      	movs	r1, #0
 800c2ae:	f06f 0004 	mvn.w	r0, #4
 800c2b2:	f7ff ffbf 	bl	800c234 <__NVIC_SetPriority>
#endif
}
 800c2b6:	bf00      	nop
 800c2b8:	bd80      	pop	{r7, pc}
	...

0800c2bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2c2:	f3ef 8305 	mrs	r3, IPSR
 800c2c6:	603b      	str	r3, [r7, #0]
  return(result);
 800c2c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d003      	beq.n	800c2d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c2ce:	f06f 0305 	mvn.w	r3, #5
 800c2d2:	607b      	str	r3, [r7, #4]
 800c2d4:	e00c      	b.n	800c2f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c2d6:	4b0a      	ldr	r3, [pc, #40]	; (800c300 <osKernelInitialize+0x44>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d105      	bne.n	800c2ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c2de:	4b08      	ldr	r3, [pc, #32]	; (800c300 <osKernelInitialize+0x44>)
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	607b      	str	r3, [r7, #4]
 800c2e8:	e002      	b.n	800c2f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c2ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c2f0:	687b      	ldr	r3, [r7, #4]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	370c      	adds	r7, #12
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	20000b04 	.word	0x20000b04

0800c304 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c30a:	f3ef 8305 	mrs	r3, IPSR
 800c30e:	603b      	str	r3, [r7, #0]
  return(result);
 800c310:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c312:	2b00      	cmp	r3, #0
 800c314:	d003      	beq.n	800c31e <osKernelStart+0x1a>
    stat = osErrorISR;
 800c316:	f06f 0305 	mvn.w	r3, #5
 800c31a:	607b      	str	r3, [r7, #4]
 800c31c:	e010      	b.n	800c340 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c31e:	4b0b      	ldr	r3, [pc, #44]	; (800c34c <osKernelStart+0x48>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d109      	bne.n	800c33a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c326:	f7ff ffbf 	bl	800c2a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c32a:	4b08      	ldr	r3, [pc, #32]	; (800c34c <osKernelStart+0x48>)
 800c32c:	2202      	movs	r2, #2
 800c32e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c330:	f001 fdb0 	bl	800de94 <vTaskStartScheduler>
      stat = osOK;
 800c334:	2300      	movs	r3, #0
 800c336:	607b      	str	r3, [r7, #4]
 800c338:	e002      	b.n	800c340 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c33a:	f04f 33ff 	mov.w	r3, #4294967295
 800c33e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c340:	687b      	ldr	r3, [r7, #4]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3708      	adds	r7, #8
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	20000b04 	.word	0x20000b04

0800c350 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c350:	b580      	push	{r7, lr}
 800c352:	b08e      	sub	sp, #56	; 0x38
 800c354:	af04      	add	r7, sp, #16
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c35c:	2300      	movs	r3, #0
 800c35e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c360:	f3ef 8305 	mrs	r3, IPSR
 800c364:	617b      	str	r3, [r7, #20]
  return(result);
 800c366:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d17f      	bne.n	800c46c <osThreadNew+0x11c>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d07c      	beq.n	800c46c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800c372:	2380      	movs	r3, #128	; 0x80
 800c374:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c376:	2318      	movs	r3, #24
 800c378:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c37a:	2300      	movs	r3, #0
 800c37c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c37e:	f04f 33ff 	mov.w	r3, #4294967295
 800c382:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d046      	beq.n	800c418 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d002      	beq.n	800c398 <osThreadNew+0x48>
        name = attr->name;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	699b      	ldr	r3, [r3, #24]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d002      	beq.n	800c3a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	699b      	ldr	r3, [r3, #24]
 800c3a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d008      	beq.n	800c3be <osThreadNew+0x6e>
 800c3ac:	69fb      	ldr	r3, [r7, #28]
 800c3ae:	2b38      	cmp	r3, #56	; 0x38
 800c3b0:	d805      	bhi.n	800c3be <osThreadNew+0x6e>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	f003 0301 	and.w	r3, r3, #1
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d001      	beq.n	800c3c2 <osThreadNew+0x72>
        return (NULL);
 800c3be:	2300      	movs	r3, #0
 800c3c0:	e055      	b.n	800c46e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	695b      	ldr	r3, [r3, #20]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d003      	beq.n	800c3d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	695b      	ldr	r3, [r3, #20]
 800c3ce:	089b      	lsrs	r3, r3, #2
 800c3d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00f      	beq.n	800c3fa <osThreadNew+0xaa>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800c3e2:	d30a      	bcc.n	800c3fa <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d006      	beq.n	800c3fa <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	695b      	ldr	r3, [r3, #20]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d002      	beq.n	800c3fa <osThreadNew+0xaa>
        mem = 1;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	61bb      	str	r3, [r7, #24]
 800c3f8:	e010      	b.n	800c41c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d10c      	bne.n	800c41c <osThreadNew+0xcc>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d108      	bne.n	800c41c <osThreadNew+0xcc>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d104      	bne.n	800c41c <osThreadNew+0xcc>
          mem = 0;
 800c412:	2300      	movs	r3, #0
 800c414:	61bb      	str	r3, [r7, #24]
 800c416:	e001      	b.n	800c41c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800c418:	2300      	movs	r3, #0
 800c41a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c41c:	69bb      	ldr	r3, [r7, #24]
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d110      	bne.n	800c444 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c42a:	9202      	str	r2, [sp, #8]
 800c42c:	9301      	str	r3, [sp, #4]
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	9300      	str	r3, [sp, #0]
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	6a3a      	ldr	r2, [r7, #32]
 800c436:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c438:	68f8      	ldr	r0, [r7, #12]
 800c43a:	f001 fb25 	bl	800da88 <xTaskCreateStatic>
 800c43e:	4603      	mov	r3, r0
 800c440:	613b      	str	r3, [r7, #16]
 800c442:	e013      	b.n	800c46c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d110      	bne.n	800c46c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c44a:	6a3b      	ldr	r3, [r7, #32]
 800c44c:	b29a      	uxth	r2, r3
 800c44e:	f107 0310 	add.w	r3, r7, #16
 800c452:	9301      	str	r3, [sp, #4]
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	9300      	str	r3, [sp, #0]
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f001 fb72 	bl	800db46 <xTaskCreate>
 800c462:	4603      	mov	r3, r0
 800c464:	2b01      	cmp	r3, #1
 800c466:	d001      	beq.n	800c46c <osThreadNew+0x11c>
            hTask = NULL;
 800c468:	2300      	movs	r3, #0
 800c46a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c46c:	693b      	ldr	r3, [r7, #16]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3728      	adds	r7, #40	; 0x28
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c476:	b580      	push	{r7, lr}
 800c478:	b084      	sub	sp, #16
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c47e:	f3ef 8305 	mrs	r3, IPSR
 800c482:	60bb      	str	r3, [r7, #8]
  return(result);
 800c484:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c486:	2b00      	cmp	r3, #0
 800c488:	d003      	beq.n	800c492 <osDelay+0x1c>
    stat = osErrorISR;
 800c48a:	f06f 0305 	mvn.w	r3, #5
 800c48e:	60fb      	str	r3, [r7, #12]
 800c490:	e007      	b.n	800c4a2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c492:	2300      	movs	r3, #0
 800c494:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d002      	beq.n	800c4a2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f001 fcc5 	bl	800de2c <vTaskDelay>
    }
  }

  return (stat);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3710      	adds	r7, #16
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f002 ff5c 	bl	800f372 <pvTimerGetTimerID>
 800c4ba:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d005      	beq.n	800c4ce <TimerCallback+0x22>
    callb->func (callb->arg);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	68fa      	ldr	r2, [r7, #12]
 800c4c8:	6852      	ldr	r2, [r2, #4]
 800c4ca:	4610      	mov	r0, r2
 800c4cc:	4798      	blx	r3
  }
}
 800c4ce:	bf00      	nop
 800c4d0:	3710      	adds	r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
	...

0800c4d8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b08c      	sub	sp, #48	; 0x30
 800c4dc:	af02      	add	r7, sp, #8
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	607a      	str	r2, [r7, #4]
 800c4e2:	603b      	str	r3, [r7, #0]
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4ec:	f3ef 8305 	mrs	r3, IPSR
 800c4f0:	613b      	str	r3, [r7, #16]
  return(result);
 800c4f2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d163      	bne.n	800c5c0 <osTimerNew+0xe8>
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d060      	beq.n	800c5c0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800c4fe:	2008      	movs	r0, #8
 800c500:	f000 f990 	bl	800c824 <pvPortMalloc>
 800c504:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d059      	beq.n	800c5c0 <osTimerNew+0xe8>
      callb->func = func;
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	68fa      	ldr	r2, [r7, #12]
 800c510:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800c518:	7afb      	ldrb	r3, [r7, #11]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d102      	bne.n	800c524 <osTimerNew+0x4c>
        reload = pdFALSE;
 800c51e:	2300      	movs	r3, #0
 800c520:	61fb      	str	r3, [r7, #28]
 800c522:	e001      	b.n	800c528 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800c524:	2301      	movs	r3, #1
 800c526:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800c528:	f04f 33ff 	mov.w	r3, #4294967295
 800c52c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800c52e:	2300      	movs	r3, #0
 800c530:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d01c      	beq.n	800c572 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d002      	beq.n	800c546 <osTimerNew+0x6e>
          name = attr->name;
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d006      	beq.n	800c55c <osTimerNew+0x84>
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	68db      	ldr	r3, [r3, #12]
 800c552:	2b2b      	cmp	r3, #43	; 0x2b
 800c554:	d902      	bls.n	800c55c <osTimerNew+0x84>
          mem = 1;
 800c556:	2301      	movs	r3, #1
 800c558:	61bb      	str	r3, [r7, #24]
 800c55a:	e00c      	b.n	800c576 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d108      	bne.n	800c576 <osTimerNew+0x9e>
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d104      	bne.n	800c576 <osTimerNew+0x9e>
            mem = 0;
 800c56c:	2300      	movs	r3, #0
 800c56e:	61bb      	str	r3, [r7, #24]
 800c570:	e001      	b.n	800c576 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800c572:	2300      	movs	r3, #0
 800c574:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d10c      	bne.n	800c596 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	9301      	str	r3, [sp, #4]
 800c582:	4b12      	ldr	r3, [pc, #72]	; (800c5cc <osTimerNew+0xf4>)
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	69fa      	ldr	r2, [r7, #28]
 800c58a:	2101      	movs	r1, #1
 800c58c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c58e:	f002 fb46 	bl	800ec1e <xTimerCreateStatic>
 800c592:	6238      	str	r0, [r7, #32]
 800c594:	e00b      	b.n	800c5ae <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800c596:	69bb      	ldr	r3, [r7, #24]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d108      	bne.n	800c5ae <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800c59c:	4b0b      	ldr	r3, [pc, #44]	; (800c5cc <osTimerNew+0xf4>)
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	69fa      	ldr	r2, [r7, #28]
 800c5a4:	2101      	movs	r1, #1
 800c5a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5a8:	f002 fb18 	bl	800ebdc <xTimerCreate>
 800c5ac:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800c5ae:	6a3b      	ldr	r3, [r7, #32]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d105      	bne.n	800c5c0 <osTimerNew+0xe8>
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d002      	beq.n	800c5c0 <osTimerNew+0xe8>
        vPortFree (callb);
 800c5ba:	6978      	ldr	r0, [r7, #20]
 800c5bc:	f000 f97c 	bl	800c8b8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800c5c0:	6a3b      	ldr	r3, [r7, #32]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3728      	adds	r7, #40	; 0x28
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	0800c4ad 	.word	0x0800c4ad

0800c5d0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b088      	sub	sp, #32
 800c5d4:	af02      	add	r7, sp, #8
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5de:	f3ef 8305 	mrs	r3, IPSR
 800c5e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d003      	beq.n	800c5f2 <osTimerStart+0x22>
    stat = osErrorISR;
 800c5ea:	f06f 0305 	mvn.w	r3, #5
 800c5ee:	617b      	str	r3, [r7, #20]
 800c5f0:	e017      	b.n	800c622 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d103      	bne.n	800c600 <osTimerStart+0x30>
    stat = osErrorParameter;
 800c5f8:	f06f 0303 	mvn.w	r3, #3
 800c5fc:	617b      	str	r3, [r7, #20]
 800c5fe:	e010      	b.n	800c622 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800c600:	2300      	movs	r3, #0
 800c602:	9300      	str	r3, [sp, #0]
 800c604:	2300      	movs	r3, #0
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	2104      	movs	r1, #4
 800c60a:	6938      	ldr	r0, [r7, #16]
 800c60c:	f002 fb80 	bl	800ed10 <xTimerGenericCommand>
 800c610:	4603      	mov	r3, r0
 800c612:	2b01      	cmp	r3, #1
 800c614:	d102      	bne.n	800c61c <osTimerStart+0x4c>
      stat = osOK;
 800c616:	2300      	movs	r3, #0
 800c618:	617b      	str	r3, [r7, #20]
 800c61a:	e002      	b.n	800c622 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800c61c:	f06f 0302 	mvn.w	r3, #2
 800c620:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c622:	697b      	ldr	r3, [r7, #20]
}
 800c624:	4618      	mov	r0, r3
 800c626:	3718      	adds	r7, #24
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b088      	sub	sp, #32
 800c630:	af02      	add	r7, sp, #8
 800c632:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c638:	f3ef 8305 	mrs	r3, IPSR
 800c63c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c63e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c640:	2b00      	cmp	r3, #0
 800c642:	d003      	beq.n	800c64c <osTimerStop+0x20>
    stat = osErrorISR;
 800c644:	f06f 0305 	mvn.w	r3, #5
 800c648:	617b      	str	r3, [r7, #20]
 800c64a:	e021      	b.n	800c690 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d103      	bne.n	800c65a <osTimerStop+0x2e>
    stat = osErrorParameter;
 800c652:	f06f 0303 	mvn.w	r3, #3
 800c656:	617b      	str	r3, [r7, #20]
 800c658:	e01a      	b.n	800c690 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800c65a:	6938      	ldr	r0, [r7, #16]
 800c65c:	f002 fe60 	bl	800f320 <xTimerIsTimerActive>
 800c660:	4603      	mov	r3, r0
 800c662:	2b00      	cmp	r3, #0
 800c664:	d103      	bne.n	800c66e <osTimerStop+0x42>
      stat = osErrorResource;
 800c666:	f06f 0302 	mvn.w	r3, #2
 800c66a:	617b      	str	r3, [r7, #20]
 800c66c:	e010      	b.n	800c690 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800c66e:	2300      	movs	r3, #0
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	2300      	movs	r3, #0
 800c674:	2200      	movs	r2, #0
 800c676:	2103      	movs	r1, #3
 800c678:	6938      	ldr	r0, [r7, #16]
 800c67a:	f002 fb49 	bl	800ed10 <xTimerGenericCommand>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b01      	cmp	r3, #1
 800c682:	d102      	bne.n	800c68a <osTimerStop+0x5e>
        stat = osOK;
 800c684:	2300      	movs	r3, #0
 800c686:	617b      	str	r3, [r7, #20]
 800c688:	e002      	b.n	800c690 <osTimerStop+0x64>
      } else {
        stat = osError;
 800c68a:	f04f 33ff 	mov.w	r3, #4294967295
 800c68e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c690:	697b      	ldr	r3, [r7, #20]
}
 800c692:	4618      	mov	r0, r3
 800c694:	3718      	adds	r7, #24
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b086      	sub	sp, #24
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6a6:	f3ef 8305 	mrs	r3, IPSR
 800c6aa:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6ac:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d12d      	bne.n	800c70e <osEventFlagsNew+0x74>
    mem = -1;
 800c6b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d015      	beq.n	800c6ea <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d006      	beq.n	800c6d4 <osEventFlagsNew+0x3a>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	2b1f      	cmp	r3, #31
 800c6cc:	d902      	bls.n	800c6d4 <osEventFlagsNew+0x3a>
        mem = 1;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	613b      	str	r3, [r7, #16]
 800c6d2:	e00c      	b.n	800c6ee <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	689b      	ldr	r3, [r3, #8]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d108      	bne.n	800c6ee <osEventFlagsNew+0x54>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d104      	bne.n	800c6ee <osEventFlagsNew+0x54>
          mem = 0;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	613b      	str	r3, [r7, #16]
 800c6e8:	e001      	b.n	800c6ee <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d106      	bne.n	800c702 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f000 f841 	bl	800c780 <xEventGroupCreateStatic>
 800c6fe:	6178      	str	r0, [r7, #20]
 800c700:	e005      	b.n	800c70e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d102      	bne.n	800c70e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800c708:	f000 f871 	bl	800c7ee <xEventGroupCreate>
 800c70c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800c70e:	697b      	ldr	r3, [r7, #20]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3718      	adds	r7, #24
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c718:	b480      	push	{r7}
 800c71a:	b085      	sub	sp, #20
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	4a07      	ldr	r2, [pc, #28]	; (800c744 <vApplicationGetIdleTaskMemory+0x2c>)
 800c728:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	4a06      	ldr	r2, [pc, #24]	; (800c748 <vApplicationGetIdleTaskMemory+0x30>)
 800c72e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2280      	movs	r2, #128	; 0x80
 800c734:	601a      	str	r2, [r3, #0]
}
 800c736:	bf00      	nop
 800c738:	3714      	adds	r7, #20
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr
 800c742:	bf00      	nop
 800c744:	20000b08 	.word	0x20000b08
 800c748:	20000cc4 	.word	0x20000cc4

0800c74c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	4a07      	ldr	r2, [pc, #28]	; (800c778 <vApplicationGetTimerTaskMemory+0x2c>)
 800c75c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	4a06      	ldr	r2, [pc, #24]	; (800c77c <vApplicationGetTimerTaskMemory+0x30>)
 800c762:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c76a:	601a      	str	r2, [r3, #0]
}
 800c76c:	bf00      	nop
 800c76e:	3714      	adds	r7, #20
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr
 800c778:	20000ec4 	.word	0x20000ec4
 800c77c:	20001080 	.word	0x20001080

0800c780 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800c780:	b580      	push	{r7, lr}
 800c782:	b086      	sub	sp, #24
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10a      	bne.n	800c7a4 <xEventGroupCreateStatic+0x24>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	613b      	str	r3, [r7, #16]
}
 800c7a0:	bf00      	nop
 800c7a2:	e7fe      	b.n	800c7a2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800c7a4:	2320      	movs	r3, #32
 800c7a6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	2b20      	cmp	r3, #32
 800c7ac:	d00a      	beq.n	800c7c4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800c7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	60fb      	str	r3, [r7, #12]
}
 800c7c0:	bf00      	nop
 800c7c2:	e7fe      	b.n	800c7c2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00a      	beq.n	800c7e4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	3304      	adds	r3, #4
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f000 f885 	bl	800c8e8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800c7e4:	697b      	ldr	r3, [r7, #20]
	}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3718      	adds	r7, #24
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b082      	sub	sp, #8
 800c7f2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c7f4:	2020      	movs	r0, #32
 800c7f6:	f000 f815 	bl	800c824 <pvPortMalloc>
 800c7fa:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d00a      	beq.n	800c818 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	3304      	adds	r3, #4
 800c80c:	4618      	mov	r0, r3
 800c80e:	f000 f86b 	bl	800c8e8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c818:	687b      	ldr	r3, [r7, #4]
	}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
	...

0800c824 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800c82c:	2300      	movs	r3, #0
 800c82e:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f003 0307 	and.w	r3, r3, #7
 800c836:	2b00      	cmp	r3, #0
 800c838:	d004      	beq.n	800c844 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f023 0307 	bic.w	r3, r3, #7
 800c840:	3308      	adds	r3, #8
 800c842:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800c844:	f001 fb98 	bl	800df78 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800c848:	4b18      	ldr	r3, [pc, #96]	; (800c8ac <pvPortMalloc+0x88>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d105      	bne.n	800c85c <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800c850:	4b17      	ldr	r3, [pc, #92]	; (800c8b0 <pvPortMalloc+0x8c>)
 800c852:	f023 0307 	bic.w	r3, r3, #7
 800c856:	461a      	mov	r2, r3
 800c858:	4b14      	ldr	r3, [pc, #80]	; (800c8ac <pvPortMalloc+0x88>)
 800c85a:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800c85c:	4b15      	ldr	r3, [pc, #84]	; (800c8b4 <pvPortMalloc+0x90>)
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4413      	add	r3, r2
 800c864:	f643 32f7 	movw	r2, #15351	; 0x3bf7
 800c868:	4293      	cmp	r3, r2
 800c86a:	d813      	bhi.n	800c894 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800c86c:	4b11      	ldr	r3, [pc, #68]	; (800c8b4 <pvPortMalloc+0x90>)
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	441a      	add	r2, r3
 800c874:	4b0f      	ldr	r3, [pc, #60]	; (800c8b4 <pvPortMalloc+0x90>)
 800c876:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800c878:	429a      	cmp	r2, r3
 800c87a:	d90b      	bls.n	800c894 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800c87c:	4b0b      	ldr	r3, [pc, #44]	; (800c8ac <pvPortMalloc+0x88>)
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	4b0c      	ldr	r3, [pc, #48]	; (800c8b4 <pvPortMalloc+0x90>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4413      	add	r3, r2
 800c886:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800c888:	4b0a      	ldr	r3, [pc, #40]	; (800c8b4 <pvPortMalloc+0x90>)
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	4413      	add	r3, r2
 800c890:	4a08      	ldr	r2, [pc, #32]	; (800c8b4 <pvPortMalloc+0x90>)
 800c892:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c894:	f001 fbb6 	bl	800e004 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d101      	bne.n	800c8a2 <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c89e:	f7f5 f817 	bl	80018d0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3710      	adds	r7, #16
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	20005084 	.word	0x20005084
 800c8b0:	20001488 	.word	0x20001488
 800c8b4:	20005080 	.word	0x20005080

0800c8b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b085      	sub	sp, #20
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d00a      	beq.n	800c8dc <vPortFree+0x24>
	__asm volatile
 800c8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ca:	f383 8811 	msr	BASEPRI, r3
 800c8ce:	f3bf 8f6f 	isb	sy
 800c8d2:	f3bf 8f4f 	dsb	sy
 800c8d6:	60fb      	str	r3, [r7, #12]
}
 800c8d8:	bf00      	nop
 800c8da:	e7fe      	b.n	800c8da <vPortFree+0x22>
}
 800c8dc:	bf00      	nop
 800c8de:	3714      	adds	r7, #20
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f103 0208 	add.w	r2, r3, #8
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c900:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f103 0208 	add.w	r2, r3, #8
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f103 0208 	add.w	r2, r3, #8
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2200      	movs	r2, #0
 800c91a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c91c:	bf00      	nop
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c936:	bf00      	nop
 800c938:	370c      	adds	r7, #12
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr

0800c942 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c942:	b480      	push	{r7}
 800c944:	b085      	sub	sp, #20
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
 800c94a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	68fa      	ldr	r2, [r7, #12]
 800c956:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	689a      	ldr	r2, [r3, #8]
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	683a      	ldr	r2, [r7, #0]
 800c966:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	1c5a      	adds	r2, r3, #1
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	601a      	str	r2, [r3, #0]
}
 800c97e:	bf00      	nop
 800c980:	3714      	adds	r7, #20
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr

0800c98a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c98a:	b480      	push	{r7}
 800c98c:	b085      	sub	sp, #20
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
 800c992:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a0:	d103      	bne.n	800c9aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	60fb      	str	r3, [r7, #12]
 800c9a8:	e00c      	b.n	800c9c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	3308      	adds	r3, #8
 800c9ae:	60fb      	str	r3, [r7, #12]
 800c9b0:	e002      	b.n	800c9b8 <vListInsert+0x2e>
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	685b      	ldr	r3, [r3, #4]
 800c9b6:	60fb      	str	r3, [r7, #12]
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	68ba      	ldr	r2, [r7, #8]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d2f6      	bcs.n	800c9b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	685a      	ldr	r2, [r3, #4]
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	683a      	ldr	r2, [r7, #0]
 800c9d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	683a      	ldr	r2, [r7, #0]
 800c9de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	1c5a      	adds	r2, r3, #1
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	601a      	str	r2, [r3, #0]
}
 800c9f0:	bf00      	nop
 800c9f2:	3714      	adds	r7, #20
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b085      	sub	sp, #20
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	691b      	ldr	r3, [r3, #16]
 800ca08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	685b      	ldr	r3, [r3, #4]
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	6892      	ldr	r2, [r2, #8]
 800ca12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	6852      	ldr	r2, [r2, #4]
 800ca1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d103      	bne.n	800ca30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	689a      	ldr	r2, [r3, #8]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	1e5a      	subs	r2, r3, #1
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3714      	adds	r7, #20
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	3b04      	subs	r3, #4
 800ca60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	3b04      	subs	r3, #4
 800ca6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	f023 0201 	bic.w	r2, r3, #1
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	3b04      	subs	r3, #4
 800ca7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca80:	4a0c      	ldr	r2, [pc, #48]	; (800cab4 <pxPortInitialiseStack+0x64>)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	3b14      	subs	r3, #20
 800ca8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	3b04      	subs	r3, #4
 800ca96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f06f 0202 	mvn.w	r2, #2
 800ca9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	3b20      	subs	r3, #32
 800caa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800caa6:	68fb      	ldr	r3, [r7, #12]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3714      	adds	r7, #20
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr
 800cab4:	0800cab9 	.word	0x0800cab9

0800cab8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cabe:	2300      	movs	r3, #0
 800cac0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cac2:	4b12      	ldr	r3, [pc, #72]	; (800cb0c <prvTaskExitError+0x54>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caca:	d00a      	beq.n	800cae2 <prvTaskExitError+0x2a>
	__asm volatile
 800cacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad0:	f383 8811 	msr	BASEPRI, r3
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	60fb      	str	r3, [r7, #12]
}
 800cade:	bf00      	nop
 800cae0:	e7fe      	b.n	800cae0 <prvTaskExitError+0x28>
	__asm volatile
 800cae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	60bb      	str	r3, [r7, #8]
}
 800caf4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800caf6:	bf00      	nop
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d0fc      	beq.n	800caf8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cafe:	bf00      	nop
 800cb00:	bf00      	nop
 800cb02:	3714      	adds	r7, #20
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr
 800cb0c:	20000010 	.word	0x20000010

0800cb10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb10:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <pxCurrentTCBConst2>)
 800cb12:	6819      	ldr	r1, [r3, #0]
 800cb14:	6808      	ldr	r0, [r1, #0]
 800cb16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb1a:	f380 8809 	msr	PSP, r0
 800cb1e:	f3bf 8f6f 	isb	sy
 800cb22:	f04f 0000 	mov.w	r0, #0
 800cb26:	f380 8811 	msr	BASEPRI, r0
 800cb2a:	4770      	bx	lr
 800cb2c:	f3af 8000 	nop.w

0800cb30 <pxCurrentTCBConst2>:
 800cb30:	200050dc 	.word	0x200050dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cb34:	bf00      	nop
 800cb36:	bf00      	nop

0800cb38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cb38:	4808      	ldr	r0, [pc, #32]	; (800cb5c <prvPortStartFirstTask+0x24>)
 800cb3a:	6800      	ldr	r0, [r0, #0]
 800cb3c:	6800      	ldr	r0, [r0, #0]
 800cb3e:	f380 8808 	msr	MSP, r0
 800cb42:	f04f 0000 	mov.w	r0, #0
 800cb46:	f380 8814 	msr	CONTROL, r0
 800cb4a:	b662      	cpsie	i
 800cb4c:	b661      	cpsie	f
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	f3bf 8f6f 	isb	sy
 800cb56:	df00      	svc	0
 800cb58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb5a:	bf00      	nop
 800cb5c:	e000ed08 	.word	0xe000ed08

0800cb60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b086      	sub	sp, #24
 800cb64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cb66:	4b46      	ldr	r3, [pc, #280]	; (800cc80 <xPortStartScheduler+0x120>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a46      	ldr	r2, [pc, #280]	; (800cc84 <xPortStartScheduler+0x124>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d10a      	bne.n	800cb86 <xPortStartScheduler+0x26>
	__asm volatile
 800cb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	613b      	str	r3, [r7, #16]
}
 800cb82:	bf00      	nop
 800cb84:	e7fe      	b.n	800cb84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cb86:	4b3e      	ldr	r3, [pc, #248]	; (800cc80 <xPortStartScheduler+0x120>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a3f      	ldr	r2, [pc, #252]	; (800cc88 <xPortStartScheduler+0x128>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d10a      	bne.n	800cba6 <xPortStartScheduler+0x46>
	__asm volatile
 800cb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb94:	f383 8811 	msr	BASEPRI, r3
 800cb98:	f3bf 8f6f 	isb	sy
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	60fb      	str	r3, [r7, #12]
}
 800cba2:	bf00      	nop
 800cba4:	e7fe      	b.n	800cba4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cba6:	4b39      	ldr	r3, [pc, #228]	; (800cc8c <xPortStartScheduler+0x12c>)
 800cba8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	22ff      	movs	r2, #255	; 0xff
 800cbb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cbc0:	78fb      	ldrb	r3, [r7, #3]
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cbc8:	b2da      	uxtb	r2, r3
 800cbca:	4b31      	ldr	r3, [pc, #196]	; (800cc90 <xPortStartScheduler+0x130>)
 800cbcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cbce:	4b31      	ldr	r3, [pc, #196]	; (800cc94 <xPortStartScheduler+0x134>)
 800cbd0:	2207      	movs	r2, #7
 800cbd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbd4:	e009      	b.n	800cbea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cbd6:	4b2f      	ldr	r3, [pc, #188]	; (800cc94 <xPortStartScheduler+0x134>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	4a2d      	ldr	r2, [pc, #180]	; (800cc94 <xPortStartScheduler+0x134>)
 800cbde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cbe0:	78fb      	ldrb	r3, [r7, #3]
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	005b      	lsls	r3, r3, #1
 800cbe6:	b2db      	uxtb	r3, r3
 800cbe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbea:	78fb      	ldrb	r3, [r7, #3]
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbf2:	2b80      	cmp	r3, #128	; 0x80
 800cbf4:	d0ef      	beq.n	800cbd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cbf6:	4b27      	ldr	r3, [pc, #156]	; (800cc94 <xPortStartScheduler+0x134>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f1c3 0307 	rsb	r3, r3, #7
 800cbfe:	2b04      	cmp	r3, #4
 800cc00:	d00a      	beq.n	800cc18 <xPortStartScheduler+0xb8>
	__asm volatile
 800cc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	60bb      	str	r3, [r7, #8]
}
 800cc14:	bf00      	nop
 800cc16:	e7fe      	b.n	800cc16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cc18:	4b1e      	ldr	r3, [pc, #120]	; (800cc94 <xPortStartScheduler+0x134>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	021b      	lsls	r3, r3, #8
 800cc1e:	4a1d      	ldr	r2, [pc, #116]	; (800cc94 <xPortStartScheduler+0x134>)
 800cc20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cc22:	4b1c      	ldr	r3, [pc, #112]	; (800cc94 <xPortStartScheduler+0x134>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cc2a:	4a1a      	ldr	r2, [pc, #104]	; (800cc94 <xPortStartScheduler+0x134>)
 800cc2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	b2da      	uxtb	r2, r3
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cc36:	4b18      	ldr	r3, [pc, #96]	; (800cc98 <xPortStartScheduler+0x138>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a17      	ldr	r2, [pc, #92]	; (800cc98 <xPortStartScheduler+0x138>)
 800cc3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cc40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc42:	4b15      	ldr	r3, [pc, #84]	; (800cc98 <xPortStartScheduler+0x138>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a14      	ldr	r2, [pc, #80]	; (800cc98 <xPortStartScheduler+0x138>)
 800cc48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cc4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc4e:	f000 f9a9 	bl	800cfa4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc52:	4b12      	ldr	r3, [pc, #72]	; (800cc9c <xPortStartScheduler+0x13c>)
 800cc54:	2200      	movs	r2, #0
 800cc56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc58:	f000 f9e0 	bl	800d01c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc5c:	4b10      	ldr	r3, [pc, #64]	; (800cca0 <xPortStartScheduler+0x140>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a0f      	ldr	r2, [pc, #60]	; (800cca0 <xPortStartScheduler+0x140>)
 800cc62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc68:	f7ff ff66 	bl	800cb38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc6c:	f001 fb62 	bl	800e334 <vTaskSwitchContext>
	prvTaskExitError();
 800cc70:	f7ff ff22 	bl	800cab8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3718      	adds	r7, #24
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	e000ed00 	.word	0xe000ed00
 800cc84:	410fc271 	.word	0x410fc271
 800cc88:	410fc270 	.word	0x410fc270
 800cc8c:	e000e400 	.word	0xe000e400
 800cc90:	20005094 	.word	0x20005094
 800cc94:	20005098 	.word	0x20005098
 800cc98:	e000ed20 	.word	0xe000ed20
 800cc9c:	20000010 	.word	0x20000010
 800cca0:	e000ef34 	.word	0xe000ef34

0800cca4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
	__asm volatile
 800ccaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccae:	f383 8811 	msr	BASEPRI, r3
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	f3bf 8f4f 	dsb	sy
 800ccba:	607b      	str	r3, [r7, #4]
}
 800ccbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ccbe:	4b0f      	ldr	r3, [pc, #60]	; (800ccfc <vPortEnterCritical+0x58>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	4a0d      	ldr	r2, [pc, #52]	; (800ccfc <vPortEnterCritical+0x58>)
 800ccc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ccc8:	4b0c      	ldr	r3, [pc, #48]	; (800ccfc <vPortEnterCritical+0x58>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d10f      	bne.n	800ccf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ccd0:	4b0b      	ldr	r3, [pc, #44]	; (800cd00 <vPortEnterCritical+0x5c>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	b2db      	uxtb	r3, r3
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00a      	beq.n	800ccf0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ccda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccde:	f383 8811 	msr	BASEPRI, r3
 800cce2:	f3bf 8f6f 	isb	sy
 800cce6:	f3bf 8f4f 	dsb	sy
 800ccea:	603b      	str	r3, [r7, #0]
}
 800ccec:	bf00      	nop
 800ccee:	e7fe      	b.n	800ccee <vPortEnterCritical+0x4a>
	}
}
 800ccf0:	bf00      	nop
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr
 800ccfc:	20000010 	.word	0x20000010
 800cd00:	e000ed04 	.word	0xe000ed04

0800cd04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd0a:	4b12      	ldr	r3, [pc, #72]	; (800cd54 <vPortExitCritical+0x50>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d10a      	bne.n	800cd28 <vPortExitCritical+0x24>
	__asm volatile
 800cd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd16:	f383 8811 	msr	BASEPRI, r3
 800cd1a:	f3bf 8f6f 	isb	sy
 800cd1e:	f3bf 8f4f 	dsb	sy
 800cd22:	607b      	str	r3, [r7, #4]
}
 800cd24:	bf00      	nop
 800cd26:	e7fe      	b.n	800cd26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cd28:	4b0a      	ldr	r3, [pc, #40]	; (800cd54 <vPortExitCritical+0x50>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	4a09      	ldr	r2, [pc, #36]	; (800cd54 <vPortExitCritical+0x50>)
 800cd30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cd32:	4b08      	ldr	r3, [pc, #32]	; (800cd54 <vPortExitCritical+0x50>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d105      	bne.n	800cd46 <vPortExitCritical+0x42>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	f383 8811 	msr	BASEPRI, r3
}
 800cd44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd46:	bf00      	nop
 800cd48:	370c      	adds	r7, #12
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	20000010 	.word	0x20000010
	...

0800cd60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd60:	f3ef 8009 	mrs	r0, PSP
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	4b15      	ldr	r3, [pc, #84]	; (800cdc0 <pxCurrentTCBConst>)
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	f01e 0f10 	tst.w	lr, #16
 800cd70:	bf08      	it	eq
 800cd72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd7a:	6010      	str	r0, [r2, #0]
 800cd7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd84:	f380 8811 	msr	BASEPRI, r0
 800cd88:	f3bf 8f4f 	dsb	sy
 800cd8c:	f3bf 8f6f 	isb	sy
 800cd90:	f001 fad0 	bl	800e334 <vTaskSwitchContext>
 800cd94:	f04f 0000 	mov.w	r0, #0
 800cd98:	f380 8811 	msr	BASEPRI, r0
 800cd9c:	bc09      	pop	{r0, r3}
 800cd9e:	6819      	ldr	r1, [r3, #0]
 800cda0:	6808      	ldr	r0, [r1, #0]
 800cda2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda6:	f01e 0f10 	tst.w	lr, #16
 800cdaa:	bf08      	it	eq
 800cdac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cdb0:	f380 8809 	msr	PSP, r0
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	f3af 8000 	nop.w

0800cdc0 <pxCurrentTCBConst>:
 800cdc0:	200050dc 	.word	0x200050dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cdc4:	bf00      	nop
 800cdc6:	bf00      	nop

0800cdc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	607b      	str	r3, [r7, #4]
}
 800cde0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cde2:	f001 f9e5 	bl	800e1b0 <xTaskIncrementTick>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d003      	beq.n	800cdf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cdec:	4b06      	ldr	r3, [pc, #24]	; (800ce08 <xPortSysTickHandler+0x40>)
 800cdee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdf2:	601a      	str	r2, [r3, #0]
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	f383 8811 	msr	BASEPRI, r3
}
 800cdfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce00:	bf00      	nop
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	e000ed04 	.word	0xe000ed04

0800ce0c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b088      	sub	sp, #32
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800ce14:	4b5d      	ldr	r3, [pc, #372]	; (800cf8c <vPortSuppressTicksAndSleep+0x180>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d902      	bls.n	800ce24 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800ce1e:	4b5b      	ldr	r3, [pc, #364]	; (800cf8c <vPortSuppressTicksAndSleep+0x180>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800ce24:	4b5a      	ldr	r3, [pc, #360]	; (800cf90 <vPortSuppressTicksAndSleep+0x184>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4a59      	ldr	r2, [pc, #356]	; (800cf90 <vPortSuppressTicksAndSleep+0x184>)
 800ce2a:	f023 0301 	bic.w	r3, r3, #1
 800ce2e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800ce30:	4b58      	ldr	r3, [pc, #352]	; (800cf94 <vPortSuppressTicksAndSleep+0x188>)
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	3b01      	subs	r3, #1
 800ce38:	4957      	ldr	r1, [pc, #348]	; (800cf98 <vPortSuppressTicksAndSleep+0x18c>)
 800ce3a:	6809      	ldr	r1, [r1, #0]
 800ce3c:	fb01 f303 	mul.w	r3, r1, r3
 800ce40:	4413      	add	r3, r2
 800ce42:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800ce44:	4b55      	ldr	r3, [pc, #340]	; (800cf9c <vPortSuppressTicksAndSleep+0x190>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	69fa      	ldr	r2, [r7, #28]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d904      	bls.n	800ce58 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800ce4e:	4b53      	ldr	r3, [pc, #332]	; (800cf9c <vPortSuppressTicksAndSleep+0x190>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	69fa      	ldr	r2, [r7, #28]
 800ce54:	1ad3      	subs	r3, r2, r3
 800ce56:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800ce58:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800ce5a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800ce5e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800ce62:	f001 fc95 	bl	800e790 <eTaskConfirmSleepModeStatus>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d110      	bne.n	800ce8e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800ce6c:	4b49      	ldr	r3, [pc, #292]	; (800cf94 <vPortSuppressTicksAndSleep+0x188>)
 800ce6e:	4a4c      	ldr	r2, [pc, #304]	; (800cfa0 <vPortSuppressTicksAndSleep+0x194>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800ce74:	4b46      	ldr	r3, [pc, #280]	; (800cf90 <vPortSuppressTicksAndSleep+0x184>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a45      	ldr	r2, [pc, #276]	; (800cf90 <vPortSuppressTicksAndSleep+0x184>)
 800ce7a:	f043 0301 	orr.w	r3, r3, #1
 800ce7e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800ce80:	4b45      	ldr	r3, [pc, #276]	; (800cf98 <vPortSuppressTicksAndSleep+0x18c>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a46      	ldr	r2, [pc, #280]	; (800cfa0 <vPortSuppressTicksAndSleep+0x194>)
 800ce86:	3b01      	subs	r3, #1
 800ce88:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800ce8a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800ce8c:	e079      	b.n	800cf82 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800ce8e:	4a44      	ldr	r2, [pc, #272]	; (800cfa0 <vPortSuppressTicksAndSleep+0x194>)
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ce94:	4b3f      	ldr	r3, [pc, #252]	; (800cf94 <vPortSuppressTicksAndSleep+0x188>)
 800ce96:	2200      	movs	r2, #0
 800ce98:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800ce9a:	4b3d      	ldr	r3, [pc, #244]	; (800cf90 <vPortSuppressTicksAndSleep+0x184>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a3c      	ldr	r2, [pc, #240]	; (800cf90 <vPortSuppressTicksAndSleep+0x184>)
 800cea0:	f043 0301 	orr.w	r3, r3, #1
 800cea4:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800ceaa:	2300      	movs	r3, #0
 800ceac:	613b      	str	r3, [r7, #16]
 800ceae:	6938      	ldr	r0, [r7, #16]
 800ceb0:	f7f4 fd1c 	bl	80018ec <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d004      	beq.n	800cec4 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800ceba:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800cebe:	bf30      	wfi
				__asm volatile( "isb" );
 800cec0:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f7f4 fd1b 	bl	8001900 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800ceca:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800cecc:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800ced0:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800ced4:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800ced6:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800ceda:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800cede:	4b2c      	ldr	r3, [pc, #176]	; (800cf90 <vPortSuppressTicksAndSleep+0x184>)
 800cee0:	2206      	movs	r2, #6
 800cee2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800cee4:	4b2a      	ldr	r3, [pc, #168]	; (800cf90 <vPortSuppressTicksAndSleep+0x184>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d01d      	beq.n	800cf2c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800cef0:	4b29      	ldr	r3, [pc, #164]	; (800cf98 <vPortSuppressTicksAndSleep+0x18c>)
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	4b27      	ldr	r3, [pc, #156]	; (800cf94 <vPortSuppressTicksAndSleep+0x188>)
 800cef6:	6819      	ldr	r1, [r3, #0]
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	1acb      	subs	r3, r1, r3
 800cefc:	4413      	add	r3, r2
 800cefe:	3b01      	subs	r3, #1
 800cf00:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800cf02:	4b26      	ldr	r3, [pc, #152]	; (800cf9c <vPortSuppressTicksAndSleep+0x190>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	697a      	ldr	r2, [r7, #20]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d304      	bcc.n	800cf16 <vPortSuppressTicksAndSleep+0x10a>
 800cf0c:	4b22      	ldr	r3, [pc, #136]	; (800cf98 <vPortSuppressTicksAndSleep+0x18c>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	697a      	ldr	r2, [r7, #20]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d903      	bls.n	800cf1e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800cf16:	4b20      	ldr	r3, [pc, #128]	; (800cf98 <vPortSuppressTicksAndSleep+0x18c>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	3b01      	subs	r3, #1
 800cf1c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800cf1e:	4a20      	ldr	r2, [pc, #128]	; (800cfa0 <vPortSuppressTicksAndSleep+0x194>)
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	3b01      	subs	r3, #1
 800cf28:	61bb      	str	r3, [r7, #24]
 800cf2a:	e018      	b.n	800cf5e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800cf2c:	4b1a      	ldr	r3, [pc, #104]	; (800cf98 <vPortSuppressTicksAndSleep+0x18c>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	fb03 f202 	mul.w	r2, r3, r2
 800cf36:	4b17      	ldr	r3, [pc, #92]	; (800cf94 <vPortSuppressTicksAndSleep+0x188>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800cf3e:	4b16      	ldr	r3, [pc, #88]	; (800cf98 <vPortSuppressTicksAndSleep+0x18c>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	68fa      	ldr	r2, [r7, #12]
 800cf44:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf48:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	4a12      	ldr	r2, [pc, #72]	; (800cf98 <vPortSuppressTicksAndSleep+0x18c>)
 800cf50:	6812      	ldr	r2, [r2, #0]
 800cf52:	fb03 f202 	mul.w	r2, r3, r2
 800cf56:	4912      	ldr	r1, [pc, #72]	; (800cfa0 <vPortSuppressTicksAndSleep+0x194>)
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	1ad3      	subs	r3, r2, r3
 800cf5c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf5e:	4b0d      	ldr	r3, [pc, #52]	; (800cf94 <vPortSuppressTicksAndSleep+0x188>)
 800cf60:	2200      	movs	r2, #0
 800cf62:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800cf64:	4b0a      	ldr	r3, [pc, #40]	; (800cf90 <vPortSuppressTicksAndSleep+0x184>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4a09      	ldr	r2, [pc, #36]	; (800cf90 <vPortSuppressTicksAndSleep+0x184>)
 800cf6a:	f043 0301 	orr.w	r3, r3, #1
 800cf6e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800cf70:	69b8      	ldr	r0, [r7, #24]
 800cf72:	f001 f8f5 	bl	800e160 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800cf76:	4b08      	ldr	r3, [pc, #32]	; (800cf98 <vPortSuppressTicksAndSleep+0x18c>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a09      	ldr	r2, [pc, #36]	; (800cfa0 <vPortSuppressTicksAndSleep+0x194>)
 800cf7c:	3b01      	subs	r3, #1
 800cf7e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800cf80:	b662      	cpsie	i
	}
 800cf82:	bf00      	nop
 800cf84:	3720      	adds	r7, #32
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	2000508c 	.word	0x2000508c
 800cf90:	e000e010 	.word	0xe000e010
 800cf94:	e000e018 	.word	0xe000e018
 800cf98:	20005088 	.word	0x20005088
 800cf9c:	20005090 	.word	0x20005090
 800cfa0:	e000e014 	.word	0xe000e014

0800cfa4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800cfa8:	4b14      	ldr	r3, [pc, #80]	; (800cffc <vPortSetupTimerInterrupt+0x58>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a14      	ldr	r2, [pc, #80]	; (800d000 <vPortSetupTimerInterrupt+0x5c>)
 800cfae:	fba2 2303 	umull	r2, r3, r2, r3
 800cfb2:	099b      	lsrs	r3, r3, #6
 800cfb4:	4a13      	ldr	r2, [pc, #76]	; (800d004 <vPortSetupTimerInterrupt+0x60>)
 800cfb6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800cfb8:	4b12      	ldr	r3, [pc, #72]	; (800d004 <vPortSetupTimerInterrupt+0x60>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800cfc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfc4:	4a10      	ldr	r2, [pc, #64]	; (800d008 <vPortSetupTimerInterrupt+0x64>)
 800cfc6:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800cfc8:	4b10      	ldr	r3, [pc, #64]	; (800d00c <vPortSetupTimerInterrupt+0x68>)
 800cfca:	222d      	movs	r2, #45	; 0x2d
 800cfcc:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cfce:	4b10      	ldr	r3, [pc, #64]	; (800d010 <vPortSetupTimerInterrupt+0x6c>)
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cfd4:	4b0f      	ldr	r3, [pc, #60]	; (800d014 <vPortSetupTimerInterrupt+0x70>)
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cfda:	4b08      	ldr	r3, [pc, #32]	; (800cffc <vPortSetupTimerInterrupt+0x58>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a08      	ldr	r2, [pc, #32]	; (800d000 <vPortSetupTimerInterrupt+0x5c>)
 800cfe0:	fba2 2303 	umull	r2, r3, r2, r3
 800cfe4:	099b      	lsrs	r3, r3, #6
 800cfe6:	4a0c      	ldr	r2, [pc, #48]	; (800d018 <vPortSetupTimerInterrupt+0x74>)
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cfec:	4b08      	ldr	r3, [pc, #32]	; (800d010 <vPortSetupTimerInterrupt+0x6c>)
 800cfee:	2207      	movs	r2, #7
 800cff0:	601a      	str	r2, [r3, #0]
}
 800cff2:	bf00      	nop
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr
 800cffc:	20000004 	.word	0x20000004
 800d000:	10624dd3 	.word	0x10624dd3
 800d004:	20005088 	.word	0x20005088
 800d008:	2000508c 	.word	0x2000508c
 800d00c:	20005090 	.word	0x20005090
 800d010:	e000e010 	.word	0xe000e010
 800d014:	e000e018 	.word	0xe000e018
 800d018:	e000e014 	.word	0xe000e014

0800d01c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d01c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d02c <vPortEnableVFP+0x10>
 800d020:	6801      	ldr	r1, [r0, #0]
 800d022:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d026:	6001      	str	r1, [r0, #0]
 800d028:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d02a:	bf00      	nop
 800d02c:	e000ed88 	.word	0xe000ed88

0800d030 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d036:	f3ef 8305 	mrs	r3, IPSR
 800d03a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2b0f      	cmp	r3, #15
 800d040:	d914      	bls.n	800d06c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d042:	4a17      	ldr	r2, [pc, #92]	; (800d0a0 <vPortValidateInterruptPriority+0x70>)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	4413      	add	r3, r2
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d04c:	4b15      	ldr	r3, [pc, #84]	; (800d0a4 <vPortValidateInterruptPriority+0x74>)
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	7afa      	ldrb	r2, [r7, #11]
 800d052:	429a      	cmp	r2, r3
 800d054:	d20a      	bcs.n	800d06c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d05a:	f383 8811 	msr	BASEPRI, r3
 800d05e:	f3bf 8f6f 	isb	sy
 800d062:	f3bf 8f4f 	dsb	sy
 800d066:	607b      	str	r3, [r7, #4]
}
 800d068:	bf00      	nop
 800d06a:	e7fe      	b.n	800d06a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d06c:	4b0e      	ldr	r3, [pc, #56]	; (800d0a8 <vPortValidateInterruptPriority+0x78>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d074:	4b0d      	ldr	r3, [pc, #52]	; (800d0ac <vPortValidateInterruptPriority+0x7c>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	429a      	cmp	r2, r3
 800d07a:	d90a      	bls.n	800d092 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d080:	f383 8811 	msr	BASEPRI, r3
 800d084:	f3bf 8f6f 	isb	sy
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	603b      	str	r3, [r7, #0]
}
 800d08e:	bf00      	nop
 800d090:	e7fe      	b.n	800d090 <vPortValidateInterruptPriority+0x60>
	}
 800d092:	bf00      	nop
 800d094:	3714      	adds	r7, #20
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop
 800d0a0:	e000e3f0 	.word	0xe000e3f0
 800d0a4:	20005094 	.word	0x20005094
 800d0a8:	e000ed0c 	.word	0xe000ed0c
 800d0ac:	20005098 	.word	0x20005098

0800d0b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10a      	bne.n	800d0da <xQueueGenericReset+0x2a>
	__asm volatile
 800d0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c8:	f383 8811 	msr	BASEPRI, r3
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	60bb      	str	r3, [r7, #8]
}
 800d0d6:	bf00      	nop
 800d0d8:	e7fe      	b.n	800d0d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d0da:	f7ff fde3 	bl	800cca4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e6:	68f9      	ldr	r1, [r7, #12]
 800d0e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d0ea:	fb01 f303 	mul.w	r3, r1, r3
 800d0ee:	441a      	add	r2, r3
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d10a:	3b01      	subs	r3, #1
 800d10c:	68f9      	ldr	r1, [r7, #12]
 800d10e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d110:	fb01 f303 	mul.w	r3, r1, r3
 800d114:	441a      	add	r2, r3
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	22ff      	movs	r2, #255	; 0xff
 800d11e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	22ff      	movs	r2, #255	; 0xff
 800d126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d114      	bne.n	800d15a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	691b      	ldr	r3, [r3, #16]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d01a      	beq.n	800d16e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	3310      	adds	r3, #16
 800d13c:	4618      	mov	r0, r3
 800d13e:	f001 f9eb 	bl	800e518 <xTaskRemoveFromEventList>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d012      	beq.n	800d16e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d148:	4b0c      	ldr	r3, [pc, #48]	; (800d17c <xQueueGenericReset+0xcc>)
 800d14a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d14e:	601a      	str	r2, [r3, #0]
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	f3bf 8f6f 	isb	sy
 800d158:	e009      	b.n	800d16e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	3310      	adds	r3, #16
 800d15e:	4618      	mov	r0, r3
 800d160:	f7ff fbc2 	bl	800c8e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	3324      	adds	r3, #36	; 0x24
 800d168:	4618      	mov	r0, r3
 800d16a:	f7ff fbbd 	bl	800c8e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d16e:	f7ff fdc9 	bl	800cd04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d172:	2301      	movs	r3, #1
}
 800d174:	4618      	mov	r0, r3
 800d176:	3710      	adds	r7, #16
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	e000ed04 	.word	0xe000ed04

0800d180 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d180:	b580      	push	{r7, lr}
 800d182:	b08e      	sub	sp, #56	; 0x38
 800d184:	af02      	add	r7, sp, #8
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	607a      	str	r2, [r7, #4]
 800d18c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d10a      	bne.n	800d1aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d198:	f383 8811 	msr	BASEPRI, r3
 800d19c:	f3bf 8f6f 	isb	sy
 800d1a0:	f3bf 8f4f 	dsb	sy
 800d1a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d1a6:	bf00      	nop
 800d1a8:	e7fe      	b.n	800d1a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d10a      	bne.n	800d1c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b4:	f383 8811 	msr	BASEPRI, r3
 800d1b8:	f3bf 8f6f 	isb	sy
 800d1bc:	f3bf 8f4f 	dsb	sy
 800d1c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d1c2:	bf00      	nop
 800d1c4:	e7fe      	b.n	800d1c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d002      	beq.n	800d1d2 <xQueueGenericCreateStatic+0x52>
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d001      	beq.n	800d1d6 <xQueueGenericCreateStatic+0x56>
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e000      	b.n	800d1d8 <xQueueGenericCreateStatic+0x58>
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d10a      	bne.n	800d1f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e0:	f383 8811 	msr	BASEPRI, r3
 800d1e4:	f3bf 8f6f 	isb	sy
 800d1e8:	f3bf 8f4f 	dsb	sy
 800d1ec:	623b      	str	r3, [r7, #32]
}
 800d1ee:	bf00      	nop
 800d1f0:	e7fe      	b.n	800d1f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d102      	bne.n	800d1fe <xQueueGenericCreateStatic+0x7e>
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d101      	bne.n	800d202 <xQueueGenericCreateStatic+0x82>
 800d1fe:	2301      	movs	r3, #1
 800d200:	e000      	b.n	800d204 <xQueueGenericCreateStatic+0x84>
 800d202:	2300      	movs	r3, #0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d10a      	bne.n	800d21e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d20c:	f383 8811 	msr	BASEPRI, r3
 800d210:	f3bf 8f6f 	isb	sy
 800d214:	f3bf 8f4f 	dsb	sy
 800d218:	61fb      	str	r3, [r7, #28]
}
 800d21a:	bf00      	nop
 800d21c:	e7fe      	b.n	800d21c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d21e:	2350      	movs	r3, #80	; 0x50
 800d220:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	2b50      	cmp	r3, #80	; 0x50
 800d226:	d00a      	beq.n	800d23e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22c:	f383 8811 	msr	BASEPRI, r3
 800d230:	f3bf 8f6f 	isb	sy
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	61bb      	str	r3, [r7, #24]
}
 800d23a:	bf00      	nop
 800d23c:	e7fe      	b.n	800d23c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d23e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d246:	2b00      	cmp	r3, #0
 800d248:	d00d      	beq.n	800d266 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24c:	2201      	movs	r2, #1
 800d24e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d252:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d258:	9300      	str	r3, [sp, #0]
 800d25a:	4613      	mov	r3, r2
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	68b9      	ldr	r1, [r7, #8]
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f000 f805 	bl	800d270 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d268:	4618      	mov	r0, r3
 800d26a:	3730      	adds	r7, #48	; 0x30
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	607a      	str	r2, [r7, #4]
 800d27c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d103      	bne.n	800d28c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	69ba      	ldr	r2, [r7, #24]
 800d288:	601a      	str	r2, [r3, #0]
 800d28a:	e002      	b.n	800d292 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d298:	69bb      	ldr	r3, [r7, #24]
 800d29a:	68ba      	ldr	r2, [r7, #8]
 800d29c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d29e:	2101      	movs	r1, #1
 800d2a0:	69b8      	ldr	r0, [r7, #24]
 800d2a2:	f7ff ff05 	bl	800d0b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	78fa      	ldrb	r2, [r7, #3]
 800d2aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d2ae:	bf00      	nop
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
	...

0800d2b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b08e      	sub	sp, #56	; 0x38
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	607a      	str	r2, [r7, #4]
 800d2c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d10a      	bne.n	800d2ea <xQueueGenericSend+0x32>
	__asm volatile
 800d2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d8:	f383 8811 	msr	BASEPRI, r3
 800d2dc:	f3bf 8f6f 	isb	sy
 800d2e0:	f3bf 8f4f 	dsb	sy
 800d2e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d2e6:	bf00      	nop
 800d2e8:	e7fe      	b.n	800d2e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d103      	bne.n	800d2f8 <xQueueGenericSend+0x40>
 800d2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d101      	bne.n	800d2fc <xQueueGenericSend+0x44>
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e000      	b.n	800d2fe <xQueueGenericSend+0x46>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d10a      	bne.n	800d318 <xQueueGenericSend+0x60>
	__asm volatile
 800d302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d306:	f383 8811 	msr	BASEPRI, r3
 800d30a:	f3bf 8f6f 	isb	sy
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d314:	bf00      	nop
 800d316:	e7fe      	b.n	800d316 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	2b02      	cmp	r3, #2
 800d31c:	d103      	bne.n	800d326 <xQueueGenericSend+0x6e>
 800d31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d322:	2b01      	cmp	r3, #1
 800d324:	d101      	bne.n	800d32a <xQueueGenericSend+0x72>
 800d326:	2301      	movs	r3, #1
 800d328:	e000      	b.n	800d32c <xQueueGenericSend+0x74>
 800d32a:	2300      	movs	r3, #0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d10a      	bne.n	800d346 <xQueueGenericSend+0x8e>
	__asm volatile
 800d330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d334:	f383 8811 	msr	BASEPRI, r3
 800d338:	f3bf 8f6f 	isb	sy
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	623b      	str	r3, [r7, #32]
}
 800d342:	bf00      	nop
 800d344:	e7fe      	b.n	800d344 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d346:	f001 fb15 	bl	800e974 <xTaskGetSchedulerState>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d102      	bne.n	800d356 <xQueueGenericSend+0x9e>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d101      	bne.n	800d35a <xQueueGenericSend+0xa2>
 800d356:	2301      	movs	r3, #1
 800d358:	e000      	b.n	800d35c <xQueueGenericSend+0xa4>
 800d35a:	2300      	movs	r3, #0
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d10a      	bne.n	800d376 <xQueueGenericSend+0xbe>
	__asm volatile
 800d360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	61fb      	str	r3, [r7, #28]
}
 800d372:	bf00      	nop
 800d374:	e7fe      	b.n	800d374 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d376:	f7ff fc95 	bl	800cca4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d382:	429a      	cmp	r2, r3
 800d384:	d302      	bcc.n	800d38c <xQueueGenericSend+0xd4>
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	2b02      	cmp	r3, #2
 800d38a:	d129      	bne.n	800d3e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d38c:	683a      	ldr	r2, [r7, #0]
 800d38e:	68b9      	ldr	r1, [r7, #8]
 800d390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d392:	f000 fa0b 	bl	800d7ac <prvCopyDataToQueue>
 800d396:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d010      	beq.n	800d3c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a2:	3324      	adds	r3, #36	; 0x24
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f001 f8b7 	bl	800e518 <xTaskRemoveFromEventList>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d013      	beq.n	800d3d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d3b0:	4b3f      	ldr	r3, [pc, #252]	; (800d4b0 <xQueueGenericSend+0x1f8>)
 800d3b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3b6:	601a      	str	r2, [r3, #0]
 800d3b8:	f3bf 8f4f 	dsb	sy
 800d3bc:	f3bf 8f6f 	isb	sy
 800d3c0:	e00a      	b.n	800d3d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d007      	beq.n	800d3d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d3c8:	4b39      	ldr	r3, [pc, #228]	; (800d4b0 <xQueueGenericSend+0x1f8>)
 800d3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ce:	601a      	str	r2, [r3, #0]
 800d3d0:	f3bf 8f4f 	dsb	sy
 800d3d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d3d8:	f7ff fc94 	bl	800cd04 <vPortExitCritical>
				return pdPASS;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e063      	b.n	800d4a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d103      	bne.n	800d3ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d3e6:	f7ff fc8d 	bl	800cd04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	e05c      	b.n	800d4a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d106      	bne.n	800d402 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3f4:	f107 0314 	add.w	r3, r7, #20
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f001 f8f3 	bl	800e5e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3fe:	2301      	movs	r3, #1
 800d400:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d402:	f7ff fc7f 	bl	800cd04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d406:	f000 fdb7 	bl	800df78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d40a:	f7ff fc4b 	bl	800cca4 <vPortEnterCritical>
 800d40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d410:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d414:	b25b      	sxtb	r3, r3
 800d416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d41a:	d103      	bne.n	800d424 <xQueueGenericSend+0x16c>
 800d41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41e:	2200      	movs	r2, #0
 800d420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d42a:	b25b      	sxtb	r3, r3
 800d42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d430:	d103      	bne.n	800d43a <xQueueGenericSend+0x182>
 800d432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d434:	2200      	movs	r2, #0
 800d436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d43a:	f7ff fc63 	bl	800cd04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d43e:	1d3a      	adds	r2, r7, #4
 800d440:	f107 0314 	add.w	r3, r7, #20
 800d444:	4611      	mov	r1, r2
 800d446:	4618      	mov	r0, r3
 800d448:	f001 f8e2 	bl	800e610 <xTaskCheckForTimeOut>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d124      	bne.n	800d49c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d452:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d454:	f000 faa2 	bl	800d99c <prvIsQueueFull>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d018      	beq.n	800d490 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d460:	3310      	adds	r3, #16
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	4611      	mov	r1, r2
 800d466:	4618      	mov	r0, r3
 800d468:	f001 f806 	bl	800e478 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d46c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d46e:	f000 fa2d 	bl	800d8cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d472:	f000 fdc7 	bl	800e004 <xTaskResumeAll>
 800d476:	4603      	mov	r3, r0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f47f af7c 	bne.w	800d376 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d47e:	4b0c      	ldr	r3, [pc, #48]	; (800d4b0 <xQueueGenericSend+0x1f8>)
 800d480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d484:	601a      	str	r2, [r3, #0]
 800d486:	f3bf 8f4f 	dsb	sy
 800d48a:	f3bf 8f6f 	isb	sy
 800d48e:	e772      	b.n	800d376 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d492:	f000 fa1b 	bl	800d8cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d496:	f000 fdb5 	bl	800e004 <xTaskResumeAll>
 800d49a:	e76c      	b.n	800d376 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d49c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d49e:	f000 fa15 	bl	800d8cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d4a2:	f000 fdaf 	bl	800e004 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d4a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3738      	adds	r7, #56	; 0x38
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	e000ed04 	.word	0xe000ed04

0800d4b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b090      	sub	sp, #64	; 0x40
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	607a      	str	r2, [r7, #4]
 800d4c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d10a      	bne.n	800d4e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d0:	f383 8811 	msr	BASEPRI, r3
 800d4d4:	f3bf 8f6f 	isb	sy
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d4de:	bf00      	nop
 800d4e0:	e7fe      	b.n	800d4e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d103      	bne.n	800d4f0 <xQueueGenericSendFromISR+0x3c>
 800d4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d101      	bne.n	800d4f4 <xQueueGenericSendFromISR+0x40>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	e000      	b.n	800d4f6 <xQueueGenericSendFromISR+0x42>
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d10a      	bne.n	800d510 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fe:	f383 8811 	msr	BASEPRI, r3
 800d502:	f3bf 8f6f 	isb	sy
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d50c:	bf00      	nop
 800d50e:	e7fe      	b.n	800d50e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	2b02      	cmp	r3, #2
 800d514:	d103      	bne.n	800d51e <xQueueGenericSendFromISR+0x6a>
 800d516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d101      	bne.n	800d522 <xQueueGenericSendFromISR+0x6e>
 800d51e:	2301      	movs	r3, #1
 800d520:	e000      	b.n	800d524 <xQueueGenericSendFromISR+0x70>
 800d522:	2300      	movs	r3, #0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d10a      	bne.n	800d53e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52c:	f383 8811 	msr	BASEPRI, r3
 800d530:	f3bf 8f6f 	isb	sy
 800d534:	f3bf 8f4f 	dsb	sy
 800d538:	623b      	str	r3, [r7, #32]
}
 800d53a:	bf00      	nop
 800d53c:	e7fe      	b.n	800d53c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d53e:	f7ff fd77 	bl	800d030 <vPortValidateInterruptPriority>
	__asm volatile
 800d542:	f3ef 8211 	mrs	r2, BASEPRI
 800d546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54a:	f383 8811 	msr	BASEPRI, r3
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f3bf 8f4f 	dsb	sy
 800d556:	61fa      	str	r2, [r7, #28]
 800d558:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d55a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d55c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d566:	429a      	cmp	r2, r3
 800d568:	d302      	bcc.n	800d570 <xQueueGenericSendFromISR+0xbc>
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	d12f      	bne.n	800d5d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d572:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d57e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d580:	683a      	ldr	r2, [r7, #0]
 800d582:	68b9      	ldr	r1, [r7, #8]
 800d584:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d586:	f000 f911 	bl	800d7ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d58a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d592:	d112      	bne.n	800d5ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d016      	beq.n	800d5ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d59e:	3324      	adds	r3, #36	; 0x24
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f000 ffb9 	bl	800e518 <xTaskRemoveFromEventList>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00e      	beq.n	800d5ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d00b      	beq.n	800d5ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	601a      	str	r2, [r3, #0]
 800d5b8:	e007      	b.n	800d5ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d5ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d5be:	3301      	adds	r3, #1
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	b25a      	sxtb	r2, r3
 800d5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d5ce:	e001      	b.n	800d5d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5d6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	f383 8811 	msr	BASEPRI, r3
}
 800d5de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3740      	adds	r7, #64	; 0x40
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
	...

0800d5ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b08c      	sub	sp, #48	; 0x30
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	60f8      	str	r0, [r7, #12]
 800d5f4:	60b9      	str	r1, [r7, #8]
 800d5f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d602:	2b00      	cmp	r3, #0
 800d604:	d10a      	bne.n	800d61c <xQueueReceive+0x30>
	__asm volatile
 800d606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60a:	f383 8811 	msr	BASEPRI, r3
 800d60e:	f3bf 8f6f 	isb	sy
 800d612:	f3bf 8f4f 	dsb	sy
 800d616:	623b      	str	r3, [r7, #32]
}
 800d618:	bf00      	nop
 800d61a:	e7fe      	b.n	800d61a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d103      	bne.n	800d62a <xQueueReceive+0x3e>
 800d622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d626:	2b00      	cmp	r3, #0
 800d628:	d101      	bne.n	800d62e <xQueueReceive+0x42>
 800d62a:	2301      	movs	r3, #1
 800d62c:	e000      	b.n	800d630 <xQueueReceive+0x44>
 800d62e:	2300      	movs	r3, #0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d10a      	bne.n	800d64a <xQueueReceive+0x5e>
	__asm volatile
 800d634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d638:	f383 8811 	msr	BASEPRI, r3
 800d63c:	f3bf 8f6f 	isb	sy
 800d640:	f3bf 8f4f 	dsb	sy
 800d644:	61fb      	str	r3, [r7, #28]
}
 800d646:	bf00      	nop
 800d648:	e7fe      	b.n	800d648 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d64a:	f001 f993 	bl	800e974 <xTaskGetSchedulerState>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d102      	bne.n	800d65a <xQueueReceive+0x6e>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d101      	bne.n	800d65e <xQueueReceive+0x72>
 800d65a:	2301      	movs	r3, #1
 800d65c:	e000      	b.n	800d660 <xQueueReceive+0x74>
 800d65e:	2300      	movs	r3, #0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d10a      	bne.n	800d67a <xQueueReceive+0x8e>
	__asm volatile
 800d664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d668:	f383 8811 	msr	BASEPRI, r3
 800d66c:	f3bf 8f6f 	isb	sy
 800d670:	f3bf 8f4f 	dsb	sy
 800d674:	61bb      	str	r3, [r7, #24]
}
 800d676:	bf00      	nop
 800d678:	e7fe      	b.n	800d678 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d67a:	f7ff fb13 	bl	800cca4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d682:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d686:	2b00      	cmp	r3, #0
 800d688:	d01f      	beq.n	800d6ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d68a:	68b9      	ldr	r1, [r7, #8]
 800d68c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d68e:	f000 f8f7 	bl	800d880 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d694:	1e5a      	subs	r2, r3, #1
 800d696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d698:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69c:	691b      	ldr	r3, [r3, #16]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00f      	beq.n	800d6c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a4:	3310      	adds	r3, #16
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f000 ff36 	bl	800e518 <xTaskRemoveFromEventList>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d007      	beq.n	800d6c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d6b2:	4b3d      	ldr	r3, [pc, #244]	; (800d7a8 <xQueueReceive+0x1bc>)
 800d6b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6b8:	601a      	str	r2, [r3, #0]
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d6c2:	f7ff fb1f 	bl	800cd04 <vPortExitCritical>
				return pdPASS;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e069      	b.n	800d79e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d103      	bne.n	800d6d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d6d0:	f7ff fb18 	bl	800cd04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	e062      	b.n	800d79e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d106      	bne.n	800d6ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d6de:	f107 0310 	add.w	r3, r7, #16
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f000 ff7e 	bl	800e5e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d6ec:	f7ff fb0a 	bl	800cd04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d6f0:	f000 fc42 	bl	800df78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d6f4:	f7ff fad6 	bl	800cca4 <vPortEnterCritical>
 800d6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6fe:	b25b      	sxtb	r3, r3
 800d700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d704:	d103      	bne.n	800d70e <xQueueReceive+0x122>
 800d706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d708:	2200      	movs	r2, #0
 800d70a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d714:	b25b      	sxtb	r3, r3
 800d716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d71a:	d103      	bne.n	800d724 <xQueueReceive+0x138>
 800d71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71e:	2200      	movs	r2, #0
 800d720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d724:	f7ff faee 	bl	800cd04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d728:	1d3a      	adds	r2, r7, #4
 800d72a:	f107 0310 	add.w	r3, r7, #16
 800d72e:	4611      	mov	r1, r2
 800d730:	4618      	mov	r0, r3
 800d732:	f000 ff6d 	bl	800e610 <xTaskCheckForTimeOut>
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d123      	bne.n	800d784 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d73c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d73e:	f000 f917 	bl	800d970 <prvIsQueueEmpty>
 800d742:	4603      	mov	r3, r0
 800d744:	2b00      	cmp	r3, #0
 800d746:	d017      	beq.n	800d778 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74a:	3324      	adds	r3, #36	; 0x24
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	4611      	mov	r1, r2
 800d750:	4618      	mov	r0, r3
 800d752:	f000 fe91 	bl	800e478 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d758:	f000 f8b8 	bl	800d8cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d75c:	f000 fc52 	bl	800e004 <xTaskResumeAll>
 800d760:	4603      	mov	r3, r0
 800d762:	2b00      	cmp	r3, #0
 800d764:	d189      	bne.n	800d67a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d766:	4b10      	ldr	r3, [pc, #64]	; (800d7a8 <xQueueReceive+0x1bc>)
 800d768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d76c:	601a      	str	r2, [r3, #0]
 800d76e:	f3bf 8f4f 	dsb	sy
 800d772:	f3bf 8f6f 	isb	sy
 800d776:	e780      	b.n	800d67a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d77a:	f000 f8a7 	bl	800d8cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d77e:	f000 fc41 	bl	800e004 <xTaskResumeAll>
 800d782:	e77a      	b.n	800d67a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d786:	f000 f8a1 	bl	800d8cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d78a:	f000 fc3b 	bl	800e004 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d78e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d790:	f000 f8ee 	bl	800d970 <prvIsQueueEmpty>
 800d794:	4603      	mov	r3, r0
 800d796:	2b00      	cmp	r3, #0
 800d798:	f43f af6f 	beq.w	800d67a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d79c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3730      	adds	r7, #48	; 0x30
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	e000ed04 	.word	0xe000ed04

0800d7ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b086      	sub	sp, #24
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d10d      	bne.n	800d7e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d14d      	bne.n	800d86e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	689b      	ldr	r3, [r3, #8]
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f001 f8ea 	bl	800e9b0 <xTaskPriorityDisinherit>
 800d7dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	609a      	str	r2, [r3, #8]
 800d7e4:	e043      	b.n	800d86e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d119      	bne.n	800d820 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	6858      	ldr	r0, [r3, #4]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	68b9      	ldr	r1, [r7, #8]
 800d7f8:	f002 f936 	bl	800fa68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	685a      	ldr	r2, [r3, #4]
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d804:	441a      	add	r2, r3
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	685a      	ldr	r2, [r3, #4]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	689b      	ldr	r3, [r3, #8]
 800d812:	429a      	cmp	r2, r3
 800d814:	d32b      	bcc.n	800d86e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	605a      	str	r2, [r3, #4]
 800d81e:	e026      	b.n	800d86e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	68d8      	ldr	r0, [r3, #12]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d828:	461a      	mov	r2, r3
 800d82a:	68b9      	ldr	r1, [r7, #8]
 800d82c:	f002 f91c 	bl	800fa68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	68da      	ldr	r2, [r3, #12]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d838:	425b      	negs	r3, r3
 800d83a:	441a      	add	r2, r3
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	68da      	ldr	r2, [r3, #12]
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	429a      	cmp	r2, r3
 800d84a:	d207      	bcs.n	800d85c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	689a      	ldr	r2, [r3, #8]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d854:	425b      	negs	r3, r3
 800d856:	441a      	add	r2, r3
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b02      	cmp	r3, #2
 800d860:	d105      	bne.n	800d86e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d002      	beq.n	800d86e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	3b01      	subs	r3, #1
 800d86c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	1c5a      	adds	r2, r3, #1
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d876:	697b      	ldr	r3, [r7, #20]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3718      	adds	r7, #24
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d018      	beq.n	800d8c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	68da      	ldr	r2, [r3, #12]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d89a:	441a      	add	r2, r3
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	68da      	ldr	r2, [r3, #12]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	689b      	ldr	r3, [r3, #8]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d303      	bcc.n	800d8b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	68d9      	ldr	r1, [r3, #12]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8bc:	461a      	mov	r2, r3
 800d8be:	6838      	ldr	r0, [r7, #0]
 800d8c0:	f002 f8d2 	bl	800fa68 <memcpy>
	}
}
 800d8c4:	bf00      	nop
 800d8c6:	3708      	adds	r7, #8
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d8d4:	f7ff f9e6 	bl	800cca4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d8e0:	e011      	b.n	800d906 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d012      	beq.n	800d910 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	3324      	adds	r3, #36	; 0x24
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f000 fe12 	bl	800e518 <xTaskRemoveFromEventList>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d001      	beq.n	800d8fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d8fa:	f000 fefb 	bl	800e6f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d8fe:	7bfb      	ldrb	r3, [r7, #15]
 800d900:	3b01      	subs	r3, #1
 800d902:	b2db      	uxtb	r3, r3
 800d904:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	dce9      	bgt.n	800d8e2 <prvUnlockQueue+0x16>
 800d90e:	e000      	b.n	800d912 <prvUnlockQueue+0x46>
					break;
 800d910:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	22ff      	movs	r2, #255	; 0xff
 800d916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d91a:	f7ff f9f3 	bl	800cd04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d91e:	f7ff f9c1 	bl	800cca4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d928:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d92a:	e011      	b.n	800d950 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	691b      	ldr	r3, [r3, #16]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d012      	beq.n	800d95a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	3310      	adds	r3, #16
 800d938:	4618      	mov	r0, r3
 800d93a:	f000 fded 	bl	800e518 <xTaskRemoveFromEventList>
 800d93e:	4603      	mov	r3, r0
 800d940:	2b00      	cmp	r3, #0
 800d942:	d001      	beq.n	800d948 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d944:	f000 fed6 	bl	800e6f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d948:	7bbb      	ldrb	r3, [r7, #14]
 800d94a:	3b01      	subs	r3, #1
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d954:	2b00      	cmp	r3, #0
 800d956:	dce9      	bgt.n	800d92c <prvUnlockQueue+0x60>
 800d958:	e000      	b.n	800d95c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d95a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	22ff      	movs	r2, #255	; 0xff
 800d960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d964:	f7ff f9ce 	bl	800cd04 <vPortExitCritical>
}
 800d968:	bf00      	nop
 800d96a:	3710      	adds	r7, #16
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b084      	sub	sp, #16
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d978:	f7ff f994 	bl	800cca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d980:	2b00      	cmp	r3, #0
 800d982:	d102      	bne.n	800d98a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d984:	2301      	movs	r3, #1
 800d986:	60fb      	str	r3, [r7, #12]
 800d988:	e001      	b.n	800d98e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d98a:	2300      	movs	r3, #0
 800d98c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d98e:	f7ff f9b9 	bl	800cd04 <vPortExitCritical>

	return xReturn;
 800d992:	68fb      	ldr	r3, [r7, #12]
}
 800d994:	4618      	mov	r0, r3
 800d996:	3710      	adds	r7, #16
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d9a4:	f7ff f97e 	bl	800cca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d102      	bne.n	800d9ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	60fb      	str	r3, [r7, #12]
 800d9b8:	e001      	b.n	800d9be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d9be:	f7ff f9a1 	bl	800cd04 <vPortExitCritical>

	return xReturn;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3710      	adds	r7, #16
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}

0800d9cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b085      	sub	sp, #20
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	60fb      	str	r3, [r7, #12]
 800d9da:	e014      	b.n	800da06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d9dc:	4a0f      	ldr	r2, [pc, #60]	; (800da1c <vQueueAddToRegistry+0x50>)
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d10b      	bne.n	800da00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d9e8:	490c      	ldr	r1, [pc, #48]	; (800da1c <vQueueAddToRegistry+0x50>)
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	683a      	ldr	r2, [r7, #0]
 800d9ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d9f2:	4a0a      	ldr	r2, [pc, #40]	; (800da1c <vQueueAddToRegistry+0x50>)
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	00db      	lsls	r3, r3, #3
 800d9f8:	4413      	add	r3, r2
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d9fe:	e006      	b.n	800da0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	3301      	adds	r3, #1
 800da04:	60fb      	str	r3, [r7, #12]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2b07      	cmp	r3, #7
 800da0a:	d9e7      	bls.n	800d9dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800da0c:	bf00      	nop
 800da0e:	bf00      	nop
 800da10:	3714      	adds	r7, #20
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	2000509c 	.word	0x2000509c

0800da20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800da20:	b580      	push	{r7, lr}
 800da22:	b086      	sub	sp, #24
 800da24:	af00      	add	r7, sp, #0
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800da30:	f7ff f938 	bl	800cca4 <vPortEnterCritical>
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da3a:	b25b      	sxtb	r3, r3
 800da3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da40:	d103      	bne.n	800da4a <vQueueWaitForMessageRestricted+0x2a>
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	2200      	movs	r2, #0
 800da46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da50:	b25b      	sxtb	r3, r3
 800da52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da56:	d103      	bne.n	800da60 <vQueueWaitForMessageRestricted+0x40>
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	2200      	movs	r2, #0
 800da5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da60:	f7ff f950 	bl	800cd04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d106      	bne.n	800da7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	3324      	adds	r3, #36	; 0x24
 800da70:	687a      	ldr	r2, [r7, #4]
 800da72:	68b9      	ldr	r1, [r7, #8]
 800da74:	4618      	mov	r0, r3
 800da76:	f000 fd23 	bl	800e4c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800da7a:	6978      	ldr	r0, [r7, #20]
 800da7c:	f7ff ff26 	bl	800d8cc <prvUnlockQueue>
	}
 800da80:	bf00      	nop
 800da82:	3718      	adds	r7, #24
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b08e      	sub	sp, #56	; 0x38
 800da8c:	af04      	add	r7, sp, #16
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	607a      	str	r2, [r7, #4]
 800da94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800da96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d10a      	bne.n	800dab2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800da9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa0:	f383 8811 	msr	BASEPRI, r3
 800daa4:	f3bf 8f6f 	isb	sy
 800daa8:	f3bf 8f4f 	dsb	sy
 800daac:	623b      	str	r3, [r7, #32]
}
 800daae:	bf00      	nop
 800dab0:	e7fe      	b.n	800dab0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d10a      	bne.n	800dace <xTaskCreateStatic+0x46>
	__asm volatile
 800dab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dabc:	f383 8811 	msr	BASEPRI, r3
 800dac0:	f3bf 8f6f 	isb	sy
 800dac4:	f3bf 8f4f 	dsb	sy
 800dac8:	61fb      	str	r3, [r7, #28]
}
 800daca:	bf00      	nop
 800dacc:	e7fe      	b.n	800dacc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dace:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800dad2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800dada:	d00a      	beq.n	800daf2 <xTaskCreateStatic+0x6a>
	__asm volatile
 800dadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae0:	f383 8811 	msr	BASEPRI, r3
 800dae4:	f3bf 8f6f 	isb	sy
 800dae8:	f3bf 8f4f 	dsb	sy
 800daec:	61bb      	str	r3, [r7, #24]
}
 800daee:	bf00      	nop
 800daf0:	e7fe      	b.n	800daf0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800daf2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800daf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d01e      	beq.n	800db38 <xTaskCreateStatic+0xb0>
 800dafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d01b      	beq.n	800db38 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800db00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800db04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800db0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0c:	2202      	movs	r2, #2
 800db0e:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800db12:	2300      	movs	r3, #0
 800db14:	9303      	str	r3, [sp, #12]
 800db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db18:	9302      	str	r3, [sp, #8]
 800db1a:	f107 0314 	add.w	r3, r7, #20
 800db1e:	9301      	str	r3, [sp, #4]
 800db20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db22:	9300      	str	r3, [sp, #0]
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	68b9      	ldr	r1, [r7, #8]
 800db2a:	68f8      	ldr	r0, [r7, #12]
 800db2c:	f000 f852 	bl	800dbd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db32:	f000 f90b 	bl	800dd4c <prvAddNewTaskToReadyList>
 800db36:	e001      	b.n	800db3c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800db38:	2300      	movs	r3, #0
 800db3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800db3c:	697b      	ldr	r3, [r7, #20]
	}
 800db3e:	4618      	mov	r0, r3
 800db40:	3728      	adds	r7, #40	; 0x28
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}

0800db46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800db46:	b580      	push	{r7, lr}
 800db48:	b08c      	sub	sp, #48	; 0x30
 800db4a:	af04      	add	r7, sp, #16
 800db4c:	60f8      	str	r0, [r7, #12]
 800db4e:	60b9      	str	r1, [r7, #8]
 800db50:	603b      	str	r3, [r7, #0]
 800db52:	4613      	mov	r3, r2
 800db54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800db56:	88fb      	ldrh	r3, [r7, #6]
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7fe fe62 	bl	800c824 <pvPortMalloc>
 800db60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d00f      	beq.n	800db88 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800db68:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 800db6c:	f7fe fe5a 	bl	800c824 <pvPortMalloc>
 800db70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d003      	beq.n	800db80 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	697a      	ldr	r2, [r7, #20]
 800db7c:	631a      	str	r2, [r3, #48]	; 0x30
 800db7e:	e005      	b.n	800db8c <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800db80:	6978      	ldr	r0, [r7, #20]
 800db82:	f7fe fe99 	bl	800c8b8 <vPortFree>
 800db86:	e001      	b.n	800db8c <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800db88:	2300      	movs	r3, #0
 800db8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d017      	beq.n	800dbc2 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	2200      	movs	r2, #0
 800db96:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800db9a:	88fa      	ldrh	r2, [r7, #6]
 800db9c:	2300      	movs	r3, #0
 800db9e:	9303      	str	r3, [sp, #12]
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	9302      	str	r3, [sp, #8]
 800dba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba6:	9301      	str	r3, [sp, #4]
 800dba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbaa:	9300      	str	r3, [sp, #0]
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	68b9      	ldr	r1, [r7, #8]
 800dbb0:	68f8      	ldr	r0, [r7, #12]
 800dbb2:	f000 f80f 	bl	800dbd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dbb6:	69f8      	ldr	r0, [r7, #28]
 800dbb8:	f000 f8c8 	bl	800dd4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	61bb      	str	r3, [r7, #24]
 800dbc0:	e002      	b.n	800dbc8 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dbc2:	f04f 33ff 	mov.w	r3, #4294967295
 800dbc6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dbc8:	69bb      	ldr	r3, [r7, #24]
	}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3720      	adds	r7, #32
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
	...

0800dbd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b088      	sub	sp, #32
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	607a      	str	r2, [r7, #4]
 800dbe0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	009b      	lsls	r3, r3, #2
 800dbea:	461a      	mov	r2, r3
 800dbec:	21a5      	movs	r1, #165	; 0xa5
 800dbee:	f001 ff49 	bl	800fa84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dbfc:	3b01      	subs	r3, #1
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	4413      	add	r3, r2
 800dc02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dc04:	69bb      	ldr	r3, [r7, #24]
 800dc06:	f023 0307 	bic.w	r3, r3, #7
 800dc0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dc0c:	69bb      	ldr	r3, [r7, #24]
 800dc0e:	f003 0307 	and.w	r3, r3, #7
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d00a      	beq.n	800dc2c <prvInitialiseNewTask+0x58>
	__asm volatile
 800dc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1a:	f383 8811 	msr	BASEPRI, r3
 800dc1e:	f3bf 8f6f 	isb	sy
 800dc22:	f3bf 8f4f 	dsb	sy
 800dc26:	617b      	str	r3, [r7, #20]
}
 800dc28:	bf00      	nop
 800dc2a:	e7fe      	b.n	800dc2a <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800dc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2e:	69ba      	ldr	r2, [r7, #24]
 800dc30:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d01f      	beq.n	800dc7a <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	61fb      	str	r3, [r7, #28]
 800dc3e:	e012      	b.n	800dc66 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dc40:	68ba      	ldr	r2, [r7, #8]
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	4413      	add	r3, r2
 800dc46:	7819      	ldrb	r1, [r3, #0]
 800dc48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc4a:	69fb      	ldr	r3, [r7, #28]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	3334      	adds	r3, #52	; 0x34
 800dc50:	460a      	mov	r2, r1
 800dc52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dc54:	68ba      	ldr	r2, [r7, #8]
 800dc56:	69fb      	ldr	r3, [r7, #28]
 800dc58:	4413      	add	r3, r2
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d006      	beq.n	800dc6e <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	3301      	adds	r3, #1
 800dc64:	61fb      	str	r3, [r7, #28]
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	2bfe      	cmp	r3, #254	; 0xfe
 800dc6a:	d9e9      	bls.n	800dc40 <prvInitialiseNewTask+0x6c>
 800dc6c:	e000      	b.n	800dc70 <prvInitialiseNewTask+0x9c>
			{
				break;
 800dc6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc72:	2200      	movs	r2, #0
 800dc74:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800dc78:	e003      	b.n	800dc82 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc84:	2b37      	cmp	r3, #55	; 0x37
 800dc86:	d901      	bls.n	800dc8c <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc88:	2337      	movs	r3, #55	; 0x37
 800dc8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc96:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		pxNewTCB->uxMutexesHeld = 0;
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca4:	3304      	adds	r3, #4
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7fe fe3e 	bl	800c928 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcae:	3318      	adds	r3, #24
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7fe fe39 	bl	800c928 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800dccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800dcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dcdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcde:	2200      	movs	r2, #0
 800dce0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce6:	2200      	movs	r2, #0
 800dce8:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dcf2:	2260      	movs	r2, #96	; 0x60
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f001 fec4 	bl	800fa84 <memset>
 800dcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfe:	4a10      	ldr	r2, [pc, #64]	; (800dd40 <prvInitialiseNewTask+0x16c>)
 800dd00:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800dd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd06:	4a0f      	ldr	r2, [pc, #60]	; (800dd44 <prvInitialiseNewTask+0x170>)
 800dd08:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800dd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd0e:	4a0e      	ldr	r2, [pc, #56]	; (800dd48 <prvInitialiseNewTask+0x174>)
 800dd10:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800dd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd16:	2200      	movs	r2, #0
 800dd18:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dd1c:	683a      	ldr	r2, [r7, #0]
 800dd1e:	68f9      	ldr	r1, [r7, #12]
 800dd20:	69b8      	ldr	r0, [r7, #24]
 800dd22:	f7fe fe95 	bl	800ca50 <pxPortInitialiseStack>
 800dd26:	4602      	mov	r2, r0
 800dd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d002      	beq.n	800dd38 <prvInitialiseNewTask+0x164>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd38:	bf00      	nop
 800dd3a:	3720      	adds	r7, #32
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	080118e8 	.word	0x080118e8
 800dd44:	08011908 	.word	0x08011908
 800dd48:	080118c8 	.word	0x080118c8

0800dd4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dd54:	f7fe ffa6 	bl	800cca4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dd58:	4b2d      	ldr	r3, [pc, #180]	; (800de10 <prvAddNewTaskToReadyList+0xc4>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	4a2c      	ldr	r2, [pc, #176]	; (800de10 <prvAddNewTaskToReadyList+0xc4>)
 800dd60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dd62:	4b2c      	ldr	r3, [pc, #176]	; (800de14 <prvAddNewTaskToReadyList+0xc8>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d109      	bne.n	800dd7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dd6a:	4a2a      	ldr	r2, [pc, #168]	; (800de14 <prvAddNewTaskToReadyList+0xc8>)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dd70:	4b27      	ldr	r3, [pc, #156]	; (800de10 <prvAddNewTaskToReadyList+0xc4>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d110      	bne.n	800dd9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dd78:	f000 fd38 	bl	800e7ec <prvInitialiseTaskLists>
 800dd7c:	e00d      	b.n	800dd9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dd7e:	4b26      	ldr	r3, [pc, #152]	; (800de18 <prvAddNewTaskToReadyList+0xcc>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d109      	bne.n	800dd9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd86:	4b23      	ldr	r3, [pc, #140]	; (800de14 <prvAddNewTaskToReadyList+0xc8>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d802      	bhi.n	800dd9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dd94:	4a1f      	ldr	r2, [pc, #124]	; (800de14 <prvAddNewTaskToReadyList+0xc8>)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dd9a:	4b20      	ldr	r3, [pc, #128]	; (800de1c <prvAddNewTaskToReadyList+0xd0>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	3301      	adds	r3, #1
 800dda0:	4a1e      	ldr	r2, [pc, #120]	; (800de1c <prvAddNewTaskToReadyList+0xd0>)
 800dda2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dda4:	4b1d      	ldr	r3, [pc, #116]	; (800de1c <prvAddNewTaskToReadyList+0xd0>)
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddb2:	4b1b      	ldr	r3, [pc, #108]	; (800de20 <prvAddNewTaskToReadyList+0xd4>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d903      	bls.n	800ddc2 <prvAddNewTaskToReadyList+0x76>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddbe:	4a18      	ldr	r2, [pc, #96]	; (800de20 <prvAddNewTaskToReadyList+0xd4>)
 800ddc0:	6013      	str	r3, [r2, #0]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddc6:	4613      	mov	r3, r2
 800ddc8:	009b      	lsls	r3, r3, #2
 800ddca:	4413      	add	r3, r2
 800ddcc:	009b      	lsls	r3, r3, #2
 800ddce:	4a15      	ldr	r2, [pc, #84]	; (800de24 <prvAddNewTaskToReadyList+0xd8>)
 800ddd0:	441a      	add	r2, r3
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	3304      	adds	r3, #4
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	4610      	mov	r0, r2
 800ddda:	f7fe fdb2 	bl	800c942 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ddde:	f7fe ff91 	bl	800cd04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dde2:	4b0d      	ldr	r3, [pc, #52]	; (800de18 <prvAddNewTaskToReadyList+0xcc>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d00e      	beq.n	800de08 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ddea:	4b0a      	ldr	r3, [pc, #40]	; (800de14 <prvAddNewTaskToReadyList+0xc8>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d207      	bcs.n	800de08 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ddf8:	4b0b      	ldr	r3, [pc, #44]	; (800de28 <prvAddNewTaskToReadyList+0xdc>)
 800ddfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddfe:	601a      	str	r2, [r3, #0]
 800de00:	f3bf 8f4f 	dsb	sy
 800de04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de08:	bf00      	nop
 800de0a:	3708      	adds	r7, #8
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	200055b4 	.word	0x200055b4
 800de14:	200050dc 	.word	0x200050dc
 800de18:	200055c0 	.word	0x200055c0
 800de1c:	200055d0 	.word	0x200055d0
 800de20:	200055bc 	.word	0x200055bc
 800de24:	200050e0 	.word	0x200050e0
 800de28:	e000ed04 	.word	0xe000ed04

0800de2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800de34:	2300      	movs	r3, #0
 800de36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d017      	beq.n	800de6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800de3e:	4b13      	ldr	r3, [pc, #76]	; (800de8c <vTaskDelay+0x60>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00a      	beq.n	800de5c <vTaskDelay+0x30>
	__asm volatile
 800de46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de4a:	f383 8811 	msr	BASEPRI, r3
 800de4e:	f3bf 8f6f 	isb	sy
 800de52:	f3bf 8f4f 	dsb	sy
 800de56:	60bb      	str	r3, [r7, #8]
}
 800de58:	bf00      	nop
 800de5a:	e7fe      	b.n	800de5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800de5c:	f000 f88c 	bl	800df78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800de60:	2100      	movs	r1, #0
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f000 fe18 	bl	800ea98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800de68:	f000 f8cc 	bl	800e004 <xTaskResumeAll>
 800de6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d107      	bne.n	800de84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800de74:	4b06      	ldr	r3, [pc, #24]	; (800de90 <vTaskDelay+0x64>)
 800de76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de7a:	601a      	str	r2, [r3, #0]
 800de7c:	f3bf 8f4f 	dsb	sy
 800de80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de84:	bf00      	nop
 800de86:	3710      	adds	r7, #16
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	200055dc 	.word	0x200055dc
 800de90:	e000ed04 	.word	0xe000ed04

0800de94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b08a      	sub	sp, #40	; 0x28
 800de98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800de9a:	2300      	movs	r3, #0
 800de9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800de9e:	2300      	movs	r3, #0
 800dea0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dea2:	463a      	mov	r2, r7
 800dea4:	1d39      	adds	r1, r7, #4
 800dea6:	f107 0308 	add.w	r3, r7, #8
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fe fc34 	bl	800c718 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800deb0:	6839      	ldr	r1, [r7, #0]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	68ba      	ldr	r2, [r7, #8]
 800deb6:	9202      	str	r2, [sp, #8]
 800deb8:	9301      	str	r3, [sp, #4]
 800deba:	2300      	movs	r3, #0
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	2300      	movs	r3, #0
 800dec0:	460a      	mov	r2, r1
 800dec2:	4925      	ldr	r1, [pc, #148]	; (800df58 <vTaskStartScheduler+0xc4>)
 800dec4:	4825      	ldr	r0, [pc, #148]	; (800df5c <vTaskStartScheduler+0xc8>)
 800dec6:	f7ff fddf 	bl	800da88 <xTaskCreateStatic>
 800deca:	4603      	mov	r3, r0
 800decc:	4a24      	ldr	r2, [pc, #144]	; (800df60 <vTaskStartScheduler+0xcc>)
 800dece:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ded0:	4b23      	ldr	r3, [pc, #140]	; (800df60 <vTaskStartScheduler+0xcc>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d002      	beq.n	800dede <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ded8:	2301      	movs	r3, #1
 800deda:	617b      	str	r3, [r7, #20]
 800dedc:	e001      	b.n	800dee2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dede:	2300      	movs	r3, #0
 800dee0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d102      	bne.n	800deee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dee8:	f000 fe30 	bl	800eb4c <xTimerCreateTimerTask>
 800deec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	2b01      	cmp	r3, #1
 800def2:	d11e      	bne.n	800df32 <vTaskStartScheduler+0x9e>
	__asm volatile
 800def4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def8:	f383 8811 	msr	BASEPRI, r3
 800defc:	f3bf 8f6f 	isb	sy
 800df00:	f3bf 8f4f 	dsb	sy
 800df04:	613b      	str	r3, [r7, #16]
}
 800df06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df08:	4b16      	ldr	r3, [pc, #88]	; (800df64 <vTaskStartScheduler+0xd0>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800df10:	4a15      	ldr	r2, [pc, #84]	; (800df68 <vTaskStartScheduler+0xd4>)
 800df12:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800df14:	4b15      	ldr	r3, [pc, #84]	; (800df6c <vTaskStartScheduler+0xd8>)
 800df16:	f04f 32ff 	mov.w	r2, #4294967295
 800df1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800df1c:	4b14      	ldr	r3, [pc, #80]	; (800df70 <vTaskStartScheduler+0xdc>)
 800df1e:	2201      	movs	r2, #1
 800df20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800df22:	4b14      	ldr	r3, [pc, #80]	; (800df74 <vTaskStartScheduler+0xe0>)
 800df24:	2200      	movs	r2, #0
 800df26:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800df28:	f7f3 fcaa 	bl	8001880 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800df2c:	f7fe fe18 	bl	800cb60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800df30:	e00e      	b.n	800df50 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df38:	d10a      	bne.n	800df50 <vTaskStartScheduler+0xbc>
	__asm volatile
 800df3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df3e:	f383 8811 	msr	BASEPRI, r3
 800df42:	f3bf 8f6f 	isb	sy
 800df46:	f3bf 8f4f 	dsb	sy
 800df4a:	60fb      	str	r3, [r7, #12]
}
 800df4c:	bf00      	nop
 800df4e:	e7fe      	b.n	800df4e <vTaskStartScheduler+0xba>
}
 800df50:	bf00      	nop
 800df52:	3718      	adds	r7, #24
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}
 800df58:	0801105c 	.word	0x0801105c
 800df5c:	0800e70d 	.word	0x0800e70d
 800df60:	200055d8 	.word	0x200055d8
 800df64:	200050dc 	.word	0x200050dc
 800df68:	20000014 	.word	0x20000014
 800df6c:	200055d4 	.word	0x200055d4
 800df70:	200055c0 	.word	0x200055c0
 800df74:	200055b8 	.word	0x200055b8

0800df78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800df78:	b480      	push	{r7}
 800df7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800df7c:	4b04      	ldr	r3, [pc, #16]	; (800df90 <vTaskSuspendAll+0x18>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	3301      	adds	r3, #1
 800df82:	4a03      	ldr	r2, [pc, #12]	; (800df90 <vTaskSuspendAll+0x18>)
 800df84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800df86:	bf00      	nop
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr
 800df90:	200055dc 	.word	0x200055dc

0800df94 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800df9a:	2300      	movs	r3, #0
 800df9c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800df9e:	4b14      	ldr	r3, [pc, #80]	; (800dff0 <prvGetExpectedIdleTime+0x5c>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d001      	beq.n	800dfaa <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800dfaa:	4b12      	ldr	r3, [pc, #72]	; (800dff4 <prvGetExpectedIdleTime+0x60>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d002      	beq.n	800dfba <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	607b      	str	r3, [r7, #4]
 800dfb8:	e012      	b.n	800dfe0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800dfba:	4b0f      	ldr	r3, [pc, #60]	; (800dff8 <prvGetExpectedIdleTime+0x64>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	d902      	bls.n	800dfc8 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	607b      	str	r3, [r7, #4]
 800dfc6:	e00b      	b.n	800dfe0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d002      	beq.n	800dfd4 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	607b      	str	r3, [r7, #4]
 800dfd2:	e005      	b.n	800dfe0 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800dfd4:	4b09      	ldr	r3, [pc, #36]	; (800dffc <prvGetExpectedIdleTime+0x68>)
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	4b09      	ldr	r3, [pc, #36]	; (800e000 <prvGetExpectedIdleTime+0x6c>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	1ad3      	subs	r3, r2, r3
 800dfde:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800dfe0:	687b      	ldr	r3, [r7, #4]
	}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	370c      	adds	r7, #12
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop
 800dff0:	200055bc 	.word	0x200055bc
 800dff4:	200050dc 	.word	0x200050dc
 800dff8:	200050e0 	.word	0x200050e0
 800dffc:	200055d4 	.word	0x200055d4
 800e000:	200055b8 	.word	0x200055b8

0800e004 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e00a:	2300      	movs	r3, #0
 800e00c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e00e:	2300      	movs	r3, #0
 800e010:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e012:	4b42      	ldr	r3, [pc, #264]	; (800e11c <xTaskResumeAll+0x118>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d10a      	bne.n	800e030 <xTaskResumeAll+0x2c>
	__asm volatile
 800e01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e01e:	f383 8811 	msr	BASEPRI, r3
 800e022:	f3bf 8f6f 	isb	sy
 800e026:	f3bf 8f4f 	dsb	sy
 800e02a:	603b      	str	r3, [r7, #0]
}
 800e02c:	bf00      	nop
 800e02e:	e7fe      	b.n	800e02e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e030:	f7fe fe38 	bl	800cca4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e034:	4b39      	ldr	r3, [pc, #228]	; (800e11c <xTaskResumeAll+0x118>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	3b01      	subs	r3, #1
 800e03a:	4a38      	ldr	r2, [pc, #224]	; (800e11c <xTaskResumeAll+0x118>)
 800e03c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e03e:	4b37      	ldr	r3, [pc, #220]	; (800e11c <xTaskResumeAll+0x118>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d162      	bne.n	800e10c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e046:	4b36      	ldr	r3, [pc, #216]	; (800e120 <xTaskResumeAll+0x11c>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d05e      	beq.n	800e10c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e04e:	e02f      	b.n	800e0b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e050:	4b34      	ldr	r3, [pc, #208]	; (800e124 <xTaskResumeAll+0x120>)
 800e052:	68db      	ldr	r3, [r3, #12]
 800e054:	68db      	ldr	r3, [r3, #12]
 800e056:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	3318      	adds	r3, #24
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7fe fccd 	bl	800c9fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	3304      	adds	r3, #4
 800e066:	4618      	mov	r0, r3
 800e068:	f7fe fcc8 	bl	800c9fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e070:	4b2d      	ldr	r3, [pc, #180]	; (800e128 <xTaskResumeAll+0x124>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	429a      	cmp	r2, r3
 800e076:	d903      	bls.n	800e080 <xTaskResumeAll+0x7c>
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e07c:	4a2a      	ldr	r2, [pc, #168]	; (800e128 <xTaskResumeAll+0x124>)
 800e07e:	6013      	str	r3, [r2, #0]
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e084:	4613      	mov	r3, r2
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	4413      	add	r3, r2
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	4a27      	ldr	r2, [pc, #156]	; (800e12c <xTaskResumeAll+0x128>)
 800e08e:	441a      	add	r2, r3
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	3304      	adds	r3, #4
 800e094:	4619      	mov	r1, r3
 800e096:	4610      	mov	r0, r2
 800e098:	f7fe fc53 	bl	800c942 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a0:	4b23      	ldr	r3, [pc, #140]	; (800e130 <xTaskResumeAll+0x12c>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d302      	bcc.n	800e0b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e0aa:	4b22      	ldr	r3, [pc, #136]	; (800e134 <xTaskResumeAll+0x130>)
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0b0:	4b1c      	ldr	r3, [pc, #112]	; (800e124 <xTaskResumeAll+0x120>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d1cb      	bne.n	800e050 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d001      	beq.n	800e0c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e0be:	f000 fc39 	bl	800e934 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e0c2:	4b1d      	ldr	r3, [pc, #116]	; (800e138 <xTaskResumeAll+0x134>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d010      	beq.n	800e0f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e0ce:	f000 f86f 	bl	800e1b0 <xTaskIncrementTick>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d002      	beq.n	800e0de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e0d8:	4b16      	ldr	r3, [pc, #88]	; (800e134 <xTaskResumeAll+0x130>)
 800e0da:	2201      	movs	r2, #1
 800e0dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	3b01      	subs	r3, #1
 800e0e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d1f1      	bne.n	800e0ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e0ea:	4b13      	ldr	r3, [pc, #76]	; (800e138 <xTaskResumeAll+0x134>)
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e0f0:	4b10      	ldr	r3, [pc, #64]	; (800e134 <xTaskResumeAll+0x130>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d009      	beq.n	800e10c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e0fc:	4b0f      	ldr	r3, [pc, #60]	; (800e13c <xTaskResumeAll+0x138>)
 800e0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e102:	601a      	str	r2, [r3, #0]
 800e104:	f3bf 8f4f 	dsb	sy
 800e108:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e10c:	f7fe fdfa 	bl	800cd04 <vPortExitCritical>

	return xAlreadyYielded;
 800e110:	68bb      	ldr	r3, [r7, #8]
}
 800e112:	4618      	mov	r0, r3
 800e114:	3710      	adds	r7, #16
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	200055dc 	.word	0x200055dc
 800e120:	200055b4 	.word	0x200055b4
 800e124:	20005570 	.word	0x20005570
 800e128:	200055bc 	.word	0x200055bc
 800e12c:	200050e0 	.word	0x200050e0
 800e130:	200050dc 	.word	0x200050dc
 800e134:	200055c8 	.word	0x200055c8
 800e138:	200055c4 	.word	0x200055c4
 800e13c:	e000ed04 	.word	0xe000ed04

0800e140 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e140:	b480      	push	{r7}
 800e142:	b083      	sub	sp, #12
 800e144:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e146:	4b05      	ldr	r3, [pc, #20]	; (800e15c <xTaskGetTickCount+0x1c>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e14c:	687b      	ldr	r3, [r7, #4]
}
 800e14e:	4618      	mov	r0, r3
 800e150:	370c      	adds	r7, #12
 800e152:	46bd      	mov	sp, r7
 800e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e158:	4770      	bx	lr
 800e15a:	bf00      	nop
 800e15c:	200055b8 	.word	0x200055b8

0800e160 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800e160:	b480      	push	{r7}
 800e162:	b085      	sub	sp, #20
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800e168:	4b0f      	ldr	r3, [pc, #60]	; (800e1a8 <vTaskStepTick+0x48>)
 800e16a:	681a      	ldr	r2, [r3, #0]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	441a      	add	r2, r3
 800e170:	4b0e      	ldr	r3, [pc, #56]	; (800e1ac <vTaskStepTick+0x4c>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	429a      	cmp	r2, r3
 800e176:	d90a      	bls.n	800e18e <vTaskStepTick+0x2e>
	__asm volatile
 800e178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17c:	f383 8811 	msr	BASEPRI, r3
 800e180:	f3bf 8f6f 	isb	sy
 800e184:	f3bf 8f4f 	dsb	sy
 800e188:	60fb      	str	r3, [r7, #12]
}
 800e18a:	bf00      	nop
 800e18c:	e7fe      	b.n	800e18c <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800e18e:	4b06      	ldr	r3, [pc, #24]	; (800e1a8 <vTaskStepTick+0x48>)
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	4413      	add	r3, r2
 800e196:	4a04      	ldr	r2, [pc, #16]	; (800e1a8 <vTaskStepTick+0x48>)
 800e198:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800e19a:	bf00      	nop
 800e19c:	3714      	adds	r7, #20
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop
 800e1a8:	200055b8 	.word	0x200055b8
 800e1ac:	200055d4 	.word	0x200055d4

0800e1b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b086      	sub	sp, #24
 800e1b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1ba:	4b53      	ldr	r3, [pc, #332]	; (800e308 <xTaskIncrementTick+0x158>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	f040 8095 	bne.w	800e2ee <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e1c4:	4b51      	ldr	r3, [pc, #324]	; (800e30c <xTaskIncrementTick+0x15c>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e1cc:	4a4f      	ldr	r2, [pc, #316]	; (800e30c <xTaskIncrementTick+0x15c>)
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d120      	bne.n	800e21a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e1d8:	4b4d      	ldr	r3, [pc, #308]	; (800e310 <xTaskIncrementTick+0x160>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d00a      	beq.n	800e1f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800e1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e6:	f383 8811 	msr	BASEPRI, r3
 800e1ea:	f3bf 8f6f 	isb	sy
 800e1ee:	f3bf 8f4f 	dsb	sy
 800e1f2:	603b      	str	r3, [r7, #0]
}
 800e1f4:	bf00      	nop
 800e1f6:	e7fe      	b.n	800e1f6 <xTaskIncrementTick+0x46>
 800e1f8:	4b45      	ldr	r3, [pc, #276]	; (800e310 <xTaskIncrementTick+0x160>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	60fb      	str	r3, [r7, #12]
 800e1fe:	4b45      	ldr	r3, [pc, #276]	; (800e314 <xTaskIncrementTick+0x164>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	4a43      	ldr	r2, [pc, #268]	; (800e310 <xTaskIncrementTick+0x160>)
 800e204:	6013      	str	r3, [r2, #0]
 800e206:	4a43      	ldr	r2, [pc, #268]	; (800e314 <xTaskIncrementTick+0x164>)
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	6013      	str	r3, [r2, #0]
 800e20c:	4b42      	ldr	r3, [pc, #264]	; (800e318 <xTaskIncrementTick+0x168>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	3301      	adds	r3, #1
 800e212:	4a41      	ldr	r2, [pc, #260]	; (800e318 <xTaskIncrementTick+0x168>)
 800e214:	6013      	str	r3, [r2, #0]
 800e216:	f000 fb8d 	bl	800e934 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e21a:	4b40      	ldr	r3, [pc, #256]	; (800e31c <xTaskIncrementTick+0x16c>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	693a      	ldr	r2, [r7, #16]
 800e220:	429a      	cmp	r2, r3
 800e222:	d349      	bcc.n	800e2b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e224:	4b3a      	ldr	r3, [pc, #232]	; (800e310 <xTaskIncrementTick+0x160>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d104      	bne.n	800e238 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e22e:	4b3b      	ldr	r3, [pc, #236]	; (800e31c <xTaskIncrementTick+0x16c>)
 800e230:	f04f 32ff 	mov.w	r2, #4294967295
 800e234:	601a      	str	r2, [r3, #0]
					break;
 800e236:	e03f      	b.n	800e2b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e238:	4b35      	ldr	r3, [pc, #212]	; (800e310 <xTaskIncrementTick+0x160>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e248:	693a      	ldr	r2, [r7, #16]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d203      	bcs.n	800e258 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e250:	4a32      	ldr	r2, [pc, #200]	; (800e31c <xTaskIncrementTick+0x16c>)
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e256:	e02f      	b.n	800e2b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	3304      	adds	r3, #4
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7fe fbcd 	bl	800c9fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e266:	2b00      	cmp	r3, #0
 800e268:	d004      	beq.n	800e274 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	3318      	adds	r3, #24
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fe fbc4 	bl	800c9fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e278:	4b29      	ldr	r3, [pc, #164]	; (800e320 <xTaskIncrementTick+0x170>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d903      	bls.n	800e288 <xTaskIncrementTick+0xd8>
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e284:	4a26      	ldr	r2, [pc, #152]	; (800e320 <xTaskIncrementTick+0x170>)
 800e286:	6013      	str	r3, [r2, #0]
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e28c:	4613      	mov	r3, r2
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	4413      	add	r3, r2
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	4a23      	ldr	r2, [pc, #140]	; (800e324 <xTaskIncrementTick+0x174>)
 800e296:	441a      	add	r2, r3
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	3304      	adds	r3, #4
 800e29c:	4619      	mov	r1, r3
 800e29e:	4610      	mov	r0, r2
 800e2a0:	f7fe fb4f 	bl	800c942 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2a8:	4b1f      	ldr	r3, [pc, #124]	; (800e328 <xTaskIncrementTick+0x178>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d3b8      	bcc.n	800e224 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2b6:	e7b5      	b.n	800e224 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e2b8:	4b1b      	ldr	r3, [pc, #108]	; (800e328 <xTaskIncrementTick+0x178>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2be:	4919      	ldr	r1, [pc, #100]	; (800e324 <xTaskIncrementTick+0x174>)
 800e2c0:	4613      	mov	r3, r2
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	4413      	add	r3, r2
 800e2c6:	009b      	lsls	r3, r3, #2
 800e2c8:	440b      	add	r3, r1
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d901      	bls.n	800e2d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800e2d4:	4b15      	ldr	r3, [pc, #84]	; (800e32c <xTaskIncrementTick+0x17c>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d101      	bne.n	800e2e0 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800e2dc:	f7f3 fae6 	bl	80018ac <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e2e0:	4b13      	ldr	r3, [pc, #76]	; (800e330 <xTaskIncrementTick+0x180>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d009      	beq.n	800e2fc <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	617b      	str	r3, [r7, #20]
 800e2ec:	e006      	b.n	800e2fc <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e2ee:	4b0f      	ldr	r3, [pc, #60]	; (800e32c <xTaskIncrementTick+0x17c>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	4a0d      	ldr	r2, [pc, #52]	; (800e32c <xTaskIncrementTick+0x17c>)
 800e2f6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800e2f8:	f7f3 fad8 	bl	80018ac <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800e2fc:	697b      	ldr	r3, [r7, #20]
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3718      	adds	r7, #24
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	200055dc 	.word	0x200055dc
 800e30c:	200055b8 	.word	0x200055b8
 800e310:	20005568 	.word	0x20005568
 800e314:	2000556c 	.word	0x2000556c
 800e318:	200055cc 	.word	0x200055cc
 800e31c:	200055d4 	.word	0x200055d4
 800e320:	200055bc 	.word	0x200055bc
 800e324:	200050e0 	.word	0x200050e0
 800e328:	200050dc 	.word	0x200050dc
 800e32c:	200055c4 	.word	0x200055c4
 800e330:	200055c8 	.word	0x200055c8

0800e334 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e33a:	4b46      	ldr	r3, [pc, #280]	; (800e454 <vTaskSwitchContext+0x120>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d003      	beq.n	800e34a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e342:	4b45      	ldr	r3, [pc, #276]	; (800e458 <vTaskSwitchContext+0x124>)
 800e344:	2201      	movs	r2, #1
 800e346:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e348:	e07f      	b.n	800e44a <vTaskSwitchContext+0x116>
		xYieldPending = pdFALSE;
 800e34a:	4b43      	ldr	r3, [pc, #268]	; (800e458 <vTaskSwitchContext+0x124>)
 800e34c:	2200      	movs	r2, #0
 800e34e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e350:	f7f3 fa9d 	bl	800188e <getRunTimeCounterValue>
 800e354:	4603      	mov	r3, r0
 800e356:	4a41      	ldr	r2, [pc, #260]	; (800e45c <vTaskSwitchContext+0x128>)
 800e358:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e35a:	4b40      	ldr	r3, [pc, #256]	; (800e45c <vTaskSwitchContext+0x128>)
 800e35c:	681a      	ldr	r2, [r3, #0]
 800e35e:	4b40      	ldr	r3, [pc, #256]	; (800e460 <vTaskSwitchContext+0x12c>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	429a      	cmp	r2, r3
 800e364:	d90b      	bls.n	800e37e <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e366:	4b3f      	ldr	r3, [pc, #252]	; (800e464 <vTaskSwitchContext+0x130>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
 800e36e:	4a3b      	ldr	r2, [pc, #236]	; (800e45c <vTaskSwitchContext+0x128>)
 800e370:	6810      	ldr	r0, [r2, #0]
 800e372:	4a3b      	ldr	r2, [pc, #236]	; (800e460 <vTaskSwitchContext+0x12c>)
 800e374:	6812      	ldr	r2, [r2, #0]
 800e376:	1a82      	subs	r2, r0, r2
 800e378:	440a      	add	r2, r1
 800e37a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e37e:	4b37      	ldr	r3, [pc, #220]	; (800e45c <vTaskSwitchContext+0x128>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4a37      	ldr	r2, [pc, #220]	; (800e460 <vTaskSwitchContext+0x12c>)
 800e384:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e386:	4b37      	ldr	r3, [pc, #220]	; (800e464 <vTaskSwitchContext+0x130>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	4b35      	ldr	r3, [pc, #212]	; (800e464 <vTaskSwitchContext+0x130>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e392:	429a      	cmp	r2, r3
 800e394:	d808      	bhi.n	800e3a8 <vTaskSwitchContext+0x74>
 800e396:	4b33      	ldr	r3, [pc, #204]	; (800e464 <vTaskSwitchContext+0x130>)
 800e398:	681a      	ldr	r2, [r3, #0]
 800e39a:	4b32      	ldr	r3, [pc, #200]	; (800e464 <vTaskSwitchContext+0x130>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	3334      	adds	r3, #52	; 0x34
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	4610      	mov	r0, r2
 800e3a4:	f7f3 fa89 	bl	80018ba <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800e3a8:	4b2e      	ldr	r3, [pc, #184]	; (800e464 <vTaskSwitchContext+0x130>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4a2e      	ldr	r2, [pc, #184]	; (800e468 <vTaskSwitchContext+0x134>)
 800e3ae:	6812      	ldr	r2, [r2, #0]
 800e3b0:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3b4:	4b2d      	ldr	r3, [pc, #180]	; (800e46c <vTaskSwitchContext+0x138>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	60fb      	str	r3, [r7, #12]
 800e3ba:	e010      	b.n	800e3de <vTaskSwitchContext+0xaa>
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d10a      	bne.n	800e3d8 <vTaskSwitchContext+0xa4>
	__asm volatile
 800e3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c6:	f383 8811 	msr	BASEPRI, r3
 800e3ca:	f3bf 8f6f 	isb	sy
 800e3ce:	f3bf 8f4f 	dsb	sy
 800e3d2:	607b      	str	r3, [r7, #4]
}
 800e3d4:	bf00      	nop
 800e3d6:	e7fe      	b.n	800e3d6 <vTaskSwitchContext+0xa2>
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	3b01      	subs	r3, #1
 800e3dc:	60fb      	str	r3, [r7, #12]
 800e3de:	4924      	ldr	r1, [pc, #144]	; (800e470 <vTaskSwitchContext+0x13c>)
 800e3e0:	68fa      	ldr	r2, [r7, #12]
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	4413      	add	r3, r2
 800e3e8:	009b      	lsls	r3, r3, #2
 800e3ea:	440b      	add	r3, r1
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d0e4      	beq.n	800e3bc <vTaskSwitchContext+0x88>
 800e3f2:	68fa      	ldr	r2, [r7, #12]
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	4413      	add	r3, r2
 800e3fa:	009b      	lsls	r3, r3, #2
 800e3fc:	4a1c      	ldr	r2, [pc, #112]	; (800e470 <vTaskSwitchContext+0x13c>)
 800e3fe:	4413      	add	r3, r2
 800e400:	60bb      	str	r3, [r7, #8]
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	685a      	ldr	r2, [r3, #4]
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	605a      	str	r2, [r3, #4]
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	685a      	ldr	r2, [r3, #4]
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	3308      	adds	r3, #8
 800e414:	429a      	cmp	r2, r3
 800e416:	d104      	bne.n	800e422 <vTaskSwitchContext+0xee>
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	685a      	ldr	r2, [r3, #4]
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	605a      	str	r2, [r3, #4]
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	4a0e      	ldr	r2, [pc, #56]	; (800e464 <vTaskSwitchContext+0x130>)
 800e42a:	6013      	str	r3, [r2, #0]
 800e42c:	4a0f      	ldr	r2, [pc, #60]	; (800e46c <vTaskSwitchContext+0x138>)
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800e432:	4b0c      	ldr	r3, [pc, #48]	; (800e464 <vTaskSwitchContext+0x130>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800e43a:	4a0b      	ldr	r2, [pc, #44]	; (800e468 <vTaskSwitchContext+0x134>)
 800e43c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e43e:	4b09      	ldr	r3, [pc, #36]	; (800e464 <vTaskSwitchContext+0x130>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e446:	4a0b      	ldr	r2, [pc, #44]	; (800e474 <vTaskSwitchContext+0x140>)
 800e448:	6013      	str	r3, [r2, #0]
}
 800e44a:	bf00      	nop
 800e44c:	3710      	adds	r7, #16
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	200055dc 	.word	0x200055dc
 800e458:	200055c8 	.word	0x200055c8
 800e45c:	200055e4 	.word	0x200055e4
 800e460:	200055e0 	.word	0x200055e0
 800e464:	200050dc 	.word	0x200050dc
 800e468:	200055b0 	.word	0x200055b0
 800e46c:	200055bc 	.word	0x200055bc
 800e470:	200050e0 	.word	0x200050e0
 800e474:	20000014 	.word	0x20000014

0800e478 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d10a      	bne.n	800e49e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e48c:	f383 8811 	msr	BASEPRI, r3
 800e490:	f3bf 8f6f 	isb	sy
 800e494:	f3bf 8f4f 	dsb	sy
 800e498:	60fb      	str	r3, [r7, #12]
}
 800e49a:	bf00      	nop
 800e49c:	e7fe      	b.n	800e49c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e49e:	4b07      	ldr	r3, [pc, #28]	; (800e4bc <vTaskPlaceOnEventList+0x44>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	3318      	adds	r3, #24
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f7fe fa6f 	bl	800c98a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e4ac:	2101      	movs	r1, #1
 800e4ae:	6838      	ldr	r0, [r7, #0]
 800e4b0:	f000 faf2 	bl	800ea98 <prvAddCurrentTaskToDelayedList>
}
 800e4b4:	bf00      	nop
 800e4b6:	3710      	adds	r7, #16
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	200050dc 	.word	0x200050dc

0800e4c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b086      	sub	sp, #24
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	60f8      	str	r0, [r7, #12]
 800e4c8:	60b9      	str	r1, [r7, #8]
 800e4ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d10a      	bne.n	800e4e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d6:	f383 8811 	msr	BASEPRI, r3
 800e4da:	f3bf 8f6f 	isb	sy
 800e4de:	f3bf 8f4f 	dsb	sy
 800e4e2:	617b      	str	r3, [r7, #20]
}
 800e4e4:	bf00      	nop
 800e4e6:	e7fe      	b.n	800e4e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e4e8:	4b0a      	ldr	r3, [pc, #40]	; (800e514 <vTaskPlaceOnEventListRestricted+0x54>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	3318      	adds	r3, #24
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	68f8      	ldr	r0, [r7, #12]
 800e4f2:	f7fe fa26 	bl	800c942 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d002      	beq.n	800e502 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e4fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e500:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e502:	6879      	ldr	r1, [r7, #4]
 800e504:	68b8      	ldr	r0, [r7, #8]
 800e506:	f000 fac7 	bl	800ea98 <prvAddCurrentTaskToDelayedList>
	}
 800e50a:	bf00      	nop
 800e50c:	3718      	adds	r7, #24
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	200050dc 	.word	0x200050dc

0800e518 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b086      	sub	sp, #24
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	68db      	ldr	r3, [r3, #12]
 800e524:	68db      	ldr	r3, [r3, #12]
 800e526:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d10a      	bne.n	800e544 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e532:	f383 8811 	msr	BASEPRI, r3
 800e536:	f3bf 8f6f 	isb	sy
 800e53a:	f3bf 8f4f 	dsb	sy
 800e53e:	60fb      	str	r3, [r7, #12]
}
 800e540:	bf00      	nop
 800e542:	e7fe      	b.n	800e542 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	3318      	adds	r3, #24
 800e548:	4618      	mov	r0, r3
 800e54a:	f7fe fa57 	bl	800c9fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e54e:	4b1f      	ldr	r3, [pc, #124]	; (800e5cc <xTaskRemoveFromEventList+0xb4>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d11f      	bne.n	800e596 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	3304      	adds	r3, #4
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fe fa4e 	bl	800c9fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e564:	4b1a      	ldr	r3, [pc, #104]	; (800e5d0 <xTaskRemoveFromEventList+0xb8>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	429a      	cmp	r2, r3
 800e56a:	d903      	bls.n	800e574 <xTaskRemoveFromEventList+0x5c>
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e570:	4a17      	ldr	r2, [pc, #92]	; (800e5d0 <xTaskRemoveFromEventList+0xb8>)
 800e572:	6013      	str	r3, [r2, #0]
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e578:	4613      	mov	r3, r2
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	4413      	add	r3, r2
 800e57e:	009b      	lsls	r3, r3, #2
 800e580:	4a14      	ldr	r2, [pc, #80]	; (800e5d4 <xTaskRemoveFromEventList+0xbc>)
 800e582:	441a      	add	r2, r3
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	3304      	adds	r3, #4
 800e588:	4619      	mov	r1, r3
 800e58a:	4610      	mov	r0, r2
 800e58c:	f7fe f9d9 	bl	800c942 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800e590:	f000 f9d0 	bl	800e934 <prvResetNextTaskUnblockTime>
 800e594:	e005      	b.n	800e5a2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	3318      	adds	r3, #24
 800e59a:	4619      	mov	r1, r3
 800e59c:	480e      	ldr	r0, [pc, #56]	; (800e5d8 <xTaskRemoveFromEventList+0xc0>)
 800e59e:	f7fe f9d0 	bl	800c942 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5a6:	4b0d      	ldr	r3, [pc, #52]	; (800e5dc <xTaskRemoveFromEventList+0xc4>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d905      	bls.n	800e5bc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e5b4:	4b0a      	ldr	r3, [pc, #40]	; (800e5e0 <xTaskRemoveFromEventList+0xc8>)
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	601a      	str	r2, [r3, #0]
 800e5ba:	e001      	b.n	800e5c0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e5c0:	697b      	ldr	r3, [r7, #20]
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3718      	adds	r7, #24
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	200055dc 	.word	0x200055dc
 800e5d0:	200055bc 	.word	0x200055bc
 800e5d4:	200050e0 	.word	0x200050e0
 800e5d8:	20005570 	.word	0x20005570
 800e5dc:	200050dc 	.word	0x200050dc
 800e5e0:	200055c8 	.word	0x200055c8

0800e5e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b083      	sub	sp, #12
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e5ec:	4b06      	ldr	r3, [pc, #24]	; (800e608 <vTaskInternalSetTimeOutState+0x24>)
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e5f4:	4b05      	ldr	r3, [pc, #20]	; (800e60c <vTaskInternalSetTimeOutState+0x28>)
 800e5f6:	681a      	ldr	r2, [r3, #0]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	605a      	str	r2, [r3, #4]
}
 800e5fc:	bf00      	nop
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr
 800e608:	200055cc 	.word	0x200055cc
 800e60c:	200055b8 	.word	0x200055b8

0800e610 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b088      	sub	sp, #32
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d10a      	bne.n	800e636 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e624:	f383 8811 	msr	BASEPRI, r3
 800e628:	f3bf 8f6f 	isb	sy
 800e62c:	f3bf 8f4f 	dsb	sy
 800e630:	613b      	str	r3, [r7, #16]
}
 800e632:	bf00      	nop
 800e634:	e7fe      	b.n	800e634 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d10a      	bne.n	800e652 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e640:	f383 8811 	msr	BASEPRI, r3
 800e644:	f3bf 8f6f 	isb	sy
 800e648:	f3bf 8f4f 	dsb	sy
 800e64c:	60fb      	str	r3, [r7, #12]
}
 800e64e:	bf00      	nop
 800e650:	e7fe      	b.n	800e650 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e652:	f7fe fb27 	bl	800cca4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e656:	4b24      	ldr	r3, [pc, #144]	; (800e6e8 <xTaskCheckForTimeOut+0xd8>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	685b      	ldr	r3, [r3, #4]
 800e660:	69ba      	ldr	r2, [r7, #24]
 800e662:	1ad3      	subs	r3, r2, r3
 800e664:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800e666:	4b21      	ldr	r3, [pc, #132]	; (800e6ec <xTaskCheckForTimeOut+0xdc>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d007      	beq.n	800e682 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800e672:	4b1e      	ldr	r3, [pc, #120]	; (800e6ec <xTaskCheckForTimeOut+0xdc>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	2200      	movs	r2, #0
 800e678:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
				xReturn = pdTRUE;
 800e67c:	2301      	movs	r3, #1
 800e67e:	61fb      	str	r3, [r7, #28]
 800e680:	e02b      	b.n	800e6da <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e68a:	d102      	bne.n	800e692 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e68c:	2300      	movs	r3, #0
 800e68e:	61fb      	str	r3, [r7, #28]
 800e690:	e023      	b.n	800e6da <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	4b16      	ldr	r3, [pc, #88]	; (800e6f0 <xTaskCheckForTimeOut+0xe0>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d007      	beq.n	800e6ae <xTaskCheckForTimeOut+0x9e>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	685b      	ldr	r3, [r3, #4]
 800e6a2:	69ba      	ldr	r2, [r7, #24]
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d302      	bcc.n	800e6ae <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	61fb      	str	r3, [r7, #28]
 800e6ac:	e015      	b.n	800e6da <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	697a      	ldr	r2, [r7, #20]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d20b      	bcs.n	800e6d0 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	1ad2      	subs	r2, r2, r3
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7ff ff8d 	bl	800e5e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	61fb      	str	r3, [r7, #28]
 800e6ce:	e004      	b.n	800e6da <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e6da:	f7fe fb13 	bl	800cd04 <vPortExitCritical>

	return xReturn;
 800e6de:	69fb      	ldr	r3, [r7, #28]
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3720      	adds	r7, #32
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	200055b8 	.word	0x200055b8
 800e6ec:	200050dc 	.word	0x200050dc
 800e6f0:	200055cc 	.word	0x200055cc

0800e6f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e6f8:	4b03      	ldr	r3, [pc, #12]	; (800e708 <vTaskMissedYield+0x14>)
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	601a      	str	r2, [r3, #0]
}
 800e6fe:	bf00      	nop
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr
 800e708:	200055c8 	.word	0x200055c8

0800e70c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b084      	sub	sp, #16
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e714:	f000 f8aa 	bl	800e86c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e718:	4b19      	ldr	r3, [pc, #100]	; (800e780 <prvIdleTask+0x74>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d907      	bls.n	800e730 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e720:	4b18      	ldr	r3, [pc, #96]	; (800e784 <prvIdleTask+0x78>)
 800e722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e726:	601a      	str	r2, [r3, #0]
 800e728:	f3bf 8f4f 	dsb	sy
 800e72c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e730:	f7f3 f8b5 	bl	800189e <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800e734:	f7ff fc2e 	bl	800df94 <prvGetExpectedIdleTime>
 800e738:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2b01      	cmp	r3, #1
 800e73e:	d9e9      	bls.n	800e714 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800e740:	f7ff fc1a 	bl	800df78 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800e744:	4b10      	ldr	r3, [pc, #64]	; (800e788 <prvIdleTask+0x7c>)
 800e746:	681a      	ldr	r2, [r3, #0]
 800e748:	4b10      	ldr	r3, [pc, #64]	; (800e78c <prvIdleTask+0x80>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d20a      	bcs.n	800e766 <prvIdleTask+0x5a>
	__asm volatile
 800e750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e754:	f383 8811 	msr	BASEPRI, r3
 800e758:	f3bf 8f6f 	isb	sy
 800e75c:	f3bf 8f4f 	dsb	sy
 800e760:	60bb      	str	r3, [r7, #8]
}
 800e762:	bf00      	nop
 800e764:	e7fe      	b.n	800e764 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800e766:	f7ff fc15 	bl	800df94 <prvGetExpectedIdleTime>
 800e76a:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2b01      	cmp	r3, #1
 800e770:	d902      	bls.n	800e778 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800e772:	68f8      	ldr	r0, [r7, #12]
 800e774:	f7fe fb4a 	bl	800ce0c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800e778:	f7ff fc44 	bl	800e004 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800e77c:	e7ca      	b.n	800e714 <prvIdleTask+0x8>
 800e77e:	bf00      	nop
 800e780:	200050e0 	.word	0x200050e0
 800e784:	e000ed04 	.word	0xe000ed04
 800e788:	200055d4 	.word	0x200055d4
 800e78c:	200055b8 	.word	0x200055b8

0800e790 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800e796:	2301      	movs	r3, #1
 800e798:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800e79a:	2301      	movs	r3, #1
 800e79c:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800e79e:	4b0f      	ldr	r3, [pc, #60]	; (800e7dc <eTaskConfirmSleepModeStatus+0x4c>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d002      	beq.n	800e7ac <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	71fb      	strb	r3, [r7, #7]
 800e7aa:	e010      	b.n	800e7ce <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800e7ac:	4b0c      	ldr	r3, [pc, #48]	; (800e7e0 <eTaskConfirmSleepModeStatus+0x50>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d002      	beq.n	800e7ba <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	71fb      	strb	r3, [r7, #7]
 800e7b8:	e009      	b.n	800e7ce <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800e7ba:	4b0a      	ldr	r3, [pc, #40]	; (800e7e4 <eTaskConfirmSleepModeStatus+0x54>)
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	4b0a      	ldr	r3, [pc, #40]	; (800e7e8 <eTaskConfirmSleepModeStatus+0x58>)
 800e7c0:	6819      	ldr	r1, [r3, #0]
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	1acb      	subs	r3, r1, r3
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d101      	bne.n	800e7ce <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800e7ca:	2302      	movs	r3, #2
 800e7cc:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800e7ce:	79fb      	ldrb	r3, [r7, #7]
	}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	370c      	adds	r7, #12
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr
 800e7dc:	20005570 	.word	0x20005570
 800e7e0:	200055c8 	.word	0x200055c8
 800e7e4:	2000559c 	.word	0x2000559c
 800e7e8:	200055b4 	.word	0x200055b4

0800e7ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b082      	sub	sp, #8
 800e7f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	607b      	str	r3, [r7, #4]
 800e7f6:	e00c      	b.n	800e812 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e7f8:	687a      	ldr	r2, [r7, #4]
 800e7fa:	4613      	mov	r3, r2
 800e7fc:	009b      	lsls	r3, r3, #2
 800e7fe:	4413      	add	r3, r2
 800e800:	009b      	lsls	r3, r3, #2
 800e802:	4a12      	ldr	r2, [pc, #72]	; (800e84c <prvInitialiseTaskLists+0x60>)
 800e804:	4413      	add	r3, r2
 800e806:	4618      	mov	r0, r3
 800e808:	f7fe f86e 	bl	800c8e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	3301      	adds	r3, #1
 800e810:	607b      	str	r3, [r7, #4]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2b37      	cmp	r3, #55	; 0x37
 800e816:	d9ef      	bls.n	800e7f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e818:	480d      	ldr	r0, [pc, #52]	; (800e850 <prvInitialiseTaskLists+0x64>)
 800e81a:	f7fe f865 	bl	800c8e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e81e:	480d      	ldr	r0, [pc, #52]	; (800e854 <prvInitialiseTaskLists+0x68>)
 800e820:	f7fe f862 	bl	800c8e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e824:	480c      	ldr	r0, [pc, #48]	; (800e858 <prvInitialiseTaskLists+0x6c>)
 800e826:	f7fe f85f 	bl	800c8e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e82a:	480c      	ldr	r0, [pc, #48]	; (800e85c <prvInitialiseTaskLists+0x70>)
 800e82c:	f7fe f85c 	bl	800c8e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e830:	480b      	ldr	r0, [pc, #44]	; (800e860 <prvInitialiseTaskLists+0x74>)
 800e832:	f7fe f859 	bl	800c8e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e836:	4b0b      	ldr	r3, [pc, #44]	; (800e864 <prvInitialiseTaskLists+0x78>)
 800e838:	4a05      	ldr	r2, [pc, #20]	; (800e850 <prvInitialiseTaskLists+0x64>)
 800e83a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e83c:	4b0a      	ldr	r3, [pc, #40]	; (800e868 <prvInitialiseTaskLists+0x7c>)
 800e83e:	4a05      	ldr	r2, [pc, #20]	; (800e854 <prvInitialiseTaskLists+0x68>)
 800e840:	601a      	str	r2, [r3, #0]
}
 800e842:	bf00      	nop
 800e844:	3708      	adds	r7, #8
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
 800e84a:	bf00      	nop
 800e84c:	200050e0 	.word	0x200050e0
 800e850:	20005540 	.word	0x20005540
 800e854:	20005554 	.word	0x20005554
 800e858:	20005570 	.word	0x20005570
 800e85c:	20005584 	.word	0x20005584
 800e860:	2000559c 	.word	0x2000559c
 800e864:	20005568 	.word	0x20005568
 800e868:	2000556c 	.word	0x2000556c

0800e86c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e872:	e019      	b.n	800e8a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e874:	f7fe fa16 	bl	800cca4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e878:	4b10      	ldr	r3, [pc, #64]	; (800e8bc <prvCheckTasksWaitingTermination+0x50>)
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	68db      	ldr	r3, [r3, #12]
 800e87e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	3304      	adds	r3, #4
 800e884:	4618      	mov	r0, r3
 800e886:	f7fe f8b9 	bl	800c9fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e88a:	4b0d      	ldr	r3, [pc, #52]	; (800e8c0 <prvCheckTasksWaitingTermination+0x54>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	3b01      	subs	r3, #1
 800e890:	4a0b      	ldr	r2, [pc, #44]	; (800e8c0 <prvCheckTasksWaitingTermination+0x54>)
 800e892:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e894:	4b0b      	ldr	r3, [pc, #44]	; (800e8c4 <prvCheckTasksWaitingTermination+0x58>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	3b01      	subs	r3, #1
 800e89a:	4a0a      	ldr	r2, [pc, #40]	; (800e8c4 <prvCheckTasksWaitingTermination+0x58>)
 800e89c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e89e:	f7fe fa31 	bl	800cd04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 f810 	bl	800e8c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e8a8:	4b06      	ldr	r3, [pc, #24]	; (800e8c4 <prvCheckTasksWaitingTermination+0x58>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d1e1      	bne.n	800e874 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e8b0:	bf00      	nop
 800e8b2:	bf00      	nop
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	20005584 	.word	0x20005584
 800e8c0:	200055b4 	.word	0x200055b4
 800e8c4:	20005598 	.word	0x20005598

0800e8c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f001 f936 	bl	800fb48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d108      	bne.n	800e8f8 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fd ffe4 	bl	800c8b8 <vPortFree>
				vPortFree( pxTCB );
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f7fd ffe1 	bl	800c8b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e8f6:	e018      	b.n	800e92a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d103      	bne.n	800e90a <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f7fd ffd8 	bl	800c8b8 <vPortFree>
	}
 800e908:	e00f      	b.n	800e92a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800e910:	2b02      	cmp	r3, #2
 800e912:	d00a      	beq.n	800e92a <prvDeleteTCB+0x62>
	__asm volatile
 800e914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e918:	f383 8811 	msr	BASEPRI, r3
 800e91c:	f3bf 8f6f 	isb	sy
 800e920:	f3bf 8f4f 	dsb	sy
 800e924:	60fb      	str	r3, [r7, #12]
}
 800e926:	bf00      	nop
 800e928:	e7fe      	b.n	800e928 <prvDeleteTCB+0x60>
	}
 800e92a:	bf00      	nop
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
	...

0800e934 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e93a:	4b0c      	ldr	r3, [pc, #48]	; (800e96c <prvResetNextTaskUnblockTime+0x38>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d104      	bne.n	800e94e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e944:	4b0a      	ldr	r3, [pc, #40]	; (800e970 <prvResetNextTaskUnblockTime+0x3c>)
 800e946:	f04f 32ff 	mov.w	r2, #4294967295
 800e94a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e94c:	e008      	b.n	800e960 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e94e:	4b07      	ldr	r3, [pc, #28]	; (800e96c <prvResetNextTaskUnblockTime+0x38>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	68db      	ldr	r3, [r3, #12]
 800e954:	68db      	ldr	r3, [r3, #12]
 800e956:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	4a04      	ldr	r2, [pc, #16]	; (800e970 <prvResetNextTaskUnblockTime+0x3c>)
 800e95e:	6013      	str	r3, [r2, #0]
}
 800e960:	bf00      	nop
 800e962:	370c      	adds	r7, #12
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr
 800e96c:	20005568 	.word	0x20005568
 800e970:	200055d4 	.word	0x200055d4

0800e974 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e97a:	4b0b      	ldr	r3, [pc, #44]	; (800e9a8 <xTaskGetSchedulerState+0x34>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d102      	bne.n	800e988 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e982:	2301      	movs	r3, #1
 800e984:	607b      	str	r3, [r7, #4]
 800e986:	e008      	b.n	800e99a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e988:	4b08      	ldr	r3, [pc, #32]	; (800e9ac <xTaskGetSchedulerState+0x38>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d102      	bne.n	800e996 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e990:	2302      	movs	r3, #2
 800e992:	607b      	str	r3, [r7, #4]
 800e994:	e001      	b.n	800e99a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e996:	2300      	movs	r3, #0
 800e998:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e99a:	687b      	ldr	r3, [r7, #4]
	}
 800e99c:	4618      	mov	r0, r3
 800e99e:	370c      	adds	r7, #12
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a6:	4770      	bx	lr
 800e9a8:	200055c0 	.word	0x200055c0
 800e9ac:	200055dc 	.word	0x200055dc

0800e9b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b086      	sub	sp, #24
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d05c      	beq.n	800ea80 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e9c6:	4b31      	ldr	r3, [pc, #196]	; (800ea8c <xTaskPriorityDisinherit+0xdc>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	693a      	ldr	r2, [r7, #16]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d00a      	beq.n	800e9e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d4:	f383 8811 	msr	BASEPRI, r3
 800e9d8:	f3bf 8f6f 	isb	sy
 800e9dc:	f3bf 8f4f 	dsb	sy
 800e9e0:	60fb      	str	r3, [r7, #12]
}
 800e9e2:	bf00      	nop
 800e9e4:	e7fe      	b.n	800e9e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e9e6:	693b      	ldr	r3, [r7, #16]
 800e9e8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d10a      	bne.n	800ea06 <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800e9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f4:	f383 8811 	msr	BASEPRI, r3
 800e9f8:	f3bf 8f6f 	isb	sy
 800e9fc:	f3bf 8f4f 	dsb	sy
 800ea00:	60bb      	str	r3, [r7, #8]
}
 800ea02:	bf00      	nop
 800ea04:	e7fe      	b.n	800ea04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800ea0c:	1e5a      	subs	r2, r3, #1
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d02e      	beq.n	800ea80 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d129      	bne.n	800ea80 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	3304      	adds	r3, #4
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7fd ffe3 	bl	800c9fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea50:	4b0f      	ldr	r3, [pc, #60]	; (800ea90 <xTaskPriorityDisinherit+0xe0>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d903      	bls.n	800ea60 <xTaskPriorityDisinherit+0xb0>
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea5c:	4a0c      	ldr	r2, [pc, #48]	; (800ea90 <xTaskPriorityDisinherit+0xe0>)
 800ea5e:	6013      	str	r3, [r2, #0]
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea64:	4613      	mov	r3, r2
 800ea66:	009b      	lsls	r3, r3, #2
 800ea68:	4413      	add	r3, r2
 800ea6a:	009b      	lsls	r3, r3, #2
 800ea6c:	4a09      	ldr	r2, [pc, #36]	; (800ea94 <xTaskPriorityDisinherit+0xe4>)
 800ea6e:	441a      	add	r2, r3
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	3304      	adds	r3, #4
 800ea74:	4619      	mov	r1, r3
 800ea76:	4610      	mov	r0, r2
 800ea78:	f7fd ff63 	bl	800c942 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ea80:	697b      	ldr	r3, [r7, #20]
	}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3718      	adds	r7, #24
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	200050dc 	.word	0x200050dc
 800ea90:	200055bc 	.word	0x200055bc
 800ea94:	200050e0 	.word	0x200050e0

0800ea98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eaa2:	4b24      	ldr	r3, [pc, #144]	; (800eb34 <prvAddCurrentTaskToDelayedList+0x9c>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800eaa8:	4b23      	ldr	r3, [pc, #140]	; (800eb38 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	2200      	movs	r2, #0
 800eaae:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eab2:	4b21      	ldr	r3, [pc, #132]	; (800eb38 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	3304      	adds	r3, #4
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7fd ff9f 	bl	800c9fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eac4:	d10a      	bne.n	800eadc <prvAddCurrentTaskToDelayedList+0x44>
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d007      	beq.n	800eadc <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eacc:	4b1a      	ldr	r3, [pc, #104]	; (800eb38 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	3304      	adds	r3, #4
 800ead2:	4619      	mov	r1, r3
 800ead4:	4819      	ldr	r0, [pc, #100]	; (800eb3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ead6:	f7fd ff34 	bl	800c942 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eada:	e026      	b.n	800eb2a <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	4413      	add	r3, r2
 800eae2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eae4:	4b14      	ldr	r3, [pc, #80]	; (800eb38 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	68ba      	ldr	r2, [r7, #8]
 800eaea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eaec:	68ba      	ldr	r2, [r7, #8]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d209      	bcs.n	800eb08 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eaf4:	4b12      	ldr	r3, [pc, #72]	; (800eb40 <prvAddCurrentTaskToDelayedList+0xa8>)
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	4b0f      	ldr	r3, [pc, #60]	; (800eb38 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	3304      	adds	r3, #4
 800eafe:	4619      	mov	r1, r3
 800eb00:	4610      	mov	r0, r2
 800eb02:	f7fd ff42 	bl	800c98a <vListInsert>
}
 800eb06:	e010      	b.n	800eb2a <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb08:	4b0e      	ldr	r3, [pc, #56]	; (800eb44 <prvAddCurrentTaskToDelayedList+0xac>)
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	4b0a      	ldr	r3, [pc, #40]	; (800eb38 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	3304      	adds	r3, #4
 800eb12:	4619      	mov	r1, r3
 800eb14:	4610      	mov	r0, r2
 800eb16:	f7fd ff38 	bl	800c98a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eb1a:	4b0b      	ldr	r3, [pc, #44]	; (800eb48 <prvAddCurrentTaskToDelayedList+0xb0>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	68ba      	ldr	r2, [r7, #8]
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d202      	bcs.n	800eb2a <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800eb24:	4a08      	ldr	r2, [pc, #32]	; (800eb48 <prvAddCurrentTaskToDelayedList+0xb0>)
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	6013      	str	r3, [r2, #0]
}
 800eb2a:	bf00      	nop
 800eb2c:	3710      	adds	r7, #16
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	200055b8 	.word	0x200055b8
 800eb38:	200050dc 	.word	0x200050dc
 800eb3c:	2000559c 	.word	0x2000559c
 800eb40:	2000556c 	.word	0x2000556c
 800eb44:	20005568 	.word	0x20005568
 800eb48:	200055d4 	.word	0x200055d4

0800eb4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b08a      	sub	sp, #40	; 0x28
 800eb50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eb52:	2300      	movs	r3, #0
 800eb54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800eb56:	f000 fba3 	bl	800f2a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800eb5a:	4b1c      	ldr	r3, [pc, #112]	; (800ebcc <xTimerCreateTimerTask+0x80>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d021      	beq.n	800eba6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800eb62:	2300      	movs	r3, #0
 800eb64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eb66:	2300      	movs	r3, #0
 800eb68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eb6a:	1d3a      	adds	r2, r7, #4
 800eb6c:	f107 0108 	add.w	r1, r7, #8
 800eb70:	f107 030c 	add.w	r3, r7, #12
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7fd fde9 	bl	800c74c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eb7a:	6879      	ldr	r1, [r7, #4]
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	68fa      	ldr	r2, [r7, #12]
 800eb80:	9202      	str	r2, [sp, #8]
 800eb82:	9301      	str	r3, [sp, #4]
 800eb84:	2302      	movs	r3, #2
 800eb86:	9300      	str	r3, [sp, #0]
 800eb88:	2300      	movs	r3, #0
 800eb8a:	460a      	mov	r2, r1
 800eb8c:	4910      	ldr	r1, [pc, #64]	; (800ebd0 <xTimerCreateTimerTask+0x84>)
 800eb8e:	4811      	ldr	r0, [pc, #68]	; (800ebd4 <xTimerCreateTimerTask+0x88>)
 800eb90:	f7fe ff7a 	bl	800da88 <xTaskCreateStatic>
 800eb94:	4603      	mov	r3, r0
 800eb96:	4a10      	ldr	r2, [pc, #64]	; (800ebd8 <xTimerCreateTimerTask+0x8c>)
 800eb98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800eb9a:	4b0f      	ldr	r3, [pc, #60]	; (800ebd8 <xTimerCreateTimerTask+0x8c>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d001      	beq.n	800eba6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800eba2:	2301      	movs	r3, #1
 800eba4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d10a      	bne.n	800ebc2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ebac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb0:	f383 8811 	msr	BASEPRI, r3
 800ebb4:	f3bf 8f6f 	isb	sy
 800ebb8:	f3bf 8f4f 	dsb	sy
 800ebbc:	613b      	str	r3, [r7, #16]
}
 800ebbe:	bf00      	nop
 800ebc0:	e7fe      	b.n	800ebc0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ebc2:	697b      	ldr	r3, [r7, #20]
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3718      	adds	r7, #24
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}
 800ebcc:	20005618 	.word	0x20005618
 800ebd0:	0801108c 	.word	0x0801108c
 800ebd4:	0800ee45 	.word	0x0800ee45
 800ebd8:	2000561c 	.word	0x2000561c

0800ebdc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b088      	sub	sp, #32
 800ebe0:	af02      	add	r7, sp, #8
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	60b9      	str	r1, [r7, #8]
 800ebe6:	607a      	str	r2, [r7, #4]
 800ebe8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ebea:	202c      	movs	r0, #44	; 0x2c
 800ebec:	f7fd fe1a 	bl	800c824 <pvPortMalloc>
 800ebf0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d00d      	beq.n	800ec14 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	9301      	str	r3, [sp, #4]
 800ec04:	6a3b      	ldr	r3, [r7, #32]
 800ec06:	9300      	str	r3, [sp, #0]
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	687a      	ldr	r2, [r7, #4]
 800ec0c:	68b9      	ldr	r1, [r7, #8]
 800ec0e:	68f8      	ldr	r0, [r7, #12]
 800ec10:	f000 f843 	bl	800ec9a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ec14:	697b      	ldr	r3, [r7, #20]
	}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3718      	adds	r7, #24
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b08a      	sub	sp, #40	; 0x28
 800ec22:	af02      	add	r7, sp, #8
 800ec24:	60f8      	str	r0, [r7, #12]
 800ec26:	60b9      	str	r1, [r7, #8]
 800ec28:	607a      	str	r2, [r7, #4]
 800ec2a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800ec2c:	232c      	movs	r3, #44	; 0x2c
 800ec2e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	2b2c      	cmp	r3, #44	; 0x2c
 800ec34:	d00a      	beq.n	800ec4c <xTimerCreateStatic+0x2e>
	__asm volatile
 800ec36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3a:	f383 8811 	msr	BASEPRI, r3
 800ec3e:	f3bf 8f6f 	isb	sy
 800ec42:	f3bf 8f4f 	dsb	sy
 800ec46:	61bb      	str	r3, [r7, #24]
}
 800ec48:	bf00      	nop
 800ec4a:	e7fe      	b.n	800ec4a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ec4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800ec4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d10a      	bne.n	800ec6a <xTimerCreateStatic+0x4c>
	__asm volatile
 800ec54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec58:	f383 8811 	msr	BASEPRI, r3
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	f3bf 8f4f 	dsb	sy
 800ec64:	617b      	str	r3, [r7, #20]
}
 800ec66:	bf00      	nop
 800ec68:	e7fe      	b.n	800ec68 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800ec6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800ec6e:	69fb      	ldr	r3, [r7, #28]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d00d      	beq.n	800ec90 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800ec74:	69fb      	ldr	r3, [r7, #28]
 800ec76:	2202      	movs	r2, #2
 800ec78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	9301      	str	r3, [sp, #4]
 800ec80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec82:	9300      	str	r3, [sp, #0]
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	687a      	ldr	r2, [r7, #4]
 800ec88:	68b9      	ldr	r1, [r7, #8]
 800ec8a:	68f8      	ldr	r0, [r7, #12]
 800ec8c:	f000 f805 	bl	800ec9a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ec90:	69fb      	ldr	r3, [r7, #28]
	}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3720      	adds	r7, #32
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}

0800ec9a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ec9a:	b580      	push	{r7, lr}
 800ec9c:	b086      	sub	sp, #24
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	60f8      	str	r0, [r7, #12]
 800eca2:	60b9      	str	r1, [r7, #8]
 800eca4:	607a      	str	r2, [r7, #4]
 800eca6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d10a      	bne.n	800ecc4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800ecae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb2:	f383 8811 	msr	BASEPRI, r3
 800ecb6:	f3bf 8f6f 	isb	sy
 800ecba:	f3bf 8f4f 	dsb	sy
 800ecbe:	617b      	str	r3, [r7, #20]
}
 800ecc0:	bf00      	nop
 800ecc2:	e7fe      	b.n	800ecc2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ecc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d01e      	beq.n	800ed08 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ecca:	f000 fae9 	bl	800f2a0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ecce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd0:	68fa      	ldr	r2, [r7, #12]
 800ecd2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ecd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd6:	68ba      	ldr	r2, [r7, #8]
 800ecd8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ecda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecdc:	683a      	ldr	r2, [r7, #0]
 800ecde:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ece0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece2:	6a3a      	ldr	r2, [r7, #32]
 800ece4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ece6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece8:	3304      	adds	r3, #4
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fd fe1c 	bl	800c928 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d008      	beq.n	800ed08 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ecf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecfc:	f043 0304 	orr.w	r3, r3, #4
 800ed00:	b2da      	uxtb	r2, r3
 800ed02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ed08:	bf00      	nop
 800ed0a:	3718      	adds	r7, #24
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b08a      	sub	sp, #40	; 0x28
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	607a      	str	r2, [r7, #4]
 800ed1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d10a      	bne.n	800ed3e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ed28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed2c:	f383 8811 	msr	BASEPRI, r3
 800ed30:	f3bf 8f6f 	isb	sy
 800ed34:	f3bf 8f4f 	dsb	sy
 800ed38:	623b      	str	r3, [r7, #32]
}
 800ed3a:	bf00      	nop
 800ed3c:	e7fe      	b.n	800ed3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ed3e:	4b1a      	ldr	r3, [pc, #104]	; (800eda8 <xTimerGenericCommand+0x98>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d02a      	beq.n	800ed9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	2b05      	cmp	r3, #5
 800ed56:	dc18      	bgt.n	800ed8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ed58:	f7ff fe0c 	bl	800e974 <xTaskGetSchedulerState>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b02      	cmp	r3, #2
 800ed60:	d109      	bne.n	800ed76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ed62:	4b11      	ldr	r3, [pc, #68]	; (800eda8 <xTimerGenericCommand+0x98>)
 800ed64:	6818      	ldr	r0, [r3, #0]
 800ed66:	f107 0110 	add.w	r1, r7, #16
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed6e:	f7fe faa3 	bl	800d2b8 <xQueueGenericSend>
 800ed72:	6278      	str	r0, [r7, #36]	; 0x24
 800ed74:	e012      	b.n	800ed9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ed76:	4b0c      	ldr	r3, [pc, #48]	; (800eda8 <xTimerGenericCommand+0x98>)
 800ed78:	6818      	ldr	r0, [r3, #0]
 800ed7a:	f107 0110 	add.w	r1, r7, #16
 800ed7e:	2300      	movs	r3, #0
 800ed80:	2200      	movs	r2, #0
 800ed82:	f7fe fa99 	bl	800d2b8 <xQueueGenericSend>
 800ed86:	6278      	str	r0, [r7, #36]	; 0x24
 800ed88:	e008      	b.n	800ed9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ed8a:	4b07      	ldr	r3, [pc, #28]	; (800eda8 <xTimerGenericCommand+0x98>)
 800ed8c:	6818      	ldr	r0, [r3, #0]
 800ed8e:	f107 0110 	add.w	r1, r7, #16
 800ed92:	2300      	movs	r3, #0
 800ed94:	683a      	ldr	r2, [r7, #0]
 800ed96:	f7fe fb8d 	bl	800d4b4 <xQueueGenericSendFromISR>
 800ed9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ed9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3728      	adds	r7, #40	; 0x28
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	20005618 	.word	0x20005618

0800edac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b088      	sub	sp, #32
 800edb0:	af02      	add	r7, sp, #8
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edb6:	4b22      	ldr	r3, [pc, #136]	; (800ee40 <prvProcessExpiredTimer+0x94>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	3304      	adds	r3, #4
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7fd fe19 	bl	800c9fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edd0:	f003 0304 	and.w	r3, r3, #4
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d022      	beq.n	800ee1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	699a      	ldr	r2, [r3, #24]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	18d1      	adds	r1, r2, r3
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	683a      	ldr	r2, [r7, #0]
 800ede4:	6978      	ldr	r0, [r7, #20]
 800ede6:	f000 f8d3 	bl	800ef90 <prvInsertTimerInActiveList>
 800edea:	4603      	mov	r3, r0
 800edec:	2b00      	cmp	r3, #0
 800edee:	d01f      	beq.n	800ee30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800edf0:	2300      	movs	r3, #0
 800edf2:	9300      	str	r3, [sp, #0]
 800edf4:	2300      	movs	r3, #0
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	2100      	movs	r1, #0
 800edfa:	6978      	ldr	r0, [r7, #20]
 800edfc:	f7ff ff88 	bl	800ed10 <xTimerGenericCommand>
 800ee00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d113      	bne.n	800ee30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ee08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee0c:	f383 8811 	msr	BASEPRI, r3
 800ee10:	f3bf 8f6f 	isb	sy
 800ee14:	f3bf 8f4f 	dsb	sy
 800ee18:	60fb      	str	r3, [r7, #12]
}
 800ee1a:	bf00      	nop
 800ee1c:	e7fe      	b.n	800ee1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee24:	f023 0301 	bic.w	r3, r3, #1
 800ee28:	b2da      	uxtb	r2, r3
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	6a1b      	ldr	r3, [r3, #32]
 800ee34:	6978      	ldr	r0, [r7, #20]
 800ee36:	4798      	blx	r3
}
 800ee38:	bf00      	nop
 800ee3a:	3718      	adds	r7, #24
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	20005610 	.word	0x20005610

0800ee44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 800ee4c:	f7f2 fd47 	bl	80018de <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee50:	f107 0308 	add.w	r3, r7, #8
 800ee54:	4618      	mov	r0, r3
 800ee56:	f000 f857 	bl	800ef08 <prvGetNextExpireTime>
 800ee5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	4619      	mov	r1, r3
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	f000 f803 	bl	800ee6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ee66:	f000 f8d5 	bl	800f014 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee6a:	e7f1      	b.n	800ee50 <prvTimerTask+0xc>

0800ee6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b084      	sub	sp, #16
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ee76:	f7ff f87f 	bl	800df78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee7a:	f107 0308 	add.w	r3, r7, #8
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f000 f866 	bl	800ef50 <prvSampleTimeNow>
 800ee84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d130      	bne.n	800eeee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d10a      	bne.n	800eea8 <prvProcessTimerOrBlockTask+0x3c>
 800ee92:	687a      	ldr	r2, [r7, #4]
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d806      	bhi.n	800eea8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ee9a:	f7ff f8b3 	bl	800e004 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ee9e:	68f9      	ldr	r1, [r7, #12]
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f7ff ff83 	bl	800edac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eea6:	e024      	b.n	800eef2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d008      	beq.n	800eec0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eeae:	4b13      	ldr	r3, [pc, #76]	; (800eefc <prvProcessTimerOrBlockTask+0x90>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d101      	bne.n	800eebc <prvProcessTimerOrBlockTask+0x50>
 800eeb8:	2301      	movs	r3, #1
 800eeba:	e000      	b.n	800eebe <prvProcessTimerOrBlockTask+0x52>
 800eebc:	2300      	movs	r3, #0
 800eebe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eec0:	4b0f      	ldr	r3, [pc, #60]	; (800ef00 <prvProcessTimerOrBlockTask+0x94>)
 800eec2:	6818      	ldr	r0, [r3, #0]
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	1ad3      	subs	r3, r2, r3
 800eeca:	683a      	ldr	r2, [r7, #0]
 800eecc:	4619      	mov	r1, r3
 800eece:	f7fe fda7 	bl	800da20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eed2:	f7ff f897 	bl	800e004 <xTaskResumeAll>
 800eed6:	4603      	mov	r3, r0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d10a      	bne.n	800eef2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eedc:	4b09      	ldr	r3, [pc, #36]	; (800ef04 <prvProcessTimerOrBlockTask+0x98>)
 800eede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eee2:	601a      	str	r2, [r3, #0]
 800eee4:	f3bf 8f4f 	dsb	sy
 800eee8:	f3bf 8f6f 	isb	sy
}
 800eeec:	e001      	b.n	800eef2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eeee:	f7ff f889 	bl	800e004 <xTaskResumeAll>
}
 800eef2:	bf00      	nop
 800eef4:	3710      	adds	r7, #16
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	20005614 	.word	0x20005614
 800ef00:	20005618 	.word	0x20005618
 800ef04:	e000ed04 	.word	0xe000ed04

0800ef08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b085      	sub	sp, #20
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ef10:	4b0e      	ldr	r3, [pc, #56]	; (800ef4c <prvGetNextExpireTime+0x44>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d101      	bne.n	800ef1e <prvGetNextExpireTime+0x16>
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	e000      	b.n	800ef20 <prvGetNextExpireTime+0x18>
 800ef1e:	2200      	movs	r2, #0
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d105      	bne.n	800ef38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef2c:	4b07      	ldr	r3, [pc, #28]	; (800ef4c <prvGetNextExpireTime+0x44>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	68db      	ldr	r3, [r3, #12]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	60fb      	str	r3, [r7, #12]
 800ef36:	e001      	b.n	800ef3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3714      	adds	r7, #20
 800ef42:	46bd      	mov	sp, r7
 800ef44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef48:	4770      	bx	lr
 800ef4a:	bf00      	nop
 800ef4c:	20005610 	.word	0x20005610

0800ef50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ef58:	f7ff f8f2 	bl	800e140 <xTaskGetTickCount>
 800ef5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ef5e:	4b0b      	ldr	r3, [pc, #44]	; (800ef8c <prvSampleTimeNow+0x3c>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	68fa      	ldr	r2, [r7, #12]
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d205      	bcs.n	800ef74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ef68:	f000 f936 	bl	800f1d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2201      	movs	r2, #1
 800ef70:	601a      	str	r2, [r3, #0]
 800ef72:	e002      	b.n	800ef7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ef7a:	4a04      	ldr	r2, [pc, #16]	; (800ef8c <prvSampleTimeNow+0x3c>)
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ef80:	68fb      	ldr	r3, [r7, #12]
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	20005620 	.word	0x20005620

0800ef90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b086      	sub	sp, #24
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	60b9      	str	r1, [r7, #8]
 800ef9a:	607a      	str	r2, [r7, #4]
 800ef9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	68ba      	ldr	r2, [r7, #8]
 800efa6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	68fa      	ldr	r2, [r7, #12]
 800efac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800efae:	68ba      	ldr	r2, [r7, #8]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d812      	bhi.n	800efdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efb6:	687a      	ldr	r2, [r7, #4]
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	1ad2      	subs	r2, r2, r3
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	699b      	ldr	r3, [r3, #24]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d302      	bcc.n	800efca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800efc4:	2301      	movs	r3, #1
 800efc6:	617b      	str	r3, [r7, #20]
 800efc8:	e01b      	b.n	800f002 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800efca:	4b10      	ldr	r3, [pc, #64]	; (800f00c <prvInsertTimerInActiveList+0x7c>)
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	3304      	adds	r3, #4
 800efd2:	4619      	mov	r1, r3
 800efd4:	4610      	mov	r0, r2
 800efd6:	f7fd fcd8 	bl	800c98a <vListInsert>
 800efda:	e012      	b.n	800f002 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d206      	bcs.n	800eff2 <prvInsertTimerInActiveList+0x62>
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	429a      	cmp	r2, r3
 800efea:	d302      	bcc.n	800eff2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800efec:	2301      	movs	r3, #1
 800efee:	617b      	str	r3, [r7, #20]
 800eff0:	e007      	b.n	800f002 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eff2:	4b07      	ldr	r3, [pc, #28]	; (800f010 <prvInsertTimerInActiveList+0x80>)
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	3304      	adds	r3, #4
 800effa:	4619      	mov	r1, r3
 800effc:	4610      	mov	r0, r2
 800effe:	f7fd fcc4 	bl	800c98a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f002:	697b      	ldr	r3, [r7, #20]
}
 800f004:	4618      	mov	r0, r3
 800f006:	3718      	adds	r7, #24
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}
 800f00c:	20005614 	.word	0x20005614
 800f010:	20005610 	.word	0x20005610

0800f014 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b08e      	sub	sp, #56	; 0x38
 800f018:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f01a:	e0ca      	b.n	800f1b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	da18      	bge.n	800f054 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f022:	1d3b      	adds	r3, r7, #4
 800f024:	3304      	adds	r3, #4
 800f026:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d10a      	bne.n	800f044 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f032:	f383 8811 	msr	BASEPRI, r3
 800f036:	f3bf 8f6f 	isb	sy
 800f03a:	f3bf 8f4f 	dsb	sy
 800f03e:	61fb      	str	r3, [r7, #28]
}
 800f040:	bf00      	nop
 800f042:	e7fe      	b.n	800f042 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f04a:	6850      	ldr	r0, [r2, #4]
 800f04c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f04e:	6892      	ldr	r2, [r2, #8]
 800f050:	4611      	mov	r1, r2
 800f052:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2b00      	cmp	r3, #0
 800f058:	f2c0 80aa 	blt.w	800f1b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f062:	695b      	ldr	r3, [r3, #20]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d004      	beq.n	800f072 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f06a:	3304      	adds	r3, #4
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7fd fcc5 	bl	800c9fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f072:	463b      	mov	r3, r7
 800f074:	4618      	mov	r0, r3
 800f076:	f7ff ff6b 	bl	800ef50 <prvSampleTimeNow>
 800f07a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2b09      	cmp	r3, #9
 800f080:	f200 8097 	bhi.w	800f1b2 <prvProcessReceivedCommands+0x19e>
 800f084:	a201      	add	r2, pc, #4	; (adr r2, 800f08c <prvProcessReceivedCommands+0x78>)
 800f086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f08a:	bf00      	nop
 800f08c:	0800f0b5 	.word	0x0800f0b5
 800f090:	0800f0b5 	.word	0x0800f0b5
 800f094:	0800f0b5 	.word	0x0800f0b5
 800f098:	0800f129 	.word	0x0800f129
 800f09c:	0800f13d 	.word	0x0800f13d
 800f0a0:	0800f187 	.word	0x0800f187
 800f0a4:	0800f0b5 	.word	0x0800f0b5
 800f0a8:	0800f0b5 	.word	0x0800f0b5
 800f0ac:	0800f129 	.word	0x0800f129
 800f0b0:	0800f13d 	.word	0x0800f13d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0ba:	f043 0301 	orr.w	r3, r3, #1
 800f0be:	b2da      	uxtb	r2, r3
 800f0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f0c6:	68ba      	ldr	r2, [r7, #8]
 800f0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ca:	699b      	ldr	r3, [r3, #24]
 800f0cc:	18d1      	adds	r1, r2, r3
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0d4:	f7ff ff5c 	bl	800ef90 <prvInsertTimerInActiveList>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d069      	beq.n	800f1b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e0:	6a1b      	ldr	r3, [r3, #32]
 800f0e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0ec:	f003 0304 	and.w	r3, r3, #4
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d05e      	beq.n	800f1b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f0f4:	68ba      	ldr	r2, [r7, #8]
 800f0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f8:	699b      	ldr	r3, [r3, #24]
 800f0fa:	441a      	add	r2, r3
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	9300      	str	r3, [sp, #0]
 800f100:	2300      	movs	r3, #0
 800f102:	2100      	movs	r1, #0
 800f104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f106:	f7ff fe03 	bl	800ed10 <xTimerGenericCommand>
 800f10a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f10c:	6a3b      	ldr	r3, [r7, #32]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d14f      	bne.n	800f1b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f116:	f383 8811 	msr	BASEPRI, r3
 800f11a:	f3bf 8f6f 	isb	sy
 800f11e:	f3bf 8f4f 	dsb	sy
 800f122:	61bb      	str	r3, [r7, #24]
}
 800f124:	bf00      	nop
 800f126:	e7fe      	b.n	800f126 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f12e:	f023 0301 	bic.w	r3, r3, #1
 800f132:	b2da      	uxtb	r2, r3
 800f134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f136:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f13a:	e03a      	b.n	800f1b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f142:	f043 0301 	orr.w	r3, r3, #1
 800f146:	b2da      	uxtb	r2, r3
 800f148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f14a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f14e:	68ba      	ldr	r2, [r7, #8]
 800f150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f152:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f156:	699b      	ldr	r3, [r3, #24]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d10a      	bne.n	800f172 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f160:	f383 8811 	msr	BASEPRI, r3
 800f164:	f3bf 8f6f 	isb	sy
 800f168:	f3bf 8f4f 	dsb	sy
 800f16c:	617b      	str	r3, [r7, #20]
}
 800f16e:	bf00      	nop
 800f170:	e7fe      	b.n	800f170 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f174:	699a      	ldr	r2, [r3, #24]
 800f176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f178:	18d1      	adds	r1, r2, r3
 800f17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f17e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f180:	f7ff ff06 	bl	800ef90 <prvInsertTimerInActiveList>
					break;
 800f184:	e015      	b.n	800f1b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f18c:	f003 0302 	and.w	r3, r3, #2
 800f190:	2b00      	cmp	r3, #0
 800f192:	d103      	bne.n	800f19c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f196:	f7fd fb8f 	bl	800c8b8 <vPortFree>
 800f19a:	e00a      	b.n	800f1b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1a2:	f023 0301 	bic.w	r3, r3, #1
 800f1a6:	b2da      	uxtb	r2, r3
 800f1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f1ae:	e000      	b.n	800f1b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f1b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f1b2:	4b08      	ldr	r3, [pc, #32]	; (800f1d4 <prvProcessReceivedCommands+0x1c0>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	1d39      	adds	r1, r7, #4
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7fe fa16 	bl	800d5ec <xQueueReceive>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	f47f af2a 	bne.w	800f01c <prvProcessReceivedCommands+0x8>
	}
}
 800f1c8:	bf00      	nop
 800f1ca:	bf00      	nop
 800f1cc:	3730      	adds	r7, #48	; 0x30
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	bf00      	nop
 800f1d4:	20005618 	.word	0x20005618

0800f1d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b088      	sub	sp, #32
 800f1dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f1de:	e048      	b.n	800f272 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1e0:	4b2d      	ldr	r3, [pc, #180]	; (800f298 <prvSwitchTimerLists+0xc0>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	68db      	ldr	r3, [r3, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1ea:	4b2b      	ldr	r3, [pc, #172]	; (800f298 <prvSwitchTimerLists+0xc0>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	68db      	ldr	r3, [r3, #12]
 800f1f0:	68db      	ldr	r3, [r3, #12]
 800f1f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	3304      	adds	r3, #4
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7fd fbff 	bl	800c9fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	6a1b      	ldr	r3, [r3, #32]
 800f202:	68f8      	ldr	r0, [r7, #12]
 800f204:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f20c:	f003 0304 	and.w	r3, r3, #4
 800f210:	2b00      	cmp	r3, #0
 800f212:	d02e      	beq.n	800f272 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	699b      	ldr	r3, [r3, #24]
 800f218:	693a      	ldr	r2, [r7, #16]
 800f21a:	4413      	add	r3, r2
 800f21c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f21e:	68ba      	ldr	r2, [r7, #8]
 800f220:	693b      	ldr	r3, [r7, #16]
 800f222:	429a      	cmp	r2, r3
 800f224:	d90e      	bls.n	800f244 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	68ba      	ldr	r2, [r7, #8]
 800f22a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	68fa      	ldr	r2, [r7, #12]
 800f230:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f232:	4b19      	ldr	r3, [pc, #100]	; (800f298 <prvSwitchTimerLists+0xc0>)
 800f234:	681a      	ldr	r2, [r3, #0]
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	3304      	adds	r3, #4
 800f23a:	4619      	mov	r1, r3
 800f23c:	4610      	mov	r0, r2
 800f23e:	f7fd fba4 	bl	800c98a <vListInsert>
 800f242:	e016      	b.n	800f272 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f244:	2300      	movs	r3, #0
 800f246:	9300      	str	r3, [sp, #0]
 800f248:	2300      	movs	r3, #0
 800f24a:	693a      	ldr	r2, [r7, #16]
 800f24c:	2100      	movs	r1, #0
 800f24e:	68f8      	ldr	r0, [r7, #12]
 800f250:	f7ff fd5e 	bl	800ed10 <xTimerGenericCommand>
 800f254:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d10a      	bne.n	800f272 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f260:	f383 8811 	msr	BASEPRI, r3
 800f264:	f3bf 8f6f 	isb	sy
 800f268:	f3bf 8f4f 	dsb	sy
 800f26c:	603b      	str	r3, [r7, #0]
}
 800f26e:	bf00      	nop
 800f270:	e7fe      	b.n	800f270 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f272:	4b09      	ldr	r3, [pc, #36]	; (800f298 <prvSwitchTimerLists+0xc0>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d1b1      	bne.n	800f1e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f27c:	4b06      	ldr	r3, [pc, #24]	; (800f298 <prvSwitchTimerLists+0xc0>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f282:	4b06      	ldr	r3, [pc, #24]	; (800f29c <prvSwitchTimerLists+0xc4>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	4a04      	ldr	r2, [pc, #16]	; (800f298 <prvSwitchTimerLists+0xc0>)
 800f288:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f28a:	4a04      	ldr	r2, [pc, #16]	; (800f29c <prvSwitchTimerLists+0xc4>)
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	6013      	str	r3, [r2, #0]
}
 800f290:	bf00      	nop
 800f292:	3718      	adds	r7, #24
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}
 800f298:	20005610 	.word	0x20005610
 800f29c:	20005614 	.word	0x20005614

0800f2a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f2a6:	f7fd fcfd 	bl	800cca4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f2aa:	4b15      	ldr	r3, [pc, #84]	; (800f300 <prvCheckForValidListAndQueue+0x60>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d120      	bne.n	800f2f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f2b2:	4814      	ldr	r0, [pc, #80]	; (800f304 <prvCheckForValidListAndQueue+0x64>)
 800f2b4:	f7fd fb18 	bl	800c8e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f2b8:	4813      	ldr	r0, [pc, #76]	; (800f308 <prvCheckForValidListAndQueue+0x68>)
 800f2ba:	f7fd fb15 	bl	800c8e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f2be:	4b13      	ldr	r3, [pc, #76]	; (800f30c <prvCheckForValidListAndQueue+0x6c>)
 800f2c0:	4a10      	ldr	r2, [pc, #64]	; (800f304 <prvCheckForValidListAndQueue+0x64>)
 800f2c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f2c4:	4b12      	ldr	r3, [pc, #72]	; (800f310 <prvCheckForValidListAndQueue+0x70>)
 800f2c6:	4a10      	ldr	r2, [pc, #64]	; (800f308 <prvCheckForValidListAndQueue+0x68>)
 800f2c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	9300      	str	r3, [sp, #0]
 800f2ce:	4b11      	ldr	r3, [pc, #68]	; (800f314 <prvCheckForValidListAndQueue+0x74>)
 800f2d0:	4a11      	ldr	r2, [pc, #68]	; (800f318 <prvCheckForValidListAndQueue+0x78>)
 800f2d2:	2110      	movs	r1, #16
 800f2d4:	200a      	movs	r0, #10
 800f2d6:	f7fd ff53 	bl	800d180 <xQueueGenericCreateStatic>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	4a08      	ldr	r2, [pc, #32]	; (800f300 <prvCheckForValidListAndQueue+0x60>)
 800f2de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f2e0:	4b07      	ldr	r3, [pc, #28]	; (800f300 <prvCheckForValidListAndQueue+0x60>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d005      	beq.n	800f2f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f2e8:	4b05      	ldr	r3, [pc, #20]	; (800f300 <prvCheckForValidListAndQueue+0x60>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	490b      	ldr	r1, [pc, #44]	; (800f31c <prvCheckForValidListAndQueue+0x7c>)
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7fe fb6c 	bl	800d9cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f2f4:	f7fd fd06 	bl	800cd04 <vPortExitCritical>
}
 800f2f8:	bf00      	nop
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	20005618 	.word	0x20005618
 800f304:	200055e8 	.word	0x200055e8
 800f308:	200055fc 	.word	0x200055fc
 800f30c:	20005610 	.word	0x20005610
 800f310:	20005614 	.word	0x20005614
 800f314:	200056c4 	.word	0x200056c4
 800f318:	20005624 	.word	0x20005624
 800f31c:	08011094 	.word	0x08011094

0800f320 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b086      	sub	sp, #24
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d10a      	bne.n	800f348 <xTimerIsTimerActive+0x28>
	__asm volatile
 800f332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f336:	f383 8811 	msr	BASEPRI, r3
 800f33a:	f3bf 8f6f 	isb	sy
 800f33e:	f3bf 8f4f 	dsb	sy
 800f342:	60fb      	str	r3, [r7, #12]
}
 800f344:	bf00      	nop
 800f346:	e7fe      	b.n	800f346 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800f348:	f7fd fcac 	bl	800cca4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f352:	f003 0301 	and.w	r3, r3, #1
 800f356:	2b00      	cmp	r3, #0
 800f358:	d102      	bne.n	800f360 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800f35a:	2300      	movs	r3, #0
 800f35c:	617b      	str	r3, [r7, #20]
 800f35e:	e001      	b.n	800f364 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800f360:	2301      	movs	r3, #1
 800f362:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800f364:	f7fd fcce 	bl	800cd04 <vPortExitCritical>

	return xReturn;
 800f368:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800f36a:	4618      	mov	r0, r3
 800f36c:	3718      	adds	r7, #24
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}

0800f372 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f372:	b580      	push	{r7, lr}
 800f374:	b086      	sub	sp, #24
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d10a      	bne.n	800f39a <pvTimerGetTimerID+0x28>
	__asm volatile
 800f384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f388:	f383 8811 	msr	BASEPRI, r3
 800f38c:	f3bf 8f6f 	isb	sy
 800f390:	f3bf 8f4f 	dsb	sy
 800f394:	60fb      	str	r3, [r7, #12]
}
 800f396:	bf00      	nop
 800f398:	e7fe      	b.n	800f398 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800f39a:	f7fd fc83 	bl	800cca4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	69db      	ldr	r3, [r3, #28]
 800f3a2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f3a4:	f7fd fcae 	bl	800cd04 <vPortExitCritical>

	return pvReturn;
 800f3a8:	693b      	ldr	r3, [r7, #16]
}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3718      	adds	r7, #24
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
	...

0800f3b4 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
void Rte_Runnable_ExtLights_MainFunction();
void Rte_Runnable_IntLights_MainFunction();
void Rte_Runnable_SecAlm_MainFunction();

StdReturnType Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	b083      	sub	sp, #12
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d101      	bne.n	800f3c6 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x12>
	{

		return RTE_E_NOT_OK;
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	e004      	b.n	800f3d0 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>
		/* do nothing */

	}


	Btc_ReceivedDataOnBluetooth = *data;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	781a      	ldrb	r2, [r3, #0]
 800f3ca:	4b04      	ldr	r3, [pc, #16]	; (800f3dc <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x28>)
 800f3cc:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f3ce:	2300      	movs	r3, #0

}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	370c      	adds	r7, #12
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr
 800f3dc:	2000009a 	.word	0x2000009a

0800f3e0 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>:

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(uint8* data)
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b083      	sub	sp, #12
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d101      	bne.n	800f3f2 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	e004      	b.n	800f3fc <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x1c>
		/* do nothing */

	}


	CenLoc_CurrentState = *data;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	781a      	ldrb	r2, [r3, #0]
 800f3f6:	4b04      	ldr	r3, [pc, #16]	; (800f408 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x28>)
 800f3f8:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f3fa:	2300      	movs	r3, #0

}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	370c      	adds	r7, #12
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr
 800f408:	200000aa 	.word	0x200000aa

0800f40c <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(uint8* data)
{
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d101      	bne.n	800f41e <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x12>
	{

		return RTE_E_NOT_OK;
 800f41a:	2301      	movs	r3, #1
 800f41c:	e004      	b.n	800f428 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x1c>
		/* do nothing */

	}


	CenLoc_FollowMeHomeState = *data;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	781a      	ldrb	r2, [r3, #0]
 800f422:	4b04      	ldr	r3, [pc, #16]	; (800f434 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x28>)
 800f424:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f426:	2300      	movs	r3, #0

}
 800f428:	4618      	mov	r0, r3
 800f42a:	370c      	adds	r7, #12
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr
 800f434:	200000ac 	.word	0x200000ac

0800f438 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(uint8* data)
{
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d101      	bne.n	800f44a <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f446:	2301      	movs	r3, #1
 800f448:	e004      	b.n	800f454 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag+0x1c>
		/* do nothing */

	}


	CenLoc_Tim2IRQFlag = *data;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	781a      	ldrb	r2, [r3, #0]
 800f44e:	4b04      	ldr	r3, [pc, #16]	; (800f460 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag+0x28>)
 800f450:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f452:	2300      	movs	r3, #0

}
 800f454:	4618      	mov	r0, r3
 800f456:	370c      	adds	r7, #12
 800f458:	46bd      	mov	sp, r7
 800f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45e:	4770      	bx	lr
 800f460:	200000ae 	.word	0x200000ae

0800f464 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag>:

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag(uint8* data)
{
 800f464:	b480      	push	{r7}
 800f466:	b083      	sub	sp, #12
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d101      	bne.n	800f476 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f472:	2301      	movs	r3, #1
 800f474:	e004      	b.n	800f480 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag+0x1c>
		/* do nothing */

	}


	CenLoc_Tim3IRQFlag = *data;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	781a      	ldrb	r2, [r3, #0]
 800f47a:	4b04      	ldr	r3, [pc, #16]	; (800f48c <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag+0x28>)
 800f47c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f47e:	2300      	movs	r3, #0

}
 800f480:	4618      	mov	r0, r3
 800f482:	370c      	adds	r7, #12
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr
 800f48c:	200000af 	.word	0x200000af

0800f490 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag>:

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag(uint8* data)
{
 800f490:	b480      	push	{r7}
 800f492:	b083      	sub	sp, #12
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d101      	bne.n	800f4a2 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f49e:	2301      	movs	r3, #1
 800f4a0:	e004      	b.n	800f4ac <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag+0x1c>
		/* do nothing */

	}


	CenLoc_Tim5IRQFlag = *data;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	781a      	ldrb	r2, [r3, #0]
 800f4a6:	4b04      	ldr	r3, [pc, #16]	; (800f4b8 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag+0x28>)
 800f4a8:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f4aa:	2300      	movs	r3, #0

}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	370c      	adds	r7, #12
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr
 800f4b8:	200000b0 	.word	0x200000b0

0800f4bc <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag>:

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag(uint8* data)
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b083      	sub	sp, #12
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d101      	bne.n	800f4ce <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	e004      	b.n	800f4d8 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag+0x1c>
		/* do nothing */

	}


	CenLoc_Tim11IRQFlag = *data;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	781a      	ldrb	r2, [r3, #0]
 800f4d2:	4b04      	ldr	r3, [pc, #16]	; (800f4e4 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag+0x28>)
 800f4d4:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f4d6:	2300      	movs	r3, #0

}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	370c      	adds	r7, #12
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	4770      	bx	lr
 800f4e4:	200000b1 	.word	0x200000b1

0800f4e8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(uint8* data)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b083      	sub	sp, #12
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d101      	bne.n	800f4fa <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	e004      	b.n	800f504 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_ReverseLight_CurrentState = *data;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	781a      	ldrb	r2, [r3, #0]
 800f4fe:	4b04      	ldr	r3, [pc, #16]	; (800f510 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x28>)
 800f500:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f502:	2300      	movs	r3, #0

}
 800f504:	4618      	mov	r0, r3
 800f506:	370c      	adds	r7, #12
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr
 800f510:	200000b3 	.word	0x200000b3

0800f514 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(uint8* data)
{
 800f514:	b480      	push	{r7}
 800f516:	b083      	sub	sp, #12
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d101      	bne.n	800f526 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f522:	2301      	movs	r3, #1
 800f524:	e004      	b.n	800f530 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_FlashHighBeam_CurrentState = *data;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	781a      	ldrb	r2, [r3, #0]
 800f52a:	4b04      	ldr	r3, [pc, #16]	; (800f53c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState+0x28>)
 800f52c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f52e:	2300      	movs	r3, #0

}
 800f530:	4618      	mov	r0, r3
 800f532:	370c      	adds	r7, #12
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr
 800f53c:	200000b5 	.word	0x200000b5

0800f540 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(uint8* data)
{
 800f540:	b480      	push	{r7}
 800f542:	b083      	sub	sp, #12
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d101      	bne.n	800f552 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f54e:	2301      	movs	r3, #1
 800f550:	e004      	b.n	800f55c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_BrakeLight_CurrentState = *data;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	781a      	ldrb	r2, [r3, #0]
 800f556:	4b04      	ldr	r3, [pc, #16]	; (800f568 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x28>)
 800f558:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f55a:	2300      	movs	r3, #0

}
 800f55c:	4618      	mov	r0, r3
 800f55e:	370c      	adds	r7, #12
 800f560:	46bd      	mov	sp, r7
 800f562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f566:	4770      	bx	lr
 800f568:	200000b4 	.word	0x200000b4

0800f56c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(uint8* data)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b083      	sub	sp, #12
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d101      	bne.n	800f57e <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f57a:	2301      	movs	r3, #1
 800f57c:	e004      	b.n	800f588 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_LightsSwitch_CurrentState = *data;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	781a      	ldrb	r2, [r3, #0]
 800f582:	4b04      	ldr	r3, [pc, #16]	; (800f594 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x28>)
 800f584:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f586:	2300      	movs	r3, #0

}
 800f588:	4618      	mov	r0, r3
 800f58a:	370c      	adds	r7, #12
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr
 800f594:	200000b6 	.word	0x200000b6

0800f598 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(uint8* data)
{
 800f598:	b480      	push	{r7}
 800f59a:	b083      	sub	sp, #12
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d101      	bne.n	800f5aa <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	e004      	b.n	800f5b4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_HighBeam_CurrentState = *data;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	781a      	ldrb	r2, [r3, #0]
 800f5ae:	4b04      	ldr	r3, [pc, #16]	; (800f5c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x28>)
 800f5b0:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f5b2:	2300      	movs	r3, #0

}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	370c      	adds	r7, #12
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr
 800f5c0:	200000b7 	.word	0x200000b7

0800f5c4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(uint8* data)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b083      	sub	sp, #12
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d101      	bne.n	800f5d6 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	e004      	b.n	800f5e0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_FrontFogLight_CurrentState = *data;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	781a      	ldrb	r2, [r3, #0]
 800f5da:	4b04      	ldr	r3, [pc, #16]	; (800f5ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x28>)
 800f5dc:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f5de:	2300      	movs	r3, #0

}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	370c      	adds	r7, #12
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr
 800f5ec:	200000b8 	.word	0x200000b8

0800f5f0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(uint8* data)
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b083      	sub	sp, #12
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d101      	bne.n	800f602 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f5fe:	2301      	movs	r3, #1
 800f600:	e004      	b.n	800f60c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_TurnSignalLeft_CurrentState = *data;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	781a      	ldrb	r2, [r3, #0]
 800f606:	4b04      	ldr	r3, [pc, #16]	; (800f618 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x28>)
 800f608:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f60a:	2300      	movs	r3, #0

}
 800f60c:	4618      	mov	r0, r3
 800f60e:	370c      	adds	r7, #12
 800f610:	46bd      	mov	sp, r7
 800f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f616:	4770      	bx	lr
 800f618:	200000b9 	.word	0x200000b9

0800f61c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(uint8* data)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b083      	sub	sp, #12
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d101      	bne.n	800f62e <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f62a:	2301      	movs	r3, #1
 800f62c:	e004      	b.n	800f638 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_TurnSignalRight_CurrentState = *data;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	781a      	ldrb	r2, [r3, #0]
 800f632:	4b04      	ldr	r3, [pc, #16]	; (800f644 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x28>)
 800f634:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f636:	2300      	movs	r3, #0

}
 800f638:	4618      	mov	r0, r3
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr
 800f644:	200000ba 	.word	0x200000ba

0800f648 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(uint8* data)
{
 800f648:	b480      	push	{r7}
 800f64a:	b083      	sub	sp, #12
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d101      	bne.n	800f65a <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f656:	2301      	movs	r3, #1
 800f658:	e004      	b.n	800f664 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_HazardLight_CurrentState = *data;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	781a      	ldrb	r2, [r3, #0]
 800f65e:	4b04      	ldr	r3, [pc, #16]	; (800f670 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x28>)
 800f660:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f662:	2300      	movs	r3, #0

}
 800f664:	4618      	mov	r0, r3
 800f666:	370c      	adds	r7, #12
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr
 800f670:	200000bb 	.word	0x200000bb

0800f674 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(uint8* data)
{
 800f674:	b480      	push	{r7}
 800f676:	b083      	sub	sp, #12
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d101      	bne.n	800f686 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f682:	2301      	movs	r3, #1
 800f684:	e004      	b.n	800f690 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_RearFogLight_CurrentState = *data;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	781a      	ldrb	r2, [r3, #0]
 800f68a:	4b04      	ldr	r3, [pc, #16]	; (800f69c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x28>)
 800f68c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f68e:	2300      	movs	r3, #0

}
 800f690:	4618      	mov	r0, r3
 800f692:	370c      	adds	r7, #12
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr
 800f69c:	200000bc 	.word	0x200000bc

0800f6a0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(uint32* data)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	b083      	sub	sp, #12
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d101      	bne.n	800f6b2 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	e004      	b.n	800f6bc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x1c>
		/* do nothing */

	}


	ExtLights_RTSFlag = *data;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	4a04      	ldr	r2, [pc, #16]	; (800f6c8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x28>)
 800f6b8:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800f6ba:	2300      	movs	r3, #0

}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	370c      	adds	r7, #12
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr
 800f6c8:	200000c0 	.word	0x200000c0

0800f6cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(uint32* data)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b083      	sub	sp, #12
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d101      	bne.n	800f6de <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f6da:	2301      	movs	r3, #1
 800f6dc:	e004      	b.n	800f6e8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x1c>
		/* do nothing */

	}


	ExtLights_LTSFlag = *data;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	4a04      	ldr	r2, [pc, #16]	; (800f6f4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x28>)
 800f6e4:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800f6e6:	2300      	movs	r3, #0

}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	370c      	adds	r7, #12
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr
 800f6f4:	200000c4 	.word	0x200000c4

0800f6f8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(uint32* data)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d101      	bne.n	800f70a <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f706:	2301      	movs	r3, #1
 800f708:	e004      	b.n	800f714 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x1c>
		/* do nothing */

	}


	ExtLights_HLFlag = *data;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	4a04      	ldr	r2, [pc, #16]	; (800f720 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x28>)
 800f710:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800f712:	2300      	movs	r3, #0

}
 800f714:	4618      	mov	r0, r3
 800f716:	370c      	adds	r7, #12
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr
 800f720:	200000c8 	.word	0x200000c8

0800f724 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>:

StdReturnType Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(uint8* data)
{
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d101      	bne.n	800f736 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f732:	2301      	movs	r3, #1
 800f734:	e004      	b.n	800f740 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x1c>
		/* do nothing */

	}


	IntLights_CurrentState = *data;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	781a      	ldrb	r2, [r3, #0]
 800f73a:	4b04      	ldr	r3, [pc, #16]	; (800f74c <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x28>)
 800f73c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f73e:	2300      	movs	r3, #0

}
 800f740:	4618      	mov	r0, r3
 800f742:	370c      	adds	r7, #12
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr
 800f74c:	200000d5 	.word	0x200000d5

0800f750 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(uint8* data)
{
 800f750:	b480      	push	{r7}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d101      	bne.n	800f762 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x12>
	{

		return RTE_E_NOT_OK;
 800f75e:	2301      	movs	r3, #1
 800f760:	e004      	b.n	800f76c <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x1c>
		/* do nothing */

	}


	SecAlm_TriggerIRQCounterForTimer4 = *data;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	781a      	ldrb	r2, [r3, #0]
 800f766:	4b04      	ldr	r3, [pc, #16]	; (800f778 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x28>)
 800f768:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f76a:	2300      	movs	r3, #0

}
 800f76c:	4618      	mov	r0, r3
 800f76e:	370c      	adds	r7, #12
 800f770:	46bd      	mov	sp, r7
 800f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f776:	4770      	bx	lr
 800f778:	200000d8 	.word	0x200000d8

0800f77c <Rte_Runnable_Btc_MainFunction>:
	return RTE_E_OK;

}

void Rte_Runnable_Btc_MainFunction()
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	af00      	add	r7, sp, #0

	Btc_MainFunction();
 800f780:	f7f1 f86e 	bl	8000860 <Btc_MainFunction>

}
 800f784:	bf00      	nop
 800f786:	bd80      	pop	{r7, pc}

0800f788 <Rte_Runnable_CenLoc_MainFunction>:

void Rte_Runnable_CenLoc_MainFunction()
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	af00      	add	r7, sp, #0

	CenLoc_MainFunction();
 800f78c:	f7f1 fa52 	bl	8000c34 <CenLoc_MainFunction>

}
 800f790:	bf00      	nop
 800f792:	bd80      	pop	{r7, pc}

0800f794 <Rte_Runnable_ExtLights_MainFunction>:

void Rte_Runnable_ExtLights_MainFunction()
{
 800f794:	b580      	push	{r7, lr}
 800f796:	af00      	add	r7, sp, #0

	ExtLights_MainFunction();
 800f798:	f7f1 fbea 	bl	8000f70 <ExtLights_MainFunction>

}
 800f79c:	bf00      	nop
 800f79e:	bd80      	pop	{r7, pc}

0800f7a0 <Rte_Runnable_IntLights_MainFunction>:

void Rte_Runnable_IntLights_MainFunction()
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	af00      	add	r7, sp, #0

	IntLights_MainFunction();
 800f7a4:	f7f1 fd8a 	bl	80012bc <IntLights_MainFunction>

}
 800f7a8:	bf00      	nop
 800f7aa:	bd80      	pop	{r7, pc}

0800f7ac <Rte_Runnable_SecAlm_MainFunction>:

void Rte_Runnable_SecAlm_MainFunction()
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	af00      	add	r7, sp, #0

	SecAlm_MainFunction();
 800f7b0:	f7f1 fec8 	bl	8001544 <SecAlm_MainFunction>

}
 800f7b4:	bf00      	nop
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:

StdReturnType Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	b083      	sub	sp, #12
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d101      	bne.n	800f7ca <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x12>
	{

		return RTE_E_NOT_OK;
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	e004      	b.n	800f7d4 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>
		/* do nothing */

	}


	*data = Btc_ReceivedDataOnBluetooth;
 800f7ca:	4b05      	ldr	r3, [pc, #20]	; (800f7e0 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x28>)
 800f7cc:	781a      	ldrb	r2, [r3, #0]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f7d2:	2300      	movs	r3, #0

}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	370c      	adds	r7, #12
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7de:	4770      	bx	lr
 800f7e0:	2000009a 	.word	0x2000009a

0800f7e4 <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>:
	return RTE_E_OK;

}

StdReturnType Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b084      	sub	sp, #16
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	60f8      	str	r0, [r7, #12]
 800f7ec:	60b9      	str	r1, [r7, #8]
 800f7ee:	4613      	mov	r3, r2
 800f7f0:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Receive_IT(huart, pData, Size);
 800f7f2:	88fb      	ldrh	r3, [r7, #6]
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	68b9      	ldr	r1, [r7, #8]
 800f7f8:	68f8      	ldr	r0, [r7, #12]
 800f7fa:	f7fb fc9f 	bl	800b13c <HAL_UART_Receive_IT>

	return RTE_E_OK;
 800f7fe:	2300      	movs	r3, #0

}
 800f800:	4618      	mov	r0, r3
 800f802:	3710      	adds	r7, #16
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}

0800f808 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>:

StdReturnType Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Init(htim);
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f7fa fb21 	bl	8009e58 <HAL_TIM_Base_Init>

	return RTE_E_OK;
 800f816:	2300      	movs	r3, #0

}
 800f818:	4618      	mov	r0, r3
 800f81a:	3708      	adds	r7, #8
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>:

StdReturnType Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start_IT(htim);
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f7fa fbe7 	bl	8009ffc <HAL_TIM_Base_Start_IT>

	return RTE_E_OK;
 800f82e:	2300      	movs	r3, #0

}
 800f830:	4618      	mov	r0, r3
 800f832:	3708      	adds	r7, #8
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>:

StdReturnType Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Stop_IT(htim);
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f7fa fc6d 	bl	800a120 <HAL_TIM_Base_Stop_IT>

	return RTE_E_OK;
 800f846:	2300      	movs	r3, #0

}
 800f848:	4618      	mov	r0, r3
 800f84a:	3708      	adds	r7, #8
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>:

StdReturnType Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	460b      	mov	r3, r1
 800f85a:	807b      	strh	r3, [r7, #2]
 800f85c:	4613      	mov	r3, r2
 800f85e:	707b      	strb	r3, [r7, #1]

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 800f860:	787a      	ldrb	r2, [r7, #1]
 800f862:	887b      	ldrh	r3, [r7, #2]
 800f864:	4619      	mov	r1, r3
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f7f6 fa72 	bl	8005d50 <HAL_GPIO_WritePin>

	return RTE_E_OK;
 800f86c:	2300      	movs	r3, #0

}
 800f86e:	4618      	mov	r0, r3
 800f870:	3708      	adds	r7, #8
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}

0800f876 <Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA>:

StdReturnType Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800f876:	b580      	push	{r7, lr}
 800f878:	b084      	sub	sp, #16
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	60f8      	str	r0, [r7, #12]
 800f87e:	60b9      	str	r1, [r7, #8]
 800f880:	607a      	str	r2, [r7, #4]

	HAL_ADC_Start_DMA(hadc, pData, Length);
 800f882:	687a      	ldr	r2, [r7, #4]
 800f884:	68b9      	ldr	r1, [r7, #8]
 800f886:	68f8      	ldr	r0, [r7, #12]
 800f888:	f7f4 faa0 	bl	8003dcc <HAL_ADC_Start_DMA>

	return RTE_E_OK;
 800f88c:	2300      	movs	r3, #0

}
 800f88e:	4618      	mov	r0, r3
 800f890:	3710      	adds	r7, #16
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}

0800f896 <Rte_Call_SysTick_R_SysTickPort_HAL_GetTick>:

StdReturnType Rte_Call_SysTick_R_SysTickPort_HAL_GetTick()
{
 800f896:	b580      	push	{r7, lr}
 800f898:	af00      	add	r7, sp, #0

	HAL_GetTick();
 800f89a:	f7f3 ffc7 	bl	800382c <HAL_GetTick>

	return RTE_E_OK;
 800f89e:	2300      	movs	r3, #0

}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	bd80      	pop	{r7, pc}

0800f8a4 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>:

StdReturnType Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(osTimerId_t timer_id, uint32_t ticks)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]

	osTimerStart(timer_id, ticks);
 800f8ae:	6839      	ldr	r1, [r7, #0]
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f7fc fe8d 	bl	800c5d0 <osTimerStart>

	return RTE_E_OK;
 800f8b6:	2300      	movs	r3, #0

}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3708      	adds	r7, #8
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag>:

StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag(uint32* data)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d101      	bne.n	800f8d2 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	e004      	b.n	800f8dc <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag+0x1c>
		/* do nothing */

	}


	Timer2Counter_ExtLights_LTSFlag = *data;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	4a04      	ldr	r2, [pc, #16]	; (800f8e8 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag+0x28>)
 800f8d8:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800f8da:	2300      	movs	r3, #0


}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	370c      	adds	r7, #12
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr
 800f8e8:	20000af4 	.word	0x20000af4

0800f8ec <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag(uint32* data)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b083      	sub	sp, #12
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d101      	bne.n	800f8fe <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	e004      	b.n	800f908 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag+0x1c>
		/* do nothing */

	}


	Timer2Counter_ExtLights_RTSFlag  = *data;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	4a04      	ldr	r2, [pc, #16]	; (800f914 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag+0x28>)
 800f904:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800f906:	2300      	movs	r3, #0

}
 800f908:	4618      	mov	r0, r3
 800f90a:	370c      	adds	r7, #12
 800f90c:	46bd      	mov	sp, r7
 800f90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f912:	4770      	bx	lr
 800f914:	20000af8 	.word	0x20000af8

0800f918 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag(uint32* data)
{
 800f918:	b480      	push	{r7}
 800f91a:	b083      	sub	sp, #12
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d101      	bne.n	800f92a <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f926:	2301      	movs	r3, #1
 800f928:	e004      	b.n	800f934 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag+0x1c>
		/* do nothing */

	}


	Timer2Counter_ExtLights_HLFlag = *data;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	4a04      	ldr	r2, [pc, #16]	; (800f940 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag+0x28>)
 800f930:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800f932:	2300      	movs	r3, #0

}
 800f934:	4618      	mov	r0, r3
 800f936:	370c      	adds	r7, #12
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr
 800f940:	20000afc 	.word	0x20000afc

0800f944 <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag(uint8* data)
{
 800f944:	b480      	push	{r7}
 800f946:	b083      	sub	sp, #12
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d101      	bne.n	800f956 <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f952:	2301      	movs	r3, #1
 800f954:	e004      	b.n	800f960 <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag+0x1c>
		/* do nothing */

	}


	Timer2Counter_CenLoc_Tim2IRQFlag = *data;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	781a      	ldrb	r2, [r3, #0]
 800f95a:	4b04      	ldr	r3, [pc, #16]	; (800f96c <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag+0x28>)
 800f95c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f95e:	2300      	movs	r3, #0

}
 800f960:	4618      	mov	r0, r3
 800f962:	370c      	adds	r7, #12
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr
 800f96c:	20000b00 	.word	0x20000b00

0800f970 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag(uint8* data)
{
 800f970:	b480      	push	{r7}
 800f972:	b083      	sub	sp, #12
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d101      	bne.n	800f982 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f97e:	2301      	movs	r3, #1
 800f980:	e004      	b.n	800f98c <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag+0x1c>
		/* do nothing */

	}


	Timer5Counter_CenLoc_Tim5IRQFlag = *data;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	781a      	ldrb	r2, [r3, #0]
 800f986:	4b04      	ldr	r3, [pc, #16]	; (800f998 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag+0x28>)
 800f988:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f98a:	2300      	movs	r3, #0

}
 800f98c:	4618      	mov	r0, r3
 800f98e:	370c      	adds	r7, #12
 800f990:	46bd      	mov	sp, r7
 800f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f996:	4770      	bx	lr
 800f998:	20000b01 	.word	0x20000b01

0800f99c <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag(uint8* data)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b083      	sub	sp, #12
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d101      	bne.n	800f9ae <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	e004      	b.n	800f9b8 <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag+0x1c>
		/* do nothing */

	}


	Timer3Counter_CenLoc_Tim3IRQFlag = *data;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	781a      	ldrb	r2, [r3, #0]
 800f9b2:	4b04      	ldr	r3, [pc, #16]	; (800f9c4 <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag+0x28>)
 800f9b4:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f9b6:	2300      	movs	r3, #0

}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	370c      	adds	r7, #12
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c2:	4770      	bx	lr
 800f9c4:	20000b03 	.word	0x20000b03

0800f9c8 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(uint8* data)
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d101      	bne.n	800f9da <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	e004      	b.n	800f9e4 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag+0x1c>
		/* do nothing */

	}


	Timer11Counter_CenLoc_Tim11IRQFlag = *data;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	781a      	ldrb	r2, [r3, #0]
 800f9de:	4b04      	ldr	r3, [pc, #16]	; (800f9f0 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag+0x28>)
 800f9e0:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f9e2:	2300      	movs	r3, #0

}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	370c      	adds	r7, #12
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr
 800f9f0:	20000b02 	.word	0x20000b02

0800f9f4 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>:

StdReturnType Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(osTimerId_t timer_id)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]

	osTimerStop(timer_id);
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f7fc fe15 	bl	800c62c <osTimerStop>

	return RTE_E_OK;
 800fa02:	2300      	movs	r3, #0

}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3708      	adds	r7, #8
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}

0800fa0c <atoi>:
 800fa0c:	220a      	movs	r2, #10
 800fa0e:	2100      	movs	r1, #0
 800fa10:	f000 b978 	b.w	800fd04 <strtol>

0800fa14 <__errno>:
 800fa14:	4b01      	ldr	r3, [pc, #4]	; (800fa1c <__errno+0x8>)
 800fa16:	6818      	ldr	r0, [r3, #0]
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop
 800fa1c:	20000014 	.word	0x20000014

0800fa20 <__libc_init_array>:
 800fa20:	b570      	push	{r4, r5, r6, lr}
 800fa22:	4d0d      	ldr	r5, [pc, #52]	; (800fa58 <__libc_init_array+0x38>)
 800fa24:	4c0d      	ldr	r4, [pc, #52]	; (800fa5c <__libc_init_array+0x3c>)
 800fa26:	1b64      	subs	r4, r4, r5
 800fa28:	10a4      	asrs	r4, r4, #2
 800fa2a:	2600      	movs	r6, #0
 800fa2c:	42a6      	cmp	r6, r4
 800fa2e:	d109      	bne.n	800fa44 <__libc_init_array+0x24>
 800fa30:	4d0b      	ldr	r5, [pc, #44]	; (800fa60 <__libc_init_array+0x40>)
 800fa32:	4c0c      	ldr	r4, [pc, #48]	; (800fa64 <__libc_init_array+0x44>)
 800fa34:	f000 f97c 	bl	800fd30 <_init>
 800fa38:	1b64      	subs	r4, r4, r5
 800fa3a:	10a4      	asrs	r4, r4, #2
 800fa3c:	2600      	movs	r6, #0
 800fa3e:	42a6      	cmp	r6, r4
 800fa40:	d105      	bne.n	800fa4e <__libc_init_array+0x2e>
 800fa42:	bd70      	pop	{r4, r5, r6, pc}
 800fa44:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa48:	4798      	blx	r3
 800fa4a:	3601      	adds	r6, #1
 800fa4c:	e7ee      	b.n	800fa2c <__libc_init_array+0xc>
 800fa4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa52:	4798      	blx	r3
 800fa54:	3601      	adds	r6, #1
 800fa56:	e7f2      	b.n	800fa3e <__libc_init_array+0x1e>
 800fa58:	08011a34 	.word	0x08011a34
 800fa5c:	08011a34 	.word	0x08011a34
 800fa60:	08011a34 	.word	0x08011a34
 800fa64:	08011a38 	.word	0x08011a38

0800fa68 <memcpy>:
 800fa68:	440a      	add	r2, r1
 800fa6a:	4291      	cmp	r1, r2
 800fa6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fa70:	d100      	bne.n	800fa74 <memcpy+0xc>
 800fa72:	4770      	bx	lr
 800fa74:	b510      	push	{r4, lr}
 800fa76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa7e:	4291      	cmp	r1, r2
 800fa80:	d1f9      	bne.n	800fa76 <memcpy+0xe>
 800fa82:	bd10      	pop	{r4, pc}

0800fa84 <memset>:
 800fa84:	4402      	add	r2, r0
 800fa86:	4603      	mov	r3, r0
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d100      	bne.n	800fa8e <memset+0xa>
 800fa8c:	4770      	bx	lr
 800fa8e:	f803 1b01 	strb.w	r1, [r3], #1
 800fa92:	e7f9      	b.n	800fa88 <memset+0x4>

0800fa94 <_free_r>:
 800fa94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa96:	2900      	cmp	r1, #0
 800fa98:	d044      	beq.n	800fb24 <_free_r+0x90>
 800fa9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa9e:	9001      	str	r0, [sp, #4]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	f1a1 0404 	sub.w	r4, r1, #4
 800faa6:	bfb8      	it	lt
 800faa8:	18e4      	addlt	r4, r4, r3
 800faaa:	f000 f935 	bl	800fd18 <__malloc_lock>
 800faae:	4a1e      	ldr	r2, [pc, #120]	; (800fb28 <_free_r+0x94>)
 800fab0:	9801      	ldr	r0, [sp, #4]
 800fab2:	6813      	ldr	r3, [r2, #0]
 800fab4:	b933      	cbnz	r3, 800fac4 <_free_r+0x30>
 800fab6:	6063      	str	r3, [r4, #4]
 800fab8:	6014      	str	r4, [r2, #0]
 800faba:	b003      	add	sp, #12
 800fabc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fac0:	f000 b930 	b.w	800fd24 <__malloc_unlock>
 800fac4:	42a3      	cmp	r3, r4
 800fac6:	d908      	bls.n	800fada <_free_r+0x46>
 800fac8:	6825      	ldr	r5, [r4, #0]
 800faca:	1961      	adds	r1, r4, r5
 800facc:	428b      	cmp	r3, r1
 800face:	bf01      	itttt	eq
 800fad0:	6819      	ldreq	r1, [r3, #0]
 800fad2:	685b      	ldreq	r3, [r3, #4]
 800fad4:	1949      	addeq	r1, r1, r5
 800fad6:	6021      	streq	r1, [r4, #0]
 800fad8:	e7ed      	b.n	800fab6 <_free_r+0x22>
 800fada:	461a      	mov	r2, r3
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	b10b      	cbz	r3, 800fae4 <_free_r+0x50>
 800fae0:	42a3      	cmp	r3, r4
 800fae2:	d9fa      	bls.n	800fada <_free_r+0x46>
 800fae4:	6811      	ldr	r1, [r2, #0]
 800fae6:	1855      	adds	r5, r2, r1
 800fae8:	42a5      	cmp	r5, r4
 800faea:	d10b      	bne.n	800fb04 <_free_r+0x70>
 800faec:	6824      	ldr	r4, [r4, #0]
 800faee:	4421      	add	r1, r4
 800faf0:	1854      	adds	r4, r2, r1
 800faf2:	42a3      	cmp	r3, r4
 800faf4:	6011      	str	r1, [r2, #0]
 800faf6:	d1e0      	bne.n	800faba <_free_r+0x26>
 800faf8:	681c      	ldr	r4, [r3, #0]
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	6053      	str	r3, [r2, #4]
 800fafe:	4421      	add	r1, r4
 800fb00:	6011      	str	r1, [r2, #0]
 800fb02:	e7da      	b.n	800faba <_free_r+0x26>
 800fb04:	d902      	bls.n	800fb0c <_free_r+0x78>
 800fb06:	230c      	movs	r3, #12
 800fb08:	6003      	str	r3, [r0, #0]
 800fb0a:	e7d6      	b.n	800faba <_free_r+0x26>
 800fb0c:	6825      	ldr	r5, [r4, #0]
 800fb0e:	1961      	adds	r1, r4, r5
 800fb10:	428b      	cmp	r3, r1
 800fb12:	bf04      	itt	eq
 800fb14:	6819      	ldreq	r1, [r3, #0]
 800fb16:	685b      	ldreq	r3, [r3, #4]
 800fb18:	6063      	str	r3, [r4, #4]
 800fb1a:	bf04      	itt	eq
 800fb1c:	1949      	addeq	r1, r1, r5
 800fb1e:	6021      	streq	r1, [r4, #0]
 800fb20:	6054      	str	r4, [r2, #4]
 800fb22:	e7ca      	b.n	800faba <_free_r+0x26>
 800fb24:	b003      	add	sp, #12
 800fb26:	bd30      	pop	{r4, r5, pc}
 800fb28:	20005714 	.word	0x20005714

0800fb2c <cleanup_glue>:
 800fb2c:	b538      	push	{r3, r4, r5, lr}
 800fb2e:	460c      	mov	r4, r1
 800fb30:	6809      	ldr	r1, [r1, #0]
 800fb32:	4605      	mov	r5, r0
 800fb34:	b109      	cbz	r1, 800fb3a <cleanup_glue+0xe>
 800fb36:	f7ff fff9 	bl	800fb2c <cleanup_glue>
 800fb3a:	4621      	mov	r1, r4
 800fb3c:	4628      	mov	r0, r5
 800fb3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb42:	f7ff bfa7 	b.w	800fa94 <_free_r>
	...

0800fb48 <_reclaim_reent>:
 800fb48:	4b2c      	ldr	r3, [pc, #176]	; (800fbfc <_reclaim_reent+0xb4>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	4283      	cmp	r3, r0
 800fb4e:	b570      	push	{r4, r5, r6, lr}
 800fb50:	4604      	mov	r4, r0
 800fb52:	d051      	beq.n	800fbf8 <_reclaim_reent+0xb0>
 800fb54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fb56:	b143      	cbz	r3, 800fb6a <_reclaim_reent+0x22>
 800fb58:	68db      	ldr	r3, [r3, #12]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d14a      	bne.n	800fbf4 <_reclaim_reent+0xac>
 800fb5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb60:	6819      	ldr	r1, [r3, #0]
 800fb62:	b111      	cbz	r1, 800fb6a <_reclaim_reent+0x22>
 800fb64:	4620      	mov	r0, r4
 800fb66:	f7ff ff95 	bl	800fa94 <_free_r>
 800fb6a:	6961      	ldr	r1, [r4, #20]
 800fb6c:	b111      	cbz	r1, 800fb74 <_reclaim_reent+0x2c>
 800fb6e:	4620      	mov	r0, r4
 800fb70:	f7ff ff90 	bl	800fa94 <_free_r>
 800fb74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fb76:	b111      	cbz	r1, 800fb7e <_reclaim_reent+0x36>
 800fb78:	4620      	mov	r0, r4
 800fb7a:	f7ff ff8b 	bl	800fa94 <_free_r>
 800fb7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fb80:	b111      	cbz	r1, 800fb88 <_reclaim_reent+0x40>
 800fb82:	4620      	mov	r0, r4
 800fb84:	f7ff ff86 	bl	800fa94 <_free_r>
 800fb88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fb8a:	b111      	cbz	r1, 800fb92 <_reclaim_reent+0x4a>
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	f7ff ff81 	bl	800fa94 <_free_r>
 800fb92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fb94:	b111      	cbz	r1, 800fb9c <_reclaim_reent+0x54>
 800fb96:	4620      	mov	r0, r4
 800fb98:	f7ff ff7c 	bl	800fa94 <_free_r>
 800fb9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fb9e:	b111      	cbz	r1, 800fba6 <_reclaim_reent+0x5e>
 800fba0:	4620      	mov	r0, r4
 800fba2:	f7ff ff77 	bl	800fa94 <_free_r>
 800fba6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fba8:	b111      	cbz	r1, 800fbb0 <_reclaim_reent+0x68>
 800fbaa:	4620      	mov	r0, r4
 800fbac:	f7ff ff72 	bl	800fa94 <_free_r>
 800fbb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbb2:	b111      	cbz	r1, 800fbba <_reclaim_reent+0x72>
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	f7ff ff6d 	bl	800fa94 <_free_r>
 800fbba:	69a3      	ldr	r3, [r4, #24]
 800fbbc:	b1e3      	cbz	r3, 800fbf8 <_reclaim_reent+0xb0>
 800fbbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fbc0:	4620      	mov	r0, r4
 800fbc2:	4798      	blx	r3
 800fbc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fbc6:	b1b9      	cbz	r1, 800fbf8 <_reclaim_reent+0xb0>
 800fbc8:	4620      	mov	r0, r4
 800fbca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fbce:	f7ff bfad 	b.w	800fb2c <cleanup_glue>
 800fbd2:	5949      	ldr	r1, [r1, r5]
 800fbd4:	b941      	cbnz	r1, 800fbe8 <_reclaim_reent+0xa0>
 800fbd6:	3504      	adds	r5, #4
 800fbd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbda:	2d80      	cmp	r5, #128	; 0x80
 800fbdc:	68d9      	ldr	r1, [r3, #12]
 800fbde:	d1f8      	bne.n	800fbd2 <_reclaim_reent+0x8a>
 800fbe0:	4620      	mov	r0, r4
 800fbe2:	f7ff ff57 	bl	800fa94 <_free_r>
 800fbe6:	e7ba      	b.n	800fb5e <_reclaim_reent+0x16>
 800fbe8:	680e      	ldr	r6, [r1, #0]
 800fbea:	4620      	mov	r0, r4
 800fbec:	f7ff ff52 	bl	800fa94 <_free_r>
 800fbf0:	4631      	mov	r1, r6
 800fbf2:	e7ef      	b.n	800fbd4 <_reclaim_reent+0x8c>
 800fbf4:	2500      	movs	r5, #0
 800fbf6:	e7ef      	b.n	800fbd8 <_reclaim_reent+0x90>
 800fbf8:	bd70      	pop	{r4, r5, r6, pc}
 800fbfa:	bf00      	nop
 800fbfc:	20000014 	.word	0x20000014

0800fc00 <_strtol_l.constprop.0>:
 800fc00:	2b01      	cmp	r3, #1
 800fc02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc06:	d001      	beq.n	800fc0c <_strtol_l.constprop.0+0xc>
 800fc08:	2b24      	cmp	r3, #36	; 0x24
 800fc0a:	d906      	bls.n	800fc1a <_strtol_l.constprop.0+0x1a>
 800fc0c:	f7ff ff02 	bl	800fa14 <__errno>
 800fc10:	2316      	movs	r3, #22
 800fc12:	6003      	str	r3, [r0, #0]
 800fc14:	2000      	movs	r0, #0
 800fc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc1a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fd00 <_strtol_l.constprop.0+0x100>
 800fc1e:	460d      	mov	r5, r1
 800fc20:	462e      	mov	r6, r5
 800fc22:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc26:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fc2a:	f017 0708 	ands.w	r7, r7, #8
 800fc2e:	d1f7      	bne.n	800fc20 <_strtol_l.constprop.0+0x20>
 800fc30:	2c2d      	cmp	r4, #45	; 0x2d
 800fc32:	d132      	bne.n	800fc9a <_strtol_l.constprop.0+0x9a>
 800fc34:	782c      	ldrb	r4, [r5, #0]
 800fc36:	2701      	movs	r7, #1
 800fc38:	1cb5      	adds	r5, r6, #2
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d05b      	beq.n	800fcf6 <_strtol_l.constprop.0+0xf6>
 800fc3e:	2b10      	cmp	r3, #16
 800fc40:	d109      	bne.n	800fc56 <_strtol_l.constprop.0+0x56>
 800fc42:	2c30      	cmp	r4, #48	; 0x30
 800fc44:	d107      	bne.n	800fc56 <_strtol_l.constprop.0+0x56>
 800fc46:	782c      	ldrb	r4, [r5, #0]
 800fc48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fc4c:	2c58      	cmp	r4, #88	; 0x58
 800fc4e:	d14d      	bne.n	800fcec <_strtol_l.constprop.0+0xec>
 800fc50:	786c      	ldrb	r4, [r5, #1]
 800fc52:	2310      	movs	r3, #16
 800fc54:	3502      	adds	r5, #2
 800fc56:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fc5a:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc5e:	f04f 0c00 	mov.w	ip, #0
 800fc62:	fbb8 f9f3 	udiv	r9, r8, r3
 800fc66:	4666      	mov	r6, ip
 800fc68:	fb03 8a19 	mls	sl, r3, r9, r8
 800fc6c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fc70:	f1be 0f09 	cmp.w	lr, #9
 800fc74:	d816      	bhi.n	800fca4 <_strtol_l.constprop.0+0xa4>
 800fc76:	4674      	mov	r4, lr
 800fc78:	42a3      	cmp	r3, r4
 800fc7a:	dd24      	ble.n	800fcc6 <_strtol_l.constprop.0+0xc6>
 800fc7c:	f1bc 0f00 	cmp.w	ip, #0
 800fc80:	db1e      	blt.n	800fcc0 <_strtol_l.constprop.0+0xc0>
 800fc82:	45b1      	cmp	r9, r6
 800fc84:	d31c      	bcc.n	800fcc0 <_strtol_l.constprop.0+0xc0>
 800fc86:	d101      	bne.n	800fc8c <_strtol_l.constprop.0+0x8c>
 800fc88:	45a2      	cmp	sl, r4
 800fc8a:	db19      	blt.n	800fcc0 <_strtol_l.constprop.0+0xc0>
 800fc8c:	fb06 4603 	mla	r6, r6, r3, r4
 800fc90:	f04f 0c01 	mov.w	ip, #1
 800fc94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc98:	e7e8      	b.n	800fc6c <_strtol_l.constprop.0+0x6c>
 800fc9a:	2c2b      	cmp	r4, #43	; 0x2b
 800fc9c:	bf04      	itt	eq
 800fc9e:	782c      	ldrbeq	r4, [r5, #0]
 800fca0:	1cb5      	addeq	r5, r6, #2
 800fca2:	e7ca      	b.n	800fc3a <_strtol_l.constprop.0+0x3a>
 800fca4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fca8:	f1be 0f19 	cmp.w	lr, #25
 800fcac:	d801      	bhi.n	800fcb2 <_strtol_l.constprop.0+0xb2>
 800fcae:	3c37      	subs	r4, #55	; 0x37
 800fcb0:	e7e2      	b.n	800fc78 <_strtol_l.constprop.0+0x78>
 800fcb2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fcb6:	f1be 0f19 	cmp.w	lr, #25
 800fcba:	d804      	bhi.n	800fcc6 <_strtol_l.constprop.0+0xc6>
 800fcbc:	3c57      	subs	r4, #87	; 0x57
 800fcbe:	e7db      	b.n	800fc78 <_strtol_l.constprop.0+0x78>
 800fcc0:	f04f 3cff 	mov.w	ip, #4294967295
 800fcc4:	e7e6      	b.n	800fc94 <_strtol_l.constprop.0+0x94>
 800fcc6:	f1bc 0f00 	cmp.w	ip, #0
 800fcca:	da05      	bge.n	800fcd8 <_strtol_l.constprop.0+0xd8>
 800fccc:	2322      	movs	r3, #34	; 0x22
 800fcce:	6003      	str	r3, [r0, #0]
 800fcd0:	4646      	mov	r6, r8
 800fcd2:	b942      	cbnz	r2, 800fce6 <_strtol_l.constprop.0+0xe6>
 800fcd4:	4630      	mov	r0, r6
 800fcd6:	e79e      	b.n	800fc16 <_strtol_l.constprop.0+0x16>
 800fcd8:	b107      	cbz	r7, 800fcdc <_strtol_l.constprop.0+0xdc>
 800fcda:	4276      	negs	r6, r6
 800fcdc:	2a00      	cmp	r2, #0
 800fcde:	d0f9      	beq.n	800fcd4 <_strtol_l.constprop.0+0xd4>
 800fce0:	f1bc 0f00 	cmp.w	ip, #0
 800fce4:	d000      	beq.n	800fce8 <_strtol_l.constprop.0+0xe8>
 800fce6:	1e69      	subs	r1, r5, #1
 800fce8:	6011      	str	r1, [r2, #0]
 800fcea:	e7f3      	b.n	800fcd4 <_strtol_l.constprop.0+0xd4>
 800fcec:	2430      	movs	r4, #48	; 0x30
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d1b1      	bne.n	800fc56 <_strtol_l.constprop.0+0x56>
 800fcf2:	2308      	movs	r3, #8
 800fcf4:	e7af      	b.n	800fc56 <_strtol_l.constprop.0+0x56>
 800fcf6:	2c30      	cmp	r4, #48	; 0x30
 800fcf8:	d0a5      	beq.n	800fc46 <_strtol_l.constprop.0+0x46>
 800fcfa:	230a      	movs	r3, #10
 800fcfc:	e7ab      	b.n	800fc56 <_strtol_l.constprop.0+0x56>
 800fcfe:	bf00      	nop
 800fd00:	08011929 	.word	0x08011929

0800fd04 <strtol>:
 800fd04:	4613      	mov	r3, r2
 800fd06:	460a      	mov	r2, r1
 800fd08:	4601      	mov	r1, r0
 800fd0a:	4802      	ldr	r0, [pc, #8]	; (800fd14 <strtol+0x10>)
 800fd0c:	6800      	ldr	r0, [r0, #0]
 800fd0e:	f7ff bf77 	b.w	800fc00 <_strtol_l.constprop.0>
 800fd12:	bf00      	nop
 800fd14:	20000014 	.word	0x20000014

0800fd18 <__malloc_lock>:
 800fd18:	4801      	ldr	r0, [pc, #4]	; (800fd20 <__malloc_lock+0x8>)
 800fd1a:	f7f3 bd28 	b.w	800376e <__retarget_lock_acquire_recursive>
 800fd1e:	bf00      	nop
 800fd20:	20000ac4 	.word	0x20000ac4

0800fd24 <__malloc_unlock>:
 800fd24:	4801      	ldr	r0, [pc, #4]	; (800fd2c <__malloc_unlock+0x8>)
 800fd26:	f7f3 bd36 	b.w	8003796 <__retarget_lock_release_recursive>
 800fd2a:	bf00      	nop
 800fd2c:	20000ac4 	.word	0x20000ac4

0800fd30 <_init>:
 800fd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd32:	bf00      	nop
 800fd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd36:	bc08      	pop	{r3}
 800fd38:	469e      	mov	lr, r3
 800fd3a:	4770      	bx	lr

0800fd3c <_fini>:
 800fd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd3e:	bf00      	nop
 800fd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd42:	bc08      	pop	{r3}
 800fd44:	469e      	mov	lr, r3
 800fd46:	4770      	bx	lr
