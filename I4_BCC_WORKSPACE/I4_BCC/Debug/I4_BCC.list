
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e794  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800e934  0800e934  0001e934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef64  0800ef64  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef64  0800ef64  0001ef64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef6c  0800ef6c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef6c  0800ef6c  0001ef6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef70  0800ef70  0001ef70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800ef74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000089a4  20000090  0800f004  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008a34  0800f004  00028a34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b127  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006752  00000000  00000000  0004b1e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002288  00000000  00000000  00051940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f80  00000000  00000000  00053bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f81  00000000  00000000  00055b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003ae24  00000000  00000000  00078ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5fef  00000000  00000000  000b38ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001698dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f40  00000000  00000000  0016992c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e91c 	.word	0x0800e91c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800e91c 	.word	0x0800e91c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2uiz>:
 800098c:	004a      	lsls	r2, r1, #1
 800098e:	d211      	bcs.n	80009b4 <__aeabi_d2uiz+0x28>
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d211      	bcs.n	80009ba <__aeabi_d2uiz+0x2e>
 8000996:	d50d      	bpl.n	80009b4 <__aeabi_d2uiz+0x28>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d40e      	bmi.n	80009c0 <__aeabi_d2uiz+0x34>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009be:	d102      	bne.n	80009c6 <__aeabi_d2uiz+0x3a>
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr

080009cc <__aeabi_uldivmod>:
 80009cc:	b953      	cbnz	r3, 80009e4 <__aeabi_uldivmod+0x18>
 80009ce:	b94a      	cbnz	r2, 80009e4 <__aeabi_uldivmod+0x18>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	bf08      	it	eq
 80009d4:	2800      	cmpeq	r0, #0
 80009d6:	bf1c      	itt	ne
 80009d8:	f04f 31ff 	movne.w	r1, #4294967295
 80009dc:	f04f 30ff 	movne.w	r0, #4294967295
 80009e0:	f000 b974 	b.w	8000ccc <__aeabi_idiv0>
 80009e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ec:	f000 f806 	bl	80009fc <__udivmoddi4>
 80009f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f8:	b004      	add	sp, #16
 80009fa:	4770      	bx	lr

080009fc <__udivmoddi4>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	9d08      	ldr	r5, [sp, #32]
 8000a02:	4604      	mov	r4, r0
 8000a04:	468e      	mov	lr, r1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d14d      	bne.n	8000aa6 <__udivmoddi4+0xaa>
 8000a0a:	428a      	cmp	r2, r1
 8000a0c:	4694      	mov	ip, r2
 8000a0e:	d969      	bls.n	8000ae4 <__udivmoddi4+0xe8>
 8000a10:	fab2 f282 	clz	r2, r2
 8000a14:	b152      	cbz	r2, 8000a2c <__udivmoddi4+0x30>
 8000a16:	fa01 f302 	lsl.w	r3, r1, r2
 8000a1a:	f1c2 0120 	rsb	r1, r2, #32
 8000a1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a26:	ea41 0e03 	orr.w	lr, r1, r3
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a30:	0c21      	lsrs	r1, r4, #16
 8000a32:	fbbe f6f8 	udiv	r6, lr, r8
 8000a36:	fa1f f78c 	uxth.w	r7, ip
 8000a3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a42:	fb06 f107 	mul.w	r1, r6, r7
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d90a      	bls.n	8000a60 <__udivmoddi4+0x64>
 8000a4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a52:	f080 811f 	bcs.w	8000c94 <__udivmoddi4+0x298>
 8000a56:	4299      	cmp	r1, r3
 8000a58:	f240 811c 	bls.w	8000c94 <__udivmoddi4+0x298>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a68:	fb08 3310 	mls	r3, r8, r0, r3
 8000a6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a70:	fb00 f707 	mul.w	r7, r0, r7
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	d90a      	bls.n	8000a8e <__udivmoddi4+0x92>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a80:	f080 810a 	bcs.w	8000c98 <__udivmoddi4+0x29c>
 8000a84:	42a7      	cmp	r7, r4
 8000a86:	f240 8107 	bls.w	8000c98 <__udivmoddi4+0x29c>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a92:	1be4      	subs	r4, r4, r7
 8000a94:	2600      	movs	r6, #0
 8000a96:	b11d      	cbz	r5, 8000aa0 <__udivmoddi4+0xa4>
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d909      	bls.n	8000abe <__udivmoddi4+0xc2>
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	f000 80ef 	beq.w	8000c8e <__udivmoddi4+0x292>
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ab6:	4630      	mov	r0, r6
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	fab3 f683 	clz	r6, r3
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d14a      	bne.n	8000b5c <__udivmoddi4+0x160>
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d302      	bcc.n	8000ad0 <__udivmoddi4+0xd4>
 8000aca:	4282      	cmp	r2, r0
 8000acc:	f200 80f9 	bhi.w	8000cc2 <__udivmoddi4+0x2c6>
 8000ad0:	1a84      	subs	r4, r0, r2
 8000ad2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	469e      	mov	lr, r3
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d0e0      	beq.n	8000aa0 <__udivmoddi4+0xa4>
 8000ade:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ae2:	e7dd      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000ae4:	b902      	cbnz	r2, 8000ae8 <__udivmoddi4+0xec>
 8000ae6:	deff      	udf	#255	; 0xff
 8000ae8:	fab2 f282 	clz	r2, r2
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	f040 8092 	bne.w	8000c16 <__udivmoddi4+0x21a>
 8000af2:	eba1 010c 	sub.w	r1, r1, ip
 8000af6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afa:	fa1f fe8c 	uxth.w	lr, ip
 8000afe:	2601      	movs	r6, #1
 8000b00:	0c20      	lsrs	r0, r4, #16
 8000b02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b06:	fb07 1113 	mls	r1, r7, r3, r1
 8000b0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b0e:	fb0e f003 	mul.w	r0, lr, r3
 8000b12:	4288      	cmp	r0, r1
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x12c>
 8000b16:	eb1c 0101 	adds.w	r1, ip, r1
 8000b1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x12a>
 8000b20:	4288      	cmp	r0, r1
 8000b22:	f200 80cb 	bhi.w	8000cbc <__udivmoddi4+0x2c0>
 8000b26:	4643      	mov	r3, r8
 8000b28:	1a09      	subs	r1, r1, r0
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b30:	fb07 1110 	mls	r1, r7, r0, r1
 8000b34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b38:	fb0e fe00 	mul.w	lr, lr, r0
 8000b3c:	45a6      	cmp	lr, r4
 8000b3e:	d908      	bls.n	8000b52 <__udivmoddi4+0x156>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b48:	d202      	bcs.n	8000b50 <__udivmoddi4+0x154>
 8000b4a:	45a6      	cmp	lr, r4
 8000b4c:	f200 80bb 	bhi.w	8000cc6 <__udivmoddi4+0x2ca>
 8000b50:	4608      	mov	r0, r1
 8000b52:	eba4 040e 	sub.w	r4, r4, lr
 8000b56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b5a:	e79c      	b.n	8000a96 <__udivmoddi4+0x9a>
 8000b5c:	f1c6 0720 	rsb	r7, r6, #32
 8000b60:	40b3      	lsls	r3, r6
 8000b62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b72:	431c      	orrs	r4, r3
 8000b74:	40f9      	lsrs	r1, r7
 8000b76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b82:	0c20      	lsrs	r0, r4, #16
 8000b84:	fa1f fe8c 	uxth.w	lr, ip
 8000b88:	fb09 1118 	mls	r1, r9, r8, r1
 8000b8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b90:	fb08 f00e 	mul.w	r0, r8, lr
 8000b94:	4288      	cmp	r0, r1
 8000b96:	fa02 f206 	lsl.w	r2, r2, r6
 8000b9a:	d90b      	bls.n	8000bb4 <__udivmoddi4+0x1b8>
 8000b9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ba4:	f080 8088 	bcs.w	8000cb8 <__udivmoddi4+0x2bc>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f240 8085 	bls.w	8000cb8 <__udivmoddi4+0x2bc>
 8000bae:	f1a8 0802 	sub.w	r8, r8, #2
 8000bb2:	4461      	add	r1, ip
 8000bb4:	1a09      	subs	r1, r1, r0
 8000bb6:	b2a4      	uxth	r4, r4
 8000bb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000bc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc8:	458e      	cmp	lr, r1
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x1e2>
 8000bcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bd4:	d26c      	bcs.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bd6:	458e      	cmp	lr, r1
 8000bd8:	d96a      	bls.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bda:	3802      	subs	r0, #2
 8000bdc:	4461      	add	r1, ip
 8000bde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000be2:	fba0 9402 	umull	r9, r4, r0, r2
 8000be6:	eba1 010e 	sub.w	r1, r1, lr
 8000bea:	42a1      	cmp	r1, r4
 8000bec:	46c8      	mov	r8, r9
 8000bee:	46a6      	mov	lr, r4
 8000bf0:	d356      	bcc.n	8000ca0 <__udivmoddi4+0x2a4>
 8000bf2:	d053      	beq.n	8000c9c <__udivmoddi4+0x2a0>
 8000bf4:	b15d      	cbz	r5, 8000c0e <__udivmoddi4+0x212>
 8000bf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000bfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000c02:	fa22 f306 	lsr.w	r3, r2, r6
 8000c06:	40f1      	lsrs	r1, r6
 8000c08:	431f      	orrs	r7, r3
 8000c0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c0e:	2600      	movs	r6, #0
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	f1c2 0320 	rsb	r3, r2, #32
 8000c1a:	40d8      	lsrs	r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	fa21 f303 	lsr.w	r3, r1, r3
 8000c24:	4091      	lsls	r1, r2
 8000c26:	4301      	orrs	r1, r0
 8000c28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2c:	fa1f fe8c 	uxth.w	lr, ip
 8000c30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c34:	fb07 3610 	mls	r6, r7, r0, r3
 8000c38:	0c0b      	lsrs	r3, r1, #16
 8000c3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c42:	429e      	cmp	r6, r3
 8000c44:	fa04 f402 	lsl.w	r4, r4, r2
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x260>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c52:	d22f      	bcs.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c54:	429e      	cmp	r6, r3
 8000c56:	d92d      	bls.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1b9b      	subs	r3, r3, r6
 8000c5e:	b289      	uxth	r1, r1
 8000c60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c64:	fb07 3316 	mls	r3, r7, r6, r3
 8000c68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c70:	428b      	cmp	r3, r1
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x28a>
 8000c74:	eb1c 0101 	adds.w	r1, ip, r1
 8000c78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c7c:	d216      	bcs.n	8000cac <__udivmoddi4+0x2b0>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d914      	bls.n	8000cac <__udivmoddi4+0x2b0>
 8000c82:	3e02      	subs	r6, #2
 8000c84:	4461      	add	r1, ip
 8000c86:	1ac9      	subs	r1, r1, r3
 8000c88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c8c:	e738      	b.n	8000b00 <__udivmoddi4+0x104>
 8000c8e:	462e      	mov	r6, r5
 8000c90:	4628      	mov	r0, r5
 8000c92:	e705      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000c94:	4606      	mov	r6, r0
 8000c96:	e6e3      	b.n	8000a60 <__udivmoddi4+0x64>
 8000c98:	4618      	mov	r0, r3
 8000c9a:	e6f8      	b.n	8000a8e <__udivmoddi4+0x92>
 8000c9c:	454b      	cmp	r3, r9
 8000c9e:	d2a9      	bcs.n	8000bf4 <__udivmoddi4+0x1f8>
 8000ca0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ca4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ca8:	3801      	subs	r0, #1
 8000caa:	e7a3      	b.n	8000bf4 <__udivmoddi4+0x1f8>
 8000cac:	4646      	mov	r6, r8
 8000cae:	e7ea      	b.n	8000c86 <__udivmoddi4+0x28a>
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	e794      	b.n	8000bde <__udivmoddi4+0x1e2>
 8000cb4:	4640      	mov	r0, r8
 8000cb6:	e7d1      	b.n	8000c5c <__udivmoddi4+0x260>
 8000cb8:	46d0      	mov	r8, sl
 8000cba:	e77b      	b.n	8000bb4 <__udivmoddi4+0x1b8>
 8000cbc:	3b02      	subs	r3, #2
 8000cbe:	4461      	add	r1, ip
 8000cc0:	e732      	b.n	8000b28 <__udivmoddi4+0x12c>
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	e709      	b.n	8000ada <__udivmoddi4+0xde>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	e742      	b.n	8000b52 <__udivmoddi4+0x156>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <main>:
/***********************************************************************************
* Function: main														   		   *
* Description: Defined in the linker file as the start of the application.         *
************************************************************************************/
int main()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	/* Calls for system initialization. */
	SystemManager_Init();
 8000cd4:	f00d fb92 	bl	800e3fc <SystemManager_Init>
	/* Initialize the kernel of FreeRTOS. */
	osKernelInitialize();
 8000cd8:	f009 f9ea 	bl	800a0b0 <osKernelInitialize>
	/* Initialize the FreeRTOS with all its objects.*/
	MX_FREERTOS_Init();
 8000cdc:	f001 ff12 	bl	8002b04 <MX_FREERTOS_Init>
	/* Start the kernel and the scheduler and FreeRTOS takes
	 * control of the application execution. */
	osKernelStart();
 8000ce0:	f009 fa0a 	bl	800a0f8 <osKernelStart>
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <Btc_RequestState>:
/***********************************************************************************
* Function: Btc_RequestState													   *
* Description: Process bluetooth command for request state 					       *
************************************************************************************/
VOID Btc_RequestState()
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	if(Btc_ReceivedDataOnBluetooth == 99)
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <Btc_RequestState+0x14>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b63      	cmp	r3, #99	; 0x63
 8000cf6:	d101      	bne.n	8000cfc <Btc_RequestState+0x10>
	{
		SystemManager_PerformReset();
 8000cf8:	f00d fbb8 	bl	800e46c <SystemManager_PerformReset>
	}
	else
	{
		/* do nothing */
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200000b2 	.word	0x200000b2

08000d04 <Btc_RxVal>:
/***********************************************************************************
* Function: Btc_RxVal													   		   *
* Description: Process bluetooth commands.	 		   							   *
************************************************************************************/
VOID Btc_RxVal()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	if(Rte_Call_Crc_R_CrcPort_Crc_VerifyUartData() == E_OK)
 8000d08:	f00c fe4c 	bl	800d9a4 <Crc_VerifyUartData>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 81a7 	bne.w	8001062 <Btc_RxVal+0x35e>
	{
		/* Process the command on each case and update the respective variable. */
		switch(Btc_ReceivedDataOnBluetooth)
 8000d14:	4bb0      	ldr	r3, [pc, #704]	; (8000fd8 <Btc_RxVal+0x2d4>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	2b19      	cmp	r3, #25
 8000d1c:	f200 8157 	bhi.w	8000fce <Btc_RxVal+0x2ca>
 8000d20:	a201      	add	r2, pc, #4	; (adr r2, 8000d28 <Btc_RxVal+0x24>)
 8000d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d26:	bf00      	nop
 8000d28:	08000e21 	.word	0x08000e21
 8000d2c:	08000e2f 	.word	0x08000e2f
 8000d30:	08000e3d 	.word	0x08000e3d
 8000d34:	08000e5b 	.word	0x08000e5b
 8000d38:	08000fcf 	.word	0x08000fcf
 8000d3c:	08000fcf 	.word	0x08000fcf
 8000d40:	08000e73 	.word	0x08000e73
 8000d44:	08000e97 	.word	0x08000e97
 8000d48:	08000eaf 	.word	0x08000eaf
 8000d4c:	08000ed3 	.word	0x08000ed3
 8000d50:	08000eeb 	.word	0x08000eeb
 8000d54:	08000f03 	.word	0x08000f03
 8000d58:	08000f1b 	.word	0x08000f1b
 8000d5c:	08000f33 	.word	0x08000f33
 8000d60:	08000f4b 	.word	0x08000f4b
 8000d64:	08000f61 	.word	0x08000f61
 8000d68:	08000f77 	.word	0x08000f77
 8000d6c:	08000f8d 	.word	0x08000f8d
 8000d70:	08000fa3 	.word	0x08000fa3
 8000d74:	08000fb9 	.word	0x08000fb9
 8000d78:	08000d91 	.word	0x08000d91
 8000d7c:	08000da9 	.word	0x08000da9
 8000d80:	08000dc1 	.word	0x08000dc1
 8000d84:	08000dd9 	.word	0x08000dd9
 8000d88:	08000df1 	.word	0x08000df1
 8000d8c:	08000e09 	.word	0x08000e09
		{
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000d90:	4b92      	ldr	r3, [pc, #584]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	f040 811c 	bne.w	8000fd2 <Btc_RxVal+0x2ce>
				{
					Btc_ReverseLight = STD_HIGH;
 8000d9a:	4b91      	ldr	r3, [pc, #580]	; (8000fe0 <Btc_RxVal+0x2dc>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 8000da0:	488f      	ldr	r0, [pc, #572]	; (8000fe0 <Btc_RxVal+0x2dc>)
 8000da2:	f00c fc93 	bl	800d6cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000da6:	e114      	b.n	8000fd2 <Btc_RxVal+0x2ce>
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000da8:	4b8c      	ldr	r3, [pc, #560]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	f040 812f 	bne.w	8001010 <Btc_RxVal+0x30c>
				{
					Btc_ReverseLight = STD_LOW;
 8000db2:	4b8b      	ldr	r3, [pc, #556]	; (8000fe0 <Btc_RxVal+0x2dc>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 8000db8:	4889      	ldr	r0, [pc, #548]	; (8000fe0 <Btc_RxVal+0x2dc>)
 8000dba:	f00c fc87 	bl	800d6cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000dbe:	e127      	b.n	8001010 <Btc_RxVal+0x30c>
			case BTC_RX_EXTLIGHTS_POSITIONZERO:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000dc0:	4b86      	ldr	r3, [pc, #536]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	f040 8125 	bne.w	8001014 <Btc_RxVal+0x310>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 8000dca:	4b86      	ldr	r3, [pc, #536]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000dcc:	2217      	movs	r2, #23
 8000dce:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000dd0:	4884      	ldr	r0, [pc, #528]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000dd2:	f00c fc9b 	bl	800d70c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000dd6:	e11d      	b.n	8001014 <Btc_RxVal+0x310>
			case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000dd8:	4b80      	ldr	r3, [pc, #512]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	f040 811b 	bne.w	8001018 <Btc_RxVal+0x314>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 8000de2:	4b80      	ldr	r3, [pc, #512]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000de4:	2218      	movs	r2, #24
 8000de6:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000de8:	487e      	ldr	r0, [pc, #504]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000dea:	f00c fc8f 	bl	800d70c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000dee:	e113      	b.n	8001018 <Btc_RxVal+0x314>
			case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000df0:	4b7a      	ldr	r3, [pc, #488]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	f040 8111 	bne.w	800101c <Btc_RxVal+0x318>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 8000dfa:	4b7a      	ldr	r3, [pc, #488]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000dfc:	2219      	movs	r2, #25
 8000dfe:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000e00:	4878      	ldr	r0, [pc, #480]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000e02:	f00c fc83 	bl	800d70c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000e06:	e109      	b.n	800101c <Btc_RxVal+0x318>
			case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000e08:	4b74      	ldr	r3, [pc, #464]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	f040 8107 	bne.w	8001020 <Btc_RxVal+0x31c>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 8000e12:	4b74      	ldr	r3, [pc, #464]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000e14:	221a      	movs	r2, #26
 8000e16:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000e18:	4872      	ldr	r0, [pc, #456]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000e1a:	f00c fc77 	bl	800d70c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000e1e:	e0ff      	b.n	8001020 <Btc_RxVal+0x31c>
			case BTC_RX_CENLOC_ON:
				Btc_CenLoc = STD_HIGH;
 8000e20:	4b71      	ldr	r3, [pc, #452]	; (8000fe8 <Btc_RxVal+0x2e4>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 8000e26:	4870      	ldr	r0, [pc, #448]	; (8000fe8 <Btc_RxVal+0x2e4>)
 8000e28:	f00c fc30 	bl	800d68c <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 8000e2c:	e119      	b.n	8001062 <Btc_RxVal+0x35e>
			case BTC_RX_CENLOC_OFF:
				Btc_CenLoc = STD_LOW;
 8000e2e:	4b6e      	ldr	r3, [pc, #440]	; (8000fe8 <Btc_RxVal+0x2e4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 8000e34:	486c      	ldr	r0, [pc, #432]	; (8000fe8 <Btc_RxVal+0x2e4>)
 8000e36:	f00c fc29 	bl	800d68c <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 8000e3a:	e112      	b.n	8001062 <Btc_RxVal+0x35e>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000e3c:	4b67      	ldr	r3, [pc, #412]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	f040 80ef 	bne.w	8001024 <Btc_RxVal+0x320>
				{
					Btc_HighBeam = STD_HIGH;
 8000e46:	4b69      	ldr	r3, [pc, #420]	; (8000fec <Btc_RxVal+0x2e8>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
					Btc_FlashHighBeam = STD_LOW;
 8000e4c:	4b68      	ldr	r3, [pc, #416]	; (8000ff0 <Btc_RxVal+0x2ec>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 8000e52:	4866      	ldr	r0, [pc, #408]	; (8000fec <Btc_RxVal+0x2e8>)
 8000e54:	f00c fc6a 	bl	800d72c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000e58:	e0e4      	b.n	8001024 <Btc_RxVal+0x320>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000e5a:	4b60      	ldr	r3, [pc, #384]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	f040 80e2 	bne.w	8001028 <Btc_RxVal+0x324>
				{
					Btc_HighBeam = STD_LOW;
 8000e64:	4b61      	ldr	r3, [pc, #388]	; (8000fec <Btc_RxVal+0x2e8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 8000e6a:	4860      	ldr	r0, [pc, #384]	; (8000fec <Btc_RxVal+0x2e8>)
 8000e6c:	f00c fc5e 	bl	800d72c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000e70:	e0da      	b.n	8001028 <Btc_RxVal+0x324>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000e72:	4b5a      	ldr	r3, [pc, #360]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	f040 80d8 	bne.w	800102c <Btc_RxVal+0x328>
				{
					Btc_TurnSignalLeft = STD_HIGH;
 8000e7c:	4b5d      	ldr	r3, [pc, #372]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalRight = STD_LOW;
 8000e82:	4b5d      	ldr	r3, [pc, #372]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8000e88:	485a      	ldr	r0, [pc, #360]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000e8a:	f00c fc6f 	bl	800d76c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8000e8e:	485a      	ldr	r0, [pc, #360]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000e90:	f00c fc7c 	bl	800d78c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000e94:	e0ca      	b.n	800102c <Btc_RxVal+0x328>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000e96:	4b51      	ldr	r3, [pc, #324]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	f040 80c8 	bne.w	8001030 <Btc_RxVal+0x32c>
				{
					Btc_TurnSignalLeft = STD_LOW;
 8000ea0:	4b54      	ldr	r3, [pc, #336]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8000ea6:	4853      	ldr	r0, [pc, #332]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000ea8:	f00c fc60 	bl	800d76c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000eac:	e0c0      	b.n	8001030 <Btc_RxVal+0x32c>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000eae:	4b4b      	ldr	r3, [pc, #300]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	f040 80be 	bne.w	8001034 <Btc_RxVal+0x330>
				{
					Btc_TurnSignalRight = STD_HIGH;
 8000eb8:	4b4f      	ldr	r3, [pc, #316]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalLeft = STD_LOW;
 8000ebe:	4b4d      	ldr	r3, [pc, #308]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8000ec4:	484b      	ldr	r0, [pc, #300]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000ec6:	f00c fc51 	bl	800d76c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8000eca:	484b      	ldr	r0, [pc, #300]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000ecc:	f00c fc5e 	bl	800d78c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000ed0:	e0b0      	b.n	8001034 <Btc_RxVal+0x330>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000ed2:	4b42      	ldr	r3, [pc, #264]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	f040 80ae 	bne.w	8001038 <Btc_RxVal+0x334>
				{
					Btc_TurnSignalRight = STD_LOW;
 8000edc:	4b46      	ldr	r3, [pc, #280]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8000ee2:	4845      	ldr	r0, [pc, #276]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000ee4:	f00c fc52 	bl	800d78c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000ee8:	e0a6      	b.n	8001038 <Btc_RxVal+0x334>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000eea:	4b3c      	ldr	r3, [pc, #240]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	f040 80a4 	bne.w	800103c <Btc_RxVal+0x338>
				{
					Btc_HazardLight = STD_HIGH;
 8000ef4:	4b41      	ldr	r3, [pc, #260]	; (8000ffc <Btc_RxVal+0x2f8>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 8000efa:	4840      	ldr	r0, [pc, #256]	; (8000ffc <Btc_RxVal+0x2f8>)
 8000efc:	f00c fc56 	bl	800d7ac <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f00:	e09c      	b.n	800103c <Btc_RxVal+0x338>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f02:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	f040 809a 	bne.w	8001040 <Btc_RxVal+0x33c>
				{
					Btc_HazardLight = STD_LOW;
 8000f0c:	4b3b      	ldr	r3, [pc, #236]	; (8000ffc <Btc_RxVal+0x2f8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 8000f12:	483a      	ldr	r0, [pc, #232]	; (8000ffc <Btc_RxVal+0x2f8>)
 8000f14:	f00c fc4a 	bl	800d7ac <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f18:	e092      	b.n	8001040 <Btc_RxVal+0x33c>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f1a:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	f040 8090 	bne.w	8001044 <Btc_RxVal+0x340>
				{
					Btc_FrontFogLight = STD_HIGH;
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <Btc_RxVal+0x2fc>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 8000f2a:	4835      	ldr	r0, [pc, #212]	; (8001000 <Btc_RxVal+0x2fc>)
 8000f2c:	f00c fc0e 	bl	800d74c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f30:	e088      	b.n	8001044 <Btc_RxVal+0x340>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f32:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	f040 8086 	bne.w	8001048 <Btc_RxVal+0x344>
				{
					Btc_FrontFogLight = STD_LOW;
 8000f3c:	4b30      	ldr	r3, [pc, #192]	; (8001000 <Btc_RxVal+0x2fc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 8000f42:	482f      	ldr	r0, [pc, #188]	; (8001000 <Btc_RxVal+0x2fc>)
 8000f44:	f00c fc02 	bl	800d74c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f48:	e07e      	b.n	8001048 <Btc_RxVal+0x344>
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d17c      	bne.n	800104c <Btc_RxVal+0x348>
				{
					Btc_RearFogLight = STD_HIGH;
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <Btc_RxVal+0x300>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 8000f58:	482a      	ldr	r0, [pc, #168]	; (8001004 <Btc_RxVal+0x300>)
 8000f5a:	f00c fc37 	bl	800d7cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f5e:	e075      	b.n	800104c <Btc_RxVal+0x348>
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d173      	bne.n	8001050 <Btc_RxVal+0x34c>
				{
					Btc_RearFogLight = STD_LOW;
 8000f68:	4b26      	ldr	r3, [pc, #152]	; (8001004 <Btc_RxVal+0x300>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 8000f6e:	4825      	ldr	r0, [pc, #148]	; (8001004 <Btc_RxVal+0x300>)
 8000f70:	f00c fc2c 	bl	800d7cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f74:	e06c      	b.n	8001050 <Btc_RxVal+0x34c>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d16a      	bne.n	8001054 <Btc_RxVal+0x350>
				{
					Btc_BrakeLight = STD_HIGH;
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <Btc_RxVal+0x304>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 8000f84:	4820      	ldr	r0, [pc, #128]	; (8001008 <Btc_RxVal+0x304>)
 8000f86:	f00c fbb1 	bl	800d6ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f8a:	e063      	b.n	8001054 <Btc_RxVal+0x350>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d161      	bne.n	8001058 <Btc_RxVal+0x354>
				{
					Btc_BrakeLight = STD_LOW;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <Btc_RxVal+0x304>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 8000f9a:	481b      	ldr	r0, [pc, #108]	; (8001008 <Btc_RxVal+0x304>)
 8000f9c:	f00c fba6 	bl	800d6ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fa0:	e05a      	b.n	8001058 <Btc_RxVal+0x354>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d158      	bne.n	800105c <Btc_RxVal+0x358>
				{
					Btc_IntLights = STD_HIGH;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <Btc_RxVal+0x308>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8000fb0:	4816      	ldr	r0, [pc, #88]	; (800100c <Btc_RxVal+0x308>)
 8000fb2:	f00c fc4b 	bl	800d84c <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fb6:	e051      	b.n	800105c <Btc_RxVal+0x358>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d14f      	bne.n	8001060 <Btc_RxVal+0x35c>
				{
					Btc_IntLights = STD_LOW;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <Btc_RxVal+0x308>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8000fc6:	4811      	ldr	r0, [pc, #68]	; (800100c <Btc_RxVal+0x308>)
 8000fc8:	f00c fc40 	bl	800d84c <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fcc:	e048      	b.n	8001060 <Btc_RxVal+0x35c>
			default:
				break;
 8000fce:	bf00      	nop
 8000fd0:	e047      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8000fd2:	bf00      	nop
 8000fd4:	e045      	b.n	8001062 <Btc_RxVal+0x35e>
 8000fd6:	bf00      	nop
 8000fd8:	200000b2 	.word	0x200000b2
 8000fdc:	200000bf 	.word	0x200000bf
 8000fe0:	200000bd 	.word	0x200000bd
 8000fe4:	200000b4 	.word	0x200000b4
 8000fe8:	200000b3 	.word	0x200000b3
 8000fec:	200000b5 	.word	0x200000b5
 8000ff0:	200000b6 	.word	0x200000b6
 8000ff4:	200000b8 	.word	0x200000b8
 8000ff8:	200000b9 	.word	0x200000b9
 8000ffc:	200000ba 	.word	0x200000ba
 8001000:	200000b7 	.word	0x200000b7
 8001004:	200000bc 	.word	0x200000bc
 8001008:	200000bb 	.word	0x200000bb
 800100c:	200000be 	.word	0x200000be
				break;
 8001010:	bf00      	nop
 8001012:	e026      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001014:	bf00      	nop
 8001016:	e024      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001018:	bf00      	nop
 800101a:	e022      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 800101c:	bf00      	nop
 800101e:	e020      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001020:	bf00      	nop
 8001022:	e01e      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001024:	bf00      	nop
 8001026:	e01c      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001028:	bf00      	nop
 800102a:	e01a      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 800102c:	bf00      	nop
 800102e:	e018      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001030:	bf00      	nop
 8001032:	e016      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001034:	bf00      	nop
 8001036:	e014      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001038:	bf00      	nop
 800103a:	e012      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 800103c:	bf00      	nop
 800103e:	e010      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001040:	bf00      	nop
 8001042:	e00e      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001044:	bf00      	nop
 8001046:	e00c      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001048:	bf00      	nop
 800104a:	e00a      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 800104c:	bf00      	nop
 800104e:	e008      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001050:	bf00      	nop
 8001052:	e006      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001054:	bf00      	nop
 8001056:	e004      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001058:	bf00      	nop
 800105a:	e002      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 800105c:	bf00      	nop
 800105e:	e000      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001060:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop

08001068 <Btc_MainFunction>:
/***********************************************************************************
* Function: Btc_MainFunction											 		   *
* Description: Process bluetooth communication states.					           *
************************************************************************************/
VOID Btc_MainFunction()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	Btc_RxVal();
 800106c:	f7ff fe4a 	bl	8000d04 <Btc_RxVal>
	Btc_RequestState();
 8001070:	f7ff fe3c 	bl	8000cec <Btc_RequestState>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <CenLoc_State>:
/***********************************************************************************
* Function: CenLoc_State													   	   *
* Description: Process the current and previous state of the central lock.		   *
************************************************************************************/
VOID CenLoc_State()
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	/* Every time the state of the central lock changes
	 * set the alarm to off. */
	CenLoc_SecAlmStateToOff();
 800107c:	f000 f854 	bl	8001128 <CenLoc_SecAlmStateToOff>
	/* If the current state is different than the previous state
	 * update the variables respectively.
	 * Initialize the security alarm application.
	 * Calls for start of OS timer for lock unlock sequence.*/
	if(CenLoc_PreviousState != CenLoc_CurrentState)
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <CenLoc_State+0x88>)
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <CenLoc_State+0x8c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d036      	beq.n	80010fa <CenLoc_State+0x82>
	{
		CenLoc_PreviousStateFlag 	= CenLoc_PreviousState;
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <CenLoc_State+0x88>)
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <CenLoc_State+0x90>)
 8001092:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 		= CenLoc_CurrentState;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <CenLoc_State+0x8c>)
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <CenLoc_State+0x88>)
 800109a:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter 		= STD_LOW;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <CenLoc_State+0x94>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter 	= STD_LOW;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <CenLoc_State+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
		CenLoc_CyclicAlarmCounter	= STD_LOW;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <CenLoc_State+0x9c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
		CenLoc_TurnOnLedCounter		= STD_LOW;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <CenLoc_State+0xa0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 80010b4:	f001 f942 	bl	800233c <SecAlm_Init>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_CenLoc_LockUnlockSequence_TimerHandle, 250);
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <CenLoc_State+0xa4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	21fa      	movs	r1, #250	; 0xfa
 80010be:	4618      	mov	r0, r3
 80010c0:	f00c fc45 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 80010c4:	4811      	ldr	r0, [pc, #68]	; (800110c <CenLoc_State+0x94>)
 80010c6:	f00c f9c5 	bl	800d454 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 80010ca:	4812      	ldr	r0, [pc, #72]	; (8001114 <CenLoc_State+0x9c>)
 80010cc:	f00c f9d2 	bl	800d474 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 80010d0:	4811      	ldr	r0, [pc, #68]	; (8001118 <CenLoc_State+0xa0>)
 80010d2:	f00c f9df 	bl	800d494 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(CenLoc_FollowMeHomeCounter);
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <CenLoc_State+0x98>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f00c f9ea 	bl	800d4b4 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLed_TurnOnCyclic_TimerHandle);
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <CenLoc_State+0xa8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00c fc3f 	bl	800d968 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <CenLoc_State+0xac>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f00c fc3a 	bl	800d968 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f001 f95f 	bl	80023b8 <SecAlm_ToggleAlarmLed>
	}
	else
	{
		/* do nothing */
	}
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000c0 	.word	0x200000c0
 8001104:	200000bf 	.word	0x200000bf
 8001108:	200000c7 	.word	0x200000c7
 800110c:	200000c3 	.word	0x200000c3
 8001110:	200000c5 	.word	0x200000c5
 8001114:	200000c4 	.word	0x200000c4
 8001118:	200000c6 	.word	0x200000c6
 800111c:	20000270 	.word	0x20000270
 8001120:	20000274 	.word	0x20000274
 8001124:	20000278 	.word	0x20000278

08001128 <CenLoc_SecAlmStateToOff>:
/***********************************************************************************
* Function: CenLoc_SecAlmStateToOff												   *
* Description: Turn off the security alarm.										   *
************************************************************************************/
VOID CenLoc_SecAlmStateToOff()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	/* The central lock is on, the security alarm goes off. */
	if(CenLoc_CurrentState == STD_HIGH)
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <CenLoc_SecAlmStateToOff+0x14>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d101      	bne.n	8001138 <CenLoc_SecAlmStateToOff+0x10>
	{
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 8001134:	f001 f902 	bl	800233c <SecAlm_Init>
	}
	else
	{
		/* do nothing */
	}
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200000bf 	.word	0x200000bf

08001140 <CenLoc_FollowMeHome>:
/***********************************************************************************
* Function: CenLoc_FollowMeHome												       *
* Description: Process the state of the follow me home.					 		   *
************************************************************************************/
VOID CenLoc_FollowMeHome()
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	/* Follow me home is on as long as the timer is on. */
	if(CenLoc_FollowMeHomeCounter == 1)
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <CenLoc_FollowMeHome+0x40>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d103      	bne.n	8001154 <CenLoc_FollowMeHome+0x14>
	{
		CenLoc_FollowMeHomeState = STD_HIGH;
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <CenLoc_FollowMeHome+0x44>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001152:	e013      	b.n	800117c <CenLoc_FollowMeHome+0x3c>
	else if(CenLoc_FollowMeHomeCounter == 2)
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <CenLoc_FollowMeHome+0x40>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d10f      	bne.n	800117c <CenLoc_FollowMeHome+0x3c>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_FollowMeHome_TimerHandle);
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <CenLoc_FollowMeHome+0x48>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f00c fc01 	bl	800d968 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		CenLoc_FollowMeHomeState = STD_LOW;
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <CenLoc_FollowMeHome+0x44>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter = 2;
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <CenLoc_FollowMeHome+0x40>)
 800116e:	2202      	movs	r2, #2
 8001170:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(CenLoc_FollowMeHomeCounter);
 8001172:	4b03      	ldr	r3, [pc, #12]	; (8001180 <CenLoc_FollowMeHome+0x40>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f00c f99c 	bl	800d4b4 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200000c5 	.word	0x200000c5
 8001184:	200000c1 	.word	0x200000c1
 8001188:	2000027c 	.word	0x2000027c

0800118c <CenLoc_UnlockSequence>:
/***********************************************************************************
* Function: CenLoc_UnlockSequence												   *
* Description: Process the unlock sequence. 		   							   *
************************************************************************************/
VOID CenLoc_UnlockSequence()
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	/* Stop the timer used for the security alarm LED. */
	Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLed_TurnOnCyclic_TimerHandle);
 8001190:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <CenLoc_UnlockSequence+0x12c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f00c fbe7 	bl	800d968 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	/* Process follow me home state. */
	CenLoc_FollowMeHome();
 800119a:	f7ff ffd1 	bl	8001140 <CenLoc_FollowMeHome>
	/* Sets previous state to high so that on locking it is taken into consideration. */
	localPreviousState = STD_HIGH;
 800119e:	4b47      	ldr	r3, [pc, #284]	; (80012bc <CenLoc_UnlockSequence+0x130>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
	/* Unlocking sequence consists of triggering the hazard lights twice on and twice off.*/
	if(CenLoc_BlinkCounter <= 3)
 80011a4:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <CenLoc_UnlockSequence+0x134>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d871      	bhi.n	8001290 <CenLoc_UnlockSequence+0x104>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80011ac:	4b45      	ldr	r3, [pc, #276]	; (80012c4 <CenLoc_UnlockSequence+0x138>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00c fbca 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == STD_LOW)
 80011ba:	4b43      	ldr	r3, [pc, #268]	; (80012c8 <CenLoc_UnlockSequence+0x13c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f009 f949 	bl	800a456 <osTimerIsRunning>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d106      	bne.n	80011d8 <CenLoc_UnlockSequence+0x4c>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 20000);
 80011ca:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <CenLoc_UnlockSequence+0x13c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f644 6120 	movw	r1, #20000	; 0x4e20
 80011d2:	4618      	mov	r0, r3
 80011d4:	f00c fbbb 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = STD_HIGH;
 80011d8:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <CenLoc_UnlockSequence+0x140>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(CenLoc_FollowMeHomeCounter);
 80011de:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <CenLoc_UnlockSequence+0x140>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f00c f966 	bl	800d4b4 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and the buzzer. */
		switch(CenLoc_BlinkCounter)
 80011e8:	4b35      	ldr	r3, [pc, #212]	; (80012c0 <CenLoc_UnlockSequence+0x134>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d85f      	bhi.n	80012b0 <CenLoc_UnlockSequence+0x124>
 80011f0:	a201      	add	r2, pc, #4	; (adr r2, 80011f8 <CenLoc_UnlockSequence+0x6c>)
 80011f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f6:	bf00      	nop
 80011f8:	08001209 	.word	0x08001209
 80011fc:	0800122b 	.word	0x0800122b
 8001200:	0800124d 	.word	0x0800124d
 8001204:	0800126f 	.word	0x0800126f
		{
			case 0:
				CenLoc_BlinkState = STD_HIGH;
 8001208:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 800120e:	2108      	movs	r1, #8
 8001210:	4830      	ldr	r0, [pc, #192]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 8001212:	f00c f9c9 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001216:	210c      	movs	r1, #12
 8001218:	482e      	ldr	r0, [pc, #184]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 800121a:	f00c f9c5 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f964 	bl	80014f0 <CenLoc_ToggleBuzzer>
				break;
 8001228:	e043      	b.n	80012b2 <CenLoc_UnlockSequence+0x126>
			case 1:
				CenLoc_BlinkState = STD_LOW;
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001230:	2108      	movs	r1, #8
 8001232:	4828      	ldr	r0, [pc, #160]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 8001234:	f00c f9b8 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001238:	210c      	movs	r1, #12
 800123a:	4826      	ldr	r0, [pc, #152]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 800123c:	f00c f9b4 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001240:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f953 	bl	80014f0 <CenLoc_ToggleBuzzer>
				break;
 800124a:	e032      	b.n	80012b2 <CenLoc_UnlockSequence+0x126>
			case 2:
				CenLoc_BlinkState = STD_HIGH;
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001252:	2108      	movs	r1, #8
 8001254:	481f      	ldr	r0, [pc, #124]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 8001256:	f00c f9a7 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800125a:	210c      	movs	r1, #12
 800125c:	481d      	ldr	r0, [pc, #116]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 800125e:	f00c f9a3 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f942 	bl	80014f0 <CenLoc_ToggleBuzzer>
				break;
 800126c:	e021      	b.n	80012b2 <CenLoc_UnlockSequence+0x126>
			case 3:
				CenLoc_BlinkState = STD_LOW;
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001274:	2108      	movs	r1, #8
 8001276:	4817      	ldr	r0, [pc, #92]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 8001278:	f00c f996 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800127c:	210c      	movs	r1, #12
 800127e:	4815      	ldr	r0, [pc, #84]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 8001280:	f00c f992 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f931 	bl	80014f0 <CenLoc_ToggleBuzzer>
				break;
 800128e:	e010      	b.n	80012b2 <CenLoc_UnlockSequence+0x126>
			default:
				break;
		}
	}/* After the sequence is completed, stop the timers and set the variables related to this sequence to out of bounds values to prevent triggering when not requested. */
	else if(CenLoc_BlinkCounter >= 3)
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <CenLoc_UnlockSequence+0x134>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d90c      	bls.n	80012b2 <CenLoc_UnlockSequence+0x126>
	{
		CenLoc_BlinkState = 2;
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 800129a:	2202      	movs	r2, #2
 800129c:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 6;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <CenLoc_UnlockSequence+0x134>)
 80012a0:	2206      	movs	r2, #6
 80012a2:	701a      	strb	r2, [r3, #0]
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <CenLoc_UnlockSequence+0x14c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f00c fb5d 	bl	800d968 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	}
	else
	{
		/* do nothing */
	}
}
 80012ae:	e000      	b.n	80012b2 <CenLoc_UnlockSequence+0x126>
				break;
 80012b0:	bf00      	nop
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000274 	.word	0x20000274
 80012bc:	200000c8 	.word	0x200000c8
 80012c0:	200000c3 	.word	0x200000c3
 80012c4:	20000280 	.word	0x20000280
 80012c8:	2000027c 	.word	0x2000027c
 80012cc:	200000c5 	.word	0x200000c5
 80012d0:	200000c2 	.word	0x200000c2
 80012d4:	200004b8 	.word	0x200004b8
 80012d8:	20000270 	.word	0x20000270

080012dc <CenLoc_LockSequence>:
/***********************************************************************************
* Function: CenLoc_LockSequence													   *
* Description: Process the lock sequence.								 		   *
************************************************************************************/
VOID CenLoc_LockSequence()
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	/* Process follow me home state.*/
	CenLoc_FollowMeHome();
 80012e0:	f7ff ff2e 	bl	8001140 <CenLoc_FollowMeHome>
	/* If the central lock has been on previously
	 * and the variable related to the state of the timer is less than the value of
	 * how many times the hazard lights should turn on on locking, proceed with the processing. */
	if(CenLoc_BlinkCounter <= STD_HIGH && localPreviousState == STD_HIGH)
 80012e4:	4b33      	ldr	r3, [pc, #204]	; (80013b4 <CenLoc_LockSequence+0xd8>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d84f      	bhi.n	800138c <CenLoc_LockSequence+0xb0>
 80012ec:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <CenLoc_LockSequence+0xdc>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d14b      	bne.n	800138c <CenLoc_LockSequence+0xb0>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80012f4:	4b31      	ldr	r3, [pc, #196]	; (80013bc <CenLoc_LockSequence+0xe0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00c fb26 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == STD_LOW)
 8001302:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <CenLoc_LockSequence+0xe4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f009 f8a5 	bl	800a456 <osTimerIsRunning>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d106      	bne.n	8001320 <CenLoc_LockSequence+0x44>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 20000);
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <CenLoc_LockSequence+0xe4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f644 6120 	movw	r1, #20000	; 0x4e20
 800131a:	4618      	mov	r0, r3
 800131c:	f00c fb17 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = STD_HIGH;
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <CenLoc_LockSequence+0xe8>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(CenLoc_FollowMeHomeCounter);
 8001326:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <CenLoc_LockSequence+0xe8>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f00c f8c2 	bl	800d4b4 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and buzzer. */
		switch(CenLoc_BlinkCounter)
 8001330:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <CenLoc_LockSequence+0xd8>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <CenLoc_LockSequence+0x62>
 8001338:	2b01      	cmp	r3, #1
 800133a:	d011      	beq.n	8001360 <CenLoc_LockSequence+0x84>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
				localPreviousState = STD_LOW;
				break;
			default:
				break;
 800133c:	e024      	b.n	8001388 <CenLoc_LockSequence+0xac>
				CenLoc_BlinkState = STD_HIGH;
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <CenLoc_LockSequence+0xec>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001344:	2108      	movs	r1, #8
 8001346:	4821      	ldr	r0, [pc, #132]	; (80013cc <CenLoc_LockSequence+0xf0>)
 8001348:	f00c f92e 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800134c:	210c      	movs	r1, #12
 800134e:	481f      	ldr	r0, [pc, #124]	; (80013cc <CenLoc_LockSequence+0xf0>)
 8001350:	f00c f92a 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001354:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <CenLoc_LockSequence+0xec>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f8c9 	bl	80014f0 <CenLoc_ToggleBuzzer>
				break;
 800135e:	e013      	b.n	8001388 <CenLoc_LockSequence+0xac>
				CenLoc_BlinkState = STD_LOW;
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <CenLoc_LockSequence+0xec>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001366:	2108      	movs	r1, #8
 8001368:	4818      	ldr	r0, [pc, #96]	; (80013cc <CenLoc_LockSequence+0xf0>)
 800136a:	f00c f91d 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800136e:	210c      	movs	r1, #12
 8001370:	4816      	ldr	r0, [pc, #88]	; (80013cc <CenLoc_LockSequence+0xf0>)
 8001372:	f00c f919 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <CenLoc_LockSequence+0xec>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f8b8 	bl	80014f0 <CenLoc_ToggleBuzzer>
				localPreviousState = STD_LOW;
 8001380:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <CenLoc_LockSequence+0xdc>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
				break;
 8001386:	bf00      	nop
		switch(CenLoc_BlinkCounter)
 8001388:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 800138a:	e011      	b.n	80013b0 <CenLoc_LockSequence+0xd4>
	else if(CenLoc_BlinkCounter == 2)
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <CenLoc_LockSequence+0xd8>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d10d      	bne.n	80013b0 <CenLoc_LockSequence+0xd4>
		CenLoc_BlinkState = 2;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <CenLoc_LockSequence+0xec>)
 8001396:	2202      	movs	r2, #2
 8001398:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 4;
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <CenLoc_LockSequence+0xd8>)
 800139c:	2204      	movs	r2, #4
 800139e:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <CenLoc_LockSequence+0xd8>)
 80013a2:	f00c f857 	bl	800d454 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <CenLoc_LockSequence+0xf4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f00c fadc 	bl	800d968 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200000c3 	.word	0x200000c3
 80013b8:	200000c8 	.word	0x200000c8
 80013bc:	20000280 	.word	0x20000280
 80013c0:	2000027c 	.word	0x2000027c
 80013c4:	200000c5 	.word	0x200000c5
 80013c8:	200000c2 	.word	0x200000c2
 80013cc:	200004b8 	.word	0x200004b8
 80013d0:	20000270 	.word	0x20000270

080013d4 <CenLoc_ControlAlarmLed>:
/***********************************************************************************
* Function: CenLoc_ControlAlarmLed												   *
* Description: Controls the security alarm LED 		   							   *
************************************************************************************/
VOID CenLoc_ControlAlarmLed()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	/* Check if the central lock state is set to high. */
	if(CenLoc_CurrentState == STD_HIGH)
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <CenLoc_ControlAlarmLed+0xc4>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d10b      	bne.n	80013f8 <CenLoc_ControlAlarmLed+0x24>
	{
		/* Set the security alarm LED to off. */
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 ffe9 	bl	80023b8 <SecAlm_ToggleAlarmLed>
		/* Set the timer flag to 0. */
		CenLoc_TurnOnLedCounter = STD_LOW;
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <CenLoc_ControlAlarmLed+0xc8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
		/* Stop the timer related to the LED cyclic trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <CenLoc_ControlAlarmLed+0xcc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f00c fab9 	bl	800d968 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		else
		{
			/* do nothing */
		}
	}
}
 80013f6:	e04c      	b.n	8001492 <CenLoc_ControlAlarmLed+0xbe>
	else if(CenLoc_CurrentState == STD_LOW)
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <CenLoc_ControlAlarmLed+0xc4>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d148      	bne.n	8001492 <CenLoc_ControlAlarmLed+0xbe>
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLed_TurnOnCyclic_TimerHandle) == STD_LOW && Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == STD_LOW)
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <CenLoc_ControlAlarmLed+0xd0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f009 f826 	bl	800a456 <osTimerIsRunning>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10e      	bne.n	800142e <CenLoc_ControlAlarmLed+0x5a>
 8001410:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <CenLoc_ControlAlarmLed+0xcc>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f009 f81e 	bl	800a456 <osTimerIsRunning>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d106      	bne.n	800142e <CenLoc_ControlAlarmLed+0x5a>
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLed_TurnOnCyclic_TimerHandle, 3750);
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <CenLoc_ControlAlarmLed+0xd0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f640 61a6 	movw	r1, #3750	; 0xea6
 8001428:	4618      	mov	r0, r3
 800142a:	f00c fa90 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		if(CenLoc_CyclicAlarmCounter == STD_HIGH)
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <CenLoc_ControlAlarmLed+0xd4>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d12d      	bne.n	8001492 <CenLoc_ControlAlarmLed+0xbe>
			if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == STD_LOW)
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <CenLoc_ControlAlarmLed+0xcc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f009 f80b 	bl	800a456 <osTimerIsRunning>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d105      	bne.n	8001452 <CenLoc_ControlAlarmLed+0x7e>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLedTurnOn_TimerHandle, 250);
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <CenLoc_ControlAlarmLed+0xcc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	21fa      	movs	r1, #250	; 0xfa
 800144c:	4618      	mov	r0, r3
 800144e:	f00c fa7e 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
			if(CenLoc_TurnOnLedCounter < STD_HIGH)
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <CenLoc_ControlAlarmLed+0xc8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d103      	bne.n	8001462 <CenLoc_ControlAlarmLed+0x8e>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_HIGH);
 800145a:	2001      	movs	r0, #1
 800145c:	f000 ffac 	bl	80023b8 <SecAlm_ToggleAlarmLed>
}
 8001460:	e017      	b.n	8001492 <CenLoc_ControlAlarmLed+0xbe>
			else if(CenLoc_TurnOnLedCounter == STD_HIGH)
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <CenLoc_ControlAlarmLed+0xc8>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d113      	bne.n	8001492 <CenLoc_ControlAlarmLed+0xbe>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 800146a:	2000      	movs	r0, #0
 800146c:	f000 ffa4 	bl	80023b8 <SecAlm_ToggleAlarmLed>
				CenLoc_TurnOnLedCounter = STD_LOW;
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <CenLoc_ControlAlarmLed+0xc8>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
				CenLoc_CyclicAlarmCounter = STD_LOW;
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <CenLoc_ControlAlarmLed+0xd4>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
				Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 800147c:	480a      	ldr	r0, [pc, #40]	; (80014a8 <CenLoc_ControlAlarmLed+0xd4>)
 800147e:	f00b fff9 	bl	800d474 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
				Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <CenLoc_ControlAlarmLed+0xc8>)
 8001484:	f00c f806 	bl	800d494 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <CenLoc_ControlAlarmLed+0xcc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f00c fa6b 	bl	800d968 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200000bf 	.word	0x200000bf
 800149c:	200000c6 	.word	0x200000c6
 80014a0:	20000278 	.word	0x20000278
 80014a4:	20000274 	.word	0x20000274
 80014a8:	200000c4 	.word	0x200000c4

080014ac <CenLoc_LockUnlockStates>:
/***********************************************************************************
* Function: CenLoc_LockUnlockStates												   *
* Description: Check for the state of the central lock.					 		   *
************************************************************************************/
VOID CenLoc_LockUnlockStates()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	/* If the central lock state is set to high and the security alarm is set to off. */
	if(CenLoc_CurrentState == STD_HIGH && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <CenLoc_LockUnlockStates+0x3c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d108      	bne.n	80014ca <CenLoc_LockUnlockStates+0x1e>
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <CenLoc_LockUnlockStates+0x40>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d104      	bne.n	80014ca <CenLoc_LockUnlockStates+0x1e>
	{
		/* Perform the related activities. */
		CenLoc_UnlockSequence();
 80014c0:	f7ff fe64 	bl	800118c <CenLoc_UnlockSequence>
		CenLoc_ControlAlarmLed();
 80014c4:	f7ff ff86 	bl	80013d4 <CenLoc_ControlAlarmLed>
	}
	else
	{
		/* do nothing */
	}
}
 80014c8:	e00b      	b.n	80014e2 <CenLoc_LockUnlockStates+0x36>
	else if(CenLoc_CurrentState == STD_LOW && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <CenLoc_LockUnlockStates+0x3c>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d107      	bne.n	80014e2 <CenLoc_LockUnlockStates+0x36>
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <CenLoc_LockUnlockStates+0x40>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d103      	bne.n	80014e2 <CenLoc_LockUnlockStates+0x36>
		CenLoc_LockSequence();
 80014da:	f7ff feff 	bl	80012dc <CenLoc_LockSequence>
		CenLoc_ControlAlarmLed();
 80014de:	f7ff ff79 	bl	80013d4 <CenLoc_ControlAlarmLed>
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200000bf 	.word	0x200000bf
 80014ec:	20000110 	.word	0x20000110

080014f0 <CenLoc_ToggleBuzzer>:
/***********************************************************************************
* Function: CenLoc_ToggleBuzzer													   *
* Description: Trigger central lock buzzer. 		   							   *
************************************************************************************/
VOID CenLoc_ToggleBuzzer(uint8 PinState)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	461a      	mov	r2, r3
 80014fe:	2104      	movs	r1, #4
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <CenLoc_ToggleBuzzer+0x20>)
 8001502:	f00c fa12 	bl	800d92a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40020400 	.word	0x40020400

08001514 <CenLoc_MainFunction>:
/***********************************************************************************
* Function: CenLoc_MainFunction													   *
* Description: Central lock main function. Process the states of the application.  *
************************************************************************************/
VOID CenLoc_MainFunction()
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	CenLoc_State();
 8001518:	f7ff fdae 	bl	8001078 <CenLoc_State>
	CenLoc_LockUnlockStates();
 800151c:	f7ff ffc6 	bl	80014ac <CenLoc_LockUnlockStates>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <DiagCtrl_MainFunction>:
/***********************************************************************************
* Function: DiagCtrl_MainFunction										   		   *
* Description: Application main function.		 		   						   *
************************************************************************************/
VOID DiagCtrl_MainFunction()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	DiagCtrl_ProcessRequestedData();
 8001528:	f000 f802 	bl	8001530 <DiagCtrl_ProcessRequestedData>
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <DiagCtrl_ProcessRequestedData>:
/***********************************************************************************
* Function: DiagCtrl_ProcessRequestedData										   *
* Description: Process the measured requested data.		 		   				   *
************************************************************************************/
VOID DiagCtrl_ProcessRequestedData()
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	static uint8 I2cOneLcd_FaultValue_Four = 0;
	static uint8 I2cOneLcd_FaultValue_Five = 0;
	static uint8 I2cOneLcd_FaultValue_Six = 0;
	static uint8 I2cOneLcd_FaultValue_Seven = 0;
	static uint8 I2cOneLcd_FaultValue_Eight = 0;
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&LightSensor_RequestedValue, 0);
 8001534:	2100      	movs	r1, #0
 8001536:	4845      	ldr	r0, [pc, #276]	; (800164c <DiagCtrl_ProcessRequestedData+0x11c>)
 8001538:	f00c f884 	bl	800d644 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&VibrationSensor_RequestedValue, 1);
 800153c:	2101      	movs	r1, #1
 800153e:	4844      	ldr	r0, [pc, #272]	; (8001650 <DiagCtrl_ProcessRequestedData+0x120>)
 8001540:	f00c f880 	bl	800d644 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_One, 17);
 8001544:	2111      	movs	r1, #17
 8001546:	4843      	ldr	r0, [pc, #268]	; (8001654 <DiagCtrl_ProcessRequestedData+0x124>)
 8001548:	f00b fef2 	bl	800d330 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Two, 18);
 800154c:	2112      	movs	r1, #18
 800154e:	4842      	ldr	r0, [pc, #264]	; (8001658 <DiagCtrl_ProcessRequestedData+0x128>)
 8001550:	f00b feee 	bl	800d330 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Three, 19);
 8001554:	2113      	movs	r1, #19
 8001556:	4841      	ldr	r0, [pc, #260]	; (800165c <DiagCtrl_ProcessRequestedData+0x12c>)
 8001558:	f00b feea 	bl	800d330 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Four, 20);
 800155c:	2114      	movs	r1, #20
 800155e:	4840      	ldr	r0, [pc, #256]	; (8001660 <DiagCtrl_ProcessRequestedData+0x130>)
 8001560:	f00b fee6 	bl	800d330 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_One, 33);
 8001564:	2121      	movs	r1, #33	; 0x21
 8001566:	483f      	ldr	r0, [pc, #252]	; (8001664 <DiagCtrl_ProcessRequestedData+0x134>)
 8001568:	f00b fee2 	bl	800d330 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Two, 34);
 800156c:	2122      	movs	r1, #34	; 0x22
 800156e:	483e      	ldr	r0, [pc, #248]	; (8001668 <DiagCtrl_ProcessRequestedData+0x138>)
 8001570:	f00b fede 	bl	800d330 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Three, 35);
 8001574:	2123      	movs	r1, #35	; 0x23
 8001576:	483d      	ldr	r0, [pc, #244]	; (800166c <DiagCtrl_ProcessRequestedData+0x13c>)
 8001578:	f00b feda 	bl	800d330 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Four, 36);
 800157c:	2124      	movs	r1, #36	; 0x24
 800157e:	483c      	ldr	r0, [pc, #240]	; (8001670 <DiagCtrl_ProcessRequestedData+0x140>)
 8001580:	f00b fed6 	bl	800d330 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Five, 37);
 8001584:	2125      	movs	r1, #37	; 0x25
 8001586:	483b      	ldr	r0, [pc, #236]	; (8001674 <DiagCtrl_ProcessRequestedData+0x144>)
 8001588:	f00b fed2 	bl	800d330 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Six, 38);
 800158c:	2126      	movs	r1, #38	; 0x26
 800158e:	483a      	ldr	r0, [pc, #232]	; (8001678 <DiagCtrl_ProcessRequestedData+0x148>)
 8001590:	f00b fece 	bl	800d330 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Seven, 39);
 8001594:	2127      	movs	r1, #39	; 0x27
 8001596:	4839      	ldr	r0, [pc, #228]	; (800167c <DiagCtrl_ProcessRequestedData+0x14c>)
 8001598:	f00b feca 	bl	800d330 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Eight, 40);
 800159c:	2128      	movs	r1, #40	; 0x28
 800159e:	4838      	ldr	r0, [pc, #224]	; (8001680 <DiagCtrl_ProcessRequestedData+0x150>)
 80015a0:	f00b fec6 	bl	800d330 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>

	if(BtcUart_FaultValue_One != 0 ||
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <DiagCtrl_ProcessRequestedData+0x124>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10b      	bne.n	80015c4 <DiagCtrl_ProcessRequestedData+0x94>
			BtcUart_FaultValue_Two != 0 ||
 80015ac:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <DiagCtrl_ProcessRequestedData+0x128>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
	if(BtcUart_FaultValue_One != 0 ||
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d107      	bne.n	80015c4 <DiagCtrl_ProcessRequestedData+0x94>
			BtcUart_FaultValue_Three != 0 ||
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <DiagCtrl_ProcessRequestedData+0x12c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Two != 0 ||
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d103      	bne.n	80015c4 <DiagCtrl_ProcessRequestedData+0x94>
			BtcUart_FaultValue_Four != 0)
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <DiagCtrl_ProcessRequestedData+0x130>)
 80015be:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Three != 0 ||
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <DiagCtrl_ProcessRequestedData+0x9a>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_BLUETOOTH_MODULE_MALFUNCTION);
 80015c4:	2022      	movs	r0, #34	; 0x22
 80015c6:	f002 fbcd 	bl	8003d64 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(I2cOneLcd_FaultValue_One != 0 ||
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <DiagCtrl_ProcessRequestedData+0x134>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d11b      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Two != 0 ||
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <DiagCtrl_ProcessRequestedData+0x138>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
	if(I2cOneLcd_FaultValue_One != 0 ||
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d117      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Three != 0 ||
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <DiagCtrl_ProcessRequestedData+0x13c>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Two != 0 ||
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d113      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Four != 0 ||
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <DiagCtrl_ProcessRequestedData+0x140>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Three != 0 ||
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10f      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Five != 0 ||
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <DiagCtrl_ProcessRequestedData+0x144>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Four != 0 ||
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10b      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Six != 0 ||
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <DiagCtrl_ProcessRequestedData+0x148>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Five != 0 ||
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d107      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Seven != 0 ||
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <DiagCtrl_ProcessRequestedData+0x14c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Six != 0 ||
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d103      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Eight != 0)
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <DiagCtrl_ProcessRequestedData+0x150>)
 8001604:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Seven != 0 ||
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <DiagCtrl_ProcessRequestedData+0xe0>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LCD_MODULE_MALFUNCTION);
 800160a:	2062      	movs	r0, #98	; 0x62
 800160c:	f002 fbaa 	bl	8003d64 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(LightSensor_RequestedValue < 100)
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <DiagCtrl_ProcessRequestedData+0x11c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b63      	cmp	r3, #99	; 0x63
 8001616:	d802      	bhi.n	800161e <DiagCtrl_ProcessRequestedData+0xee>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LIGHT_SENSOR_MALFUNCTION);
 8001618:	2003      	movs	r0, #3
 800161a:	f002 fba3 	bl	8003d64 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(VibrationSensor_RequestedValue < 100)
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <DiagCtrl_ProcessRequestedData+0x120>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b63      	cmp	r3, #99	; 0x63
 8001624:	d802      	bhi.n	800162c <DiagCtrl_ProcessRequestedData+0xfc>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_VIBRATION_SENSOR_MALFUNCTION);
 8001626:	2013      	movs	r0, #19
 8001628:	f002 fb9c 	bl	8003d64 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree == 0)
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <DiagCtrl_ProcessRequestedData+0x154>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <DiagCtrl_ProcessRequestedData+0x10a>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 8001634:	2012      	movs	r0, #18
 8001636:	f002 fb95 	bl	8003d64 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour == 0)
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <DiagCtrl_ProcessRequestedData+0x158>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <DiagCtrl_ProcessRequestedData+0x118>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 8001642:	2002      	movs	r0, #2
 8001644:	f002 fb8e 	bl	8003d64 <Dem_ReceiveFault>
	}
	else
	{
		/* do nothing */
	}
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200000cc 	.word	0x200000cc
 8001650:	200000d0 	.word	0x200000d0
 8001654:	200000d4 	.word	0x200000d4
 8001658:	200000d5 	.word	0x200000d5
 800165c:	200000d6 	.word	0x200000d6
 8001660:	200000d7 	.word	0x200000d7
 8001664:	200000d8 	.word	0x200000d8
 8001668:	200000d9 	.word	0x200000d9
 800166c:	200000da 	.word	0x200000da
 8001670:	200000db 	.word	0x200000db
 8001674:	200000dc 	.word	0x200000dc
 8001678:	200000dd 	.word	0x200000dd
 800167c:	200000de 	.word	0x200000de
 8001680:	200000df 	.word	0x200000df
 8001684:	200006cd 	.word	0x200006cd
 8001688:	200006dd 	.word	0x200006dd

0800168c <ExtLights_TurnSignalHazardLight>:
/***********************************************************************************
* Function: ExtLights_TurnSignalHazardLight										   *
* Description: Process the turn signals and hazard lights states. 		   		   *
************************************************************************************/
VOID ExtLights_TurnSignalHazardLight()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	/* If the turn signal left is set on. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8001690:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <ExtLights_TurnSignalHazardLight+0x138>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d123      	bne.n	80016e0 <ExtLights_TurnSignalHazardLight+0x54>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 8001698:	4b4b      	ldr	r3, [pc, #300]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f008 feda 	bl	800a456 <osTimerIsRunning>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d106      	bne.n	80016b6 <ExtLights_TurnSignalHazardLight+0x2a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80016a8:	4b47      	ldr	r3, [pc, #284]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00c f94c 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_LTSFlag % 2 == 1)
 80016b6:	4b45      	ldr	r3, [pc, #276]	; (80017cc <ExtLights_TurnSignalHazardLight+0x140>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d004      	beq.n	80016cc <ExtLights_TurnSignalHazardLight+0x40>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80016c2:	2108      	movs	r1, #8
 80016c4:	4842      	ldr	r0, [pc, #264]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 80016c6:	f00b ff6f 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80016ca:	e009      	b.n	80016e0 <ExtLights_TurnSignalHazardLight+0x54>
		}
		else if(ExtLights_LTSFlag % 2 == 0)
 80016cc:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <ExtLights_TurnSignalHazardLight+0x140>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d103      	bne.n	80016e0 <ExtLights_TurnSignalHazardLight+0x54>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80016d8:	2108      	movs	r1, #8
 80016da:	483d      	ldr	r0, [pc, #244]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 80016dc:	f00b ff71 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the turn signal right is set on. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 80016e0:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <ExtLights_TurnSignalHazardLight+0x148>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d123      	bne.n	8001730 <ExtLights_TurnSignalHazardLight+0xa4>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 80016e8:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f008 feb2 	bl	800a456 <osTimerIsRunning>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d106      	bne.n	8001706 <ExtLights_TurnSignalHazardLight+0x7a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80016f8:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001700:	4618      	mov	r0, r3
 8001702:	f00c f924 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_RTSFlag % 2 == 1)
 8001706:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <ExtLights_TurnSignalHazardLight+0x14c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d004      	beq.n	800171c <ExtLights_TurnSignalHazardLight+0x90>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001712:	210c      	movs	r1, #12
 8001714:	482e      	ldr	r0, [pc, #184]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 8001716:	f00b ff47 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 800171a:	e009      	b.n	8001730 <ExtLights_TurnSignalHazardLight+0xa4>
		}
		else if(ExtLights_RTSFlag % 2 == 0)
 800171c:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <ExtLights_TurnSignalHazardLight+0x14c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d103      	bne.n	8001730 <ExtLights_TurnSignalHazardLight+0xa4>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001728:	210c      	movs	r1, #12
 800172a:	4829      	ldr	r0, [pc, #164]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 800172c:	f00b ff49 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the hazard light is set on. */
	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001730:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <ExtLights_TurnSignalHazardLight+0x150>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d12b      	bne.n	8001790 <ExtLights_TurnSignalHazardLight+0x104>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f008 fe8a 	bl	800a456 <osTimerIsRunning>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d106      	bne.n	8001756 <ExtLights_TurnSignalHazardLight+0xca>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001750:	4618      	mov	r0, r3
 8001752:	f00c f8fc 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_HLFlag % 2 == 1)
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <ExtLights_TurnSignalHazardLight+0x154>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d008      	beq.n	8001774 <ExtLights_TurnSignalHazardLight+0xe8>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001762:	2108      	movs	r1, #8
 8001764:	481a      	ldr	r0, [pc, #104]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 8001766:	f00b ff1f 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800176a:	210c      	movs	r1, #12
 800176c:	4818      	ldr	r0, [pc, #96]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 800176e:	f00b ff1b 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001772:	e00d      	b.n	8001790 <ExtLights_TurnSignalHazardLight+0x104>
		}
		else if(ExtLights_HLFlag % 2 == 0)
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <ExtLights_TurnSignalHazardLight+0x154>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <ExtLights_TurnSignalHazardLight+0x104>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001780:	2108      	movs	r1, #8
 8001782:	4813      	ldr	r0, [pc, #76]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 8001784:	f00b ff1d 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001788:	210c      	movs	r1, #12
 800178a:	4811      	ldr	r0, [pc, #68]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 800178c:	f00b ff19 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <ExtLights_TurnSignalHazardLight+0x148>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <ExtLights_TurnSignalHazardLight+0x11c>
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <ExtLights_TurnSignalHazardLight+0x150>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d103      	bne.n	80017a8 <ExtLights_TurnSignalHazardLight+0x11c>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80017a0:	210c      	movs	r1, #12
 80017a2:	480b      	ldr	r0, [pc, #44]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 80017a4:	f00b ff0d 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <ExtLights_TurnSignalHazardLight+0x138>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d107      	bne.n	80017c0 <ExtLights_TurnSignalHazardLight+0x134>
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <ExtLights_TurnSignalHazardLight+0x150>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d103      	bne.n	80017c0 <ExtLights_TurnSignalHazardLight+0x134>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80017b8:	2108      	movs	r1, #8
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 80017bc:	f00b ff01 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	else
	{
		/* do nothing */
	}
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200000e6 	.word	0x200000e6
 80017c8:	20000280 	.word	0x20000280
 80017cc:	200000f4 	.word	0x200000f4
 80017d0:	200004b8 	.word	0x200004b8
 80017d4:	200000e7 	.word	0x200000e7
 80017d8:	200000f0 	.word	0x200000f0
 80017dc:	200000ea 	.word	0x200000ea
 80017e0:	200000f8 	.word	0x200000f8

080017e4 <ExtLights_PrevStateTSHL>:
* Function: ExtLights_PrevStateTSHL										           *
* Description: Checks the current state and previous state of turn signals and     *
* 			   hazard lights. 		   											   *
************************************************************************************/
VOID ExtLights_PrevStateTSHL()
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalLeft_CurrentState != ExtLights_LTS_PrevState)
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <ExtLights_PrevStateTSHL+0x68>)
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <ExtLights_PrevStateTSHL+0x6c>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d009      	beq.n	8001808 <ExtLights_PrevStateTSHL+0x24>
	{
		ExtLights_LTS_PrevState = ExtLights_TurnSignalLeft_CurrentState;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <ExtLights_PrevStateTSHL+0x68>)
 80017f6:	781a      	ldrb	r2, [r3, #0]
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <ExtLights_PrevStateTSHL+0x6c>)
 80017fa:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag = 0;
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <ExtLights_PrevStateTSHL+0x70>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Lts_Counter(&ExtLights_LTSFlag);
 8001802:	4814      	ldr	r0, [pc, #80]	; (8001854 <ExtLights_PrevStateTSHL+0x70>)
 8001804:	f00b fe66 	bl	800d4d4 <Rte_Write_Os_R_OsPort_Os_Lts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalRight_CurrentState != ExtLights_RTS_PrevState)
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <ExtLights_PrevStateTSHL+0x74>)
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <ExtLights_PrevStateTSHL+0x78>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d009      	beq.n	8001828 <ExtLights_PrevStateTSHL+0x44>
	{
		ExtLights_RTS_PrevState = ExtLights_TurnSignalRight_CurrentState;
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <ExtLights_PrevStateTSHL+0x74>)
 8001816:	781a      	ldrb	r2, [r3, #0]
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <ExtLights_PrevStateTSHL+0x78>)
 800181a:	701a      	strb	r2, [r3, #0]
		ExtLights_RTSFlag = 0;
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <ExtLights_PrevStateTSHL+0x7c>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Rts_Counter(&ExtLights_RTSFlag);
 8001822:	480f      	ldr	r0, [pc, #60]	; (8001860 <ExtLights_PrevStateTSHL+0x7c>)
 8001824:	f00b fe66 	bl	800d4f4 <Rte_Write_Os_R_OsPort_Os_Rts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_HazardLight_CurrentState != ExtLights_HL_PrevState)
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <ExtLights_PrevStateTSHL+0x80>)
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <ExtLights_PrevStateTSHL+0x84>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d009      	beq.n	8001848 <ExtLights_PrevStateTSHL+0x64>
	{
		ExtLights_HL_PrevState = ExtLights_HazardLight_CurrentState;
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <ExtLights_PrevStateTSHL+0x80>)
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <ExtLights_PrevStateTSHL+0x84>)
 800183a:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag = 0;
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <ExtLights_PrevStateTSHL+0x88>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_HL_Counter(&ExtLights_HLFlag);
 8001842:	480a      	ldr	r0, [pc, #40]	; (800186c <ExtLights_PrevStateTSHL+0x88>)
 8001844:	f00b fe66 	bl	800d514 <Rte_Write_Os_R_OsPort_Os_HL_Counter>
	}
	else
	{
		/* do nothing */
	}
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200000e6 	.word	0x200000e6
 8001850:	200000ed 	.word	0x200000ed
 8001854:	200000f4 	.word	0x200000f4
 8001858:	200000e7 	.word	0x200000e7
 800185c:	200000ec 	.word	0x200000ec
 8001860:	200000f0 	.word	0x200000f0
 8001864:	200000ea 	.word	0x200000ea
 8001868:	200000ee 	.word	0x200000ee
 800186c:	200000f8 	.word	0x200000f8

08001870 <ExtLights_LightState>:
/***********************************************************************************
* Function: ExtLights_LightState										   		   *
* Description: Controls the lights states.								 		   *
************************************************************************************/
VOID ExtLights_LightState()
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	/* Process turn signals state. */
	ExtLights_PrevStateTSHL();
 8001874:	f7ff ffb6 	bl	80017e4 <ExtLights_PrevStateTSHL>
	/* Follow me home is on, then turn on the respective lights. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8001878:	4b9d      	ldr	r3, [pc, #628]	; (8001af0 <ExtLights_LightState+0x280>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d110      	bne.n	80018a2 <ExtLights_LightState+0x32>
	{
		ExtLights_LightSwitchMode();
 8001880:	f000 f966 	bl	8001b50 <ExtLights_LightSwitchMode>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001884:	2100      	movs	r1, #0
 8001886:	489b      	ldr	r0, [pc, #620]	; (8001af4 <ExtLights_LightState+0x284>)
 8001888:	f00b fe8e 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 800188c:	2104      	movs	r1, #4
 800188e:	4899      	ldr	r0, [pc, #612]	; (8001af4 <ExtLights_LightState+0x284>)
 8001890:	f00b fe8a 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		ExtLights_LowBeam_CurrentState = STD_HIGH;
 8001894:	4b98      	ldr	r3, [pc, #608]	; (8001af8 <ExtLights_LightState+0x288>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
		ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 800189a:	4b98      	ldr	r3, [pc, #608]	; (8001afc <ExtLights_LightState+0x28c>)
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	e017      	b.n	80018d2 <ExtLights_LightState+0x62>
	}/* Follow me home is off, turn off the lights.*/
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 80018a2:	4b93      	ldr	r3, [pc, #588]	; (8001af0 <ExtLights_LightState+0x280>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d113      	bne.n	80018d2 <ExtLights_LightState+0x62>
	{
		ExtLights_LightSwitchMode();
 80018aa:	f000 f951 	bl	8001b50 <ExtLights_LightSwitchMode>
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 80018ae:	4b94      	ldr	r3, [pc, #592]	; (8001b00 <ExtLights_LightState+0x290>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10d      	bne.n	80018d2 <ExtLights_LightState+0x62>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80018b6:	2100      	movs	r1, #0
 80018b8:	488e      	ldr	r0, [pc, #568]	; (8001af4 <ExtLights_LightState+0x284>)
 80018ba:	f00b fe82 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80018be:	2104      	movs	r1, #4
 80018c0:	488c      	ldr	r0, [pc, #560]	; (8001af4 <ExtLights_LightState+0x284>)
 80018c2:	f00b fe7e 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 80018c6:	4b8c      	ldr	r3, [pc, #560]	; (8001af8 <ExtLights_LightState+0x288>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 80018cc:	4b8b      	ldr	r3, [pc, #556]	; (8001afc <ExtLights_LightState+0x28c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If any light state is set to on, then stop the follow me home. */
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 80018d2:	4b8c      	ldr	r3, [pc, #560]	; (8001b04 <ExtLights_LightState+0x294>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d017      	beq.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 80018da:	4b8b      	ldr	r3, [pc, #556]	; (8001b08 <ExtLights_LightState+0x298>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d013      	beq.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 80018e2:	4b87      	ldr	r3, [pc, #540]	; (8001b00 <ExtLights_LightState+0x290>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10f      	bne.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 80018ea:	4b88      	ldr	r3, [pc, #544]	; (8001b0c <ExtLights_LightState+0x29c>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d00b      	beq.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 80018f2:	4b87      	ldr	r3, [pc, #540]	; (8001b10 <ExtLights_LightState+0x2a0>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d007      	beq.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 80018fa:	4b86      	ldr	r3, [pc, #536]	; (8001b14 <ExtLights_LightState+0x2a4>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d003      	beq.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001902:	4b85      	ldr	r3, [pc, #532]	; (8001b18 <ExtLights_LightState+0x2a8>)
 8001904:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8001906:	2b01      	cmp	r3, #1
 8001908:	d11a      	bne.n	8001940 <ExtLights_LightState+0xd0>
	{
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 800190a:	4b7d      	ldr	r3, [pc, #500]	; (8001b00 <ExtLights_LightState+0x290>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d116      	bne.n	8001940 <ExtLights_LightState+0xd0>
		{
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(STD_LOW);
 8001912:	2000      	movs	r0, #0
 8001914:	f00b feca 	bl	800d6ac <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(2);
 8001918:	2002      	movs	r0, #2
 800191a:	f00b fd5b 	bl	800d3d4 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
			Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(2);
 800191e:	2002      	movs	r0, #2
 8001920:	f00b fdc8 	bl	800d4b4 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001924:	2100      	movs	r1, #0
 8001926:	4873      	ldr	r0, [pc, #460]	; (8001af4 <ExtLights_LightState+0x284>)
 8001928:	f00b fe4b 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 800192c:	2104      	movs	r1, #4
 800192e:	4871      	ldr	r0, [pc, #452]	; (8001af4 <ExtLights_LightState+0x284>)
 8001930:	f00b fe47 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8001934:	4b70      	ldr	r3, [pc, #448]	; (8001af8 <ExtLights_LightState+0x288>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 800193a:	4b70      	ldr	r3, [pc, #448]	; (8001afc <ExtLights_LightState+0x28c>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* Control the turn signals for the central lock lock unlock sequence when requested. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_HIGH)
 8001940:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <ExtLights_LightState+0x2ac>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d108      	bne.n	800195a <ExtLights_LightState+0xea>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001948:	2108      	movs	r1, #8
 800194a:	4875      	ldr	r0, [pc, #468]	; (8001b20 <ExtLights_LightState+0x2b0>)
 800194c:	f00b fe2c 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001950:	210c      	movs	r1, #12
 8001952:	4873      	ldr	r0, [pc, #460]	; (8001b20 <ExtLights_LightState+0x2b0>)
 8001954:	f00b fe28 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001958:	e016      	b.n	8001988 <ExtLights_LightState+0x118>
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_LOW)
 800195a:	4b70      	ldr	r3, [pc, #448]	; (8001b1c <ExtLights_LightState+0x2ac>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d108      	bne.n	8001974 <ExtLights_LightState+0x104>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001962:	2108      	movs	r1, #8
 8001964:	486e      	ldr	r0, [pc, #440]	; (8001b20 <ExtLights_LightState+0x2b0>)
 8001966:	f00b fe2c 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800196a:	210c      	movs	r1, #12
 800196c:	486c      	ldr	r0, [pc, #432]	; (8001b20 <ExtLights_LightState+0x2b0>)
 800196e:	f00b fe28 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
 8001972:	e009      	b.n	8001988 <ExtLights_LightState+0x118>
	}/* Allows for turning on the hazard lights or turn signals independently of other states in the system. */
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 2 || Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 4)
 8001974:	4b69      	ldr	r3, [pc, #420]	; (8001b1c <ExtLights_LightState+0x2ac>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d003      	beq.n	8001984 <ExtLights_LightState+0x114>
 800197c:	4b67      	ldr	r3, [pc, #412]	; (8001b1c <ExtLights_LightState+0x2ac>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b04      	cmp	r3, #4
 8001982:	d101      	bne.n	8001988 <ExtLights_LightState+0x118>
	{
		ExtLights_TurnSignalHazardLight();
 8001984:	f7ff fe82 	bl	800168c <ExtLights_TurnSignalHazardLight>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_FlashHighBeam_CurrentState == STD_HIGH)
 8001988:	4b5f      	ldr	r3, [pc, #380]	; (8001b08 <ExtLights_LightState+0x298>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d103      	bne.n	8001998 <ExtLights_LightState+0x128>
	{
		ExtLights_HighBeam(STD_HIGH);
 8001990:	2001      	movs	r0, #1
 8001992:	f000 f9cd 	bl	8001d30 <ExtLights_HighBeam>
 8001996:	e006      	b.n	80019a6 <ExtLights_LightState+0x136>
	}
	else if(ExtLights_FlashHighBeam_CurrentState == STD_LOW)
 8001998:	4b5b      	ldr	r3, [pc, #364]	; (8001b08 <ExtLights_LightState+0x298>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <ExtLights_LightState+0x136>
	{
		ExtLights_HighBeam(STD_LOW);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f000 f9c5 	bl	8001d30 <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_HighBeam_CurrentState == STD_HIGH)
 80019a6:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <ExtLights_LightState+0x29c>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d103      	bne.n	80019b6 <ExtLights_LightState+0x146>
	{
		ExtLights_HighBeam(STD_HIGH);
 80019ae:	2001      	movs	r0, #1
 80019b0:	f000 f9be 	bl	8001d30 <ExtLights_HighBeam>
 80019b4:	e006      	b.n	80019c4 <ExtLights_LightState+0x154>
	}
	else if(ExtLights_HighBeam_CurrentState == STD_LOW)
 80019b6:	4b55      	ldr	r3, [pc, #340]	; (8001b0c <ExtLights_LightState+0x29c>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <ExtLights_LightState+0x154>
	{
		ExtLights_HighBeam(STD_LOW);
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 f9b6 	bl	8001d30 <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the brake lights. */
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH)
 80019c4:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <ExtLights_LightState+0x294>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d111      	bne.n	80019f0 <ExtLights_LightState+0x180>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 80019cc:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <ExtLights_LightState+0x294>)
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	4b54      	ldr	r3, [pc, #336]	; (8001b24 <ExtLights_LightState+0x2b4>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d006      	beq.n	80019e6 <ExtLights_LightState+0x176>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 80019d8:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <ExtLights_LightState+0x294>)
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	4b51      	ldr	r3, [pc, #324]	; (8001b24 <ExtLights_LightState+0x2b4>)
 80019de:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 80019e0:	2000      	movs	r0, #0
 80019e2:	f00b fc57 	bl	800d294 <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 80019e6:	2104      	movs	r1, #4
 80019e8:	484f      	ldr	r0, [pc, #316]	; (8001b28 <ExtLights_LightState+0x2b8>)
 80019ea:	f00b fddd 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80019ee:	e014      	b.n	8001a1a <ExtLights_LightState+0x1aa>
	}
	else if(ExtLights_BrakeLight_CurrentState == STD_LOW)
 80019f0:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <ExtLights_LightState+0x294>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d110      	bne.n	8001a1a <ExtLights_LightState+0x1aa>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 80019f8:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <ExtLights_LightState+0x294>)
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <ExtLights_LightState+0x2b4>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d006      	beq.n	8001a12 <ExtLights_LightState+0x1a2>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 8001a04:	4b3f      	ldr	r3, [pc, #252]	; (8001b04 <ExtLights_LightState+0x294>)
 8001a06:	781a      	ldrb	r2, [r3, #0]
 8001a08:	4b46      	ldr	r3, [pc, #280]	; (8001b24 <ExtLights_LightState+0x2b4>)
 8001a0a:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f00b fc41 	bl	800d294 <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 8001a12:	2104      	movs	r1, #4
 8001a14:	4844      	ldr	r0, [pc, #272]	; (8001b28 <ExtLights_LightState+0x2b8>)
 8001a16:	f00b fdd4 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the rear fog lights. */
	if(ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8001a1a:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d111      	bne.n	8001a46 <ExtLights_LightState+0x1d6>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 8001a22:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a24:	781a      	ldrb	r2, [r3, #0]
 8001a26:	4b42      	ldr	r3, [pc, #264]	; (8001b30 <ExtLights_LightState+0x2c0>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d006      	beq.n	8001a3c <ExtLights_LightState+0x1cc>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 8001a2e:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a30:	781a      	ldrb	r2, [r3, #0]
 8001a32:	4b3f      	ldr	r3, [pc, #252]	; (8001b30 <ExtLights_LightState+0x2c0>)
 8001a34:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f00b fc4c 	bl	800d2d4 <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8001a3c:	210c      	movs	r1, #12
 8001a3e:	483a      	ldr	r0, [pc, #232]	; (8001b28 <ExtLights_LightState+0x2b8>)
 8001a40:	f00b fdb2 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001a44:	e014      	b.n	8001a70 <ExtLights_LightState+0x200>
	}
	else if(ExtLights_RearFogLight_CurrentState == STD_LOW)
 8001a46:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d110      	bne.n	8001a70 <ExtLights_LightState+0x200>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 8001a4e:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <ExtLights_LightState+0x2c0>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d006      	beq.n	8001a68 <ExtLights_LightState+0x1f8>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 8001a5a:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <ExtLights_LightState+0x2c0>)
 8001a60:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f00b fc36 	bl	800d2d4 <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8001a68:	210c      	movs	r1, #12
 8001a6a:	482f      	ldr	r0, [pc, #188]	; (8001b28 <ExtLights_LightState+0x2b8>)
 8001a6c:	f00b fda9 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the front fog lights. */
	if(ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 8001a70:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d111      	bne.n	8001a9c <ExtLights_LightState+0x22c>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 8001a78:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001a7a:	781a      	ldrb	r2, [r3, #0]
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <ExtLights_LightState+0x2c8>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d006      	beq.n	8001a92 <ExtLights_LightState+0x222>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <ExtLights_LightState+0x2c8>)
 8001a8a:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f00b fc11 	bl	800d2b4 <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8001a92:	2108      	movs	r1, #8
 8001a94:	4824      	ldr	r0, [pc, #144]	; (8001b28 <ExtLights_LightState+0x2b8>)
 8001a96:	f00b fd87 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001a9a:	e014      	b.n	8001ac6 <ExtLights_LightState+0x256>
	}
	else if(ExtLights_FrontFogLight_CurrentState == STD_LOW)
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d110      	bne.n	8001ac6 <ExtLights_LightState+0x256>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001aa6:	781a      	ldrb	r2, [r3, #0]
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <ExtLights_LightState+0x2c8>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d006      	beq.n	8001abe <ExtLights_LightState+0x24e>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 8001ab0:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <ExtLights_LightState+0x2c8>)
 8001ab6:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f00b fbfb 	bl	800d2b4 <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8001abe:	2108      	movs	r1, #8
 8001ac0:	4819      	ldr	r0, [pc, #100]	; (8001b28 <ExtLights_LightState+0x2b8>)
 8001ac2:	f00b fd7e 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on the reverse light. */
	ExtLights_ReverseLight(ExtLights_ReverseLight_CurrentState);
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <ExtLights_LightState+0x2cc>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f942 	bl	8001d54 <ExtLights_ReverseLight>

	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <ExtLights_LightState+0x2d0>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d108      	bne.n	8001aea <ExtLights_LightState+0x27a>
	{
		ExtLights_ReverseLight_CurrentState = STD_LOW;
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <ExtLights_LightState+0x2cc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
		ExtLights_RearFogLight_CurrentState = STD_LOW;
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
		ExtLights_FrontFogLight_CurrentState = STD_LOW;
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200000c1 	.word	0x200000c1
 8001af4:	20000350 	.word	0x20000350
 8001af8:	200000e8 	.word	0x200000e8
 8001afc:	200000e9 	.word	0x200000e9
 8001b00:	200000e3 	.word	0x200000e3
 8001b04:	200000e2 	.word	0x200000e2
 8001b08:	200000e1 	.word	0x200000e1
 8001b0c:	200000e4 	.word	0x200000e4
 8001b10:	200000e6 	.word	0x200000e6
 8001b14:	200000e7 	.word	0x200000e7
 8001b18:	200000ea 	.word	0x200000ea
 8001b1c:	200000c2 	.word	0x200000c2
 8001b20:	200004b8 	.word	0x200004b8
 8001b24:	20000102 	.word	0x20000102
 8001b28:	20000404 	.word	0x20000404
 8001b2c:	200000eb 	.word	0x200000eb
 8001b30:	20000100 	.word	0x20000100
 8001b34:	200000e5 	.word	0x200000e5
 8001b38:	20000101 	.word	0x20000101
 8001b3c:	200000e0 	.word	0x200000e0
 8001b40:	200000bf 	.word	0x200000bf

08001b44 <ExtLights_MainFunction>:
* Function: ExtLights_MainFunction										   		   *
* Description: Exterior lights application main function. Controls application	   *
* 			   states. 		   													   *
************************************************************************************/
VOID ExtLights_MainFunction()
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	ExtLights_LightState();
 8001b48:	f7ff fe92 	bl	8001870 <ExtLights_LightState>
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <ExtLights_LightSwitchMode>:
/***********************************************************************************
* Function: ExtLights_LightSwitchMode										   	   *
* Description: Control the light switch.								 		   *
************************************************************************************/
VOID ExtLights_LightSwitchMode()
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	/* Switch through the light switch states. */
	switch(ExtLights_LightsSwitch_CurrentState)
 8001b54:	4b6e      	ldr	r3, [pc, #440]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	3b17      	subs	r3, #23
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	f200 80d3 	bhi.w	8001d06 <ExtLights_LightSwitchMode+0x1b6>
 8001b60:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <ExtLights_LightSwitchMode+0x18>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b79 	.word	0x08001b79
 8001b6c:	08001bc3 	.word	0x08001bc3
 8001b70:	08001c63 	.word	0x08001c63
 8001b74:	08001cbd 	.word	0x08001cbd
	{
		/* Switch is on position zero, turn off the lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001b78:	4b66      	ldr	r3, [pc, #408]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	4b64      	ldr	r3, [pc, #400]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d00f      	beq.n	8001ba4 <ExtLights_LightSwitchMode+0x54>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001b84:	4b62      	ldr	r3, [pc, #392]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	4b62      	ldr	r3, [pc, #392]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001b8a:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f00b fbb1 	bl	800d2f4 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001b92:	2000      	movs	r0, #0
 8001b94:	f00b fbbd 	bl	800d312 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001b98:	4b5f      	ldr	r3, [pc, #380]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001b9e:	4b5f      	ldr	r3, [pc, #380]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	485e      	ldr	r0, [pc, #376]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001ba8:	f00b fd0b 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001bac:	2104      	movs	r1, #4
 8001bae:	485c      	ldr	r0, [pc, #368]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001bb0:	f00b fd07 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8001bb4:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001bba:	4b58      	ldr	r3, [pc, #352]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
			break;
 8001bc0:	e0a4      	b.n	8001d0c <ExtLights_LightSwitchMode+0x1bc>
		/* Switch is on position one, turn automatic lights controlled by sensor's input. */
		case EXTLIGHTS_LIGHTSWITCH_STATEONE:
			/* Read the sensor status. */
			if(Rte_P_Os_OsPort_Os_Counter % 39 == 0)
 8001bc2:	4b58      	ldr	r3, [pc, #352]	; (8001d24 <ExtLights_LightSwitchMode+0x1d4>)
 8001bc4:	6819      	ldr	r1, [r3, #0]
 8001bc6:	4b58      	ldr	r3, [pc, #352]	; (8001d28 <ExtLights_LightSwitchMode+0x1d8>)
 8001bc8:	fba3 2301 	umull	r2, r3, r3, r1
 8001bcc:	1aca      	subs	r2, r1, r3
 8001bce:	0852      	lsrs	r2, r2, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	095a      	lsrs	r2, r3, #5
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	1aca      	subs	r2, r1, r3
 8001be0:	2a00      	cmp	r2, #0
 8001be2:	d102      	bne.n	8001bea <ExtLights_LightSwitchMode+0x9a>
			{
				Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(EXTLIGHTS_LS_REQUEST);
 8001be4:	2000      	movs	r0, #0
 8001be6:	f000 fbf9 	bl	80023dc <SenCtrl_ProcessSensorValue>
			}
			else
			{
				/* do nothing */
			}
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001bea:	4b4a      	ldr	r3, [pc, #296]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	4b48      	ldr	r3, [pc, #288]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d00f      	beq.n	8001c16 <ExtLights_LightSwitchMode+0xc6>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001bf6:	4b46      	ldr	r3, [pc, #280]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	4b46      	ldr	r3, [pc, #280]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001bfc:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f00b fb78 	bl	800d2f4 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001c04:	2000      	movs	r0, #0
 8001c06:	f00b fb84 	bl	800d312 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001c0a:	4b43      	ldr	r3, [pc, #268]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001c10:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
			else
			{
				/* do nothing */
			}
			/* If the sensor status is on, turn on the lights to on. */
			if(ExtLights_LightSensorState == 1)
 8001c16:	4b45      	ldr	r3, [pc, #276]	; (8001d2c <ExtLights_LightSwitchMode+0x1dc>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d10e      	bne.n	8001c3c <ExtLights_LightSwitchMode+0xec>
			{
				ExtLights_LowBeam_CurrentState = STD_HIGH;
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8001c24:	4b3d      	ldr	r3, [pc, #244]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	483c      	ldr	r0, [pc, #240]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c2e:	f00b fcbb 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001c32:	2104      	movs	r1, #4
 8001c34:	483a      	ldr	r0, [pc, #232]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c36:	f00b fcb7 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				ExtLights_LowBeam_CurrentState = STD_LOW;
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
			}
			break;
 8001c3a:	e066      	b.n	8001d0a <ExtLights_LightSwitchMode+0x1ba>
			else if(ExtLights_LightSensorState != 1)
 8001c3c:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <ExtLights_LightSwitchMode+0x1dc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d062      	beq.n	8001d0a <ExtLights_LightSwitchMode+0x1ba>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001c44:	4b34      	ldr	r3, [pc, #208]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001c4a:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001c50:	2100      	movs	r1, #0
 8001c52:	4833      	ldr	r0, [pc, #204]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c54:	f00b fcb5 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001c58:	2104      	movs	r1, #4
 8001c5a:	4831      	ldr	r0, [pc, #196]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c5c:	f00b fcb1 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			break;
 8001c60:	e053      	b.n	8001d0a <ExtLights_LightSwitchMode+0x1ba>
		/* Switch is on position three, turn on position lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETWO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001c62:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001c64:	781a      	ldrb	r2, [r3, #0]
 8001c66:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d00f      	beq.n	8001c8e <ExtLights_LightSwitchMode+0x13e>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001c6e:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001c74:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f00b fb3c 	bl	800d2f4 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f00b fb48 	bl	800d312 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001c82:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4823      	ldr	r0, [pc, #140]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c92:	f00b fc89 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001c96:	2104      	movs	r1, #4
 8001c98:	4821      	ldr	r0, [pc, #132]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c9a:	f00b fc85 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Write_TimH_TimHPort_Tim2Ccr1(500);
 8001c9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ca2:	f00b fb27 	bl	800d2f4 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
			Rte_Write_TimH_TimHPort_Tim2Ccr2(1500);
 8001ca6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001caa:	f00b fb32 	bl	800d312 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
			break;
 8001cba:	e027      	b.n	8001d0c <ExtLights_LightSwitchMode+0x1bc>
		/* Switch is on position four, turn on night time lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001cbe:	781a      	ldrb	r2, [r3, #0]
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d00f      	beq.n	8001ce8 <ExtLights_LightSwitchMode+0x198>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001cca:	781a      	ldrb	r2, [r3, #0]
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001cce:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f00b fb0f 	bl	800d2f4 <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f00b fb1b 	bl	800d312 <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001ce8:	2100      	movs	r1, #0
 8001cea:	480d      	ldr	r0, [pc, #52]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001cec:	f00b fc5c 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001cf0:	2104      	movs	r1, #4
 8001cf2:	480b      	ldr	r0, [pc, #44]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001cf4:	f00b fc58 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			ExtLights_LowBeam_CurrentState = STD_HIGH;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
			break;
 8001d04:	e002      	b.n	8001d0c <ExtLights_LightSwitchMode+0x1bc>
		default:
			break;
 8001d06:	bf00      	nop
 8001d08:	e000      	b.n	8001d0c <ExtLights_LightSwitchMode+0x1bc>
			break;
 8001d0a:	bf00      	nop
	}
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200000e3 	.word	0x200000e3
 8001d14:	20000103 	.word	0x20000103
 8001d18:	200000e8 	.word	0x200000e8
 8001d1c:	200000e9 	.word	0x200000e9
 8001d20:	20000350 	.word	0x20000350
 8001d24:	20000200 	.word	0x20000200
 8001d28:	a41a41a5 	.word	0xa41a41a5
 8001d2c:	200000fc 	.word	0x200000fc

08001d30 <ExtLights_HighBeam>:
/***********************************************************************************
* Function: ExtLights_HighBeam										   			   *
* Description: High beam trigger. 		  										   *
************************************************************************************/
VOID ExtLights_HighBeam(uint8 PinState)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d42:	4803      	ldr	r0, [pc, #12]	; (8001d50 <ExtLights_HighBeam+0x20>)
 8001d44:	f00b fdf1 	bl	800d92a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40020000 	.word	0x40020000

08001d54 <ExtLights_ReverseLight>:
/***********************************************************************************
* Function: ExtLights_ReverseLight										   		   *
* Description: Reverse light trigger. 		   									   *
************************************************************************************/
VOID ExtLights_ReverseLight(uint8 PinState)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	461a      	mov	r2, r3
 8001d62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d66:	4803      	ldr	r0, [pc, #12]	; (8001d74 <ExtLights_ReverseLight+0x20>)
 8001d68:	f00b fddf 	bl	800d92a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40020400 	.word	0x40020400

08001d78 <IntLights_RxBtcState>:
/***********************************************************************************
* Function: IntLights_RxBtcState										   		   *
* Description: Process command. 		   		   						           *
************************************************************************************/
VOID IntLights_RxBtcState()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	/* Process the state of the interior lights according to system state. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <IntLights_RxBtcState+0x4c>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d102      	bne.n	8001d8a <IntLights_RxBtcState+0x12>
	{
		IntLights_CurrentState = STD_HIGH;
 8001d84:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <IntLights_RxBtcState+0x50>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_LOW)
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <IntLights_RxBtcState+0x4c>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <IntLights_RxBtcState+0x28>
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <IntLights_RxBtcState+0x54>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <IntLights_RxBtcState+0x28>
	{
		IntLights_CurrentState = STD_LOW;
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <IntLights_RxBtcState+0x50>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_HIGH)
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <IntLights_RxBtcState+0x4c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d106      	bne.n	8001db6 <IntLights_RxBtcState+0x3e>
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <IntLights_RxBtcState+0x54>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d102      	bne.n	8001db6 <IntLights_RxBtcState+0x3e>
	{
		IntLights_CurrentState = STD_HIGH;
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <IntLights_RxBtcState+0x50>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel3);
 8001db6:	2108      	movs	r1, #8
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <IntLights_RxBtcState+0x58>)
 8001dba:	f00b fbf5 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200000c1 	.word	0x200000c1
 8001dc8:	20000104 	.word	0x20000104
 8001dcc:	200000be 	.word	0x200000be
 8001dd0:	20000350 	.word	0x20000350

08001dd4 <IntLights_MainFunction>:
/***********************************************************************************
* Function: IntLights_MainFunction										           *
* Description: Interior lights main function for the application and state process.*
************************************************************************************/
VOID IntLights_MainFunction()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	IntLights_RxBtcState();
 8001dd8:	f7ff ffce 	bl	8001d78 <IntLights_RxBtcState>
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <Pdc_MainFunction>:
/***********************************************************************************
* Function: Pdc_MainFunction													   *
* Description: Main function application. 		   			                       *
************************************************************************************/
VOID Pdc_MainFunction()
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	if(Rte_P_Btc_BtcPort_Btc_ReverseLight == STD_HIGH)
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <Pdc_MainFunction+0x58>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d104      	bne.n	8001df6 <Pdc_MainFunction+0x16>
	{
		Pdc_Front_ProcessData();
 8001dec:	f000 f864 	bl	8001eb8 <Pdc_Front_ProcessData>
		Pdc_Rear_ProcessData();
 8001df0:	f000 f830 	bl	8001e54 <Pdc_Rear_ProcessData>
	}
	else
	{
		/* do nothing */
	}
}
 8001df4:	e01e      	b.n	8001e34 <Pdc_MainFunction+0x54>
	else if(Rte_P_Btc_BtcPort_Btc_ReverseLight == STD_LOW)
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <Pdc_MainFunction+0x58>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d11a      	bne.n	8001e34 <Pdc_MainFunction+0x54>
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN, STD_LOW);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2120      	movs	r1, #32
 8001e02:	480e      	ldr	r0, [pc, #56]	; (8001e3c <Pdc_MainFunction+0x5c>)
 8001e04:	f00b fd91 	bl	800d92a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcR_Buzzer_TimerHandle);
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <Pdc_MainFunction+0x60>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f00b fdab 	bl	800d968 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcR_DistanceRange = 0;
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <Pdc_MainFunction+0x64>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN, STD_LOW);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e1e:	480a      	ldr	r0, [pc, #40]	; (8001e48 <Pdc_MainFunction+0x68>)
 8001e20:	f00b fd83 	bl	800d92a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcF_Buzzer_TimerHandle);
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <Pdc_MainFunction+0x6c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f00b fd9d 	bl	800d968 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcF_DistanceRange = 0;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <Pdc_MainFunction+0x70>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200000bd 	.word	0x200000bd
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	20000288 	.word	0x20000288
 8001e44:	20000108 	.word	0x20000108
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	2000028c 	.word	0x2000028c
 8001e50:	2000010c 	.word	0x2000010c

08001e54 <Pdc_Rear_ProcessData>:
/***********************************************************************************
* Function: Pdc_Rear_ProcessData												   *
* Description: Process distance data.		   			                           *
************************************************************************************/
VOID Pdc_Rear_ProcessData()
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Rear_Distance = (3 * Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour) / 4;
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <Pdc_Rear_ProcessData+0x50>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	da00      	bge.n	8001e6a <Pdc_Rear_ProcessData+0x16>
 8001e68:	3303      	adds	r3, #3
 8001e6a:	109b      	asrs	r3, r3, #2
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <Pdc_Rear_ProcessData+0x54>)
 8001e70:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE)
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <Pdc_Rear_ProcessData+0x54>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b14      	cmp	r3, #20
 8001e78:	d801      	bhi.n	8001e7e <Pdc_Rear_ProcessData+0x2a>
	{
		Pdc_Rear_TriggerBuzzer();
 8001e7a:	f000 f851 	bl	8001f20 <Pdc_Rear_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance >= PDC_MAX_DISTANCE)
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <Pdc_Rear_ProcessData+0x54>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b13      	cmp	r3, #19
 8001e84:	d90c      	bls.n	8001ea0 <Pdc_Rear_ProcessData+0x4c>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN, STD_LOW);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2120      	movs	r1, #32
 8001e8a:	4808      	ldr	r0, [pc, #32]	; (8001eac <Pdc_Rear_ProcessData+0x58>)
 8001e8c:	f00b fd4d 	bl	800d92a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcR_Buzzer_TimerHandle);
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <Pdc_Rear_ProcessData+0x5c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f00b fd67 	bl	800d968 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcR_DistanceRange = 0;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <Pdc_Rear_ProcessData+0x60>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200006dd 	.word	0x200006dd
 8001ea8:	20000105 	.word	0x20000105
 8001eac:	40020400 	.word	0x40020400
 8001eb0:	20000288 	.word	0x20000288
 8001eb4:	20000108 	.word	0x20000108

08001eb8 <Pdc_Front_ProcessData>:
/***********************************************************************************
* Function: Pdc_Front_ProcessData												   *
* Description: Process distance data. 		   			                           *
************************************************************************************/
VOID Pdc_Front_ProcessData()
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Front_Distance = (3 * Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree) / 4;
 8001ebc:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <Pdc_Front_ProcessData+0x54>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	da00      	bge.n	8001ece <Pdc_Front_ProcessData+0x16>
 8001ecc:	3303      	adds	r3, #3
 8001ece:	109b      	asrs	r3, r3, #2
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <Pdc_Front_ProcessData+0x58>)
 8001ed4:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE)
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <Pdc_Front_ProcessData+0x58>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b14      	cmp	r3, #20
 8001edc:	d801      	bhi.n	8001ee2 <Pdc_Front_ProcessData+0x2a>
	{
		Pdc_Front_TriggerBuzzer();
 8001ede:	f000 f897 	bl	8002010 <Pdc_Front_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance >= PDC_MAX_DISTANCE)
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <Pdc_Front_ProcessData+0x58>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b13      	cmp	r3, #19
 8001ee8:	d90d      	bls.n	8001f06 <Pdc_Front_ProcessData+0x4e>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN, STD_LOW);
 8001eea:	2200      	movs	r2, #0
 8001eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef0:	4808      	ldr	r0, [pc, #32]	; (8001f14 <Pdc_Front_ProcessData+0x5c>)
 8001ef2:	f00b fd1a 	bl	800d92a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcF_Buzzer_TimerHandle);
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <Pdc_Front_ProcessData+0x60>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f00b fd34 	bl	800d968 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcF_DistanceRange = 0;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <Pdc_Front_ProcessData+0x64>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200006cd 	.word	0x200006cd
 8001f10:	20000106 	.word	0x20000106
 8001f14:	40020800 	.word	0x40020800
 8001f18:	2000028c 	.word	0x2000028c
 8001f1c:	2000010c 	.word	0x2000010c

08001f20 <Pdc_Rear_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Rear_TriggerBuzzer												   *
* Description: Control buzzer.		   			                                   *
************************************************************************************/
VOID Pdc_Rear_TriggerBuzzer()
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcR_Buzzer_TimerHandle) == 0)
 8001f24:	4b37      	ldr	r3, [pc, #220]	; (8002004 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f008 fa94 	bl	800a456 <osTimerIsRunning>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d139      	bne.n	8001fa8 <Pdc_Rear_TriggerBuzzer+0x88>
	{
		switch(PdcR_DistanceRange)
 8001f34:	4b34      	ldr	r3, [pc, #208]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d833      	bhi.n	8001fa6 <Pdc_Rear_TriggerBuzzer+0x86>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <Pdc_Rear_TriggerBuzzer+0x24>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f55 	.word	0x08001f55
 8001f48:	08001f6b 	.word	0x08001f6b
 8001f4c:	08001f7f 	.word	0x08001f7f
 8001f50:	08001f93 	.word	0x08001f93
		{
			case 1:
				PdcR_DistanceRange = 0;
 8001f54:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f62:	4618      	mov	r0, r3
 8001f64:	f00b fcf3 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8001f68:	e01e      	b.n	8001fa8 <Pdc_Rear_TriggerBuzzer+0x88>
			case 2:
				PdcR_DistanceRange = 0;
 8001f6a:	4b27      	ldr	r3, [pc, #156]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 8001f70:	4b24      	ldr	r3, [pc, #144]	; (8002004 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	21fa      	movs	r1, #250	; 0xfa
 8001f76:	4618      	mov	r0, r3
 8001f78:	f00b fce9 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8001f7c:	e014      	b.n	8001fa8 <Pdc_Rear_TriggerBuzzer+0x88>
			case 3:
				PdcR_DistanceRange = 0;
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 8001f84:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	217d      	movs	r1, #125	; 0x7d
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f00b fcdf 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8001f90:	e00a      	b.n	8001fa8 <Pdc_Rear_TriggerBuzzer+0x88>
			case 4:
				PdcR_DistanceRange = 0;
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	214b      	movs	r1, #75	; 0x4b
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f00b fcd5 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8001fa4:	e000      	b.n	8001fa8 <Pdc_Rear_TriggerBuzzer+0x88>
			default:
				break;
 8001fa6:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE && Pdc_Rear_Distance >= PDC_FIRST_SAFE_DISTANCE)
 8001fa8:	4b18      	ldr	r3, [pc, #96]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b14      	cmp	r3, #20
 8001fae:	d806      	bhi.n	8001fbe <Pdc_Rear_TriggerBuzzer+0x9e>
 8001fb0:	4b16      	ldr	r3, [pc, #88]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b10      	cmp	r3, #16
 8001fb6:	d902      	bls.n	8001fbe <Pdc_Rear_TriggerBuzzer+0x9e>
	{
		PdcR_DistanceRange = 1;
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_SECOND_SAFE_DISTANCE)
 8001fbe:	4b13      	ldr	r3, [pc, #76]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b11      	cmp	r3, #17
 8001fc4:	d806      	bhi.n	8001fd4 <Pdc_Rear_TriggerBuzzer+0xb4>
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b0d      	cmp	r3, #13
 8001fcc:	d902      	bls.n	8001fd4 <Pdc_Rear_TriggerBuzzer+0xb4>
	{
		PdcR_DistanceRange = 2;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_THIRD_SAFE_DISTANCE)
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b0e      	cmp	r3, #14
 8001fda:	d806      	bhi.n	8001fea <Pdc_Rear_TriggerBuzzer+0xca>
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b0a      	cmp	r3, #10
 8001fe2:	d902      	bls.n	8001fea <Pdc_Rear_TriggerBuzzer+0xca>
	{
		PdcR_DistanceRange = 3;
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_THIRD_SAFE_DISTANCE && Pdc_Rear_Distance != 0)
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b0b      	cmp	r3, #11
 8001ff0:	d806      	bhi.n	8002000 <Pdc_Rear_TriggerBuzzer+0xe0>
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <Pdc_Rear_TriggerBuzzer+0xe0>
	{
		PdcR_DistanceRange = 4;
 8001ffa:	4b03      	ldr	r3, [pc, #12]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000288 	.word	0x20000288
 8002008:	20000108 	.word	0x20000108
 800200c:	20000105 	.word	0x20000105

08002010 <Pdc_Front_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Front_TriggerBuzzer												   *
* Description: Control buzzer		   			   								   *
************************************************************************************/
VOID Pdc_Front_TriggerBuzzer()
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcF_Buzzer_TimerHandle) == 0)
 8002014:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <Pdc_Front_TriggerBuzzer+0xe4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f008 fa1c 	bl	800a456 <osTimerIsRunning>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d139      	bne.n	8002098 <Pdc_Front_TriggerBuzzer+0x88>
	{
		switch(PdcF_DistanceRange)
 8002024:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3b01      	subs	r3, #1
 800202a:	2b03      	cmp	r3, #3
 800202c:	d833      	bhi.n	8002096 <Pdc_Front_TriggerBuzzer+0x86>
 800202e:	a201      	add	r2, pc, #4	; (adr r2, 8002034 <Pdc_Front_TriggerBuzzer+0x24>)
 8002030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002034:	08002045 	.word	0x08002045
 8002038:	0800205b 	.word	0x0800205b
 800203c:	0800206f 	.word	0x0800206f
 8002040:	08002083 	.word	0x08002083
		{
			case 1:
				PdcF_DistanceRange = 0;
 8002044:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <Pdc_Front_TriggerBuzzer+0xe4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002052:	4618      	mov	r0, r3
 8002054:	f00b fc7b 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002058:	e01e      	b.n	8002098 <Pdc_Front_TriggerBuzzer+0x88>
			case 2:
				PdcF_DistanceRange = 0;
 800205a:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 8002060:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <Pdc_Front_TriggerBuzzer+0xe4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	21fa      	movs	r1, #250	; 0xfa
 8002066:	4618      	mov	r0, r3
 8002068:	f00b fc71 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 800206c:	e014      	b.n	8002098 <Pdc_Front_TriggerBuzzer+0x88>
			case 3:
				PdcF_DistanceRange = 0;
 800206e:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <Pdc_Front_TriggerBuzzer+0xe4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	217d      	movs	r1, #125	; 0x7d
 800207a:	4618      	mov	r0, r3
 800207c:	f00b fc67 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002080:	e00a      	b.n	8002098 <Pdc_Front_TriggerBuzzer+0x88>
			case 4:
				PdcF_DistanceRange = 0;
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <Pdc_Front_TriggerBuzzer+0xe4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	214b      	movs	r1, #75	; 0x4b
 800208e:	4618      	mov	r0, r3
 8002090:	f00b fc5d 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002094:	e000      	b.n	8002098 <Pdc_Front_TriggerBuzzer+0x88>
			default:
				break;
 8002096:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE && Pdc_Front_Distance >= PDC_FIRST_SAFE_DISTANCE)
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b14      	cmp	r3, #20
 800209e:	d806      	bhi.n	80020ae <Pdc_Front_TriggerBuzzer+0x9e>
 80020a0:	4b16      	ldr	r3, [pc, #88]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b10      	cmp	r3, #16
 80020a6:	d902      	bls.n	80020ae <Pdc_Front_TriggerBuzzer+0x9e>
	{
		PdcF_DistanceRange = 1;
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_SECOND_SAFE_DISTANCE)
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b11      	cmp	r3, #17
 80020b4:	d806      	bhi.n	80020c4 <Pdc_Front_TriggerBuzzer+0xb4>
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b0d      	cmp	r3, #13
 80020bc:	d902      	bls.n	80020c4 <Pdc_Front_TriggerBuzzer+0xb4>
	{
		PdcF_DistanceRange = 2;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 80020c0:	2202      	movs	r2, #2
 80020c2:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_THIRD_SAFE_DISTANCE)
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b0e      	cmp	r3, #14
 80020ca:	d806      	bhi.n	80020da <Pdc_Front_TriggerBuzzer+0xca>
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b0a      	cmp	r3, #10
 80020d2:	d902      	bls.n	80020da <Pdc_Front_TriggerBuzzer+0xca>
	{
		PdcF_DistanceRange = 3;
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 80020d6:	2203      	movs	r2, #3
 80020d8:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_THIRD_SAFE_DISTANCE && Pdc_Front_Distance != 0)
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b0b      	cmp	r3, #11
 80020e0:	d806      	bhi.n	80020f0 <Pdc_Front_TriggerBuzzer+0xe0>
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <Pdc_Front_TriggerBuzzer+0xe0>
	{
		PdcF_DistanceRange = 4;
 80020ea:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 80020ec:	2204      	movs	r2, #4
 80020ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	2000028c 	.word	0x2000028c
 80020f8:	2000010c 	.word	0x2000010c
 80020fc:	20000106 	.word	0x20000106

08002100 <SecAlm_LightsBuzzerControl>:
/***********************************************************************************
* Function: SecAlm_LightsBuzzerControl										       *
* Description: Controls the lights and buzzer in case of alarm trigger. 		   *
************************************************************************************/
VOID SecAlm_LightsBuzzerControl()
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint32 sensorStatus = STD_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
	/* Get the sensor status. */
	sensorStatus = SecAlm_VibSenStatus();
 800210a:	f000 f893 	bl	8002234 <SecAlm_VibSenStatus>
 800210e:	4603      	mov	r3, r0
 8002110:	607b      	str	r3, [r7, #4]
	/* If the trigger was previously on and now it is off. */
	if(SecAlm_TriggerPreviousState != SecAlm_Trigger && !SecAlm_Trigger)
 8002112:	4b3f      	ldr	r3, [pc, #252]	; (8002210 <SecAlm_LightsBuzzerControl+0x110>)
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	4b3f      	ldr	r3, [pc, #252]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d006      	beq.n	800212c <SecAlm_LightsBuzzerControl+0x2c>
 800211e:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <SecAlm_LightsBuzzerControl+0x2c>
	{
		/* Reset the counter. */
		SecAlm_TriggerIRQCounterForTimer4 = STD_LOW;
 8002126:	4b3c      	ldr	r3, [pc, #240]	; (8002218 <SecAlm_LightsBuzzerControl+0x118>)
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the counter exceeded the maximum value, reset the variables. */
	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
 800212c:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <SecAlm_LightsBuzzerControl+0x118>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b13      	cmp	r3, #19
 8002132:	d922      	bls.n	800217a <SecAlm_LightsBuzzerControl+0x7a>
	{
		SecAlm_TriggerPreviousState 						= SecAlm_Trigger;
 8002134:	4b37      	ldr	r3, [pc, #220]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	4b35      	ldr	r3, [pc, #212]	; (8002210 <SecAlm_LightsBuzzerControl+0x110>)
 800213a:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter	= STD_HIGH;
 800213c:	4b37      	ldr	r3, [pc, #220]	; (800221c <SecAlm_LightsBuzzerControl+0x11c>)
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter 	= STD_LOW;
 8002142:	4b37      	ldr	r3, [pc, #220]	; (8002220 <SecAlm_LightsBuzzerControl+0x120>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
		SecAlm_Trigger 										= STD_LOW;
 8002148:	4b32      	ldr	r3, [pc, #200]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange 								= STD_LOW;
 800214e:	4b35      	ldr	r3, [pc, #212]	; (8002224 <SecAlm_LightsBuzzerControl+0x124>)
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
		SecAlm_TriggerIRQCounterForTimer4 					= STD_LOW;
 8002154:	4b30      	ldr	r3, [pc, #192]	; (8002218 <SecAlm_LightsBuzzerControl+0x118>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 800215a:	4b33      	ldr	r3, [pc, #204]	; (8002228 <SecAlm_LightsBuzzerControl+0x128>)
 800215c:	2200      	movs	r2, #0
 800215e:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatus 								= STD_LOW;
 8002160:	4b32      	ldr	r3, [pc, #200]	; (800222c <SecAlm_LightsBuzzerControl+0x12c>)
 8002162:	2200      	movs	r2, #0
 8002164:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 8002166:	4b30      	ldr	r3, [pc, #192]	; (8002228 <SecAlm_LightsBuzzerControl+0x128>)
 8002168:	2200      	movs	r2, #0
 800216a:	801a      	strh	r2, [r3, #0]
		/* Stop the os timer assigned to security alarm trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmAlarm_TimerHandle);
 800216c:	4b30      	ldr	r3, [pc, #192]	; (8002230 <SecAlm_LightsBuzzerControl+0x130>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f00b fbf9 	bl	800d968 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		/* Turn off the lights to make sure their state is off before any other action. */
		SecAlm_TurnOnExtLights();
 8002176:	f000 f891 	bl	800229c <SecAlm_TurnOnExtLights>
		/* do nothing */
	}
	/* The counter resets every 10 seconds, if a reset of the timer
	 * occurs, then reset the variables related to the security
	 * alarm trigger. */
	if(SecAlm_SensorStatusCounter == STD_LOW)
 800217a:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <SecAlm_LightsBuzzerControl+0x128>)
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d107      	bne.n	8002192 <SecAlm_LightsBuzzerControl+0x92>
	{
		sensorStatus 	= STD_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
		SecAlm_Trigger 	= STD_LOW;
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange = STD_LOW;
 800218c:	4b25      	ldr	r3, [pc, #148]	; (8002224 <SecAlm_LightsBuzzerControl+0x124>)
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the sensor status is high, trigger the alarm. */
	if(sensorStatus == STD_HIGH)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d102      	bne.n	800219e <SecAlm_LightsBuzzerControl+0x9e>
	{
		SecAlm_Trigger = STD_HIGH;
 8002198:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the trigger is set to high, perform alarm triggering. */
	if(SecAlm_Trigger == STD_HIGH)
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d128      	bne.n	80021f8 <SecAlm_LightsBuzzerControl+0xf8>
	{
		/* One alarm cycle is performed consisting of 10 seconds. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmAlarm_TimerHandle) == 0)
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <SecAlm_LightsBuzzerControl+0x130>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f008 f953 	bl	800a456 <osTimerIsRunning>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <SecAlm_LightsBuzzerControl+0xc4>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmAlarm_TimerHandle, 500);
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <SecAlm_LightsBuzzerControl+0x130>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80021be:	4618      	mov	r0, r3
 80021c0:	f00b fbc5 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Cycle between on and off states of buzzer and lights. */
		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <SecAlm_LightsBuzzerControl+0x118>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <SecAlm_LightsBuzzerControl+0xde>
		{
			SecAlm_PinStateChange = STD_HIGH;
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <SecAlm_LightsBuzzerControl+0x124>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 80021d8:	f000 f860 	bl	800229c <SecAlm_TurnOnExtLights>
	}
	else
	{
		/* do nothing */
	}
}
 80021dc:	e013      	b.n	8002206 <SecAlm_LightsBuzzerControl+0x106>
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <SecAlm_LightsBuzzerControl+0x118>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10c      	bne.n	8002206 <SecAlm_LightsBuzzerControl+0x106>
			SecAlm_PinStateChange = STD_LOW;
 80021ec:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <SecAlm_LightsBuzzerControl+0x124>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 80021f2:	f000 f853 	bl	800229c <SecAlm_TurnOnExtLights>
}
 80021f6:	e006      	b.n	8002206 <SecAlm_LightsBuzzerControl+0x106>
	else if(SecAlm_Trigger == STD_LOW)
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <SecAlm_LightsBuzzerControl+0x106>
		SecAlm_ToggleAlarmBuzzer(STD_LOW);
 8002200:	2000      	movs	r0, #0
 8002202:	f000 f8c7 	bl	8002394 <SecAlm_ToggleAlarmBuzzer>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000119 	.word	0x20000119
 8002214:	20000110 	.word	0x20000110
 8002218:	20000112 	.word	0x20000112
 800221c:	200000c4 	.word	0x200000c4
 8002220:	200000c6 	.word	0x200000c6
 8002224:	20000111 	.word	0x20000111
 8002228:	20000114 	.word	0x20000114
 800222c:	20000116 	.word	0x20000116
 8002230:	20000284 	.word	0x20000284

08002234 <SecAlm_VibSenStatus>:
/***********************************************************************************
* Function: SecAlm_VibSenStatus										               *
* Description: Updates the vibration sensor status based on measurements.		   *
************************************************************************************/
StdReturnType SecAlm_VibSenStatus()
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint16 sensorStatus = STD_LOW;
 800223a:	2300      	movs	r3, #0
 800223c:	80fb      	strh	r3, [r7, #6]
	/* Read the sensor value. */
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(SECALM_VS_REQUEST);
 800223e:	2002      	movs	r0, #2
 8002240:	f000 f8cc 	bl	80023dc <SenCtrl_ProcessSensorValue>
	/* If the sensor was triggered. */
	if(SecAlm_SensorState == STD_HIGH)
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <SecAlm_VibSenStatus+0x5c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d10c      	bne.n	8002266 <SecAlm_VibSenStatus+0x32>
	{
		/* Count for how long it has been triggered. */
		SecAlm_SensorStatusCounter = SecAlm_SensorStatusCounter + 1;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <SecAlm_VibSenStatus+0x60>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	3301      	adds	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <SecAlm_VibSenStatus+0x60>)
 8002256:	801a      	strh	r2, [r3, #0]
		/* Start the reset timer for the counter variable. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlm_AlarmResetHandle, 10000);
 8002258:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <SecAlm_VibSenStatus+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f242 7110 	movw	r1, #10000	; 0x2710
 8002260:	4618      	mov	r0, r3
 8002262:	f00b fb74 	bl	800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
	else
	{
		/* do nothing */
	}
	/* If the sensor was triggered enough times. */
	if(SecAlm_SensorStatusCounter >= 300)
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <SecAlm_VibSenStatus+0x60>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800226e:	d302      	bcc.n	8002276 <SecAlm_VibSenStatus+0x42>
	{
		/* Set the sensor status to high. */
		sensorStatus = STD_HIGH;
 8002270:	2301      	movs	r3, #1
 8002272:	80fb      	strh	r3, [r7, #6]
 8002274:	e006      	b.n	8002284 <SecAlm_VibSenStatus+0x50>
	}
	else if(SecAlm_SensorStatusCounter < 300)
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <SecAlm_VibSenStatus+0x60>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800227e:	d201      	bcs.n	8002284 <SecAlm_VibSenStatus+0x50>
	{
		/* Set the sensor status to low. */
		sensorStatus = STD_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	80fb      	strh	r3, [r7, #6]
	else
	{
		/* do nothing */
	}
	/* Return sensor status. */
	return sensorStatus;
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	b2db      	uxtb	r3, r3
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000118 	.word	0x20000118
 8002294:	20000114 	.word	0x20000114
 8002298:	2000026c 	.word	0x2000026c

0800229c <SecAlm_TurnOnExtLights>:
/***********************************************************************************
* Function: SecAlm_TurnOnExtLights										           *
* Description: Trigger the exterior lights and buzzer.							   *
************************************************************************************/
VOID SecAlm_TurnOnExtLights()
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
	/* Turn on the lights and the buzzer. */
	if(SecAlm_PinStateChange == STD_HIGH)
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <SecAlm_TurnOnExtLights+0x84>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d118      	bne.n	80022da <SecAlm_TurnOnExtLights+0x3e>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80022a8:	2100      	movs	r1, #0
 80022aa:	481e      	ldr	r0, [pc, #120]	; (8002324 <SecAlm_TurnOnExtLights+0x88>)
 80022ac:	f00b f97c 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80022b0:	2104      	movs	r1, #4
 80022b2:	481c      	ldr	r0, [pc, #112]	; (8002324 <SecAlm_TurnOnExtLights+0x88>)
 80022b4:	f00b f978 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 80022b8:	2108      	movs	r1, #8
 80022ba:	481b      	ldr	r0, [pc, #108]	; (8002328 <SecAlm_TurnOnExtLights+0x8c>)
 80022bc:	f00b f974 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 80022c0:	210c      	movs	r1, #12
 80022c2:	4819      	ldr	r0, [pc, #100]	; (8002328 <SecAlm_TurnOnExtLights+0x8c>)
 80022c4:	f00b f970 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80022c8:	2108      	movs	r1, #8
 80022ca:	4818      	ldr	r0, [pc, #96]	; (800232c <SecAlm_TurnOnExtLights+0x90>)
 80022cc:	f00b f96c 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80022d0:	210c      	movs	r1, #12
 80022d2:	4816      	ldr	r0, [pc, #88]	; (800232c <SecAlm_TurnOnExtLights+0x90>)
 80022d4:	f00b f968 	bl	800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80022d8:	e01b      	b.n	8002312 <SecAlm_TurnOnExtLights+0x76>
	}
	else if(SecAlm_PinStateChange == STD_LOW)
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <SecAlm_TurnOnExtLights+0x84>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d117      	bne.n	8002312 <SecAlm_TurnOnExtLights+0x76>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80022e2:	2100      	movs	r1, #0
 80022e4:	480f      	ldr	r0, [pc, #60]	; (8002324 <SecAlm_TurnOnExtLights+0x88>)
 80022e6:	f00b f96c 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80022ea:	2104      	movs	r1, #4
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <SecAlm_TurnOnExtLights+0x88>)
 80022ee:	f00b f968 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 80022f2:	2108      	movs	r1, #8
 80022f4:	480c      	ldr	r0, [pc, #48]	; (8002328 <SecAlm_TurnOnExtLights+0x8c>)
 80022f6:	f00b f964 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 80022fa:	210c      	movs	r1, #12
 80022fc:	480a      	ldr	r0, [pc, #40]	; (8002328 <SecAlm_TurnOnExtLights+0x8c>)
 80022fe:	f00b f960 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8002302:	2108      	movs	r1, #8
 8002304:	4809      	ldr	r0, [pc, #36]	; (800232c <SecAlm_TurnOnExtLights+0x90>)
 8002306:	f00b f95c 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800230a:	210c      	movs	r1, #12
 800230c:	4807      	ldr	r0, [pc, #28]	; (800232c <SecAlm_TurnOnExtLights+0x90>)
 800230e:	f00b f958 	bl	800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	SecAlm_ToggleAlarmBuzzer(SecAlm_PinStateChange);
 8002312:	4b03      	ldr	r3, [pc, #12]	; (8002320 <SecAlm_TurnOnExtLights+0x84>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f83c 	bl	8002394 <SecAlm_ToggleAlarmBuzzer>
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000111 	.word	0x20000111
 8002324:	20000350 	.word	0x20000350
 8002328:	20000404 	.word	0x20000404
 800232c:	200004b8 	.word	0x200004b8

08002330 <SecAlm_MainFunction>:
/***********************************************************************************
* Function: SecAlm_MainFunction										           	   *
* Description: Process application states.										   *
************************************************************************************/
VOID SecAlm_MainFunction()
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	SecAlm_LightsBuzzerControl();
 8002334:	f7ff fee4 	bl	8002100 <SecAlm_LightsBuzzerControl>
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}

0800233c <SecAlm_Init>:
/***********************************************************************************
* Function: SecAlm_Init										                       *
* Description: Initialize the application.										   *
************************************************************************************/
StdReturnType SecAlm_Init()
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
	/* Set the variables to 0. */
	SecAlm_Trigger 						= STD_LOW;
 8002340:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <SecAlm_Init+0x3c>)
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
	SecAlm_PinStateChange 				= STD_LOW;
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <SecAlm_Init+0x40>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <SecAlm_Init+0x44>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
	SecAlm_SensorStatusCounter 			= STD_LOW;
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <SecAlm_Init+0x48>)
 8002354:	2200      	movs	r2, #0
 8002356:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorStatus					= STD_LOW;
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <SecAlm_Init+0x4c>)
 800235a:	2200      	movs	r2, #0
 800235c:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorState 					= STD_LOW;
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <SecAlm_Init+0x50>)
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerPreviousState 		= STD_LOW;
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <SecAlm_Init+0x54>)
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
	Rte_Write_Os_R_OsPort_Os_Alarm_Counter(&SecAlm_TriggerIRQCounterForTimer4);
 800236a:	4805      	ldr	r0, [pc, #20]	; (8002380 <SecAlm_Init+0x44>)
 800236c:	f00b f8e2 	bl	800d534 <Rte_Write_Os_R_OsPort_Os_Alarm_Counter>
	return E_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000110 	.word	0x20000110
 800237c:	20000111 	.word	0x20000111
 8002380:	20000112 	.word	0x20000112
 8002384:	20000114 	.word	0x20000114
 8002388:	20000116 	.word	0x20000116
 800238c:	20000118 	.word	0x20000118
 8002390:	20000119 	.word	0x20000119

08002394 <SecAlm_ToggleAlarmBuzzer>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmBuzzer										       *
* Description: Alarm buzzer trigger.                                               *
************************************************************************************/
VOID SecAlm_ToggleAlarmBuzzer(uint8 PinState)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	461a      	mov	r2, r3
 80023a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023a6:	4803      	ldr	r0, [pc, #12]	; (80023b4 <SecAlm_ToggleAlarmBuzzer+0x20>)
 80023a8:	f00b fabf 	bl	800d92a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40020400 	.word	0x40020400

080023b8 <SecAlm_ToggleAlarmLed>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmLed										           *
* Description: Alarm LED trigger.												   *
************************************************************************************/
VOID SecAlm_ToggleAlarmLed(uint8 PinState)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	461a      	mov	r2, r3
 80023c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023ca:	4803      	ldr	r0, [pc, #12]	; (80023d8 <SecAlm_ToggleAlarmLed+0x20>)
 80023cc:	f00b faad 	bl	800d92a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40020400 	.word	0x40020400

080023dc <SenCtrl_ProcessSensorValue>:
/***********************************************************************************
* Function: SenCtrl_ProcessSensorValue									   	       *
* Description: Process the request for the sensor value. 	                       *
************************************************************************************/
VOID SenCtrl_ProcessSensorValue(uint8 request)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
	/* Store request into local variable. */
	uint8 localRequest = request;
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	77fb      	strb	r3, [r7, #31]
	/* Process sensor request. */
	switch(localRequest)
 80023ea:	7ffb      	ldrb	r3, [r7, #31]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <SenCtrl_ProcessSensorValue+0x1a>
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d01c      	beq.n	800242e <SenCtrl_ProcessSensorValue+0x52>
			{
				/* do nothing */
			}
			break;
		default:
			break;
 80023f4:	e03a      	b.n	800246c <SenCtrl_ProcessSensorValue+0x90>
			if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] == 4095)
 80023f6:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <SenCtrl_ProcessSensorValue+0x98>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80023fe:	4293      	cmp	r3, r2
 8002400:	d107      	bne.n	8002412 <SenCtrl_ProcessSensorValue+0x36>
				uint32 localls = 1;
 8002402:	2301      	movs	r3, #1
 8002404:	61bb      	str	r3, [r7, #24]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 8002406:	f107 0318 	add.w	r3, r7, #24
 800240a:	4618      	mov	r0, r3
 800240c:	f00a ffb8 	bl	800d380 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			break;
 8002410:	e029      	b.n	8002466 <SenCtrl_ProcessSensorValue+0x8a>
			else if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] < 4095)
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <SenCtrl_ProcessSensorValue+0x98>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f640 72fe 	movw	r2, #4094	; 0xffe
 800241a:	4293      	cmp	r3, r2
 800241c:	d823      	bhi.n	8002466 <SenCtrl_ProcessSensorValue+0x8a>
				uint32 localls = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4618      	mov	r0, r3
 8002428:	f00a ffaa 	bl	800d380 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			break;
 800242c:	e01b      	b.n	8002466 <SenCtrl_ProcessSensorValue+0x8a>
			if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] == 4095)
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <SenCtrl_ProcessSensorValue+0x98>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002436:	4293      	cmp	r3, r2
 8002438:	d107      	bne.n	800244a <SenCtrl_ProcessSensorValue+0x6e>
				uint32 localvs = STD_HIGH;
 800243a:	2301      	movs	r3, #1
 800243c:	613b      	str	r3, [r7, #16]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	4618      	mov	r0, r3
 8002444:	f00a ff8a 	bl	800d35c <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			break;
 8002448:	e00f      	b.n	800246a <SenCtrl_ProcessSensorValue+0x8e>
			else if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] < 4095)
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <SenCtrl_ProcessSensorValue+0x98>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002452:	4293      	cmp	r3, r2
 8002454:	d809      	bhi.n	800246a <SenCtrl_ProcessSensorValue+0x8e>
				uint32 localvs = STD_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	4618      	mov	r0, r3
 8002460:	f00a ff7c 	bl	800d35c <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			break;
 8002464:	e001      	b.n	800246a <SenCtrl_ProcessSensorValue+0x8e>
			break;
 8002466:	bf00      	nop
 8002468:	e000      	b.n	800246c <SenCtrl_ProcessSensorValue+0x90>
			break;
 800246a:	bf00      	nop
	}
}
 800246c:	bf00      	nop
 800246e:	3720      	adds	r7, #32
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	2000011c 	.word	0x2000011c

08002478 <Uart_Init>:
/***********************************************************************************
* Function: Uart_Init										       				   *
* Description: Initialize the protocol.									 		   *
************************************************************************************/
StdReturnType Uart_Init()
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
	/* Set the instance. */
	huart1.Instance = USART1;
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <Uart_Init+0x50>)
 800247e:	4a13      	ldr	r2, [pc, #76]	; (80024cc <Uart_Init+0x54>)
 8002480:	601a      	str	r2, [r3, #0]
	/* Set the baud rate for the protocol. */
	huart1.Init.BaudRate = 9600;
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <Uart_Init+0x50>)
 8002484:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002488:	605a      	str	r2, [r3, #4]
	/* Set the number of data bits transmitted or received. */
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <Uart_Init+0x50>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
	/* Set the number of stop bits transmitted. */
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002490:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <Uart_Init+0x50>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
	/* Set the parity mode. */
	huart1.Init.Parity = UART_PARITY_NONE;
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <Uart_Init+0x50>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
	/* Set the protocol mode. */
	huart1.Init.Mode = UART_MODE_TX_RX;
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <Uart_Init+0x50>)
 800249e:	220c      	movs	r2, #12
 80024a0:	615a      	str	r2, [r3, #20]
	/* Set the hardware flow control. */
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <Uart_Init+0x50>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
	/* Set the over sampling value. */
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a8:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <Uart_Init+0x50>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
	/* Call for error callback if the initialization is not performed accordingly. */
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80024ae:	4806      	ldr	r0, [pc, #24]	; (80024c8 <Uart_Init+0x50>)
 80024b0:	f005 fe7e 	bl	80081b0 <HAL_UART_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <Uart_Init+0x48>
	{
		HAL_UART_ErrorCallback(&huart1);
 80024ba:	4803      	ldr	r0, [pc, #12]	; (80024c8 <Uart_Init+0x50>)
 80024bc:	f000 f8b2 	bl	8002624 <HAL_UART_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000620 	.word	0x20000620
 80024cc:	40011000 	.word	0x40011000

080024d0 <Uart_DeInit>:
/***********************************************************************************
* Function: Uart_DeInit										   					   *
* Description: De-initialize the protocol.									       *
************************************************************************************/
StdReturnType Uart_DeInit()
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	/* Call for protocol de-init function. */
	HAL_UART_DeInit(&huart1);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <Uart_DeInit+0x10>)
 80024d6:	f005 fec5 	bl	8008264 <HAL_UART_DeInit>
	return E_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000620 	.word	0x20000620

080024e4 <Uart_MainFunction>:
/***********************************************************************************
* Function: Uart_MainFunction										   			   *
* Description: Protocol main function.									           *
************************************************************************************/
VOID Uart_MainFunction()
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
	/* Get the error status in local variable. */
	uint32 localState = HAL_UART_GetState(&huart1);
 80024ea:	484b      	ldr	r0, [pc, #300]	; (8002618 <Uart_MainFunction+0x134>)
 80024ec:	f006 fa44 	bl	8008978 <HAL_UART_GetState>
 80024f0:	4603      	mov	r3, r0
 80024f2:	607b      	str	r3, [r7, #4]
	switch(localState)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2be0      	cmp	r3, #224	; 0xe0
 80024f8:	f000 8082 	beq.w	8002600 <Uart_MainFunction+0x11c>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2be0      	cmp	r3, #224	; 0xe0
 8002500:	f200 8085 	bhi.w	800260e <Uart_MainFunction+0x12a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b24      	cmp	r3, #36	; 0x24
 8002508:	d850      	bhi.n	80025ac <Uart_MainFunction+0xc8>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b24      	cmp	r3, #36	; 0x24
 800250e:	d87e      	bhi.n	800260e <Uart_MainFunction+0x12a>
 8002510:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <Uart_MainFunction+0x34>)
 8002512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002516:	bf00      	nop
 8002518:	080025b5 	.word	0x080025b5
 800251c:	0800260f 	.word	0x0800260f
 8002520:	0800260f 	.word	0x0800260f
 8002524:	0800260f 	.word	0x0800260f
 8002528:	0800260f 	.word	0x0800260f
 800252c:	0800260f 	.word	0x0800260f
 8002530:	0800260f 	.word	0x0800260f
 8002534:	0800260f 	.word	0x0800260f
 8002538:	0800260f 	.word	0x0800260f
 800253c:	0800260f 	.word	0x0800260f
 8002540:	0800260f 	.word	0x0800260f
 8002544:	0800260f 	.word	0x0800260f
 8002548:	0800260f 	.word	0x0800260f
 800254c:	0800260f 	.word	0x0800260f
 8002550:	0800260f 	.word	0x0800260f
 8002554:	0800260f 	.word	0x0800260f
 8002558:	0800260f 	.word	0x0800260f
 800255c:	0800260f 	.word	0x0800260f
 8002560:	0800260f 	.word	0x0800260f
 8002564:	0800260f 	.word	0x0800260f
 8002568:	0800260f 	.word	0x0800260f
 800256c:	0800260f 	.word	0x0800260f
 8002570:	0800260f 	.word	0x0800260f
 8002574:	0800260f 	.word	0x0800260f
 8002578:	0800260f 	.word	0x0800260f
 800257c:	0800260f 	.word	0x0800260f
 8002580:	0800260f 	.word	0x0800260f
 8002584:	0800260f 	.word	0x0800260f
 8002588:	0800260f 	.word	0x0800260f
 800258c:	0800260f 	.word	0x0800260f
 8002590:	0800260f 	.word	0x0800260f
 8002594:	0800260f 	.word	0x0800260f
 8002598:	080025c1 	.word	0x080025c1
 800259c:	080025db 	.word	0x080025db
 80025a0:	080025e3 	.word	0x080025e3
 80025a4:	080025eb 	.word	0x080025eb
 80025a8:	080025d3 	.word	0x080025d3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2ba0      	cmp	r3, #160	; 0xa0
 80025b0:	d01f      	beq.n	80025f2 <Uart_MainFunction+0x10e>
		case HAL_UART_STATE_ERROR:
			Uart_BswState = localState;
			HAL_UART_ErrorCallback(&huart1);
			break;
		default:
			break;
 80025b2:	e02c      	b.n	800260e <Uart_MainFunction+0x12a>
			Uart_BswState = localState;
 80025b4:	4a19      	ldr	r2, [pc, #100]	; (800261c <Uart_MainFunction+0x138>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6013      	str	r3, [r2, #0]
			Uart_Init();
 80025ba:	f7ff ff5d 	bl	8002478 <Uart_Init>
			break;
 80025be:	e027      	b.n	8002610 <Uart_MainFunction+0x12c>
			HAL_UART_Receive_IT(&huart1, &Rte_P_Btc_BtcPort_Btc_RxData, 1);
 80025c0:	2201      	movs	r2, #1
 80025c2:	4917      	ldr	r1, [pc, #92]	; (8002620 <Uart_MainFunction+0x13c>)
 80025c4:	4814      	ldr	r0, [pc, #80]	; (8002618 <Uart_MainFunction+0x134>)
 80025c6:	f005 fecc 	bl	8008362 <HAL_UART_Receive_IT>
			Uart_BswState = localState;
 80025ca:	4a14      	ldr	r2, [pc, #80]	; (800261c <Uart_MainFunction+0x138>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6013      	str	r3, [r2, #0]
			break;
 80025d0:	e01e      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 80025d2:	4a12      	ldr	r2, [pc, #72]	; (800261c <Uart_MainFunction+0x138>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6013      	str	r3, [r2, #0]
			break;
 80025d8:	e01a      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 80025da:	4a10      	ldr	r2, [pc, #64]	; (800261c <Uart_MainFunction+0x138>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6013      	str	r3, [r2, #0]
			break;
 80025e0:	e016      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 80025e2:	4a0e      	ldr	r2, [pc, #56]	; (800261c <Uart_MainFunction+0x138>)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6013      	str	r3, [r2, #0]
			break;
 80025e8:	e012      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 80025ea:	4a0c      	ldr	r2, [pc, #48]	; (800261c <Uart_MainFunction+0x138>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6013      	str	r3, [r2, #0]
			break;
 80025f0:	e00e      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <Uart_MainFunction+0x138>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 80025f8:	4807      	ldr	r0, [pc, #28]	; (8002618 <Uart_MainFunction+0x134>)
 80025fa:	f000 f813 	bl	8002624 <HAL_UART_ErrorCallback>
			break;
 80025fe:	e007      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8002600:	4a06      	ldr	r2, [pc, #24]	; (800261c <Uart_MainFunction+0x138>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 8002606:	4804      	ldr	r0, [pc, #16]	; (8002618 <Uart_MainFunction+0x134>)
 8002608:	f000 f80c 	bl	8002624 <HAL_UART_ErrorCallback>
			break;
 800260c:	e000      	b.n	8002610 <Uart_MainFunction+0x12c>
			break;
 800260e:	bf00      	nop
	}
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000620 	.word	0x20000620
 800261c:	20000124 	.word	0x20000124
 8002620:	200000b0 	.word	0x200000b0

08002624 <HAL_UART_ErrorCallback>:
/***********************************************************************************
* Function: HAL_UART_ErrorCallback										   		   *
* Description: Process error callback.								               *
************************************************************************************/
VOID HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	/* Get error status in local variable. */
	uint32 receivedValue = HAL_UART_GetError(huart);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f006 f9c1 	bl	80089b4 <HAL_UART_GetError>
 8002632:	60f8      	str	r0, [r7, #12]
	/* Process each error.
	 * Store each in error in the system manager fault array.
	 * In case of DMA error re-initialize the protocol. */
	switch(receivedValue)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b10      	cmp	r3, #16
 8002638:	d846      	bhi.n	80026c8 <HAL_UART_ErrorCallback+0xa4>
 800263a:	a201      	add	r2, pc, #4	; (adr r2, 8002640 <HAL_UART_ErrorCallback+0x1c>)
 800263c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002640:	080026c9 	.word	0x080026c9
 8002644:	08002685 	.word	0x08002685
 8002648:	08002691 	.word	0x08002691
 800264c:	080026c9 	.word	0x080026c9
 8002650:	0800269d 	.word	0x0800269d
 8002654:	080026c9 	.word	0x080026c9
 8002658:	080026c9 	.word	0x080026c9
 800265c:	080026c9 	.word	0x080026c9
 8002660:	080026a9 	.word	0x080026a9
 8002664:	080026c9 	.word	0x080026c9
 8002668:	080026c9 	.word	0x080026c9
 800266c:	080026c9 	.word	0x080026c9
 8002670:	080026c9 	.word	0x080026c9
 8002674:	080026c9 	.word	0x080026c9
 8002678:	080026c9 	.word	0x080026c9
 800267c:	080026c9 	.word	0x080026c9
 8002680:	080026b5 	.word	0x080026b5
	{
		case HAL_UART_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_UART_ERROR_PE:
			SystemManager_Fault[UART_ERROR_PE]++;
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	3301      	adds	r3, #1
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 800268c:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 800268e:	e01c      	b.n	80026ca <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_NE:
			SystemManager_Fault[UART_ERROR_NE]++;
 8002690:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 8002692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002694:	3301      	adds	r3, #1
 8002696:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 8002698:	6493      	str	r3, [r2, #72]	; 0x48
			break;
 800269a:	e016      	b.n	80026ca <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_FE:
			SystemManager_Fault[UART_ERROR_FE]++;
 800269c:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 800269e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a0:	3301      	adds	r3, #1
 80026a2:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 80026a4:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 80026a6:	e010      	b.n	80026ca <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_ORE:
			SystemManager_Fault[UART_ERROR_ORE]++;
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 80026aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ac:	3301      	adds	r3, #1
 80026ae:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 80026b0:	6513      	str	r3, [r2, #80]	; 0x50
			break;
 80026b2:	e00a      	b.n	80026ca <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_DMA:
			SystemManager_Fault[UART_ERROR_ORE]++;
 80026b4:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 80026b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b8:	3301      	adds	r3, #1
 80026ba:	4a06      	ldr	r2, [pc, #24]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 80026bc:	6513      	str	r3, [r2, #80]	; 0x50
			Uart_Init();
 80026be:	f7ff fedb 	bl	8002478 <Uart_Init>
			Uart_DeInit();
 80026c2:	f7ff ff05 	bl	80024d0 <Uart_DeInit>
			break;
 80026c6:	e000      	b.n	80026ca <HAL_UART_ErrorCallback+0xa6>
		default:
			break;
 80026c8:	bf00      	nop
	}
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200089c8 	.word	0x200089c8

080026d8 <HAL_UART_RxCpltCallback>:
/***********************************************************************************
* Function: HAL_UART_RxCpltCallback										           *
* Description: Process received data.									   		   *
************************************************************************************/
VOID HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	/* If the UART 1 is calling the callback. */
	if(huart->Instance == USART1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a20      	ldr	r2, [pc, #128]	; (8002768 <HAL_UART_RxCpltCallback+0x90>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d13a      	bne.n	8002760 <HAL_UART_RxCpltCallback+0x88>
	{
		/* If the data received is not nullptr. */
		if(Rte_P_Btc_BtcPort_Btc_RxData == '\n')
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_UART_RxCpltCallback+0x94>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b0a      	cmp	r3, #10
 80026f0:	d11a      	bne.n	8002728 <HAL_UART_RxCpltCallback+0x50>
		{
			/* If the buffer length counter is less than maximum value. */
			if(Rte_P_Btc_BtcPort_Btc_RxCount <= 3)
 80026f2:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <HAL_UART_RxCpltCallback+0x98>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d80f      	bhi.n	800271a <HAL_UART_RxCpltCallback+0x42>
			{
				/* Convert the data received to uint8.*/
				uint8 asciiToUint = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
				asciiToUint = atoi((char*)Rte_P_Btc_BtcPort_Btc_DataBuffer);
 80026fe:	481d      	ldr	r0, [pc, #116]	; (8002774 <HAL_UART_RxCpltCallback+0x9c>)
 8002700:	f00b ff7a 	bl	800e5f8 <atoi>
 8002704:	4603      	mov	r3, r0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	73fb      	strb	r3, [r7, #15]
				Rte_Write_Btc_BtcPort_Btc_RxData(&asciiToUint);
 800270a:	f107 030f 	add.w	r3, r7, #15
 800270e:	4618      	mov	r0, r3
 8002710:	f00a ff64 	bl	800d5dc <Rte_Write_Btc_BtcPort_Btc_RxData>
				Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&Rte_P_Btc_BtcPort_Btc_RxData);
 8002714:	4815      	ldr	r0, [pc, #84]	; (800276c <HAL_UART_RxCpltCallback+0x94>)
 8002716:	f00a ffa9 	bl	800d66c <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
			else
			{
				/* do nothing */
			}
			/* Set the counter to 0 if it is more than maximum value. */
			UartCounter_Btc_RxCount = 0;
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 8002720:	4815      	ldr	r0, [pc, #84]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 8002722:	f00a ff6b 	bl	800d5fc <Rte_Write_Btc_BtcPort_Btc_RxCount>
 8002726:	e016      	b.n	8002756 <HAL_UART_RxCpltCallback+0x7e>
		}/* If the message was not fully processed, continue with the processing into the buffer. */
		else if(Rte_P_Btc_BtcPort_Btc_RxCount < 3)
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_UART_RxCpltCallback+0x98>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d80c      	bhi.n	800274a <HAL_UART_RxCpltCallback+0x72>
		{
			Rte_Write_Btc_BtcPort_Btc_DataBuffer(&Rte_P_Btc_BtcPort_Btc_RxData, UartCounter_Btc_RxCount);
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	480d      	ldr	r0, [pc, #52]	; (800276c <HAL_UART_RxCpltCallback+0x94>)
 8002738:	f00a ff70 	bl	800d61c <Rte_Write_Btc_BtcPort_Btc_DataBuffer>
			UartCounter_Btc_RxCount++;
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	3301      	adds	r3, #1
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e005      	b.n	8002756 <HAL_UART_RxCpltCallback+0x7e>
		}
		else
		{
			/* Set the counter to 0 otherwise. */
			UartCounter_Btc_RxCount = 0;
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 8002750:	4809      	ldr	r0, [pc, #36]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 8002752:	f00a ff53 	bl	800d5fc <Rte_Write_Btc_BtcPort_Btc_RxCount>
		}
		/* Re-enable data transmission throuhg the protocol in interrupt mode. */
		Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(&huart1, &Btc_RxData, 1);
 8002756:	2201      	movs	r2, #1
 8002758:	4904      	ldr	r1, [pc, #16]	; (800276c <HAL_UART_RxCpltCallback+0x94>)
 800275a:	4808      	ldr	r0, [pc, #32]	; (800277c <HAL_UART_RxCpltCallback+0xa4>)
 800275c:	f00b f8d4 	bl	800d908 <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>
	}
	else
	{
		/* do nothing */
	}
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40011000 	.word	0x40011000
 800276c:	200000b0 	.word	0x200000b0
 8002770:	200000b1 	.word	0x200000b1
 8002774:	200000ac 	.word	0x200000ac
 8002778:	20000128 	.word	0x20000128
 800277c:	20000620 	.word	0x20000620

08002780 <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a34      	ldr	r2, [pc, #208]	; (8002870 <HAL_ADC_MspInit+0xf0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d161      	bne.n	8002866 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b33      	ldr	r3, [pc, #204]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a32      	ldr	r2, [pc, #200]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b30      	ldr	r3, [pc, #192]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a2b      	ldr	r2, [pc, #172]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b29      	ldr	r3, [pc, #164]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = VS_Pin|LS_Pin;
 80027da:	230c      	movs	r3, #12
 80027dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027de:	2303      	movs	r3, #3
 80027e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4619      	mov	r1, r3
 80027ec:	4822      	ldr	r0, [pc, #136]	; (8002878 <HAL_ADC_MspInit+0xf8>)
 80027ee:	f003 f861 	bl	80058b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80027f2:	4b22      	ldr	r3, [pc, #136]	; (800287c <HAL_ADC_MspInit+0xfc>)
 80027f4:	4a22      	ldr	r2, [pc, #136]	; (8002880 <HAL_ADC_MspInit+0x100>)
 80027f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027f8:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_ADC_MspInit+0xfc>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027fe:	4b1f      	ldr	r3, [pc, #124]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002804:	4b1d      	ldr	r3, [pc, #116]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800280a:	4b1c      	ldr	r3, [pc, #112]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800280c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002810:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002812:	4b1a      	ldr	r3, [pc, #104]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002814:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002818:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800281c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002820:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002828:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800282c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002830:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002832:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002834:	2204      	movs	r2, #4
 8002836:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800283a:	2203      	movs	r2, #3
 800283c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800283e:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002840:	2200      	movs	r2, #0
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002844:	4b0d      	ldr	r3, [pc, #52]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002846:	2200      	movs	r2, #0
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800284a:	480c      	ldr	r0, [pc, #48]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800284c:	f002 fbd2 	bl	8004ff4 <HAL_DMA_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_ADC_MspInit+0xda>
    {
      Error_Handler();
 8002856:	f00b febd 	bl	800e5d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a07      	ldr	r2, [pc, #28]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800285e:	639a      	str	r2, [r3, #56]	; 0x38
 8002860:	4a06      	ldr	r2, [pc, #24]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002866:	bf00      	nop
 8002868:	3728      	adds	r7, #40	; 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40012000 	.word	0x40012000
 8002874:	40023800 	.word	0x40023800
 8002878:	40020800 	.word	0x40020800
 800287c:	20000190 	.word	0x20000190
 8002880:	40026410 	.word	0x40026410

08002884 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <HAL_ADC_MspDeInit+0x40>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d111      	bne.n	80028ba <HAL_ADC_MspDeInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8002896:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <HAL_ADC_MspDeInit+0x44>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <HAL_ADC_MspDeInit+0x44>)
 800289c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028a0:	6453      	str	r3, [r2, #68]	; 0x44

    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    HAL_GPIO_DeInit(GPIOC, VS_Pin|LS_Pin);
 80028a2:	210c      	movs	r1, #12
 80028a4:	4809      	ldr	r0, [pc, #36]	; (80028cc <HAL_ADC_MspDeInit+0x48>)
 80028a6:	f003 f989 	bl	8005bbc <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	4618      	mov	r0, r3
 80028b0:	f002 fc4e 	bl	8005150 <HAL_DMA_DeInit>

    /* ADC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 80028b4:	2012      	movs	r0, #18
 80028b6:	f002 fa82 	bl	8004dbe <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40012000 	.word	0x40012000
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020800 	.word	0x40020800

080028d0 <HAL_CRC_MspInit>:
  /* USER CODE END CRC_Init 2 */

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0b      	ldr	r2, [pc, #44]	; (800290c <HAL_CRC_MspInit+0x3c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10d      	bne.n	80028fe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <HAL_CRC_MspInit+0x40>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	4a09      	ldr	r2, [pc, #36]	; (8002910 <HAL_CRC_MspInit+0x40>)
 80028ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028f0:	6313      	str	r3, [r2, #48]	; 0x30
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <HAL_CRC_MspInit+0x40>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40023000 	.word	0x40023000
 8002910:	40023800 	.word	0x40023800

08002914 <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a07      	ldr	r2, [pc, #28]	; (8002940 <HAL_CRC_MspDeInit+0x2c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d105      	bne.n	8002932 <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <HAL_CRC_MspDeInit+0x30>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a06      	ldr	r2, [pc, #24]	; (8002944 <HAL_CRC_MspDeInit+0x30>)
 800292c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40023000 	.word	0x40023000
 8002944:	40023800 	.word	0x40023800

08002948 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <MX_DMA_Init+0x30>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <MX_DMA_Init+0x30>)
 8002958:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <MX_DMA_Init+0x30>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002966:	607b      	str	r3, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]

}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800

0800297c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	6039      	str	r1, [r7, #0]
 8002986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	2b00      	cmp	r3, #0
 800298e:	db0a      	blt.n	80029a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	b2da      	uxtb	r2, r3
 8002994:	490c      	ldr	r1, [pc, #48]	; (80029c8 <__NVIC_SetPriority+0x4c>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	0112      	lsls	r2, r2, #4
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	440b      	add	r3, r1
 80029a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a4:	e00a      	b.n	80029bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4908      	ldr	r1, [pc, #32]	; (80029cc <__NVIC_SetPriority+0x50>)
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	3b04      	subs	r3, #4
 80029b4:	0112      	lsls	r2, r2, #4
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	440b      	add	r3, r1
 80029ba:	761a      	strb	r2, [r3, #24]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000e100 	.word	0xe000e100
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3b01      	subs	r3, #1
 80029dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e0:	d301      	bcc.n	80029e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00f      	b.n	8002a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e6:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <SysTick_Config+0x40>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ee:	210f      	movs	r1, #15
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f7ff ffc2 	bl	800297c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <SysTick_Config+0x40>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fe:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <SysTick_Config+0x40>)
 8002a00:	2207      	movs	r2, #7
 8002a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	e000e010 	.word	0xe000e010

08002a14 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
void configureTimerForRunTimeStats(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
	uint32_t timerClockFrequency = configCPU_CLOCK_HZ;
 8002a1a:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <configureTimerForRunTimeStats+0x24>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	607b      	str	r3, [r7, #4]
	SysTick_Config(timerClockFrequency / configTICK_RATE_HZ);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a06      	ldr	r2, [pc, #24]	; (8002a3c <configureTimerForRunTimeStats+0x28>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	099b      	lsrs	r3, r3, #6
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ffd0 	bl	80029d0 <SysTick_Config>
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	10624dd3 	.word	0x10624dd3

08002a40 <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
	return (unsigned long)(SysTick->VAL);
 8002a44:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <getRunTimeCounterValue+0x14>)
 8002a46:	689b      	ldr	r3, [r3, #8]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000e010 	.word	0xe000e010

08002a58 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
	Idle_Counter++;
 8002a5c:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <vApplicationIdleHook+0x18>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3301      	adds	r3, #1
 8002a62:	4a03      	ldr	r2, [pc, #12]	; (8002a70 <vApplicationIdleHook+0x18>)
 8002a64:	6013      	str	r3, [r2, #0]
}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	200001f8 	.word	0x200001f8

08002a74 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
	Os_Counter++;
 8002a78:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <vApplicationTickHook+0x3c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	4a0c      	ldr	r2, [pc, #48]	; (8002ab0 <vApplicationTickHook+0x3c>)
 8002a80:	6013      	str	r3, [r2, #0]
	CPU_Load = (float)((Idle_Counter / Os_Counter) / 100);
 8002a82:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <vApplicationTickHook+0x40>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <vApplicationTickHook+0x3c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <vApplicationTickHook+0x44>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9e:	4b07      	ldr	r3, [pc, #28]	; (8002abc <vApplicationTickHook+0x48>)
 8002aa0:	edc3 7a00 	vstr	s15, [r3]
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000200 	.word	0x20000200
 8002ab4:	200001f8 	.word	0x200001f8
 8002ab8:	51eb851f 	.word	0x51eb851f
 8002abc:	200001fc 	.word	0x200001fc

08002ac0 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
   SystemManager_SetFault(STACK_OVERFLOW_RESET);
 8002aca:	200c      	movs	r0, #12
 8002acc:	f00b fca4 	bl	800e418 <SystemManager_SetFault>
   SystemManager_PerformReset();
 8002ad0:	f00b fccc 	bl	800e46c <SystemManager_PerformReset>
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
	SystemManager_SetFault(MALLOC_FAILED_RESET);
 8002ae0:	200d      	movs	r0, #13
 8002ae2:	f00b fc99 	bl	800e418 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8002ae6:	f00b fcc1 	bl	800e46c <SystemManager_PerformReset>
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}

08002aee <vPortSuppressTicksAndSleep>:
/* USER CODE END 5 */

/* USER CODE BEGIN VPORT_SUPPORT_TICKS_AND_SLEEP */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Os_SecAlm_AlarmReset */
  Os_SecAlm_AlarmResetHandle = osTimerNew(Os_SecAlm_AlarmReset_Callback, osTimerPeriodic, NULL, &Os_SecAlm_AlarmReset_attributes);
 8002b08:	4b55      	ldr	r3, [pc, #340]	; (8002c60 <MX_FREERTOS_Init+0x15c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4855      	ldr	r0, [pc, #340]	; (8002c64 <MX_FREERTOS_Init+0x160>)
 8002b10:	f007 fbc0 	bl	800a294 <osTimerNew>
 8002b14:	4603      	mov	r3, r0
 8002b16:	4a54      	ldr	r2, [pc, #336]	; (8002c68 <MX_FREERTOS_Init+0x164>)
 8002b18:	6013      	str	r3, [r2, #0]

  /* creation of Os_CenLoc_LockUnlockSequence_Timer */
  Os_CenLoc_LockUnlockSequence_TimerHandle = osTimerNew(Os_CenLoc_LockUnlockSequence_Timer_Callback, osTimerPeriodic, NULL, &Os_CenLoc_LockUnlockSequence_Timer_attributes);
 8002b1a:	4b54      	ldr	r3, [pc, #336]	; (8002c6c <MX_FREERTOS_Init+0x168>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2101      	movs	r1, #1
 8002b20:	4853      	ldr	r0, [pc, #332]	; (8002c70 <MX_FREERTOS_Init+0x16c>)
 8002b22:	f007 fbb7 	bl	800a294 <osTimerNew>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4a52      	ldr	r2, [pc, #328]	; (8002c74 <MX_FREERTOS_Init+0x170>)
 8002b2a:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLed_TurnOnCyclic_Timer */
  Os_SecAlmLed_TurnOnCyclic_TimerHandle = osTimerNew(Os_SecAlmLed_TurnOnCyclic_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLed_TurnOnCyclic_Timer_attributes);
 8002b2c:	4b52      	ldr	r3, [pc, #328]	; (8002c78 <MX_FREERTOS_Init+0x174>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2101      	movs	r1, #1
 8002b32:	4852      	ldr	r0, [pc, #328]	; (8002c7c <MX_FREERTOS_Init+0x178>)
 8002b34:	f007 fbae 	bl	800a294 <osTimerNew>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4a51      	ldr	r2, [pc, #324]	; (8002c80 <MX_FREERTOS_Init+0x17c>)
 8002b3c:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLedTurnOn_Timer */
  Os_SecAlmLedTurnOn_TimerHandle = osTimerNew(Os_SecAlmLedTurnOn_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLedTurnOn_Timer_attributes);
 8002b3e:	4b51      	ldr	r3, [pc, #324]	; (8002c84 <MX_FREERTOS_Init+0x180>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	2101      	movs	r1, #1
 8002b44:	4850      	ldr	r0, [pc, #320]	; (8002c88 <MX_FREERTOS_Init+0x184>)
 8002b46:	f007 fba5 	bl	800a294 <osTimerNew>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4a4f      	ldr	r2, [pc, #316]	; (8002c8c <MX_FREERTOS_Init+0x188>)
 8002b4e:	6013      	str	r3, [r2, #0]

  /* creation of Os_FollowMeHome_Timer */
  Os_FollowMeHome_TimerHandle = osTimerNew(Os_FollowMeHome_Timer_Callback, osTimerPeriodic, NULL, &Os_FollowMeHome_Timer_attributes);
 8002b50:	4b4f      	ldr	r3, [pc, #316]	; (8002c90 <MX_FREERTOS_Init+0x18c>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	2101      	movs	r1, #1
 8002b56:	484f      	ldr	r0, [pc, #316]	; (8002c94 <MX_FREERTOS_Init+0x190>)
 8002b58:	f007 fb9c 	bl	800a294 <osTimerNew>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	4a4e      	ldr	r2, [pc, #312]	; (8002c98 <MX_FREERTOS_Init+0x194>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* creation of Os_TurnSignals_Timer */
  Os_TurnSignals_TimerHandle = osTimerNew(Os_TurnSignals_Timer_Callback, osTimerPeriodic, NULL, &Os_TurnSignals_Timer_attributes);
 8002b62:	4b4e      	ldr	r3, [pc, #312]	; (8002c9c <MX_FREERTOS_Init+0x198>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	2101      	movs	r1, #1
 8002b68:	484d      	ldr	r0, [pc, #308]	; (8002ca0 <MX_FREERTOS_Init+0x19c>)
 8002b6a:	f007 fb93 	bl	800a294 <osTimerNew>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4a4c      	ldr	r2, [pc, #304]	; (8002ca4 <MX_FREERTOS_Init+0x1a0>)
 8002b72:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmAlarm_Timer */
  Os_SecAlmAlarm_TimerHandle = osTimerNew(Os_SecAlmAlarm_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmAlarm_Timer_attributes);
 8002b74:	4b4c      	ldr	r3, [pc, #304]	; (8002ca8 <MX_FREERTOS_Init+0x1a4>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	2101      	movs	r1, #1
 8002b7a:	484c      	ldr	r0, [pc, #304]	; (8002cac <MX_FREERTOS_Init+0x1a8>)
 8002b7c:	f007 fb8a 	bl	800a294 <osTimerNew>
 8002b80:	4603      	mov	r3, r0
 8002b82:	4a4b      	ldr	r2, [pc, #300]	; (8002cb0 <MX_FREERTOS_Init+0x1ac>)
 8002b84:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcR_Buzzer_Timer */
  Os_PdcR_Buzzer_TimerHandle = osTimerNew(Os_PdcR_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcR_Buzzer_Timer_attributes);
 8002b86:	4b4b      	ldr	r3, [pc, #300]	; (8002cb4 <MX_FREERTOS_Init+0x1b0>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	484a      	ldr	r0, [pc, #296]	; (8002cb8 <MX_FREERTOS_Init+0x1b4>)
 8002b8e:	f007 fb81 	bl	800a294 <osTimerNew>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4a49      	ldr	r2, [pc, #292]	; (8002cbc <MX_FREERTOS_Init+0x1b8>)
 8002b96:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcF_Buzzer_Timer */
  Os_PdcF_Buzzer_TimerHandle = osTimerNew(Os_PdcF_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcF_Buzzer_Timer_attributes);
 8002b98:	4b49      	ldr	r3, [pc, #292]	; (8002cc0 <MX_FREERTOS_Init+0x1bc>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4849      	ldr	r0, [pc, #292]	; (8002cc4 <MX_FREERTOS_Init+0x1c0>)
 8002ba0:	f007 fb78 	bl	800a294 <osTimerNew>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4a48      	ldr	r2, [pc, #288]	; (8002cc8 <MX_FREERTOS_Init+0x1c4>)
 8002ba8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OS_Init */
  OS_InitHandle = osThreadNew(OS_TASK_OS_INIT, NULL, &OS_Init_attributes);
 8002baa:	4a48      	ldr	r2, [pc, #288]	; (8002ccc <MX_FREERTOS_Init+0x1c8>)
 8002bac:	2100      	movs	r1, #0
 8002bae:	4848      	ldr	r0, [pc, #288]	; (8002cd0 <MX_FREERTOS_Init+0x1cc>)
 8002bb0:	f007 fac8 	bl	800a144 <osThreadNew>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4a47      	ldr	r2, [pc, #284]	; (8002cd4 <MX_FREERTOS_Init+0x1d0>)
 8002bb8:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_Main */
  ASIL_APPL_MainHandle = osThreadNew(OS_TASK_ASIL_APPL_Main, NULL, &ASIL_APPL_Main_attributes);
 8002bba:	4a47      	ldr	r2, [pc, #284]	; (8002cd8 <MX_FREERTOS_Init+0x1d4>)
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4847      	ldr	r0, [pc, #284]	; (8002cdc <MX_FREERTOS_Init+0x1d8>)
 8002bc0:	f007 fac0 	bl	800a144 <osThreadNew>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	4a46      	ldr	r2, [pc, #280]	; (8002ce0 <MX_FREERTOS_Init+0x1dc>)
 8002bc8:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_PostMain */
  ASIL_APPL_PostMainHandle = osThreadNew(OS_TASK_ASIL_APPL_PostMain, NULL, &ASIL_APPL_PostMain_attributes);
 8002bca:	4a46      	ldr	r2, [pc, #280]	; (8002ce4 <MX_FREERTOS_Init+0x1e0>)
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4846      	ldr	r0, [pc, #280]	; (8002ce8 <MX_FREERTOS_Init+0x1e4>)
 8002bd0:	f007 fab8 	bl	800a144 <osThreadNew>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4a45      	ldr	r2, [pc, #276]	; (8002cec <MX_FREERTOS_Init+0x1e8>)
 8002bd8:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_PreMain */
  QM_APPL_PreMainHandle = osThreadNew(OS_TASK_QM_APPL_PreMain, NULL, &QM_APPL_PreMain_attributes);
 8002bda:	4a45      	ldr	r2, [pc, #276]	; (8002cf0 <MX_FREERTOS_Init+0x1ec>)
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4845      	ldr	r0, [pc, #276]	; (8002cf4 <MX_FREERTOS_Init+0x1f0>)
 8002be0:	f007 fab0 	bl	800a144 <osThreadNew>
 8002be4:	4603      	mov	r3, r0
 8002be6:	4a44      	ldr	r2, [pc, #272]	; (8002cf8 <MX_FREERTOS_Init+0x1f4>)
 8002be8:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_Main */
  QM_APPL_MainHandle = osThreadNew(OS_TASK_QM_APPL_Main, NULL, &QM_APPL_Main_attributes);
 8002bea:	4a44      	ldr	r2, [pc, #272]	; (8002cfc <MX_FREERTOS_Init+0x1f8>)
 8002bec:	2100      	movs	r1, #0
 8002bee:	4844      	ldr	r0, [pc, #272]	; (8002d00 <MX_FREERTOS_Init+0x1fc>)
 8002bf0:	f007 faa8 	bl	800a144 <osThreadNew>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4a43      	ldr	r2, [pc, #268]	; (8002d04 <MX_FREERTOS_Init+0x200>)
 8002bf8:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_PreMain */
  ASIL_BSW_PreMainHandle = osThreadNew(OS_TASK_ASIL_BSW_PreMain, NULL, &ASIL_BSW_PreMain_attributes);
 8002bfa:	4a43      	ldr	r2, [pc, #268]	; (8002d08 <MX_FREERTOS_Init+0x204>)
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4843      	ldr	r0, [pc, #268]	; (8002d0c <MX_FREERTOS_Init+0x208>)
 8002c00:	f007 faa0 	bl	800a144 <osThreadNew>
 8002c04:	4603      	mov	r3, r0
 8002c06:	4a42      	ldr	r2, [pc, #264]	; (8002d10 <MX_FREERTOS_Init+0x20c>)
 8002c08:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_Main */
  ASIL_BSW_MainHandle = osThreadNew(OS_TASK_ASIL_BSW_Main, NULL, &ASIL_BSW_Main_attributes);
 8002c0a:	4a42      	ldr	r2, [pc, #264]	; (8002d14 <MX_FREERTOS_Init+0x210>)
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4842      	ldr	r0, [pc, #264]	; (8002d18 <MX_FREERTOS_Init+0x214>)
 8002c10:	f007 fa98 	bl	800a144 <osThreadNew>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4a41      	ldr	r2, [pc, #260]	; (8002d1c <MX_FREERTOS_Init+0x218>)
 8002c18:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_PostMain */
  ASIL_BSW_PostMainHandle = osThreadNew(OS_TASK_ASIL_BSW_PostMain, NULL, &ASIL_BSW_PostMain_attributes);
 8002c1a:	4a41      	ldr	r2, [pc, #260]	; (8002d20 <MX_FREERTOS_Init+0x21c>)
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	4841      	ldr	r0, [pc, #260]	; (8002d24 <MX_FREERTOS_Init+0x220>)
 8002c20:	f007 fa90 	bl	800a144 <osThreadNew>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4a40      	ldr	r2, [pc, #256]	; (8002d28 <MX_FREERTOS_Init+0x224>)
 8002c28:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_PreMain */
  QM_BSW_PreMainHandle = osThreadNew(OS_TASK_QM_BSW_PreMain, NULL, &QM_BSW_PreMain_attributes);
 8002c2a:	4a40      	ldr	r2, [pc, #256]	; (8002d2c <MX_FREERTOS_Init+0x228>)
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4840      	ldr	r0, [pc, #256]	; (8002d30 <MX_FREERTOS_Init+0x22c>)
 8002c30:	f007 fa88 	bl	800a144 <osThreadNew>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4a3f      	ldr	r2, [pc, #252]	; (8002d34 <MX_FREERTOS_Init+0x230>)
 8002c38:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_Main */
  QM_BSW_MainHandle = osThreadNew(OS_TASK_QM_BSW_Main, NULL, &QM_BSW_Main_attributes);
 8002c3a:	4a3f      	ldr	r2, [pc, #252]	; (8002d38 <MX_FREERTOS_Init+0x234>)
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	483f      	ldr	r0, [pc, #252]	; (8002d3c <MX_FREERTOS_Init+0x238>)
 8002c40:	f007 fa80 	bl	800a144 <osThreadNew>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4a3e      	ldr	r2, [pc, #248]	; (8002d40 <MX_FREERTOS_Init+0x23c>)
 8002c48:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_PostMain */
  QM_BSW_PostMainHandle = osThreadNew(OS_TASK_QM_BSW_PostMain, NULL, &QM_BSW_PostMain_attributes);
 8002c4a:	4a3e      	ldr	r2, [pc, #248]	; (8002d44 <MX_FREERTOS_Init+0x240>)
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	483e      	ldr	r0, [pc, #248]	; (8002d48 <MX_FREERTOS_Init+0x244>)
 8002c50:	f007 fa78 	bl	800a144 <osThreadNew>
 8002c54:	4603      	mov	r3, r0
 8002c56:	4a3d      	ldr	r2, [pc, #244]	; (8002d4c <MX_FREERTOS_Init+0x248>)
 8002c58:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	0800ed50 	.word	0x0800ed50
 8002c64:	08002e95 	.word	0x08002e95
 8002c68:	2000026c 	.word	0x2000026c
 8002c6c:	0800ed60 	.word	0x0800ed60
 8002c70:	08002ead 	.word	0x08002ead
 8002c74:	20000270 	.word	0x20000270
 8002c78:	0800ed70 	.word	0x0800ed70
 8002c7c:	08002f15 	.word	0x08002f15
 8002c80:	20000274 	.word	0x20000274
 8002c84:	0800ed80 	.word	0x0800ed80
 8002c88:	08002f3d 	.word	0x08002f3d
 8002c8c:	20000278 	.word	0x20000278
 8002c90:	0800ed90 	.word	0x0800ed90
 8002c94:	08002f65 	.word	0x08002f65
 8002c98:	2000027c 	.word	0x2000027c
 8002c9c:	0800eda0 	.word	0x0800eda0
 8002ca0:	08002f91 	.word	0x08002f91
 8002ca4:	20000280 	.word	0x20000280
 8002ca8:	0800edb0 	.word	0x0800edb0
 8002cac:	08003001 	.word	0x08003001
 8002cb0:	20000284 	.word	0x20000284
 8002cb4:	0800edc0 	.word	0x0800edc0
 8002cb8:	08003029 	.word	0x08003029
 8002cbc:	20000288 	.word	0x20000288
 8002cc0:	0800edd0 	.word	0x0800edd0
 8002cc4:	08003045 	.word	0x08003045
 8002cc8:	2000028c 	.word	0x2000028c
 8002ccc:	0800ebc4 	.word	0x0800ebc4
 8002cd0:	08002d51 	.word	0x08002d51
 8002cd4:	20000240 	.word	0x20000240
 8002cd8:	0800ebe8 	.word	0x0800ebe8
 8002cdc:	08002d69 	.word	0x08002d69
 8002ce0:	20000244 	.word	0x20000244
 8002ce4:	0800ec0c 	.word	0x0800ec0c
 8002ce8:	08002d91 	.word	0x08002d91
 8002cec:	20000248 	.word	0x20000248
 8002cf0:	0800ec30 	.word	0x0800ec30
 8002cf4:	08002dad 	.word	0x08002dad
 8002cf8:	2000024c 	.word	0x2000024c
 8002cfc:	0800ec54 	.word	0x0800ec54
 8002d00:	08002dc9 	.word	0x08002dc9
 8002d04:	20000250 	.word	0x20000250
 8002d08:	0800ec78 	.word	0x0800ec78
 8002d0c:	08002de5 	.word	0x08002de5
 8002d10:	20000254 	.word	0x20000254
 8002d14:	0800ec9c 	.word	0x0800ec9c
 8002d18:	08002e01 	.word	0x08002e01
 8002d1c:	20000258 	.word	0x20000258
 8002d20:	0800ecc0 	.word	0x0800ecc0
 8002d24:	08002e21 	.word	0x08002e21
 8002d28:	2000025c 	.word	0x2000025c
 8002d2c:	0800ece4 	.word	0x0800ece4
 8002d30:	08002e3d 	.word	0x08002e3d
 8002d34:	20000260 	.word	0x20000260
 8002d38:	0800ed08 	.word	0x0800ed08
 8002d3c:	08002e59 	.word	0x08002e59
 8002d40:	20000264 	.word	0x20000264
 8002d44:	0800ed2c 	.word	0x0800ed2c
 8002d48:	08002e79 	.word	0x08002e79
 8002d4c:	20000268 	.word	0x20000268

08002d50 <OS_TASK_OS_INIT>:

/* USER CODE BEGIN Header_OS_TASK_OS_INIT */
/* USER CODE END Header_OS_TASK_OS_INIT */
void OS_TASK_OS_INIT(void *argument)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_OS_INIT */
	for(;;)
	{
		EcuM_DriverInit();
 8002d58:	f00b fa28 	bl	800e1ac <EcuM_DriverInit>
		configureTimerForRunTimeStats();
 8002d5c:	f7ff fe5a 	bl	8002a14 <configureTimerForRunTimeStats>
		vTaskSuspend(NULL);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f008 ffd3 	bl	800bd0c <vTaskSuspend>
		EcuM_DriverInit();
 8002d66:	e7f7      	b.n	8002d58 <OS_TASK_OS_INIT+0x8>

08002d68 <OS_TASK_ASIL_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_Main */
/* USER CODE END Header_OS_TASK_ASIL_APPL_Main */
void OS_TASK_ASIL_APPL_Main(void *argument)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_Main */
	for(;;)
	{
		Rte_Runnable_Btc_MainFunction();
 8002d70:	f00a fd9c 	bl	800d8ac <Rte_Runnable_Btc_MainFunction>
		Rte_Runnable_CenLoc_MainFunction();
 8002d74:	f00a fda0 	bl	800d8b8 <Rte_Runnable_CenLoc_MainFunction>
		Rte_Runnable_ExtLights_MainFunction();
 8002d78:	f00a fda4 	bl	800d8c4 <Rte_Runnable_ExtLights_MainFunction>
		Rte_Runnable_IntLights_MainFunction();
 8002d7c:	f00a fda8 	bl	800d8d0 <Rte_Runnable_IntLights_MainFunction>
		vTaskDelayUntil(&ASIL_APPL_Main, pdMS_TO_TICKS(5));
 8002d80:	2105      	movs	r1, #5
 8002d82:	4802      	ldr	r0, [pc, #8]	; (8002d8c <OS_TASK_ASIL_APPL_Main+0x24>)
 8002d84:	f008 ff44 	bl	800bc10 <vTaskDelayUntil>
		Rte_Runnable_Btc_MainFunction();
 8002d88:	e7f2      	b.n	8002d70 <OS_TASK_ASIL_APPL_Main+0x8>
 8002d8a:	bf00      	nop
 8002d8c:	20000218 	.word	0x20000218

08002d90 <OS_TASK_ASIL_APPL_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_PostMain */
/* USER CODE END Header_OS_TASK_ASIL_APPL_PostMain */
void OS_TASK_ASIL_APPL_PostMain(void *argument)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_PostMain */
	for(;;)
	{
		Rte_Runnable_DiagCtrl_MainFunction();
 8002d98:	f00a fdf1 	bl	800d97e <Rte_Runnable_DiagCtrl_MainFunction>
		vTaskDelayUntil(&ASIL_APPL_PostMain, pdMS_TO_TICKS(5));
 8002d9c:	2105      	movs	r1, #5
 8002d9e:	4802      	ldr	r0, [pc, #8]	; (8002da8 <OS_TASK_ASIL_APPL_PostMain+0x18>)
 8002da0:	f008 ff36 	bl	800bc10 <vTaskDelayUntil>
		Rte_Runnable_DiagCtrl_MainFunction();
 8002da4:	e7f8      	b.n	8002d98 <OS_TASK_ASIL_APPL_PostMain+0x8>
 8002da6:	bf00      	nop
 8002da8:	2000021c 	.word	0x2000021c

08002dac <OS_TASK_QM_APPL_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_PreMain */
/* USER CODE END Header_OS_TASK_QM_APPL_PreMain */
void OS_TASK_QM_APPL_PreMain(void *argument)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_PreMain */
	for(;;)
	{
		Rte_Runnable_SecAlm_MainFunction();
 8002db4:	f00a fd92 	bl	800d8dc <Rte_Runnable_SecAlm_MainFunction>
		vTaskDelayUntil(&QM_APPL_PreMain, pdMS_TO_TICKS(5));
 8002db8:	2105      	movs	r1, #5
 8002dba:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <OS_TASK_QM_APPL_PreMain+0x18>)
 8002dbc:	f008 ff28 	bl	800bc10 <vTaskDelayUntil>
		Rte_Runnable_SecAlm_MainFunction();
 8002dc0:	e7f8      	b.n	8002db4 <OS_TASK_QM_APPL_PreMain+0x8>
 8002dc2:	bf00      	nop
 8002dc4:	20000220 	.word	0x20000220

08002dc8 <OS_TASK_QM_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_Main */
/* USER CODE END Header_OS_TASK_QM_APPL_Main */
void OS_TASK_QM_APPL_Main(void *argument)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_Main */
	for(;;)
	{
		Rte_Runnable_Pdc_MainFunction();
 8002dd0:	f00a fddb 	bl	800d98a <Rte_Runnable_Pdc_MainFunction>
		vTaskDelayUntil(&QM_APPL_Main, pdMS_TO_TICKS(100));
 8002dd4:	2164      	movs	r1, #100	; 0x64
 8002dd6:	4802      	ldr	r0, [pc, #8]	; (8002de0 <OS_TASK_QM_APPL_Main+0x18>)
 8002dd8:	f008 ff1a 	bl	800bc10 <vTaskDelayUntil>
		Rte_Runnable_Pdc_MainFunction();
 8002ddc:	e7f8      	b.n	8002dd0 <OS_TASK_QM_APPL_Main+0x8>
 8002dde:	bf00      	nop
 8002de0:	20000224 	.word	0x20000224

08002de4 <OS_TASK_ASIL_BSW_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_PreMain */
/* USER CODE END Header_OS_TASK_ASIL_BSW_PreMain */
void OS_TASK_ASIL_BSW_PreMain(void *argument)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_PreMain */
	for(;;)
	{
		Rte_Runnable_Wdg_MainFunction();
 8002dec:	f00a fbc4 	bl	800d578 <Rte_Runnable_Wdg_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_PreMain, pdMS_TO_TICKS(5));
 8002df0:	2105      	movs	r1, #5
 8002df2:	4802      	ldr	r0, [pc, #8]	; (8002dfc <OS_TASK_ASIL_BSW_PreMain+0x18>)
 8002df4:	f008 ff0c 	bl	800bc10 <vTaskDelayUntil>
		Rte_Runnable_Wdg_MainFunction();
 8002df8:	e7f8      	b.n	8002dec <OS_TASK_ASIL_BSW_PreMain+0x8>
 8002dfa:	bf00      	nop
 8002dfc:	20000228 	.word	0x20000228

08002e00 <OS_TASK_ASIL_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_Main */
/* USER CODE END Header_OS_TASK_ASIL_BSW_Main */
void OS_TASK_ASIL_BSW_Main(void *argument)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_Main */
	for(;;)
	{
		Rte_Runnable_Uart_MainFunction();
 8002e08:	f00a fbc8 	bl	800d59c <Rte_Runnable_Uart_MainFunction>
		Rte_Runnable_Crc_MainFunction();
 8002e0c:	f00a fbae 	bl	800d56c <Rte_Runnable_Crc_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_Main, pdMS_TO_TICKS(5));
 8002e10:	2105      	movs	r1, #5
 8002e12:	4802      	ldr	r0, [pc, #8]	; (8002e1c <OS_TASK_ASIL_BSW_Main+0x1c>)
 8002e14:	f008 fefc 	bl	800bc10 <vTaskDelayUntil>
		Rte_Runnable_Uart_MainFunction();
 8002e18:	e7f6      	b.n	8002e08 <OS_TASK_ASIL_BSW_Main+0x8>
 8002e1a:	bf00      	nop
 8002e1c:	2000022c 	.word	0x2000022c

08002e20 <OS_TASK_ASIL_BSW_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_PostMain */
/* USER CODE END Header_OS_TASK_ASIL_BSW_PostMain */
void OS_TASK_ASIL_BSW_PostMain(void *argument)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_PostMain */
	for(;;)
	{
		Rte_Runnable_Tim_MainFunction();
 8002e28:	f00a fbb2 	bl	800d590 <Rte_Runnable_Tim_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_PostMain, pdMS_TO_TICKS(5));
 8002e2c:	2105      	movs	r1, #5
 8002e2e:	4802      	ldr	r0, [pc, #8]	; (8002e38 <OS_TASK_ASIL_BSW_PostMain+0x18>)
 8002e30:	f008 feee 	bl	800bc10 <vTaskDelayUntil>
		Rte_Runnable_Tim_MainFunction();
 8002e34:	e7f8      	b.n	8002e28 <OS_TASK_ASIL_BSW_PostMain+0x8>
 8002e36:	bf00      	nop
 8002e38:	20000230 	.word	0x20000230

08002e3c <OS_TASK_QM_BSW_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_PreMain */
/* USER CODE END Header_OS_TASK_QM_BSW_PreMain */
void OS_TASK_QM_BSW_PreMain(void *argument)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_PreMain */
	for(;;)
	{
		Rte_Runnable_Adc_MainFunction();
 8002e44:	f00a fb9e 	bl	800d584 <Rte_Runnable_Adc_MainFunction>
		vTaskDelayUntil(&QM_BSW_Main, pdMS_TO_TICKS(5));
 8002e48:	2105      	movs	r1, #5
 8002e4a:	4802      	ldr	r0, [pc, #8]	; (8002e54 <OS_TASK_QM_BSW_PreMain+0x18>)
 8002e4c:	f008 fee0 	bl	800bc10 <vTaskDelayUntil>
		Rte_Runnable_Adc_MainFunction();
 8002e50:	e7f8      	b.n	8002e44 <OS_TASK_QM_BSW_PreMain+0x8>
 8002e52:	bf00      	nop
 8002e54:	20000238 	.word	0x20000238

08002e58 <OS_TASK_QM_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_Main */
/* USER CODE END Header_OS_TASK_QM_BSW_Main */
void OS_TASK_QM_BSW_Main(void *argument)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_Main */
	for(;;)
	{
		Rte_Runnable_EcuM_MainFunction();
 8002e60:	f00a fb78 	bl	800d554 <Rte_Runnable_EcuM_MainFunction>
		Rte_Runnable_SystemManager_MainFunction();
 8002e64:	f00a fb7c 	bl	800d560 <Rte_Runnable_SystemManager_MainFunction>
		vTaskDelayUntil(&QM_BSW_PreMain, pdMS_TO_TICKS(5));
 8002e68:	2105      	movs	r1, #5
 8002e6a:	4802      	ldr	r0, [pc, #8]	; (8002e74 <OS_TASK_QM_BSW_Main+0x1c>)
 8002e6c:	f008 fed0 	bl	800bc10 <vTaskDelayUntil>
		Rte_Runnable_EcuM_MainFunction();
 8002e70:	e7f6      	b.n	8002e60 <OS_TASK_QM_BSW_Main+0x8>
 8002e72:	bf00      	nop
 8002e74:	20000234 	.word	0x20000234

08002e78 <OS_TASK_QM_BSW_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_PostMain */
/* USER CODE END Header_OS_TASK_QM_BSW_PostMain */
void OS_TASK_QM_BSW_PostMain(void *argument)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_PostMain */
  for(;;)
  {
	  Rte_Runnable_Dem_MainFunction();
 8002e80:	f00a fd89 	bl	800d996 <Rte_Runnable_Dem_MainFunction>
	  vTaskDelayUntil(&QM_BSW_PostMain, pdMS_TO_TICKS(5));
 8002e84:	2105      	movs	r1, #5
 8002e86:	4802      	ldr	r0, [pc, #8]	; (8002e90 <OS_TASK_QM_BSW_PostMain+0x18>)
 8002e88:	f008 fec2 	bl	800bc10 <vTaskDelayUntil>
	  Rte_Runnable_Dem_MainFunction();
 8002e8c:	e7f8      	b.n	8002e80 <OS_TASK_QM_BSW_PostMain+0x8>
 8002e8e:	bf00      	nop
 8002e90:	2000023c 	.word	0x2000023c

08002e94 <Os_SecAlm_AlarmReset_Callback>:
  /* USER CODE END OS_TASK_QM_BSW_PostMain */
}

/* Os_SecAlm_AlarmReset_Callback function */
void Os_SecAlm_AlarmReset_Callback(void *argument)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlm_AlarmReset_Callback */
	/* Reset the security alarm counter trigger. */
	Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(0);
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f00a fcf5 	bl	800d88c <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>
  /* USER CODE END Os_SecAlm_AlarmReset_Callback */
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <Os_CenLoc_LockUnlockSequence_Timer_Callback>:

/* Os_CenLoc_LockUnlockSequence_Timer_Callback function */
void Os_CenLoc_LockUnlockSequence_Timer_Callback(void *argument)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_CenLoc_LockUnlockSequence_Timer_Callback */
	/* If the counter variable for the lock unlock turn signals sequence is less than or equal to 6
	 * Then if there is either a lock or an unlock sequence increase the counter to process the states
	 * in the application. */
	if(Os_LockUnlockSequence_Counter <= 6
 8002eb4:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b06      	cmp	r3, #6
 8002eba:	d819      	bhi.n	8002ef0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
		&& ((Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_HIGH)
 8002ebc:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d103      	bne.n	8002ecc <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x20>
 8002ec4:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d007      	beq.n	8002edc <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x30>
		|| (Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_LOW)))
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d10d      	bne.n	8002ef0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
	{
		Os_LockUnlockSequence_Counter = Os_LockUnlockSequence_Counter + 1;
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002ee6:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 8002ee8:	4807      	ldr	r0, [pc, #28]	; (8002f08 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002eea:	f00a faa3 	bl	800d434 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
 8002eee:	e006      	b.n	8002efe <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x52>
	}
	else
	{
		/* Update the counter with out of bounds value to prevent unexpected triggering. */
		Os_LockUnlockSequence_Counter = 7;
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002ef2:	2207      	movs	r2, #7
 8002ef4:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 8002ef6:	4804      	ldr	r0, [pc, #16]	; (8002f08 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002ef8:	f00a fa9c 	bl	800d434 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
	}

  /* USER CODE END Os_CenLoc_LockUnlockSequence_Timer_Callback */
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000204 	.word	0x20000204
 8002f0c:	200000bf 	.word	0x200000bf
 8002f10:	200000c7 	.word	0x200000c7

08002f14 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback>:

/* Os_SecAlmLed_TurnOnCyclic_Timer_Callback function */
void Os_SecAlmLed_TurnOnCyclic_Timer_Callback(void *argument)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
	/* Increase the counter variable used in the timer for the alarm LED
	 * that expires every 3,75 seconds. */
	Os_TurnOnCyclic_Counter = Os_TurnOnCyclic_Counter + 1;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	3301      	adds	r3, #1
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8002f26:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(&Os_TurnOnCyclic_Counter);
 8002f28:	4803      	ldr	r0, [pc, #12]	; (8002f38 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8002f2a:	f00a fa73 	bl	800d414 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>
  /* USER CODE END Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000205 	.word	0x20000205

08002f3c <Os_SecAlmLedTurnOn_Timer_Callback>:

/* Os_SecAlmLedTurnOn_Timer_Callback function */
void Os_SecAlmLedTurnOn_Timer_Callback(void *argument)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLedTurnOn_Timer_Callback */
	/* Increase the counter variable used in the turning on the alarm LED for 0,25 seconds. */
	Os_TurnOnLed_Counter = Os_TurnOnLed_Counter + 1;
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8002f4e:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(&Os_TurnOnLed_Counter);
 8002f50:	4803      	ldr	r0, [pc, #12]	; (8002f60 <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8002f52:	f00a fa4f 	bl	800d3f4 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>
  /* USER CODE END Os_SecAlmLedTurnOn_Timer_Callback */
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000206 	.word	0x20000206

08002f64 <Os_FollowMeHome_Timer_Callback>:

/* Os_FollowMeHome_Timer_Callback function */
void Os_FollowMeHome_Timer_Callback(void *argument)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_FollowMeHome_Timer_Callback */
	/* Increase the counter variable used in the follow me home concept when the timer
	 * period expires for the lights to go off. */
	Os_FollowMeHome_Counter = Os_FollowMeHome_Counter + 1;
 8002f6c:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <Os_FollowMeHome_Timer_Callback+0x28>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	3301      	adds	r3, #1
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <Os_FollowMeHome_Timer_Callback+0x28>)
 8002f76:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(Os_FollowMeHome_Counter);
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <Os_FollowMeHome_Timer_Callback+0x28>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f00a fa29 	bl	800d3d4 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
  /* USER CODE END Os_FollowMeHome_Timer_Callback */
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000207 	.word	0x20000207

08002f90 <Os_TurnSignals_Timer_Callback>:

/* Os_TurnSignals_Timer_Callback function */
void Os_TurnSignals_Timer_Callback(void *argument)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_TurnSignals_Timer_Callback */
	/* Increase the respective counter on request from the specific light in turn signals. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <Os_TurnSignals_Timer_Callback+0x58>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d107      	bne.n	8002fb0 <Os_TurnSignals_Timer_Callback+0x20>
	{
		Os_Lts_Counter = Os_Lts_Counter + 1;
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <Os_TurnSignals_Timer_Callback+0x5c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	4a11      	ldr	r2, [pc, #68]	; (8002fec <Os_TurnSignals_Timer_Callback+0x5c>)
 8002fa8:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(&Os_Lts_Counter);
 8002faa:	4810      	ldr	r0, [pc, #64]	; (8002fec <Os_TurnSignals_Timer_Callback+0x5c>)
 8002fac:	f00a fc2e 	bl	800d80c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <Os_TurnSignals_Timer_Callback+0x60>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d107      	bne.n	8002fc8 <Os_TurnSignals_Timer_Callback+0x38>
	{
		Os_Rts_Counter = Os_Rts_Counter + 1;
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <Os_TurnSignals_Timer_Callback+0x64>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	4a0d      	ldr	r2, [pc, #52]	; (8002ff4 <Os_TurnSignals_Timer_Callback+0x64>)
 8002fc0:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(&Os_Rts_Counter);
 8002fc2:	480c      	ldr	r0, [pc, #48]	; (8002ff4 <Os_TurnSignals_Timer_Callback+0x64>)
 8002fc4:	f00a fc12 	bl	800d7ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_HIGH)
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <Os_TurnSignals_Timer_Callback+0x68>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <Os_TurnSignals_Timer_Callback+0x50>
	{
		Os_HL_Counter = Os_HL_Counter + 1;
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <Os_TurnSignals_Timer_Callback+0x6c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <Os_TurnSignals_Timer_Callback+0x6c>)
 8002fd8:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(&Os_HL_Counter);
 8002fda:	4808      	ldr	r0, [pc, #32]	; (8002ffc <Os_TurnSignals_Timer_Callback+0x6c>)
 8002fdc:	f00a fc26 	bl	800d82c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>
	else
	{
		/* do nothing */
	}
  /* USER CODE END Os_TurnSignals_Timer_Callback */
}
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	200000e6 	.word	0x200000e6
 8002fec:	20000208 	.word	0x20000208
 8002ff0:	200000e7 	.word	0x200000e7
 8002ff4:	2000020c 	.word	0x2000020c
 8002ff8:	200000ea 	.word	0x200000ea
 8002ffc:	20000210 	.word	0x20000210

08003000 <Os_SecAlmAlarm_Timer_Callback>:

/* Os_SecAlmAlarm_Timer_Callback function */
void Os_SecAlmAlarm_Timer_Callback(void *argument)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmAlarm_Timer_Callback */
	/* Increase the security alarm trigger counter when the alarm is on. */
	Os_Alarm_Counter = Os_Alarm_Counter + 1;
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <Os_SecAlmAlarm_Timer_Callback+0x24>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	3301      	adds	r3, #1
 800300e:	b2da      	uxtb	r2, r3
 8003010:	4b04      	ldr	r3, [pc, #16]	; (8003024 <Os_SecAlmAlarm_Timer_Callback+0x24>)
 8003012:	701a      	strb	r2, [r3, #0]
	Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(&Os_Alarm_Counter);
 8003014:	4803      	ldr	r0, [pc, #12]	; (8003024 <Os_SecAlmAlarm_Timer_Callback+0x24>)
 8003016:	f00a fc29 	bl	800d86c <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>
  /* USER CODE END Os_SecAlmAlarm_Timer_Callback */
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000214 	.word	0x20000214

08003028 <Os_PdcR_Buzzer_Timer_Callback>:

/* Os_PdcR_Buzzer_Timer_Callback function */
void Os_PdcR_Buzzer_Timer_Callback(void *argument)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcR_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN);
 8003030:	2120      	movs	r1, #32
 8003032:	4803      	ldr	r0, [pc, #12]	; (8003040 <Os_PdcR_Buzzer_Timer_Callback+0x18>)
 8003034:	f002 febf 	bl	8005db6 <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcR_Buzzer_Timer_Callback */
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40020400 	.word	0x40020400

08003044 <Os_PdcF_Buzzer_Timer_Callback>:

/* Os_PdcF_Buzzer_Timer_Callback function */
void Os_PdcF_Buzzer_Timer_Callback(void *argument)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcF_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN);
 800304c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003050:	4803      	ldr	r0, [pc, #12]	; (8003060 <Os_PdcF_Buzzer_Timer_Callback+0x1c>)
 8003052:	f002 feb0 	bl	8005db6 <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcF_Buzzer_Timer_Callback */
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40020800 	.word	0x40020800

08003064 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306a:	f107 0314 	add.w	r3, r7, #20
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	60da      	str	r2, [r3, #12]
 8003078:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	4b4d      	ldr	r3, [pc, #308]	; (80031b4 <MX_GPIO_Init+0x150>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	4a4c      	ldr	r2, [pc, #304]	; (80031b4 <MX_GPIO_Init+0x150>)
 8003084:	f043 0304 	orr.w	r3, r3, #4
 8003088:	6313      	str	r3, [r2, #48]	; 0x30
 800308a:	4b4a      	ldr	r3, [pc, #296]	; (80031b4 <MX_GPIO_Init+0x150>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	4b46      	ldr	r3, [pc, #280]	; (80031b4 <MX_GPIO_Init+0x150>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	4a45      	ldr	r2, [pc, #276]	; (80031b4 <MX_GPIO_Init+0x150>)
 80030a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a4:	6313      	str	r3, [r2, #48]	; 0x30
 80030a6:	4b43      	ldr	r3, [pc, #268]	; (80031b4 <MX_GPIO_Init+0x150>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	4b3f      	ldr	r3, [pc, #252]	; (80031b4 <MX_GPIO_Init+0x150>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	4a3e      	ldr	r2, [pc, #248]	; (80031b4 <MX_GPIO_Init+0x150>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	6313      	str	r3, [r2, #48]	; 0x30
 80030c2:	4b3c      	ldr	r3, [pc, #240]	; (80031b4 <MX_GPIO_Init+0x150>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	4b38      	ldr	r3, [pc, #224]	; (80031b4 <MX_GPIO_Init+0x150>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4a37      	ldr	r2, [pc, #220]	; (80031b4 <MX_GPIO_Init+0x150>)
 80030d8:	f043 0302 	orr.w	r3, r3, #2
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
 80030de:	4b35      	ldr	r3, [pc, #212]	; (80031b4 <MX_GPIO_Init+0x150>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4b31      	ldr	r3, [pc, #196]	; (80031b4 <MX_GPIO_Init+0x150>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	4a30      	ldr	r2, [pc, #192]	; (80031b4 <MX_GPIO_Init+0x150>)
 80030f4:	f043 0308 	orr.w	r3, r3, #8
 80030f8:	6313      	str	r3, [r2, #48]	; 0x30
 80030fa:	4b2e      	ldr	r3, [pc, #184]	; (80031b4 <MX_GPIO_Init+0x150>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PDCF_BUZZER_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8003106:	2200      	movs	r2, #0
 8003108:	f64f 4173 	movw	r1, #64627	; 0xfc73
 800310c:	482a      	ldr	r0, [pc, #168]	; (80031b8 <MX_GPIO_Init+0x154>)
 800310e:	f002 fe39 	bl	8005d84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8003112:	2200      	movs	r2, #0
 8003114:	f641 11fc 	movw	r1, #6652	; 0x19fc
 8003118:	4828      	ldr	r0, [pc, #160]	; (80031bc <MX_GPIO_Init+0x158>)
 800311a:	f002 fe33 	bl	8005d84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|PDCF_TRIG_Pin
                          |HB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin
 800311e:	2200      	movs	r2, #0
 8003120:	f24f 01f7 	movw	r1, #61687	; 0xf0f7
 8003124:	4826      	ldr	r0, [pc, #152]	; (80031c0 <MX_GPIO_Init+0x15c>)
 8003126:	f002 fe2d 	bl	8005d84 <HAL_GPIO_WritePin>
                          |PDCR_TRIG_Pin|AL_Pin|RL_Pin|GPIO_PIN_4
                          |PDCR_BUZZER_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800312a:	2200      	movs	r2, #0
 800312c:	2104      	movs	r1, #4
 800312e:	4825      	ldr	r0, [pc, #148]	; (80031c4 <MX_GPIO_Init+0x160>)
 8003130:	f002 fe28 	bl	8005d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC0
                           PC1 PC4 PC5 PC6
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = PDCF_BUZZER_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8003134:	f64f 4373 	movw	r3, #64627	; 0xfc73
 8003138:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800313a:	2301      	movs	r3, #1
 800313c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003142:	2300      	movs	r3, #0
 8003144:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003146:	f107 0314 	add.w	r3, r7, #20
 800314a:	4619      	mov	r1, r3
 800314c:	481a      	ldr	r0, [pc, #104]	; (80031b8 <MX_GPIO_Init+0x154>)
 800314e:	f002 fbb1 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA8 PAPin
                           PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8003152:	f641 13fc 	movw	r3, #6652	; 0x19fc
 8003156:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|PDCF_TRIG_Pin
                          |HB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003158:	2301      	movs	r3, #1
 800315a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003160:	2300      	movs	r3, #0
 8003162:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003164:	f107 0314 	add.w	r3, r7, #20
 8003168:	4619      	mov	r1, r3
 800316a:	4814      	ldr	r0, [pc, #80]	; (80031bc <MX_GPIO_Init+0x158>)
 800316c:	f002 fba2 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PBPin PBPin
                           PBPin PBPin PBPin PB4
                           PBPin PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin
 8003170:	f24f 03f7 	movw	r3, #61687	; 0xf0f7
 8003174:	617b      	str	r3, [r7, #20]
                          |PDCR_TRIG_Pin|AL_Pin|RL_Pin|GPIO_PIN_4
                          |PDCR_BUZZER_Pin|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003176:	2301      	movs	r3, #1
 8003178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	4619      	mov	r1, r3
 8003188:	480d      	ldr	r0, [pc, #52]	; (80031c0 <MX_GPIO_Init+0x15c>)
 800318a:	f002 fb93 	bl	80058b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800318e:	2304      	movs	r3, #4
 8003190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003192:	2301      	movs	r3, #1
 8003194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319a:	2300      	movs	r3, #0
 800319c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800319e:	f107 0314 	add.w	r3, r7, #20
 80031a2:	4619      	mov	r1, r3
 80031a4:	4807      	ldr	r0, [pc, #28]	; (80031c4 <MX_GPIO_Init+0x160>)
 80031a6:	f002 fb85 	bl	80058b4 <HAL_GPIO_Init>

}
 80031aa:	bf00      	nop
 80031ac:	3728      	adds	r7, #40	; 0x28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40020800 	.word	0x40020800
 80031bc:	40020000 	.word	0x40020000
 80031c0:	40020400 	.word	0x40020400
 80031c4:	40020c00 	.word	0x40020c00

080031c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	4b21      	ldr	r3, [pc, #132]	; (8003258 <HAL_MspInit+0x90>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	4a20      	ldr	r2, [pc, #128]	; (8003258 <HAL_MspInit+0x90>)
 80031d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031dc:	6453      	str	r3, [r2, #68]	; 0x44
 80031de:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <HAL_MspInit+0x90>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <HAL_MspInit+0x90>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	4a19      	ldr	r2, [pc, #100]	; (8003258 <HAL_MspInit+0x90>)
 80031f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f8:	6413      	str	r3, [r2, #64]	; 0x40
 80031fa:	4b17      	ldr	r3, [pc, #92]	; (8003258 <HAL_MspInit+0x90>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	210f      	movs	r1, #15
 800320a:	f06f 000b 	mvn.w	r0, #11
 800320e:	f001 fdac 	bl	8004d6a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	210f      	movs	r1, #15
 8003216:	f06f 000a 	mvn.w	r0, #10
 800321a:	f001 fda6 	bl	8004d6a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 800321e:	2200      	movs	r2, #0
 8003220:	210f      	movs	r1, #15
 8003222:	f06f 0009 	mvn.w	r0, #9
 8003226:	f001 fda0 	bl	8004d6a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	210f      	movs	r1, #15
 800322e:	f06f 0004 	mvn.w	r0, #4
 8003232:	f001 fd9a 	bl	8004d6a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8003236:	2200      	movs	r2, #0
 8003238:	210f      	movs	r1, #15
 800323a:	f06f 0003 	mvn.w	r0, #3
 800323e:	f001 fd94 	bl	8004d6a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003242:	2200      	movs	r2, #0
 8003244:	210f      	movs	r1, #15
 8003246:	f06f 0001 	mvn.w	r0, #1
 800324a:	f001 fd8e 	bl	8004d6a <HAL_NVIC_SetPriority>
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800

0800325c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08c      	sub	sp, #48	; 0x30
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800326c:	2300      	movs	r3, #0
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	4b2e      	ldr	r3, [pc, #184]	; (800332c <HAL_InitTick+0xd0>)
 8003272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003274:	4a2d      	ldr	r2, [pc, #180]	; (800332c <HAL_InitTick+0xd0>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6453      	str	r3, [r2, #68]	; 0x44
 800327c:	4b2b      	ldr	r3, [pc, #172]	; (800332c <HAL_InitTick+0xd0>)
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003288:	f107 020c 	add.w	r2, r7, #12
 800328c:	f107 0310 	add.w	r3, r7, #16
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f003 fa52 	bl	800673c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003298:	f003 fa3c 	bl	8006714 <HAL_RCC_GetPCLK2Freq>
 800329c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	4a23      	ldr	r2, [pc, #140]	; (8003330 <HAL_InitTick+0xd4>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	0c9b      	lsrs	r3, r3, #18
 80032a8:	3b01      	subs	r3, #1
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80032ac:	4b21      	ldr	r3, [pc, #132]	; (8003334 <HAL_InitTick+0xd8>)
 80032ae:	4a22      	ldr	r2, [pc, #136]	; (8003338 <HAL_InitTick+0xdc>)
 80032b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <HAL_InitTick+0xd8>)
 80032b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80032ba:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <HAL_InitTick+0xd8>)
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80032c0:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <HAL_InitTick+0xd8>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <HAL_InitTick+0xd8>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_InitTick+0xd8>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80032d2:	4818      	ldr	r0, [pc, #96]	; (8003334 <HAL_InitTick+0xd8>)
 80032d4:	f003 fa64 	bl	80067a0 <HAL_TIM_Base_Init>
 80032d8:	4603      	mov	r3, r0
 80032da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80032de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d11b      	bne.n	800331e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80032e6:	4813      	ldr	r0, [pc, #76]	; (8003334 <HAL_InitTick+0xd8>)
 80032e8:	f003 fab6 	bl	8006858 <HAL_TIM_Base_Start_IT>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80032f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d111      	bne.n	800331e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80032fa:	2019      	movs	r0, #25
 80032fc:	f001 fd51 	bl	8004da2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	d808      	bhi.n	8003318 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003306:	2200      	movs	r2, #0
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	2019      	movs	r0, #25
 800330c:	f001 fd2d 	bl	8004d6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003310:	4a0a      	ldr	r2, [pc, #40]	; (800333c <HAL_InitTick+0xe0>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e002      	b.n	800331e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800331e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003322:	4618      	mov	r0, r3
 8003324:	3730      	adds	r7, #48	; 0x30
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800
 8003330:	431bde83 	.word	0x431bde83
 8003334:	2000029c 	.word	0x2000029c
 8003338:	40010000 	.word	0x40010000
 800333c:	20000020 	.word	0x20000020

08003340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	SystemManager_SetFault(NMI_RESET);
 8003344:	2008      	movs	r0, #8
 8003346:	f00b f867 	bl	800e418 <SystemManager_SetFault>
	SystemManager_PerformReset();
 800334a:	f00b f88f 	bl	800e46c <SystemManager_PerformReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800334e:	e7fe      	b.n	800334e <NMI_Handler+0xe>

08003350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	SystemManager_SetFault(HARDWARE_RESET);
 8003354:	2006      	movs	r0, #6
 8003356:	f00b f85f 	bl	800e418 <SystemManager_SetFault>
	SystemManager_PerformReset();
 800335a:	f00b f887 	bl	800e46c <SystemManager_PerformReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800335e:	e7fe      	b.n	800335e <HardFault_Handler+0xe>

08003360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	SystemManager_SetFault(MEMORY_FAULT_RESET);
 8003364:	2009      	movs	r0, #9
 8003366:	f00b f857 	bl	800e418 <SystemManager_SetFault>
	SystemManager_PerformReset();
 800336a:	f00b f87f 	bl	800e46c <SystemManager_PerformReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800336e:	e7fe      	b.n	800336e <MemManage_Handler+0xe>

08003370 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	SystemManager_SetFault(BUS_FAULT_RESET);
 8003374:	200b      	movs	r0, #11
 8003376:	f00b f84f 	bl	800e418 <SystemManager_SetFault>
	SystemManager_PerformReset();
 800337a:	f00b f877 	bl	800e46c <SystemManager_PerformReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800337e:	e7fe      	b.n	800337e <BusFault_Handler+0xe>

08003380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	SystemManager_SetFault(USAGE_FAULT_RESET);
 8003384:	200a      	movs	r0, #10
 8003386:	f00b f847 	bl	800e418 <SystemManager_SetFault>
	SystemManager_PerformReset();
 800338a:	f00b f86f 	bl	800e46c <SystemManager_PerformReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800338e:	e7fe      	b.n	800338e <UsageFault_Handler+0xe>

08003390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */
  /* USER CODE END RCC_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80033b0:	4802      	ldr	r0, [pc, #8]	; (80033bc <ADC_IRQHandler+0x10>)
 80033b2:	f000 fe99 	bl	80040e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  /* USER CODE END ADC_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	2000012c 	.word	0x2000012c

080033c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033c4:	4802      	ldr	r0, [pc, #8]	; (80033d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80033c6:	f003 fe3f 	bl	8007048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	2000029c 	.word	0x2000029c

080033d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	/* When alarm is on turn on the LEDs at full duty cycle for the designated time. */
	if(Rte_P_SecAlm_SecAlmPort_SecAlm_PinStateChange == STD_HIGH)
 80033d8:	4b46      	ldr	r3, [pc, #280]	; (80034f4 <TIM2_IRQHandler+0x120>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d10b      	bne.n	80033f8 <TIM2_IRQHandler+0x24>
	{
		TIM2->CCR1 = TIM2->ARR;
 80033e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR2 = TIM2->ARR;
 80033ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	6393      	str	r3, [r2, #56]	; 0x38
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the low beam light until 75%. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LowBeam_CurrentState == STD_HIGH)
 80033f8:	4b3f      	ldr	r3, [pc, #252]	; (80034f8 <TIM2_IRQHandler+0x124>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d11a      	bne.n	8003436 <TIM2_IRQHandler+0x62>
	{
		if(TIM2->CCR1 < 1999)
 8003400:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003406:	f240 72ce 	movw	r2, #1998	; 0x7ce
 800340a:	4293      	cmp	r3, r2
 800340c:	d807      	bhi.n	800341e <TIM2_IRQHandler+0x4a>
		{
			TIM2->CCR1 = TIM2->CCR1 + 20;
 800340e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003418:	3314      	adds	r3, #20
 800341a:	6353      	str	r3, [r2, #52]	; 0x34
 800341c:	e00b      	b.n	8003436 <TIM2_IRQHandler+0x62>
		}
		else if(TIM2->CCR1 >= 1999)
 800341e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003424:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003428:	4293      	cmp	r3, r2
 800342a:	d904      	bls.n	8003436 <TIM2_IRQHandler+0x62>
		{
			TIM2->CCR1 = 1999;
 800342c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003430:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003434:	635a      	str	r2, [r3, #52]	; 0x34
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the rear position light until 75%. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearPositionLights_CurrentState == STD_HIGH)
 8003436:	4b31      	ldr	r3, [pc, #196]	; (80034fc <TIM2_IRQHandler+0x128>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d11a      	bne.n	8003474 <TIM2_IRQHandler+0xa0>
	{
		if(TIM2->CCR2 < 1999)
 800343e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003444:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003448:	4293      	cmp	r3, r2
 800344a:	d807      	bhi.n	800345c <TIM2_IRQHandler+0x88>
		{
			TIM2->CCR2 = TIM2->CCR2 + 1;
 800344c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003456:	3301      	adds	r3, #1
 8003458:	6393      	str	r3, [r2, #56]	; 0x38
 800345a:	e00b      	b.n	8003474 <TIM2_IRQHandler+0xa0>
		}
		else if(TIM2->CCR2 >= 1999)
 800345c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003466:	4293      	cmp	r3, r2
 8003468:	d904      	bls.n	8003474 <TIM2_IRQHandler+0xa0>
		{
			TIM2->CCR2 = 1999;
 800346a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800346e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003472:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_HIGH)
 8003474:	4b22      	ldr	r3, [pc, #136]	; (8003500 <TIM2_IRQHandler+0x12c>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d11b      	bne.n	80034b4 <TIM2_IRQHandler+0xe0>
	{
		if(TIM2->CCR3 < 1999)
 800347c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003486:	4293      	cmp	r3, r2
 8003488:	d807      	bhi.n	800349a <TIM2_IRQHandler+0xc6>
		{
			TIM2->CCR3 = TIM2->CCR3 + 20;
 800348a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003494:	3314      	adds	r3, #20
 8003496:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003498:	e026      	b.n	80034e8 <TIM2_IRQHandler+0x114>
		}
		else if(TIM2->CCR3 >= 1999)
 800349a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800349e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a0:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d91f      	bls.n	80034e8 <TIM2_IRQHandler+0x114>
		{
			TIM2->CCR3 = 1999;
 80034a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034ac:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80034b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80034b2:	e019      	b.n	80034e8 <TIM2_IRQHandler+0x114>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_LOW)
 80034b4:	4b12      	ldr	r3, [pc, #72]	; (8003500 <TIM2_IRQHandler+0x12c>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d115      	bne.n	80034e8 <TIM2_IRQHandler+0x114>
	{
		if(TIM2->CCR3 > 20)
 80034bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c2:	2b14      	cmp	r3, #20
 80034c4:	d907      	bls.n	80034d6 <TIM2_IRQHandler+0x102>
		{
			TIM2->CCR3 = TIM2->CCR3 - 20;
 80034c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034d0:	3b14      	subs	r3, #20
 80034d2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80034d4:	e008      	b.n	80034e8 <TIM2_IRQHandler+0x114>
		}
		else if(TIM2->CCR3 <= 20)
 80034d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034dc:	2b14      	cmp	r3, #20
 80034de:	d803      	bhi.n	80034e8 <TIM2_IRQHandler+0x114>
		{
			TIM2->CCR3 = 0;
 80034e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034e4:	2200      	movs	r2, #0
 80034e6:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034e8:	4806      	ldr	r0, [pc, #24]	; (8003504 <TIM2_IRQHandler+0x130>)
 80034ea:	f003 fdad 	bl	8007048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000111 	.word	0x20000111
 80034f8:	200000e8 	.word	0x200000e8
 80034fc:	200000e9 	.word	0x200000e9
 8003500:	20000104 	.word	0x20000104
 8003504:	20000350 	.word	0x20000350

08003508 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
	/* On brake lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the brake lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_HIGH)
 800350c:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <TIM3_IRQHandler+0xb8>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d104      	bne.n	800351e <TIM3_IRQHandler+0x16>
	{
		TIM3->CCR2 = TIM3->ARR;
 8003514:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <TIM3_IRQHandler+0xbc>)
 8003516:	4a2b      	ldr	r2, [pc, #172]	; (80035c4 <TIM3_IRQHandler+0xbc>)
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	6393      	str	r3, [r2, #56]	; 0x38
 800351c:	e006      	b.n	800352c <TIM3_IRQHandler+0x24>
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_LOW)
 800351e:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <TIM3_IRQHandler+0xb8>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <TIM3_IRQHandler+0x24>
	{
		TIM3->CCR2 = 0;
 8003526:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <TIM3_IRQHandler+0xbc>)
 8003528:	2200      	movs	r2, #0
 800352a:	639a      	str	r2, [r3, #56]	; 0x38
	/* On front fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the front fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 800352c:	4b26      	ldr	r3, [pc, #152]	; (80035c8 <TIM3_IRQHandler+0xc0>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d116      	bne.n	8003562 <TIM3_IRQHandler+0x5a>
	{
		if(TIM3->CCR3 < 1999)
 8003534:	4b23      	ldr	r3, [pc, #140]	; (80035c4 <TIM3_IRQHandler+0xbc>)
 8003536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003538:	f240 72ce 	movw	r2, #1998	; 0x7ce
 800353c:	4293      	cmp	r3, r2
 800353e:	d805      	bhi.n	800354c <TIM3_IRQHandler+0x44>
		{
			TIM3->CCR3 = TIM3->CCR3 + 20;
 8003540:	4b20      	ldr	r3, [pc, #128]	; (80035c4 <TIM3_IRQHandler+0xbc>)
 8003542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003544:	4a1f      	ldr	r2, [pc, #124]	; (80035c4 <TIM3_IRQHandler+0xbc>)
 8003546:	3314      	adds	r3, #20
 8003548:	63d3      	str	r3, [r2, #60]	; 0x3c
 800354a:	e011      	b.n	8003570 <TIM3_IRQHandler+0x68>
		}
		else if(TIM3->CCR3 >= 1999)
 800354c:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <TIM3_IRQHandler+0xbc>)
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003554:	4293      	cmp	r3, r2
 8003556:	d90b      	bls.n	8003570 <TIM3_IRQHandler+0x68>
		{
			TIM3->CCR3 = 1999;
 8003558:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <TIM3_IRQHandler+0xbc>)
 800355a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800355e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003560:	e006      	b.n	8003570 <TIM3_IRQHandler+0x68>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_LOW)
 8003562:	4b19      	ldr	r3, [pc, #100]	; (80035c8 <TIM3_IRQHandler+0xc0>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <TIM3_IRQHandler+0x68>
	{
		TIM3->CCR3 = 0;
 800356a:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <TIM3_IRQHandler+0xbc>)
 800356c:	2200      	movs	r2, #0
 800356e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* On rear fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the rear fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8003570:	4b16      	ldr	r3, [pc, #88]	; (80035cc <TIM3_IRQHandler+0xc4>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d116      	bne.n	80035a6 <TIM3_IRQHandler+0x9e>
	{
		if(TIM3->CCR4 < 1999)
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <TIM3_IRQHandler+0xbc>)
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003580:	4293      	cmp	r3, r2
 8003582:	d805      	bhi.n	8003590 <TIM3_IRQHandler+0x88>
		{
			TIM3->CCR4 = TIM3->CCR4 + 20;
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <TIM3_IRQHandler+0xbc>)
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	4a0e      	ldr	r2, [pc, #56]	; (80035c4 <TIM3_IRQHandler+0xbc>)
 800358a:	3314      	adds	r3, #20
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	e011      	b.n	80035b4 <TIM3_IRQHandler+0xac>
		}
		else if(TIM3->CCR4 >= 1999)
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <TIM3_IRQHandler+0xbc>)
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003598:	4293      	cmp	r3, r2
 800359a:	d90b      	bls.n	80035b4 <TIM3_IRQHandler+0xac>
		{
			TIM3->CCR4 = 1999;
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <TIM3_IRQHandler+0xbc>)
 800359e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40
 80035a4:	e006      	b.n	80035b4 <TIM3_IRQHandler+0xac>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_LOW)
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <TIM3_IRQHandler+0xc4>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <TIM3_IRQHandler+0xac>
	{
		TIM3->CCR4 = 0;
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <TIM3_IRQHandler+0xbc>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035b4:	4806      	ldr	r0, [pc, #24]	; (80035d0 <TIM3_IRQHandler+0xc8>)
 80035b6:	f003 fd47 	bl	8007048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	200000e2 	.word	0x200000e2
 80035c4:	40000400 	.word	0x40000400
 80035c8:	200000e5 	.word	0x200000e5
 80035cc:	200000eb 	.word	0x200000eb
 80035d0:	20000404 	.word	0x20000404

080035d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80035d8:	4802      	ldr	r0, [pc, #8]	; (80035e4 <TIM4_IRQHandler+0x10>)
 80035da:	f003 fd35 	bl	8007048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  /* USER CODE END TIM4_IRQn 1 */
}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	200004b8 	.word	0x200004b8

080035e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035ec:	4802      	ldr	r0, [pc, #8]	; (80035f8 <USART1_IRQHandler+0x10>)
 80035ee:	f004 fee9 	bl	80083c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000620 	.word	0x20000620

080035fc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003600:	4802      	ldr	r0, [pc, #8]	; (800360c <TIM5_IRQHandler+0x10>)
 8003602:	f003 fd21 	bl	8007048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  /* USER CODE END TIM5_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	2000056c 	.word	0x2000056c

08003610 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003614:	4802      	ldr	r0, [pc, #8]	; (8003620 <DMA2_Stream0_IRQHandler+0x10>)
 8003616:	f001 fee3 	bl	80053e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000190 	.word	0x20000190

08003624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <SystemInit+0x20>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362e:	4a05      	ldr	r2, [pc, #20]	; (8003644 <SystemInit+0x20>)
 8003630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM5_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08c      	sub	sp, #48	; 0x30
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003650:	f107 031c 	add.w	r3, r7, #28
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003668:	d10e      	bne.n	8003688 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	4b35      	ldr	r3, [pc, #212]	; (8003744 <HAL_TIM_Base_MspInit+0xfc>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	4a34      	ldr	r2, [pc, #208]	; (8003744 <HAL_TIM_Base_MspInit+0xfc>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6413      	str	r3, [r2, #64]	; 0x40
 800367a:	4b32      	ldr	r3, [pc, #200]	; (8003744 <HAL_TIM_Base_MspInit+0xfc>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	61bb      	str	r3, [r7, #24]
 8003684:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003686:	e058      	b.n	800373a <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM3)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a2e      	ldr	r2, [pc, #184]	; (8003748 <HAL_TIM_Base_MspInit+0x100>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10e      	bne.n	80036b0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	4b2b      	ldr	r3, [pc, #172]	; (8003744 <HAL_TIM_Base_MspInit+0xfc>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	4a2a      	ldr	r2, [pc, #168]	; (8003744 <HAL_TIM_Base_MspInit+0xfc>)
 800369c:	f043 0302 	orr.w	r3, r3, #2
 80036a0:	6413      	str	r3, [r2, #64]	; 0x40
 80036a2:	4b28      	ldr	r3, [pc, #160]	; (8003744 <HAL_TIM_Base_MspInit+0xfc>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	697b      	ldr	r3, [r7, #20]
}
 80036ae:	e044      	b.n	800373a <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM4)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a25      	ldr	r2, [pc, #148]	; (800374c <HAL_TIM_Base_MspInit+0x104>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d10e      	bne.n	80036d8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	4b21      	ldr	r3, [pc, #132]	; (8003744 <HAL_TIM_Base_MspInit+0xfc>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	4a20      	ldr	r2, [pc, #128]	; (8003744 <HAL_TIM_Base_MspInit+0xfc>)
 80036c4:	f043 0304 	orr.w	r3, r3, #4
 80036c8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ca:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <HAL_TIM_Base_MspInit+0xfc>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	693b      	ldr	r3, [r7, #16]
}
 80036d6:	e030      	b.n	800373a <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM5)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a1c      	ldr	r2, [pc, #112]	; (8003750 <HAL_TIM_Base_MspInit+0x108>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d12b      	bne.n	800373a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	4b17      	ldr	r3, [pc, #92]	; (8003744 <HAL_TIM_Base_MspInit+0xfc>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	4a16      	ldr	r2, [pc, #88]	; (8003744 <HAL_TIM_Base_MspInit+0xfc>)
 80036ec:	f043 0308 	orr.w	r3, r3, #8
 80036f0:	6413      	str	r3, [r2, #64]	; 0x40
 80036f2:	4b14      	ldr	r3, [pc, #80]	; (8003744 <HAL_TIM_Base_MspInit+0xfc>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <HAL_TIM_Base_MspInit+0xfc>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	4a0f      	ldr	r2, [pc, #60]	; (8003744 <HAL_TIM_Base_MspInit+0xfc>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6313      	str	r3, [r2, #48]	; 0x30
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <HAL_TIM_Base_MspInit+0xfc>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PDCF_IC_Pin|PDCR_IC_Pin;
 800371a:	2303      	movs	r3, #3
 800371c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371e:	2302      	movs	r3, #2
 8003720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	2300      	movs	r3, #0
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003726:	2300      	movs	r3, #0
 8003728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800372a:	2302      	movs	r3, #2
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800372e:	f107 031c 	add.w	r3, r7, #28
 8003732:	4619      	mov	r1, r3
 8003734:	4807      	ldr	r0, [pc, #28]	; (8003754 <HAL_TIM_Base_MspInit+0x10c>)
 8003736:	f002 f8bd 	bl	80058b4 <HAL_GPIO_Init>
}
 800373a:	bf00      	nop
 800373c:	3730      	adds	r7, #48	; 0x30
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800
 8003748:	40000400 	.word	0x40000400
 800374c:	40000800 	.word	0x40000800
 8003750:	40000c00 	.word	0x40000c00
 8003754:	40020000 	.word	0x40020000

08003758 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08c      	sub	sp, #48	; 0x30
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003760:	f107 031c 	add.w	r3, r7, #28
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003778:	d13e      	bne.n	80037f8 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	4b45      	ldr	r3, [pc, #276]	; (8003894 <HAL_TIM_MspPostInit+0x13c>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	4a44      	ldr	r2, [pc, #272]	; (8003894 <HAL_TIM_MspPostInit+0x13c>)
 8003784:	f043 0302 	orr.w	r3, r3, #2
 8003788:	6313      	str	r3, [r2, #48]	; 0x30
 800378a:	4b42      	ldr	r3, [pc, #264]	; (8003894 <HAL_TIM_MspPostInit+0x13c>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <HAL_TIM_MspPostInit+0x13c>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	4a3d      	ldr	r2, [pc, #244]	; (8003894 <HAL_TIM_MspPostInit+0x13c>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	6313      	str	r3, [r2, #48]	; 0x30
 80037a6:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_TIM_MspPostInit+0x13c>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = IL_PWM_Pin|RPL_PWM_Pin;
 80037b2:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80037b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b8:	2302      	movs	r3, #2
 80037ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037bc:	2300      	movs	r3, #0
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c0:	2300      	movs	r3, #0
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037c4:	2301      	movs	r3, #1
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c8:	f107 031c 	add.w	r3, r7, #28
 80037cc:	4619      	mov	r1, r3
 80037ce:	4832      	ldr	r0, [pc, #200]	; (8003898 <HAL_TIM_MspPostInit+0x140>)
 80037d0:	f002 f870 	bl	80058b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LB_PWM_Pin;
 80037d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037da:	2302      	movs	r3, #2
 80037dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e2:	2300      	movs	r3, #0
 80037e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037e6:	2301      	movs	r3, #1
 80037e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LB_PWM_GPIO_Port, &GPIO_InitStruct);
 80037ea:	f107 031c 	add.w	r3, r7, #28
 80037ee:	4619      	mov	r1, r3
 80037f0:	482a      	ldr	r0, [pc, #168]	; (800389c <HAL_TIM_MspPostInit+0x144>)
 80037f2:	f002 f85f 	bl	80058b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80037f6:	e048      	b.n	800388a <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM3)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a28      	ldr	r2, [pc, #160]	; (80038a0 <HAL_TIM_MspPostInit+0x148>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d11f      	bne.n	8003842 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	4b23      	ldr	r3, [pc, #140]	; (8003894 <HAL_TIM_MspPostInit+0x13c>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	4a22      	ldr	r2, [pc, #136]	; (8003894 <HAL_TIM_MspPostInit+0x13c>)
 800380c:	f043 0304 	orr.w	r3, r3, #4
 8003810:	6313      	str	r3, [r2, #48]	; 0x30
 8003812:	4b20      	ldr	r3, [pc, #128]	; (8003894 <HAL_TIM_MspPostInit+0x13c>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BL_PWM_Pin|FFL_PWM_Pin|RFL_PWM_Pin;
 800381e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003824:	2302      	movs	r3, #2
 8003826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382c:	2300      	movs	r3, #0
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003830:	2302      	movs	r3, #2
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003834:	f107 031c 	add.w	r3, r7, #28
 8003838:	4619      	mov	r1, r3
 800383a:	481a      	ldr	r0, [pc, #104]	; (80038a4 <HAL_TIM_MspPostInit+0x14c>)
 800383c:	f002 f83a 	bl	80058b4 <HAL_GPIO_Init>
}
 8003840:	e023      	b.n	800388a <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM4)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <HAL_TIM_MspPostInit+0x150>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d11e      	bne.n	800388a <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	4b10      	ldr	r3, [pc, #64]	; (8003894 <HAL_TIM_MspPostInit+0x13c>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	4a0f      	ldr	r2, [pc, #60]	; (8003894 <HAL_TIM_MspPostInit+0x13c>)
 8003856:	f043 0302 	orr.w	r3, r3, #2
 800385a:	6313      	str	r3, [r2, #48]	; 0x30
 800385c:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <HAL_TIM_MspPostInit+0x13c>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LTS_PWM_Pin|RTS_PWM_Pin;
 8003868:	f44f 7340 	mov.w	r3, #768	; 0x300
 800386c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386e:	2302      	movs	r3, #2
 8003870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003872:	2300      	movs	r3, #0
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003876:	2300      	movs	r3, #0
 8003878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800387a:	2302      	movs	r3, #2
 800387c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800387e:	f107 031c 	add.w	r3, r7, #28
 8003882:	4619      	mov	r1, r3
 8003884:	4804      	ldr	r0, [pc, #16]	; (8003898 <HAL_TIM_MspPostInit+0x140>)
 8003886:	f002 f815 	bl	80058b4 <HAL_GPIO_Init>
}
 800388a:	bf00      	nop
 800388c:	3730      	adds	r7, #48	; 0x30
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	40020400 	.word	0x40020400
 800389c:	40020000 	.word	0x40020000
 80038a0:	40000400 	.word	0x40000400
 80038a4:	40020800 	.word	0x40020800
 80038a8:	40000800 	.word	0x40000800

080038ac <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038bc:	d109      	bne.n	80038d2 <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 80038be:	4b1f      	ldr	r3, [pc, #124]	; (800393c <HAL_TIM_Base_MspDeInit+0x90>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	4a1e      	ldr	r2, [pc, #120]	; (800393c <HAL_TIM_Base_MspDeInit+0x90>)
 80038c4:	f023 0301 	bic.w	r3, r3, #1
 80038c8:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80038ca:	201c      	movs	r0, #28
 80038cc:	f001 fa77 	bl	8004dbe <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspDeInit 1 */

  /* USER CODE END TIM5_MspDeInit 1 */
  }
}
 80038d0:	e02f      	b.n	8003932 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM3)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1a      	ldr	r2, [pc, #104]	; (8003940 <HAL_TIM_Base_MspDeInit+0x94>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d109      	bne.n	80038f0 <HAL_TIM_Base_MspDeInit+0x44>
    __HAL_RCC_TIM3_CLK_DISABLE();
 80038dc:	4b17      	ldr	r3, [pc, #92]	; (800393c <HAL_TIM_Base_MspDeInit+0x90>)
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	4a16      	ldr	r2, [pc, #88]	; (800393c <HAL_TIM_Base_MspDeInit+0x90>)
 80038e2:	f023 0302 	bic.w	r3, r3, #2
 80038e6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80038e8:	201d      	movs	r0, #29
 80038ea:	f001 fa68 	bl	8004dbe <HAL_NVIC_DisableIRQ>
}
 80038ee:	e020      	b.n	8003932 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM4)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a13      	ldr	r2, [pc, #76]	; (8003944 <HAL_TIM_Base_MspDeInit+0x98>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d109      	bne.n	800390e <HAL_TIM_Base_MspDeInit+0x62>
    __HAL_RCC_TIM4_CLK_DISABLE();
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <HAL_TIM_Base_MspDeInit+0x90>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	4a0f      	ldr	r2, [pc, #60]	; (800393c <HAL_TIM_Base_MspDeInit+0x90>)
 8003900:	f023 0304 	bic.w	r3, r3, #4
 8003904:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8003906:	201e      	movs	r0, #30
 8003908:	f001 fa59 	bl	8004dbe <HAL_NVIC_DisableIRQ>
}
 800390c:	e011      	b.n	8003932 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM5)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a0d      	ldr	r2, [pc, #52]	; (8003948 <HAL_TIM_Base_MspDeInit+0x9c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d10c      	bne.n	8003932 <HAL_TIM_Base_MspDeInit+0x86>
    __HAL_RCC_TIM5_CLK_DISABLE();
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <HAL_TIM_Base_MspDeInit+0x90>)
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	4a07      	ldr	r2, [pc, #28]	; (800393c <HAL_TIM_Base_MspDeInit+0x90>)
 800391e:	f023 0308 	bic.w	r3, r3, #8
 8003922:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PDCF_IC_Pin|PDCR_IC_Pin);
 8003924:	2103      	movs	r1, #3
 8003926:	4809      	ldr	r0, [pc, #36]	; (800394c <HAL_TIM_Base_MspDeInit+0xa0>)
 8003928:	f002 f948 	bl	8005bbc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 800392c:	2032      	movs	r0, #50	; 0x32
 800392e:	f001 fa46 	bl	8004dbe <HAL_NVIC_DisableIRQ>
}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800
 8003940:	40000400 	.word	0x40000400
 8003944:	40000800 	.word	0x40000800
 8003948:	40000c00 	.word	0x40000c00
 800394c:	40020000 	.word	0x40020000

08003950 <HAL_UART_MspInit>:
  /* USER CODE END USART1_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a19      	ldr	r2, [pc, #100]	; (80039d4 <HAL_UART_MspInit+0x84>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d12c      	bne.n	80039cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <HAL_UART_MspInit+0x88>)
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	4a17      	ldr	r2, [pc, #92]	; (80039d8 <HAL_UART_MspInit+0x88>)
 800397c:	f043 0310 	orr.w	r3, r3, #16
 8003980:	6453      	str	r3, [r2, #68]	; 0x44
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <HAL_UART_MspInit+0x88>)
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <HAL_UART_MspInit+0x88>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4a10      	ldr	r2, [pc, #64]	; (80039d8 <HAL_UART_MspInit+0x88>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	6313      	str	r3, [r2, #48]	; 0x30
 800399e:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <HAL_UART_MspInit+0x88>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b0:	2302      	movs	r3, #2
 80039b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b8:	2303      	movs	r3, #3
 80039ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039bc:	2307      	movs	r3, #7
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c0:	f107 0314 	add.w	r3, r7, #20
 80039c4:	4619      	mov	r1, r3
 80039c6:	4805      	ldr	r0, [pc, #20]	; (80039dc <HAL_UART_MspInit+0x8c>)
 80039c8:	f001 ff74 	bl	80058b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80039cc:	bf00      	nop
 80039ce:	3728      	adds	r7, #40	; 0x28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40011000 	.word	0x40011000
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40020000 	.word	0x40020000

080039e0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <HAL_UART_MspDeInit+0x38>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d10d      	bne.n	8003a0e <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80039f2:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <HAL_UART_MspDeInit+0x3c>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <HAL_UART_MspDeInit+0x3c>)
 80039f8:	f023 0310 	bic.w	r3, r3, #16
 80039fc:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80039fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a02:	4807      	ldr	r0, [pc, #28]	; (8003a20 <HAL_UART_MspDeInit+0x40>)
 8003a04:	f002 f8da 	bl	8005bbc <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003a08:	2025      	movs	r0, #37	; 0x25
 8003a0a:	f001 f9d8 	bl	8004dbe <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40011000 	.word	0x40011000
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40020000 	.word	0x40020000

08003a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a28:	480d      	ldr	r0, [pc, #52]	; (8003a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a2a:	490e      	ldr	r1, [pc, #56]	; (8003a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a2c:	4a0e      	ldr	r2, [pc, #56]	; (8003a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a30:	e002      	b.n	8003a38 <LoopCopyDataInit>

08003a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a36:	3304      	adds	r3, #4

08003a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a3c:	d3f9      	bcc.n	8003a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a3e:	4a0b      	ldr	r2, [pc, #44]	; (8003a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a40:	4c0b      	ldr	r4, [pc, #44]	; (8003a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a44:	e001      	b.n	8003a4a <LoopFillZerobss>

08003a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a48:	3204      	adds	r2, #4

08003a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a4c:	d3fb      	bcc.n	8003a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a4e:	f7ff fde9 	bl	8003624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a52:	f00a fddb 	bl	800e60c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a56:	f7fd f93b 	bl	8000cd0 <main>
  bx  lr    
 8003a5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a64:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003a68:	0800ef74 	.word	0x0800ef74
  ldr r2, =_sbss
 8003a6c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003a70:	20008a34 	.word	0x20008a34

08003a74 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a74:	e7fe      	b.n	8003a74 <DMA1_Stream0_IRQHandler>

08003a76 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d104      	bne.n	8003a8e <stm32_lock_acquire+0x18>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a84:	b672      	cpsid	i
}
 8003a86:	bf00      	nop
 8003a88:	f00a fda4 	bl	800e5d4 <Error_Handler>
 8003a8c:	e7fe      	b.n	8003a8c <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	7a1b      	ldrb	r3, [r3, #8]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d904      	bls.n	8003aa0 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003a96:	b672      	cpsid	i
}
 8003a98:	bf00      	nop
 8003a9a:	f00a fd9b 	bl	800e5d4 <Error_Handler>
 8003a9e:	e7fe      	b.n	8003a9e <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	7a1b      	ldrb	r3, [r3, #8]
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	b2d1      	uxtb	r1, r2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	7211      	strb	r1, [r2, #8]
 8003aac:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003aae:	f3ef 8211 	mrs	r2, BASEPRI
 8003ab2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8003ab6:	f383 8811 	msr	BASEPRI, r3
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	60fa      	str	r2, [r7, #12]
 8003ac4:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b084      	sub	sp, #16
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d104      	bne.n	8003aee <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003ae4:	b672      	cpsid	i
}
 8003ae6:	bf00      	nop
 8003ae8:	f00a fd74 	bl	800e5d4 <Error_Handler>
 8003aec:	e7fe      	b.n	8003aec <stm32_lock_release+0x16>
  lock->nesting_level--;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	7a1b      	ldrb	r3, [r3, #8]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	7a1b      	ldrb	r3, [r3, #8]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d904      	bls.n	8003b0c <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8003b02:	b672      	cpsid	i
}
 8003b04:	bf00      	nop
 8003b06:	f00a fd65 	bl	800e5d4 <Error_Handler>
 8003b0a:	e7fe      	b.n	8003b0a <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	7a1b      	ldrb	r3, [r3, #8]
 8003b10:	461a      	mov	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b18:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b20:	bf00      	nop
}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d104      	bne.n	8003b42 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003b38:	b672      	cpsid	i
}
 8003b3a:	bf00      	nop
 8003b3c:	f00a fd4a 	bl	800e5d4 <Error_Handler>
 8003b40:	e7fe      	b.n	8003b40 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff96 	bl	8003a76 <stm32_lock_acquire>
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d104      	bne.n	8003b6a <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003b60:	b672      	cpsid	i
}
 8003b62:	bf00      	nop
 8003b64:	f00a fd36 	bl	800e5d4 <Error_Handler>
 8003b68:	e7fe      	b.n	8003b68 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ffb2 	bl	8003ad6 <stm32_lock_release>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <Dem_MainFunction>:
/***********************************************************************************
* Function: Dem_MainFunction													   *
* Description: Module main function.									 		   *
************************************************************************************/
VOID Dem_MainFunction()
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	af00      	add	r7, sp, #0
	Dem_ProcessFault();
 8003b7e:	f000 f803 	bl	8003b88 <Dem_ProcessFault>
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <Dem_ProcessFault>:
/***********************************************************************************
* Function: Dem_ProcessFault													   *
* Description: Process fault from application.							 		   *
************************************************************************************/
VOID Dem_ProcessFault()
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
	uint8 local = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	707b      	strb	r3, [r7, #1]
	uint16 msg_length = strlen(Dem_DtcMessage);
 8003b92:	4b67      	ldr	r3, [pc, #412]	; (8003d30 <Dem_ProcessFault+0x1a8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fc fb22 	bl	80001e0 <strlen>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	81fb      	strh	r3, [r7, #14]
	uint16 ls_length = strlen(Dem_DtcLs);
 8003ba0:	4b64      	ldr	r3, [pc, #400]	; (8003d34 <Dem_ProcessFault+0x1ac>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fc fb1b 	bl	80001e0 <strlen>
 8003baa:	4603      	mov	r3, r0
 8003bac:	81bb      	strh	r3, [r7, #12]
	uint16 vs_length = strlen(Dem_DtcVs);
 8003bae:	4b62      	ldr	r3, [pc, #392]	; (8003d38 <Dem_ProcessFault+0x1b0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fc fb14 	bl	80001e0 <strlen>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	817b      	strh	r3, [r7, #10]
	uint16 pdcr_length = strlen(Dem_DtcPdcr);
 8003bbc:	4b5f      	ldr	r3, [pc, #380]	; (8003d3c <Dem_ProcessFault+0x1b4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fc fb0d 	bl	80001e0 <strlen>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	813b      	strh	r3, [r7, #8]
	uint16 pdcf_length = strlen(Dem_DtcPdcf);
 8003bca:	4b5d      	ldr	r3, [pc, #372]	; (8003d40 <Dem_ProcessFault+0x1b8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fc fb06 	bl	80001e0 <strlen>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	80fb      	strh	r3, [r7, #6]
	uint16 bt_length = strlen(Dem_DtcBt);
 8003bd8:	4b5a      	ldr	r3, [pc, #360]	; (8003d44 <Dem_ProcessFault+0x1bc>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fc faff 	bl	80001e0 <strlen>
 8003be2:	4603      	mov	r3, r0
 8003be4:	80bb      	strh	r3, [r7, #4]
	uint16 hw_length = strlen(Dem_DtcHw);
 8003be6:	4b58      	ldr	r3, [pc, #352]	; (8003d48 <Dem_ProcessFault+0x1c0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fc faf8 	bl	80001e0 <strlen>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	807b      	strh	r3, [r7, #2]

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour != STD_LOW || Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
 8003bf4:	4b55      	ldr	r3, [pc, #340]	; (8003d4c <Dem_ProcessFault+0x1c4>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d103      	bne.n	8003c04 <Dem_ProcessFault+0x7c>
 8003bfc:	4b54      	ldr	r3, [pc, #336]	; (8003d50 <Dem_ProcessFault+0x1c8>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d102      	bne.n	8003c0a <Dem_ProcessFault+0x82>
	{
		Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = STD_LOW;
 8003c04:	4b53      	ldr	r3, [pc, #332]	; (8003d54 <Dem_ProcessFault+0x1cc>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree != STD_LOW || Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
 8003c0a:	4b53      	ldr	r3, [pc, #332]	; (8003d58 <Dem_ProcessFault+0x1d0>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <Dem_ProcessFault+0x92>
 8003c12:	4b4f      	ldr	r3, [pc, #316]	; (8003d50 <Dem_ProcessFault+0x1c8>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d102      	bne.n	8003c20 <Dem_ProcessFault+0x98>
	{
		Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = STD_LOW;
 8003c1a:	4b4e      	ldr	r3, [pc, #312]	; (8003d54 <Dem_ProcessFault+0x1cc>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	70da      	strb	r2, [r3, #3]
	else
	{
		/* do nothing */
	}

	if(Rte_P_Btc_BtcPort_Btc_ReceivedDataOnBluetooth == 90)
 8003c20:	4b4e      	ldr	r3, [pc, #312]	; (8003d5c <Dem_ProcessFault+0x1d4>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b5a      	cmp	r3, #90	; 0x5a
 8003c26:	d17e      	bne.n	8003d26 <Dem_ProcessFault+0x19e>
	{
		while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcMessage, msg_length) == HAL_BUSY);
 8003c28:	bf00      	nop
 8003c2a:	4b41      	ldr	r3, [pc, #260]	; (8003d30 <Dem_ProcessFault+0x1a8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	89fa      	ldrh	r2, [r7, #14]
 8003c30:	4619      	mov	r1, r3
 8003c32:	484b      	ldr	r0, [pc, #300]	; (8003d60 <Dem_ProcessFault+0x1d8>)
 8003c34:	f004 fb50 	bl	80082d8 <HAL_UART_Transmit_IT>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d0f5      	beq.n	8003c2a <Dem_ProcessFault+0xa2>
		Rte_Runnable_Wdg_MainFunction();
 8003c3e:	f009 fc9b 	bl	800d578 <Rte_Runnable_Wdg_MainFunction>
		if(Dem_DtcArray[0])
 8003c42:	4b44      	ldr	r3, [pc, #272]	; (8003d54 <Dem_ProcessFault+0x1cc>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00c      	beq.n	8003c64 <Dem_ProcessFault+0xdc>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcLs, ls_length) == HAL_BUSY);
 8003c4a:	bf00      	nop
 8003c4c:	4b39      	ldr	r3, [pc, #228]	; (8003d34 <Dem_ProcessFault+0x1ac>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	89ba      	ldrh	r2, [r7, #12]
 8003c52:	4619      	mov	r1, r3
 8003c54:	4842      	ldr	r0, [pc, #264]	; (8003d60 <Dem_ProcessFault+0x1d8>)
 8003c56:	f004 fb3f 	bl	80082d8 <HAL_UART_Transmit_IT>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d0f5      	beq.n	8003c4c <Dem_ProcessFault+0xc4>
			Rte_Runnable_Wdg_MainFunction();
 8003c60:	f009 fc8a 	bl	800d578 <Rte_Runnable_Wdg_MainFunction>
		}

		if(Dem_DtcArray[1])
 8003c64:	4b3b      	ldr	r3, [pc, #236]	; (8003d54 <Dem_ProcessFault+0x1cc>)
 8003c66:	785b      	ldrb	r3, [r3, #1]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00c      	beq.n	8003c86 <Dem_ProcessFault+0xfe>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcVs, vs_length) == HAL_BUSY);
 8003c6c:	bf00      	nop
 8003c6e:	4b32      	ldr	r3, [pc, #200]	; (8003d38 <Dem_ProcessFault+0x1b0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	897a      	ldrh	r2, [r7, #10]
 8003c74:	4619      	mov	r1, r3
 8003c76:	483a      	ldr	r0, [pc, #232]	; (8003d60 <Dem_ProcessFault+0x1d8>)
 8003c78:	f004 fb2e 	bl	80082d8 <HAL_UART_Transmit_IT>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d0f5      	beq.n	8003c6e <Dem_ProcessFault+0xe6>
			Rte_Runnable_Wdg_MainFunction();
 8003c82:	f009 fc79 	bl	800d578 <Rte_Runnable_Wdg_MainFunction>
		}

		if(Dem_DtcArray[2])
 8003c86:	4b33      	ldr	r3, [pc, #204]	; (8003d54 <Dem_ProcessFault+0x1cc>)
 8003c88:	789b      	ldrb	r3, [r3, #2]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00c      	beq.n	8003ca8 <Dem_ProcessFault+0x120>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcPdcr, pdcr_length) == HAL_BUSY);
 8003c8e:	bf00      	nop
 8003c90:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <Dem_ProcessFault+0x1b4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	893a      	ldrh	r2, [r7, #8]
 8003c96:	4619      	mov	r1, r3
 8003c98:	4831      	ldr	r0, [pc, #196]	; (8003d60 <Dem_ProcessFault+0x1d8>)
 8003c9a:	f004 fb1d 	bl	80082d8 <HAL_UART_Transmit_IT>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d0f5      	beq.n	8003c90 <Dem_ProcessFault+0x108>
			Rte_Runnable_Wdg_MainFunction();
 8003ca4:	f009 fc68 	bl	800d578 <Rte_Runnable_Wdg_MainFunction>
		}

		if(Dem_DtcArray[3])
 8003ca8:	4b2a      	ldr	r3, [pc, #168]	; (8003d54 <Dem_ProcessFault+0x1cc>)
 8003caa:	78db      	ldrb	r3, [r3, #3]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00c      	beq.n	8003cca <Dem_ProcessFault+0x142>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcPdcf, pdcf_length) == HAL_BUSY);
 8003cb0:	bf00      	nop
 8003cb2:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <Dem_ProcessFault+0x1b8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	88fa      	ldrh	r2, [r7, #6]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4829      	ldr	r0, [pc, #164]	; (8003d60 <Dem_ProcessFault+0x1d8>)
 8003cbc:	f004 fb0c 	bl	80082d8 <HAL_UART_Transmit_IT>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d0f5      	beq.n	8003cb2 <Dem_ProcessFault+0x12a>
			Rte_Runnable_Wdg_MainFunction();
 8003cc6:	f009 fc57 	bl	800d578 <Rte_Runnable_Wdg_MainFunction>
		}

		if(Dem_DtcArray[4])
 8003cca:	4b22      	ldr	r3, [pc, #136]	; (8003d54 <Dem_ProcessFault+0x1cc>)
 8003ccc:	791b      	ldrb	r3, [r3, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00c      	beq.n	8003cec <Dem_ProcessFault+0x164>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcBt, bt_length) == HAL_BUSY);
 8003cd2:	bf00      	nop
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	; (8003d44 <Dem_ProcessFault+0x1bc>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	88ba      	ldrh	r2, [r7, #4]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4820      	ldr	r0, [pc, #128]	; (8003d60 <Dem_ProcessFault+0x1d8>)
 8003cde:	f004 fafb 	bl	80082d8 <HAL_UART_Transmit_IT>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d0f5      	beq.n	8003cd4 <Dem_ProcessFault+0x14c>
			Rte_Runnable_Wdg_MainFunction();
 8003ce8:	f009 fc46 	bl	800d578 <Rte_Runnable_Wdg_MainFunction>
		}

		if(Dem_DtcArray[5] != 0 || Dem_DtcArray[6] != 0 || Dem_DtcArray[7] != 0)
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <Dem_ProcessFault+0x1cc>)
 8003cee:	795b      	ldrb	r3, [r3, #5]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d107      	bne.n	8003d04 <Dem_ProcessFault+0x17c>
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <Dem_ProcessFault+0x1cc>)
 8003cf6:	799b      	ldrb	r3, [r3, #6]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d103      	bne.n	8003d04 <Dem_ProcessFault+0x17c>
 8003cfc:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <Dem_ProcessFault+0x1cc>)
 8003cfe:	79db      	ldrb	r3, [r3, #7]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00c      	beq.n	8003d1e <Dem_ProcessFault+0x196>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcHw, hw_length) == HAL_BUSY);
 8003d04:	bf00      	nop
 8003d06:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <Dem_ProcessFault+0x1c0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	887a      	ldrh	r2, [r7, #2]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4814      	ldr	r0, [pc, #80]	; (8003d60 <Dem_ProcessFault+0x1d8>)
 8003d10:	f004 fae2 	bl	80082d8 <HAL_UART_Transmit_IT>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d0f5      	beq.n	8003d06 <Dem_ProcessFault+0x17e>
			Rte_Runnable_Wdg_MainFunction();
 8003d1a:	f009 fc2d 	bl	800d578 <Rte_Runnable_Wdg_MainFunction>
		}
		Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&local);
 8003d1e:	1c7b      	adds	r3, r7, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	f009 fca3 	bl	800d66c <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
	}
}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000004 	.word	0x20000004
 8003d34:	20000008 	.word	0x20000008
 8003d38:	2000000c 	.word	0x2000000c
 8003d3c:	20000010 	.word	0x20000010
 8003d40:	20000014 	.word	0x20000014
 8003d44:	20000018 	.word	0x20000018
 8003d48:	2000001c 	.word	0x2000001c
 8003d4c:	200006dd 	.word	0x200006dd
 8003d50:	200000e0 	.word	0x200000e0
 8003d54:	200006a0 	.word	0x200006a0
 8003d58:	200006cd 	.word	0x200006cd
 8003d5c:	200000b2 	.word	0x200000b2
 8003d60:	20000620 	.word	0x20000620

08003d64 <Dem_ReceiveFault>:
/***********************************************************************************
* Function: Dem_ReceiveFault													   *
* Description: Receives fault from application.							 		   *
************************************************************************************/
VOID Dem_ReceiveFault(uint8 faultValue)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	71fb      	strb	r3, [r7, #7]
	switch(faultValue)
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	2b99      	cmp	r3, #153	; 0x99
 8003d72:	d070      	beq.n	8003e56 <Dem_ReceiveFault+0xf2>
 8003d74:	2b99      	cmp	r3, #153	; 0x99
 8003d76:	dc72      	bgt.n	8003e5e <Dem_ReceiveFault+0xfa>
 8003d78:	2b56      	cmp	r3, #86	; 0x56
 8003d7a:	d068      	beq.n	8003e4e <Dem_ReceiveFault+0xea>
 8003d7c:	2b56      	cmp	r3, #86	; 0x56
 8003d7e:	dc6e      	bgt.n	8003e5e <Dem_ReceiveFault+0xfa>
 8003d80:	2b22      	cmp	r3, #34	; 0x22
 8003d82:	dc49      	bgt.n	8003e18 <Dem_ReceiveFault+0xb4>
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	db6a      	blt.n	8003e5e <Dem_ReceiveFault+0xfa>
 8003d88:	3b02      	subs	r3, #2
 8003d8a:	2b20      	cmp	r3, #32
 8003d8c:	d867      	bhi.n	8003e5e <Dem_ReceiveFault+0xfa>
 8003d8e:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <Dem_ReceiveFault+0x30>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003e2f 	.word	0x08003e2f
 8003d98:	08003e1f 	.word	0x08003e1f
 8003d9c:	08003e5f 	.word	0x08003e5f
 8003da0:	08003e5f 	.word	0x08003e5f
 8003da4:	08003e5f 	.word	0x08003e5f
 8003da8:	08003e5f 	.word	0x08003e5f
 8003dac:	08003e5f 	.word	0x08003e5f
 8003db0:	08003e5f 	.word	0x08003e5f
 8003db4:	08003e5f 	.word	0x08003e5f
 8003db8:	08003e5f 	.word	0x08003e5f
 8003dbc:	08003e5f 	.word	0x08003e5f
 8003dc0:	08003e5f 	.word	0x08003e5f
 8003dc4:	08003e5f 	.word	0x08003e5f
 8003dc8:	08003e5f 	.word	0x08003e5f
 8003dcc:	08003e5f 	.word	0x08003e5f
 8003dd0:	08003e5f 	.word	0x08003e5f
 8003dd4:	08003e37 	.word	0x08003e37
 8003dd8:	08003e27 	.word	0x08003e27
 8003ddc:	08003e5f 	.word	0x08003e5f
 8003de0:	08003e5f 	.word	0x08003e5f
 8003de4:	08003e5f 	.word	0x08003e5f
 8003de8:	08003e5f 	.word	0x08003e5f
 8003dec:	08003e5f 	.word	0x08003e5f
 8003df0:	08003e5f 	.word	0x08003e5f
 8003df4:	08003e5f 	.word	0x08003e5f
 8003df8:	08003e5f 	.word	0x08003e5f
 8003dfc:	08003e5f 	.word	0x08003e5f
 8003e00:	08003e5f 	.word	0x08003e5f
 8003e04:	08003e5f 	.word	0x08003e5f
 8003e08:	08003e5f 	.word	0x08003e5f
 8003e0c:	08003e5f 	.word	0x08003e5f
 8003e10:	08003e5f 	.word	0x08003e5f
 8003e14:	08003e3f 	.word	0x08003e3f
 8003e18:	2b35      	cmp	r3, #53	; 0x35
 8003e1a:	d014      	beq.n	8003e46 <Dem_ReceiveFault+0xe2>
			break;
		case DTC_PERIPHERAL_ERROR:
			Dem_DtcArray[POSITION_DTC_PERIPHERAL_ERROR] = DTC_PERIPHERAL_ERROR;
			break;
		default:
			break;
 8003e1c:	e01f      	b.n	8003e5e <Dem_ReceiveFault+0xfa>
			Dem_DtcArray[POSITION_DTC_LIGHT_SENSOR_MALFUNCTION] = DTC_LIGHT_SENSOR_MALFUNCTION;
 8003e1e:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <Dem_ReceiveFault+0x108>)
 8003e20:	2203      	movs	r2, #3
 8003e22:	701a      	strb	r2, [r3, #0]
			break;
 8003e24:	e01c      	b.n	8003e60 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_VIBRATION_SENSOR_MALFUNCTION] = DTC_VIBRATION_SENSOR_MALFUNCTION;
 8003e26:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <Dem_ReceiveFault+0x108>)
 8003e28:	2213      	movs	r2, #19
 8003e2a:	705a      	strb	r2, [r3, #1]
			break;
 8003e2c:	e018      	b.n	8003e60 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 8003e2e:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <Dem_ReceiveFault+0x108>)
 8003e30:	2202      	movs	r2, #2
 8003e32:	709a      	strb	r2, [r3, #2]
			break;
 8003e34:	e014      	b.n	8003e60 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 8003e36:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <Dem_ReceiveFault+0x108>)
 8003e38:	2212      	movs	r2, #18
 8003e3a:	70da      	strb	r2, [r3, #3]
			break;
 8003e3c:	e010      	b.n	8003e60 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_BLUETOOTH_MODULE_MALFUNCTION] = DTC_BLUETOOTH_MODULE_MALFUNCTION;
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <Dem_ReceiveFault+0x108>)
 8003e40:	2222      	movs	r2, #34	; 0x22
 8003e42:	711a      	strb	r2, [r3, #4]
			break;
 8003e44:	e00c      	b.n	8003e60 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_SOFTWARE_RESET] = DTC_SOFTWARE_RESET;
 8003e46:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <Dem_ReceiveFault+0x108>)
 8003e48:	2235      	movs	r2, #53	; 0x35
 8003e4a:	715a      	strb	r2, [r3, #5]
			break;
 8003e4c:	e008      	b.n	8003e60 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_HARDWARE_RESET] = DTC_HARDWARE_RESET;
 8003e4e:	4b07      	ldr	r3, [pc, #28]	; (8003e6c <Dem_ReceiveFault+0x108>)
 8003e50:	2256      	movs	r2, #86	; 0x56
 8003e52:	719a      	strb	r2, [r3, #6]
			break;
 8003e54:	e004      	b.n	8003e60 <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_PERIPHERAL_ERROR] = DTC_PERIPHERAL_ERROR;
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <Dem_ReceiveFault+0x108>)
 8003e58:	2299      	movs	r2, #153	; 0x99
 8003e5a:	71da      	strb	r2, [r3, #7]
			break;
 8003e5c:	e000      	b.n	8003e60 <Dem_ReceiveFault+0xfc>
			break;
 8003e5e:	bf00      	nop
	}
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	200006a0 	.word	0x200006a0

08003e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e74:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <HAL_Init+0x40>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a0d      	ldr	r2, [pc, #52]	; (8003eb0 <HAL_Init+0x40>)
 8003e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <HAL_Init+0x40>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a0a      	ldr	r2, [pc, #40]	; (8003eb0 <HAL_Init+0x40>)
 8003e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e8c:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <HAL_Init+0x40>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a07      	ldr	r2, [pc, #28]	; (8003eb0 <HAL_Init+0x40>)
 8003e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e98:	2003      	movs	r0, #3
 8003e9a:	f000 ff5b 	bl	8004d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e9e:	200f      	movs	r0, #15
 8003ea0:	f7ff f9dc 	bl	800325c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ea4:	f7ff f990 	bl	80031c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40023c00 	.word	0x40023c00

08003eb4 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8003eb8:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <HAL_DeInit+0x54>)
 8003eba:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebe:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8003ec0:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <HAL_DeInit+0x54>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8003ec6:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <HAL_DeInit+0x54>)
 8003ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ecc:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8003ece:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <HAL_DeInit+0x54>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <HAL_DeInit+0x54>)
 8003ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eda:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <HAL_DeInit+0x54>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8003ee2:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <HAL_DeInit+0x54>)
 8003ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee8:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <HAL_DeInit+0x54>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_DeInit+0x54>)
 8003ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef6:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8003ef8:	4b03      	ldr	r3, [pc, #12]	; (8003f08 <HAL_DeInit+0x54>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8003efe:	f000 f805 	bl	8003f0c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40023800 	.word	0x40023800

08003f0c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
	...

08003f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_IncTick+0x20>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	461a      	mov	r2, r3
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_IncTick+0x24>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	4a04      	ldr	r2, [pc, #16]	; (8003f40 <HAL_IncTick+0x24>)
 8003f2e:	6013      	str	r3, [r2, #0]
}
 8003f30:	bf00      	nop
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20000024 	.word	0x20000024
 8003f40:	200006a8 	.word	0x200006a8

08003f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return uwTick;
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_GetTick+0x14>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	200006a8 	.word	0x200006a8

08003f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f64:	f7ff ffee 	bl	8003f44 <HAL_GetTick>
 8003f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d005      	beq.n	8003f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <HAL_Delay+0x44>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f82:	bf00      	nop
 8003f84:	f7ff ffde 	bl	8003f44 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d8f7      	bhi.n	8003f84 <HAL_Delay+0x28>
  {
  }
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20000024 	.word	0x20000024

08003fa4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e04a      	b.n	8004050 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d120      	bne.n	8004004 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a24      	ldr	r2, [pc, #144]	; (8004058 <HAL_ADC_Init+0xb4>)
 8003fc6:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a24      	ldr	r2, [pc, #144]	; (800405c <HAL_ADC_Init+0xb8>)
 8003fcc:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a23      	ldr	r2, [pc, #140]	; (8004060 <HAL_ADC_Init+0xbc>)
 8003fd2:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a23      	ldr	r2, [pc, #140]	; (8004064 <HAL_ADC_Init+0xc0>)
 8003fd8:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a22      	ldr	r2, [pc, #136]	; (8004068 <HAL_ADC_Init+0xc4>)
 8003fde:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a20      	ldr	r2, [pc, #128]	; (800406c <HAL_ADC_Init+0xc8>)
 8003fec:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	d118      	bne.n	8004042 <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004018:	f023 0302 	bic.w	r3, r3, #2
 800401c:	f043 0202 	orr.w	r2, r3, #2
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 fc21 	bl	800486c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f023 0303 	bic.w	r3, r3, #3
 8004038:	f043 0201 	orr.w	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	641a      	str	r2, [r3, #64]	; 0x40
 8004040:	e001      	b.n	8004046 <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800404e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	080092dd 	.word	0x080092dd
 800405c:	080044f1 	.word	0x080044f1
 8004060:	08004505 	.word	0x08004505
 8004064:	08009319 	.word	0x08009319
 8004068:	08004b71 	.word	0x08004b71
 800406c:	08002781 	.word	0x08002781

08004070 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e02a      	b.n	80040dc <HAL_ADC_DeInit+0x6c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	f043 0202 	orr.w	r2, r3, #2
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d110      	bne.n	80040d2 <HAL_ADC_DeInit+0x62>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  if (hadc->MspDeInitCallback == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <HAL_ADC_DeInit+0x4e>
  {
    hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a0a      	ldr	r2, [pc, #40]	; (80040e4 <HAL_ADC_DeInit+0x74>)
 80040bc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	4798      	blx	r3
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80040da:	7bfb      	ldrb	r3, [r7, #15]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	08002885 	.word	0x08002885

080040e8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	2300      	movs	r3, #0
 80040f6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d04a      	beq.n	80041b4 <HAL_ADC_IRQHandler+0xcc>
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d047      	beq.n	80041b4 <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	d105      	bne.n	800413c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d12b      	bne.n	80041a2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800414e:	2b00      	cmp	r3, #0
 8004150:	d127      	bne.n	80041a2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800415c:	2b00      	cmp	r3, #0
 800415e:	d006      	beq.n	800416e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800416a:	2b00      	cmp	r3, #0
 800416c:	d119      	bne.n	80041a2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0220 	bic.w	r2, r2, #32
 800417c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d105      	bne.n	80041a2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f043 0201 	orr.w	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f06f 0212 	mvn.w	r2, #18
 80041b2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d058      	beq.n	800427c <HAL_ADC_IRQHandler+0x194>
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d055      	beq.n	800427c <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d105      	bne.n	80041e8 <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d139      	bne.n	800426a <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004200:	2b00      	cmp	r3, #0
 8004202:	d006      	beq.n	8004212 <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800420e:	2b00      	cmp	r3, #0
 8004210:	d12b      	bne.n	800426a <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800421c:	2b00      	cmp	r3, #0
 800421e:	d124      	bne.n	800426a <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800422a:	2b00      	cmp	r3, #0
 800422c:	d11d      	bne.n	800426a <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004232:	2b00      	cmp	r3, #0
 8004234:	d119      	bne.n	800426a <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004244:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d105      	bne.n	800426a <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f043 0201 	orr.w	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f06f 020c 	mvn.w	r2, #12
 800427a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d018      	beq.n	80042c4 <HAL_ADC_IRQHandler+0x1dc>
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d015      	beq.n	80042c4 <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d10e      	bne.n	80042c4 <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f06f 0201 	mvn.w	r2, #1
 80042c2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042d2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d016      	beq.n	8004308 <HAL_ADC_IRQHandler+0x220>
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d013      	beq.n	8004308 <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e4:	f043 0202 	orr.w	r2, r3, #2
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0220 	mvn.w	r2, #32
 80042f4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f06f 0220 	mvn.w	r2, #32
 8004306:	601a      	str	r2, [r3, #0]
  }
}
 8004308:	bf00      	nop
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_ADC_Start_DMA+0x1e>
 800432a:	2302      	movs	r3, #2
 800432c:	e0ce      	b.n	80044cc <HAL_ADC_Start_DMA+0x1bc>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b01      	cmp	r3, #1
 8004342:	d018      	beq.n	8004376 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0201 	orr.w	r2, r2, #1
 8004352:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004354:	4b5f      	ldr	r3, [pc, #380]	; (80044d4 <HAL_ADC_Start_DMA+0x1c4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a5f      	ldr	r2, [pc, #380]	; (80044d8 <HAL_ADC_Start_DMA+0x1c8>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	0c9a      	lsrs	r2, r3, #18
 8004360:	4613      	mov	r3, r2
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	4413      	add	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004368:	e002      	b.n	8004370 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3b01      	subs	r3, #1
 800436e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f9      	bne.n	800436a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004384:	d107      	bne.n	8004396 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004394:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	f040 8086 	bne.w	80044b2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d007      	beq.n	80043d8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e4:	d106      	bne.n	80043f4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	f023 0206 	bic.w	r2, r3, #6
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	645a      	str	r2, [r3, #68]	; 0x44
 80043f2:	e002      	b.n	80043fa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004402:	4b36      	ldr	r3, [pc, #216]	; (80044dc <HAL_ADC_Start_DMA+0x1cc>)
 8004404:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	4a35      	ldr	r2, [pc, #212]	; (80044e0 <HAL_ADC_Start_DMA+0x1d0>)
 800440c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	4a34      	ldr	r2, [pc, #208]	; (80044e4 <HAL_ADC_Start_DMA+0x1d4>)
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441a:	4a33      	ldr	r2, [pc, #204]	; (80044e8 <HAL_ADC_Start_DMA+0x1d8>)
 800441c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004426:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004436:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004446:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	334c      	adds	r3, #76	; 0x4c
 8004452:	4619      	mov	r1, r3
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f000 fed8 	bl	800520c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10f      	bne.n	8004488 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d129      	bne.n	80044ca <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004484:	609a      	str	r2, [r3, #8]
 8004486:	e020      	b.n	80044ca <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a17      	ldr	r2, [pc, #92]	; (80044ec <HAL_ADC_Start_DMA+0x1dc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d11b      	bne.n	80044ca <HAL_ADC_Start_DMA+0x1ba>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d114      	bne.n	80044ca <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	e00b      	b.n	80044ca <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f043 0210 	orr.w	r2, r3, #16
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	f043 0201 	orr.w	r2, r3, #1
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20000000 	.word	0x20000000
 80044d8:	431bde83 	.word	0x431bde83
 80044dc:	40012300 	.word	0x40012300
 80044e0:	08004a65 	.word	0x08004a65
 80044e4:	08004b23 	.word	0x08004b23
 80044e8:	08004b41 	.word	0x08004b41
 80044ec:	40012000 	.word	0x40012000

080044f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x1c>
 8004530:	2302      	movs	r3, #2
 8004532:	e113      	b.n	800475c <HAL_ADC_ConfigChannel+0x244>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b09      	cmp	r3, #9
 8004542:	d925      	bls.n	8004590 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68d9      	ldr	r1, [r3, #12]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	4613      	mov	r3, r2
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	4413      	add	r3, r2
 8004558:	3b1e      	subs	r3, #30
 800455a:	2207      	movs	r2, #7
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	43da      	mvns	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	400a      	ands	r2, r1
 8004568:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68d9      	ldr	r1, [r3, #12]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	b29b      	uxth	r3, r3
 800457a:	4618      	mov	r0, r3
 800457c:	4603      	mov	r3, r0
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	4403      	add	r3, r0
 8004582:	3b1e      	subs	r3, #30
 8004584:	409a      	lsls	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	e022      	b.n	80045d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6919      	ldr	r1, [r3, #16]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	461a      	mov	r2, r3
 800459e:	4613      	mov	r3, r2
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	4413      	add	r3, r2
 80045a4:	2207      	movs	r2, #7
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43da      	mvns	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	400a      	ands	r2, r1
 80045b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6919      	ldr	r1, [r3, #16]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	4618      	mov	r0, r3
 80045c6:	4603      	mov	r3, r0
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	4403      	add	r3, r0
 80045cc:	409a      	lsls	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b06      	cmp	r3, #6
 80045dc:	d824      	bhi.n	8004628 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	3b05      	subs	r3, #5
 80045f0:	221f      	movs	r2, #31
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43da      	mvns	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	400a      	ands	r2, r1
 80045fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	4618      	mov	r0, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	3b05      	subs	r3, #5
 800461a:	fa00 f203 	lsl.w	r2, r0, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	635a      	str	r2, [r3, #52]	; 0x34
 8004626:	e04c      	b.n	80046c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b0c      	cmp	r3, #12
 800462e:	d824      	bhi.n	800467a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	3b23      	subs	r3, #35	; 0x23
 8004642:	221f      	movs	r2, #31
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	43da      	mvns	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	400a      	ands	r2, r1
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	b29b      	uxth	r3, r3
 800465e:	4618      	mov	r0, r3
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	3b23      	subs	r3, #35	; 0x23
 800466c:	fa00 f203 	lsl.w	r2, r0, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
 8004678:	e023      	b.n	80046c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	3b41      	subs	r3, #65	; 0x41
 800468c:	221f      	movs	r2, #31
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	43da      	mvns	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	400a      	ands	r2, r1
 800469a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	4618      	mov	r0, r3
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	3b41      	subs	r3, #65	; 0x41
 80046b6:	fa00 f203 	lsl.w	r2, r0, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046c2:	4b29      	ldr	r3, [pc, #164]	; (8004768 <HAL_ADC_ConfigChannel+0x250>)
 80046c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a28      	ldr	r2, [pc, #160]	; (800476c <HAL_ADC_ConfigChannel+0x254>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d10f      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x1d8>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b12      	cmp	r3, #18
 80046d6:	d10b      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1d      	ldr	r2, [pc, #116]	; (800476c <HAL_ADC_ConfigChannel+0x254>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d12b      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x23a>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1c      	ldr	r2, [pc, #112]	; (8004770 <HAL_ADC_ConfigChannel+0x258>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d003      	beq.n	800470c <HAL_ADC_ConfigChannel+0x1f4>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b11      	cmp	r3, #17
 800470a:	d122      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a11      	ldr	r2, [pc, #68]	; (8004770 <HAL_ADC_ConfigChannel+0x258>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d111      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <HAL_ADC_ConfigChannel+0x25c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a11      	ldr	r2, [pc, #68]	; (8004778 <HAL_ADC_ConfigChannel+0x260>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	0c9a      	lsrs	r2, r3, #18
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004744:	e002      	b.n	800474c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	3b01      	subs	r3, #1
 800474a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f9      	bne.n	8004746 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	40012300 	.word	0x40012300
 800476c:	40012000 	.word	0x40012000
 8004770:	10000012 	.word	0x10000012
 8004774:	20000000 	.word	0x20000000
 8004778:	431bde83 	.word	0x431bde83

0800477c <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_ADC_AnalogWDGConfig+0x18>
 8004790:	2302      	movs	r3, #2
 8004792:	e04d      	b.n	8004830 <HAL_ADC_AnalogWDGConfig+0xb4>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	7c1b      	ldrb	r3, [r3, #16]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d108      	bne.n	80047b6 <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047b2:	605a      	str	r2, [r3, #4]
 80047b4:	e007      	b.n	80047c6 <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c4:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80047d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047d8:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6859      	ldr	r1, [r3, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	6852      	ldr	r2, [r2, #4]
 80047f4:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	6892      	ldr	r2, [r2, #8]
 80047fe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 021f 	bic.w	r2, r2, #31
 800480e:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	b29b      	uxth	r3, r3
 800481c:	4619      	mov	r1, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_ADC_GetError>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8004860:	4618      	mov	r0, r3
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004874:	4b79      	ldr	r3, [pc, #484]	; (8004a5c <ADC_Init+0x1f0>)
 8004876:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	431a      	orrs	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6859      	ldr	r1, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	021a      	lsls	r2, r3, #8
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80048c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6859      	ldr	r1, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6899      	ldr	r1, [r3, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	4a58      	ldr	r2, [pc, #352]	; (8004a60 <ADC_Init+0x1f4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d022      	beq.n	800494a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004912:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6899      	ldr	r1, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004934:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6899      	ldr	r1, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	609a      	str	r2, [r3, #8]
 8004948:	e00f      	b.n	800496a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004958:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004968:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0202 	bic.w	r2, r2, #2
 8004978:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6899      	ldr	r1, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	7e1b      	ldrb	r3, [r3, #24]
 8004984:	005a      	lsls	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01b      	beq.n	80049d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80049b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6859      	ldr	r1, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	3b01      	subs	r3, #1
 80049c4:	035a      	lsls	r2, r3, #13
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	e007      	b.n	80049e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80049ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	051a      	lsls	r2, r3, #20
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6899      	ldr	r1, [r3, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a22:	025a      	lsls	r2, r3, #9
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6899      	ldr	r1, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	029a      	lsls	r2, r3, #10
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	609a      	str	r2, [r3, #8]
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	40012300 	.word	0x40012300
 8004a60:	0f000001 	.word	0x0f000001

08004a64 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d13d      	bne.n	8004afa <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d12b      	bne.n	8004af0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d127      	bne.n	8004af0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d006      	beq.n	8004abc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d119      	bne.n	8004af0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0220 	bic.w	r2, r2, #32
 8004aca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d105      	bne.n	8004af0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	f043 0201 	orr.w	r2, r3, #1
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004af8:	e00f      	b.n	8004b1a <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	f003 0310 	and.w	r3, r3, #16
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d004      	beq.n	8004b10 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	4798      	blx	r3
}
 8004b0e:	e004      	b.n	8004b1a <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	4798      	blx	r3
}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b38:	bf00      	nop
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2240      	movs	r2, #64	; 0x40
 8004b52:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b58:	f043 0204 	orr.w	r2, r3, #4
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b68:	bf00      	nop
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <__NVIC_SetPriorityGrouping>:
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b94:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bb6:	4a04      	ldr	r2, [pc, #16]	; (8004bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	60d3      	str	r3, [r2, #12]
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	e000ed00 	.word	0xe000ed00

08004bcc <__NVIC_GetPriorityGrouping>:
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bd0:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <__NVIC_GetPriorityGrouping+0x18>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	0a1b      	lsrs	r3, r3, #8
 8004bd6:	f003 0307 	and.w	r3, r3, #7
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	e000ed00 	.word	0xe000ed00

08004be8 <__NVIC_EnableIRQ>:
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	db0b      	blt.n	8004c12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	f003 021f 	and.w	r2, r3, #31
 8004c00:	4907      	ldr	r1, [pc, #28]	; (8004c20 <__NVIC_EnableIRQ+0x38>)
 8004c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	2001      	movs	r0, #1
 8004c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	e000e100 	.word	0xe000e100

08004c24 <__NVIC_DisableIRQ>:
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	db12      	blt.n	8004c5c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	f003 021f 	and.w	r2, r3, #31
 8004c3c:	490a      	ldr	r1, [pc, #40]	; (8004c68 <__NVIC_DisableIRQ+0x44>)
 8004c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	2001      	movs	r0, #1
 8004c46:	fa00 f202 	lsl.w	r2, r0, r2
 8004c4a:	3320      	adds	r3, #32
 8004c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004c50:	f3bf 8f4f 	dsb	sy
}
 8004c54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c56:	f3bf 8f6f 	isb	sy
}
 8004c5a:	bf00      	nop
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	e000e100 	.word	0xe000e100

08004c6c <__NVIC_SetPriority>:
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	6039      	str	r1, [r7, #0]
 8004c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	db0a      	blt.n	8004c96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	490c      	ldr	r1, [pc, #48]	; (8004cb8 <__NVIC_SetPriority+0x4c>)
 8004c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8a:	0112      	lsls	r2, r2, #4
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	440b      	add	r3, r1
 8004c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c94:	e00a      	b.n	8004cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	4908      	ldr	r1, [pc, #32]	; (8004cbc <__NVIC_SetPriority+0x50>)
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	3b04      	subs	r3, #4
 8004ca4:	0112      	lsls	r2, r2, #4
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	440b      	add	r3, r1
 8004caa:	761a      	strb	r2, [r3, #24]
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	e000e100 	.word	0xe000e100
 8004cbc:	e000ed00 	.word	0xe000ed00

08004cc0 <NVIC_EncodePriority>:
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b089      	sub	sp, #36	; 0x24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	f1c3 0307 	rsb	r3, r3, #7
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	bf28      	it	cs
 8004cde:	2304      	movcs	r3, #4
 8004ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	2b06      	cmp	r3, #6
 8004ce8:	d902      	bls.n	8004cf0 <NVIC_EncodePriority+0x30>
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	3b03      	subs	r3, #3
 8004cee:	e000      	b.n	8004cf2 <NVIC_EncodePriority+0x32>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	43da      	mvns	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	401a      	ands	r2, r3
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d08:	f04f 31ff 	mov.w	r1, #4294967295
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d12:	43d9      	mvns	r1, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d18:	4313      	orrs	r3, r2
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3724      	adds	r7, #36	; 0x24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <__NVIC_SystemReset>:
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004d2c:	f3bf 8f4f 	dsb	sy
}
 8004d30:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004d32:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <__NVIC_SystemReset+0x24>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004d3a:	4904      	ldr	r1, [pc, #16]	; (8004d4c <__NVIC_SystemReset+0x24>)
 8004d3c:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <__NVIC_SystemReset+0x28>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d42:	f3bf 8f4f 	dsb	sy
}
 8004d46:	bf00      	nop
    __NOP();
 8004d48:	bf00      	nop
 8004d4a:	e7fd      	b.n	8004d48 <__NVIC_SystemReset+0x20>
 8004d4c:	e000ed00 	.word	0xe000ed00
 8004d50:	05fa0004 	.word	0x05fa0004

08004d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff ff11 	bl	8004b84 <__NVIC_SetPriorityGrouping>
}
 8004d62:	bf00      	nop
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b086      	sub	sp, #24
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	4603      	mov	r3, r0
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	607a      	str	r2, [r7, #4]
 8004d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d7c:	f7ff ff26 	bl	8004bcc <__NVIC_GetPriorityGrouping>
 8004d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	6978      	ldr	r0, [r7, #20]
 8004d88:	f7ff ff9a 	bl	8004cc0 <NVIC_EncodePriority>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d92:	4611      	mov	r1, r2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff ff69 	bl	8004c6c <__NVIC_SetPriority>
}
 8004d9a:	bf00      	nop
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	4603      	mov	r3, r0
 8004daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff ff19 	bl	8004be8 <__NVIC_EnableIRQ>
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff ff29 	bl	8004c24 <__NVIC_DisableIRQ>
}
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004dde:	f7ff ffa3 	bl	8004d28 <__NVIC_SystemReset>
	...

08004de4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004de8:	f3bf 8f5f 	dmb	sy
}
 8004dec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004dee:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <HAL_MPU_Disable+0x28>)
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	4a06      	ldr	r2, [pc, #24]	; (8004e0c <HAL_MPU_Disable+0x28>)
 8004df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8004dfa:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <HAL_MPU_Disable+0x2c>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	605a      	str	r2, [r3, #4]
}
 8004e00:	bf00      	nop
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	e000ed00 	.word	0xe000ed00
 8004e10:	e000ed90 	.word	0xe000ed90

08004e14 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004e1c:	4a0b      	ldr	r2, [pc, #44]	; (8004e4c <HAL_MPU_Enable+0x38>)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004e26:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <HAL_MPU_Enable+0x3c>)
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <HAL_MPU_Enable+0x3c>)
 8004e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e30:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004e32:	f3bf 8f4f 	dsb	sy
}
 8004e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004e38:	f3bf 8f6f 	isb	sy
}
 8004e3c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	e000ed90 	.word	0xe000ed90
 8004e50:	e000ed00 	.word	0xe000ed00

08004e54 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	785a      	ldrb	r2, [r3, #1]
 8004e60:	4b1d      	ldr	r3, [pc, #116]	; (8004ed8 <HAL_MPU_ConfigRegion+0x84>)
 8004e62:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d029      	beq.n	8004ec0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8004e6c:	4a1a      	ldr	r2, [pc, #104]	; (8004ed8 <HAL_MPU_ConfigRegion+0x84>)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	7b1b      	ldrb	r3, [r3, #12]
 8004e78:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	7adb      	ldrb	r3, [r3, #11]
 8004e7e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004e80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	7a9b      	ldrb	r3, [r3, #10]
 8004e86:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004e88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	7b5b      	ldrb	r3, [r3, #13]
 8004e8e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004e90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	7b9b      	ldrb	r3, [r3, #14]
 8004e96:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004e98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	7bdb      	ldrb	r3, [r3, #15]
 8004e9e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004ea0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	7a5b      	ldrb	r3, [r3, #9]
 8004ea6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004ea8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	7a1b      	ldrb	r3, [r3, #8]
 8004eae:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004eb0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	7812      	ldrb	r2, [r2, #0]
 8004eb6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004eb8:	4a07      	ldr	r2, [pc, #28]	; (8004ed8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004eba:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004ebc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 8004ebe:	e005      	b.n	8004ecc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <HAL_MPU_ConfigRegion+0x84>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 8004ec6:	4b04      	ldr	r3, [pc, #16]	; (8004ed8 <HAL_MPU_ConfigRegion+0x84>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	611a      	str	r2, [r3, #16]
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	e000ed90 	.word	0xe000ed90

08004edc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e00e      	b.n	8004f0c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	795b      	ldrb	r3, [r3, #5]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d105      	bne.n	8004f04 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fd fce6 	bl	80028d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e022      	b.n	8004f6c <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	795b      	ldrb	r3, [r3, #5]
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d101      	bne.n	8004f34 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8004f30:	2302      	movs	r3, #2
 8004f32:	e01b      	b.n	8004f6c <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	715a      	strb	r2, [r3, #5]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0201 	orr.w	r2, r2, #1
 8004f48:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	791b      	ldrb	r3, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2200      	movs	r2, #0
 8004f56:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7fd fcdb 	bl	8002914 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	715a      	strb	r2, [r3, #5]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2202      	movs	r2, #2
 8004f88:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0201 	orr.w	r2, r2, #1
 8004f98:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	e00a      	b.n	8004fb6 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	441a      	add	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6812      	ldr	r2, [r2, #0]
 8004fae:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d3f0      	bcc.n	8004fa0 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8004fcc:	693b      	ldr	r3, [r7, #16]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <HAL_CRC_GetState>:
  * @brief  Return the CRC handle state.
  * @param  hcrc CRC handle
  * @retval HAL state
  */
HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Return CRC handle state */
  return hcrc->State;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	795b      	ldrb	r3, [r3, #5]
 8004fe6:	b2db      	uxtb	r3, r3
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005000:	f7fe ffa0 	bl	8003f44 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e099      	b.n	8005144 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0201 	bic.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005030:	e00f      	b.n	8005052 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005032:	f7fe ff87 	bl	8003f44 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b05      	cmp	r3, #5
 800503e:	d908      	bls.n	8005052 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2203      	movs	r2, #3
 800504a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e078      	b.n	8005144 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e8      	bne.n	8005032 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4b38      	ldr	r3, [pc, #224]	; (800514c <HAL_DMA_Init+0x158>)
 800506c:	4013      	ands	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800507e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800508a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005096:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d107      	bne.n	80050bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b4:	4313      	orrs	r3, r2
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f023 0307 	bic.w	r3, r3, #7
 80050d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d117      	bne.n	8005116 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00e      	beq.n	8005116 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fb5f 	bl	80057bc <DMA_CheckFifoParam>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d008      	beq.n	8005116 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2240      	movs	r2, #64	; 0x40
 8005108:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005112:	2301      	movs	r3, #1
 8005114:	e016      	b.n	8005144 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fb16 	bl	8005750 <DMA_CalcBaseAndBitshift>
 8005124:	4603      	mov	r3, r0
 8005126:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800512c:	223f      	movs	r2, #63	; 0x3f
 800512e:	409a      	lsls	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	f010803f 	.word	0xf010803f

08005150 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e050      	b.n	8005204 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d101      	bne.n	8005172 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800516e:	2302      	movs	r3, #2
 8005170:	e048      	b.n	8005204 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2200      	movs	r2, #0
 8005190:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2200      	movs	r2, #0
 8005198:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2200      	movs	r2, #0
 80051a8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2221      	movs	r2, #33	; 0x21
 80051b0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 facc 	bl	8005750 <DMA_CalcBaseAndBitshift>
 80051b8:	4603      	mov	r3, r0
 80051ba:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e4:	223f      	movs	r2, #63	; 0x3f
 80051e6:	409a      	lsls	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005222:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800522a:	2b01      	cmp	r3, #1
 800522c:	d101      	bne.n	8005232 <HAL_DMA_Start_IT+0x26>
 800522e:	2302      	movs	r3, #2
 8005230:	e040      	b.n	80052b4 <HAL_DMA_Start_IT+0xa8>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b01      	cmp	r3, #1
 8005244:	d12f      	bne.n	80052a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2202      	movs	r2, #2
 800524a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	68b9      	ldr	r1, [r7, #8]
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 fa4a 	bl	80056f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005264:	223f      	movs	r2, #63	; 0x3f
 8005266:	409a      	lsls	r2, r3
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0216 	orr.w	r2, r2, #22
 800527a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005280:	2b00      	cmp	r3, #0
 8005282:	d007      	beq.n	8005294 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0208 	orr.w	r2, r2, #8
 8005292:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	e005      	b.n	80052b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80052ae:	2302      	movs	r3, #2
 80052b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80052b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80052ca:	f7fe fe3b 	bl	8003f44 <HAL_GetTick>
 80052ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d008      	beq.n	80052ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2280      	movs	r2, #128	; 0x80
 80052e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e052      	b.n	8005394 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0216 	bic.w	r2, r2, #22
 80052fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695a      	ldr	r2, [r3, #20]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800530c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d103      	bne.n	800531e <HAL_DMA_Abort+0x62>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800531a:	2b00      	cmp	r3, #0
 800531c:	d007      	beq.n	800532e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0208 	bic.w	r2, r2, #8
 800532c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0201 	bic.w	r2, r2, #1
 800533c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800533e:	e013      	b.n	8005368 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005340:	f7fe fe00 	bl	8003f44 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b05      	cmp	r3, #5
 800534c:	d90c      	bls.n	8005368 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2220      	movs	r2, #32
 8005352:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2203      	movs	r2, #3
 8005358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e015      	b.n	8005394 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e4      	bne.n	8005340 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537a:	223f      	movs	r2, #63	; 0x3f
 800537c:	409a      	lsls	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d004      	beq.n	80053ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2280      	movs	r2, #128	; 0x80
 80053b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e00c      	b.n	80053d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2205      	movs	r2, #5
 80053be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0201 	bic.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053ec:	4b8e      	ldr	r3, [pc, #568]	; (8005628 <HAL_DMA_IRQHandler+0x248>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a8e      	ldr	r2, [pc, #568]	; (800562c <HAL_DMA_IRQHandler+0x24c>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	0a9b      	lsrs	r3, r3, #10
 80053f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540a:	2208      	movs	r2, #8
 800540c:	409a      	lsls	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4013      	ands	r3, r2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d01a      	beq.n	800544c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d013      	beq.n	800544c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0204 	bic.w	r2, r2, #4
 8005432:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005438:	2208      	movs	r2, #8
 800543a:	409a      	lsls	r2, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005444:	f043 0201 	orr.w	r2, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005450:	2201      	movs	r2, #1
 8005452:	409a      	lsls	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4013      	ands	r3, r2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d012      	beq.n	8005482 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00b      	beq.n	8005482 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546e:	2201      	movs	r2, #1
 8005470:	409a      	lsls	r2, r3
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	f043 0202 	orr.w	r2, r3, #2
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005486:	2204      	movs	r2, #4
 8005488:	409a      	lsls	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4013      	ands	r3, r2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d012      	beq.n	80054b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00b      	beq.n	80054b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a4:	2204      	movs	r2, #4
 80054a6:	409a      	lsls	r2, r3
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b0:	f043 0204 	orr.w	r2, r3, #4
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054bc:	2210      	movs	r2, #16
 80054be:	409a      	lsls	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4013      	ands	r3, r2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d043      	beq.n	8005550 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d03c      	beq.n	8005550 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054da:	2210      	movs	r2, #16
 80054dc:	409a      	lsls	r2, r3
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d018      	beq.n	8005522 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d108      	bne.n	8005510 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d024      	beq.n	8005550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
 800550e:	e01f      	b.n	8005550 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01b      	beq.n	8005550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	4798      	blx	r3
 8005520:	e016      	b.n	8005550 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d107      	bne.n	8005540 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0208 	bic.w	r2, r2, #8
 800553e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005554:	2220      	movs	r2, #32
 8005556:	409a      	lsls	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4013      	ands	r3, r2
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 808f 	beq.w	8005680 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 8087 	beq.w	8005680 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005576:	2220      	movs	r2, #32
 8005578:	409a      	lsls	r2, r3
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b05      	cmp	r3, #5
 8005588:	d136      	bne.n	80055f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0216 	bic.w	r2, r2, #22
 8005598:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695a      	ldr	r2, [r3, #20]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d103      	bne.n	80055ba <HAL_DMA_IRQHandler+0x1da>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0208 	bic.w	r2, r2, #8
 80055c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ce:	223f      	movs	r2, #63	; 0x3f
 80055d0:	409a      	lsls	r2, r3
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d07e      	beq.n	80056ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4798      	blx	r3
        }
        return;
 80055f6:	e079      	b.n	80056ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01d      	beq.n	8005642 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10d      	bne.n	8005630 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005618:	2b00      	cmp	r3, #0
 800561a:	d031      	beq.n	8005680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	4798      	blx	r3
 8005624:	e02c      	b.n	8005680 <HAL_DMA_IRQHandler+0x2a0>
 8005626:	bf00      	nop
 8005628:	20000000 	.word	0x20000000
 800562c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d023      	beq.n	8005680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
 8005640:	e01e      	b.n	8005680 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10f      	bne.n	8005670 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0210 	bic.w	r2, r2, #16
 800565e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005684:	2b00      	cmp	r3, #0
 8005686:	d032      	beq.n	80056ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d022      	beq.n	80056da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2205      	movs	r2, #5
 8005698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0201 	bic.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	3301      	adds	r3, #1
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d307      	bcc.n	80056c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f2      	bne.n	80056ac <HAL_DMA_IRQHandler+0x2cc>
 80056c6:	e000      	b.n	80056ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80056c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d005      	beq.n	80056ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	4798      	blx	r3
 80056ea:	e000      	b.n	80056ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80056ec:	bf00      	nop
    }
  }
}
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005710:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2b40      	cmp	r3, #64	; 0x40
 8005720:	d108      	bne.n	8005734 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005732:	e007      	b.n	8005744 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	60da      	str	r2, [r3, #12]
}
 8005744:	bf00      	nop
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	3b10      	subs	r3, #16
 8005760:	4a14      	ldr	r2, [pc, #80]	; (80057b4 <DMA_CalcBaseAndBitshift+0x64>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	091b      	lsrs	r3, r3, #4
 8005768:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800576a:	4a13      	ldr	r2, [pc, #76]	; (80057b8 <DMA_CalcBaseAndBitshift+0x68>)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b03      	cmp	r3, #3
 800577c:	d909      	bls.n	8005792 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005786:	f023 0303 	bic.w	r3, r3, #3
 800578a:	1d1a      	adds	r2, r3, #4
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	659a      	str	r2, [r3, #88]	; 0x58
 8005790:	e007      	b.n	80057a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800579a:	f023 0303 	bic.w	r3, r3, #3
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	aaaaaaab 	.word	0xaaaaaaab
 80057b8:	0800edf8 	.word	0x0800edf8

080057bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d11f      	bne.n	8005816 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d856      	bhi.n	800588a <DMA_CheckFifoParam+0xce>
 80057dc:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <DMA_CheckFifoParam+0x28>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	080057f5 	.word	0x080057f5
 80057e8:	08005807 	.word	0x08005807
 80057ec:	080057f5 	.word	0x080057f5
 80057f0:	0800588b 	.word	0x0800588b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d046      	beq.n	800588e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005804:	e043      	b.n	800588e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800580e:	d140      	bne.n	8005892 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005814:	e03d      	b.n	8005892 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800581e:	d121      	bne.n	8005864 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b03      	cmp	r3, #3
 8005824:	d837      	bhi.n	8005896 <DMA_CheckFifoParam+0xda>
 8005826:	a201      	add	r2, pc, #4	; (adr r2, 800582c <DMA_CheckFifoParam+0x70>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	0800583d 	.word	0x0800583d
 8005830:	08005843 	.word	0x08005843
 8005834:	0800583d 	.word	0x0800583d
 8005838:	08005855 	.word	0x08005855
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	73fb      	strb	r3, [r7, #15]
      break;
 8005840:	e030      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005846:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d025      	beq.n	800589a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005852:	e022      	b.n	800589a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800585c:	d11f      	bne.n	800589e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005862:	e01c      	b.n	800589e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b02      	cmp	r3, #2
 8005868:	d903      	bls.n	8005872 <DMA_CheckFifoParam+0xb6>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b03      	cmp	r3, #3
 800586e:	d003      	beq.n	8005878 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005870:	e018      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	73fb      	strb	r3, [r7, #15]
      break;
 8005876:	e015      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00e      	beq.n	80058a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	73fb      	strb	r3, [r7, #15]
      break;
 8005888:	e00b      	b.n	80058a2 <DMA_CheckFifoParam+0xe6>
      break;
 800588a:	bf00      	nop
 800588c:	e00a      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
      break;
 800588e:	bf00      	nop
 8005890:	e008      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
      break;
 8005892:	bf00      	nop
 8005894:	e006      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
      break;
 8005896:	bf00      	nop
 8005898:	e004      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
      break;
 800589a:	bf00      	nop
 800589c:	e002      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800589e:	bf00      	nop
 80058a0:	e000      	b.n	80058a4 <DMA_CheckFifoParam+0xe8>
      break;
 80058a2:	bf00      	nop
    }
  } 
  
  return status; 
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop

080058b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b089      	sub	sp, #36	; 0x24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058be:	2300      	movs	r3, #0
 80058c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
 80058ce:	e159      	b.n	8005b84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058d0:	2201      	movs	r2, #1
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4013      	ands	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	f040 8148 	bne.w	8005b7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d005      	beq.n	8005906 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005902:	2b02      	cmp	r3, #2
 8005904:	d130      	bne.n	8005968 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	2203      	movs	r2, #3
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	43db      	mvns	r3, r3
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	4013      	ands	r3, r2
 800591c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	fa02 f303 	lsl.w	r3, r2, r3
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	4313      	orrs	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800593c:	2201      	movs	r2, #1
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	43db      	mvns	r3, r3
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	4013      	ands	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	091b      	lsrs	r3, r3, #4
 8005952:	f003 0201 	and.w	r2, r3, #1
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	fa02 f303 	lsl.w	r3, r2, r3
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	4313      	orrs	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f003 0303 	and.w	r3, r3, #3
 8005970:	2b03      	cmp	r3, #3
 8005972:	d017      	beq.n	80059a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	2203      	movs	r2, #3
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	43db      	mvns	r3, r3
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4013      	ands	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	4313      	orrs	r3, r2
 800599c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f003 0303 	and.w	r3, r3, #3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d123      	bne.n	80059f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	08da      	lsrs	r2, r3, #3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3208      	adds	r2, #8
 80059b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	220f      	movs	r2, #15
 80059c8:	fa02 f303 	lsl.w	r3, r2, r3
 80059cc:	43db      	mvns	r3, r3
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	4013      	ands	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	08da      	lsrs	r2, r3, #3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3208      	adds	r2, #8
 80059f2:	69b9      	ldr	r1, [r7, #24]
 80059f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	2203      	movs	r2, #3
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f003 0203 	and.w	r2, r3, #3
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 80a2 	beq.w	8005b7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	4b57      	ldr	r3, [pc, #348]	; (8005b9c <HAL_GPIO_Init+0x2e8>)
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	4a56      	ldr	r2, [pc, #344]	; (8005b9c <HAL_GPIO_Init+0x2e8>)
 8005a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a48:	6453      	str	r3, [r2, #68]	; 0x44
 8005a4a:	4b54      	ldr	r3, [pc, #336]	; (8005b9c <HAL_GPIO_Init+0x2e8>)
 8005a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a56:	4a52      	ldr	r2, [pc, #328]	; (8005ba0 <HAL_GPIO_Init+0x2ec>)
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	089b      	lsrs	r3, r3, #2
 8005a5c:	3302      	adds	r3, #2
 8005a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	220f      	movs	r2, #15
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	43db      	mvns	r3, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4013      	ands	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a49      	ldr	r2, [pc, #292]	; (8005ba4 <HAL_GPIO_Init+0x2f0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d019      	beq.n	8005ab6 <HAL_GPIO_Init+0x202>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a48      	ldr	r2, [pc, #288]	; (8005ba8 <HAL_GPIO_Init+0x2f4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <HAL_GPIO_Init+0x1fe>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a47      	ldr	r2, [pc, #284]	; (8005bac <HAL_GPIO_Init+0x2f8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00d      	beq.n	8005aae <HAL_GPIO_Init+0x1fa>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a46      	ldr	r2, [pc, #280]	; (8005bb0 <HAL_GPIO_Init+0x2fc>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d007      	beq.n	8005aaa <HAL_GPIO_Init+0x1f6>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a45      	ldr	r2, [pc, #276]	; (8005bb4 <HAL_GPIO_Init+0x300>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d101      	bne.n	8005aa6 <HAL_GPIO_Init+0x1f2>
 8005aa2:	2304      	movs	r3, #4
 8005aa4:	e008      	b.n	8005ab8 <HAL_GPIO_Init+0x204>
 8005aa6:	2307      	movs	r3, #7
 8005aa8:	e006      	b.n	8005ab8 <HAL_GPIO_Init+0x204>
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e004      	b.n	8005ab8 <HAL_GPIO_Init+0x204>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e002      	b.n	8005ab8 <HAL_GPIO_Init+0x204>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e000      	b.n	8005ab8 <HAL_GPIO_Init+0x204>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	f002 0203 	and.w	r2, r2, #3
 8005abe:	0092      	lsls	r2, r2, #2
 8005ac0:	4093      	lsls	r3, r2
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ac8:	4935      	ldr	r1, [pc, #212]	; (8005ba0 <HAL_GPIO_Init+0x2ec>)
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	089b      	lsrs	r3, r3, #2
 8005ace:	3302      	adds	r3, #2
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ad6:	4b38      	ldr	r3, [pc, #224]	; (8005bb8 <HAL_GPIO_Init+0x304>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005afa:	4a2f      	ldr	r2, [pc, #188]	; (8005bb8 <HAL_GPIO_Init+0x304>)
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b00:	4b2d      	ldr	r3, [pc, #180]	; (8005bb8 <HAL_GPIO_Init+0x304>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b24:	4a24      	ldr	r2, [pc, #144]	; (8005bb8 <HAL_GPIO_Init+0x304>)
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b2a:	4b23      	ldr	r3, [pc, #140]	; (8005bb8 <HAL_GPIO_Init+0x304>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	43db      	mvns	r3, r3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4013      	ands	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b4e:	4a1a      	ldr	r2, [pc, #104]	; (8005bb8 <HAL_GPIO_Init+0x304>)
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b54:	4b18      	ldr	r3, [pc, #96]	; (8005bb8 <HAL_GPIO_Init+0x304>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	4013      	ands	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b78:	4a0f      	ldr	r2, [pc, #60]	; (8005bb8 <HAL_GPIO_Init+0x304>)
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	3301      	adds	r3, #1
 8005b82:	61fb      	str	r3, [r7, #28]
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	2b0f      	cmp	r3, #15
 8005b88:	f67f aea2 	bls.w	80058d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b8c:	bf00      	nop
 8005b8e:	bf00      	nop
 8005b90:	3724      	adds	r7, #36	; 0x24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40023800 	.word	0x40023800
 8005ba0:	40013800 	.word	0x40013800
 8005ba4:	40020000 	.word	0x40020000
 8005ba8:	40020400 	.word	0x40020400
 8005bac:	40020800 	.word	0x40020800
 8005bb0:	40020c00 	.word	0x40020c00
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	40013c00 	.word	0x40013c00

08005bbc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	e0bb      	b.n	8005d50 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bd8:	2201      	movs	r2, #1
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005be0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	4013      	ands	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	f040 80ab 	bne.w	8005d4a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005bf4:	4a5c      	ldr	r2, [pc, #368]	; (8005d68 <HAL_GPIO_DeInit+0x1ac>)
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	089b      	lsrs	r3, r3, #2
 8005bfa:	3302      	adds	r3, #2
 8005bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c00:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f003 0303 	and.w	r3, r3, #3
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	220f      	movs	r2, #15
 8005c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	4013      	ands	r3, r2
 8005c14:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a54      	ldr	r2, [pc, #336]	; (8005d6c <HAL_GPIO_DeInit+0x1b0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d019      	beq.n	8005c52 <HAL_GPIO_DeInit+0x96>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a53      	ldr	r2, [pc, #332]	; (8005d70 <HAL_GPIO_DeInit+0x1b4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d013      	beq.n	8005c4e <HAL_GPIO_DeInit+0x92>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a52      	ldr	r2, [pc, #328]	; (8005d74 <HAL_GPIO_DeInit+0x1b8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00d      	beq.n	8005c4a <HAL_GPIO_DeInit+0x8e>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a51      	ldr	r2, [pc, #324]	; (8005d78 <HAL_GPIO_DeInit+0x1bc>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d007      	beq.n	8005c46 <HAL_GPIO_DeInit+0x8a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a50      	ldr	r2, [pc, #320]	; (8005d7c <HAL_GPIO_DeInit+0x1c0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d101      	bne.n	8005c42 <HAL_GPIO_DeInit+0x86>
 8005c3e:	2304      	movs	r3, #4
 8005c40:	e008      	b.n	8005c54 <HAL_GPIO_DeInit+0x98>
 8005c42:	2307      	movs	r3, #7
 8005c44:	e006      	b.n	8005c54 <HAL_GPIO_DeInit+0x98>
 8005c46:	2303      	movs	r3, #3
 8005c48:	e004      	b.n	8005c54 <HAL_GPIO_DeInit+0x98>
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	e002      	b.n	8005c54 <HAL_GPIO_DeInit+0x98>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <HAL_GPIO_DeInit+0x98>
 8005c52:	2300      	movs	r3, #0
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	f002 0203 	and.w	r2, r2, #3
 8005c5a:	0092      	lsls	r2, r2, #2
 8005c5c:	4093      	lsls	r3, r2
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d132      	bne.n	8005cca <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005c64:	4b46      	ldr	r3, [pc, #280]	; (8005d80 <HAL_GPIO_DeInit+0x1c4>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	4944      	ldr	r1, [pc, #272]	; (8005d80 <HAL_GPIO_DeInit+0x1c4>)
 8005c6e:	4013      	ands	r3, r2
 8005c70:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005c72:	4b43      	ldr	r3, [pc, #268]	; (8005d80 <HAL_GPIO_DeInit+0x1c4>)
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	4941      	ldr	r1, [pc, #260]	; (8005d80 <HAL_GPIO_DeInit+0x1c4>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005c80:	4b3f      	ldr	r3, [pc, #252]	; (8005d80 <HAL_GPIO_DeInit+0x1c4>)
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	43db      	mvns	r3, r3
 8005c88:	493d      	ldr	r1, [pc, #244]	; (8005d80 <HAL_GPIO_DeInit+0x1c4>)
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005c8e:	4b3c      	ldr	r3, [pc, #240]	; (8005d80 <HAL_GPIO_DeInit+0x1c4>)
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	43db      	mvns	r3, r3
 8005c96:	493a      	ldr	r1, [pc, #232]	; (8005d80 <HAL_GPIO_DeInit+0x1c4>)
 8005c98:	4013      	ands	r3, r2
 8005c9a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	220f      	movs	r2, #15
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005cac:	4a2e      	ldr	r2, [pc, #184]	; (8005d68 <HAL_GPIO_DeInit+0x1ac>)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	089b      	lsrs	r3, r3, #2
 8005cb2:	3302      	adds	r3, #2
 8005cb4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	43da      	mvns	r2, r3
 8005cbc:	482a      	ldr	r0, [pc, #168]	; (8005d68 <HAL_GPIO_DeInit+0x1ac>)
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	089b      	lsrs	r3, r3, #2
 8005cc2:	400a      	ands	r2, r1
 8005cc4:	3302      	adds	r3, #2
 8005cc6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	2103      	movs	r1, #3
 8005cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	401a      	ands	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	08da      	lsrs	r2, r3, #3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3208      	adds	r2, #8
 8005ce8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	220f      	movs	r2, #15
 8005cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	08d2      	lsrs	r2, r2, #3
 8005d00:	4019      	ands	r1, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3208      	adds	r2, #8
 8005d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	2103      	movs	r1, #3
 8005d14:	fa01 f303 	lsl.w	r3, r1, r3
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	401a      	ands	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	2101      	movs	r1, #1
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	401a      	ands	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	2103      	movs	r1, #3
 8005d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d42:	43db      	mvns	r3, r3
 8005d44:	401a      	ands	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2b0f      	cmp	r3, #15
 8005d54:	f67f af40 	bls.w	8005bd8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005d58:	bf00      	nop
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40013800 	.word	0x40013800
 8005d6c:	40020000 	.word	0x40020000
 8005d70:	40020400 	.word	0x40020400
 8005d74:	40020800 	.word	0x40020800
 8005d78:	40020c00 	.word	0x40020c00
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	40013c00 	.word	0x40013c00

08005d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	807b      	strh	r3, [r7, #2]
 8005d90:	4613      	mov	r3, r2
 8005d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d94:	787b      	ldrb	r3, [r7, #1]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d9a:	887a      	ldrh	r2, [r7, #2]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005da0:	e003      	b.n	8005daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005da2:	887b      	ldrh	r3, [r7, #2]
 8005da4:	041a      	lsls	r2, r3, #16
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	619a      	str	r2, [r3, #24]
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b085      	sub	sp, #20
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005dc8:	887a      	ldrh	r2, [r7, #2]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	041a      	lsls	r2, r3, #16
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	43d9      	mvns	r1, r3
 8005dd4:	887b      	ldrh	r3, [r7, #2]
 8005dd6:	400b      	ands	r3, r1
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	619a      	str	r2, [r3, #24]
}
 8005dde:	bf00      	nop
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005dfa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
	...

08005e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e267      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d075      	beq.n	8005f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e2a:	4b88      	ldr	r3, [pc, #544]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 030c 	and.w	r3, r3, #12
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d00c      	beq.n	8005e50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e36:	4b85      	ldr	r3, [pc, #532]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d112      	bne.n	8005e68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e42:	4b82      	ldr	r3, [pc, #520]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e4e:	d10b      	bne.n	8005e68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e50:	4b7e      	ldr	r3, [pc, #504]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d05b      	beq.n	8005f14 <HAL_RCC_OscConfig+0x108>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d157      	bne.n	8005f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e242      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e70:	d106      	bne.n	8005e80 <HAL_RCC_OscConfig+0x74>
 8005e72:	4b76      	ldr	r3, [pc, #472]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a75      	ldr	r2, [pc, #468]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e01d      	b.n	8005ebc <HAL_RCC_OscConfig+0xb0>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e88:	d10c      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x98>
 8005e8a:	4b70      	ldr	r3, [pc, #448]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a6f      	ldr	r2, [pc, #444]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	4b6d      	ldr	r3, [pc, #436]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a6c      	ldr	r2, [pc, #432]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e00b      	b.n	8005ebc <HAL_RCC_OscConfig+0xb0>
 8005ea4:	4b69      	ldr	r3, [pc, #420]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a68      	ldr	r2, [pc, #416]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	4b66      	ldr	r3, [pc, #408]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a65      	ldr	r2, [pc, #404]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d013      	beq.n	8005eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec4:	f7fe f83e 	bl	8003f44 <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ecc:	f7fe f83a 	bl	8003f44 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b64      	cmp	r3, #100	; 0x64
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e207      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ede:	4b5b      	ldr	r3, [pc, #364]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0f0      	beq.n	8005ecc <HAL_RCC_OscConfig+0xc0>
 8005eea:	e014      	b.n	8005f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eec:	f7fe f82a 	bl	8003f44 <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ef2:	e008      	b.n	8005f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ef4:	f7fe f826 	bl	8003f44 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b64      	cmp	r3, #100	; 0x64
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e1f3      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f06:	4b51      	ldr	r3, [pc, #324]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1f0      	bne.n	8005ef4 <HAL_RCC_OscConfig+0xe8>
 8005f12:	e000      	b.n	8005f16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d063      	beq.n	8005fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f22:	4b4a      	ldr	r3, [pc, #296]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 030c 	and.w	r3, r3, #12
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00b      	beq.n	8005f46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f2e:	4b47      	ldr	r3, [pc, #284]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d11c      	bne.n	8005f74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f3a:	4b44      	ldr	r3, [pc, #272]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d116      	bne.n	8005f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f46:	4b41      	ldr	r3, [pc, #260]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <HAL_RCC_OscConfig+0x152>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d001      	beq.n	8005f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e1c7      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f5e:	4b3b      	ldr	r3, [pc, #236]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	4937      	ldr	r1, [pc, #220]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f72:	e03a      	b.n	8005fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d020      	beq.n	8005fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f7c:	4b34      	ldr	r3, [pc, #208]	; (8006050 <HAL_RCC_OscConfig+0x244>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f82:	f7fd ffdf 	bl	8003f44 <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f8a:	f7fd ffdb 	bl	8003f44 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e1a8      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f9c:	4b2b      	ldr	r3, [pc, #172]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0f0      	beq.n	8005f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa8:	4b28      	ldr	r3, [pc, #160]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	4925      	ldr	r1, [pc, #148]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	600b      	str	r3, [r1, #0]
 8005fbc:	e015      	b.n	8005fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fbe:	4b24      	ldr	r3, [pc, #144]	; (8006050 <HAL_RCC_OscConfig+0x244>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc4:	f7fd ffbe 	bl	8003f44 <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fcc:	f7fd ffba 	bl	8003f44 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e187      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fde:	4b1b      	ldr	r3, [pc, #108]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f0      	bne.n	8005fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d036      	beq.n	8006064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d016      	beq.n	800602c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ffe:	4b15      	ldr	r3, [pc, #84]	; (8006054 <HAL_RCC_OscConfig+0x248>)
 8006000:	2201      	movs	r2, #1
 8006002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006004:	f7fd ff9e 	bl	8003f44 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800600c:	f7fd ff9a 	bl	8003f44 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e167      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800601e:	4b0b      	ldr	r3, [pc, #44]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8006020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0f0      	beq.n	800600c <HAL_RCC_OscConfig+0x200>
 800602a:	e01b      	b.n	8006064 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800602c:	4b09      	ldr	r3, [pc, #36]	; (8006054 <HAL_RCC_OscConfig+0x248>)
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006032:	f7fd ff87 	bl	8003f44 <HAL_GetTick>
 8006036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006038:	e00e      	b.n	8006058 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800603a:	f7fd ff83 	bl	8003f44 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d907      	bls.n	8006058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e150      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
 800604c:	40023800 	.word	0x40023800
 8006050:	42470000 	.word	0x42470000
 8006054:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006058:	4b88      	ldr	r3, [pc, #544]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800605a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1ea      	bne.n	800603a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 8097 	beq.w	80061a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006072:	2300      	movs	r3, #0
 8006074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006076:	4b81      	ldr	r3, [pc, #516]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10f      	bne.n	80060a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]
 8006086:	4b7d      	ldr	r3, [pc, #500]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	4a7c      	ldr	r2, [pc, #496]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800608c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006090:	6413      	str	r3, [r2, #64]	; 0x40
 8006092:	4b7a      	ldr	r3, [pc, #488]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609a:	60bb      	str	r3, [r7, #8]
 800609c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800609e:	2301      	movs	r3, #1
 80060a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a2:	4b77      	ldr	r3, [pc, #476]	; (8006280 <HAL_RCC_OscConfig+0x474>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d118      	bne.n	80060e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060ae:	4b74      	ldr	r3, [pc, #464]	; (8006280 <HAL_RCC_OscConfig+0x474>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a73      	ldr	r2, [pc, #460]	; (8006280 <HAL_RCC_OscConfig+0x474>)
 80060b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060ba:	f7fd ff43 	bl	8003f44 <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c2:	f7fd ff3f 	bl	8003f44 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e10c      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d4:	4b6a      	ldr	r3, [pc, #424]	; (8006280 <HAL_RCC_OscConfig+0x474>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0f0      	beq.n	80060c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d106      	bne.n	80060f6 <HAL_RCC_OscConfig+0x2ea>
 80060e8:	4b64      	ldr	r3, [pc, #400]	; (800627c <HAL_RCC_OscConfig+0x470>)
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	4a63      	ldr	r2, [pc, #396]	; (800627c <HAL_RCC_OscConfig+0x470>)
 80060ee:	f043 0301 	orr.w	r3, r3, #1
 80060f2:	6713      	str	r3, [r2, #112]	; 0x70
 80060f4:	e01c      	b.n	8006130 <HAL_RCC_OscConfig+0x324>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	2b05      	cmp	r3, #5
 80060fc:	d10c      	bne.n	8006118 <HAL_RCC_OscConfig+0x30c>
 80060fe:	4b5f      	ldr	r3, [pc, #380]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006102:	4a5e      	ldr	r2, [pc, #376]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006104:	f043 0304 	orr.w	r3, r3, #4
 8006108:	6713      	str	r3, [r2, #112]	; 0x70
 800610a:	4b5c      	ldr	r3, [pc, #368]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800610c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610e:	4a5b      	ldr	r2, [pc, #364]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006110:	f043 0301 	orr.w	r3, r3, #1
 8006114:	6713      	str	r3, [r2, #112]	; 0x70
 8006116:	e00b      	b.n	8006130 <HAL_RCC_OscConfig+0x324>
 8006118:	4b58      	ldr	r3, [pc, #352]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800611a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611c:	4a57      	ldr	r2, [pc, #348]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800611e:	f023 0301 	bic.w	r3, r3, #1
 8006122:	6713      	str	r3, [r2, #112]	; 0x70
 8006124:	4b55      	ldr	r3, [pc, #340]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006128:	4a54      	ldr	r2, [pc, #336]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800612a:	f023 0304 	bic.w	r3, r3, #4
 800612e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d015      	beq.n	8006164 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006138:	f7fd ff04 	bl	8003f44 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800613e:	e00a      	b.n	8006156 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006140:	f7fd ff00 	bl	8003f44 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	f241 3288 	movw	r2, #5000	; 0x1388
 800614e:	4293      	cmp	r3, r2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e0cb      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006156:	4b49      	ldr	r3, [pc, #292]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0ee      	beq.n	8006140 <HAL_RCC_OscConfig+0x334>
 8006162:	e014      	b.n	800618e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006164:	f7fd feee 	bl	8003f44 <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800616a:	e00a      	b.n	8006182 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800616c:	f7fd feea 	bl	8003f44 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	f241 3288 	movw	r2, #5000	; 0x1388
 800617a:	4293      	cmp	r3, r2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e0b5      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006182:	4b3e      	ldr	r3, [pc, #248]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1ee      	bne.n	800616c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800618e:	7dfb      	ldrb	r3, [r7, #23]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d105      	bne.n	80061a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006194:	4b39      	ldr	r3, [pc, #228]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	4a38      	ldr	r2, [pc, #224]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800619a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800619e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80a1 	beq.w	80062ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061aa:	4b34      	ldr	r3, [pc, #208]	; (800627c <HAL_RCC_OscConfig+0x470>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 030c 	and.w	r3, r3, #12
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d05c      	beq.n	8006270 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d141      	bne.n	8006242 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061be:	4b31      	ldr	r3, [pc, #196]	; (8006284 <HAL_RCC_OscConfig+0x478>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c4:	f7fd febe 	bl	8003f44 <HAL_GetTick>
 80061c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061cc:	f7fd feba 	bl	8003f44 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e087      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061de:	4b27      	ldr	r3, [pc, #156]	; (800627c <HAL_RCC_OscConfig+0x470>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1f0      	bne.n	80061cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	69da      	ldr	r2, [r3, #28]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	019b      	lsls	r3, r3, #6
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	085b      	lsrs	r3, r3, #1
 8006202:	3b01      	subs	r3, #1
 8006204:	041b      	lsls	r3, r3, #16
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620c:	061b      	lsls	r3, r3, #24
 800620e:	491b      	ldr	r1, [pc, #108]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006210:	4313      	orrs	r3, r2
 8006212:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006214:	4b1b      	ldr	r3, [pc, #108]	; (8006284 <HAL_RCC_OscConfig+0x478>)
 8006216:	2201      	movs	r2, #1
 8006218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621a:	f7fd fe93 	bl	8003f44 <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006220:	e008      	b.n	8006234 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006222:	f7fd fe8f 	bl	8003f44 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d901      	bls.n	8006234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e05c      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006234:	4b11      	ldr	r3, [pc, #68]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0f0      	beq.n	8006222 <HAL_RCC_OscConfig+0x416>
 8006240:	e054      	b.n	80062ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006242:	4b10      	ldr	r3, [pc, #64]	; (8006284 <HAL_RCC_OscConfig+0x478>)
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006248:	f7fd fe7c 	bl	8003f44 <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006250:	f7fd fe78 	bl	8003f44 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e045      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006262:	4b06      	ldr	r3, [pc, #24]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1f0      	bne.n	8006250 <HAL_RCC_OscConfig+0x444>
 800626e:	e03d      	b.n	80062ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d107      	bne.n	8006288 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e038      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
 800627c:	40023800 	.word	0x40023800
 8006280:	40007000 	.word	0x40007000
 8006284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006288:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <HAL_RCC_OscConfig+0x4ec>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d028      	beq.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d121      	bne.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d11a      	bne.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062b8:	4013      	ands	r3, r2
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d111      	bne.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ce:	085b      	lsrs	r3, r3, #1
 80062d0:	3b01      	subs	r3, #1
 80062d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d107      	bne.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d001      	beq.n	80062ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e000      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40023800 	.word	0x40023800

080062fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e0cc      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006310:	4b68      	ldr	r3, [pc, #416]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d90c      	bls.n	8006338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800631e:	4b65      	ldr	r3, [pc, #404]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006326:	4b63      	ldr	r3, [pc, #396]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d001      	beq.n	8006338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e0b8      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d020      	beq.n	8006386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006350:	4b59      	ldr	r3, [pc, #356]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	4a58      	ldr	r2, [pc, #352]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006356:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800635a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006368:	4b53      	ldr	r3, [pc, #332]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	4a52      	ldr	r2, [pc, #328]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006374:	4b50      	ldr	r3, [pc, #320]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	494d      	ldr	r1, [pc, #308]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	4313      	orrs	r3, r2
 8006384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d044      	beq.n	800641c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d107      	bne.n	80063aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800639a:	4b47      	ldr	r3, [pc, #284]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d119      	bne.n	80063da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e07f      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d003      	beq.n	80063ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d107      	bne.n	80063ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ba:	4b3f      	ldr	r3, [pc, #252]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d109      	bne.n	80063da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e06f      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ca:	4b3b      	ldr	r3, [pc, #236]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e067      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063da:	4b37      	ldr	r3, [pc, #220]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f023 0203 	bic.w	r2, r3, #3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	4934      	ldr	r1, [pc, #208]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063ec:	f7fd fdaa 	bl	8003f44 <HAL_GetTick>
 80063f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f2:	e00a      	b.n	800640a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063f4:	f7fd fda6 	bl	8003f44 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006402:	4293      	cmp	r3, r2
 8006404:	d901      	bls.n	800640a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e04f      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800640a:	4b2b      	ldr	r3, [pc, #172]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 020c 	and.w	r2, r3, #12
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	429a      	cmp	r2, r3
 800641a:	d1eb      	bne.n	80063f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800641c:	4b25      	ldr	r3, [pc, #148]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d20c      	bcs.n	8006444 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800642a:	4b22      	ldr	r3, [pc, #136]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006432:	4b20      	ldr	r3, [pc, #128]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	429a      	cmp	r2, r3
 800643e:	d001      	beq.n	8006444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e032      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	d008      	beq.n	8006462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006450:	4b19      	ldr	r3, [pc, #100]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	4916      	ldr	r1, [pc, #88]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	4313      	orrs	r3, r2
 8006460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0308 	and.w	r3, r3, #8
 800646a:	2b00      	cmp	r3, #0
 800646c:	d009      	beq.n	8006482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800646e:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	00db      	lsls	r3, r3, #3
 800647c:	490e      	ldr	r1, [pc, #56]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800647e:	4313      	orrs	r3, r2
 8006480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006482:	f000 f821 	bl	80064c8 <HAL_RCC_GetSysClockFreq>
 8006486:	4602      	mov	r2, r0
 8006488:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	490a      	ldr	r1, [pc, #40]	; (80064bc <HAL_RCC_ClockConfig+0x1c0>)
 8006494:	5ccb      	ldrb	r3, [r1, r3]
 8006496:	fa22 f303 	lsr.w	r3, r2, r3
 800649a:	4a09      	ldr	r2, [pc, #36]	; (80064c0 <HAL_RCC_ClockConfig+0x1c4>)
 800649c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800649e:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <HAL_RCC_ClockConfig+0x1c8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fc feda 	bl	800325c <HAL_InitTick>

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40023c00 	.word	0x40023c00
 80064b8:	40023800 	.word	0x40023800
 80064bc:	0800ede0 	.word	0x0800ede0
 80064c0:	20000000 	.word	0x20000000
 80064c4:	20000020 	.word	0x20000020

080064c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064cc:	b094      	sub	sp, #80	; 0x50
 80064ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	647b      	str	r3, [r7, #68]	; 0x44
 80064d4:	2300      	movs	r3, #0
 80064d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064d8:	2300      	movs	r3, #0
 80064da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064e0:	4b79      	ldr	r3, [pc, #484]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f003 030c 	and.w	r3, r3, #12
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d00d      	beq.n	8006508 <HAL_RCC_GetSysClockFreq+0x40>
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	f200 80e1 	bhi.w	80066b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <HAL_RCC_GetSysClockFreq+0x34>
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d003      	beq.n	8006502 <HAL_RCC_GetSysClockFreq+0x3a>
 80064fa:	e0db      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064fc:	4b73      	ldr	r3, [pc, #460]	; (80066cc <HAL_RCC_GetSysClockFreq+0x204>)
 80064fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006500:	e0db      	b.n	80066ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006502:	4b73      	ldr	r3, [pc, #460]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006504:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006506:	e0d8      	b.n	80066ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006508:	4b6f      	ldr	r3, [pc, #444]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006510:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006512:	4b6d      	ldr	r3, [pc, #436]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d063      	beq.n	80065e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800651e:	4b6a      	ldr	r3, [pc, #424]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	099b      	lsrs	r3, r3, #6
 8006524:	2200      	movs	r2, #0
 8006526:	63bb      	str	r3, [r7, #56]	; 0x38
 8006528:	63fa      	str	r2, [r7, #60]	; 0x3c
 800652a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006530:	633b      	str	r3, [r7, #48]	; 0x30
 8006532:	2300      	movs	r3, #0
 8006534:	637b      	str	r3, [r7, #52]	; 0x34
 8006536:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800653a:	4622      	mov	r2, r4
 800653c:	462b      	mov	r3, r5
 800653e:	f04f 0000 	mov.w	r0, #0
 8006542:	f04f 0100 	mov.w	r1, #0
 8006546:	0159      	lsls	r1, r3, #5
 8006548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800654c:	0150      	lsls	r0, r2, #5
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	4621      	mov	r1, r4
 8006554:	1a51      	subs	r1, r2, r1
 8006556:	6139      	str	r1, [r7, #16]
 8006558:	4629      	mov	r1, r5
 800655a:	eb63 0301 	sbc.w	r3, r3, r1
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	f04f 0300 	mov.w	r3, #0
 8006568:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800656c:	4659      	mov	r1, fp
 800656e:	018b      	lsls	r3, r1, #6
 8006570:	4651      	mov	r1, sl
 8006572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006576:	4651      	mov	r1, sl
 8006578:	018a      	lsls	r2, r1, #6
 800657a:	4651      	mov	r1, sl
 800657c:	ebb2 0801 	subs.w	r8, r2, r1
 8006580:	4659      	mov	r1, fp
 8006582:	eb63 0901 	sbc.w	r9, r3, r1
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800659a:	4690      	mov	r8, r2
 800659c:	4699      	mov	r9, r3
 800659e:	4623      	mov	r3, r4
 80065a0:	eb18 0303 	adds.w	r3, r8, r3
 80065a4:	60bb      	str	r3, [r7, #8]
 80065a6:	462b      	mov	r3, r5
 80065a8:	eb49 0303 	adc.w	r3, r9, r3
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	f04f 0200 	mov.w	r2, #0
 80065b2:	f04f 0300 	mov.w	r3, #0
 80065b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80065ba:	4629      	mov	r1, r5
 80065bc:	024b      	lsls	r3, r1, #9
 80065be:	4621      	mov	r1, r4
 80065c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065c4:	4621      	mov	r1, r4
 80065c6:	024a      	lsls	r2, r1, #9
 80065c8:	4610      	mov	r0, r2
 80065ca:	4619      	mov	r1, r3
 80065cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ce:	2200      	movs	r2, #0
 80065d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065d8:	f7fa f9f8 	bl	80009cc <__aeabi_uldivmod>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4613      	mov	r3, r2
 80065e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065e4:	e058      	b.n	8006698 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065e6:	4b38      	ldr	r3, [pc, #224]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	099b      	lsrs	r3, r3, #6
 80065ec:	2200      	movs	r2, #0
 80065ee:	4618      	mov	r0, r3
 80065f0:	4611      	mov	r1, r2
 80065f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065f6:	623b      	str	r3, [r7, #32]
 80065f8:	2300      	movs	r3, #0
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
 80065fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006600:	4642      	mov	r2, r8
 8006602:	464b      	mov	r3, r9
 8006604:	f04f 0000 	mov.w	r0, #0
 8006608:	f04f 0100 	mov.w	r1, #0
 800660c:	0159      	lsls	r1, r3, #5
 800660e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006612:	0150      	lsls	r0, r2, #5
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4641      	mov	r1, r8
 800661a:	ebb2 0a01 	subs.w	sl, r2, r1
 800661e:	4649      	mov	r1, r9
 8006620:	eb63 0b01 	sbc.w	fp, r3, r1
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	f04f 0300 	mov.w	r3, #0
 800662c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006630:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006634:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006638:	ebb2 040a 	subs.w	r4, r2, sl
 800663c:	eb63 050b 	sbc.w	r5, r3, fp
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	f04f 0300 	mov.w	r3, #0
 8006648:	00eb      	lsls	r3, r5, #3
 800664a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800664e:	00e2      	lsls	r2, r4, #3
 8006650:	4614      	mov	r4, r2
 8006652:	461d      	mov	r5, r3
 8006654:	4643      	mov	r3, r8
 8006656:	18e3      	adds	r3, r4, r3
 8006658:	603b      	str	r3, [r7, #0]
 800665a:	464b      	mov	r3, r9
 800665c:	eb45 0303 	adc.w	r3, r5, r3
 8006660:	607b      	str	r3, [r7, #4]
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	f04f 0300 	mov.w	r3, #0
 800666a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800666e:	4629      	mov	r1, r5
 8006670:	028b      	lsls	r3, r1, #10
 8006672:	4621      	mov	r1, r4
 8006674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006678:	4621      	mov	r1, r4
 800667a:	028a      	lsls	r2, r1, #10
 800667c:	4610      	mov	r0, r2
 800667e:	4619      	mov	r1, r3
 8006680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006682:	2200      	movs	r2, #0
 8006684:	61bb      	str	r3, [r7, #24]
 8006686:	61fa      	str	r2, [r7, #28]
 8006688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800668c:	f7fa f99e 	bl	80009cc <__aeabi_uldivmod>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4613      	mov	r3, r2
 8006696:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006698:	4b0b      	ldr	r3, [pc, #44]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	0c1b      	lsrs	r3, r3, #16
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	3301      	adds	r3, #1
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80066a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066b2:	e002      	b.n	80066ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066b4:	4b05      	ldr	r3, [pc, #20]	; (80066cc <HAL_RCC_GetSysClockFreq+0x204>)
 80066b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3750      	adds	r7, #80	; 0x50
 80066c0:	46bd      	mov	sp, r7
 80066c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066c6:	bf00      	nop
 80066c8:	40023800 	.word	0x40023800
 80066cc:	00f42400 	.word	0x00f42400
 80066d0:	007a1200 	.word	0x007a1200

080066d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066d8:	4b03      	ldr	r3, [pc, #12]	; (80066e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80066da:	681b      	ldr	r3, [r3, #0]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	20000000 	.word	0x20000000

080066ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066f0:	f7ff fff0 	bl	80066d4 <HAL_RCC_GetHCLKFreq>
 80066f4:	4602      	mov	r2, r0
 80066f6:	4b05      	ldr	r3, [pc, #20]	; (800670c <HAL_RCC_GetPCLK1Freq+0x20>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	0a9b      	lsrs	r3, r3, #10
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	4903      	ldr	r1, [pc, #12]	; (8006710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006702:	5ccb      	ldrb	r3, [r1, r3]
 8006704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006708:	4618      	mov	r0, r3
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40023800 	.word	0x40023800
 8006710:	0800edf0 	.word	0x0800edf0

08006714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006718:	f7ff ffdc 	bl	80066d4 <HAL_RCC_GetHCLKFreq>
 800671c:	4602      	mov	r2, r0
 800671e:	4b05      	ldr	r3, [pc, #20]	; (8006734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	0b5b      	lsrs	r3, r3, #13
 8006724:	f003 0307 	and.w	r3, r3, #7
 8006728:	4903      	ldr	r1, [pc, #12]	; (8006738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800672a:	5ccb      	ldrb	r3, [r1, r3]
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006730:	4618      	mov	r0, r3
 8006732:	bd80      	pop	{r7, pc}
 8006734:	40023800 	.word	0x40023800
 8006738:	0800edf0 	.word	0x0800edf0

0800673c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	220f      	movs	r2, #15
 800674a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800674c:	4b12      	ldr	r3, [pc, #72]	; (8006798 <HAL_RCC_GetClockConfig+0x5c>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f003 0203 	and.w	r2, r3, #3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006758:	4b0f      	ldr	r3, [pc, #60]	; (8006798 <HAL_RCC_GetClockConfig+0x5c>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006764:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <HAL_RCC_GetClockConfig+0x5c>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006770:	4b09      	ldr	r3, [pc, #36]	; (8006798 <HAL_RCC_GetClockConfig+0x5c>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	08db      	lsrs	r3, r3, #3
 8006776:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800677e:	4b07      	ldr	r3, [pc, #28]	; (800679c <HAL_RCC_GetClockConfig+0x60>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0207 	and.w	r2, r3, #7
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	601a      	str	r2, [r3, #0]
}
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40023800 	.word	0x40023800
 800679c:	40023c00 	.word	0x40023c00

080067a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e04c      	b.n	800684c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d111      	bne.n	80067e2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f001 fc0e 	bl	8007fe8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d102      	bne.n	80067da <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a1f      	ldr	r2, [pc, #124]	; (8006854 <HAL_TIM_Base_Init+0xb4>)
 80067d8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2202      	movs	r2, #2
 80067e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	3304      	adds	r3, #4
 80067f2:	4619      	mov	r1, r3
 80067f4:	4610      	mov	r0, r2
 80067f6:	f001 f80d 	bl	8007814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	08003649 	.word	0x08003649

08006858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b01      	cmp	r3, #1
 800686a:	d001      	beq.n	8006870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e044      	b.n	80068fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0201 	orr.w	r2, r2, #1
 8006886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a1e      	ldr	r2, [pc, #120]	; (8006908 <HAL_TIM_Base_Start_IT+0xb0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d018      	beq.n	80068c4 <HAL_TIM_Base_Start_IT+0x6c>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689a:	d013      	beq.n	80068c4 <HAL_TIM_Base_Start_IT+0x6c>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a1a      	ldr	r2, [pc, #104]	; (800690c <HAL_TIM_Base_Start_IT+0xb4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d00e      	beq.n	80068c4 <HAL_TIM_Base_Start_IT+0x6c>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a19      	ldr	r2, [pc, #100]	; (8006910 <HAL_TIM_Base_Start_IT+0xb8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d009      	beq.n	80068c4 <HAL_TIM_Base_Start_IT+0x6c>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a17      	ldr	r2, [pc, #92]	; (8006914 <HAL_TIM_Base_Start_IT+0xbc>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d004      	beq.n	80068c4 <HAL_TIM_Base_Start_IT+0x6c>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a16      	ldr	r2, [pc, #88]	; (8006918 <HAL_TIM_Base_Start_IT+0xc0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d111      	bne.n	80068e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b06      	cmp	r3, #6
 80068d4:	d010      	beq.n	80068f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f042 0201 	orr.w	r2, r2, #1
 80068e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e6:	e007      	b.n	80068f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0201 	orr.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40010000 	.word	0x40010000
 800690c:	40000400 	.word	0x40000400
 8006910:	40000800 	.word	0x40000800
 8006914:	40000c00 	.word	0x40000c00
 8006918:	40014000 	.word	0x40014000

0800691c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e04c      	b.n	80069c8 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d111      	bne.n	800695e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 fb50 	bl	8007fe8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800694c:	2b00      	cmp	r3, #0
 800694e:	d102      	bne.n	8006956 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a1f      	ldr	r2, [pc, #124]	; (80069d0 <HAL_TIM_PWM_Init+0xb4>)
 8006954:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2202      	movs	r2, #2
 8006962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	3304      	adds	r3, #4
 800696e:	4619      	mov	r1, r3
 8006970:	4610      	mov	r0, r2
 8006972:	f000 ff4f 	bl	8007814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	080069d5 	.word	0x080069d5

080069d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d109      	bne.n	8006a10 <HAL_TIM_PWM_Start_IT+0x28>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	bf14      	ite	ne
 8006a08:	2301      	movne	r3, #1
 8006a0a:	2300      	moveq	r3, #0
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	e022      	b.n	8006a56 <HAL_TIM_PWM_Start_IT+0x6e>
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d109      	bne.n	8006a2a <HAL_TIM_PWM_Start_IT+0x42>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	bf14      	ite	ne
 8006a22:	2301      	movne	r3, #1
 8006a24:	2300      	moveq	r3, #0
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	e015      	b.n	8006a56 <HAL_TIM_PWM_Start_IT+0x6e>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d109      	bne.n	8006a44 <HAL_TIM_PWM_Start_IT+0x5c>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	bf14      	ite	ne
 8006a3c:	2301      	movne	r3, #1
 8006a3e:	2300      	moveq	r3, #0
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	e008      	b.n	8006a56 <HAL_TIM_PWM_Start_IT+0x6e>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	bf14      	ite	ne
 8006a50:	2301      	movne	r3, #1
 8006a52:	2300      	moveq	r3, #0
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e0b3      	b.n	8006bc6 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d104      	bne.n	8006a6e <HAL_TIM_PWM_Start_IT+0x86>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a6c:	e013      	b.n	8006a96 <HAL_TIM_PWM_Start_IT+0xae>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d104      	bne.n	8006a7e <HAL_TIM_PWM_Start_IT+0x96>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a7c:	e00b      	b.n	8006a96 <HAL_TIM_PWM_Start_IT+0xae>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d104      	bne.n	8006a8e <HAL_TIM_PWM_Start_IT+0xa6>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a8c:	e003      	b.n	8006a96 <HAL_TIM_PWM_Start_IT+0xae>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2202      	movs	r2, #2
 8006a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b0c      	cmp	r3, #12
 8006a9a:	d841      	bhi.n	8006b20 <HAL_TIM_PWM_Start_IT+0x138>
 8006a9c:	a201      	add	r2, pc, #4	; (adr r2, 8006aa4 <HAL_TIM_PWM_Start_IT+0xbc>)
 8006a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa2:	bf00      	nop
 8006aa4:	08006ad9 	.word	0x08006ad9
 8006aa8:	08006b21 	.word	0x08006b21
 8006aac:	08006b21 	.word	0x08006b21
 8006ab0:	08006b21 	.word	0x08006b21
 8006ab4:	08006aeb 	.word	0x08006aeb
 8006ab8:	08006b21 	.word	0x08006b21
 8006abc:	08006b21 	.word	0x08006b21
 8006ac0:	08006b21 	.word	0x08006b21
 8006ac4:	08006afd 	.word	0x08006afd
 8006ac8:	08006b21 	.word	0x08006b21
 8006acc:	08006b21 	.word	0x08006b21
 8006ad0:	08006b21 	.word	0x08006b21
 8006ad4:	08006b0f 	.word	0x08006b0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0202 	orr.w	r2, r2, #2
 8006ae6:	60da      	str	r2, [r3, #12]
      break;
 8006ae8:	e01d      	b.n	8006b26 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f042 0204 	orr.w	r2, r2, #4
 8006af8:	60da      	str	r2, [r3, #12]
      break;
 8006afa:	e014      	b.n	8006b26 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0208 	orr.w	r2, r2, #8
 8006b0a:	60da      	str	r2, [r3, #12]
      break;
 8006b0c:	e00b      	b.n	8006b26 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f042 0210 	orr.w	r2, r2, #16
 8006b1c:	60da      	str	r2, [r3, #12]
      break;
 8006b1e:	e002      	b.n	8006b26 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	73fb      	strb	r3, [r7, #15]
      break;
 8006b24:	bf00      	nop
  }

  if (status == HAL_OK)
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d14b      	bne.n	8006bc4 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2201      	movs	r2, #1
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f001 fa31 	bl	8007f9c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a24      	ldr	r2, [pc, #144]	; (8006bd0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d107      	bne.n	8006b54 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b52:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a1d      	ldr	r2, [pc, #116]	; (8006bd0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d018      	beq.n	8006b90 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b66:	d013      	beq.n	8006b90 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a19      	ldr	r2, [pc, #100]	; (8006bd4 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00e      	beq.n	8006b90 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a18      	ldr	r2, [pc, #96]	; (8006bd8 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d009      	beq.n	8006b90 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a16      	ldr	r2, [pc, #88]	; (8006bdc <HAL_TIM_PWM_Start_IT+0x1f4>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d004      	beq.n	8006b90 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a15      	ldr	r2, [pc, #84]	; (8006be0 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d111      	bne.n	8006bb4 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b06      	cmp	r3, #6
 8006ba0:	d010      	beq.n	8006bc4 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f042 0201 	orr.w	r2, r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb2:	e007      	b.n	8006bc4 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40000400 	.word	0x40000400
 8006bd8:	40000800 	.word	0x40000800
 8006bdc:	40000c00 	.word	0x40000c00
 8006be0:	40014000 	.word	0x40014000

08006be4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b0c      	cmp	r3, #12
 8006bf6:	d841      	bhi.n	8006c7c <HAL_TIM_PWM_Stop_IT+0x98>
 8006bf8:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8006bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfe:	bf00      	nop
 8006c00:	08006c35 	.word	0x08006c35
 8006c04:	08006c7d 	.word	0x08006c7d
 8006c08:	08006c7d 	.word	0x08006c7d
 8006c0c:	08006c7d 	.word	0x08006c7d
 8006c10:	08006c47 	.word	0x08006c47
 8006c14:	08006c7d 	.word	0x08006c7d
 8006c18:	08006c7d 	.word	0x08006c7d
 8006c1c:	08006c7d 	.word	0x08006c7d
 8006c20:	08006c59 	.word	0x08006c59
 8006c24:	08006c7d 	.word	0x08006c7d
 8006c28:	08006c7d 	.word	0x08006c7d
 8006c2c:	08006c7d 	.word	0x08006c7d
 8006c30:	08006c6b 	.word	0x08006c6b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0202 	bic.w	r2, r2, #2
 8006c42:	60da      	str	r2, [r3, #12]
      break;
 8006c44:	e01d      	b.n	8006c82 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0204 	bic.w	r2, r2, #4
 8006c54:	60da      	str	r2, [r3, #12]
      break;
 8006c56:	e014      	b.n	8006c82 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0208 	bic.w	r2, r2, #8
 8006c66:	60da      	str	r2, [r3, #12]
      break;
 8006c68:	e00b      	b.n	8006c82 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68da      	ldr	r2, [r3, #12]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 0210 	bic.w	r2, r2, #16
 8006c78:	60da      	str	r2, [r3, #12]
      break;
 8006c7a:	e002      	b.n	8006c82 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c80:	bf00      	nop
  }

  if (status == HAL_OK)
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d157      	bne.n	8006d38 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f001 f983 	bl	8007f9c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a2a      	ldr	r2, [pc, #168]	; (8006d44 <HAL_TIM_PWM_Stop_IT+0x160>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d117      	bne.n	8006cd0 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6a1a      	ldr	r2, [r3, #32]
 8006ca6:	f241 1311 	movw	r3, #4369	; 0x1111
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10f      	bne.n	8006cd0 <HAL_TIM_PWM_Stop_IT+0xec>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6a1a      	ldr	r2, [r3, #32]
 8006cb6:	f240 4344 	movw	r3, #1092	; 0x444
 8006cba:	4013      	ands	r3, r2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d107      	bne.n	8006cd0 <HAL_TIM_PWM_Stop_IT+0xec>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6a1a      	ldr	r2, [r3, #32]
 8006cd6:	f241 1311 	movw	r3, #4369	; 0x1111
 8006cda:	4013      	ands	r3, r2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10f      	bne.n	8006d00 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6a1a      	ldr	r2, [r3, #32]
 8006ce6:	f240 4344 	movw	r3, #1092	; 0x444
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d107      	bne.n	8006d00 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0201 	bic.w	r2, r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d104      	bne.n	8006d10 <HAL_TIM_PWM_Stop_IT+0x12c>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d0e:	e013      	b.n	8006d38 <HAL_TIM_PWM_Stop_IT+0x154>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d104      	bne.n	8006d20 <HAL_TIM_PWM_Stop_IT+0x13c>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d1e:	e00b      	b.n	8006d38 <HAL_TIM_PWM_Stop_IT+0x154>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b08      	cmp	r3, #8
 8006d24:	d104      	bne.n	8006d30 <HAL_TIM_PWM_Stop_IT+0x14c>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d2e:	e003      	b.n	8006d38 <HAL_TIM_PWM_Stop_IT+0x154>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	40010000 	.word	0x40010000

08006d48 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e04c      	b.n	8006df4 <HAL_TIM_IC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d111      	bne.n	8006d8a <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f001 f93a 	bl	8007fe8 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d102      	bne.n	8006d82 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a1f      	ldr	r2, [pc, #124]	; (8006dfc <HAL_TIM_IC_Init+0xb4>)
 8006d80:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	f000 fd39 	bl	8007814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	08006e01 	.word	0x08006e01

08006e00 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d104      	bne.n	8006e32 <HAL_TIM_IC_Start_IT+0x1e>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	e013      	b.n	8006e5a <HAL_TIM_IC_Start_IT+0x46>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	d104      	bne.n	8006e42 <HAL_TIM_IC_Start_IT+0x2e>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	e00b      	b.n	8006e5a <HAL_TIM_IC_Start_IT+0x46>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d104      	bne.n	8006e52 <HAL_TIM_IC_Start_IT+0x3e>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	e003      	b.n	8006e5a <HAL_TIM_IC_Start_IT+0x46>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d104      	bne.n	8006e6c <HAL_TIM_IC_Start_IT+0x58>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	e013      	b.n	8006e94 <HAL_TIM_IC_Start_IT+0x80>
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d104      	bne.n	8006e7c <HAL_TIM_IC_Start_IT+0x68>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	e00b      	b.n	8006e94 <HAL_TIM_IC_Start_IT+0x80>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2b08      	cmp	r3, #8
 8006e80:	d104      	bne.n	8006e8c <HAL_TIM_IC_Start_IT+0x78>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	e003      	b.n	8006e94 <HAL_TIM_IC_Start_IT+0x80>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e96:	7bbb      	ldrb	r3, [r7, #14]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d102      	bne.n	8006ea2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e9c:	7b7b      	ldrb	r3, [r7, #13]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d001      	beq.n	8006ea6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e0c2      	b.n	800702c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d104      	bne.n	8006eb6 <HAL_TIM_IC_Start_IT+0xa2>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eb4:	e013      	b.n	8006ede <HAL_TIM_IC_Start_IT+0xca>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	d104      	bne.n	8006ec6 <HAL_TIM_IC_Start_IT+0xb2>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ec4:	e00b      	b.n	8006ede <HAL_TIM_IC_Start_IT+0xca>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d104      	bne.n	8006ed6 <HAL_TIM_IC_Start_IT+0xc2>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ed4:	e003      	b.n	8006ede <HAL_TIM_IC_Start_IT+0xca>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2202      	movs	r2, #2
 8006eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d104      	bne.n	8006eee <HAL_TIM_IC_Start_IT+0xda>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006eec:	e013      	b.n	8006f16 <HAL_TIM_IC_Start_IT+0x102>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	d104      	bne.n	8006efe <HAL_TIM_IC_Start_IT+0xea>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006efc:	e00b      	b.n	8006f16 <HAL_TIM_IC_Start_IT+0x102>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d104      	bne.n	8006f0e <HAL_TIM_IC_Start_IT+0xfa>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f0c:	e003      	b.n	8006f16 <HAL_TIM_IC_Start_IT+0x102>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2202      	movs	r2, #2
 8006f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b0c      	cmp	r3, #12
 8006f1a:	d841      	bhi.n	8006fa0 <HAL_TIM_IC_Start_IT+0x18c>
 8006f1c:	a201      	add	r2, pc, #4	; (adr r2, 8006f24 <HAL_TIM_IC_Start_IT+0x110>)
 8006f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f22:	bf00      	nop
 8006f24:	08006f59 	.word	0x08006f59
 8006f28:	08006fa1 	.word	0x08006fa1
 8006f2c:	08006fa1 	.word	0x08006fa1
 8006f30:	08006fa1 	.word	0x08006fa1
 8006f34:	08006f6b 	.word	0x08006f6b
 8006f38:	08006fa1 	.word	0x08006fa1
 8006f3c:	08006fa1 	.word	0x08006fa1
 8006f40:	08006fa1 	.word	0x08006fa1
 8006f44:	08006f7d 	.word	0x08006f7d
 8006f48:	08006fa1 	.word	0x08006fa1
 8006f4c:	08006fa1 	.word	0x08006fa1
 8006f50:	08006fa1 	.word	0x08006fa1
 8006f54:	08006f8f 	.word	0x08006f8f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68da      	ldr	r2, [r3, #12]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0202 	orr.w	r2, r2, #2
 8006f66:	60da      	str	r2, [r3, #12]
      break;
 8006f68:	e01d      	b.n	8006fa6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f042 0204 	orr.w	r2, r2, #4
 8006f78:	60da      	str	r2, [r3, #12]
      break;
 8006f7a:	e014      	b.n	8006fa6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0208 	orr.w	r2, r2, #8
 8006f8a:	60da      	str	r2, [r3, #12]
      break;
 8006f8c:	e00b      	b.n	8006fa6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f042 0210 	orr.w	r2, r2, #16
 8006f9c:	60da      	str	r2, [r3, #12]
      break;
 8006f9e:	e002      	b.n	8006fa6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fa4:	bf00      	nop
  }

  if (status == HAL_OK)
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d13e      	bne.n	800702a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 fff1 	bl	8007f9c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a1d      	ldr	r2, [pc, #116]	; (8007034 <HAL_TIM_IC_Start_IT+0x220>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d018      	beq.n	8006ff6 <HAL_TIM_IC_Start_IT+0x1e2>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fcc:	d013      	beq.n	8006ff6 <HAL_TIM_IC_Start_IT+0x1e2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a19      	ldr	r2, [pc, #100]	; (8007038 <HAL_TIM_IC_Start_IT+0x224>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d00e      	beq.n	8006ff6 <HAL_TIM_IC_Start_IT+0x1e2>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a17      	ldr	r2, [pc, #92]	; (800703c <HAL_TIM_IC_Start_IT+0x228>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d009      	beq.n	8006ff6 <HAL_TIM_IC_Start_IT+0x1e2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a16      	ldr	r2, [pc, #88]	; (8007040 <HAL_TIM_IC_Start_IT+0x22c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d004      	beq.n	8006ff6 <HAL_TIM_IC_Start_IT+0x1e2>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a14      	ldr	r2, [pc, #80]	; (8007044 <HAL_TIM_IC_Start_IT+0x230>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d111      	bne.n	800701a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f003 0307 	and.w	r3, r3, #7
 8007000:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b06      	cmp	r3, #6
 8007006:	d010      	beq.n	800702a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0201 	orr.w	r2, r2, #1
 8007016:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007018:	e007      	b.n	800702a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f042 0201 	orr.w	r2, r2, #1
 8007028:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40010000 	.word	0x40010000
 8007038:	40000400 	.word	0x40000400
 800703c:	40000800 	.word	0x40000800
 8007040:	40000c00 	.word	0x40000c00
 8007044:	40014000 	.word	0x40014000

08007048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b02      	cmp	r3, #2
 800705c:	d128      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f003 0302 	and.w	r3, r3, #2
 8007068:	2b02      	cmp	r3, #2
 800706a:	d121      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f06f 0202 	mvn.w	r2, #2
 8007074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	4798      	blx	r3
 8007094:	e009      	b.n	80070aa <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	f003 0304 	and.w	r3, r3, #4
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	d128      	bne.n	8007110 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	2b04      	cmp	r3, #4
 80070ca:	d121      	bne.n	8007110 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f06f 0204 	mvn.w	r2, #4
 80070d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2202      	movs	r2, #2
 80070da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d005      	beq.n	80070f6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	4798      	blx	r3
 80070f4:	e009      	b.n	800710a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f003 0308 	and.w	r3, r3, #8
 800711a:	2b08      	cmp	r3, #8
 800711c:	d128      	bne.n	8007170 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b08      	cmp	r3, #8
 800712a:	d121      	bne.n	8007170 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f06f 0208 	mvn.w	r2, #8
 8007134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2204      	movs	r2, #4
 800713a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f003 0303 	and.w	r3, r3, #3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d005      	beq.n	8007156 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	4798      	blx	r3
 8007154:	e009      	b.n	800716a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	f003 0310 	and.w	r3, r3, #16
 800717a:	2b10      	cmp	r3, #16
 800717c:	d128      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f003 0310 	and.w	r3, r3, #16
 8007188:	2b10      	cmp	r3, #16
 800718a:	d121      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f06f 0210 	mvn.w	r2, #16
 8007194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2208      	movs	r2, #8
 800719a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d005      	beq.n	80071b6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	4798      	blx	r3
 80071b4:	e009      	b.n	80071ca <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d110      	bne.n	8007200 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d109      	bne.n	8007200 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f06f 0201 	mvn.w	r2, #1
 80071f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800720a:	2b80      	cmp	r3, #128	; 0x80
 800720c:	d110      	bne.n	8007230 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007218:	2b80      	cmp	r3, #128	; 0x80
 800721a:	d109      	bne.n	8007230 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723a:	2b40      	cmp	r3, #64	; 0x40
 800723c:	d110      	bne.n	8007260 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007248:	2b40      	cmp	r3, #64	; 0x40
 800724a:	d109      	bne.n	8007260 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f003 0320 	and.w	r3, r3, #32
 800726a:	2b20      	cmp	r3, #32
 800726c:	d110      	bne.n	8007290 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f003 0320 	and.w	r3, r3, #32
 8007278:	2b20      	cmp	r3, #32
 800727a:	d109      	bne.n	8007290 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f06f 0220 	mvn.w	r2, #32
 8007284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007290:	bf00      	nop
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d101      	bne.n	80072b6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e088      	b.n	80073c8 <HAL_TIM_IC_ConfigChannel+0x130>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d11b      	bne.n	80072fc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6818      	ldr	r0, [r3, #0]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	6819      	ldr	r1, [r3, #0]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f000 fcaa 	bl	8007c2c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 020c 	bic.w	r2, r2, #12
 80072e6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6999      	ldr	r1, [r3, #24]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	689a      	ldr	r2, [r3, #8]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	619a      	str	r2, [r3, #24]
 80072fa:	e060      	b.n	80073be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d11c      	bne.n	800733c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6818      	ldr	r0, [r3, #0]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	6819      	ldr	r1, [r3, #0]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	f000 fd22 	bl	8007d5a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	699a      	ldr	r2, [r3, #24]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007324:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6999      	ldr	r1, [r3, #24]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	021a      	lsls	r2, r3, #8
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	619a      	str	r2, [r3, #24]
 800733a:	e040      	b.n	80073be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b08      	cmp	r3, #8
 8007340:	d11b      	bne.n	800737a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6818      	ldr	r0, [r3, #0]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6819      	ldr	r1, [r3, #0]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	f000 fd6f 	bl	8007e34 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	69da      	ldr	r2, [r3, #28]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 020c 	bic.w	r2, r2, #12
 8007364:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	69d9      	ldr	r1, [r3, #28]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	61da      	str	r2, [r3, #28]
 8007378:	e021      	b.n	80073be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b0c      	cmp	r3, #12
 800737e:	d11c      	bne.n	80073ba <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6818      	ldr	r0, [r3, #0]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	6819      	ldr	r1, [r3, #0]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	f000 fd8c 	bl	8007eac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	69da      	ldr	r2, [r3, #28]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80073a2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	69d9      	ldr	r1, [r3, #28]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	021a      	lsls	r2, r3, #8
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	61da      	str	r2, [r3, #28]
 80073b8:	e001      	b.n	80073be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073dc:	2300      	movs	r3, #0
 80073de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d101      	bne.n	80073ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073ea:	2302      	movs	r3, #2
 80073ec:	e0ae      	b.n	800754c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b0c      	cmp	r3, #12
 80073fa:	f200 809f 	bhi.w	800753c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80073fe:	a201      	add	r2, pc, #4	; (adr r2, 8007404 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007404:	08007439 	.word	0x08007439
 8007408:	0800753d 	.word	0x0800753d
 800740c:	0800753d 	.word	0x0800753d
 8007410:	0800753d 	.word	0x0800753d
 8007414:	08007479 	.word	0x08007479
 8007418:	0800753d 	.word	0x0800753d
 800741c:	0800753d 	.word	0x0800753d
 8007420:	0800753d 	.word	0x0800753d
 8007424:	080074bb 	.word	0x080074bb
 8007428:	0800753d 	.word	0x0800753d
 800742c:	0800753d 	.word	0x0800753d
 8007430:	0800753d 	.word	0x0800753d
 8007434:	080074fb 	.word	0x080074fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68b9      	ldr	r1, [r7, #8]
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fa68 	bl	8007914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699a      	ldr	r2, [r3, #24]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0208 	orr.w	r2, r2, #8
 8007452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699a      	ldr	r2, [r3, #24]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0204 	bic.w	r2, r2, #4
 8007462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6999      	ldr	r1, [r3, #24]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	691a      	ldr	r2, [r3, #16]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	619a      	str	r2, [r3, #24]
      break;
 8007476:	e064      	b.n	8007542 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68b9      	ldr	r1, [r7, #8]
 800747e:	4618      	mov	r0, r3
 8007480:	f000 faae 	bl	80079e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	699a      	ldr	r2, [r3, #24]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	699a      	ldr	r2, [r3, #24]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6999      	ldr	r1, [r3, #24]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	021a      	lsls	r2, r3, #8
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	619a      	str	r2, [r3, #24]
      break;
 80074b8:	e043      	b.n	8007542 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68b9      	ldr	r1, [r7, #8]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 faf9 	bl	8007ab8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69da      	ldr	r2, [r3, #28]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f042 0208 	orr.w	r2, r2, #8
 80074d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69da      	ldr	r2, [r3, #28]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0204 	bic.w	r2, r2, #4
 80074e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69d9      	ldr	r1, [r3, #28]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	691a      	ldr	r2, [r3, #16]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	61da      	str	r2, [r3, #28]
      break;
 80074f8:	e023      	b.n	8007542 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	4618      	mov	r0, r3
 8007502:	f000 fb43 	bl	8007b8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69da      	ldr	r2, [r3, #28]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	69da      	ldr	r2, [r3, #28]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69d9      	ldr	r1, [r3, #28]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	021a      	lsls	r2, r3, #8
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	61da      	str	r2, [r3, #28]
      break;
 800753a:	e002      	b.n	8007542 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	75fb      	strb	r3, [r7, #23]
      break;
 8007540:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800754a:	7dfb      	ldrb	r3, [r7, #23]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3718      	adds	r7, #24
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800755e:	2300      	movs	r3, #0
 8007560:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007568:	2b01      	cmp	r3, #1
 800756a:	d101      	bne.n	8007570 <HAL_TIM_ConfigClockSource+0x1c>
 800756c:	2302      	movs	r3, #2
 800756e:	e0b4      	b.n	80076da <HAL_TIM_ConfigClockSource+0x186>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2202      	movs	r2, #2
 800757c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800758e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007596:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a8:	d03e      	beq.n	8007628 <HAL_TIM_ConfigClockSource+0xd4>
 80075aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ae:	f200 8087 	bhi.w	80076c0 <HAL_TIM_ConfigClockSource+0x16c>
 80075b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b6:	f000 8086 	beq.w	80076c6 <HAL_TIM_ConfigClockSource+0x172>
 80075ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075be:	d87f      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x16c>
 80075c0:	2b70      	cmp	r3, #112	; 0x70
 80075c2:	d01a      	beq.n	80075fa <HAL_TIM_ConfigClockSource+0xa6>
 80075c4:	2b70      	cmp	r3, #112	; 0x70
 80075c6:	d87b      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x16c>
 80075c8:	2b60      	cmp	r3, #96	; 0x60
 80075ca:	d050      	beq.n	800766e <HAL_TIM_ConfigClockSource+0x11a>
 80075cc:	2b60      	cmp	r3, #96	; 0x60
 80075ce:	d877      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x16c>
 80075d0:	2b50      	cmp	r3, #80	; 0x50
 80075d2:	d03c      	beq.n	800764e <HAL_TIM_ConfigClockSource+0xfa>
 80075d4:	2b50      	cmp	r3, #80	; 0x50
 80075d6:	d873      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x16c>
 80075d8:	2b40      	cmp	r3, #64	; 0x40
 80075da:	d058      	beq.n	800768e <HAL_TIM_ConfigClockSource+0x13a>
 80075dc:	2b40      	cmp	r3, #64	; 0x40
 80075de:	d86f      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x16c>
 80075e0:	2b30      	cmp	r3, #48	; 0x30
 80075e2:	d064      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0x15a>
 80075e4:	2b30      	cmp	r3, #48	; 0x30
 80075e6:	d86b      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x16c>
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	d060      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0x15a>
 80075ec:	2b20      	cmp	r3, #32
 80075ee:	d867      	bhi.n	80076c0 <HAL_TIM_ConfigClockSource+0x16c>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d05c      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0x15a>
 80075f4:	2b10      	cmp	r3, #16
 80075f6:	d05a      	beq.n	80076ae <HAL_TIM_ConfigClockSource+0x15a>
 80075f8:	e062      	b.n	80076c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	6899      	ldr	r1, [r3, #8]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	f000 fca7 	bl	8007f5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800761c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	609a      	str	r2, [r3, #8]
      break;
 8007626:	e04f      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	6899      	ldr	r1, [r3, #8]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f000 fc90 	bl	8007f5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689a      	ldr	r2, [r3, #8]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800764a:	609a      	str	r2, [r3, #8]
      break;
 800764c:	e03c      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6818      	ldr	r0, [r3, #0]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	6859      	ldr	r1, [r3, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	461a      	mov	r2, r3
 800765c:	f000 fb4e 	bl	8007cfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2150      	movs	r1, #80	; 0x50
 8007666:	4618      	mov	r0, r3
 8007668:	f000 fc5d 	bl	8007f26 <TIM_ITRx_SetConfig>
      break;
 800766c:	e02c      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	6859      	ldr	r1, [r3, #4]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	461a      	mov	r2, r3
 800767c:	f000 fbaa 	bl	8007dd4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2160      	movs	r1, #96	; 0x60
 8007686:	4618      	mov	r0, r3
 8007688:	f000 fc4d 	bl	8007f26 <TIM_ITRx_SetConfig>
      break;
 800768c:	e01c      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6818      	ldr	r0, [r3, #0]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	6859      	ldr	r1, [r3, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	461a      	mov	r2, r3
 800769c:	f000 fb2e 	bl	8007cfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2140      	movs	r1, #64	; 0x40
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 fc3d 	bl	8007f26 <TIM_ITRx_SetConfig>
      break;
 80076ac:	e00c      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4619      	mov	r1, r3
 80076b8:	4610      	mov	r0, r2
 80076ba:	f000 fc34 	bl	8007f26 <TIM_ITRx_SetConfig>
      break;
 80076be:	e003      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	73fb      	strb	r3, [r7, #15]
      break;
 80076c4:	e000      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
	...

080076e4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b0c      	cmp	r3, #12
 80076f6:	d831      	bhi.n	800775c <HAL_TIM_ReadCapturedValue+0x78>
 80076f8:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <HAL_TIM_ReadCapturedValue+0x1c>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	08007735 	.word	0x08007735
 8007704:	0800775d 	.word	0x0800775d
 8007708:	0800775d 	.word	0x0800775d
 800770c:	0800775d 	.word	0x0800775d
 8007710:	0800773f 	.word	0x0800773f
 8007714:	0800775d 	.word	0x0800775d
 8007718:	0800775d 	.word	0x0800775d
 800771c:	0800775d 	.word	0x0800775d
 8007720:	08007749 	.word	0x08007749
 8007724:	0800775d 	.word	0x0800775d
 8007728:	0800775d 	.word	0x0800775d
 800772c:	0800775d 	.word	0x0800775d
 8007730:	08007753 	.word	0x08007753
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800773a:	60fb      	str	r3, [r7, #12]

      break;
 800773c:	e00f      	b.n	800775e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007744:	60fb      	str	r3, [r7, #12]

      break;
 8007746:	e00a      	b.n	800775e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774e:	60fb      	str	r3, [r7, #12]

      break;
 8007750:	e005      	b.n	800775e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007758:	60fb      	str	r3, [r7, #12]

      break;
 800775a:	e000      	b.n	800775e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800775c:	bf00      	nop
  }

  return tmpreg;
 800775e:	68fb      	ldr	r3, [r7, #12]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  return htim->State;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007806:	b2db      	uxtb	r3, r3
}
 8007808:	4618      	mov	r0, r3
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a34      	ldr	r2, [pc, #208]	; (80078f8 <TIM_Base_SetConfig+0xe4>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d00f      	beq.n	800784c <TIM_Base_SetConfig+0x38>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007832:	d00b      	beq.n	800784c <TIM_Base_SetConfig+0x38>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a31      	ldr	r2, [pc, #196]	; (80078fc <TIM_Base_SetConfig+0xe8>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d007      	beq.n	800784c <TIM_Base_SetConfig+0x38>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a30      	ldr	r2, [pc, #192]	; (8007900 <TIM_Base_SetConfig+0xec>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d003      	beq.n	800784c <TIM_Base_SetConfig+0x38>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a2f      	ldr	r2, [pc, #188]	; (8007904 <TIM_Base_SetConfig+0xf0>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d108      	bne.n	800785e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	4313      	orrs	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a25      	ldr	r2, [pc, #148]	; (80078f8 <TIM_Base_SetConfig+0xe4>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d01b      	beq.n	800789e <TIM_Base_SetConfig+0x8a>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800786c:	d017      	beq.n	800789e <TIM_Base_SetConfig+0x8a>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a22      	ldr	r2, [pc, #136]	; (80078fc <TIM_Base_SetConfig+0xe8>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d013      	beq.n	800789e <TIM_Base_SetConfig+0x8a>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a21      	ldr	r2, [pc, #132]	; (8007900 <TIM_Base_SetConfig+0xec>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d00f      	beq.n	800789e <TIM_Base_SetConfig+0x8a>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a20      	ldr	r2, [pc, #128]	; (8007904 <TIM_Base_SetConfig+0xf0>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d00b      	beq.n	800789e <TIM_Base_SetConfig+0x8a>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a1f      	ldr	r2, [pc, #124]	; (8007908 <TIM_Base_SetConfig+0xf4>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d007      	beq.n	800789e <TIM_Base_SetConfig+0x8a>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a1e      	ldr	r2, [pc, #120]	; (800790c <TIM_Base_SetConfig+0xf8>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d003      	beq.n	800789e <TIM_Base_SetConfig+0x8a>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a1d      	ldr	r2, [pc, #116]	; (8007910 <TIM_Base_SetConfig+0xfc>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d108      	bne.n	80078b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a08      	ldr	r2, [pc, #32]	; (80078f8 <TIM_Base_SetConfig+0xe4>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d103      	bne.n	80078e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	691a      	ldr	r2, [r3, #16]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	615a      	str	r2, [r3, #20]
}
 80078ea:	bf00      	nop
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	40010000 	.word	0x40010000
 80078fc:	40000400 	.word	0x40000400
 8007900:	40000800 	.word	0x40000800
 8007904:	40000c00 	.word	0x40000c00
 8007908:	40014000 	.word	0x40014000
 800790c:	40014400 	.word	0x40014400
 8007910:	40014800 	.word	0x40014800

08007914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	f023 0201 	bic.w	r2, r3, #1
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0303 	bic.w	r3, r3, #3
 800794a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	4313      	orrs	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f023 0302 	bic.w	r3, r3, #2
 800795c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	4313      	orrs	r3, r2
 8007966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a1c      	ldr	r2, [pc, #112]	; (80079dc <TIM_OC1_SetConfig+0xc8>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d10c      	bne.n	800798a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f023 0308 	bic.w	r3, r3, #8
 8007976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	4313      	orrs	r3, r2
 8007980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f023 0304 	bic.w	r3, r3, #4
 8007988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a13      	ldr	r2, [pc, #76]	; (80079dc <TIM_OC1_SetConfig+0xc8>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d111      	bne.n	80079b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	621a      	str	r2, [r3, #32]
}
 80079d0:	bf00      	nop
 80079d2:	371c      	adds	r7, #28
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	40010000 	.word	0x40010000

080079e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b087      	sub	sp, #28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	f023 0210 	bic.w	r2, r3, #16
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	021b      	lsls	r3, r3, #8
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f023 0320 	bic.w	r3, r3, #32
 8007a2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	011b      	lsls	r3, r3, #4
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a1e      	ldr	r2, [pc, #120]	; (8007ab4 <TIM_OC2_SetConfig+0xd4>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d10d      	bne.n	8007a5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a15      	ldr	r2, [pc, #84]	; (8007ab4 <TIM_OC2_SetConfig+0xd4>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d113      	bne.n	8007a8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	621a      	str	r2, [r3, #32]
}
 8007aa6:	bf00      	nop
 8007aa8:	371c      	adds	r7, #28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	40010000 	.word	0x40010000

08007ab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	021b      	lsls	r3, r3, #8
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a1d      	ldr	r2, [pc, #116]	; (8007b88 <TIM_OC3_SetConfig+0xd0>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d10d      	bne.n	8007b32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	021b      	lsls	r3, r3, #8
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a14      	ldr	r2, [pc, #80]	; (8007b88 <TIM_OC3_SetConfig+0xd0>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d113      	bne.n	8007b62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	011b      	lsls	r3, r3, #4
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	621a      	str	r2, [r3, #32]
}
 8007b7c:	bf00      	nop
 8007b7e:	371c      	adds	r7, #28
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	40010000 	.word	0x40010000

08007b8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	021b      	lsls	r3, r3, #8
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	031b      	lsls	r3, r3, #12
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a10      	ldr	r2, [pc, #64]	; (8007c28 <TIM_OC4_SetConfig+0x9c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d109      	bne.n	8007c00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	019b      	lsls	r3, r3, #6
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	621a      	str	r2, [r3, #32]
}
 8007c1a:	bf00      	nop
 8007c1c:	371c      	adds	r7, #28
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	40010000 	.word	0x40010000

08007c2c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
 8007c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	f023 0201 	bic.w	r2, r3, #1
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	4a24      	ldr	r2, [pc, #144]	; (8007ce8 <TIM_TI1_SetConfig+0xbc>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d013      	beq.n	8007c82 <TIM_TI1_SetConfig+0x56>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c60:	d00f      	beq.n	8007c82 <TIM_TI1_SetConfig+0x56>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4a21      	ldr	r2, [pc, #132]	; (8007cec <TIM_TI1_SetConfig+0xc0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d00b      	beq.n	8007c82 <TIM_TI1_SetConfig+0x56>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4a20      	ldr	r2, [pc, #128]	; (8007cf0 <TIM_TI1_SetConfig+0xc4>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d007      	beq.n	8007c82 <TIM_TI1_SetConfig+0x56>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4a1f      	ldr	r2, [pc, #124]	; (8007cf4 <TIM_TI1_SetConfig+0xc8>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d003      	beq.n	8007c82 <TIM_TI1_SetConfig+0x56>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4a1e      	ldr	r2, [pc, #120]	; (8007cf8 <TIM_TI1_SetConfig+0xcc>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d101      	bne.n	8007c86 <TIM_TI1_SetConfig+0x5a>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <TIM_TI1_SetConfig+0x5c>
 8007c86:	2300      	movs	r3, #0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d008      	beq.n	8007c9e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	f023 0303 	bic.w	r3, r3, #3
 8007c92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	617b      	str	r3, [r7, #20]
 8007c9c:	e003      	b.n	8007ca6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f043 0301 	orr.w	r3, r3, #1
 8007ca4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	011b      	lsls	r3, r3, #4
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f023 030a 	bic.w	r3, r3, #10
 8007cc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	f003 030a 	and.w	r3, r3, #10
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	621a      	str	r2, [r3, #32]
}
 8007cda:	bf00      	nop
 8007cdc:	371c      	adds	r7, #28
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	40010000 	.word	0x40010000
 8007cec:	40000400 	.word	0x40000400
 8007cf0:	40000800 	.word	0x40000800
 8007cf4:	40000c00 	.word	0x40000c00
 8007cf8:	40014000 	.word	0x40014000

08007cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6a1b      	ldr	r3, [r3, #32]
 8007d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	f023 0201 	bic.w	r2, r3, #1
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	011b      	lsls	r3, r3, #4
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f023 030a 	bic.w	r3, r3, #10
 8007d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	621a      	str	r2, [r3, #32]
}
 8007d4e:	bf00      	nop
 8007d50:	371c      	adds	r7, #28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b087      	sub	sp, #28
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	607a      	str	r2, [r7, #4]
 8007d66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a1b      	ldr	r3, [r3, #32]
 8007d6c:	f023 0210 	bic.w	r2, r3, #16
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	021b      	lsls	r3, r3, #8
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	031b      	lsls	r3, r3, #12
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	011b      	lsls	r3, r3, #4
 8007db2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	693a      	ldr	r2, [r7, #16]
 8007dc6:	621a      	str	r2, [r3, #32]
}
 8007dc8:	bf00      	nop
 8007dca:	371c      	adds	r7, #28
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6a1b      	ldr	r3, [r3, #32]
 8007de4:	f023 0210 	bic.w	r2, r3, #16
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dfe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	031b      	lsls	r3, r3, #12
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	621a      	str	r2, [r3, #32]
}
 8007e28:	bf00      	nop
 8007e2a:	371c      	adds	r7, #28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f023 0303 	bic.w	r3, r3, #3
 8007e60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	011b      	lsls	r3, r3, #4
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007e84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	021b      	lsls	r3, r3, #8
 8007e8a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	621a      	str	r2, [r3, #32]
}
 8007ea0:	bf00      	nop
 8007ea2:	371c      	adds	r7, #28
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ed8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	021b      	lsls	r3, r3, #8
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007eea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	031b      	lsls	r3, r3, #12
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007efe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	031b      	lsls	r3, r3, #12
 8007f04:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	621a      	str	r2, [r3, #32]
}
 8007f1a:	bf00      	nop
 8007f1c:	371c      	adds	r7, #28
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b085      	sub	sp, #20
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	f043 0307 	orr.w	r3, r3, #7
 8007f48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	609a      	str	r2, [r3, #8]
}
 8007f50:	bf00      	nop
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b087      	sub	sp, #28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
 8007f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	021a      	lsls	r2, r3, #8
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	609a      	str	r2, [r3, #8]
}
 8007f90:	bf00      	nop
 8007f92:	371c      	adds	r7, #28
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	f003 031f 	and.w	r3, r3, #31
 8007fae:	2201      	movs	r2, #1
 8007fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a1a      	ldr	r2, [r3, #32]
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	43db      	mvns	r3, r3
 8007fbe:	401a      	ands	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6a1a      	ldr	r2, [r3, #32]
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f003 031f 	and.w	r3, r3, #31
 8007fce:	6879      	ldr	r1, [r7, #4]
 8007fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd4:	431a      	orrs	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	621a      	str	r2, [r3, #32]
}
 8007fda:	bf00      	nop
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
	...

08007fe8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a1c      	ldr	r2, [pc, #112]	; (8008064 <TIM_ResetCallback+0x7c>)
 8007ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a1b      	ldr	r2, [pc, #108]	; (8008068 <TIM_ResetCallback+0x80>)
 8007ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a1a      	ldr	r2, [pc, #104]	; (800806c <TIM_ResetCallback+0x84>)
 8008004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a19      	ldr	r2, [pc, #100]	; (8008070 <TIM_ResetCallback+0x88>)
 800800c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a18      	ldr	r2, [pc, #96]	; (8008074 <TIM_ResetCallback+0x8c>)
 8008014:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a17      	ldr	r2, [pc, #92]	; (8008078 <TIM_ResetCallback+0x90>)
 800801c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a16      	ldr	r2, [pc, #88]	; (800807c <TIM_ResetCallback+0x94>)
 8008024:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a15      	ldr	r2, [pc, #84]	; (8008080 <TIM_ResetCallback+0x98>)
 800802c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a14      	ldr	r2, [pc, #80]	; (8008084 <TIM_ResetCallback+0x9c>)
 8008034:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a13      	ldr	r2, [pc, #76]	; (8008088 <TIM_ResetCallback+0xa0>)
 800803c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a12      	ldr	r2, [pc, #72]	; (800808c <TIM_ResetCallback+0xa4>)
 8008044:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a11      	ldr	r2, [pc, #68]	; (8008090 <TIM_ResetCallback+0xa8>)
 800804c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a10      	ldr	r2, [pc, #64]	; (8008094 <TIM_ResetCallback+0xac>)
 8008054:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	0800a00d 	.word	0x0800a00d
 8008068:	0800776d 	.word	0x0800776d
 800806c:	080077d1 	.word	0x080077d1
 8008070:	080077e5 	.word	0x080077e5
 8008074:	080095e9 	.word	0x080095e9
 8008078:	08007795 	.word	0x08007795
 800807c:	08007781 	.word	0x08007781
 8008080:	080077a9 	.word	0x080077a9
 8008084:	080077bd 	.word	0x080077bd
 8008088:	08009ce9 	.word	0x08009ce9
 800808c:	08008175 	.word	0x08008175
 8008090:	08008189 	.word	0x08008189
 8008094:	0800819d 	.word	0x0800819d

08008098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080ac:	2302      	movs	r3, #2
 80080ae:	e050      	b.n	8008152 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2202      	movs	r2, #2
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	4313      	orrs	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1c      	ldr	r2, [pc, #112]	; (8008160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d018      	beq.n	8008126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080fc:	d013      	beq.n	8008126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a18      	ldr	r2, [pc, #96]	; (8008164 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d00e      	beq.n	8008126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a16      	ldr	r2, [pc, #88]	; (8008168 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d009      	beq.n	8008126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a15      	ldr	r2, [pc, #84]	; (800816c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d004      	beq.n	8008126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a13      	ldr	r2, [pc, #76]	; (8008170 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d10c      	bne.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800812c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	4313      	orrs	r3, r2
 8008136:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	40010000 	.word	0x40010000
 8008164:	40000400 	.word	0x40000400
 8008168:	40000800 	.word	0x40000800
 800816c:	40000c00 	.word	0x40000c00
 8008170:	40014000 	.word	0x40014000

08008174 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e04a      	b.n	8008258 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d111      	bne.n	80081f2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fbf8 	bl	80089cc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d102      	bne.n	80081ea <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a1e      	ldr	r2, [pc, #120]	; (8008260 <HAL_UART_Init+0xb0>)
 80081e8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2224      	movs	r2, #36	; 0x24
 80081f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008208:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fdf2 	bl	8008df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	691a      	ldr	r2, [r3, #16]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800821e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	695a      	ldr	r2, [r3, #20]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800822e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800823e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2220      	movs	r2, #32
 800824a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2220      	movs	r2, #32
 8008252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	08003951 	.word	0x08003951

08008264 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e029      	b.n	80082ca <HAL_UART_DeInit+0x66>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2224      	movs	r2, #36	; 0x24
 800827a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68da      	ldr	r2, [r3, #12]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800828c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if (huart->MspDeInitCallback == NULL)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008292:	2b00      	cmp	r3, #0
 8008294:	d102      	bne.n	800829c <HAL_UART_DeInit+0x38>
  {
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a0e      	ldr	r2, [pc, #56]	; (80082d4 <HAL_UART_DeInit+0x70>)
 800829a:	671a      	str	r2, [r3, #112]	; 0x70
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	4798      	blx	r3
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	080039e1 	.word	0x080039e1

080082d8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	4613      	mov	r3, r2
 80082e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b20      	cmp	r3, #32
 80082f0:	d130      	bne.n	8008354 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d002      	beq.n	80082fe <HAL_UART_Transmit_IT+0x26>
 80082f8:	88fb      	ldrh	r3, [r7, #6]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e029      	b.n	8008356 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008308:	2b01      	cmp	r3, #1
 800830a:	d101      	bne.n	8008310 <HAL_UART_Transmit_IT+0x38>
 800830c:	2302      	movs	r3, #2
 800830e:	e022      	b.n	8008356 <HAL_UART_Transmit_IT+0x7e>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	88fa      	ldrh	r2, [r7, #6]
 8008322:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	88fa      	ldrh	r2, [r7, #6]
 8008328:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2221      	movs	r2, #33	; 0x21
 8008334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68da      	ldr	r2, [r3, #12]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800834e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	e000      	b.n	8008356 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008354:	2302      	movs	r3, #2
  }
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	60f8      	str	r0, [r7, #12]
 800836a:	60b9      	str	r1, [r7, #8]
 800836c:	4613      	mov	r3, r2
 800836e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b20      	cmp	r3, #32
 800837a:	d11d      	bne.n	80083b8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <HAL_UART_Receive_IT+0x26>
 8008382:	88fb      	ldrh	r3, [r7, #6]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d101      	bne.n	800838c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e016      	b.n	80083ba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008392:	2b01      	cmp	r3, #1
 8008394:	d101      	bne.n	800839a <HAL_UART_Receive_IT+0x38>
 8008396:	2302      	movs	r3, #2
 8008398:	e00f      	b.n	80083ba <HAL_UART_Receive_IT+0x58>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80083a8:	88fb      	ldrh	r3, [r7, #6]
 80083aa:	461a      	mov	r2, r3
 80083ac:	68b9      	ldr	r1, [r7, #8]
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f000 fb44 	bl	8008a3c <UART_Start_Receive_IT>
 80083b4:	4603      	mov	r3, r0
 80083b6:	e000      	b.n	80083ba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80083b8:	2302      	movs	r3, #2
  }
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
	...

080083c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b0ba      	sub	sp, #232	; 0xe8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80083ea:	2300      	movs	r3, #0
 80083ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80083f0:	2300      	movs	r3, #0
 80083f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80083f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083fa:	f003 030f 	and.w	r3, r3, #15
 80083fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008402:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10f      	bne.n	800842a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800840a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800840e:	f003 0320 	and.w	r3, r3, #32
 8008412:	2b00      	cmp	r3, #0
 8008414:	d009      	beq.n	800842a <HAL_UART_IRQHandler+0x66>
 8008416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800841a:	f003 0320 	and.w	r3, r3, #32
 800841e:	2b00      	cmp	r3, #0
 8008420:	d003      	beq.n	800842a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fc29 	bl	8008c7a <UART_Receive_IT>
      return;
 8008428:	e25b      	b.n	80088e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800842a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 80e1 	beq.w	80085f6 <HAL_UART_IRQHandler+0x232>
 8008434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	2b00      	cmp	r3, #0
 800843e:	d106      	bne.n	800844e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008444:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 80d4 	beq.w	80085f6 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800844e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00b      	beq.n	8008472 <HAL_UART_IRQHandler+0xae>
 800845a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800845e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008462:	2b00      	cmp	r3, #0
 8008464:	d005      	beq.n	8008472 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846a:	f043 0201 	orr.w	r2, r3, #1
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008476:	f003 0304 	and.w	r3, r3, #4
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00b      	beq.n	8008496 <HAL_UART_IRQHandler+0xd2>
 800847e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d005      	beq.n	8008496 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848e:	f043 0202 	orr.w	r2, r3, #2
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800849a:	f003 0302 	and.w	r3, r3, #2
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00b      	beq.n	80084ba <HAL_UART_IRQHandler+0xf6>
 80084a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d005      	beq.n	80084ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	f043 0204 	orr.w	r2, r3, #4
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80084ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084be:	f003 0308 	and.w	r3, r3, #8
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d011      	beq.n	80084ea <HAL_UART_IRQHandler+0x126>
 80084c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084ca:	f003 0320 	and.w	r3, r3, #32
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d105      	bne.n	80084de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80084d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d005      	beq.n	80084ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e2:	f043 0208 	orr.w	r2, r3, #8
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f000 81f2 	beq.w	80088d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f8:	f003 0320 	and.w	r3, r3, #32
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d008      	beq.n	8008512 <HAL_UART_IRQHandler+0x14e>
 8008500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008504:	f003 0320 	and.w	r3, r3, #32
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fbb4 	bl	8008c7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851c:	2b40      	cmp	r3, #64	; 0x40
 800851e:	bf0c      	ite	eq
 8008520:	2301      	moveq	r3, #1
 8008522:	2300      	movne	r3, #0
 8008524:	b2db      	uxtb	r3, r3
 8008526:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852e:	f003 0308 	and.w	r3, r3, #8
 8008532:	2b00      	cmp	r3, #0
 8008534:	d103      	bne.n	800853e <HAL_UART_IRQHandler+0x17a>
 8008536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800853a:	2b00      	cmp	r3, #0
 800853c:	d051      	beq.n	80085e2 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 faba 	bl	8008ab8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854e:	2b40      	cmp	r3, #64	; 0x40
 8008550:	d142      	bne.n	80085d8 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	3314      	adds	r3, #20
 8008558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008560:	e853 3f00 	ldrex	r3, [r3]
 8008564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008568:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800856c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3314      	adds	r3, #20
 800857a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800857e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008582:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008586:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800858a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800858e:	e841 2300 	strex	r3, r2, [r1]
 8008592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1d9      	bne.n	8008552 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d013      	beq.n	80085ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085aa:	4a7f      	ldr	r2, [pc, #508]	; (80087a8 <HAL_UART_IRQHandler+0x3e4>)
 80085ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fc fef2 	bl	800539c <HAL_DMA_Abort_IT>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d019      	beq.n	80085f2 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80085c8:	4610      	mov	r0, r2
 80085ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085cc:	e011      	b.n	80085f2 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d6:	e00c      	b.n	80085f2 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085e0:	e007      	b.n	80085f2 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80085f0:	e172      	b.n	80088d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085f2:	bf00      	nop
    return;
 80085f4:	e170      	b.n	80088d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	f040 814c 	bne.w	8008898 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008604:	f003 0310 	and.w	r3, r3, #16
 8008608:	2b00      	cmp	r3, #0
 800860a:	f000 8145 	beq.w	8008898 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800860e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008612:	f003 0310 	and.w	r3, r3, #16
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 813e 	beq.w	8008898 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800861c:	2300      	movs	r3, #0
 800861e:	60bb      	str	r3, [r7, #8]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	60bb      	str	r3, [r7, #8]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	60bb      	str	r3, [r7, #8]
 8008630:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800863c:	2b40      	cmp	r3, #64	; 0x40
 800863e:	f040 80b5 	bne.w	80087ac <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800864e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 8142 	beq.w	80088dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800865c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008660:	429a      	cmp	r2, r3
 8008662:	f080 813b 	bcs.w	80088dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800866c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008678:	f000 8088 	beq.w	800878c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	330c      	adds	r3, #12
 8008682:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008686:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800868a:	e853 3f00 	ldrex	r3, [r3]
 800868e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008692:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800869a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	330c      	adds	r3, #12
 80086a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80086a8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80086ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80086b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80086c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1d9      	bne.n	800867c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	3314      	adds	r3, #20
 80086ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086d2:	e853 3f00 	ldrex	r3, [r3]
 80086d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80086d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086da:	f023 0301 	bic.w	r3, r3, #1
 80086de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3314      	adds	r3, #20
 80086e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80086ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80086f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80086f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80086fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e1      	bne.n	80086c8 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3314      	adds	r3, #20
 800870a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800870e:	e853 3f00 	ldrex	r3, [r3]
 8008712:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800871a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3314      	adds	r3, #20
 8008724:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008728:	66fa      	str	r2, [r7, #108]	; 0x6c
 800872a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800872e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008730:	e841 2300 	strex	r3, r2, [r1]
 8008734:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1e3      	bne.n	8008704 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2220      	movs	r2, #32
 8008740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	330c      	adds	r3, #12
 8008750:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008754:	e853 3f00 	ldrex	r3, [r3]
 8008758:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800875a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800875c:	f023 0310 	bic.w	r3, r3, #16
 8008760:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	330c      	adds	r3, #12
 800876a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800876e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008770:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008774:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008776:	e841 2300 	strex	r3, r2, [r1]
 800877a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800877c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1e3      	bne.n	800874a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008786:	4618      	mov	r0, r3
 8008788:	f7fc fd98 	bl	80052bc <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8008798:	b292      	uxth	r2, r2
 800879a:	1a8a      	subs	r2, r1, r2
 800879c:	b292      	uxth	r2, r2
 800879e:	4611      	mov	r1, r2
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087a4:	e09a      	b.n	80088dc <HAL_UART_IRQHandler+0x518>
 80087a6:	bf00      	nop
 80087a8:	08008b7f 	.word	0x08008b7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 808c 	beq.w	80088e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80087c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 8087 	beq.w	80088e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	330c      	adds	r3, #12
 80087d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087dc:	e853 3f00 	ldrex	r3, [r3]
 80087e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	330c      	adds	r3, #12
 80087f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80087f6:	647a      	str	r2, [r7, #68]	; 0x44
 80087f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087fe:	e841 2300 	strex	r3, r2, [r1]
 8008802:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e3      	bne.n	80087d2 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3314      	adds	r3, #20
 8008810:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	623b      	str	r3, [r7, #32]
   return(result);
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	f023 0301 	bic.w	r3, r3, #1
 8008820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3314      	adds	r3, #20
 800882a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800882e:	633a      	str	r2, [r7, #48]	; 0x30
 8008830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e3      	bne.n	800880a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	330c      	adds	r3, #12
 8008856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	e853 3f00 	ldrex	r3, [r3]
 800885e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 0310 	bic.w	r3, r3, #16
 8008866:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	330c      	adds	r3, #12
 8008870:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008874:	61fa      	str	r2, [r7, #28]
 8008876:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008878:	69b9      	ldr	r1, [r7, #24]
 800887a:	69fa      	ldr	r2, [r7, #28]
 800887c:	e841 2300 	strex	r3, r2, [r1]
 8008880:	617b      	str	r3, [r7, #20]
   return(result);
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e3      	bne.n	8008850 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800888c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8008890:	4611      	mov	r1, r2
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008896:	e023      	b.n	80088e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800889c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d009      	beq.n	80088b8 <HAL_UART_IRQHandler+0x4f4>
 80088a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d003      	beq.n	80088b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f979 	bl	8008ba8 <UART_Transmit_IT>
    return;
 80088b6:	e014      	b.n	80088e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80088b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00e      	beq.n	80088e2 <HAL_UART_IRQHandler+0x51e>
 80088c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d008      	beq.n	80088e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f9b9 	bl	8008c48 <UART_EndTransmit_IT>
    return;
 80088d6:	e004      	b.n	80088e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80088d8:	bf00      	nop
 80088da:	e002      	b.n	80088e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80088dc:	bf00      	nop
 80088de:	e000      	b.n	80088e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80088e0:	bf00      	nop
  }
}
 80088e2:	37e8      	adds	r7, #232	; 0xe8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8008980:	2300      	movs	r3, #0
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	2300      	movs	r3, #0
 8008986:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800898e:	b2db      	uxtb	r3, r3
 8008990:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008998:	b2db      	uxtb	r3, r3
 800899a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	4313      	orrs	r3, r2
 80089a6:	b2db      	uxtb	r3, r3
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a10      	ldr	r2, [pc, #64]	; (8008a18 <UART_InitCallbacksToDefault+0x4c>)
 80089d8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a0f      	ldr	r2, [pc, #60]	; (8008a1c <UART_InitCallbacksToDefault+0x50>)
 80089de:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a0f      	ldr	r2, [pc, #60]	; (8008a20 <UART_InitCallbacksToDefault+0x54>)
 80089e4:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a0e      	ldr	r2, [pc, #56]	; (8008a24 <UART_InitCallbacksToDefault+0x58>)
 80089ea:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a0e      	ldr	r2, [pc, #56]	; (8008a28 <UART_InitCallbacksToDefault+0x5c>)
 80089f0:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a0d      	ldr	r2, [pc, #52]	; (8008a2c <UART_InitCallbacksToDefault+0x60>)
 80089f6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a0d      	ldr	r2, [pc, #52]	; (8008a30 <UART_InitCallbacksToDefault+0x64>)
 80089fc:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a0c      	ldr	r2, [pc, #48]	; (8008a34 <UART_InitCallbacksToDefault+0x68>)
 8008a02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a0c      	ldr	r2, [pc, #48]	; (8008a38 <UART_InitCallbacksToDefault+0x6c>)
 8008a08:	669a      	str	r2, [r3, #104]	; 0x68

}
 8008a0a:	bf00      	nop
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	080088fd 	.word	0x080088fd
 8008a1c:	080088e9 	.word	0x080088e9
 8008a20:	08008911 	.word	0x08008911
 8008a24:	080026d9 	.word	0x080026d9
 8008a28:	08002625 	.word	0x08002625
 8008a2c:	08008925 	.word	0x08008925
 8008a30:	08008939 	.word	0x08008939
 8008a34:	0800894d 	.word	0x0800894d
 8008a38:	08008961 	.word	0x08008961

08008a3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	4613      	mov	r3, r2
 8008a48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	88fa      	ldrh	r2, [r7, #6]
 8008a54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	88fa      	ldrh	r2, [r7, #6]
 8008a5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2222      	movs	r2, #34	; 0x22
 8008a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d007      	beq.n	8008a8a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68da      	ldr	r2, [r3, #12]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	695a      	ldr	r2, [r3, #20]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f042 0201 	orr.w	r2, r2, #1
 8008a98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68da      	ldr	r2, [r3, #12]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f042 0220 	orr.w	r2, r2, #32
 8008aa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b095      	sub	sp, #84	; 0x54
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	330c      	adds	r3, #12
 8008ac6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aca:	e853 3f00 	ldrex	r3, [r3]
 8008ace:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	330c      	adds	r3, #12
 8008ade:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ae0:	643a      	str	r2, [r7, #64]	; 0x40
 8008ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ae6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ae8:	e841 2300 	strex	r3, r2, [r1]
 8008aec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1e5      	bne.n	8008ac0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3314      	adds	r3, #20
 8008afa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	e853 3f00 	ldrex	r3, [r3]
 8008b02:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	f023 0301 	bic.w	r3, r3, #1
 8008b0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3314      	adds	r3, #20
 8008b12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b1c:	e841 2300 	strex	r3, r2, [r1]
 8008b20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1e5      	bne.n	8008af4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d119      	bne.n	8008b64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	330c      	adds	r3, #12
 8008b36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	e853 3f00 	ldrex	r3, [r3]
 8008b3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	f023 0310 	bic.w	r3, r3, #16
 8008b46:	647b      	str	r3, [r7, #68]	; 0x44
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	330c      	adds	r3, #12
 8008b4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b50:	61ba      	str	r2, [r7, #24]
 8008b52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b54:	6979      	ldr	r1, [r7, #20]
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	e841 2300 	strex	r3, r2, [r1]
 8008b5c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1e5      	bne.n	8008b30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2220      	movs	r2, #32
 8008b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008b72:	bf00      	nop
 8008b74:	3754      	adds	r7, #84	; 0x54
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ba0:	bf00      	nop
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b21      	cmp	r3, #33	; 0x21
 8008bba:	d13e      	bne.n	8008c3a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc4:	d114      	bne.n	8008bf0 <UART_Transmit_IT+0x48>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d110      	bne.n	8008bf0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008be2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a1b      	ldr	r3, [r3, #32]
 8008be8:	1c9a      	adds	r2, r3, #2
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	621a      	str	r2, [r3, #32]
 8008bee:	e008      	b.n	8008c02 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a1b      	ldr	r3, [r3, #32]
 8008bf4:	1c59      	adds	r1, r3, #1
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	6211      	str	r1, [r2, #32]
 8008bfa:	781a      	ldrb	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	4619      	mov	r1, r3
 8008c10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10f      	bne.n	8008c36 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68da      	ldr	r2, [r3, #12]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	e000      	b.n	8008c3c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c3a:	2302      	movs	r3, #2
  }
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2220      	movs	r2, #32
 8008c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b08c      	sub	sp, #48	; 0x30
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b22      	cmp	r3, #34	; 0x22
 8008c8c:	f040 80ad 	bne.w	8008dea <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c98:	d117      	bne.n	8008cca <UART_Receive_IT+0x50>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d113      	bne.n	8008cca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008caa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc2:	1c9a      	adds	r2, r3, #2
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	629a      	str	r2, [r3, #40]	; 0x28
 8008cc8:	e026      	b.n	8008d18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cdc:	d007      	beq.n	8008cee <UART_Receive_IT+0x74>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10a      	bne.n	8008cfc <UART_Receive_IT+0x82>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d106      	bne.n	8008cfc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	b2da      	uxtb	r2, r3
 8008cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf8:	701a      	strb	r2, [r3, #0]
 8008cfa:	e008      	b.n	8008d0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	4619      	mov	r1, r3
 8008d26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d15c      	bne.n	8008de6 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68da      	ldr	r2, [r3, #12]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f022 0220 	bic.w	r2, r2, #32
 8008d3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68da      	ldr	r2, [r3, #12]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	695a      	ldr	r2, [r3, #20]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f022 0201 	bic.w	r2, r2, #1
 8008d5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2220      	movs	r2, #32
 8008d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d136      	bne.n	8008dda <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	330c      	adds	r3, #12
 8008d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	e853 3f00 	ldrex	r3, [r3]
 8008d80:	613b      	str	r3, [r7, #16]
   return(result);
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	f023 0310 	bic.w	r3, r3, #16
 8008d88:	627b      	str	r3, [r7, #36]	; 0x24
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	330c      	adds	r3, #12
 8008d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d92:	623a      	str	r2, [r7, #32]
 8008d94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d96:	69f9      	ldr	r1, [r7, #28]
 8008d98:	6a3a      	ldr	r2, [r7, #32]
 8008d9a:	e841 2300 	strex	r3, r2, [r1]
 8008d9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1e5      	bne.n	8008d72 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0310 	and.w	r3, r3, #16
 8008db0:	2b10      	cmp	r3, #16
 8008db2:	d10a      	bne.n	8008dca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008db4:	2300      	movs	r3, #0
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	60fb      	str	r3, [r7, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008dd2:	4611      	mov	r1, r2
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	4798      	blx	r3
 8008dd8:	e003      	b.n	8008de2 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	e002      	b.n	8008dec <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	e000      	b.n	8008dec <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8008dea:	2302      	movs	r3, #2
  }
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3730      	adds	r7, #48	; 0x30
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008df8:	b0c0      	sub	sp, #256	; 0x100
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e10:	68d9      	ldr	r1, [r3, #12]
 8008e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	ea40 0301 	orr.w	r3, r0, r1
 8008e1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e22:	689a      	ldr	r2, [r3, #8]
 8008e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	431a      	orrs	r2, r3
 8008e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e38:	69db      	ldr	r3, [r3, #28]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e4c:	f021 010c 	bic.w	r1, r1, #12
 8008e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e5a:	430b      	orrs	r3, r1
 8008e5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e6e:	6999      	ldr	r1, [r3, #24]
 8008e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	ea40 0301 	orr.w	r3, r0, r1
 8008e7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	4b8f      	ldr	r3, [pc, #572]	; (80090c0 <UART_SetConfig+0x2cc>)
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d005      	beq.n	8008e94 <UART_SetConfig+0xa0>
 8008e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	4b8d      	ldr	r3, [pc, #564]	; (80090c4 <UART_SetConfig+0x2d0>)
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d104      	bne.n	8008e9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e94:	f7fd fc3e 	bl	8006714 <HAL_RCC_GetPCLK2Freq>
 8008e98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e9c:	e003      	b.n	8008ea6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e9e:	f7fd fc25 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 8008ea2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eb0:	f040 810c 	bne.w	80090cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ebe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008ec2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008ec6:	4622      	mov	r2, r4
 8008ec8:	462b      	mov	r3, r5
 8008eca:	1891      	adds	r1, r2, r2
 8008ecc:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ece:	415b      	adcs	r3, r3
 8008ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ed2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	eb12 0801 	adds.w	r8, r2, r1
 8008edc:	4629      	mov	r1, r5
 8008ede:	eb43 0901 	adc.w	r9, r3, r1
 8008ee2:	f04f 0200 	mov.w	r2, #0
 8008ee6:	f04f 0300 	mov.w	r3, #0
 8008eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ef6:	4690      	mov	r8, r2
 8008ef8:	4699      	mov	r9, r3
 8008efa:	4623      	mov	r3, r4
 8008efc:	eb18 0303 	adds.w	r3, r8, r3
 8008f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f04:	462b      	mov	r3, r5
 8008f06:	eb49 0303 	adc.w	r3, r9, r3
 8008f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008f1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008f22:	460b      	mov	r3, r1
 8008f24:	18db      	adds	r3, r3, r3
 8008f26:	653b      	str	r3, [r7, #80]	; 0x50
 8008f28:	4613      	mov	r3, r2
 8008f2a:	eb42 0303 	adc.w	r3, r2, r3
 8008f2e:	657b      	str	r3, [r7, #84]	; 0x54
 8008f30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008f34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008f38:	f7f7 fd48 	bl	80009cc <__aeabi_uldivmod>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4b61      	ldr	r3, [pc, #388]	; (80090c8 <UART_SetConfig+0x2d4>)
 8008f42:	fba3 2302 	umull	r2, r3, r3, r2
 8008f46:	095b      	lsrs	r3, r3, #5
 8008f48:	011c      	lsls	r4, r3, #4
 8008f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008f58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008f5c:	4642      	mov	r2, r8
 8008f5e:	464b      	mov	r3, r9
 8008f60:	1891      	adds	r1, r2, r2
 8008f62:	64b9      	str	r1, [r7, #72]	; 0x48
 8008f64:	415b      	adcs	r3, r3
 8008f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008f6c:	4641      	mov	r1, r8
 8008f6e:	eb12 0a01 	adds.w	sl, r2, r1
 8008f72:	4649      	mov	r1, r9
 8008f74:	eb43 0b01 	adc.w	fp, r3, r1
 8008f78:	f04f 0200 	mov.w	r2, #0
 8008f7c:	f04f 0300 	mov.w	r3, #0
 8008f80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f8c:	4692      	mov	sl, r2
 8008f8e:	469b      	mov	fp, r3
 8008f90:	4643      	mov	r3, r8
 8008f92:	eb1a 0303 	adds.w	r3, sl, r3
 8008f96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f9a:	464b      	mov	r3, r9
 8008f9c:	eb4b 0303 	adc.w	r3, fp, r3
 8008fa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008fb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008fb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	18db      	adds	r3, r3, r3
 8008fbc:	643b      	str	r3, [r7, #64]	; 0x40
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	eb42 0303 	adc.w	r3, r2, r3
 8008fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8008fc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008fca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008fce:	f7f7 fcfd 	bl	80009cc <__aeabi_uldivmod>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	4b3b      	ldr	r3, [pc, #236]	; (80090c8 <UART_SetConfig+0x2d4>)
 8008fda:	fba3 2301 	umull	r2, r3, r3, r1
 8008fde:	095b      	lsrs	r3, r3, #5
 8008fe0:	2264      	movs	r2, #100	; 0x64
 8008fe2:	fb02 f303 	mul.w	r3, r2, r3
 8008fe6:	1acb      	subs	r3, r1, r3
 8008fe8:	00db      	lsls	r3, r3, #3
 8008fea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008fee:	4b36      	ldr	r3, [pc, #216]	; (80090c8 <UART_SetConfig+0x2d4>)
 8008ff0:	fba3 2302 	umull	r2, r3, r3, r2
 8008ff4:	095b      	lsrs	r3, r3, #5
 8008ff6:	005b      	lsls	r3, r3, #1
 8008ff8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ffc:	441c      	add	r4, r3
 8008ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009002:	2200      	movs	r2, #0
 8009004:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009008:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800900c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009010:	4642      	mov	r2, r8
 8009012:	464b      	mov	r3, r9
 8009014:	1891      	adds	r1, r2, r2
 8009016:	63b9      	str	r1, [r7, #56]	; 0x38
 8009018:	415b      	adcs	r3, r3
 800901a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800901c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009020:	4641      	mov	r1, r8
 8009022:	1851      	adds	r1, r2, r1
 8009024:	6339      	str	r1, [r7, #48]	; 0x30
 8009026:	4649      	mov	r1, r9
 8009028:	414b      	adcs	r3, r1
 800902a:	637b      	str	r3, [r7, #52]	; 0x34
 800902c:	f04f 0200 	mov.w	r2, #0
 8009030:	f04f 0300 	mov.w	r3, #0
 8009034:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009038:	4659      	mov	r1, fp
 800903a:	00cb      	lsls	r3, r1, #3
 800903c:	4651      	mov	r1, sl
 800903e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009042:	4651      	mov	r1, sl
 8009044:	00ca      	lsls	r2, r1, #3
 8009046:	4610      	mov	r0, r2
 8009048:	4619      	mov	r1, r3
 800904a:	4603      	mov	r3, r0
 800904c:	4642      	mov	r2, r8
 800904e:	189b      	adds	r3, r3, r2
 8009050:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009054:	464b      	mov	r3, r9
 8009056:	460a      	mov	r2, r1
 8009058:	eb42 0303 	adc.w	r3, r2, r3
 800905c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800906c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009070:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009074:	460b      	mov	r3, r1
 8009076:	18db      	adds	r3, r3, r3
 8009078:	62bb      	str	r3, [r7, #40]	; 0x28
 800907a:	4613      	mov	r3, r2
 800907c:	eb42 0303 	adc.w	r3, r2, r3
 8009080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009082:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009086:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800908a:	f7f7 fc9f 	bl	80009cc <__aeabi_uldivmod>
 800908e:	4602      	mov	r2, r0
 8009090:	460b      	mov	r3, r1
 8009092:	4b0d      	ldr	r3, [pc, #52]	; (80090c8 <UART_SetConfig+0x2d4>)
 8009094:	fba3 1302 	umull	r1, r3, r3, r2
 8009098:	095b      	lsrs	r3, r3, #5
 800909a:	2164      	movs	r1, #100	; 0x64
 800909c:	fb01 f303 	mul.w	r3, r1, r3
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	00db      	lsls	r3, r3, #3
 80090a4:	3332      	adds	r3, #50	; 0x32
 80090a6:	4a08      	ldr	r2, [pc, #32]	; (80090c8 <UART_SetConfig+0x2d4>)
 80090a8:	fba2 2303 	umull	r2, r3, r2, r3
 80090ac:	095b      	lsrs	r3, r3, #5
 80090ae:	f003 0207 	and.w	r2, r3, #7
 80090b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4422      	add	r2, r4
 80090ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090bc:	e105      	b.n	80092ca <UART_SetConfig+0x4d6>
 80090be:	bf00      	nop
 80090c0:	40011000 	.word	0x40011000
 80090c4:	40011400 	.word	0x40011400
 80090c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090d0:	2200      	movs	r2, #0
 80090d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80090d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80090da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80090de:	4642      	mov	r2, r8
 80090e0:	464b      	mov	r3, r9
 80090e2:	1891      	adds	r1, r2, r2
 80090e4:	6239      	str	r1, [r7, #32]
 80090e6:	415b      	adcs	r3, r3
 80090e8:	627b      	str	r3, [r7, #36]	; 0x24
 80090ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090ee:	4641      	mov	r1, r8
 80090f0:	1854      	adds	r4, r2, r1
 80090f2:	4649      	mov	r1, r9
 80090f4:	eb43 0501 	adc.w	r5, r3, r1
 80090f8:	f04f 0200 	mov.w	r2, #0
 80090fc:	f04f 0300 	mov.w	r3, #0
 8009100:	00eb      	lsls	r3, r5, #3
 8009102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009106:	00e2      	lsls	r2, r4, #3
 8009108:	4614      	mov	r4, r2
 800910a:	461d      	mov	r5, r3
 800910c:	4643      	mov	r3, r8
 800910e:	18e3      	adds	r3, r4, r3
 8009110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009114:	464b      	mov	r3, r9
 8009116:	eb45 0303 	adc.w	r3, r5, r3
 800911a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800911e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800912a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800912e:	f04f 0200 	mov.w	r2, #0
 8009132:	f04f 0300 	mov.w	r3, #0
 8009136:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800913a:	4629      	mov	r1, r5
 800913c:	008b      	lsls	r3, r1, #2
 800913e:	4621      	mov	r1, r4
 8009140:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009144:	4621      	mov	r1, r4
 8009146:	008a      	lsls	r2, r1, #2
 8009148:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800914c:	f7f7 fc3e 	bl	80009cc <__aeabi_uldivmod>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	4b60      	ldr	r3, [pc, #384]	; (80092d8 <UART_SetConfig+0x4e4>)
 8009156:	fba3 2302 	umull	r2, r3, r3, r2
 800915a:	095b      	lsrs	r3, r3, #5
 800915c:	011c      	lsls	r4, r3, #4
 800915e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009162:	2200      	movs	r2, #0
 8009164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009168:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800916c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009170:	4642      	mov	r2, r8
 8009172:	464b      	mov	r3, r9
 8009174:	1891      	adds	r1, r2, r2
 8009176:	61b9      	str	r1, [r7, #24]
 8009178:	415b      	adcs	r3, r3
 800917a:	61fb      	str	r3, [r7, #28]
 800917c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009180:	4641      	mov	r1, r8
 8009182:	1851      	adds	r1, r2, r1
 8009184:	6139      	str	r1, [r7, #16]
 8009186:	4649      	mov	r1, r9
 8009188:	414b      	adcs	r3, r1
 800918a:	617b      	str	r3, [r7, #20]
 800918c:	f04f 0200 	mov.w	r2, #0
 8009190:	f04f 0300 	mov.w	r3, #0
 8009194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009198:	4659      	mov	r1, fp
 800919a:	00cb      	lsls	r3, r1, #3
 800919c:	4651      	mov	r1, sl
 800919e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091a2:	4651      	mov	r1, sl
 80091a4:	00ca      	lsls	r2, r1, #3
 80091a6:	4610      	mov	r0, r2
 80091a8:	4619      	mov	r1, r3
 80091aa:	4603      	mov	r3, r0
 80091ac:	4642      	mov	r2, r8
 80091ae:	189b      	adds	r3, r3, r2
 80091b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091b4:	464b      	mov	r3, r9
 80091b6:	460a      	mov	r2, r1
 80091b8:	eb42 0303 	adc.w	r3, r2, r3
 80091bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80091c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80091ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80091cc:	f04f 0200 	mov.w	r2, #0
 80091d0:	f04f 0300 	mov.w	r3, #0
 80091d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80091d8:	4649      	mov	r1, r9
 80091da:	008b      	lsls	r3, r1, #2
 80091dc:	4641      	mov	r1, r8
 80091de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091e2:	4641      	mov	r1, r8
 80091e4:	008a      	lsls	r2, r1, #2
 80091e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80091ea:	f7f7 fbef 	bl	80009cc <__aeabi_uldivmod>
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	4b39      	ldr	r3, [pc, #228]	; (80092d8 <UART_SetConfig+0x4e4>)
 80091f4:	fba3 1302 	umull	r1, r3, r3, r2
 80091f8:	095b      	lsrs	r3, r3, #5
 80091fa:	2164      	movs	r1, #100	; 0x64
 80091fc:	fb01 f303 	mul.w	r3, r1, r3
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	011b      	lsls	r3, r3, #4
 8009204:	3332      	adds	r3, #50	; 0x32
 8009206:	4a34      	ldr	r2, [pc, #208]	; (80092d8 <UART_SetConfig+0x4e4>)
 8009208:	fba2 2303 	umull	r2, r3, r2, r3
 800920c:	095b      	lsrs	r3, r3, #5
 800920e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009212:	441c      	add	r4, r3
 8009214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009218:	2200      	movs	r2, #0
 800921a:	673b      	str	r3, [r7, #112]	; 0x70
 800921c:	677a      	str	r2, [r7, #116]	; 0x74
 800921e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009222:	4642      	mov	r2, r8
 8009224:	464b      	mov	r3, r9
 8009226:	1891      	adds	r1, r2, r2
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	415b      	adcs	r3, r3
 800922c:	60fb      	str	r3, [r7, #12]
 800922e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009232:	4641      	mov	r1, r8
 8009234:	1851      	adds	r1, r2, r1
 8009236:	6039      	str	r1, [r7, #0]
 8009238:	4649      	mov	r1, r9
 800923a:	414b      	adcs	r3, r1
 800923c:	607b      	str	r3, [r7, #4]
 800923e:	f04f 0200 	mov.w	r2, #0
 8009242:	f04f 0300 	mov.w	r3, #0
 8009246:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800924a:	4659      	mov	r1, fp
 800924c:	00cb      	lsls	r3, r1, #3
 800924e:	4651      	mov	r1, sl
 8009250:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009254:	4651      	mov	r1, sl
 8009256:	00ca      	lsls	r2, r1, #3
 8009258:	4610      	mov	r0, r2
 800925a:	4619      	mov	r1, r3
 800925c:	4603      	mov	r3, r0
 800925e:	4642      	mov	r2, r8
 8009260:	189b      	adds	r3, r3, r2
 8009262:	66bb      	str	r3, [r7, #104]	; 0x68
 8009264:	464b      	mov	r3, r9
 8009266:	460a      	mov	r2, r1
 8009268:	eb42 0303 	adc.w	r3, r2, r3
 800926c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800926e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	663b      	str	r3, [r7, #96]	; 0x60
 8009278:	667a      	str	r2, [r7, #100]	; 0x64
 800927a:	f04f 0200 	mov.w	r2, #0
 800927e:	f04f 0300 	mov.w	r3, #0
 8009282:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009286:	4649      	mov	r1, r9
 8009288:	008b      	lsls	r3, r1, #2
 800928a:	4641      	mov	r1, r8
 800928c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009290:	4641      	mov	r1, r8
 8009292:	008a      	lsls	r2, r1, #2
 8009294:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009298:	f7f7 fb98 	bl	80009cc <__aeabi_uldivmod>
 800929c:	4602      	mov	r2, r0
 800929e:	460b      	mov	r3, r1
 80092a0:	4b0d      	ldr	r3, [pc, #52]	; (80092d8 <UART_SetConfig+0x4e4>)
 80092a2:	fba3 1302 	umull	r1, r3, r3, r2
 80092a6:	095b      	lsrs	r3, r3, #5
 80092a8:	2164      	movs	r1, #100	; 0x64
 80092aa:	fb01 f303 	mul.w	r3, r1, r3
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	011b      	lsls	r3, r3, #4
 80092b2:	3332      	adds	r3, #50	; 0x32
 80092b4:	4a08      	ldr	r2, [pc, #32]	; (80092d8 <UART_SetConfig+0x4e4>)
 80092b6:	fba2 2303 	umull	r2, r3, r2, r3
 80092ba:	095b      	lsrs	r3, r3, #5
 80092bc:	f003 020f 	and.w	r2, r3, #15
 80092c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4422      	add	r2, r4
 80092c8:	609a      	str	r2, [r3, #8]
}
 80092ca:	bf00      	nop
 80092cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80092d0:	46bd      	mov	sp, r7
 80092d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092d6:	bf00      	nop
 80092d8:	51eb851f 	.word	0x51eb851f

080092dc <HAL_ADC_ConvCpltCallback>:
* Function: HAL_ADC_ConvCpltCallback										   	   *
* Description: Conversion callback to process conversion complete in the 		   *
* 			   peripheral.														   *
************************************************************************************/
VOID HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
	if(Rte_P_Os_OsPort_Os_Counter % 200 == 0)
 80092e4:	4b09      	ldr	r3, [pc, #36]	; (800930c <HAL_ADC_ConvCpltCallback+0x30>)
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	4b09      	ldr	r3, [pc, #36]	; (8009310 <HAL_ADC_ConvCpltCallback+0x34>)
 80092ea:	fba3 1302 	umull	r1, r3, r3, r2
 80092ee:	099b      	lsrs	r3, r3, #6
 80092f0:	21c8      	movs	r1, #200	; 0xc8
 80092f2:	fb01 f303 	mul.w	r3, r1, r3
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d102      	bne.n	8009302 <HAL_ADC_ConvCpltCallback+0x26>
	{
		Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(Adc_ChannelOne_Buffer);
 80092fc:	4805      	ldr	r0, [pc, #20]	; (8009314 <HAL_ADC_ConvCpltCallback+0x38>)
 80092fe:	f004 f84f 	bl	800d3a0 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>
	}
	else
	{
		/* do nothing */
	}
}
 8009302:	bf00      	nop
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	20000200 	.word	0x20000200
 8009310:	51eb851f 	.word	0x51eb851f
 8009314:	200006b0 	.word	0x200006b0

08009318 <HAL_ADC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_ADC_ErrorCallback										   		   *
* Description: Error callback to process fault in the peripheral.		 		   *
************************************************************************************/
VOID HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
	/* Local variable to store error status. */
	uint32 receivedStatus = HAL_ADC_GetError(&hadc1);
 8009320:	481b      	ldr	r0, [pc, #108]	; (8009390 <HAL_ADC_ErrorCallback+0x78>)
 8009322:	f7fb fa97 	bl	8004854 <HAL_ADC_GetError>
 8009326:	60f8      	str	r0, [r7, #12]
	/* Process error status.
	 * Perform re-initialization on each error to prevent faults in the peripheral. */
	switch(receivedStatus)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2b04      	cmp	r3, #4
 800932c:	d82a      	bhi.n	8009384 <HAL_ADC_ErrorCallback+0x6c>
 800932e:	a201      	add	r2, pc, #4	; (adr r2, 8009334 <HAL_ADC_ErrorCallback+0x1c>)
 8009330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009334:	08009385 	.word	0x08009385
 8009338:	08009349 	.word	0x08009349
 800933c:	0800935d 	.word	0x0800935d
 8009340:	08009385 	.word	0x08009385
 8009344:	08009371 	.word	0x08009371
	{
		case HAL_ADC_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_ADC_ERROR_INTERNAL:
			SystemManager_Fault[ADC_ERROR_INTERNAL]++;
 8009348:	4b12      	ldr	r3, [pc, #72]	; (8009394 <HAL_ADC_ErrorCallback+0x7c>)
 800934a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934c:	3301      	adds	r3, #1
 800934e:	4a11      	ldr	r2, [pc, #68]	; (8009394 <HAL_ADC_ErrorCallback+0x7c>)
 8009350:	6393      	str	r3, [r2, #56]	; 0x38
			Adc_DeInit();
 8009352:	f000 f897 	bl	8009484 <Adc_DeInit>
			Adc_Init();
 8009356:	f000 f89f 	bl	8009498 <Adc_Init>
			break;
 800935a:	e014      	b.n	8009386 <HAL_ADC_ErrorCallback+0x6e>
		case HAL_ADC_ERROR_OVR:
			SystemManager_Fault[ADC_ERROR_OVR]++;
 800935c:	4b0d      	ldr	r3, [pc, #52]	; (8009394 <HAL_ADC_ErrorCallback+0x7c>)
 800935e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009360:	3301      	adds	r3, #1
 8009362:	4a0c      	ldr	r2, [pc, #48]	; (8009394 <HAL_ADC_ErrorCallback+0x7c>)
 8009364:	63d3      	str	r3, [r2, #60]	; 0x3c
			Adc_DeInit();
 8009366:	f000 f88d 	bl	8009484 <Adc_DeInit>
			Adc_Init();
 800936a:	f000 f895 	bl	8009498 <Adc_Init>
			break;
 800936e:	e00a      	b.n	8009386 <HAL_ADC_ErrorCallback+0x6e>
		case HAL_ADC_ERROR_DMA:
			SystemManager_Fault[ADC_ERROR_DMA]++;
 8009370:	4b08      	ldr	r3, [pc, #32]	; (8009394 <HAL_ADC_ErrorCallback+0x7c>)
 8009372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009374:	3301      	adds	r3, #1
 8009376:	4a07      	ldr	r2, [pc, #28]	; (8009394 <HAL_ADC_ErrorCallback+0x7c>)
 8009378:	6413      	str	r3, [r2, #64]	; 0x40
			Adc_DeInit();
 800937a:	f000 f883 	bl	8009484 <Adc_DeInit>
			Adc_Init();
 800937e:	f000 f88b 	bl	8009498 <Adc_Init>
			break;
 8009382:	e000      	b.n	8009386 <HAL_ADC_ErrorCallback+0x6e>
		default:
			break;
 8009384:	bf00      	nop
	}
}
 8009386:	bf00      	nop
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	2000012c 	.word	0x2000012c
 8009394:	200089c8 	.word	0x200089c8

08009398 <Adc_MainFunction>:
/***********************************************************************************
* Function: Adc_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Adc_MainFunction()
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
	/* Local variable to store the error status. */
	uint32 statusValue = STD_LOW;
 800939e:	2300      	movs	r3, #0
 80093a0:	607b      	str	r3, [r7, #4]
	/* Get error status. */
	statusValue = HAL_ADC_GetState(&hadc1);
 80093a2:	4836      	ldr	r0, [pc, #216]	; (800947c <Adc_MainFunction+0xe4>)
 80093a4:	f7fb fa4a 	bl	800483c <HAL_ADC_GetState>
 80093a8:	6078      	str	r0, [r7, #4]

	/* Process module states. */
	switch(statusValue)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b0:	d049      	beq.n	8009446 <Adc_MainFunction+0xae>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b8:	d85a      	bhi.n	8009470 <Adc_MainFunction+0xd8>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b10      	cmp	r3, #16
 80093be:	d827      	bhi.n	8009410 <Adc_MainFunction+0x78>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b10      	cmp	r3, #16
 80093c4:	d854      	bhi.n	8009470 <Adc_MainFunction+0xd8>
 80093c6:	a201      	add	r2, pc, #4	; (adr r2, 80093cc <Adc_MainFunction+0x34>)
 80093c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093cc:	0800941b 	.word	0x0800941b
 80093d0:	08009429 	.word	0x08009429
 80093d4:	08009433 	.word	0x08009433
 80093d8:	08009471 	.word	0x08009471
 80093dc:	08009451 	.word	0x08009451
 80093e0:	08009471 	.word	0x08009471
 80093e4:	08009471 	.word	0x08009471
 80093e8:	08009471 	.word	0x08009471
 80093ec:	08009471 	.word	0x08009471
 80093f0:	08009471 	.word	0x08009471
 80093f4:	08009471 	.word	0x08009471
 80093f8:	08009471 	.word	0x08009471
 80093fc:	08009471 	.word	0x08009471
 8009400:	08009471 	.word	0x08009471
 8009404:	08009471 	.word	0x08009471
 8009408:	08009471 	.word	0x08009471
 800940c:	08009461 	.word	0x08009461
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009416:	d011      	beq.n	800943c <Adc_MainFunction+0xa4>
		case HAL_ADC_STATE_ERROR:
			Adc_BswState = statusValue;
			HAL_ADC_ErrorCallback(&hadc1);
			break;
		default:
			break;
 8009418:	e02a      	b.n	8009470 <Adc_MainFunction+0xd8>
			Adc_BswState = statusValue;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	b2da      	uxtb	r2, r3
 800941e:	4b18      	ldr	r3, [pc, #96]	; (8009480 <Adc_MainFunction+0xe8>)
 8009420:	701a      	strb	r2, [r3, #0]
			Adc_Init();
 8009422:	f000 f839 	bl	8009498 <Adc_Init>
			break;
 8009426:	e024      	b.n	8009472 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	b2da      	uxtb	r2, r3
 800942c:	4b14      	ldr	r3, [pc, #80]	; (8009480 <Adc_MainFunction+0xe8>)
 800942e:	701a      	strb	r2, [r3, #0]
			break;
 8009430:	e01f      	b.n	8009472 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	b2da      	uxtb	r2, r3
 8009436:	4b12      	ldr	r3, [pc, #72]	; (8009480 <Adc_MainFunction+0xe8>)
 8009438:	701a      	strb	r2, [r3, #0]
			break;
 800943a:	e01a      	b.n	8009472 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	b2da      	uxtb	r2, r3
 8009440:	4b0f      	ldr	r3, [pc, #60]	; (8009480 <Adc_MainFunction+0xe8>)
 8009442:	701a      	strb	r2, [r3, #0]
			break;
 8009444:	e015      	b.n	8009472 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	b2da      	uxtb	r2, r3
 800944a:	4b0d      	ldr	r3, [pc, #52]	; (8009480 <Adc_MainFunction+0xe8>)
 800944c:	701a      	strb	r2, [r3, #0]
			break;
 800944e:	e010      	b.n	8009472 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	b2da      	uxtb	r2, r3
 8009454:	4b0a      	ldr	r3, [pc, #40]	; (8009480 <Adc_MainFunction+0xe8>)
 8009456:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 8009458:	4808      	ldr	r0, [pc, #32]	; (800947c <Adc_MainFunction+0xe4>)
 800945a:	f7ff ff5d 	bl	8009318 <HAL_ADC_ErrorCallback>
			break;
 800945e:	e008      	b.n	8009472 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	b2da      	uxtb	r2, r3
 8009464:	4b06      	ldr	r3, [pc, #24]	; (8009480 <Adc_MainFunction+0xe8>)
 8009466:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 8009468:	4804      	ldr	r0, [pc, #16]	; (800947c <Adc_MainFunction+0xe4>)
 800946a:	f7ff ff55 	bl	8009318 <HAL_ADC_ErrorCallback>
			break;
 800946e:	e000      	b.n	8009472 <Adc_MainFunction+0xda>
			break;
 8009470:	bf00      	nop
	}
}
 8009472:	bf00      	nop
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	2000012c 	.word	0x2000012c
 8009480:	200006ac 	.word	0x200006ac

08009484 <Adc_DeInit>:
/***********************************************************************************
* Function: Adc_DeInit										   					   *
* Description: De-initialize the peripheral.									   *
************************************************************************************/
StdReturnType Adc_DeInit()
{
 8009484:	b580      	push	{r7, lr}
 8009486:	af00      	add	r7, sp, #0
	/* Call for de-intialization function. */
	HAL_ADC_DeInit(&hadc1);
 8009488:	4802      	ldr	r0, [pc, #8]	; (8009494 <Adc_DeInit+0x10>)
 800948a:	f7fa fdf1 	bl	8004070 <HAL_ADC_DeInit>
	return E_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	bd80      	pop	{r7, pc}
 8009494:	2000012c 	.word	0x2000012c

08009498 <Adc_Init>:
/***********************************************************************************
* Function: Adc_Init										   					   *
* Description: Initialize the protocol.									       	   *
************************************************************************************/
StdReturnType Adc_Init()
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b08a      	sub	sp, #40	; 0x28
 800949c:	af00      	add	r7, sp, #0
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800949e:	f107 0310 	add.w	r3, r7, #16
 80094a2:	2200      	movs	r2, #0
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	605a      	str	r2, [r3, #4]
 80094a8:	609a      	str	r2, [r3, #8]
 80094aa:	60da      	str	r2, [r3, #12]
 80094ac:	611a      	str	r2, [r3, #16]
 80094ae:	615a      	str	r2, [r3, #20]
	ADC_ChannelConfTypeDef sConfig = {0};
 80094b0:	463b      	mov	r3, r7
 80094b2:	2200      	movs	r2, #0
 80094b4:	601a      	str	r2, [r3, #0]
 80094b6:	605a      	str	r2, [r3, #4]
 80094b8:	609a      	str	r2, [r3, #8]
 80094ba:	60da      	str	r2, [r3, #12]
	hadc1.Instance = ADC1;
 80094bc:	4b40      	ldr	r3, [pc, #256]	; (80095c0 <Adc_Init+0x128>)
 80094be:	4a41      	ldr	r2, [pc, #260]	; (80095c4 <Adc_Init+0x12c>)
 80094c0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80094c2:	4b3f      	ldr	r3, [pc, #252]	; (80095c0 <Adc_Init+0x128>)
 80094c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80094c8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80094ca:	4b3d      	ldr	r3, [pc, #244]	; (80095c0 <Adc_Init+0x128>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80094d0:	4b3b      	ldr	r3, [pc, #236]	; (80095c0 <Adc_Init+0x128>)
 80094d2:	2201      	movs	r2, #1
 80094d4:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80094d6:	4b3a      	ldr	r3, [pc, #232]	; (80095c0 <Adc_Init+0x128>)
 80094d8:	2201      	movs	r2, #1
 80094da:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80094dc:	4b38      	ldr	r3, [pc, #224]	; (80095c0 <Adc_Init+0x128>)
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80094e4:	4b36      	ldr	r3, [pc, #216]	; (80095c0 <Adc_Init+0x128>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80094ea:	4b35      	ldr	r3, [pc, #212]	; (80095c0 <Adc_Init+0x128>)
 80094ec:	4a36      	ldr	r2, [pc, #216]	; (80095c8 <Adc_Init+0x130>)
 80094ee:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80094f0:	4b33      	ldr	r3, [pc, #204]	; (80095c0 <Adc_Init+0x128>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 3;
 80094f6:	4b32      	ldr	r3, [pc, #200]	; (80095c0 <Adc_Init+0x128>)
 80094f8:	2203      	movs	r2, #3
 80094fa:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80094fc:	4b30      	ldr	r3, [pc, #192]	; (80095c0 <Adc_Init+0x128>)
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009504:	4b2e      	ldr	r3, [pc, #184]	; (80095c0 <Adc_Init+0x128>)
 8009506:	2201      	movs	r2, #1
 8009508:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800950a:	482d      	ldr	r0, [pc, #180]	; (80095c0 <Adc_Init+0x128>)
 800950c:	f7fa fd4a 	bl	8003fa4 <HAL_ADC_Init>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d002      	beq.n	800951c <Adc_Init+0x84>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8009516:	482a      	ldr	r0, [pc, #168]	; (80095c0 <Adc_Init+0x128>)
 8009518:	f7ff fefe 	bl	8009318 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800951c:	4b2b      	ldr	r3, [pc, #172]	; (80095cc <Adc_Init+0x134>)
 800951e:	613b      	str	r3, [r7, #16]
	AnalogWDGConfig.HighThreshold = 4095;
 8009520:	f640 73ff 	movw	r3, #4095	; 0xfff
 8009524:	617b      	str	r3, [r7, #20]
	AnalogWDGConfig.LowThreshold = 0;
 8009526:	2300      	movs	r3, #0
 8009528:	61bb      	str	r3, [r7, #24]
	AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800952a:	4b29      	ldr	r3, [pc, #164]	; (80095d0 <Adc_Init+0x138>)
 800952c:	61fb      	str	r3, [r7, #28]
	AnalogWDGConfig.ITMode = ENABLE;
 800952e:	2301      	movs	r3, #1
 8009530:	f887 3020 	strb.w	r3, [r7, #32]
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8009534:	f107 0310 	add.w	r3, r7, #16
 8009538:	4619      	mov	r1, r3
 800953a:	4821      	ldr	r0, [pc, #132]	; (80095c0 <Adc_Init+0x128>)
 800953c:	f7fb f91e 	bl	800477c <HAL_ADC_AnalogWDGConfig>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d002      	beq.n	800954c <Adc_Init+0xb4>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8009546:	481e      	ldr	r0, [pc, #120]	; (80095c0 <Adc_Init+0x128>)
 8009548:	f7ff fee6 	bl	8009318 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_13;
 800954c:	230d      	movs	r3, #13
 800954e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8009550:	2301      	movs	r3, #1
 8009552:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8009554:	2307      	movs	r3, #7
 8009556:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009558:	463b      	mov	r3, r7
 800955a:	4619      	mov	r1, r3
 800955c:	4818      	ldr	r0, [pc, #96]	; (80095c0 <Adc_Init+0x128>)
 800955e:	f7fa ffdb 	bl	8004518 <HAL_ADC_ConfigChannel>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d002      	beq.n	800956e <Adc_Init+0xd6>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8009568:	4815      	ldr	r0, [pc, #84]	; (80095c0 <Adc_Init+0x128>)
 800956a:	f7ff fed5 	bl	8009318 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_12;
 800956e:	230c      	movs	r3, #12
 8009570:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8009572:	2302      	movs	r3, #2
 8009574:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009576:	463b      	mov	r3, r7
 8009578:	4619      	mov	r1, r3
 800957a:	4811      	ldr	r0, [pc, #68]	; (80095c0 <Adc_Init+0x128>)
 800957c:	f7fa ffcc 	bl	8004518 <HAL_ADC_ConfigChannel>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d002      	beq.n	800958c <Adc_Init+0xf4>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8009586:	480e      	ldr	r0, [pc, #56]	; (80095c0 <Adc_Init+0x128>)
 8009588:	f7ff fec6 	bl	8009318 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800958c:	4b10      	ldr	r3, [pc, #64]	; (80095d0 <Adc_Init+0x138>)
 800958e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8009590:	2303      	movs	r3, #3
 8009592:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009594:	463b      	mov	r3, r7
 8009596:	4619      	mov	r1, r3
 8009598:	4809      	ldr	r0, [pc, #36]	; (80095c0 <Adc_Init+0x128>)
 800959a:	f7fa ffbd 	bl	8004518 <HAL_ADC_ConfigChannel>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <Adc_Init+0x112>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 80095a4:	4806      	ldr	r0, [pc, #24]	; (80095c0 <Adc_Init+0x128>)
 80095a6:	f7ff feb7 	bl	8009318 <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	HAL_ADC_Start_DMA(&hadc1, Adc_ChannelOne_Buffer, ADC_BUFFER_LENGTH);
 80095aa:	2203      	movs	r2, #3
 80095ac:	4909      	ldr	r1, [pc, #36]	; (80095d4 <Adc_Init+0x13c>)
 80095ae:	4804      	ldr	r0, [pc, #16]	; (80095c0 <Adc_Init+0x128>)
 80095b0:	f7fa feae 	bl	8004310 <HAL_ADC_Start_DMA>
	return E_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3728      	adds	r7, #40	; 0x28
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	2000012c 	.word	0x2000012c
 80095c4:	40012000 	.word	0x40012000
 80095c8:	0f000001 	.word	0x0f000001
 80095cc:	00800200 	.word	0x00800200
 80095d0:	10000012 	.word	0x10000012
 80095d4:	200006b0 	.word	0x200006b0

080095d8 <Port_Init>:
/***********************************************************************************
* Function: Port_Init										       				   *
* Description: Initialize the peripheral.									 	   *
************************************************************************************/
StdReturnType Port_Init()
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80095dc:	f7f9 fd42 	bl	8003064 <MX_GPIO_Init>
	return E_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	bd80      	pop	{r7, pc}
	...

080095e8 <HAL_TIM_IC_CaptureCallback>:
/***********************************************************************************
* Function: HAL_TIM_IC_CaptureCallback										   	   *
* Description: Input capture callback to process information received.		 	   *
************************************************************************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
	/* If channel 3 requests. */
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	7f1b      	ldrb	r3, [r3, #28]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	f040 8081 	bne.w	80096fc <HAL_TIM_IC_CaptureCallback+0x114>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelThree == STD_LOW)
 80095fa:	4b87      	ldr	r3, [pc, #540]	; (8009818 <HAL_TIM_IC_CaptureCallback+0x230>)
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d11a      	bne.n	8009638 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8009602:	2100      	movs	r1, #0
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7fe f86d 	bl	80076e4 <HAL_TIM_ReadCapturedValue>
 800960a:	4603      	mov	r3, r0
 800960c:	4a83      	ldr	r2, [pc, #524]	; (800981c <HAL_TIM_IC_CaptureCallback+0x234>)
 800960e:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelThree = STD_HIGH;
 8009610:	4b81      	ldr	r3, [pc, #516]	; (8009818 <HAL_TIM_IC_CaptureCallback+0x230>)
 8009612:	2201      	movs	r2, #1
 8009614:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6a1a      	ldr	r2, [r3, #32]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f022 020a 	bic.w	r2, r2, #10
 8009624:	621a      	str	r2, [r3, #32]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	6a1a      	ldr	r2, [r3, #32]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f042 0202 	orr.w	r2, r2, #2
 8009634:	621a      	str	r2, [r3, #32]
 8009636:	e061      	b.n	80096fc <HAL_TIM_IC_CaptureCallback+0x114>
		}/* If the first input capture has been stored. */
		else if(Tim5_InputCaptureFlag_ChannelThree == STD_HIGH)
 8009638:	4b77      	ldr	r3, [pc, #476]	; (8009818 <HAL_TIM_IC_CaptureCallback+0x230>)
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d15d      	bne.n	80096fc <HAL_TIM_IC_CaptureCallback+0x114>
		{
			/* Store the second input capture. */
			Tim5_InputCompare_ValueTwo_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8009640:	2100      	movs	r1, #0
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7fe f84e 	bl	80076e4 <HAL_TIM_ReadCapturedValue>
 8009648:	4603      	mov	r3, r0
 800964a:	4a75      	ldr	r2, [pc, #468]	; (8009820 <HAL_TIM_IC_CaptureCallback+0x238>)
 800964c:	6013      	str	r3, [r2, #0]
			/* Set the timer counter to 0. */
			__HAL_TIM_SET_COUNTER(htim, 0);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2200      	movs	r2, #0
 8009654:	625a      	str	r2, [r3, #36]	; 0x24
			/* If the second input capture is greater than the first, then subtract the first one from the second one. */
			if (Tim5_InputCompare_ValueTwo_ChannelThree > Tim5_InputCompare_ValueOne_ChannelThree)
 8009656:	4b72      	ldr	r3, [pc, #456]	; (8009820 <HAL_TIM_IC_CaptureCallback+0x238>)
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	4b70      	ldr	r3, [pc, #448]	; (800981c <HAL_TIM_IC_CaptureCallback+0x234>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	429a      	cmp	r2, r3
 8009660:	d907      	bls.n	8009672 <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Tim5_Difference_ChannelThree = Tim5_InputCompare_ValueTwo_ChannelThree - Tim5_InputCompare_ValueOne_ChannelThree;
 8009662:	4b6f      	ldr	r3, [pc, #444]	; (8009820 <HAL_TIM_IC_CaptureCallback+0x238>)
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	4b6d      	ldr	r3, [pc, #436]	; (800981c <HAL_TIM_IC_CaptureCallback+0x234>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	4a6d      	ldr	r2, [pc, #436]	; (8009824 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800966e:	6013      	str	r3, [r2, #0]
 8009670:	e00d      	b.n	800968e <HAL_TIM_IC_CaptureCallback+0xa6>
			}/* Else subtract the first value from maximum uint32 value and add the second value. */
			else if(Tim5_InputCompare_ValueOne_ChannelThree > Tim5_InputCompare_ValueTwo_ChannelThree)
 8009672:	4b6a      	ldr	r3, [pc, #424]	; (800981c <HAL_TIM_IC_CaptureCallback+0x234>)
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	4b6a      	ldr	r3, [pc, #424]	; (8009820 <HAL_TIM_IC_CaptureCallback+0x238>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	429a      	cmp	r2, r3
 800967c:	d907      	bls.n	800968e <HAL_TIM_IC_CaptureCallback+0xa6>
			{
				Tim5_Difference_ChannelThree = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelThree) + Tim5_InputCompare_ValueTwo_ChannelThree;
 800967e:	4b68      	ldr	r3, [pc, #416]	; (8009820 <HAL_TIM_IC_CaptureCallback+0x238>)
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	4b66      	ldr	r3, [pc, #408]	; (800981c <HAL_TIM_IC_CaptureCallback+0x234>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	3b01      	subs	r3, #1
 800968a:	4a66      	ldr	r2, [pc, #408]	; (8009824 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800968c:	6013      	str	r3, [r2, #0]
			else
			{
				/* do nothing */
			}
			/* Calculate the distance the sound traveled between the first measurement and the second. */
			Tim5_CalculatedDistance_ChannelThree = Tim5_Difference_ChannelThree * 0.034 / 2;
 800968e:	4b65      	ldr	r3, [pc, #404]	; (8009824 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4618      	mov	r0, r3
 8009694:	f7f6 feee 	bl	8000474 <__aeabi_ui2d>
 8009698:	a35d      	add	r3, pc, #372	; (adr r3, 8009810 <HAL_TIM_IC_CaptureCallback+0x228>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f6 ff63 	bl	8000568 <__aeabi_dmul>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4610      	mov	r0, r2
 80096a8:	4619      	mov	r1, r3
 80096aa:	f04f 0200 	mov.w	r2, #0
 80096ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096b2:	f7f7 f883 	bl	80007bc <__aeabi_ddiv>
 80096b6:	4602      	mov	r2, r0
 80096b8:	460b      	mov	r3, r1
 80096ba:	4610      	mov	r0, r2
 80096bc:	4619      	mov	r1, r3
 80096be:	f7f7 f965 	bl	800098c <__aeabi_d2uiz>
 80096c2:	4603      	mov	r3, r0
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	4b58      	ldr	r3, [pc, #352]	; (8009828 <HAL_TIM_IC_CaptureCallback+0x240>)
 80096c8:	701a      	strb	r2, [r3, #0]
			/* Set the flag to low. */
			Tim5_InputCaptureFlag_ChannelThree = STD_LOW;
 80096ca:	4b53      	ldr	r3, [pc, #332]	; (8009818 <HAL_TIM_IC_CaptureCallback+0x230>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	6a1a      	ldr	r2, [r3, #32]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f022 020a 	bic.w	r2, r2, #10
 80096de:	621a      	str	r2, [r3, #32]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6a12      	ldr	r2, [r2, #32]
 80096ea:	621a      	str	r2, [r3, #32]
			/* Disable the interrupt for the timer 5 channel 3. */
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC1);
 80096ec:	4b4f      	ldr	r3, [pc, #316]	; (800982c <HAL_TIM_IC_CaptureCallback+0x244>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68da      	ldr	r2, [r3, #12]
 80096f2:	4b4e      	ldr	r3, [pc, #312]	; (800982c <HAL_TIM_IC_CaptureCallback+0x244>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f022 0202 	bic.w	r2, r2, #2
 80096fa:	60da      	str	r2, [r3, #12]
		{
			/* do nothing */
		}
	}
	/* If channel 4 requests. */
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	7f1b      	ldrb	r3, [r3, #28]
 8009700:	2b02      	cmp	r3, #2
 8009702:	f040 8081 	bne.w	8009808 <HAL_TIM_IC_CaptureCallback+0x220>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelFour == STD_LOW)
 8009706:	4b4a      	ldr	r3, [pc, #296]	; (8009830 <HAL_TIM_IC_CaptureCallback+0x248>)
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d11a      	bne.n	8009744 <HAL_TIM_IC_CaptureCallback+0x15c>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800970e:	2104      	movs	r1, #4
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7fd ffe7 	bl	80076e4 <HAL_TIM_ReadCapturedValue>
 8009716:	4603      	mov	r3, r0
 8009718:	4a46      	ldr	r2, [pc, #280]	; (8009834 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800971a:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelFour = STD_HIGH;
 800971c:	4b44      	ldr	r3, [pc, #272]	; (8009830 <HAL_TIM_IC_CaptureCallback+0x248>)
 800971e:	2201      	movs	r2, #1
 8009720:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	6a1a      	ldr	r2, [r3, #32]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009730:	621a      	str	r2, [r3, #32]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6a1a      	ldr	r2, [r3, #32]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f042 0220 	orr.w	r2, r2, #32
 8009740:	621a      	str	r2, [r3, #32]
	}
	else
	{
		/* do nothing */
	}
}
 8009742:	e061      	b.n	8009808 <HAL_TIM_IC_CaptureCallback+0x220>
		else if(Tim5_InputCaptureFlag_ChannelFour == STD_HIGH)
 8009744:	4b3a      	ldr	r3, [pc, #232]	; (8009830 <HAL_TIM_IC_CaptureCallback+0x248>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d15d      	bne.n	8009808 <HAL_TIM_IC_CaptureCallback+0x220>
			Tim5_InputCompare_ValueTwo_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800974c:	2104      	movs	r1, #4
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7fd ffc8 	bl	80076e4 <HAL_TIM_ReadCapturedValue>
 8009754:	4603      	mov	r3, r0
 8009756:	4a38      	ldr	r2, [pc, #224]	; (8009838 <HAL_TIM_IC_CaptureCallback+0x250>)
 8009758:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2200      	movs	r2, #0
 8009760:	625a      	str	r2, [r3, #36]	; 0x24
			if (Tim5_InputCompare_ValueTwo_ChannelFour > Tim5_InputCompare_ValueOne_ChannelFour)
 8009762:	4b35      	ldr	r3, [pc, #212]	; (8009838 <HAL_TIM_IC_CaptureCallback+0x250>)
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	4b33      	ldr	r3, [pc, #204]	; (8009834 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	429a      	cmp	r2, r3
 800976c:	d907      	bls.n	800977e <HAL_TIM_IC_CaptureCallback+0x196>
				Tim5_Difference_ChannelFour = Tim5_InputCompare_ValueTwo_ChannelFour - Tim5_InputCompare_ValueOne_ChannelFour;
 800976e:	4b32      	ldr	r3, [pc, #200]	; (8009838 <HAL_TIM_IC_CaptureCallback+0x250>)
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	4b30      	ldr	r3, [pc, #192]	; (8009834 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	4a30      	ldr	r2, [pc, #192]	; (800983c <HAL_TIM_IC_CaptureCallback+0x254>)
 800977a:	6013      	str	r3, [r2, #0]
 800977c:	e00d      	b.n	800979a <HAL_TIM_IC_CaptureCallback+0x1b2>
			else if(Tim5_InputCompare_ValueOne_ChannelFour > Tim5_InputCompare_ValueTwo_ChannelFour)
 800977e:	4b2d      	ldr	r3, [pc, #180]	; (8009834 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	4b2d      	ldr	r3, [pc, #180]	; (8009838 <HAL_TIM_IC_CaptureCallback+0x250>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	429a      	cmp	r2, r3
 8009788:	d907      	bls.n	800979a <HAL_TIM_IC_CaptureCallback+0x1b2>
				Tim5_Difference_ChannelFour = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelFour) + Tim5_InputCompare_ValueTwo_ChannelFour;
 800978a:	4b2b      	ldr	r3, [pc, #172]	; (8009838 <HAL_TIM_IC_CaptureCallback+0x250>)
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	4b29      	ldr	r3, [pc, #164]	; (8009834 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	3b01      	subs	r3, #1
 8009796:	4a29      	ldr	r2, [pc, #164]	; (800983c <HAL_TIM_IC_CaptureCallback+0x254>)
 8009798:	6013      	str	r3, [r2, #0]
			Tim5_CalculatedDistance_ChannelFour = Tim5_Difference_ChannelFour * 0.034 / 2;
 800979a:	4b28      	ldr	r3, [pc, #160]	; (800983c <HAL_TIM_IC_CaptureCallback+0x254>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4618      	mov	r0, r3
 80097a0:	f7f6 fe68 	bl	8000474 <__aeabi_ui2d>
 80097a4:	a31a      	add	r3, pc, #104	; (adr r3, 8009810 <HAL_TIM_IC_CaptureCallback+0x228>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	f7f6 fedd 	bl	8000568 <__aeabi_dmul>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	4610      	mov	r0, r2
 80097b4:	4619      	mov	r1, r3
 80097b6:	f04f 0200 	mov.w	r2, #0
 80097ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097be:	f7f6 fffd 	bl	80007bc <__aeabi_ddiv>
 80097c2:	4602      	mov	r2, r0
 80097c4:	460b      	mov	r3, r1
 80097c6:	4610      	mov	r0, r2
 80097c8:	4619      	mov	r1, r3
 80097ca:	f7f7 f8df 	bl	800098c <__aeabi_d2uiz>
 80097ce:	4603      	mov	r3, r0
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	4b1b      	ldr	r3, [pc, #108]	; (8009840 <HAL_TIM_IC_CaptureCallback+0x258>)
 80097d4:	701a      	strb	r2, [r3, #0]
			Tim5_InputCaptureFlag_ChannelFour = 0;
 80097d6:	4b16      	ldr	r3, [pc, #88]	; (8009830 <HAL_TIM_IC_CaptureCallback+0x248>)
 80097d8:	2200      	movs	r2, #0
 80097da:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6a1a      	ldr	r2, [r3, #32]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80097ea:	621a      	str	r2, [r3, #32]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6a12      	ldr	r2, [r2, #32]
 80097f6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
 80097f8:	4b0c      	ldr	r3, [pc, #48]	; (800982c <HAL_TIM_IC_CaptureCallback+0x244>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68da      	ldr	r2, [r3, #12]
 80097fe:	4b0b      	ldr	r3, [pc, #44]	; (800982c <HAL_TIM_IC_CaptureCallback+0x244>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f022 0204 	bic.w	r2, r2, #4
 8009806:	60da      	str	r2, [r3, #12]
}
 8009808:	bf00      	nop
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	b020c49c 	.word	0xb020c49c
 8009814:	3fa16872 	.word	0x3fa16872
 8009818:	200006cc 	.word	0x200006cc
 800981c:	200006c0 	.word	0x200006c0
 8009820:	200006c4 	.word	0x200006c4
 8009824:	200006c8 	.word	0x200006c8
 8009828:	200006cd 	.word	0x200006cd
 800982c:	2000056c 	.word	0x2000056c
 8009830:	200006dc 	.word	0x200006dc
 8009834:	200006d0 	.word	0x200006d0
 8009838:	200006d4 	.word	0x200006d4
 800983c:	200006d8 	.word	0x200006d8
 8009840:	200006dd 	.word	0x200006dd

08009844 <Tim_Init>:
/***********************************************************************************
* Function: Tim_Init										   			           *
* Description: Peripheral initialization.									       *
************************************************************************************/
StdReturnType Tim_Init(uint8 TimerChannel)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	71fb      	strb	r3, [r7, #7]
	/* Set the timer channel value into a local variable. */
	uint8 localValue = TimerChannel;
 800984e:	79fb      	ldrb	r3, [r7, #7]
 8009850:	73fb      	strb	r3, [r7, #15]
	switch(localValue)
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	3b02      	subs	r3, #2
 8009856:	2b03      	cmp	r3, #3
 8009858:	f200 81f4 	bhi.w	8009c44 <Tim_Init+0x400>
 800985c:	a201      	add	r2, pc, #4	; (adr r2, 8009864 <Tim_Init+0x20>)
 800985e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009862:	bf00      	nop
 8009864:	08009875 	.word	0x08009875
 8009868:	08009961 	.word	0x08009961
 800986c:	08009a85 	.word	0x08009a85
 8009870:	08009b5b 	.word	0x08009b5b
	{
		/* Initialize the timer two. */
		case TIMER_TWO:
			/* Configure the timer parameters. */
			htim2.Instance = TIM2;
 8009874:	4b7a      	ldr	r3, [pc, #488]	; (8009a60 <Tim_Init+0x21c>)
 8009876:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800987a:	601a      	str	r2, [r3, #0]
			htim2.Init.Prescaler = 1000-1;
 800987c:	4b78      	ldr	r3, [pc, #480]	; (8009a60 <Tim_Init+0x21c>)
 800987e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009882:	605a      	str	r2, [r3, #4]
			htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009884:	4b76      	ldr	r3, [pc, #472]	; (8009a60 <Tim_Init+0x21c>)
 8009886:	2200      	movs	r2, #0
 8009888:	609a      	str	r2, [r3, #8]
			htim2.Init.Period = 2000-1;
 800988a:	4b75      	ldr	r3, [pc, #468]	; (8009a60 <Tim_Init+0x21c>)
 800988c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8009890:	60da      	str	r2, [r3, #12]
			htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009892:	4b73      	ldr	r3, [pc, #460]	; (8009a60 <Tim_Init+0x21c>)
 8009894:	2200      	movs	r2, #0
 8009896:	611a      	str	r2, [r3, #16]
			htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009898:	4b71      	ldr	r3, [pc, #452]	; (8009a60 <Tim_Init+0x21c>)
 800989a:	2200      	movs	r2, #0
 800989c:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800989e:	4870      	ldr	r0, [pc, #448]	; (8009a60 <Tim_Init+0x21c>)
 80098a0:	f7fc ff7e 	bl	80067a0 <HAL_TIM_Base_Init>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d002      	beq.n	80098b0 <Tim_Init+0x6c>
			{
				HAL_TIM_ErrorCallback(&htim2);
 80098aa:	486d      	ldr	r0, [pc, #436]	; (8009a60 <Tim_Init+0x21c>)
 80098ac:	f000 fa1c 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the timer clock source. */
			sClockSourceConfig2.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80098b0:	4b6c      	ldr	r3, [pc, #432]	; (8009a64 <Tim_Init+0x220>)
 80098b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80098b6:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig2) != HAL_OK)
 80098b8:	496a      	ldr	r1, [pc, #424]	; (8009a64 <Tim_Init+0x220>)
 80098ba:	4869      	ldr	r0, [pc, #420]	; (8009a60 <Tim_Init+0x21c>)
 80098bc:	f7fd fe4a 	bl	8007554 <HAL_TIM_ConfigClockSource>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d002      	beq.n	80098cc <Tim_Init+0x88>
			{
				HAL_TIM_ErrorCallback(&htim2);
 80098c6:	4866      	ldr	r0, [pc, #408]	; (8009a60 <Tim_Init+0x21c>)
 80098c8:	f000 fa0e 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80098cc:	4864      	ldr	r0, [pc, #400]	; (8009a60 <Tim_Init+0x21c>)
 80098ce:	f7fd f825 	bl	800691c <HAL_TIM_PWM_Init>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d002      	beq.n	80098de <Tim_Init+0x9a>
			{
				HAL_TIM_ErrorCallback(&htim2);
 80098d8:	4861      	ldr	r0, [pc, #388]	; (8009a60 <Tim_Init+0x21c>)
 80098da:	f000 fa05 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the master slave mode and output trigger. */
			sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 80098de:	4b62      	ldr	r3, [pc, #392]	; (8009a68 <Tim_Init+0x224>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	601a      	str	r2, [r3, #0]
			sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80098e4:	4b60      	ldr	r3, [pc, #384]	; (8009a68 <Tim_Init+0x224>)
 80098e6:	2200      	movs	r2, #0
 80098e8:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig2) != HAL_OK)
 80098ea:	495f      	ldr	r1, [pc, #380]	; (8009a68 <Tim_Init+0x224>)
 80098ec:	485c      	ldr	r0, [pc, #368]	; (8009a60 <Tim_Init+0x21c>)
 80098ee:	f7fe fbd3 	bl	8008098 <HAL_TIMEx_MasterConfigSynchronization>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <Tim_Init+0xba>
			{
				HAL_TIM_ErrorCallback(&htim2);
 80098f8:	4859      	ldr	r0, [pc, #356]	; (8009a60 <Tim_Init+0x21c>)
 80098fa:	f000 f9f5 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the PWM parameters. */
			sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 80098fe:	4b5b      	ldr	r3, [pc, #364]	; (8009a6c <Tim_Init+0x228>)
 8009900:	2260      	movs	r2, #96	; 0x60
 8009902:	601a      	str	r2, [r3, #0]
			sConfigOC2.Pulse = 0;
 8009904:	4b59      	ldr	r3, [pc, #356]	; (8009a6c <Tim_Init+0x228>)
 8009906:	2200      	movs	r2, #0
 8009908:	605a      	str	r2, [r3, #4]
			sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 800990a:	4b58      	ldr	r3, [pc, #352]	; (8009a6c <Tim_Init+0x228>)
 800990c:	2200      	movs	r2, #0
 800990e:	609a      	str	r2, [r3, #8]
			sConfigOC2.OCFastMode = TIM_OCFAST_ENABLE;
 8009910:	4b56      	ldr	r3, [pc, #344]	; (8009a6c <Tim_Init+0x228>)
 8009912:	2204      	movs	r2, #4
 8009914:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_1) != HAL_OK)
 8009916:	2200      	movs	r2, #0
 8009918:	4954      	ldr	r1, [pc, #336]	; (8009a6c <Tim_Init+0x228>)
 800991a:	4851      	ldr	r0, [pc, #324]	; (8009a60 <Tim_Init+0x21c>)
 800991c:	f7fd fd58 	bl	80073d0 <HAL_TIM_PWM_ConfigChannel>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <Tim_Init+0xe8>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8009926:	484e      	ldr	r0, [pc, #312]	; (8009a60 <Tim_Init+0x21c>)
 8009928:	f000 f9de 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_2) != HAL_OK)
 800992c:	2204      	movs	r2, #4
 800992e:	494f      	ldr	r1, [pc, #316]	; (8009a6c <Tim_Init+0x228>)
 8009930:	484b      	ldr	r0, [pc, #300]	; (8009a60 <Tim_Init+0x21c>)
 8009932:	f7fd fd4d 	bl	80073d0 <HAL_TIM_PWM_ConfigChannel>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d002      	beq.n	8009942 <Tim_Init+0xfe>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800993c:	4848      	ldr	r0, [pc, #288]	; (8009a60 <Tim_Init+0x21c>)
 800993e:	f000 f9d3 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_3) != HAL_OK)
 8009942:	2208      	movs	r2, #8
 8009944:	4949      	ldr	r1, [pc, #292]	; (8009a6c <Tim_Init+0x228>)
 8009946:	4846      	ldr	r0, [pc, #280]	; (8009a60 <Tim_Init+0x21c>)
 8009948:	f7fd fd42 	bl	80073d0 <HAL_TIM_PWM_ConfigChannel>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <Tim_Init+0x114>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8009952:	4843      	ldr	r0, [pc, #268]	; (8009a60 <Tim_Init+0x21c>)
 8009954:	f000 f9c8 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the GPIO. */
			HAL_TIM_MspPostInit(&htim2);
 8009958:	4841      	ldr	r0, [pc, #260]	; (8009a60 <Tim_Init+0x21c>)
 800995a:	f7f9 fefd 	bl	8003758 <HAL_TIM_MspPostInit>

			break;
 800995e:	e174      	b.n	8009c4a <Tim_Init+0x406>
		/* Initialize the timer three. */
		case TIMER_THREE:
			/* Configure the timer parameters. */
			htim3.Instance = TIM3;
 8009960:	4b43      	ldr	r3, [pc, #268]	; (8009a70 <Tim_Init+0x22c>)
 8009962:	4a44      	ldr	r2, [pc, #272]	; (8009a74 <Tim_Init+0x230>)
 8009964:	601a      	str	r2, [r3, #0]
			htim3.Init.Prescaler = 1000-1;
 8009966:	4b42      	ldr	r3, [pc, #264]	; (8009a70 <Tim_Init+0x22c>)
 8009968:	f240 32e7 	movw	r2, #999	; 0x3e7
 800996c:	605a      	str	r2, [r3, #4]
			htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800996e:	4b40      	ldr	r3, [pc, #256]	; (8009a70 <Tim_Init+0x22c>)
 8009970:	2200      	movs	r2, #0
 8009972:	609a      	str	r2, [r3, #8]
			htim3.Init.Period = 2000-1;
 8009974:	4b3e      	ldr	r3, [pc, #248]	; (8009a70 <Tim_Init+0x22c>)
 8009976:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800997a:	60da      	str	r2, [r3, #12]
			htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800997c:	4b3c      	ldr	r3, [pc, #240]	; (8009a70 <Tim_Init+0x22c>)
 800997e:	2200      	movs	r2, #0
 8009980:	611a      	str	r2, [r3, #16]
			htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009982:	4b3b      	ldr	r3, [pc, #236]	; (8009a70 <Tim_Init+0x22c>)
 8009984:	2200      	movs	r2, #0
 8009986:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009988:	4839      	ldr	r0, [pc, #228]	; (8009a70 <Tim_Init+0x22c>)
 800998a:	f7fc ff09 	bl	80067a0 <HAL_TIM_Base_Init>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <Tim_Init+0x156>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009994:	4836      	ldr	r0, [pc, #216]	; (8009a70 <Tim_Init+0x22c>)
 8009996:	f000 f9a7 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Set the clock source. */
			sClockSourceConfig3.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800999a:	4b37      	ldr	r3, [pc, #220]	; (8009a78 <Tim_Init+0x234>)
 800999c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80099a0:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig3) != HAL_OK)
 80099a2:	4935      	ldr	r1, [pc, #212]	; (8009a78 <Tim_Init+0x234>)
 80099a4:	4832      	ldr	r0, [pc, #200]	; (8009a70 <Tim_Init+0x22c>)
 80099a6:	f7fd fdd5 	bl	8007554 <HAL_TIM_ConfigClockSource>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <Tim_Init+0x172>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 80099b0:	482f      	ldr	r0, [pc, #188]	; (8009a70 <Tim_Init+0x22c>)
 80099b2:	f000 f999 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80099b6:	482e      	ldr	r0, [pc, #184]	; (8009a70 <Tim_Init+0x22c>)
 80099b8:	f7fc ffb0 	bl	800691c <HAL_TIM_PWM_Init>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d002      	beq.n	80099c8 <Tim_Init+0x184>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 80099c2:	482b      	ldr	r0, [pc, #172]	; (8009a70 <Tim_Init+0x22c>)
 80099c4:	f000 f990 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure master slave mode. */
			sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 80099c8:	4b2c      	ldr	r3, [pc, #176]	; (8009a7c <Tim_Init+0x238>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	601a      	str	r2, [r3, #0]
			sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099ce:	4b2b      	ldr	r3, [pc, #172]	; (8009a7c <Tim_Init+0x238>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig3) != HAL_OK)
 80099d4:	4929      	ldr	r1, [pc, #164]	; (8009a7c <Tim_Init+0x238>)
 80099d6:	4826      	ldr	r0, [pc, #152]	; (8009a70 <Tim_Init+0x22c>)
 80099d8:	f7fe fb5e 	bl	8008098 <HAL_TIMEx_MasterConfigSynchronization>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d002      	beq.n	80099e8 <Tim_Init+0x1a4>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 80099e2:	4823      	ldr	r0, [pc, #140]	; (8009a70 <Tim_Init+0x22c>)
 80099e4:	f000 f980 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure PWM parameters. */
			sConfigOC3.OCMode = TIM_OCMODE_PWM1;
 80099e8:	4b25      	ldr	r3, [pc, #148]	; (8009a80 <Tim_Init+0x23c>)
 80099ea:	2260      	movs	r2, #96	; 0x60
 80099ec:	601a      	str	r2, [r3, #0]
			sConfigOC3.Pulse = 0;
 80099ee:	4b24      	ldr	r3, [pc, #144]	; (8009a80 <Tim_Init+0x23c>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	605a      	str	r2, [r3, #4]
			sConfigOC3.OCPolarity = TIM_OCPOLARITY_HIGH;
 80099f4:	4b22      	ldr	r3, [pc, #136]	; (8009a80 <Tim_Init+0x23c>)
 80099f6:	2200      	movs	r2, #0
 80099f8:	609a      	str	r2, [r3, #8]
			sConfigOC3.OCFastMode = TIM_OCFAST_ENABLE;
 80099fa:	4b21      	ldr	r3, [pc, #132]	; (8009a80 <Tim_Init+0x23c>)
 80099fc:	2204      	movs	r2, #4
 80099fe:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_1) != HAL_OK)
 8009a00:	2200      	movs	r2, #0
 8009a02:	491f      	ldr	r1, [pc, #124]	; (8009a80 <Tim_Init+0x23c>)
 8009a04:	481a      	ldr	r0, [pc, #104]	; (8009a70 <Tim_Init+0x22c>)
 8009a06:	f7fd fce3 	bl	80073d0 <HAL_TIM_PWM_ConfigChannel>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d002      	beq.n	8009a16 <Tim_Init+0x1d2>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009a10:	4817      	ldr	r0, [pc, #92]	; (8009a70 <Tim_Init+0x22c>)
 8009a12:	f000 f969 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_2) != HAL_OK)
 8009a16:	2204      	movs	r2, #4
 8009a18:	4919      	ldr	r1, [pc, #100]	; (8009a80 <Tim_Init+0x23c>)
 8009a1a:	4815      	ldr	r0, [pc, #84]	; (8009a70 <Tim_Init+0x22c>)
 8009a1c:	f7fd fcd8 	bl	80073d0 <HAL_TIM_PWM_ConfigChannel>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d002      	beq.n	8009a2c <Tim_Init+0x1e8>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009a26:	4812      	ldr	r0, [pc, #72]	; (8009a70 <Tim_Init+0x22c>)
 8009a28:	f000 f95e 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_3) != HAL_OK)
 8009a2c:	2208      	movs	r2, #8
 8009a2e:	4914      	ldr	r1, [pc, #80]	; (8009a80 <Tim_Init+0x23c>)
 8009a30:	480f      	ldr	r0, [pc, #60]	; (8009a70 <Tim_Init+0x22c>)
 8009a32:	f7fd fccd 	bl	80073d0 <HAL_TIM_PWM_ConfigChannel>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d002      	beq.n	8009a42 <Tim_Init+0x1fe>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009a3c:	480c      	ldr	r0, [pc, #48]	; (8009a70 <Tim_Init+0x22c>)
 8009a3e:	f000 f953 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_4) != HAL_OK)
 8009a42:	220c      	movs	r2, #12
 8009a44:	490e      	ldr	r1, [pc, #56]	; (8009a80 <Tim_Init+0x23c>)
 8009a46:	480a      	ldr	r0, [pc, #40]	; (8009a70 <Tim_Init+0x22c>)
 8009a48:	f7fd fcc2 	bl	80073d0 <HAL_TIM_PWM_ConfigChannel>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d002      	beq.n	8009a58 <Tim_Init+0x214>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009a52:	4807      	ldr	r0, [pc, #28]	; (8009a70 <Tim_Init+0x22c>)
 8009a54:	f000 f948 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure timer GPIO. */
			HAL_TIM_MspPostInit(&htim3);
 8009a58:	4805      	ldr	r0, [pc, #20]	; (8009a70 <Tim_Init+0x22c>)
 8009a5a:	f7f9 fe7d 	bl	8003758 <HAL_TIM_MspPostInit>
			break;
 8009a5e:	e0f4      	b.n	8009c4a <Tim_Init+0x406>
 8009a60:	20000350 	.word	0x20000350
 8009a64:	200006e0 	.word	0x200006e0
 8009a68:	200006f0 	.word	0x200006f0
 8009a6c:	200006f8 	.word	0x200006f8
 8009a70:	20000404 	.word	0x20000404
 8009a74:	40000400 	.word	0x40000400
 8009a78:	2000074c 	.word	0x2000074c
 8009a7c:	2000075c 	.word	0x2000075c
 8009a80:	20000714 	.word	0x20000714
		/* Initialize the timer four. */
		case TIMER_FOUR:
			/* Configure timer parameters. */
			htim4.Instance = TIM4;
 8009a84:	4b73      	ldr	r3, [pc, #460]	; (8009c54 <Tim_Init+0x410>)
 8009a86:	4a74      	ldr	r2, [pc, #464]	; (8009c58 <Tim_Init+0x414>)
 8009a88:	601a      	str	r2, [r3, #0]
			htim4.Init.Prescaler = 10000-1;
 8009a8a:	4b72      	ldr	r3, [pc, #456]	; (8009c54 <Tim_Init+0x410>)
 8009a8c:	f242 720f 	movw	r2, #9999	; 0x270f
 8009a90:	605a      	str	r2, [r3, #4]
			htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a92:	4b70      	ldr	r3, [pc, #448]	; (8009c54 <Tim_Init+0x410>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	609a      	str	r2, [r3, #8]
			htim4.Init.Period = 1000-1;
 8009a98:	4b6e      	ldr	r3, [pc, #440]	; (8009c54 <Tim_Init+0x410>)
 8009a9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009a9e:	60da      	str	r2, [r3, #12]
			htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009aa0:	4b6c      	ldr	r3, [pc, #432]	; (8009c54 <Tim_Init+0x410>)
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	611a      	str	r2, [r3, #16]
			htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009aa6:	4b6b      	ldr	r3, [pc, #428]	; (8009c54 <Tim_Init+0x410>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009aac:	4869      	ldr	r0, [pc, #420]	; (8009c54 <Tim_Init+0x410>)
 8009aae:	f7fc fe77 	bl	80067a0 <HAL_TIM_Base_Init>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <Tim_Init+0x27a>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009ab8:	4866      	ldr	r0, [pc, #408]	; (8009c54 <Tim_Init+0x410>)
 8009aba:	f000 f915 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the clock source. */
			sClockSourceConfig4.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009abe:	4b67      	ldr	r3, [pc, #412]	; (8009c5c <Tim_Init+0x418>)
 8009ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009ac4:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig4) != HAL_OK)
 8009ac6:	4965      	ldr	r1, [pc, #404]	; (8009c5c <Tim_Init+0x418>)
 8009ac8:	4862      	ldr	r0, [pc, #392]	; (8009c54 <Tim_Init+0x410>)
 8009aca:	f7fd fd43 	bl	8007554 <HAL_TIM_ConfigClockSource>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d002      	beq.n	8009ada <Tim_Init+0x296>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009ad4:	485f      	ldr	r0, [pc, #380]	; (8009c54 <Tim_Init+0x410>)
 8009ad6:	f000 f907 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009ada:	485e      	ldr	r0, [pc, #376]	; (8009c54 <Tim_Init+0x410>)
 8009adc:	f7fc ff1e 	bl	800691c <HAL_TIM_PWM_Init>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d002      	beq.n	8009aec <Tim_Init+0x2a8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009ae6:	485b      	ldr	r0, [pc, #364]	; (8009c54 <Tim_Init+0x410>)
 8009ae8:	f000 f8fe 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the master slave mode. */
			sMasterConfig4.MasterOutputTrigger = TIM_TRGO_RESET;
 8009aec:	4b5c      	ldr	r3, [pc, #368]	; (8009c60 <Tim_Init+0x41c>)
 8009aee:	2200      	movs	r2, #0
 8009af0:	601a      	str	r2, [r3, #0]
			sMasterConfig4.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009af2:	4b5b      	ldr	r3, [pc, #364]	; (8009c60 <Tim_Init+0x41c>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig4) != HAL_OK)
 8009af8:	4959      	ldr	r1, [pc, #356]	; (8009c60 <Tim_Init+0x41c>)
 8009afa:	4856      	ldr	r0, [pc, #344]	; (8009c54 <Tim_Init+0x410>)
 8009afc:	f7fe facc 	bl	8008098 <HAL_TIMEx_MasterConfigSynchronization>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d002      	beq.n	8009b0c <Tim_Init+0x2c8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009b06:	4853      	ldr	r0, [pc, #332]	; (8009c54 <Tim_Init+0x410>)
 8009b08:	f000 f8ee 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the PWM parameters. */
			sConfigOC4.OCMode = TIM_OCMODE_PWM1;
 8009b0c:	4b55      	ldr	r3, [pc, #340]	; (8009c64 <Tim_Init+0x420>)
 8009b0e:	2260      	movs	r2, #96	; 0x60
 8009b10:	601a      	str	r2, [r3, #0]
			sConfigOC4.Pulse = 999;
 8009b12:	4b54      	ldr	r3, [pc, #336]	; (8009c64 <Tim_Init+0x420>)
 8009b14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009b18:	605a      	str	r2, [r3, #4]
			sConfigOC4.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009b1a:	4b52      	ldr	r3, [pc, #328]	; (8009c64 <Tim_Init+0x420>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	609a      	str	r2, [r3, #8]
			sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 8009b20:	4b50      	ldr	r3, [pc, #320]	; (8009c64 <Tim_Init+0x420>)
 8009b22:	2200      	movs	r2, #0
 8009b24:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_3) != HAL_OK)
 8009b26:	2208      	movs	r2, #8
 8009b28:	494e      	ldr	r1, [pc, #312]	; (8009c64 <Tim_Init+0x420>)
 8009b2a:	484a      	ldr	r0, [pc, #296]	; (8009c54 <Tim_Init+0x410>)
 8009b2c:	f7fd fc50 	bl	80073d0 <HAL_TIM_PWM_ConfigChannel>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d002      	beq.n	8009b3c <Tim_Init+0x2f8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009b36:	4847      	ldr	r0, [pc, #284]	; (8009c54 <Tim_Init+0x410>)
 8009b38:	f000 f8d6 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_4) != HAL_OK)
 8009b3c:	220c      	movs	r2, #12
 8009b3e:	4949      	ldr	r1, [pc, #292]	; (8009c64 <Tim_Init+0x420>)
 8009b40:	4844      	ldr	r0, [pc, #272]	; (8009c54 <Tim_Init+0x410>)
 8009b42:	f7fd fc45 	bl	80073d0 <HAL_TIM_PWM_ConfigChannel>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d002      	beq.n	8009b52 <Tim_Init+0x30e>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009b4c:	4841      	ldr	r0, [pc, #260]	; (8009c54 <Tim_Init+0x410>)
 8009b4e:	f000 f8cb 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the timer GPIO. */
			HAL_TIM_MspPostInit(&htim4);
 8009b52:	4840      	ldr	r0, [pc, #256]	; (8009c54 <Tim_Init+0x410>)
 8009b54:	f7f9 fe00 	bl	8003758 <HAL_TIM_MspPostInit>
			break;
 8009b58:	e077      	b.n	8009c4a <Tim_Init+0x406>
		/* Initialize the timer five. */
		case TIMER_FIVE:
			htim5.Instance = TIM5;
 8009b5a:	4b43      	ldr	r3, [pc, #268]	; (8009c68 <Tim_Init+0x424>)
 8009b5c:	4a43      	ldr	r2, [pc, #268]	; (8009c6c <Tim_Init+0x428>)
 8009b5e:	601a      	str	r2, [r3, #0]
			htim5.Init.Prescaler = 100-1;
 8009b60:	4b41      	ldr	r3, [pc, #260]	; (8009c68 <Tim_Init+0x424>)
 8009b62:	2263      	movs	r2, #99	; 0x63
 8009b64:	605a      	str	r2, [r3, #4]
			htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b66:	4b40      	ldr	r3, [pc, #256]	; (8009c68 <Tim_Init+0x424>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	609a      	str	r2, [r3, #8]
			htim5.Init.Period = 0xffffffff;
 8009b6c:	4b3e      	ldr	r3, [pc, #248]	; (8009c68 <Tim_Init+0x424>)
 8009b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b72:	60da      	str	r2, [r3, #12]
			htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b74:	4b3c      	ldr	r3, [pc, #240]	; (8009c68 <Tim_Init+0x424>)
 8009b76:	2200      	movs	r2, #0
 8009b78:	611a      	str	r2, [r3, #16]
			htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b7a:	4b3b      	ldr	r3, [pc, #236]	; (8009c68 <Tim_Init+0x424>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	619a      	str	r2, [r3, #24]
			if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009b80:	4839      	ldr	r0, [pc, #228]	; (8009c68 <Tim_Init+0x424>)
 8009b82:	f7fc fe0d 	bl	80067a0 <HAL_TIM_Base_Init>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d002      	beq.n	8009b92 <Tim_Init+0x34e>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009b8c:	4836      	ldr	r0, [pc, #216]	; (8009c68 <Tim_Init+0x424>)
 8009b8e:	f000 f8ab 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sClockSourceConfig5.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b92:	4b37      	ldr	r3, [pc, #220]	; (8009c70 <Tim_Init+0x42c>)
 8009b94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009b98:	601a      	str	r2, [r3, #0]
			if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig5) != HAL_OK)
 8009b9a:	4935      	ldr	r1, [pc, #212]	; (8009c70 <Tim_Init+0x42c>)
 8009b9c:	4832      	ldr	r0, [pc, #200]	; (8009c68 <Tim_Init+0x424>)
 8009b9e:	f7fd fcd9 	bl	8007554 <HAL_TIM_ConfigClockSource>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d002      	beq.n	8009bae <Tim_Init+0x36a>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009ba8:	482f      	ldr	r0, [pc, #188]	; (8009c68 <Tim_Init+0x424>)
 8009baa:	f000 f89d 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8009bae:	482e      	ldr	r0, [pc, #184]	; (8009c68 <Tim_Init+0x424>)
 8009bb0:	f7fd f8ca 	bl	8006d48 <HAL_TIM_IC_Init>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <Tim_Init+0x37c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009bba:	482b      	ldr	r0, [pc, #172]	; (8009c68 <Tim_Init+0x424>)
 8009bbc:	f000 f894 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sMasterConfig5.MasterOutputTrigger = TIM_TRGO_RESET;
 8009bc0:	4b2c      	ldr	r3, [pc, #176]	; (8009c74 <Tim_Init+0x430>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	601a      	str	r2, [r3, #0]
			sMasterConfig5.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009bc6:	4b2b      	ldr	r3, [pc, #172]	; (8009c74 <Tim_Init+0x430>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	605a      	str	r2, [r3, #4]
			if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig5) != HAL_OK)
 8009bcc:	4929      	ldr	r1, [pc, #164]	; (8009c74 <Tim_Init+0x430>)
 8009bce:	4826      	ldr	r0, [pc, #152]	; (8009c68 <Tim_Init+0x424>)
 8009bd0:	f7fe fa62 	bl	8008098 <HAL_TIMEx_MasterConfigSynchronization>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d002      	beq.n	8009be0 <Tim_Init+0x39c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009bda:	4823      	ldr	r0, [pc, #140]	; (8009c68 <Tim_Init+0x424>)
 8009bdc:	f000 f884 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sConfigIC5.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8009be0:	4b25      	ldr	r3, [pc, #148]	; (8009c78 <Tim_Init+0x434>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]
			sConfigIC5.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8009be6:	4b24      	ldr	r3, [pc, #144]	; (8009c78 <Tim_Init+0x434>)
 8009be8:	2201      	movs	r2, #1
 8009bea:	605a      	str	r2, [r3, #4]
			sConfigIC5.ICPrescaler = TIM_ICPSC_DIV1;
 8009bec:	4b22      	ldr	r3, [pc, #136]	; (8009c78 <Tim_Init+0x434>)
 8009bee:	2200      	movs	r2, #0
 8009bf0:	609a      	str	r2, [r3, #8]
			sConfigIC5.ICFilter = 0;
 8009bf2:	4b21      	ldr	r3, [pc, #132]	; (8009c78 <Tim_Init+0x434>)
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_1) != HAL_OK)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	491f      	ldr	r1, [pc, #124]	; (8009c78 <Tim_Init+0x434>)
 8009bfc:	481a      	ldr	r0, [pc, #104]	; (8009c68 <Tim_Init+0x424>)
 8009bfe:	f7fd fb4b 	bl	8007298 <HAL_TIM_IC_ConfigChannel>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d002      	beq.n	8009c0e <Tim_Init+0x3ca>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009c08:	4817      	ldr	r0, [pc, #92]	; (8009c68 <Tim_Init+0x424>)
 8009c0a:	f000 f86d 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_2) != HAL_OK)
 8009c0e:	2204      	movs	r2, #4
 8009c10:	4919      	ldr	r1, [pc, #100]	; (8009c78 <Tim_Init+0x434>)
 8009c12:	4815      	ldr	r0, [pc, #84]	; (8009c68 <Tim_Init+0x424>)
 8009c14:	f7fd fb40 	bl	8007298 <HAL_TIM_IC_ConfigChannel>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d002      	beq.n	8009c24 <Tim_Init+0x3e0>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009c1e:	4812      	ldr	r0, [pc, #72]	; (8009c68 <Tim_Init+0x424>)
 8009c20:	f000 f862 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if(TimH_MainFunctionFirstCall == STD_LOW)
 8009c24:	4b15      	ldr	r3, [pc, #84]	; (8009c7c <Tim_Init+0x438>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d10d      	bne.n	8009c48 <Tim_Init+0x404>
			{
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	480e      	ldr	r0, [pc, #56]	; (8009c68 <Tim_Init+0x424>)
 8009c30:	f7fd f8f0 	bl	8006e14 <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 8009c34:	2104      	movs	r1, #4
 8009c36:	480c      	ldr	r0, [pc, #48]	; (8009c68 <Tim_Init+0x424>)
 8009c38:	f7fd f8ec 	bl	8006e14 <HAL_TIM_IC_Start_IT>
				TimH_MainFunctionFirstCall = STD_HIGH;
 8009c3c:	4b0f      	ldr	r3, [pc, #60]	; (8009c7c <Tim_Init+0x438>)
 8009c3e:	2201      	movs	r2, #1
 8009c40:	701a      	strb	r2, [r3, #0]
			else
			{
				/* do nothing */
			}

			break;
 8009c42:	e001      	b.n	8009c48 <Tim_Init+0x404>
		default:
			break;
 8009c44:	bf00      	nop
 8009c46:	e000      	b.n	8009c4a <Tim_Init+0x406>
			break;
 8009c48:	bf00      	nop
	}
	return E_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	200004b8 	.word	0x200004b8
 8009c58:	40000800 	.word	0x40000800
 8009c5c:	20000764 	.word	0x20000764
 8009c60:	20000774 	.word	0x20000774
 8009c64:	20000730 	.word	0x20000730
 8009c68:	2000056c 	.word	0x2000056c
 8009c6c:	40000c00 	.word	0x40000c00
 8009c70:	2000077c 	.word	0x2000077c
 8009c74:	2000078c 	.word	0x2000078c
 8009c78:	20000794 	.word	0x20000794
 8009c7c:	200006de 	.word	0x200006de

08009c80 <Tim_DeInit>:
/***********************************************************************************
* Function: Tim_DeInit										   			           *
* Description: Peripheral de-initialization.									   *
************************************************************************************/
StdReturnType Tim_DeInit(uint8 TimerChannel)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	4603      	mov	r3, r0
 8009c88:	71fb      	strb	r3, [r7, #7]
	/* Store the timer channel value into a local variable. */
	uint8 localVariable = TimerChannel;
 8009c8a:	79fb      	ldrb	r3, [r7, #7]
 8009c8c:	73fb      	strb	r3, [r7, #15]
	/* Process the request for timer de-init. */
	switch(localVariable)
 8009c8e:	7bfb      	ldrb	r3, [r7, #15]
 8009c90:	3b02      	subs	r3, #2
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	d81a      	bhi.n	8009ccc <Tim_DeInit+0x4c>
 8009c96:	a201      	add	r2, pc, #4	; (adr r2, 8009c9c <Tim_DeInit+0x1c>)
 8009c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9c:	08009cad 	.word	0x08009cad
 8009ca0:	08009cb5 	.word	0x08009cb5
 8009ca4:	08009cbd 	.word	0x08009cbd
 8009ca8:	08009cc5 	.word	0x08009cc5
	{
		case TIMER_TWO:
			HAL_TIM_Base_MspDeInit(&htim2);
 8009cac:	480a      	ldr	r0, [pc, #40]	; (8009cd8 <Tim_DeInit+0x58>)
 8009cae:	f7f9 fdfd 	bl	80038ac <HAL_TIM_Base_MspDeInit>
			break;
 8009cb2:	e00c      	b.n	8009cce <Tim_DeInit+0x4e>
		case TIMER_THREE:
			HAL_TIM_Base_MspDeInit(&htim3);
 8009cb4:	4809      	ldr	r0, [pc, #36]	; (8009cdc <Tim_DeInit+0x5c>)
 8009cb6:	f7f9 fdf9 	bl	80038ac <HAL_TIM_Base_MspDeInit>
			break;
 8009cba:	e008      	b.n	8009cce <Tim_DeInit+0x4e>
		case TIMER_FOUR:
			HAL_TIM_Base_MspDeInit(&htim4);
 8009cbc:	4808      	ldr	r0, [pc, #32]	; (8009ce0 <Tim_DeInit+0x60>)
 8009cbe:	f7f9 fdf5 	bl	80038ac <HAL_TIM_Base_MspDeInit>
			break;
 8009cc2:	e004      	b.n	8009cce <Tim_DeInit+0x4e>
		case TIMER_FIVE:
			HAL_TIM_Base_MspDeInit(&htim5);
 8009cc4:	4807      	ldr	r0, [pc, #28]	; (8009ce4 <Tim_DeInit+0x64>)
 8009cc6:	f7f9 fdf1 	bl	80038ac <HAL_TIM_Base_MspDeInit>
			break;
 8009cca:	e000      	b.n	8009cce <Tim_DeInit+0x4e>
		default:
			break;
 8009ccc:	bf00      	nop
	}
	return E_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	20000350 	.word	0x20000350
 8009cdc:	20000404 	.word	0x20000404
 8009ce0:	200004b8 	.word	0x200004b8
 8009ce4:	2000056c 	.word	0x2000056c

08009ce8 <HAL_TIM_ErrorCallback>:
/***********************************************************************************
* Function: HAL_TIM_ErrorCallback										   		   *
* Description: Error callback called when timer fault occurs.					   *
************************************************************************************/
VOID HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization of the peripheral in case of error. */
	if(htim->Instance == TIM2)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cf8:	d10b      	bne.n	8009d12 <HAL_TIM_ErrorCallback+0x2a>
	{
		SystemManager_Fault[TIMER2_ERROR]++;
 8009cfa:	4b21      	ldr	r3, [pc, #132]	; (8009d80 <HAL_TIM_ErrorCallback+0x98>)
 8009cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cfe:	3301      	adds	r3, #1
 8009d00:	4a1f      	ldr	r2, [pc, #124]	; (8009d80 <HAL_TIM_ErrorCallback+0x98>)
 8009d02:	6593      	str	r3, [r2, #88]	; 0x58
		Tim_DeInit(TIMER_TWO);
 8009d04:	2002      	movs	r0, #2
 8009d06:	f7ff ffbb 	bl	8009c80 <Tim_DeInit>
		Tim_Init(TIMER_TWO);
 8009d0a:	2002      	movs	r0, #2
 8009d0c:	f7ff fd9a 	bl	8009844 <Tim_Init>
	}
	else
	{
		/* do nothing */
	}
}
 8009d10:	e031      	b.n	8009d76 <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM3)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a1b      	ldr	r2, [pc, #108]	; (8009d84 <HAL_TIM_ErrorCallback+0x9c>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d10b      	bne.n	8009d34 <HAL_TIM_ErrorCallback+0x4c>
		SystemManager_Fault[TIMER3_ERROR]++;
 8009d1c:	4b18      	ldr	r3, [pc, #96]	; (8009d80 <HAL_TIM_ErrorCallback+0x98>)
 8009d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d20:	3301      	adds	r3, #1
 8009d22:	4a17      	ldr	r2, [pc, #92]	; (8009d80 <HAL_TIM_ErrorCallback+0x98>)
 8009d24:	65d3      	str	r3, [r2, #92]	; 0x5c
		Tim_DeInit(TIMER_THREE);
 8009d26:	2003      	movs	r0, #3
 8009d28:	f7ff ffaa 	bl	8009c80 <Tim_DeInit>
		Tim_Init(TIMER_THREE);
 8009d2c:	2003      	movs	r0, #3
 8009d2e:	f7ff fd89 	bl	8009844 <Tim_Init>
}
 8009d32:	e020      	b.n	8009d76 <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM4)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a13      	ldr	r2, [pc, #76]	; (8009d88 <HAL_TIM_ErrorCallback+0xa0>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d10b      	bne.n	8009d56 <HAL_TIM_ErrorCallback+0x6e>
		SystemManager_Fault[TIMER4_ERROR]++;
 8009d3e:	4b10      	ldr	r3, [pc, #64]	; (8009d80 <HAL_TIM_ErrorCallback+0x98>)
 8009d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d42:	3301      	adds	r3, #1
 8009d44:	4a0e      	ldr	r2, [pc, #56]	; (8009d80 <HAL_TIM_ErrorCallback+0x98>)
 8009d46:	6613      	str	r3, [r2, #96]	; 0x60
		Tim_DeInit(TIMER_FOUR);
 8009d48:	2004      	movs	r0, #4
 8009d4a:	f7ff ff99 	bl	8009c80 <Tim_DeInit>
		Tim_Init(TIMER_FOUR);
 8009d4e:	2004      	movs	r0, #4
 8009d50:	f7ff fd78 	bl	8009844 <Tim_Init>
}
 8009d54:	e00f      	b.n	8009d76 <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM5)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a0c      	ldr	r2, [pc, #48]	; (8009d8c <HAL_TIM_ErrorCallback+0xa4>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d10a      	bne.n	8009d76 <HAL_TIM_ErrorCallback+0x8e>
		SystemManager_Fault[TIMER5_ERROR]++;
 8009d60:	4b07      	ldr	r3, [pc, #28]	; (8009d80 <HAL_TIM_ErrorCallback+0x98>)
 8009d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d64:	3301      	adds	r3, #1
 8009d66:	4a06      	ldr	r2, [pc, #24]	; (8009d80 <HAL_TIM_ErrorCallback+0x98>)
 8009d68:	6653      	str	r3, [r2, #100]	; 0x64
		Tim_DeInit(TIMER_FIVE);
 8009d6a:	2005      	movs	r0, #5
 8009d6c:	f7ff ff88 	bl	8009c80 <Tim_DeInit>
		Tim_Init(TIMER_FIVE);
 8009d70:	2005      	movs	r0, #5
 8009d72:	f7ff fd67 	bl	8009844 <Tim_Init>
}
 8009d76:	bf00      	nop
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	200089c8 	.word	0x200089c8
 8009d84:	40000400 	.word	0x40000400
 8009d88:	40000800 	.word	0x40000800
 8009d8c:	40000c00 	.word	0x40000c00

08009d90 <Tim_MainFunction>:
/***********************************************************************************
* Function: Tim_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Tim_MainFunction()
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
	/* Check each timer for error status into local variables. */
	uint32 localStateTimerTwo = HAL_TIM_Base_GetState(&htim2);
 8009d96:	4891      	ldr	r0, [pc, #580]	; (8009fdc <Tim_MainFunction+0x24c>)
 8009d98:	f7fd fd2e 	bl	80077f8 <HAL_TIM_Base_GetState>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	60fb      	str	r3, [r7, #12]
	uint32 localStateTimerThree = HAL_TIM_Base_GetState(&htim3);
 8009da0:	488f      	ldr	r0, [pc, #572]	; (8009fe0 <Tim_MainFunction+0x250>)
 8009da2:	f7fd fd29 	bl	80077f8 <HAL_TIM_Base_GetState>
 8009da6:	4603      	mov	r3, r0
 8009da8:	60bb      	str	r3, [r7, #8]
	uint32 localStateTimerFour = HAL_TIM_Base_GetState(&htim4);
 8009daa:	488e      	ldr	r0, [pc, #568]	; (8009fe4 <Tim_MainFunction+0x254>)
 8009dac:	f7fd fd24 	bl	80077f8 <HAL_TIM_Base_GetState>
 8009db0:	4603      	mov	r3, r0
 8009db2:	607b      	str	r3, [r7, #4]
	uint32 localStateTimerFive = HAL_TIM_Base_GetState(&htim5);
 8009db4:	488c      	ldr	r0, [pc, #560]	; (8009fe8 <Tim_MainFunction+0x258>)
 8009db6:	f7fd fd1f 	bl	80077f8 <HAL_TIM_Base_GetState>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	603b      	str	r3, [r7, #0]
	/* Process timers state. */
	switch(localStateTimerFive)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	2b04      	cmp	r3, #4
 8009dc2:	d869      	bhi.n	8009e98 <Tim_MainFunction+0x108>
 8009dc4:	a201      	add	r2, pc, #4	; (adr r2, 8009dcc <Tim_MainFunction+0x3c>)
 8009dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dca:	bf00      	nop
 8009dcc:	08009de1 	.word	0x08009de1
 8009dd0:	08009df1 	.word	0x08009df1
 8009dd4:	08009e6f 	.word	0x08009e6f
 8009dd8:	08009e79 	.word	0x08009e79
 8009ddc:	08009e89 	.word	0x08009e89
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	4b81      	ldr	r3, [pc, #516]	; (8009fec <Tim_MainFunction+0x25c>)
 8009de6:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FIVE);
 8009de8:	2005      	movs	r0, #5
 8009dea:	f7ff fd2b 	bl	8009844 <Tim_Init>
			break;
 8009dee:	e054      	b.n	8009e9a <Tim_MainFunction+0x10a>
		case HAL_TIM_STATE_READY:
			if(Os_Counter % 100 == 0)
 8009df0:	4b7f      	ldr	r3, [pc, #508]	; (8009ff0 <Tim_MainFunction+0x260>)
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	4b7f      	ldr	r3, [pc, #508]	; (8009ff4 <Tim_MainFunction+0x264>)
 8009df6:	fba3 1302 	umull	r1, r3, r3, r2
 8009dfa:	095b      	lsrs	r3, r3, #5
 8009dfc:	2164      	movs	r1, #100	; 0x64
 8009dfe:	fb01 f303 	mul.w	r3, r1, r3
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d12d      	bne.n	8009e64 <Tim_MainFunction+0xd4>
			{
				HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_SET);
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009e0e:	487a      	ldr	r0, [pc, #488]	; (8009ff8 <Tim_MainFunction+0x268>)
 8009e10:	f7fb ffb8 	bl	8005d84 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 8009e14:	2001      	movs	r0, #1
 8009e16:	f7fa f8a1 	bl	8003f5c <HAL_Delay>
				HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_RESET);
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009e20:	4875      	ldr	r0, [pc, #468]	; (8009ff8 <Tim_MainFunction+0x268>)
 8009e22:	f7fb ffaf 	bl	8005d84 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);
 8009e26:	4b70      	ldr	r3, [pc, #448]	; (8009fe8 <Tim_MainFunction+0x258>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68da      	ldr	r2, [r3, #12]
 8009e2c:	4b6e      	ldr	r3, [pc, #440]	; (8009fe8 <Tim_MainFunction+0x258>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f042 0204 	orr.w	r2, r2, #4
 8009e34:	60da      	str	r2, [r3, #12]
				HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_SET);
 8009e36:	2201      	movs	r2, #1
 8009e38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009e3c:	486f      	ldr	r0, [pc, #444]	; (8009ffc <Tim_MainFunction+0x26c>)
 8009e3e:	f7fb ffa1 	bl	8005d84 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 8009e42:	2001      	movs	r0, #1
 8009e44:	f7fa f88a 	bl	8003f5c <HAL_Delay>
				HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_RESET);
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009e4e:	486b      	ldr	r0, [pc, #428]	; (8009ffc <Tim_MainFunction+0x26c>)
 8009e50:	f7fb ff98 	bl	8005d84 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC1);
 8009e54:	4b64      	ldr	r3, [pc, #400]	; (8009fe8 <Tim_MainFunction+0x258>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68da      	ldr	r2, [r3, #12]
 8009e5a:	4b63      	ldr	r3, [pc, #396]	; (8009fe8 <Tim_MainFunction+0x258>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f042 0202 	orr.w	r2, r2, #2
 8009e62:	60da      	str	r2, [r3, #12]
			}
			else
			{
				/* do nothing */
			}
			TimH_BswState_TimerFive = localStateTimerFive;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	b2da      	uxtb	r2, r3
 8009e68:	4b60      	ldr	r3, [pc, #384]	; (8009fec <Tim_MainFunction+0x25c>)
 8009e6a:	701a      	strb	r2, [r3, #0]
			break;
 8009e6c:	e015      	b.n	8009e9a <Tim_MainFunction+0x10a>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	b2da      	uxtb	r2, r3
 8009e72:	4b5e      	ldr	r3, [pc, #376]	; (8009fec <Tim_MainFunction+0x25c>)
 8009e74:	701a      	strb	r2, [r3, #0]
			break;
 8009e76:	e010      	b.n	8009e9a <Tim_MainFunction+0x10a>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	4b5b      	ldr	r3, [pc, #364]	; (8009fec <Tim_MainFunction+0x25c>)
 8009e7e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 8009e80:	4859      	ldr	r0, [pc, #356]	; (8009fe8 <Tim_MainFunction+0x258>)
 8009e82:	f7ff ff31 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			break;
 8009e86:	e008      	b.n	8009e9a <Tim_MainFunction+0x10a>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	4b57      	ldr	r3, [pc, #348]	; (8009fec <Tim_MainFunction+0x25c>)
 8009e8e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 8009e90:	4855      	ldr	r0, [pc, #340]	; (8009fe8 <Tim_MainFunction+0x258>)
 8009e92:	f7ff ff29 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			break;
 8009e96:	e000      	b.n	8009e9a <Tim_MainFunction+0x10a>
		default:
			break;
 8009e98:	bf00      	nop
	}
	switch(localStateTimerTwo)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2b04      	cmp	r3, #4
 8009e9e:	d82f      	bhi.n	8009f00 <Tim_MainFunction+0x170>
 8009ea0:	a201      	add	r2, pc, #4	; (adr r2, 8009ea8 <Tim_MainFunction+0x118>)
 8009ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea6:	bf00      	nop
 8009ea8:	08009ebd 	.word	0x08009ebd
 8009eac:	08009ecd 	.word	0x08009ecd
 8009eb0:	08009ed7 	.word	0x08009ed7
 8009eb4:	08009ee1 	.word	0x08009ee1
 8009eb8:	08009ef1 	.word	0x08009ef1
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	4b4f      	ldr	r3, [pc, #316]	; (800a000 <Tim_MainFunction+0x270>)
 8009ec2:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_TWO);
 8009ec4:	2002      	movs	r0, #2
 8009ec6:	f7ff fcbd 	bl	8009844 <Tim_Init>
			break;
 8009eca:	e01a      	b.n	8009f02 <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	b2da      	uxtb	r2, r3
 8009ed0:	4b4b      	ldr	r3, [pc, #300]	; (800a000 <Tim_MainFunction+0x270>)
 8009ed2:	701a      	strb	r2, [r3, #0]
			break;
 8009ed4:	e015      	b.n	8009f02 <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	4b49      	ldr	r3, [pc, #292]	; (800a000 <Tim_MainFunction+0x270>)
 8009edc:	701a      	strb	r2, [r3, #0]
			break;
 8009ede:	e010      	b.n	8009f02 <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	4b46      	ldr	r3, [pc, #280]	; (800a000 <Tim_MainFunction+0x270>)
 8009ee6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 8009ee8:	483c      	ldr	r0, [pc, #240]	; (8009fdc <Tim_MainFunction+0x24c>)
 8009eea:	f7ff fefd 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			break;
 8009eee:	e008      	b.n	8009f02 <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	4b42      	ldr	r3, [pc, #264]	; (800a000 <Tim_MainFunction+0x270>)
 8009ef6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 8009ef8:	4838      	ldr	r0, [pc, #224]	; (8009fdc <Tim_MainFunction+0x24c>)
 8009efa:	f7ff fef5 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			break;
 8009efe:	e000      	b.n	8009f02 <Tim_MainFunction+0x172>
		default:
			break;
 8009f00:	bf00      	nop
	}
	switch(localStateTimerThree)
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	d82f      	bhi.n	8009f68 <Tim_MainFunction+0x1d8>
 8009f08:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <Tim_MainFunction+0x180>)
 8009f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0e:	bf00      	nop
 8009f10:	08009f25 	.word	0x08009f25
 8009f14:	08009f35 	.word	0x08009f35
 8009f18:	08009f3f 	.word	0x08009f3f
 8009f1c:	08009f49 	.word	0x08009f49
 8009f20:	08009f59 	.word	0x08009f59
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	4b36      	ldr	r3, [pc, #216]	; (800a004 <Tim_MainFunction+0x274>)
 8009f2a:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_THREE);
 8009f2c:	2003      	movs	r0, #3
 8009f2e:	f7ff fc89 	bl	8009844 <Tim_Init>
			break;
 8009f32:	e01a      	b.n	8009f6a <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	4b32      	ldr	r3, [pc, #200]	; (800a004 <Tim_MainFunction+0x274>)
 8009f3a:	701a      	strb	r2, [r3, #0]
			break;
 8009f3c:	e015      	b.n	8009f6a <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	4b30      	ldr	r3, [pc, #192]	; (800a004 <Tim_MainFunction+0x274>)
 8009f44:	701a      	strb	r2, [r3, #0]
			break;
 8009f46:	e010      	b.n	8009f6a <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	b2da      	uxtb	r2, r3
 8009f4c:	4b2d      	ldr	r3, [pc, #180]	; (800a004 <Tim_MainFunction+0x274>)
 8009f4e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 8009f50:	4823      	ldr	r0, [pc, #140]	; (8009fe0 <Tim_MainFunction+0x250>)
 8009f52:	f7ff fec9 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			break;
 8009f56:	e008      	b.n	8009f6a <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	b2da      	uxtb	r2, r3
 8009f5c:	4b29      	ldr	r3, [pc, #164]	; (800a004 <Tim_MainFunction+0x274>)
 8009f5e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 8009f60:	481f      	ldr	r0, [pc, #124]	; (8009fe0 <Tim_MainFunction+0x250>)
 8009f62:	f7ff fec1 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			break;
 8009f66:	e000      	b.n	8009f6a <Tim_MainFunction+0x1da>
		default:
			break;
 8009f68:	bf00      	nop
	}
	switch(localStateTimerFour)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b04      	cmp	r3, #4
 8009f6e:	d82f      	bhi.n	8009fd0 <Tim_MainFunction+0x240>
 8009f70:	a201      	add	r2, pc, #4	; (adr r2, 8009f78 <Tim_MainFunction+0x1e8>)
 8009f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f76:	bf00      	nop
 8009f78:	08009f8d 	.word	0x08009f8d
 8009f7c:	08009f9d 	.word	0x08009f9d
 8009f80:	08009fa7 	.word	0x08009fa7
 8009f84:	08009fb1 	.word	0x08009fb1
 8009f88:	08009fc1 	.word	0x08009fc1
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFour = localStateTimerFour;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	4b1d      	ldr	r3, [pc, #116]	; (800a008 <Tim_MainFunction+0x278>)
 8009f92:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FOUR);
 8009f94:	2004      	movs	r0, #4
 8009f96:	f7ff fc55 	bl	8009844 <Tim_Init>
			break;
 8009f9a:	e01a      	b.n	8009fd2 <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerFour = localStateTimerFour;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	4b19      	ldr	r3, [pc, #100]	; (800a008 <Tim_MainFunction+0x278>)
 8009fa2:	701a      	strb	r2, [r3, #0]
			break;
 8009fa4:	e015      	b.n	8009fd2 <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFour = localStateTimerFour;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	b2da      	uxtb	r2, r3
 8009faa:	4b17      	ldr	r3, [pc, #92]	; (800a008 <Tim_MainFunction+0x278>)
 8009fac:	701a      	strb	r2, [r3, #0]
			break;
 8009fae:	e010      	b.n	8009fd2 <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFour = localStateTimerFour;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	b2da      	uxtb	r2, r3
 8009fb4:	4b14      	ldr	r3, [pc, #80]	; (800a008 <Tim_MainFunction+0x278>)
 8009fb6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 8009fb8:	480a      	ldr	r0, [pc, #40]	; (8009fe4 <Tim_MainFunction+0x254>)
 8009fba:	f7ff fe95 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			break;
 8009fbe:	e008      	b.n	8009fd2 <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFour = localStateTimerFour;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	4b10      	ldr	r3, [pc, #64]	; (800a008 <Tim_MainFunction+0x278>)
 8009fc6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 8009fc8:	4806      	ldr	r0, [pc, #24]	; (8009fe4 <Tim_MainFunction+0x254>)
 8009fca:	f7ff fe8d 	bl	8009ce8 <HAL_TIM_ErrorCallback>
			break;
 8009fce:	e000      	b.n	8009fd2 <Tim_MainFunction+0x242>
		default:
			break;
 8009fd0:	bf00      	nop
	}
}
 8009fd2:	bf00      	nop
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	20000350 	.word	0x20000350
 8009fe0:	20000404 	.word	0x20000404
 8009fe4:	200004b8 	.word	0x200004b8
 8009fe8:	2000056c 	.word	0x2000056c
 8009fec:	200006bf 	.word	0x200006bf
 8009ff0:	20000200 	.word	0x20000200
 8009ff4:	51eb851f 	.word	0x51eb851f
 8009ff8:	40020400 	.word	0x40020400
 8009ffc:	40020000 	.word	0x40020000
 800a000:	200006bc 	.word	0x200006bc
 800a004:	200006bd 	.word	0x200006bd
 800a008:	200006be 	.word	0x200006be

0800a00c <HAL_TIM_PeriodElapsedCallback>:
* Function: HAL_TIM_PeriodElapsedCallback										   *
* Description: Peripheral period elapsed callback to process system state          *
* 			   when timer expires.									               *
************************************************************************************/
VOID HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
	/* Timer 1 is used for the time base source of FreeRTOS. Upon expiration increase the clock counter of the system. */
	if (htim->Instance == TIM1)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a04      	ldr	r2, [pc, #16]	; (800a02c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d101      	bne.n	800a022 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800a01e:	f7f9 ff7d 	bl	8003f1c <HAL_IncTick>
	}
	else
	{
		/* do nothing */
	}
}
 800a022:	bf00      	nop
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	40010000 	.word	0x40010000

0800a030 <__NVIC_SetPriority>:
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	6039      	str	r1, [r7, #0]
 800a03a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a03c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a040:	2b00      	cmp	r3, #0
 800a042:	db0a      	blt.n	800a05a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	b2da      	uxtb	r2, r3
 800a048:	490c      	ldr	r1, [pc, #48]	; (800a07c <__NVIC_SetPriority+0x4c>)
 800a04a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a04e:	0112      	lsls	r2, r2, #4
 800a050:	b2d2      	uxtb	r2, r2
 800a052:	440b      	add	r3, r1
 800a054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a058:	e00a      	b.n	800a070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	b2da      	uxtb	r2, r3
 800a05e:	4908      	ldr	r1, [pc, #32]	; (800a080 <__NVIC_SetPriority+0x50>)
 800a060:	79fb      	ldrb	r3, [r7, #7]
 800a062:	f003 030f 	and.w	r3, r3, #15
 800a066:	3b04      	subs	r3, #4
 800a068:	0112      	lsls	r2, r2, #4
 800a06a:	b2d2      	uxtb	r2, r2
 800a06c:	440b      	add	r3, r1
 800a06e:	761a      	strb	r2, [r3, #24]
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	e000e100 	.word	0xe000e100
 800a080:	e000ed00 	.word	0xe000ed00

0800a084 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a084:	b480      	push	{r7}
 800a086:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a088:	4b03      	ldr	r3, [pc, #12]	; (800a098 <SysTick_Handler+0x14>)
 800a08a:	681b      	ldr	r3, [r3, #0]


}
 800a08c:	bf00      	nop
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	e000e010 	.word	0xe000e010

0800a09c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a09c:	b580      	push	{r7, lr}
 800a09e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	f06f 0004 	mvn.w	r0, #4
 800a0a6:	f7ff ffc3 	bl	800a030 <__NVIC_SetPriority>
#endif
}
 800a0aa:	bf00      	nop
 800a0ac:	bd80      	pop	{r7, pc}
	...

0800a0b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0b6:	f3ef 8305 	mrs	r3, IPSR
 800a0ba:	603b      	str	r3, [r7, #0]
  return(result);
 800a0bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d003      	beq.n	800a0ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a0c2:	f06f 0305 	mvn.w	r3, #5
 800a0c6:	607b      	str	r3, [r7, #4]
 800a0c8:	e00c      	b.n	800a0e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a0ca:	4b0a      	ldr	r3, [pc, #40]	; (800a0f4 <osKernelInitialize+0x44>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d105      	bne.n	800a0de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a0d2:	4b08      	ldr	r3, [pc, #32]	; (800a0f4 <osKernelInitialize+0x44>)
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	607b      	str	r3, [r7, #4]
 800a0dc:	e002      	b.n	800a0e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a0de:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0e4:	687b      	ldr	r3, [r7, #4]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	200007a4 	.word	0x200007a4

0800a0f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0fe:	f3ef 8305 	mrs	r3, IPSR
 800a102:	603b      	str	r3, [r7, #0]
  return(result);
 800a104:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a106:	2b00      	cmp	r3, #0
 800a108:	d003      	beq.n	800a112 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a10a:	f06f 0305 	mvn.w	r3, #5
 800a10e:	607b      	str	r3, [r7, #4]
 800a110:	e010      	b.n	800a134 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a112:	4b0b      	ldr	r3, [pc, #44]	; (800a140 <osKernelStart+0x48>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d109      	bne.n	800a12e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a11a:	f7ff ffbf 	bl	800a09c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a11e:	4b08      	ldr	r3, [pc, #32]	; (800a140 <osKernelStart+0x48>)
 800a120:	2202      	movs	r2, #2
 800a122:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a124:	f001 fe68 	bl	800bdf8 <vTaskStartScheduler>
      stat = osOK;
 800a128:	2300      	movs	r3, #0
 800a12a:	607b      	str	r3, [r7, #4]
 800a12c:	e002      	b.n	800a134 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a12e:	f04f 33ff 	mov.w	r3, #4294967295
 800a132:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a134:	687b      	ldr	r3, [r7, #4]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	200007a4 	.word	0x200007a4

0800a144 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a144:	b580      	push	{r7, lr}
 800a146:	b08e      	sub	sp, #56	; 0x38
 800a148:	af04      	add	r7, sp, #16
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a150:	2300      	movs	r3, #0
 800a152:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a154:	f3ef 8305 	mrs	r3, IPSR
 800a158:	617b      	str	r3, [r7, #20]
  return(result);
 800a15a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d17f      	bne.n	800a260 <osThreadNew+0x11c>
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d07c      	beq.n	800a260 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800a166:	2380      	movs	r3, #128	; 0x80
 800a168:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a16a:	2318      	movs	r3, #24
 800a16c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a16e:	2300      	movs	r3, #0
 800a170:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a172:	f04f 33ff 	mov.w	r3, #4294967295
 800a176:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d046      	beq.n	800a20c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d002      	beq.n	800a18c <osThreadNew+0x48>
        name = attr->name;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d002      	beq.n	800a19a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d008      	beq.n	800a1b2 <osThreadNew+0x6e>
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	2b38      	cmp	r3, #56	; 0x38
 800a1a4:	d805      	bhi.n	800a1b2 <osThreadNew+0x6e>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <osThreadNew+0x72>
        return (NULL);
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	e055      	b.n	800a262 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	695b      	ldr	r3, [r3, #20]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d003      	beq.n	800a1c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	089b      	lsrs	r3, r3, #2
 800a1c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00f      	beq.n	800a1ee <osThreadNew+0xaa>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800a1d6:	d30a      	bcc.n	800a1ee <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d006      	beq.n	800a1ee <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	695b      	ldr	r3, [r3, #20]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d002      	beq.n	800a1ee <osThreadNew+0xaa>
        mem = 1;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	61bb      	str	r3, [r7, #24]
 800a1ec:	e010      	b.n	800a210 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10c      	bne.n	800a210 <osThreadNew+0xcc>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d108      	bne.n	800a210 <osThreadNew+0xcc>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d104      	bne.n	800a210 <osThreadNew+0xcc>
          mem = 0;
 800a206:	2300      	movs	r3, #0
 800a208:	61bb      	str	r3, [r7, #24]
 800a20a:	e001      	b.n	800a210 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800a20c:	2300      	movs	r3, #0
 800a20e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	2b01      	cmp	r3, #1
 800a214:	d110      	bne.n	800a238 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a21e:	9202      	str	r2, [sp, #8]
 800a220:	9301      	str	r3, [sp, #4]
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	6a3a      	ldr	r2, [r7, #32]
 800a22a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f001 fb1d 	bl	800b86c <xTaskCreateStatic>
 800a232:	4603      	mov	r3, r0
 800a234:	613b      	str	r3, [r7, #16]
 800a236:	e013      	b.n	800a260 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d110      	bne.n	800a260 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a23e:	6a3b      	ldr	r3, [r7, #32]
 800a240:	b29a      	uxth	r2, r3
 800a242:	f107 0310 	add.w	r3, r7, #16
 800a246:	9301      	str	r3, [sp, #4]
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f001 fb6a 	bl	800b92a <xTaskCreate>
 800a256:	4603      	mov	r3, r0
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d001      	beq.n	800a260 <osThreadNew+0x11c>
            hTask = NULL;
 800a25c:	2300      	movs	r3, #0
 800a25e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a260:	693b      	ldr	r3, [r7, #16]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3728      	adds	r7, #40	; 0x28
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b084      	sub	sp, #16
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f002 ffed 	bl	800d252 <pvTimerGetTimerID>
 800a278:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d005      	beq.n	800a28c <TimerCallback+0x22>
    callb->func (callb->arg);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	6852      	ldr	r2, [r2, #4]
 800a288:	4610      	mov	r0, r2
 800a28a:	4798      	blx	r3
  }
}
 800a28c:	bf00      	nop
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a294:	b580      	push	{r7, lr}
 800a296:	b08c      	sub	sp, #48	; 0x30
 800a298:	af02      	add	r7, sp, #8
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	607a      	str	r2, [r7, #4]
 800a29e:	603b      	str	r3, [r7, #0]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2a8:	f3ef 8305 	mrs	r3, IPSR
 800a2ac:	613b      	str	r3, [r7, #16]
  return(result);
 800a2ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d163      	bne.n	800a37c <osTimerNew+0xe8>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d060      	beq.n	800a37c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a2ba:	2008      	movs	r0, #8
 800a2bc:	f000 f91c 	bl	800a4f8 <pvPortMalloc>
 800a2c0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d059      	beq.n	800a37c <osTimerNew+0xe8>
      callb->func = func;
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a2d4:	7afb      	ldrb	r3, [r7, #11]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d102      	bne.n	800a2e0 <osTimerNew+0x4c>
        reload = pdFALSE;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	61fb      	str	r3, [r7, #28]
 800a2de:	e001      	b.n	800a2e4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800a2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d01c      	beq.n	800a32e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <osTimerNew+0x6e>
          name = attr->name;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d006      	beq.n	800a318 <osTimerNew+0x84>
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	2b2b      	cmp	r3, #43	; 0x2b
 800a310:	d902      	bls.n	800a318 <osTimerNew+0x84>
          mem = 1;
 800a312:	2301      	movs	r3, #1
 800a314:	61bb      	str	r3, [r7, #24]
 800a316:	e00c      	b.n	800a332 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d108      	bne.n	800a332 <osTimerNew+0x9e>
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d104      	bne.n	800a332 <osTimerNew+0x9e>
            mem = 0;
 800a328:	2300      	movs	r3, #0
 800a32a:	61bb      	str	r3, [r7, #24]
 800a32c:	e001      	b.n	800a332 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d10c      	bne.n	800a352 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	4b12      	ldr	r3, [pc, #72]	; (800a388 <osTimerNew+0xf4>)
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	69fa      	ldr	r2, [r7, #28]
 800a346:	2101      	movs	r1, #1
 800a348:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a34a:	f002 fbda 	bl	800cb02 <xTimerCreateStatic>
 800a34e:	6238      	str	r0, [r7, #32]
 800a350:	e00b      	b.n	800a36a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d108      	bne.n	800a36a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a358:	4b0b      	ldr	r3, [pc, #44]	; (800a388 <osTimerNew+0xf4>)
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	69fa      	ldr	r2, [r7, #28]
 800a360:	2101      	movs	r1, #1
 800a362:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a364:	f002 fbac 	bl	800cac0 <xTimerCreate>
 800a368:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800a36a:	6a3b      	ldr	r3, [r7, #32]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d105      	bne.n	800a37c <osTimerNew+0xe8>
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d002      	beq.n	800a37c <osTimerNew+0xe8>
        vPortFree (callb);
 800a376:	6978      	ldr	r0, [r7, #20]
 800a378:	f000 f98e 	bl	800a698 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a37c:	6a3b      	ldr	r3, [r7, #32]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3728      	adds	r7, #40	; 0x28
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	0800a26b 	.word	0x0800a26b

0800a38c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b088      	sub	sp, #32
 800a390:	af02      	add	r7, sp, #8
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a39a:	f3ef 8305 	mrs	r3, IPSR
 800a39e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d003      	beq.n	800a3ae <osTimerStart+0x22>
    stat = osErrorISR;
 800a3a6:	f06f 0305 	mvn.w	r3, #5
 800a3aa:	617b      	str	r3, [r7, #20]
 800a3ac:	e017      	b.n	800a3de <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d103      	bne.n	800a3bc <osTimerStart+0x30>
    stat = osErrorParameter;
 800a3b4:	f06f 0303 	mvn.w	r3, #3
 800a3b8:	617b      	str	r3, [r7, #20]
 800a3ba:	e010      	b.n	800a3de <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a3bc:	2300      	movs	r3, #0
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	2104      	movs	r1, #4
 800a3c6:	6938      	ldr	r0, [r7, #16]
 800a3c8:	f002 fc14 	bl	800cbf4 <xTimerGenericCommand>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d102      	bne.n	800a3d8 <osTimerStart+0x4c>
      stat = osOK;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	617b      	str	r3, [r7, #20]
 800a3d6:	e002      	b.n	800a3de <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800a3d8:	f06f 0302 	mvn.w	r3, #2
 800a3dc:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a3de:	697b      	ldr	r3, [r7, #20]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3718      	adds	r7, #24
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b088      	sub	sp, #32
 800a3ec:	af02      	add	r7, sp, #8
 800a3ee:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3f4:	f3ef 8305 	mrs	r3, IPSR
 800a3f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d003      	beq.n	800a408 <osTimerStop+0x20>
    stat = osErrorISR;
 800a400:	f06f 0305 	mvn.w	r3, #5
 800a404:	617b      	str	r3, [r7, #20]
 800a406:	e021      	b.n	800a44c <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d103      	bne.n	800a416 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800a40e:	f06f 0303 	mvn.w	r3, #3
 800a412:	617b      	str	r3, [r7, #20]
 800a414:	e01a      	b.n	800a44c <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800a416:	6938      	ldr	r0, [r7, #16]
 800a418:	f002 fef2 	bl	800d200 <xTimerIsTimerActive>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d103      	bne.n	800a42a <osTimerStop+0x42>
      stat = osErrorResource;
 800a422:	f06f 0302 	mvn.w	r3, #2
 800a426:	617b      	str	r3, [r7, #20]
 800a428:	e010      	b.n	800a44c <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800a42a:	2300      	movs	r3, #0
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	2300      	movs	r3, #0
 800a430:	2200      	movs	r2, #0
 800a432:	2103      	movs	r1, #3
 800a434:	6938      	ldr	r0, [r7, #16]
 800a436:	f002 fbdd 	bl	800cbf4 <xTimerGenericCommand>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d102      	bne.n	800a446 <osTimerStop+0x5e>
        stat = osOK;
 800a440:	2300      	movs	r3, #0
 800a442:	617b      	str	r3, [r7, #20]
 800a444:	e002      	b.n	800a44c <osTimerStop+0x64>
      } else {
        stat = osError;
 800a446:	f04f 33ff 	mov.w	r3, #4294967295
 800a44a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a44c:	697b      	ldr	r3, [r7, #20]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3718      	adds	r7, #24
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 800a456:	b580      	push	{r7, lr}
 800a458:	b086      	sub	sp, #24
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a462:	f3ef 8305 	mrs	r3, IPSR
 800a466:	60fb      	str	r3, [r7, #12]
  return(result);
 800a468:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d102      	bne.n	800a474 <osTimerIsRunning+0x1e>
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d102      	bne.n	800a47a <osTimerIsRunning+0x24>
    running = 0U;
 800a474:	2300      	movs	r3, #0
 800a476:	617b      	str	r3, [r7, #20]
 800a478:	e004      	b.n	800a484 <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 800a47a:	6938      	ldr	r0, [r7, #16]
 800a47c:	f002 fec0 	bl	800d200 <xTimerIsTimerActive>
 800a480:	4603      	mov	r3, r0
 800a482:	617b      	str	r3, [r7, #20]
  }

  return (running);
 800a484:	697b      	ldr	r3, [r7, #20]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3718      	adds	r7, #24
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
	...

0800a490 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	4a07      	ldr	r2, [pc, #28]	; (800a4bc <vApplicationGetIdleTaskMemory+0x2c>)
 800a4a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	4a06      	ldr	r2, [pc, #24]	; (800a4c0 <vApplicationGetIdleTaskMemory+0x30>)
 800a4a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2280      	movs	r2, #128	; 0x80
 800a4ac:	601a      	str	r2, [r3, #0]
}
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	200007a8 	.word	0x200007a8
 800a4c0:	20000964 	.word	0x20000964

0800a4c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	4a07      	ldr	r2, [pc, #28]	; (800a4f0 <vApplicationGetTimerTaskMemory+0x2c>)
 800a4d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	4a06      	ldr	r2, [pc, #24]	; (800a4f4 <vApplicationGetTimerTaskMemory+0x30>)
 800a4da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4e2:	601a      	str	r2, [r3, #0]
}
 800a4e4:	bf00      	nop
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr
 800a4f0:	20000b64 	.word	0x20000b64
 800a4f4:	20000d20 	.word	0x20000d20

0800a4f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b08a      	sub	sp, #40	; 0x28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a500:	2300      	movs	r3, #0
 800a502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a504:	f001 fcea 	bl	800bedc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a508:	4b5d      	ldr	r3, [pc, #372]	; (800a680 <pvPortMalloc+0x188>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d101      	bne.n	800a514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a510:	f000 f924 	bl	800a75c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a514:	4b5b      	ldr	r3, [pc, #364]	; (800a684 <pvPortMalloc+0x18c>)
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4013      	ands	r3, r2
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f040 8093 	bne.w	800a648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d01d      	beq.n	800a564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a528:	2208      	movs	r2, #8
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4413      	add	r3, r2
 800a52e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f003 0307 	and.w	r3, r3, #7
 800a536:	2b00      	cmp	r3, #0
 800a538:	d014      	beq.n	800a564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f023 0307 	bic.w	r3, r3, #7
 800a540:	3308      	adds	r3, #8
 800a542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f003 0307 	and.w	r3, r3, #7
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00a      	beq.n	800a564 <pvPortMalloc+0x6c>
	__asm volatile
 800a54e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a552:	f383 8811 	msr	BASEPRI, r3
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	617b      	str	r3, [r7, #20]
}
 800a560:	bf00      	nop
 800a562:	e7fe      	b.n	800a562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d06e      	beq.n	800a648 <pvPortMalloc+0x150>
 800a56a:	4b47      	ldr	r3, [pc, #284]	; (800a688 <pvPortMalloc+0x190>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	429a      	cmp	r2, r3
 800a572:	d869      	bhi.n	800a648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a574:	4b45      	ldr	r3, [pc, #276]	; (800a68c <pvPortMalloc+0x194>)
 800a576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a578:	4b44      	ldr	r3, [pc, #272]	; (800a68c <pvPortMalloc+0x194>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a57e:	e004      	b.n	800a58a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	429a      	cmp	r2, r3
 800a592:	d903      	bls.n	800a59c <pvPortMalloc+0xa4>
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1f1      	bne.n	800a580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a59c:	4b38      	ldr	r3, [pc, #224]	; (800a680 <pvPortMalloc+0x188>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d050      	beq.n	800a648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a5a6:	6a3b      	ldr	r3, [r7, #32]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2208      	movs	r2, #8
 800a5ac:	4413      	add	r3, r2
 800a5ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	6a3b      	ldr	r3, [r7, #32]
 800a5b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ba:	685a      	ldr	r2, [r3, #4]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	1ad2      	subs	r2, r2, r3
 800a5c0:	2308      	movs	r3, #8
 800a5c2:	005b      	lsls	r3, r3, #1
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d91f      	bls.n	800a608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a5c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	f003 0307 	and.w	r3, r3, #7
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00a      	beq.n	800a5f0 <pvPortMalloc+0xf8>
	__asm volatile
 800a5da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a5de:	f383 8811 	msr	BASEPRI, r3
 800a5e2:	f3bf 8f6f 	isb	sy
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	613b      	str	r3, [r7, #16]
}
 800a5ec:	bf00      	nop
 800a5ee:	e7fe      	b.n	800a5ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f2:	685a      	ldr	r2, [r3, #4]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	1ad2      	subs	r2, r2, r3
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a602:	69b8      	ldr	r0, [r7, #24]
 800a604:	f000 f90c 	bl	800a820 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a608:	4b1f      	ldr	r3, [pc, #124]	; (800a688 <pvPortMalloc+0x190>)
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	4a1d      	ldr	r2, [pc, #116]	; (800a688 <pvPortMalloc+0x190>)
 800a614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a616:	4b1c      	ldr	r3, [pc, #112]	; (800a688 <pvPortMalloc+0x190>)
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	4b1d      	ldr	r3, [pc, #116]	; (800a690 <pvPortMalloc+0x198>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d203      	bcs.n	800a62a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a622:	4b19      	ldr	r3, [pc, #100]	; (800a688 <pvPortMalloc+0x190>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a1a      	ldr	r2, [pc, #104]	; (800a690 <pvPortMalloc+0x198>)
 800a628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62c:	685a      	ldr	r2, [r3, #4]
 800a62e:	4b15      	ldr	r3, [pc, #84]	; (800a684 <pvPortMalloc+0x18c>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	431a      	orrs	r2, r3
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63a:	2200      	movs	r2, #0
 800a63c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a63e:	4b15      	ldr	r3, [pc, #84]	; (800a694 <pvPortMalloc+0x19c>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	3301      	adds	r3, #1
 800a644:	4a13      	ldr	r2, [pc, #76]	; (800a694 <pvPortMalloc+0x19c>)
 800a646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a648:	f001 fc8e 	bl	800bf68 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d101      	bne.n	800a656 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a652:	f7f8 fa43 	bl	8002adc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	f003 0307 	and.w	r3, r3, #7
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00a      	beq.n	800a676 <pvPortMalloc+0x17e>
	__asm volatile
 800a660:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	60fb      	str	r3, [r7, #12]
}
 800a672:	bf00      	nop
 800a674:	e7fe      	b.n	800a674 <pvPortMalloc+0x17c>
	return pvReturn;
 800a676:	69fb      	ldr	r3, [r7, #28]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3728      	adds	r7, #40	; 0x28
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	20007378 	.word	0x20007378
 800a684:	2000738c 	.word	0x2000738c
 800a688:	2000737c 	.word	0x2000737c
 800a68c:	20007370 	.word	0x20007370
 800a690:	20007380 	.word	0x20007380
 800a694:	20007384 	.word	0x20007384

0800a698 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d04d      	beq.n	800a746 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a6aa:	2308      	movs	r3, #8
 800a6ac:	425b      	negs	r3, r3
 800a6ae:	697a      	ldr	r2, [r7, #20]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	685a      	ldr	r2, [r3, #4]
 800a6bc:	4b24      	ldr	r3, [pc, #144]	; (800a750 <vPortFree+0xb8>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4013      	ands	r3, r2
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10a      	bne.n	800a6dc <vPortFree+0x44>
	__asm volatile
 800a6c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a6ca:	f383 8811 	msr	BASEPRI, r3
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	60fb      	str	r3, [r7, #12]
}
 800a6d8:	bf00      	nop
 800a6da:	e7fe      	b.n	800a6da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00a      	beq.n	800a6fa <vPortFree+0x62>
	__asm volatile
 800a6e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a6e8:	f383 8811 	msr	BASEPRI, r3
 800a6ec:	f3bf 8f6f 	isb	sy
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	60bb      	str	r3, [r7, #8]
}
 800a6f6:	bf00      	nop
 800a6f8:	e7fe      	b.n	800a6f8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	685a      	ldr	r2, [r3, #4]
 800a6fe:	4b14      	ldr	r3, [pc, #80]	; (800a750 <vPortFree+0xb8>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4013      	ands	r3, r2
 800a704:	2b00      	cmp	r3, #0
 800a706:	d01e      	beq.n	800a746 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d11a      	bne.n	800a746 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	685a      	ldr	r2, [r3, #4]
 800a714:	4b0e      	ldr	r3, [pc, #56]	; (800a750 <vPortFree+0xb8>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	43db      	mvns	r3, r3
 800a71a:	401a      	ands	r2, r3
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a720:	f001 fbdc 	bl	800bedc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	4b0a      	ldr	r3, [pc, #40]	; (800a754 <vPortFree+0xbc>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4413      	add	r3, r2
 800a72e:	4a09      	ldr	r2, [pc, #36]	; (800a754 <vPortFree+0xbc>)
 800a730:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a732:	6938      	ldr	r0, [r7, #16]
 800a734:	f000 f874 	bl	800a820 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a738:	4b07      	ldr	r3, [pc, #28]	; (800a758 <vPortFree+0xc0>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	3301      	adds	r3, #1
 800a73e:	4a06      	ldr	r2, [pc, #24]	; (800a758 <vPortFree+0xc0>)
 800a740:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a742:	f001 fc11 	bl	800bf68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a746:	bf00      	nop
 800a748:	3718      	adds	r7, #24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	2000738c 	.word	0x2000738c
 800a754:	2000737c 	.word	0x2000737c
 800a758:	20007388 	.word	0x20007388

0800a75c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a762:	f244 6350 	movw	r3, #18000	; 0x4650
 800a766:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a768:	4b27      	ldr	r3, [pc, #156]	; (800a808 <prvHeapInit+0xac>)
 800a76a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f003 0307 	and.w	r3, r3, #7
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00c      	beq.n	800a790 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	3307      	adds	r3, #7
 800a77a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f023 0307 	bic.w	r3, r3, #7
 800a782:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	4a1f      	ldr	r2, [pc, #124]	; (800a808 <prvHeapInit+0xac>)
 800a78c:	4413      	add	r3, r2
 800a78e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a794:	4a1d      	ldr	r2, [pc, #116]	; (800a80c <prvHeapInit+0xb0>)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a79a:	4b1c      	ldr	r3, [pc, #112]	; (800a80c <prvHeapInit+0xb0>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a7a8:	2208      	movs	r2, #8
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	1a9b      	subs	r3, r3, r2
 800a7ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f023 0307 	bic.w	r3, r3, #7
 800a7b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	4a15      	ldr	r2, [pc, #84]	; (800a810 <prvHeapInit+0xb4>)
 800a7bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a7be:	4b14      	ldr	r3, [pc, #80]	; (800a810 <prvHeapInit+0xb4>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a7c6:	4b12      	ldr	r3, [pc, #72]	; (800a810 <prvHeapInit+0xb4>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	1ad2      	subs	r2, r2, r3
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a7dc:	4b0c      	ldr	r3, [pc, #48]	; (800a810 <prvHeapInit+0xb4>)
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	4a0a      	ldr	r2, [pc, #40]	; (800a814 <prvHeapInit+0xb8>)
 800a7ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	4a09      	ldr	r2, [pc, #36]	; (800a818 <prvHeapInit+0xbc>)
 800a7f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a7f4:	4b09      	ldr	r3, [pc, #36]	; (800a81c <prvHeapInit+0xc0>)
 800a7f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a7fa:	601a      	str	r2, [r3, #0]
}
 800a7fc:	bf00      	nop
 800a7fe:	3714      	adds	r7, #20
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	20002d20 	.word	0x20002d20
 800a80c:	20007370 	.word	0x20007370
 800a810:	20007378 	.word	0x20007378
 800a814:	20007380 	.word	0x20007380
 800a818:	2000737c 	.word	0x2000737c
 800a81c:	2000738c 	.word	0x2000738c

0800a820 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a828:	4b28      	ldr	r3, [pc, #160]	; (800a8cc <prvInsertBlockIntoFreeList+0xac>)
 800a82a:	60fb      	str	r3, [r7, #12]
 800a82c:	e002      	b.n	800a834 <prvInsertBlockIntoFreeList+0x14>
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	60fb      	str	r3, [r7, #12]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d8f7      	bhi.n	800a82e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	4413      	add	r3, r2
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d108      	bne.n	800a862 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	685a      	ldr	r2, [r3, #4]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	441a      	add	r2, r3
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	441a      	add	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	429a      	cmp	r2, r3
 800a874:	d118      	bne.n	800a8a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	4b15      	ldr	r3, [pc, #84]	; (800a8d0 <prvInsertBlockIntoFreeList+0xb0>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d00d      	beq.n	800a89e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	685a      	ldr	r2, [r3, #4]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	441a      	add	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	e008      	b.n	800a8b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a89e:	4b0c      	ldr	r3, [pc, #48]	; (800a8d0 <prvInsertBlockIntoFreeList+0xb0>)
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	601a      	str	r2, [r3, #0]
 800a8a6:	e003      	b.n	800a8b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d002      	beq.n	800a8be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8be:	bf00      	nop
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	20007370 	.word	0x20007370
 800a8d0:	20007378 	.word	0x20007378

0800a8d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f103 0208 	add.w	r2, r3, #8
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f103 0208 	add.w	r2, r3, #8
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f103 0208 	add.w	r2, r3, #8
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a922:	bf00      	nop
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a92e:	b480      	push	{r7}
 800a930:	b085      	sub	sp, #20
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	689a      	ldr	r2, [r3, #8]
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	683a      	ldr	r2, [r7, #0]
 800a952:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	1c5a      	adds	r2, r3, #1
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	601a      	str	r2, [r3, #0]
}
 800a96a:	bf00      	nop
 800a96c:	3714      	adds	r7, #20
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr

0800a976 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a976:	b480      	push	{r7}
 800a978:	b085      	sub	sp, #20
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
 800a97e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98c:	d103      	bne.n	800a996 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	60fb      	str	r3, [r7, #12]
 800a994:	e00c      	b.n	800a9b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	3308      	adds	r3, #8
 800a99a:	60fb      	str	r3, [r7, #12]
 800a99c:	e002      	b.n	800a9a4 <vListInsert+0x2e>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	60fb      	str	r3, [r7, #12]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d2f6      	bcs.n	800a99e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	685a      	ldr	r2, [r3, #4]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	683a      	ldr	r2, [r7, #0]
 800a9ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	1c5a      	adds	r2, r3, #1
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	601a      	str	r2, [r3, #0]
}
 800a9dc:	bf00      	nop
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	6892      	ldr	r2, [r2, #8]
 800a9fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	6852      	ldr	r2, [r2, #4]
 800aa08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d103      	bne.n	800aa1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	689a      	ldr	r2, [r3, #8]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	1e5a      	subs	r2, r3, #1
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3714      	adds	r7, #20
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	3b04      	subs	r3, #4
 800aa4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	3b04      	subs	r3, #4
 800aa5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	f023 0201 	bic.w	r2, r3, #1
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3b04      	subs	r3, #4
 800aa6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa6c:	4a0c      	ldr	r2, [pc, #48]	; (800aaa0 <pxPortInitialiseStack+0x64>)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	3b14      	subs	r3, #20
 800aa76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	3b04      	subs	r3, #4
 800aa82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f06f 0202 	mvn.w	r2, #2
 800aa8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	3b20      	subs	r3, #32
 800aa90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa92:	68fb      	ldr	r3, [r7, #12]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3714      	adds	r7, #20
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	0800aaa5 	.word	0x0800aaa5

0800aaa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aaae:	4b12      	ldr	r3, [pc, #72]	; (800aaf8 <prvTaskExitError+0x54>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab6:	d00a      	beq.n	800aace <prvTaskExitError+0x2a>
	__asm volatile
 800aab8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	60fb      	str	r3, [r7, #12]
}
 800aaca:	bf00      	nop
 800aacc:	e7fe      	b.n	800aacc <prvTaskExitError+0x28>
	__asm volatile
 800aace:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	60bb      	str	r3, [r7, #8]
}
 800aae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aae2:	bf00      	nop
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d0fc      	beq.n	800aae4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aaea:	bf00      	nop
 800aaec:	bf00      	nop
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr
 800aaf8:	20000028 	.word	0x20000028
 800aafc:	00000000 	.word	0x00000000

0800ab00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab00:	4b07      	ldr	r3, [pc, #28]	; (800ab20 <pxCurrentTCBConst2>)
 800ab02:	6819      	ldr	r1, [r3, #0]
 800ab04:	6808      	ldr	r0, [r1, #0]
 800ab06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab0a:	f380 8809 	msr	PSP, r0
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f04f 0000 	mov.w	r0, #0
 800ab16:	f380 8811 	msr	BASEPRI, r0
 800ab1a:	4770      	bx	lr
 800ab1c:	f3af 8000 	nop.w

0800ab20 <pxCurrentTCBConst2>:
 800ab20:	200073d8 	.word	0x200073d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab24:	bf00      	nop
 800ab26:	bf00      	nop

0800ab28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab28:	4808      	ldr	r0, [pc, #32]	; (800ab4c <prvPortStartFirstTask+0x24>)
 800ab2a:	6800      	ldr	r0, [r0, #0]
 800ab2c:	6800      	ldr	r0, [r0, #0]
 800ab2e:	f380 8808 	msr	MSP, r0
 800ab32:	f04f 0000 	mov.w	r0, #0
 800ab36:	f380 8814 	msr	CONTROL, r0
 800ab3a:	b662      	cpsie	i
 800ab3c:	b661      	cpsie	f
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	df00      	svc	0
 800ab48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab4a:	bf00      	nop
 800ab4c:	e000ed08 	.word	0xe000ed08

0800ab50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ab56:	4b46      	ldr	r3, [pc, #280]	; (800ac70 <xPortStartScheduler+0x120>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a46      	ldr	r2, [pc, #280]	; (800ac74 <xPortStartScheduler+0x124>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d10a      	bne.n	800ab76 <xPortStartScheduler+0x26>
	__asm volatile
 800ab60:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ab64:	f383 8811 	msr	BASEPRI, r3
 800ab68:	f3bf 8f6f 	isb	sy
 800ab6c:	f3bf 8f4f 	dsb	sy
 800ab70:	613b      	str	r3, [r7, #16]
}
 800ab72:	bf00      	nop
 800ab74:	e7fe      	b.n	800ab74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab76:	4b3e      	ldr	r3, [pc, #248]	; (800ac70 <xPortStartScheduler+0x120>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a3f      	ldr	r2, [pc, #252]	; (800ac78 <xPortStartScheduler+0x128>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d10a      	bne.n	800ab96 <xPortStartScheduler+0x46>
	__asm volatile
 800ab80:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	60fb      	str	r3, [r7, #12]
}
 800ab92:	bf00      	nop
 800ab94:	e7fe      	b.n	800ab94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab96:	4b39      	ldr	r3, [pc, #228]	; (800ac7c <xPortStartScheduler+0x12c>)
 800ab98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	22ff      	movs	r2, #255	; 0xff
 800aba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	b2db      	uxtb	r3, r3
 800abae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800abb0:	78fb      	ldrb	r3, [r7, #3]
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 800abb8:	b2da      	uxtb	r2, r3
 800abba:	4b31      	ldr	r3, [pc, #196]	; (800ac80 <xPortStartScheduler+0x130>)
 800abbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800abbe:	4b31      	ldr	r3, [pc, #196]	; (800ac84 <xPortStartScheduler+0x134>)
 800abc0:	2207      	movs	r2, #7
 800abc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abc4:	e009      	b.n	800abda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800abc6:	4b2f      	ldr	r3, [pc, #188]	; (800ac84 <xPortStartScheduler+0x134>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	3b01      	subs	r3, #1
 800abcc:	4a2d      	ldr	r2, [pc, #180]	; (800ac84 <xPortStartScheduler+0x134>)
 800abce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800abd0:	78fb      	ldrb	r3, [r7, #3]
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	005b      	lsls	r3, r3, #1
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abda:	78fb      	ldrb	r3, [r7, #3]
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abe2:	2b80      	cmp	r3, #128	; 0x80
 800abe4:	d0ef      	beq.n	800abc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800abe6:	4b27      	ldr	r3, [pc, #156]	; (800ac84 <xPortStartScheduler+0x134>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f1c3 0307 	rsb	r3, r3, #7
 800abee:	2b04      	cmp	r3, #4
 800abf0:	d00a      	beq.n	800ac08 <xPortStartScheduler+0xb8>
	__asm volatile
 800abf2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800abf6:	f383 8811 	msr	BASEPRI, r3
 800abfa:	f3bf 8f6f 	isb	sy
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	60bb      	str	r3, [r7, #8]
}
 800ac04:	bf00      	nop
 800ac06:	e7fe      	b.n	800ac06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac08:	4b1e      	ldr	r3, [pc, #120]	; (800ac84 <xPortStartScheduler+0x134>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	021b      	lsls	r3, r3, #8
 800ac0e:	4a1d      	ldr	r2, [pc, #116]	; (800ac84 <xPortStartScheduler+0x134>)
 800ac10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac12:	4b1c      	ldr	r3, [pc, #112]	; (800ac84 <xPortStartScheduler+0x134>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac1a:	4a1a      	ldr	r2, [pc, #104]	; (800ac84 <xPortStartScheduler+0x134>)
 800ac1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac26:	4b18      	ldr	r3, [pc, #96]	; (800ac88 <xPortStartScheduler+0x138>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a17      	ldr	r2, [pc, #92]	; (800ac88 <xPortStartScheduler+0x138>)
 800ac2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac32:	4b15      	ldr	r3, [pc, #84]	; (800ac88 <xPortStartScheduler+0x138>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a14      	ldr	r2, [pc, #80]	; (800ac88 <xPortStartScheduler+0x138>)
 800ac38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ac3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac3e:	f000 f8bb 	bl	800adb8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac42:	4b12      	ldr	r3, [pc, #72]	; (800ac8c <xPortStartScheduler+0x13c>)
 800ac44:	2200      	movs	r2, #0
 800ac46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac48:	f000 f8da 	bl	800ae00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac4c:	4b10      	ldr	r3, [pc, #64]	; (800ac90 <xPortStartScheduler+0x140>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a0f      	ldr	r2, [pc, #60]	; (800ac90 <xPortStartScheduler+0x140>)
 800ac52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ac56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac58:	f7ff ff66 	bl	800ab28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac5c:	f001 faf4 	bl	800c248 <vTaskSwitchContext>
	prvTaskExitError();
 800ac60:	f7ff ff20 	bl	800aaa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3718      	adds	r7, #24
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	e000ed00 	.word	0xe000ed00
 800ac74:	410fc271 	.word	0x410fc271
 800ac78:	410fc270 	.word	0x410fc270
 800ac7c:	e000e400 	.word	0xe000e400
 800ac80:	20007390 	.word	0x20007390
 800ac84:	20007394 	.word	0x20007394
 800ac88:	e000ed20 	.word	0xe000ed20
 800ac8c:	20000028 	.word	0x20000028
 800ac90:	e000ef34 	.word	0xe000ef34

0800ac94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
	__asm volatile
 800ac9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	607b      	str	r3, [r7, #4]
}
 800acac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800acae:	4b0f      	ldr	r3, [pc, #60]	; (800acec <vPortEnterCritical+0x58>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	3301      	adds	r3, #1
 800acb4:	4a0d      	ldr	r2, [pc, #52]	; (800acec <vPortEnterCritical+0x58>)
 800acb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800acb8:	4b0c      	ldr	r3, [pc, #48]	; (800acec <vPortEnterCritical+0x58>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d10f      	bne.n	800ace0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800acc0:	4b0b      	ldr	r3, [pc, #44]	; (800acf0 <vPortEnterCritical+0x5c>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00a      	beq.n	800ace0 <vPortEnterCritical+0x4c>
	__asm volatile
 800acca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	603b      	str	r3, [r7, #0]
}
 800acdc:	bf00      	nop
 800acde:	e7fe      	b.n	800acde <vPortEnterCritical+0x4a>
	}
}
 800ace0:	bf00      	nop
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr
 800acec:	20000028 	.word	0x20000028
 800acf0:	e000ed04 	.word	0xe000ed04

0800acf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800acfa:	4b12      	ldr	r3, [pc, #72]	; (800ad44 <vPortExitCritical+0x50>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10a      	bne.n	800ad18 <vPortExitCritical+0x24>
	__asm volatile
 800ad02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ad06:	f383 8811 	msr	BASEPRI, r3
 800ad0a:	f3bf 8f6f 	isb	sy
 800ad0e:	f3bf 8f4f 	dsb	sy
 800ad12:	607b      	str	r3, [r7, #4]
}
 800ad14:	bf00      	nop
 800ad16:	e7fe      	b.n	800ad16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ad18:	4b0a      	ldr	r3, [pc, #40]	; (800ad44 <vPortExitCritical+0x50>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	4a09      	ldr	r2, [pc, #36]	; (800ad44 <vPortExitCritical+0x50>)
 800ad20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad22:	4b08      	ldr	r3, [pc, #32]	; (800ad44 <vPortExitCritical+0x50>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d105      	bne.n	800ad36 <vPortExitCritical+0x42>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	f383 8811 	msr	BASEPRI, r3
}
 800ad34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad36:	bf00      	nop
 800ad38:	370c      	adds	r7, #12
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	20000028 	.word	0x20000028
	...

0800ad50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad50:	f3ef 8009 	mrs	r0, PSP
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	4b15      	ldr	r3, [pc, #84]	; (800adb0 <pxCurrentTCBConst>)
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	f01e 0f10 	tst.w	lr, #16
 800ad60:	bf08      	it	eq
 800ad62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6a:	6010      	str	r0, [r2, #0]
 800ad6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad70:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800ad74:	f380 8811 	msr	BASEPRI, r0
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f001 fa62 	bl	800c248 <vTaskSwitchContext>
 800ad84:	f04f 0000 	mov.w	r0, #0
 800ad88:	f380 8811 	msr	BASEPRI, r0
 800ad8c:	bc09      	pop	{r0, r3}
 800ad8e:	6819      	ldr	r1, [r3, #0]
 800ad90:	6808      	ldr	r0, [r1, #0]
 800ad92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad96:	f01e 0f10 	tst.w	lr, #16
 800ad9a:	bf08      	it	eq
 800ad9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ada0:	f380 8809 	msr	PSP, r0
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	f3af 8000 	nop.w

0800adb0 <pxCurrentTCBConst>:
 800adb0:	200073d8 	.word	0x200073d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800adb4:	bf00      	nop
 800adb6:	bf00      	nop

0800adb8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800adb8:	b480      	push	{r7}
 800adba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800adbc:	4b0b      	ldr	r3, [pc, #44]	; (800adec <vPortSetupTimerInterrupt+0x34>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800adc2:	4b0b      	ldr	r3, [pc, #44]	; (800adf0 <vPortSetupTimerInterrupt+0x38>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800adc8:	4b0a      	ldr	r3, [pc, #40]	; (800adf4 <vPortSetupTimerInterrupt+0x3c>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a0a      	ldr	r2, [pc, #40]	; (800adf8 <vPortSetupTimerInterrupt+0x40>)
 800adce:	fba2 2303 	umull	r2, r3, r2, r3
 800add2:	099b      	lsrs	r3, r3, #6
 800add4:	4a09      	ldr	r2, [pc, #36]	; (800adfc <vPortSetupTimerInterrupt+0x44>)
 800add6:	3b01      	subs	r3, #1
 800add8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800adda:	4b04      	ldr	r3, [pc, #16]	; (800adec <vPortSetupTimerInterrupt+0x34>)
 800addc:	2207      	movs	r2, #7
 800adde:	601a      	str	r2, [r3, #0]
}
 800ade0:	bf00      	nop
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	e000e010 	.word	0xe000e010
 800adf0:	e000e018 	.word	0xe000e018
 800adf4:	20000000 	.word	0x20000000
 800adf8:	10624dd3 	.word	0x10624dd3
 800adfc:	e000e014 	.word	0xe000e014

0800ae00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ae10 <vPortEnableVFP+0x10>
 800ae04:	6801      	ldr	r1, [r0, #0]
 800ae06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ae0a:	6001      	str	r1, [r0, #0]
 800ae0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae0e:	bf00      	nop
 800ae10:	e000ed88 	.word	0xe000ed88

0800ae14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae1a:	f3ef 8305 	mrs	r3, IPSR
 800ae1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2b0f      	cmp	r3, #15
 800ae24:	d914      	bls.n	800ae50 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae26:	4a17      	ldr	r2, [pc, #92]	; (800ae84 <vPortValidateInterruptPriority+0x70>)
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae30:	4b15      	ldr	r3, [pc, #84]	; (800ae88 <vPortValidateInterruptPriority+0x74>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	7afa      	ldrb	r2, [r7, #11]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d20a      	bcs.n	800ae50 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ae3a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	607b      	str	r3, [r7, #4]
}
 800ae4c:	bf00      	nop
 800ae4e:	e7fe      	b.n	800ae4e <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ae50:	4b0e      	ldr	r3, [pc, #56]	; (800ae8c <vPortValidateInterruptPriority+0x78>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae58:	4b0d      	ldr	r3, [pc, #52]	; (800ae90 <vPortValidateInterruptPriority+0x7c>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d90a      	bls.n	800ae76 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ae60:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	603b      	str	r3, [r7, #0]
}
 800ae72:	bf00      	nop
 800ae74:	e7fe      	b.n	800ae74 <vPortValidateInterruptPriority+0x60>
	}
 800ae76:	bf00      	nop
 800ae78:	3714      	adds	r7, #20
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	e000e3f0 	.word	0xe000e3f0
 800ae88:	20007390 	.word	0x20007390
 800ae8c:	e000ed0c 	.word	0xe000ed0c
 800ae90:	20007394 	.word	0x20007394

0800ae94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10a      	bne.n	800aebe <xQueueGenericReset+0x2a>
	__asm volatile
 800aea8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aeac:	f383 8811 	msr	BASEPRI, r3
 800aeb0:	f3bf 8f6f 	isb	sy
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	60bb      	str	r3, [r7, #8]
}
 800aeba:	bf00      	nop
 800aebc:	e7fe      	b.n	800aebc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aebe:	f7ff fee9 	bl	800ac94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeca:	68f9      	ldr	r1, [r7, #12]
 800aecc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aece:	fb01 f303 	mul.w	r3, r1, r3
 800aed2:	441a      	add	r2, r3
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeee:	3b01      	subs	r3, #1
 800aef0:	68f9      	ldr	r1, [r7, #12]
 800aef2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aef4:	fb01 f303 	mul.w	r3, r1, r3
 800aef8:	441a      	add	r2, r3
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	22ff      	movs	r2, #255	; 0xff
 800af02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	22ff      	movs	r2, #255	; 0xff
 800af0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d114      	bne.n	800af3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	691b      	ldr	r3, [r3, #16]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d01a      	beq.n	800af52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	3310      	adds	r3, #16
 800af20:	4618      	mov	r0, r3
 800af22:	f001 fa99 	bl	800c458 <xTaskRemoveFromEventList>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d012      	beq.n	800af52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800af2c:	4b0c      	ldr	r3, [pc, #48]	; (800af60 <xQueueGenericReset+0xcc>)
 800af2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af32:	601a      	str	r2, [r3, #0]
 800af34:	f3bf 8f4f 	dsb	sy
 800af38:	f3bf 8f6f 	isb	sy
 800af3c:	e009      	b.n	800af52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	3310      	adds	r3, #16
 800af42:	4618      	mov	r0, r3
 800af44:	f7ff fcc6 	bl	800a8d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	3324      	adds	r3, #36	; 0x24
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7ff fcc1 	bl	800a8d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800af52:	f7ff fecf 	bl	800acf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800af56:	2301      	movs	r3, #1
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	e000ed04 	.word	0xe000ed04

0800af64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800af64:	b580      	push	{r7, lr}
 800af66:	b08e      	sub	sp, #56	; 0x38
 800af68:	af02      	add	r7, sp, #8
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
 800af70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10a      	bne.n	800af8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800af78:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800af7c:	f383 8811 	msr	BASEPRI, r3
 800af80:	f3bf 8f6f 	isb	sy
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af8a:	bf00      	nop
 800af8c:	e7fe      	b.n	800af8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d10a      	bne.n	800afaa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800af94:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800af98:	f383 8811 	msr	BASEPRI, r3
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afa6:	bf00      	nop
 800afa8:	e7fe      	b.n	800afa8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d002      	beq.n	800afb6 <xQueueGenericCreateStatic+0x52>
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d001      	beq.n	800afba <xQueueGenericCreateStatic+0x56>
 800afb6:	2301      	movs	r3, #1
 800afb8:	e000      	b.n	800afbc <xQueueGenericCreateStatic+0x58>
 800afba:	2300      	movs	r3, #0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d10a      	bne.n	800afd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800afc0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800afc4:	f383 8811 	msr	BASEPRI, r3
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	623b      	str	r3, [r7, #32]
}
 800afd2:	bf00      	nop
 800afd4:	e7fe      	b.n	800afd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d102      	bne.n	800afe2 <xQueueGenericCreateStatic+0x7e>
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <xQueueGenericCreateStatic+0x82>
 800afe2:	2301      	movs	r3, #1
 800afe4:	e000      	b.n	800afe8 <xQueueGenericCreateStatic+0x84>
 800afe6:	2300      	movs	r3, #0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10a      	bne.n	800b002 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800afec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	61fb      	str	r3, [r7, #28]
}
 800affe:	bf00      	nop
 800b000:	e7fe      	b.n	800b000 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b002:	2350      	movs	r3, #80	; 0x50
 800b004:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	2b50      	cmp	r3, #80	; 0x50
 800b00a:	d00a      	beq.n	800b022 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b00c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b010:	f383 8811 	msr	BASEPRI, r3
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	61bb      	str	r3, [r7, #24]
}
 800b01e:	bf00      	nop
 800b020:	e7fe      	b.n	800b020 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b022:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00d      	beq.n	800b04a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b030:	2201      	movs	r2, #1
 800b032:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b036:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03c:	9300      	str	r3, [sp, #0]
 800b03e:	4613      	mov	r3, r2
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	68b9      	ldr	r1, [r7, #8]
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f000 f805 	bl	800b054 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3730      	adds	r7, #48	; 0x30
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
 800b060:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d103      	bne.n	800b070 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	69ba      	ldr	r2, [r7, #24]
 800b06c:	601a      	str	r2, [r3, #0]
 800b06e:	e002      	b.n	800b076 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	68ba      	ldr	r2, [r7, #8]
 800b080:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b082:	2101      	movs	r1, #1
 800b084:	69b8      	ldr	r0, [r7, #24]
 800b086:	f7ff ff05 	bl	800ae94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	78fa      	ldrb	r2, [r7, #3]
 800b08e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b092:	bf00      	nop
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
	...

0800b09c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b08e      	sub	sp, #56	; 0x38
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
 800b0a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d10a      	bne.n	800b0ce <xQueueGenericSend+0x32>
	__asm volatile
 800b0b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b0bc:	f383 8811 	msr	BASEPRI, r3
 800b0c0:	f3bf 8f6f 	isb	sy
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b0ca:	bf00      	nop
 800b0cc:	e7fe      	b.n	800b0cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d103      	bne.n	800b0dc <xQueueGenericSend+0x40>
 800b0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d101      	bne.n	800b0e0 <xQueueGenericSend+0x44>
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e000      	b.n	800b0e2 <xQueueGenericSend+0x46>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d10a      	bne.n	800b0fc <xQueueGenericSend+0x60>
	__asm volatile
 800b0e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b0ea:	f383 8811 	msr	BASEPRI, r3
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	f3bf 8f4f 	dsb	sy
 800b0f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b0f8:	bf00      	nop
 800b0fa:	e7fe      	b.n	800b0fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d103      	bne.n	800b10a <xQueueGenericSend+0x6e>
 800b102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b106:	2b01      	cmp	r3, #1
 800b108:	d101      	bne.n	800b10e <xQueueGenericSend+0x72>
 800b10a:	2301      	movs	r3, #1
 800b10c:	e000      	b.n	800b110 <xQueueGenericSend+0x74>
 800b10e:	2300      	movs	r3, #0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d10a      	bne.n	800b12a <xQueueGenericSend+0x8e>
	__asm volatile
 800b114:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b118:	f383 8811 	msr	BASEPRI, r3
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	623b      	str	r3, [r7, #32]
}
 800b126:	bf00      	nop
 800b128:	e7fe      	b.n	800b128 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b12a:	f001 fb95 	bl	800c858 <xTaskGetSchedulerState>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d102      	bne.n	800b13a <xQueueGenericSend+0x9e>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d101      	bne.n	800b13e <xQueueGenericSend+0xa2>
 800b13a:	2301      	movs	r3, #1
 800b13c:	e000      	b.n	800b140 <xQueueGenericSend+0xa4>
 800b13e:	2300      	movs	r3, #0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d10a      	bne.n	800b15a <xQueueGenericSend+0xbe>
	__asm volatile
 800b144:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	61fb      	str	r3, [r7, #28]
}
 800b156:	bf00      	nop
 800b158:	e7fe      	b.n	800b158 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b15a:	f7ff fd9b 	bl	800ac94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b166:	429a      	cmp	r2, r3
 800b168:	d302      	bcc.n	800b170 <xQueueGenericSend+0xd4>
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d129      	bne.n	800b1c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b170:	683a      	ldr	r2, [r7, #0]
 800b172:	68b9      	ldr	r1, [r7, #8]
 800b174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b176:	f000 fa0b 	bl	800b590 <prvCopyDataToQueue>
 800b17a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b180:	2b00      	cmp	r3, #0
 800b182:	d010      	beq.n	800b1a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b186:	3324      	adds	r3, #36	; 0x24
 800b188:	4618      	mov	r0, r3
 800b18a:	f001 f965 	bl	800c458 <xTaskRemoveFromEventList>
 800b18e:	4603      	mov	r3, r0
 800b190:	2b00      	cmp	r3, #0
 800b192:	d013      	beq.n	800b1bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b194:	4b3f      	ldr	r3, [pc, #252]	; (800b294 <xQueueGenericSend+0x1f8>)
 800b196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b19a:	601a      	str	r2, [r3, #0]
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	f3bf 8f6f 	isb	sy
 800b1a4:	e00a      	b.n	800b1bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d007      	beq.n	800b1bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b1ac:	4b39      	ldr	r3, [pc, #228]	; (800b294 <xQueueGenericSend+0x1f8>)
 800b1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1b2:	601a      	str	r2, [r3, #0]
 800b1b4:	f3bf 8f4f 	dsb	sy
 800b1b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b1bc:	f7ff fd9a 	bl	800acf4 <vPortExitCritical>
				return pdPASS;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e063      	b.n	800b28c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d103      	bne.n	800b1d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1ca:	f7ff fd93 	bl	800acf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	e05c      	b.n	800b28c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d106      	bne.n	800b1e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1d8:	f107 0314 	add.w	r3, r7, #20
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f001 f9a1 	bl	800c524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1e6:	f7ff fd85 	bl	800acf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b1ea:	f000 fe77 	bl	800bedc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b1ee:	f7ff fd51 	bl	800ac94 <vPortEnterCritical>
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1f8:	b25b      	sxtb	r3, r3
 800b1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1fe:	d103      	bne.n	800b208 <xQueueGenericSend+0x16c>
 800b200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b202:	2200      	movs	r2, #0
 800b204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b20e:	b25b      	sxtb	r3, r3
 800b210:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b214:	d103      	bne.n	800b21e <xQueueGenericSend+0x182>
 800b216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b21e:	f7ff fd69 	bl	800acf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b222:	1d3a      	adds	r2, r7, #4
 800b224:	f107 0314 	add.w	r3, r7, #20
 800b228:	4611      	mov	r1, r2
 800b22a:	4618      	mov	r0, r3
 800b22c:	f001 f990 	bl	800c550 <xTaskCheckForTimeOut>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d124      	bne.n	800b280 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b236:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b238:	f000 faa2 	bl	800b780 <prvIsQueueFull>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d018      	beq.n	800b274 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b244:	3310      	adds	r3, #16
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	4611      	mov	r1, r2
 800b24a:	4618      	mov	r0, r3
 800b24c:	f001 f8b4 	bl	800c3b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b252:	f000 fa2d 	bl	800b6b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b256:	f000 fe87 	bl	800bf68 <xTaskResumeAll>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f47f af7c 	bne.w	800b15a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b262:	4b0c      	ldr	r3, [pc, #48]	; (800b294 <xQueueGenericSend+0x1f8>)
 800b264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b268:	601a      	str	r2, [r3, #0]
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	e772      	b.n	800b15a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b276:	f000 fa1b 	bl	800b6b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b27a:	f000 fe75 	bl	800bf68 <xTaskResumeAll>
 800b27e:	e76c      	b.n	800b15a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b282:	f000 fa15 	bl	800b6b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b286:	f000 fe6f 	bl	800bf68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b28a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3738      	adds	r7, #56	; 0x38
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	e000ed04 	.word	0xe000ed04

0800b298 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b090      	sub	sp, #64	; 0x40
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
 800b2a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d10a      	bne.n	800b2c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b2b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b2c2:	bf00      	nop
 800b2c4:	e7fe      	b.n	800b2c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d103      	bne.n	800b2d4 <xQueueGenericSendFromISR+0x3c>
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d101      	bne.n	800b2d8 <xQueueGenericSendFromISR+0x40>
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e000      	b.n	800b2da <xQueueGenericSendFromISR+0x42>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d10a      	bne.n	800b2f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b2de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b2f0:	bf00      	nop
 800b2f2:	e7fe      	b.n	800b2f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	d103      	bne.n	800b302 <xQueueGenericSendFromISR+0x6a>
 800b2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d101      	bne.n	800b306 <xQueueGenericSendFromISR+0x6e>
 800b302:	2301      	movs	r3, #1
 800b304:	e000      	b.n	800b308 <xQueueGenericSendFromISR+0x70>
 800b306:	2300      	movs	r3, #0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d10a      	bne.n	800b322 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b30c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b310:	f383 8811 	msr	BASEPRI, r3
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	623b      	str	r3, [r7, #32]
}
 800b31e:	bf00      	nop
 800b320:	e7fe      	b.n	800b320 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b322:	f7ff fd77 	bl	800ae14 <vPortValidateInterruptPriority>
	__asm volatile
 800b326:	f3ef 8211 	mrs	r2, BASEPRI
 800b32a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b32e:	f383 8811 	msr	BASEPRI, r3
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	f3bf 8f4f 	dsb	sy
 800b33a:	61fa      	str	r2, [r7, #28]
 800b33c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b33e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b340:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d302      	bcc.n	800b354 <xQueueGenericSendFromISR+0xbc>
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	2b02      	cmp	r3, #2
 800b352:	d12f      	bne.n	800b3b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b356:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b35a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b362:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b364:	683a      	ldr	r2, [r7, #0]
 800b366:	68b9      	ldr	r1, [r7, #8]
 800b368:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b36a:	f000 f911 	bl	800b590 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b36e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b376:	d112      	bne.n	800b39e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d016      	beq.n	800b3ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b382:	3324      	adds	r3, #36	; 0x24
 800b384:	4618      	mov	r0, r3
 800b386:	f001 f867 	bl	800c458 <xTaskRemoveFromEventList>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00e      	beq.n	800b3ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00b      	beq.n	800b3ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	601a      	str	r2, [r3, #0]
 800b39c:	e007      	b.n	800b3ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b39e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	b25a      	sxtb	r2, r3
 800b3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b3b2:	e001      	b.n	800b3b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ba:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	f383 8811 	msr	BASEPRI, r3
}
 800b3c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3740      	adds	r7, #64	; 0x40
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
	...

0800b3d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b08c      	sub	sp, #48	; 0x30
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10a      	bne.n	800b400 <xQueueReceive+0x30>
	__asm volatile
 800b3ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b3ee:	f383 8811 	msr	BASEPRI, r3
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	623b      	str	r3, [r7, #32]
}
 800b3fc:	bf00      	nop
 800b3fe:	e7fe      	b.n	800b3fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d103      	bne.n	800b40e <xQueueReceive+0x3e>
 800b406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d101      	bne.n	800b412 <xQueueReceive+0x42>
 800b40e:	2301      	movs	r3, #1
 800b410:	e000      	b.n	800b414 <xQueueReceive+0x44>
 800b412:	2300      	movs	r3, #0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d10a      	bne.n	800b42e <xQueueReceive+0x5e>
	__asm volatile
 800b418:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b41c:	f383 8811 	msr	BASEPRI, r3
 800b420:	f3bf 8f6f 	isb	sy
 800b424:	f3bf 8f4f 	dsb	sy
 800b428:	61fb      	str	r3, [r7, #28]
}
 800b42a:	bf00      	nop
 800b42c:	e7fe      	b.n	800b42c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b42e:	f001 fa13 	bl	800c858 <xTaskGetSchedulerState>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d102      	bne.n	800b43e <xQueueReceive+0x6e>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d101      	bne.n	800b442 <xQueueReceive+0x72>
 800b43e:	2301      	movs	r3, #1
 800b440:	e000      	b.n	800b444 <xQueueReceive+0x74>
 800b442:	2300      	movs	r3, #0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d10a      	bne.n	800b45e <xQueueReceive+0x8e>
	__asm volatile
 800b448:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b44c:	f383 8811 	msr	BASEPRI, r3
 800b450:	f3bf 8f6f 	isb	sy
 800b454:	f3bf 8f4f 	dsb	sy
 800b458:	61bb      	str	r3, [r7, #24]
}
 800b45a:	bf00      	nop
 800b45c:	e7fe      	b.n	800b45c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b45e:	f7ff fc19 	bl	800ac94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b466:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d01f      	beq.n	800b4ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b46e:	68b9      	ldr	r1, [r7, #8]
 800b470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b472:	f000 f8f7 	bl	800b664 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b478:	1e5a      	subs	r2, r3, #1
 800b47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b480:	691b      	ldr	r3, [r3, #16]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00f      	beq.n	800b4a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b488:	3310      	adds	r3, #16
 800b48a:	4618      	mov	r0, r3
 800b48c:	f000 ffe4 	bl	800c458 <xTaskRemoveFromEventList>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d007      	beq.n	800b4a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b496:	4b3d      	ldr	r3, [pc, #244]	; (800b58c <xQueueReceive+0x1bc>)
 800b498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b49c:	601a      	str	r2, [r3, #0]
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b4a6:	f7ff fc25 	bl	800acf4 <vPortExitCritical>
				return pdPASS;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e069      	b.n	800b582 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d103      	bne.n	800b4bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b4b4:	f7ff fc1e 	bl	800acf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	e062      	b.n	800b582 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d106      	bne.n	800b4d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b4c2:	f107 0310 	add.w	r3, r7, #16
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f001 f82c 	bl	800c524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b4d0:	f7ff fc10 	bl	800acf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b4d4:	f000 fd02 	bl	800bedc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b4d8:	f7ff fbdc 	bl	800ac94 <vPortEnterCritical>
 800b4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4e2:	b25b      	sxtb	r3, r3
 800b4e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e8:	d103      	bne.n	800b4f2 <xQueueReceive+0x122>
 800b4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4f8:	b25b      	sxtb	r3, r3
 800b4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4fe:	d103      	bne.n	800b508 <xQueueReceive+0x138>
 800b500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b502:	2200      	movs	r2, #0
 800b504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b508:	f7ff fbf4 	bl	800acf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b50c:	1d3a      	adds	r2, r7, #4
 800b50e:	f107 0310 	add.w	r3, r7, #16
 800b512:	4611      	mov	r1, r2
 800b514:	4618      	mov	r0, r3
 800b516:	f001 f81b 	bl	800c550 <xTaskCheckForTimeOut>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d123      	bne.n	800b568 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b522:	f000 f917 	bl	800b754 <prvIsQueueEmpty>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d017      	beq.n	800b55c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52e:	3324      	adds	r3, #36	; 0x24
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	4611      	mov	r1, r2
 800b534:	4618      	mov	r0, r3
 800b536:	f000 ff3f 	bl	800c3b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b53a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b53c:	f000 f8b8 	bl	800b6b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b540:	f000 fd12 	bl	800bf68 <xTaskResumeAll>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d189      	bne.n	800b45e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b54a:	4b10      	ldr	r3, [pc, #64]	; (800b58c <xQueueReceive+0x1bc>)
 800b54c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b550:	601a      	str	r2, [r3, #0]
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	e780      	b.n	800b45e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b55c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b55e:	f000 f8a7 	bl	800b6b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b562:	f000 fd01 	bl	800bf68 <xTaskResumeAll>
 800b566:	e77a      	b.n	800b45e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b56a:	f000 f8a1 	bl	800b6b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b56e:	f000 fcfb 	bl	800bf68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b574:	f000 f8ee 	bl	800b754 <prvIsQueueEmpty>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	f43f af6f 	beq.w	800b45e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b580:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b582:	4618      	mov	r0, r3
 800b584:	3730      	adds	r7, #48	; 0x30
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	e000ed04 	.word	0xe000ed04

0800b590 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b59c:	2300      	movs	r3, #0
 800b59e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d10d      	bne.n	800b5ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d14d      	bne.n	800b652 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	689b      	ldr	r3, [r3, #8]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f001 f96a 	bl	800c894 <xTaskPriorityDisinherit>
 800b5c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	609a      	str	r2, [r3, #8]
 800b5c8:	e043      	b.n	800b652 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d119      	bne.n	800b604 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6858      	ldr	r0, [r3, #4]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d8:	461a      	mov	r2, r3
 800b5da:	68b9      	ldr	r1, [r7, #8]
 800b5dc:	f003 f83a 	bl	800e654 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	685a      	ldr	r2, [r3, #4]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e8:	441a      	add	r2, r3
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	685a      	ldr	r2, [r3, #4]
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	689b      	ldr	r3, [r3, #8]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d32b      	bcc.n	800b652 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	605a      	str	r2, [r3, #4]
 800b602:	e026      	b.n	800b652 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	68d8      	ldr	r0, [r3, #12]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60c:	461a      	mov	r2, r3
 800b60e:	68b9      	ldr	r1, [r7, #8]
 800b610:	f003 f820 	bl	800e654 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	68da      	ldr	r2, [r3, #12]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b61c:	425b      	negs	r3, r3
 800b61e:	441a      	add	r2, r3
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	68da      	ldr	r2, [r3, #12]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d207      	bcs.n	800b640 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	689a      	ldr	r2, [r3, #8]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b638:	425b      	negs	r3, r3
 800b63a:	441a      	add	r2, r3
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b02      	cmp	r3, #2
 800b644:	d105      	bne.n	800b652 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d002      	beq.n	800b652 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	3b01      	subs	r3, #1
 800b650:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	1c5a      	adds	r2, r3, #1
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b65a:	697b      	ldr	r3, [r7, #20]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3718      	adds	r7, #24
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b672:	2b00      	cmp	r3, #0
 800b674:	d018      	beq.n	800b6a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	68da      	ldr	r2, [r3, #12]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b67e:	441a      	add	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	68da      	ldr	r2, [r3, #12]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d303      	bcc.n	800b698 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	68d9      	ldr	r1, [r3, #12]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	6838      	ldr	r0, [r7, #0]
 800b6a4:	f002 ffd6 	bl	800e654 <memcpy>
	}
}
 800b6a8:	bf00      	nop
 800b6aa:	3708      	adds	r7, #8
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b6b8:	f7ff faec 	bl	800ac94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b6c4:	e011      	b.n	800b6ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d012      	beq.n	800b6f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	3324      	adds	r3, #36	; 0x24
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f000 fec0 	bl	800c458 <xTaskRemoveFromEventList>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d001      	beq.n	800b6e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b6de:	f000 ffa9 	bl	800c634 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b6e2:	7bfb      	ldrb	r3, [r7, #15]
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b6ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	dce9      	bgt.n	800b6c6 <prvUnlockQueue+0x16>
 800b6f2:	e000      	b.n	800b6f6 <prvUnlockQueue+0x46>
					break;
 800b6f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	22ff      	movs	r2, #255	; 0xff
 800b6fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b6fe:	f7ff faf9 	bl	800acf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b702:	f7ff fac7 	bl	800ac94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b70c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b70e:	e011      	b.n	800b734 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d012      	beq.n	800b73e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	3310      	adds	r3, #16
 800b71c:	4618      	mov	r0, r3
 800b71e:	f000 fe9b 	bl	800c458 <xTaskRemoveFromEventList>
 800b722:	4603      	mov	r3, r0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d001      	beq.n	800b72c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b728:	f000 ff84 	bl	800c634 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b72c:	7bbb      	ldrb	r3, [r7, #14]
 800b72e:	3b01      	subs	r3, #1
 800b730:	b2db      	uxtb	r3, r3
 800b732:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b734:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	dce9      	bgt.n	800b710 <prvUnlockQueue+0x60>
 800b73c:	e000      	b.n	800b740 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b73e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	22ff      	movs	r2, #255	; 0xff
 800b744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b748:	f7ff fad4 	bl	800acf4 <vPortExitCritical>
}
 800b74c:	bf00      	nop
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b75c:	f7ff fa9a 	bl	800ac94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b764:	2b00      	cmp	r3, #0
 800b766:	d102      	bne.n	800b76e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b768:	2301      	movs	r3, #1
 800b76a:	60fb      	str	r3, [r7, #12]
 800b76c:	e001      	b.n	800b772 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b76e:	2300      	movs	r3, #0
 800b770:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b772:	f7ff fabf 	bl	800acf4 <vPortExitCritical>

	return xReturn;
 800b776:	68fb      	ldr	r3, [r7, #12]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b788:	f7ff fa84 	bl	800ac94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b794:	429a      	cmp	r2, r3
 800b796:	d102      	bne.n	800b79e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b798:	2301      	movs	r3, #1
 800b79a:	60fb      	str	r3, [r7, #12]
 800b79c:	e001      	b.n	800b7a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7a2:	f7ff faa7 	bl	800acf4 <vPortExitCritical>

	return xReturn;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	60fb      	str	r3, [r7, #12]
 800b7be:	e014      	b.n	800b7ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b7c0:	4a0f      	ldr	r2, [pc, #60]	; (800b800 <vQueueAddToRegistry+0x50>)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d10b      	bne.n	800b7e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b7cc:	490c      	ldr	r1, [pc, #48]	; (800b800 <vQueueAddToRegistry+0x50>)
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	683a      	ldr	r2, [r7, #0]
 800b7d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b7d6:	4a0a      	ldr	r2, [pc, #40]	; (800b800 <vQueueAddToRegistry+0x50>)
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	00db      	lsls	r3, r3, #3
 800b7dc:	4413      	add	r3, r2
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b7e2:	e006      	b.n	800b7f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	60fb      	str	r3, [r7, #12]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2b07      	cmp	r3, #7
 800b7ee:	d9e7      	bls.n	800b7c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b7f0:	bf00      	nop
 800b7f2:	bf00      	nop
 800b7f4:	3714      	adds	r7, #20
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop
 800b800:	20007398 	.word	0x20007398

0800b804 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b804:	b580      	push	{r7, lr}
 800b806:	b086      	sub	sp, #24
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b814:	f7ff fa3e 	bl	800ac94 <vPortEnterCritical>
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b81e:	b25b      	sxtb	r3, r3
 800b820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b824:	d103      	bne.n	800b82e <vQueueWaitForMessageRestricted+0x2a>
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	2200      	movs	r2, #0
 800b82a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b834:	b25b      	sxtb	r3, r3
 800b836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83a:	d103      	bne.n	800b844 <vQueueWaitForMessageRestricted+0x40>
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	2200      	movs	r2, #0
 800b840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b844:	f7ff fa56 	bl	800acf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d106      	bne.n	800b85e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	3324      	adds	r3, #36	; 0x24
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	68b9      	ldr	r1, [r7, #8]
 800b858:	4618      	mov	r0, r3
 800b85a:	f000 fdd1 	bl	800c400 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b85e:	6978      	ldr	r0, [r7, #20]
 800b860:	f7ff ff26 	bl	800b6b0 <prvUnlockQueue>
	}
 800b864:	bf00      	nop
 800b866:	3718      	adds	r7, #24
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b08e      	sub	sp, #56	; 0x38
 800b870:	af04      	add	r7, sp, #16
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
 800b878:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10a      	bne.n	800b896 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b880:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b884:	f383 8811 	msr	BASEPRI, r3
 800b888:	f3bf 8f6f 	isb	sy
 800b88c:	f3bf 8f4f 	dsb	sy
 800b890:	623b      	str	r3, [r7, #32]
}
 800b892:	bf00      	nop
 800b894:	e7fe      	b.n	800b894 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10a      	bne.n	800b8b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800b89c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b8a0:	f383 8811 	msr	BASEPRI, r3
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	61fb      	str	r3, [r7, #28]
}
 800b8ae:	bf00      	nop
 800b8b0:	e7fe      	b.n	800b8b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b8b2:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800b8b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800b8be:	d00a      	beq.n	800b8d6 <xTaskCreateStatic+0x6a>
	__asm volatile
 800b8c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	61bb      	str	r3, [r7, #24]
}
 800b8d2:	bf00      	nop
 800b8d4:	e7fe      	b.n	800b8d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b8d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d01e      	beq.n	800b91c <xTaskCreateStatic+0xb0>
 800b8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d01b      	beq.n	800b91c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	2202      	movs	r2, #2
 800b8f2:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	9303      	str	r3, [sp, #12]
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fc:	9302      	str	r3, [sp, #8]
 800b8fe:	f107 0314 	add.w	r3, r7, #20
 800b902:	9301      	str	r3, [sp, #4]
 800b904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b906:	9300      	str	r3, [sp, #0]
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	68b9      	ldr	r1, [r7, #8]
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f000 f852 	bl	800b9b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b916:	f000 f90b 	bl	800bb30 <prvAddNewTaskToReadyList>
 800b91a:	e001      	b.n	800b920 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800b91c:	2300      	movs	r3, #0
 800b91e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b920:	697b      	ldr	r3, [r7, #20]
	}
 800b922:	4618      	mov	r0, r3
 800b924:	3728      	adds	r7, #40	; 0x28
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b08c      	sub	sp, #48	; 0x30
 800b92e:	af04      	add	r7, sp, #16
 800b930:	60f8      	str	r0, [r7, #12]
 800b932:	60b9      	str	r1, [r7, #8]
 800b934:	603b      	str	r3, [r7, #0]
 800b936:	4613      	mov	r3, r2
 800b938:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b93a:	88fb      	ldrh	r3, [r7, #6]
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	4618      	mov	r0, r3
 800b940:	f7fe fdda 	bl	800a4f8 <pvPortMalloc>
 800b944:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00f      	beq.n	800b96c <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b94c:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 800b950:	f7fe fdd2 	bl	800a4f8 <pvPortMalloc>
 800b954:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d003      	beq.n	800b964 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	697a      	ldr	r2, [r7, #20]
 800b960:	631a      	str	r2, [r3, #48]	; 0x30
 800b962:	e005      	b.n	800b970 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b964:	6978      	ldr	r0, [r7, #20]
 800b966:	f7fe fe97 	bl	800a698 <vPortFree>
 800b96a:	e001      	b.n	800b970 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b96c:	2300      	movs	r3, #0
 800b96e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d017      	beq.n	800b9a6 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	2200      	movs	r2, #0
 800b97a:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b97e:	88fa      	ldrh	r2, [r7, #6]
 800b980:	2300      	movs	r3, #0
 800b982:	9303      	str	r3, [sp, #12]
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	9302      	str	r3, [sp, #8]
 800b988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98a:	9301      	str	r3, [sp, #4]
 800b98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	68b9      	ldr	r1, [r7, #8]
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f000 f80f 	bl	800b9b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b99a:	69f8      	ldr	r0, [r7, #28]
 800b99c:	f000 f8c8 	bl	800bb30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	61bb      	str	r3, [r7, #24]
 800b9a4:	e002      	b.n	800b9ac <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b9a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b9ac:	69bb      	ldr	r3, [r7, #24]
	}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3720      	adds	r7, #32
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
	...

0800b9b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b088      	sub	sp, #32
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
 800b9c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	21a5      	movs	r1, #165	; 0xa5
 800b9d2:	f002 fe4d 	bl	800e670 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	4413      	add	r3, r2
 800b9e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	f023 0307 	bic.w	r3, r3, #7
 800b9ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	f003 0307 	and.w	r3, r3, #7
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00a      	beq.n	800ba10 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b9fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b9fe:	f383 8811 	msr	BASEPRI, r3
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	617b      	str	r3, [r7, #20]
}
 800ba0c:	bf00      	nop
 800ba0e:	e7fe      	b.n	800ba0e <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800ba10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba12:	69ba      	ldr	r2, [r7, #24]
 800ba14:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d01f      	beq.n	800ba5e <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba1e:	2300      	movs	r3, #0
 800ba20:	61fb      	str	r3, [r7, #28]
 800ba22:	e012      	b.n	800ba4a <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba24:	68ba      	ldr	r2, [r7, #8]
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	4413      	add	r3, r2
 800ba2a:	7819      	ldrb	r1, [r3, #0]
 800ba2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba2e:	69fb      	ldr	r3, [r7, #28]
 800ba30:	4413      	add	r3, r2
 800ba32:	3334      	adds	r3, #52	; 0x34
 800ba34:	460a      	mov	r2, r1
 800ba36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ba38:	68ba      	ldr	r2, [r7, #8]
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d006      	beq.n	800ba52 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba44:	69fb      	ldr	r3, [r7, #28]
 800ba46:	3301      	adds	r3, #1
 800ba48:	61fb      	str	r3, [r7, #28]
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	2bfe      	cmp	r3, #254	; 0xfe
 800ba4e:	d9e9      	bls.n	800ba24 <prvInitialiseNewTask+0x6c>
 800ba50:	e000      	b.n	800ba54 <prvInitialiseNewTask+0x9c>
			{
				break;
 800ba52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ba54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba56:	2200      	movs	r2, #0
 800ba58:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800ba5c:	e003      	b.n	800ba66 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ba5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba60:	2200      	movs	r2, #0
 800ba62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba68:	2b37      	cmp	r3, #55	; 0x37
 800ba6a:	d901      	bls.n	800ba70 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba6c:	2337      	movs	r3, #55	; 0x37
 800ba6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba7a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		pxNewTCB->uxMutexesHeld = 0;
 800ba7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba80:	2200      	movs	r2, #0
 800ba82:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	3304      	adds	r3, #4
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7fe ff42 	bl	800a914 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba92:	3318      	adds	r3, #24
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fe ff3d 	bl	800a914 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800baa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800baaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800bab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab2:	2200      	movs	r2, #0
 800bab4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800bab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baba:	2200      	movs	r2, #0
 800babc:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac2:	2200      	movs	r2, #0
 800bac4:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baca:	2200      	movs	r2, #0
 800bacc:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bad6:	2260      	movs	r2, #96	; 0x60
 800bad8:	2100      	movs	r1, #0
 800bada:	4618      	mov	r0, r3
 800badc:	f002 fdc8 	bl	800e670 <memset>
 800bae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae2:	4a10      	ldr	r2, [pc, #64]	; (800bb24 <prvInitialiseNewTask+0x16c>)
 800bae4:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800bae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baea:	4a0f      	ldr	r2, [pc, #60]	; (800bb28 <prvInitialiseNewTask+0x170>)
 800baec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800baf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf2:	4a0e      	ldr	r2, [pc, #56]	; (800bb2c <prvInitialiseNewTask+0x174>)
 800baf4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800baf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafa:	2200      	movs	r2, #0
 800bafc:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb00:	683a      	ldr	r2, [r7, #0]
 800bb02:	68f9      	ldr	r1, [r7, #12]
 800bb04:	69b8      	ldr	r0, [r7, #24]
 800bb06:	f7fe ff99 	bl	800aa3c <pxPortInitialiseStack>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d002      	beq.n	800bb1c <prvInitialiseNewTask+0x164>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb1c:	bf00      	nop
 800bb1e:	3720      	adds	r7, #32
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	0800ee20 	.word	0x0800ee20
 800bb28:	0800ee40 	.word	0x0800ee40
 800bb2c:	0800ee00 	.word	0x0800ee00

0800bb30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bb38:	f7ff f8ac 	bl	800ac94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bb3c:	4b2d      	ldr	r3, [pc, #180]	; (800bbf4 <prvAddNewTaskToReadyList+0xc4>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	3301      	adds	r3, #1
 800bb42:	4a2c      	ldr	r2, [pc, #176]	; (800bbf4 <prvAddNewTaskToReadyList+0xc4>)
 800bb44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bb46:	4b2c      	ldr	r3, [pc, #176]	; (800bbf8 <prvAddNewTaskToReadyList+0xc8>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d109      	bne.n	800bb62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bb4e:	4a2a      	ldr	r2, [pc, #168]	; (800bbf8 <prvAddNewTaskToReadyList+0xc8>)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bb54:	4b27      	ldr	r3, [pc, #156]	; (800bbf4 <prvAddNewTaskToReadyList+0xc4>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d110      	bne.n	800bb7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bb5c:	f000 fdb8 	bl	800c6d0 <prvInitialiseTaskLists>
 800bb60:	e00d      	b.n	800bb7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bb62:	4b26      	ldr	r3, [pc, #152]	; (800bbfc <prvAddNewTaskToReadyList+0xcc>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d109      	bne.n	800bb7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb6a:	4b23      	ldr	r3, [pc, #140]	; (800bbf8 <prvAddNewTaskToReadyList+0xc8>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d802      	bhi.n	800bb7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb78:	4a1f      	ldr	r2, [pc, #124]	; (800bbf8 <prvAddNewTaskToReadyList+0xc8>)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb7e:	4b20      	ldr	r3, [pc, #128]	; (800bc00 <prvAddNewTaskToReadyList+0xd0>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	3301      	adds	r3, #1
 800bb84:	4a1e      	ldr	r2, [pc, #120]	; (800bc00 <prvAddNewTaskToReadyList+0xd0>)
 800bb86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bb88:	4b1d      	ldr	r3, [pc, #116]	; (800bc00 <prvAddNewTaskToReadyList+0xd0>)
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb96:	4b1b      	ldr	r3, [pc, #108]	; (800bc04 <prvAddNewTaskToReadyList+0xd4>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d903      	bls.n	800bba6 <prvAddNewTaskToReadyList+0x76>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba2:	4a18      	ldr	r2, [pc, #96]	; (800bc04 <prvAddNewTaskToReadyList+0xd4>)
 800bba4:	6013      	str	r3, [r2, #0]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbaa:	4613      	mov	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	4413      	add	r3, r2
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	4a15      	ldr	r2, [pc, #84]	; (800bc08 <prvAddNewTaskToReadyList+0xd8>)
 800bbb4:	441a      	add	r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	3304      	adds	r3, #4
 800bbba:	4619      	mov	r1, r3
 800bbbc:	4610      	mov	r0, r2
 800bbbe:	f7fe feb6 	bl	800a92e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bbc2:	f7ff f897 	bl	800acf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bbc6:	4b0d      	ldr	r3, [pc, #52]	; (800bbfc <prvAddNewTaskToReadyList+0xcc>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d00e      	beq.n	800bbec <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bbce:	4b0a      	ldr	r3, [pc, #40]	; (800bbf8 <prvAddNewTaskToReadyList+0xc8>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d207      	bcs.n	800bbec <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bbdc:	4b0b      	ldr	r3, [pc, #44]	; (800bc0c <prvAddNewTaskToReadyList+0xdc>)
 800bbde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	f3bf 8f4f 	dsb	sy
 800bbe8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbec:	bf00      	nop
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	200078b0 	.word	0x200078b0
 800bbf8:	200073d8 	.word	0x200073d8
 800bbfc:	200078bc 	.word	0x200078bc
 800bc00:	200078cc 	.word	0x200078cc
 800bc04:	200078b8 	.word	0x200078b8
 800bc08:	200073dc 	.word	0x200073dc
 800bc0c:	e000ed04 	.word	0xe000ed04

0800bc10 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b08a      	sub	sp, #40	; 0x28
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d10a      	bne.n	800bc3a <vTaskDelayUntil+0x2a>
	__asm volatile
 800bc24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	617b      	str	r3, [r7, #20]
}
 800bc36:	bf00      	nop
 800bc38:	e7fe      	b.n	800bc38 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d10a      	bne.n	800bc56 <vTaskDelayUntil+0x46>
	__asm volatile
 800bc40:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	613b      	str	r3, [r7, #16]
}
 800bc52:	bf00      	nop
 800bc54:	e7fe      	b.n	800bc54 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800bc56:	4b2a      	ldr	r3, [pc, #168]	; (800bd00 <vTaskDelayUntil+0xf0>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00a      	beq.n	800bc74 <vTaskDelayUntil+0x64>
	__asm volatile
 800bc5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bc62:	f383 8811 	msr	BASEPRI, r3
 800bc66:	f3bf 8f6f 	isb	sy
 800bc6a:	f3bf 8f4f 	dsb	sy
 800bc6e:	60fb      	str	r3, [r7, #12]
}
 800bc70:	bf00      	nop
 800bc72:	e7fe      	b.n	800bc72 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800bc74:	f000 f932 	bl	800bedc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800bc78:	4b22      	ldr	r3, [pc, #136]	; (800bd04 <vTaskDelayUntil+0xf4>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	683a      	ldr	r2, [r7, #0]
 800bc84:	4413      	add	r3, r2
 800bc86:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6a3a      	ldr	r2, [r7, #32]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d20b      	bcs.n	800bcaa <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	69fa      	ldr	r2, [r7, #28]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d211      	bcs.n	800bcc0 <vTaskDelayUntil+0xb0>
 800bc9c:	69fa      	ldr	r2, [r7, #28]
 800bc9e:	6a3b      	ldr	r3, [r7, #32]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d90d      	bls.n	800bcc0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800bca4:	2301      	movs	r3, #1
 800bca6:	627b      	str	r3, [r7, #36]	; 0x24
 800bca8:	e00a      	b.n	800bcc0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	69fa      	ldr	r2, [r7, #28]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d303      	bcc.n	800bcbc <vTaskDelayUntil+0xac>
 800bcb4:	69fa      	ldr	r2, [r7, #28]
 800bcb6:	6a3b      	ldr	r3, [r7, #32]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d901      	bls.n	800bcc0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	69fa      	ldr	r2, [r7, #28]
 800bcc4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d006      	beq.n	800bcda <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800bccc:	69fa      	ldr	r2, [r7, #28]
 800bcce:	6a3b      	ldr	r3, [r7, #32]
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f000 fe51 	bl	800c97c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800bcda:	f000 f945 	bl	800bf68 <xTaskResumeAll>
 800bcde:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d107      	bne.n	800bcf6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800bce6:	4b08      	ldr	r3, [pc, #32]	; (800bd08 <vTaskDelayUntil+0xf8>)
 800bce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcec:	601a      	str	r2, [r3, #0]
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bcf6:	bf00      	nop
 800bcf8:	3728      	adds	r7, #40	; 0x28
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	200078d8 	.word	0x200078d8
 800bd04:	200078b4 	.word	0x200078b4
 800bd08:	e000ed04 	.word	0xe000ed04

0800bd0c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800bd14:	f7fe ffbe 	bl	800ac94 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d102      	bne.n	800bd24 <vTaskSuspend+0x18>
 800bd1e:	4b30      	ldr	r3, [pc, #192]	; (800bde0 <vTaskSuspend+0xd4>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	e000      	b.n	800bd26 <vTaskSuspend+0x1a>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	3304      	adds	r3, #4
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7fe fe5b 	bl	800a9e8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d004      	beq.n	800bd44 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	3318      	adds	r3, #24
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fe fe52 	bl	800a9e8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	3304      	adds	r3, #4
 800bd48:	4619      	mov	r1, r3
 800bd4a:	4826      	ldr	r0, [pc, #152]	; (800bde4 <vTaskSuspend+0xd8>)
 800bd4c:	f7fe fdef 	bl	800a92e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d103      	bne.n	800bd64 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800bd64:	f7fe ffc6 	bl	800acf4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800bd68:	4b1f      	ldr	r3, [pc, #124]	; (800bde8 <vTaskSuspend+0xdc>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d005      	beq.n	800bd7c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800bd70:	f7fe ff90 	bl	800ac94 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800bd74:	f000 fd50 	bl	800c818 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800bd78:	f7fe ffbc 	bl	800acf4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800bd7c:	4b18      	ldr	r3, [pc, #96]	; (800bde0 <vTaskSuspend+0xd4>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68fa      	ldr	r2, [r7, #12]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d127      	bne.n	800bdd6 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800bd86:	4b18      	ldr	r3, [pc, #96]	; (800bde8 <vTaskSuspend+0xdc>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d017      	beq.n	800bdbe <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800bd8e:	4b17      	ldr	r3, [pc, #92]	; (800bdec <vTaskSuspend+0xe0>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d00a      	beq.n	800bdac <vTaskSuspend+0xa0>
	__asm volatile
 800bd96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bd9a:	f383 8811 	msr	BASEPRI, r3
 800bd9e:	f3bf 8f6f 	isb	sy
 800bda2:	f3bf 8f4f 	dsb	sy
 800bda6:	60bb      	str	r3, [r7, #8]
}
 800bda8:	bf00      	nop
 800bdaa:	e7fe      	b.n	800bdaa <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800bdac:	4b10      	ldr	r3, [pc, #64]	; (800bdf0 <vTaskSuspend+0xe4>)
 800bdae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdb2:	601a      	str	r2, [r3, #0]
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bdbc:	e00b      	b.n	800bdd6 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800bdbe:	4b09      	ldr	r3, [pc, #36]	; (800bde4 <vTaskSuspend+0xd8>)
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	4b0c      	ldr	r3, [pc, #48]	; (800bdf4 <vTaskSuspend+0xe8>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d103      	bne.n	800bdd2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800bdca:	4b05      	ldr	r3, [pc, #20]	; (800bde0 <vTaskSuspend+0xd4>)
 800bdcc:	2200      	movs	r2, #0
 800bdce:	601a      	str	r2, [r3, #0]
	}
 800bdd0:	e001      	b.n	800bdd6 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800bdd2:	f000 fa39 	bl	800c248 <vTaskSwitchContext>
	}
 800bdd6:	bf00      	nop
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	200073d8 	.word	0x200073d8
 800bde4:	20007898 	.word	0x20007898
 800bde8:	200078bc 	.word	0x200078bc
 800bdec:	200078d8 	.word	0x200078d8
 800bdf0:	e000ed04 	.word	0xe000ed04
 800bdf4:	200078b0 	.word	0x200078b0

0800bdf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b08a      	sub	sp, #40	; 0x28
 800bdfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bdfe:	2300      	movs	r3, #0
 800be00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800be02:	2300      	movs	r3, #0
 800be04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800be06:	463a      	mov	r2, r7
 800be08:	1d39      	adds	r1, r7, #4
 800be0a:	f107 0308 	add.w	r3, r7, #8
 800be0e:	4618      	mov	r0, r3
 800be10:	f7fe fb3e 	bl	800a490 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800be14:	6839      	ldr	r1, [r7, #0]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	68ba      	ldr	r2, [r7, #8]
 800be1a:	9202      	str	r2, [sp, #8]
 800be1c:	9301      	str	r3, [sp, #4]
 800be1e:	2300      	movs	r3, #0
 800be20:	9300      	str	r3, [sp, #0]
 800be22:	2300      	movs	r3, #0
 800be24:	460a      	mov	r2, r1
 800be26:	4925      	ldr	r1, [pc, #148]	; (800bebc <vTaskStartScheduler+0xc4>)
 800be28:	4825      	ldr	r0, [pc, #148]	; (800bec0 <vTaskStartScheduler+0xc8>)
 800be2a:	f7ff fd1f 	bl	800b86c <xTaskCreateStatic>
 800be2e:	4603      	mov	r3, r0
 800be30:	4a24      	ldr	r2, [pc, #144]	; (800bec4 <vTaskStartScheduler+0xcc>)
 800be32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800be34:	4b23      	ldr	r3, [pc, #140]	; (800bec4 <vTaskStartScheduler+0xcc>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d002      	beq.n	800be42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800be3c:	2301      	movs	r3, #1
 800be3e:	617b      	str	r3, [r7, #20]
 800be40:	e001      	b.n	800be46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800be42:	2300      	movs	r3, #0
 800be44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d102      	bne.n	800be52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800be4c:	f000 fdf0 	bl	800ca30 <xTimerCreateTimerTask>
 800be50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	2b01      	cmp	r3, #1
 800be56:	d11e      	bne.n	800be96 <vTaskStartScheduler+0x9e>
	__asm volatile
 800be58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800be5c:	f383 8811 	msr	BASEPRI, r3
 800be60:	f3bf 8f6f 	isb	sy
 800be64:	f3bf 8f4f 	dsb	sy
 800be68:	613b      	str	r3, [r7, #16]
}
 800be6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be6c:	4b16      	ldr	r3, [pc, #88]	; (800bec8 <vTaskStartScheduler+0xd0>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be74:	4a15      	ldr	r2, [pc, #84]	; (800becc <vTaskStartScheduler+0xd4>)
 800be76:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800be78:	4b15      	ldr	r3, [pc, #84]	; (800bed0 <vTaskStartScheduler+0xd8>)
 800be7a:	f04f 32ff 	mov.w	r2, #4294967295
 800be7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800be80:	4b14      	ldr	r3, [pc, #80]	; (800bed4 <vTaskStartScheduler+0xdc>)
 800be82:	2201      	movs	r2, #1
 800be84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800be86:	4b14      	ldr	r3, [pc, #80]	; (800bed8 <vTaskStartScheduler+0xe0>)
 800be88:	2200      	movs	r2, #0
 800be8a:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800be8c:	f7f6 fdc2 	bl	8002a14 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800be90:	f7fe fe5e 	bl	800ab50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800be94:	e00e      	b.n	800beb4 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9c:	d10a      	bne.n	800beb4 <vTaskStartScheduler+0xbc>
	__asm volatile
 800be9e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	60fb      	str	r3, [r7, #12]
}
 800beb0:	bf00      	nop
 800beb2:	e7fe      	b.n	800beb2 <vTaskStartScheduler+0xba>
}
 800beb4:	bf00      	nop
 800beb6:	3718      	adds	r7, #24
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	0800eb84 	.word	0x0800eb84
 800bec0:	0800c64d 	.word	0x0800c64d
 800bec4:	200078d4 	.word	0x200078d4
 800bec8:	200073d8 	.word	0x200073d8
 800becc:	2000002c 	.word	0x2000002c
 800bed0:	200078d0 	.word	0x200078d0
 800bed4:	200078bc 	.word	0x200078bc
 800bed8:	200078b4 	.word	0x200078b4

0800bedc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bedc:	b480      	push	{r7}
 800bede:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bee0:	4b04      	ldr	r3, [pc, #16]	; (800bef4 <vTaskSuspendAll+0x18>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	3301      	adds	r3, #1
 800bee6:	4a03      	ldr	r2, [pc, #12]	; (800bef4 <vTaskSuspendAll+0x18>)
 800bee8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800beea:	bf00      	nop
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr
 800bef4:	200078d8 	.word	0x200078d8

0800bef8 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800befe:	2300      	movs	r3, #0
 800bf00:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800bf02:	4b14      	ldr	r3, [pc, #80]	; (800bf54 <prvGetExpectedIdleTime+0x5c>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d001      	beq.n	800bf0e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800bf0e:	4b12      	ldr	r3, [pc, #72]	; (800bf58 <prvGetExpectedIdleTime+0x60>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d002      	beq.n	800bf1e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	607b      	str	r3, [r7, #4]
 800bf1c:	e012      	b.n	800bf44 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800bf1e:	4b0f      	ldr	r3, [pc, #60]	; (800bf5c <prvGetExpectedIdleTime+0x64>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d902      	bls.n	800bf2c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800bf26:	2300      	movs	r3, #0
 800bf28:	607b      	str	r3, [r7, #4]
 800bf2a:	e00b      	b.n	800bf44 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d002      	beq.n	800bf38 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800bf32:	2300      	movs	r3, #0
 800bf34:	607b      	str	r3, [r7, #4]
 800bf36:	e005      	b.n	800bf44 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800bf38:	4b09      	ldr	r3, [pc, #36]	; (800bf60 <prvGetExpectedIdleTime+0x68>)
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	4b09      	ldr	r3, [pc, #36]	; (800bf64 <prvGetExpectedIdleTime+0x6c>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800bf44:	687b      	ldr	r3, [r7, #4]
	}
 800bf46:	4618      	mov	r0, r3
 800bf48:	370c      	adds	r7, #12
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop
 800bf54:	200078b8 	.word	0x200078b8
 800bf58:	200073d8 	.word	0x200073d8
 800bf5c:	200073dc 	.word	0x200073dc
 800bf60:	200078d0 	.word	0x200078d0
 800bf64:	200078b4 	.word	0x200078b4

0800bf68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bf72:	2300      	movs	r3, #0
 800bf74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bf76:	4b42      	ldr	r3, [pc, #264]	; (800c080 <xTaskResumeAll+0x118>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d10a      	bne.n	800bf94 <xTaskResumeAll+0x2c>
	__asm volatile
 800bf7e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bf82:	f383 8811 	msr	BASEPRI, r3
 800bf86:	f3bf 8f6f 	isb	sy
 800bf8a:	f3bf 8f4f 	dsb	sy
 800bf8e:	603b      	str	r3, [r7, #0]
}
 800bf90:	bf00      	nop
 800bf92:	e7fe      	b.n	800bf92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bf94:	f7fe fe7e 	bl	800ac94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bf98:	4b39      	ldr	r3, [pc, #228]	; (800c080 <xTaskResumeAll+0x118>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	3b01      	subs	r3, #1
 800bf9e:	4a38      	ldr	r2, [pc, #224]	; (800c080 <xTaskResumeAll+0x118>)
 800bfa0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfa2:	4b37      	ldr	r3, [pc, #220]	; (800c080 <xTaskResumeAll+0x118>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d162      	bne.n	800c070 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bfaa:	4b36      	ldr	r3, [pc, #216]	; (800c084 <xTaskResumeAll+0x11c>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d05e      	beq.n	800c070 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bfb2:	e02f      	b.n	800c014 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfb4:	4b34      	ldr	r3, [pc, #208]	; (800c088 <xTaskResumeAll+0x120>)
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	3318      	adds	r3, #24
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7fe fd11 	bl	800a9e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	3304      	adds	r3, #4
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fe fd0c 	bl	800a9e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd4:	4b2d      	ldr	r3, [pc, #180]	; (800c08c <xTaskResumeAll+0x124>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d903      	bls.n	800bfe4 <xTaskResumeAll+0x7c>
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe0:	4a2a      	ldr	r2, [pc, #168]	; (800c08c <xTaskResumeAll+0x124>)
 800bfe2:	6013      	str	r3, [r2, #0]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe8:	4613      	mov	r3, r2
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	4413      	add	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4a27      	ldr	r2, [pc, #156]	; (800c090 <xTaskResumeAll+0x128>)
 800bff2:	441a      	add	r2, r3
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	3304      	adds	r3, #4
 800bff8:	4619      	mov	r1, r3
 800bffa:	4610      	mov	r0, r2
 800bffc:	f7fe fc97 	bl	800a92e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c004:	4b23      	ldr	r3, [pc, #140]	; (800c094 <xTaskResumeAll+0x12c>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d302      	bcc.n	800c014 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c00e:	4b22      	ldr	r3, [pc, #136]	; (800c098 <xTaskResumeAll+0x130>)
 800c010:	2201      	movs	r2, #1
 800c012:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c014:	4b1c      	ldr	r3, [pc, #112]	; (800c088 <xTaskResumeAll+0x120>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d1cb      	bne.n	800bfb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d001      	beq.n	800c026 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c022:	f000 fbf9 	bl	800c818 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c026:	4b1d      	ldr	r3, [pc, #116]	; (800c09c <xTaskResumeAll+0x134>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d010      	beq.n	800c054 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c032:	f000 f847 	bl	800c0c4 <xTaskIncrementTick>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d002      	beq.n	800c042 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c03c:	4b16      	ldr	r3, [pc, #88]	; (800c098 <xTaskResumeAll+0x130>)
 800c03e:	2201      	movs	r2, #1
 800c040:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	3b01      	subs	r3, #1
 800c046:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1f1      	bne.n	800c032 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c04e:	4b13      	ldr	r3, [pc, #76]	; (800c09c <xTaskResumeAll+0x134>)
 800c050:	2200      	movs	r2, #0
 800c052:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c054:	4b10      	ldr	r3, [pc, #64]	; (800c098 <xTaskResumeAll+0x130>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d009      	beq.n	800c070 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c05c:	2301      	movs	r3, #1
 800c05e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c060:	4b0f      	ldr	r3, [pc, #60]	; (800c0a0 <xTaskResumeAll+0x138>)
 800c062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c066:	601a      	str	r2, [r3, #0]
 800c068:	f3bf 8f4f 	dsb	sy
 800c06c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c070:	f7fe fe40 	bl	800acf4 <vPortExitCritical>

	return xAlreadyYielded;
 800c074:	68bb      	ldr	r3, [r7, #8]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	200078d8 	.word	0x200078d8
 800c084:	200078b0 	.word	0x200078b0
 800c088:	2000786c 	.word	0x2000786c
 800c08c:	200078b8 	.word	0x200078b8
 800c090:	200073dc 	.word	0x200073dc
 800c094:	200073d8 	.word	0x200073d8
 800c098:	200078c4 	.word	0x200078c4
 800c09c:	200078c0 	.word	0x200078c0
 800c0a0:	e000ed04 	.word	0xe000ed04

0800c0a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c0aa:	4b05      	ldr	r3, [pc, #20]	; (800c0c0 <xTaskGetTickCount+0x1c>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c0b0:	687b      	ldr	r3, [r7, #4]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	370c      	adds	r7, #12
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	200078b4 	.word	0x200078b4

0800c0c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0ce:	4b53      	ldr	r3, [pc, #332]	; (800c21c <xTaskIncrementTick+0x158>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	f040 8095 	bne.w	800c202 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c0d8:	4b51      	ldr	r3, [pc, #324]	; (800c220 <xTaskIncrementTick+0x15c>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	3301      	adds	r3, #1
 800c0de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c0e0:	4a4f      	ldr	r2, [pc, #316]	; (800c220 <xTaskIncrementTick+0x15c>)
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d120      	bne.n	800c12e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c0ec:	4b4d      	ldr	r3, [pc, #308]	; (800c224 <xTaskIncrementTick+0x160>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00a      	beq.n	800c10c <xTaskIncrementTick+0x48>
	__asm volatile
 800c0f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c0fa:	f383 8811 	msr	BASEPRI, r3
 800c0fe:	f3bf 8f6f 	isb	sy
 800c102:	f3bf 8f4f 	dsb	sy
 800c106:	603b      	str	r3, [r7, #0]
}
 800c108:	bf00      	nop
 800c10a:	e7fe      	b.n	800c10a <xTaskIncrementTick+0x46>
 800c10c:	4b45      	ldr	r3, [pc, #276]	; (800c224 <xTaskIncrementTick+0x160>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	60fb      	str	r3, [r7, #12]
 800c112:	4b45      	ldr	r3, [pc, #276]	; (800c228 <xTaskIncrementTick+0x164>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a43      	ldr	r2, [pc, #268]	; (800c224 <xTaskIncrementTick+0x160>)
 800c118:	6013      	str	r3, [r2, #0]
 800c11a:	4a43      	ldr	r2, [pc, #268]	; (800c228 <xTaskIncrementTick+0x164>)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6013      	str	r3, [r2, #0]
 800c120:	4b42      	ldr	r3, [pc, #264]	; (800c22c <xTaskIncrementTick+0x168>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	3301      	adds	r3, #1
 800c126:	4a41      	ldr	r2, [pc, #260]	; (800c22c <xTaskIncrementTick+0x168>)
 800c128:	6013      	str	r3, [r2, #0]
 800c12a:	f000 fb75 	bl	800c818 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c12e:	4b40      	ldr	r3, [pc, #256]	; (800c230 <xTaskIncrementTick+0x16c>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	693a      	ldr	r2, [r7, #16]
 800c134:	429a      	cmp	r2, r3
 800c136:	d349      	bcc.n	800c1cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c138:	4b3a      	ldr	r3, [pc, #232]	; (800c224 <xTaskIncrementTick+0x160>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d104      	bne.n	800c14c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c142:	4b3b      	ldr	r3, [pc, #236]	; (800c230 <xTaskIncrementTick+0x16c>)
 800c144:	f04f 32ff 	mov.w	r2, #4294967295
 800c148:	601a      	str	r2, [r3, #0]
					break;
 800c14a:	e03f      	b.n	800c1cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c14c:	4b35      	ldr	r3, [pc, #212]	; (800c224 <xTaskIncrementTick+0x160>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c15c:	693a      	ldr	r2, [r7, #16]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	429a      	cmp	r2, r3
 800c162:	d203      	bcs.n	800c16c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c164:	4a32      	ldr	r2, [pc, #200]	; (800c230 <xTaskIncrementTick+0x16c>)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c16a:	e02f      	b.n	800c1cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	3304      	adds	r3, #4
 800c170:	4618      	mov	r0, r3
 800c172:	f7fe fc39 	bl	800a9e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d004      	beq.n	800c188 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	3318      	adds	r3, #24
 800c182:	4618      	mov	r0, r3
 800c184:	f7fe fc30 	bl	800a9e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c18c:	4b29      	ldr	r3, [pc, #164]	; (800c234 <xTaskIncrementTick+0x170>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	429a      	cmp	r2, r3
 800c192:	d903      	bls.n	800c19c <xTaskIncrementTick+0xd8>
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c198:	4a26      	ldr	r2, [pc, #152]	; (800c234 <xTaskIncrementTick+0x170>)
 800c19a:	6013      	str	r3, [r2, #0]
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4413      	add	r3, r2
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	4a23      	ldr	r2, [pc, #140]	; (800c238 <xTaskIncrementTick+0x174>)
 800c1aa:	441a      	add	r2, r3
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	4610      	mov	r0, r2
 800c1b4:	f7fe fbbb 	bl	800a92e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1bc:	4b1f      	ldr	r3, [pc, #124]	; (800c23c <xTaskIncrementTick+0x178>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d3b8      	bcc.n	800c138 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1ca:	e7b5      	b.n	800c138 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c1cc:	4b1b      	ldr	r3, [pc, #108]	; (800c23c <xTaskIncrementTick+0x178>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d2:	4919      	ldr	r1, [pc, #100]	; (800c238 <xTaskIncrementTick+0x174>)
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	4413      	add	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	440b      	add	r3, r1
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d901      	bls.n	800c1e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800c1e8:	4b15      	ldr	r3, [pc, #84]	; (800c240 <xTaskIncrementTick+0x17c>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d101      	bne.n	800c1f4 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800c1f0:	f7f6 fc40 	bl	8002a74 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c1f4:	4b13      	ldr	r3, [pc, #76]	; (800c244 <xTaskIncrementTick+0x180>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d009      	beq.n	800c210 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	617b      	str	r3, [r7, #20]
 800c200:	e006      	b.n	800c210 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c202:	4b0f      	ldr	r3, [pc, #60]	; (800c240 <xTaskIncrementTick+0x17c>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	3301      	adds	r3, #1
 800c208:	4a0d      	ldr	r2, [pc, #52]	; (800c240 <xTaskIncrementTick+0x17c>)
 800c20a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800c20c:	f7f6 fc32 	bl	8002a74 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800c210:	697b      	ldr	r3, [r7, #20]
}
 800c212:	4618      	mov	r0, r3
 800c214:	3718      	adds	r7, #24
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	200078d8 	.word	0x200078d8
 800c220:	200078b4 	.word	0x200078b4
 800c224:	20007864 	.word	0x20007864
 800c228:	20007868 	.word	0x20007868
 800c22c:	200078c8 	.word	0x200078c8
 800c230:	200078d0 	.word	0x200078d0
 800c234:	200078b8 	.word	0x200078b8
 800c238:	200073dc 	.word	0x200073dc
 800c23c:	200073d8 	.word	0x200073d8
 800c240:	200078c0 	.word	0x200078c0
 800c244:	200078c4 	.word	0x200078c4

0800c248 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b086      	sub	sp, #24
 800c24c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c24e:	4b51      	ldr	r3, [pc, #324]	; (800c394 <vTaskSwitchContext+0x14c>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d003      	beq.n	800c25e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c256:	4b50      	ldr	r3, [pc, #320]	; (800c398 <vTaskSwitchContext+0x150>)
 800c258:	2201      	movs	r2, #1
 800c25a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c25c:	e095      	b.n	800c38a <vTaskSwitchContext+0x142>
		xYieldPending = pdFALSE;
 800c25e:	4b4e      	ldr	r3, [pc, #312]	; (800c398 <vTaskSwitchContext+0x150>)
 800c260:	2200      	movs	r2, #0
 800c262:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800c264:	f7f6 fbec 	bl	8002a40 <getRunTimeCounterValue>
 800c268:	4603      	mov	r3, r0
 800c26a:	4a4c      	ldr	r2, [pc, #304]	; (800c39c <vTaskSwitchContext+0x154>)
 800c26c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800c26e:	4b4b      	ldr	r3, [pc, #300]	; (800c39c <vTaskSwitchContext+0x154>)
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	4b4b      	ldr	r3, [pc, #300]	; (800c3a0 <vTaskSwitchContext+0x158>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	429a      	cmp	r2, r3
 800c278:	d90b      	bls.n	800c292 <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800c27a:	4b4a      	ldr	r3, [pc, #296]	; (800c3a4 <vTaskSwitchContext+0x15c>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
 800c282:	4a46      	ldr	r2, [pc, #280]	; (800c39c <vTaskSwitchContext+0x154>)
 800c284:	6810      	ldr	r0, [r2, #0]
 800c286:	4a46      	ldr	r2, [pc, #280]	; (800c3a0 <vTaskSwitchContext+0x158>)
 800c288:	6812      	ldr	r2, [r2, #0]
 800c28a:	1a82      	subs	r2, r0, r2
 800c28c:	440a      	add	r2, r1
 800c28e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800c292:	4b42      	ldr	r3, [pc, #264]	; (800c39c <vTaskSwitchContext+0x154>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a42      	ldr	r2, [pc, #264]	; (800c3a0 <vTaskSwitchContext+0x158>)
 800c298:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c29a:	4b42      	ldr	r3, [pc, #264]	; (800c3a4 <vTaskSwitchContext+0x15c>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2a0:	613b      	str	r3, [r7, #16]
 800c2a2:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c2a6:	60fb      	str	r3, [r7, #12]
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d111      	bne.n	800c2d6 <vTaskSwitchContext+0x8e>
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d10b      	bne.n	800c2d6 <vTaskSwitchContext+0x8e>
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	3308      	adds	r3, #8
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	68fa      	ldr	r2, [r7, #12]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d105      	bne.n	800c2d6 <vTaskSwitchContext+0x8e>
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	330c      	adds	r3, #12
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d008      	beq.n	800c2e8 <vTaskSwitchContext+0xa0>
 800c2d6:	4b33      	ldr	r3, [pc, #204]	; (800c3a4 <vTaskSwitchContext+0x15c>)
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	4b32      	ldr	r3, [pc, #200]	; (800c3a4 <vTaskSwitchContext+0x15c>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	3334      	adds	r3, #52	; 0x34
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	4610      	mov	r0, r2
 800c2e4:	f7f6 fbec 	bl	8002ac0 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800c2e8:	4b2e      	ldr	r3, [pc, #184]	; (800c3a4 <vTaskSwitchContext+0x15c>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a2e      	ldr	r2, [pc, #184]	; (800c3a8 <vTaskSwitchContext+0x160>)
 800c2ee:	6812      	ldr	r2, [r2, #0]
 800c2f0:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2f4:	4b2d      	ldr	r3, [pc, #180]	; (800c3ac <vTaskSwitchContext+0x164>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	617b      	str	r3, [r7, #20]
 800c2fa:	e010      	b.n	800c31e <vTaskSwitchContext+0xd6>
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d10a      	bne.n	800c318 <vTaskSwitchContext+0xd0>
	__asm volatile
 800c302:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	607b      	str	r3, [r7, #4]
}
 800c314:	bf00      	nop
 800c316:	e7fe      	b.n	800c316 <vTaskSwitchContext+0xce>
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	3b01      	subs	r3, #1
 800c31c:	617b      	str	r3, [r7, #20]
 800c31e:	4924      	ldr	r1, [pc, #144]	; (800c3b0 <vTaskSwitchContext+0x168>)
 800c320:	697a      	ldr	r2, [r7, #20]
 800c322:	4613      	mov	r3, r2
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4413      	add	r3, r2
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	440b      	add	r3, r1
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d0e4      	beq.n	800c2fc <vTaskSwitchContext+0xb4>
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	4613      	mov	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4413      	add	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4a1c      	ldr	r2, [pc, #112]	; (800c3b0 <vTaskSwitchContext+0x168>)
 800c33e:	4413      	add	r3, r2
 800c340:	60bb      	str	r3, [r7, #8]
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	685a      	ldr	r2, [r3, #4]
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	605a      	str	r2, [r3, #4]
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	685a      	ldr	r2, [r3, #4]
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	3308      	adds	r3, #8
 800c354:	429a      	cmp	r2, r3
 800c356:	d104      	bne.n	800c362 <vTaskSwitchContext+0x11a>
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	685a      	ldr	r2, [r3, #4]
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	605a      	str	r2, [r3, #4]
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	4a0e      	ldr	r2, [pc, #56]	; (800c3a4 <vTaskSwitchContext+0x15c>)
 800c36a:	6013      	str	r3, [r2, #0]
 800c36c:	4a0f      	ldr	r2, [pc, #60]	; (800c3ac <vTaskSwitchContext+0x164>)
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800c372:	4b0c      	ldr	r3, [pc, #48]	; (800c3a4 <vTaskSwitchContext+0x15c>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800c37a:	4a0b      	ldr	r2, [pc, #44]	; (800c3a8 <vTaskSwitchContext+0x160>)
 800c37c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c37e:	4b09      	ldr	r3, [pc, #36]	; (800c3a4 <vTaskSwitchContext+0x15c>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c386:	4a0b      	ldr	r2, [pc, #44]	; (800c3b4 <vTaskSwitchContext+0x16c>)
 800c388:	6013      	str	r3, [r2, #0]
}
 800c38a:	bf00      	nop
 800c38c:	3718      	adds	r7, #24
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	200078d8 	.word	0x200078d8
 800c398:	200078c4 	.word	0x200078c4
 800c39c:	200078e0 	.word	0x200078e0
 800c3a0:	200078dc 	.word	0x200078dc
 800c3a4:	200073d8 	.word	0x200073d8
 800c3a8:	200078ac 	.word	0x200078ac
 800c3ac:	200078b8 	.word	0x200078b8
 800c3b0:	200073dc 	.word	0x200073dc
 800c3b4:	2000002c 	.word	0x2000002c

0800c3b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d10a      	bne.n	800c3de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c3c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c3cc:	f383 8811 	msr	BASEPRI, r3
 800c3d0:	f3bf 8f6f 	isb	sy
 800c3d4:	f3bf 8f4f 	dsb	sy
 800c3d8:	60fb      	str	r3, [r7, #12]
}
 800c3da:	bf00      	nop
 800c3dc:	e7fe      	b.n	800c3dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3de:	4b07      	ldr	r3, [pc, #28]	; (800c3fc <vTaskPlaceOnEventList+0x44>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	3318      	adds	r3, #24
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7fe fac5 	bl	800a976 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	6838      	ldr	r0, [r7, #0]
 800c3f0:	f000 fac4 	bl	800c97c <prvAddCurrentTaskToDelayedList>
}
 800c3f4:	bf00      	nop
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	200073d8 	.word	0x200073d8

0800c400 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d10a      	bne.n	800c428 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c412:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	617b      	str	r3, [r7, #20]
}
 800c424:	bf00      	nop
 800c426:	e7fe      	b.n	800c426 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c428:	4b0a      	ldr	r3, [pc, #40]	; (800c454 <vTaskPlaceOnEventListRestricted+0x54>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3318      	adds	r3, #24
 800c42e:	4619      	mov	r1, r3
 800c430:	68f8      	ldr	r0, [r7, #12]
 800c432:	f7fe fa7c 	bl	800a92e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d002      	beq.n	800c442 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c43c:	f04f 33ff 	mov.w	r3, #4294967295
 800c440:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c442:	6879      	ldr	r1, [r7, #4]
 800c444:	68b8      	ldr	r0, [r7, #8]
 800c446:	f000 fa99 	bl	800c97c <prvAddCurrentTaskToDelayedList>
	}
 800c44a:	bf00      	nop
 800c44c:	3718      	adds	r7, #24
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	200073d8 	.word	0x200073d8

0800c458 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d10a      	bne.n	800c484 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c46e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	60fb      	str	r3, [r7, #12]
}
 800c480:	bf00      	nop
 800c482:	e7fe      	b.n	800c482 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	3318      	adds	r3, #24
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fe faad 	bl	800a9e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c48e:	4b1f      	ldr	r3, [pc, #124]	; (800c50c <xTaskRemoveFromEventList+0xb4>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d11f      	bne.n	800c4d6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	3304      	adds	r3, #4
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe faa4 	bl	800a9e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4a4:	4b1a      	ldr	r3, [pc, #104]	; (800c510 <xTaskRemoveFromEventList+0xb8>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d903      	bls.n	800c4b4 <xTaskRemoveFromEventList+0x5c>
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b0:	4a17      	ldr	r2, [pc, #92]	; (800c510 <xTaskRemoveFromEventList+0xb8>)
 800c4b2:	6013      	str	r3, [r2, #0]
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	4413      	add	r3, r2
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	4a14      	ldr	r2, [pc, #80]	; (800c514 <xTaskRemoveFromEventList+0xbc>)
 800c4c2:	441a      	add	r2, r3
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	4610      	mov	r0, r2
 800c4cc:	f7fe fa2f 	bl	800a92e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800c4d0:	f000 f9a2 	bl	800c818 <prvResetNextTaskUnblockTime>
 800c4d4:	e005      	b.n	800c4e2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	3318      	adds	r3, #24
 800c4da:	4619      	mov	r1, r3
 800c4dc:	480e      	ldr	r0, [pc, #56]	; (800c518 <xTaskRemoveFromEventList+0xc0>)
 800c4de:	f7fe fa26 	bl	800a92e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e6:	4b0d      	ldr	r3, [pc, #52]	; (800c51c <xTaskRemoveFromEventList+0xc4>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d905      	bls.n	800c4fc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c4f4:	4b0a      	ldr	r3, [pc, #40]	; (800c520 <xTaskRemoveFromEventList+0xc8>)
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	601a      	str	r2, [r3, #0]
 800c4fa:	e001      	b.n	800c500 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c500:	697b      	ldr	r3, [r7, #20]
}
 800c502:	4618      	mov	r0, r3
 800c504:	3718      	adds	r7, #24
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	200078d8 	.word	0x200078d8
 800c510:	200078b8 	.word	0x200078b8
 800c514:	200073dc 	.word	0x200073dc
 800c518:	2000786c 	.word	0x2000786c
 800c51c:	200073d8 	.word	0x200073d8
 800c520:	200078c4 	.word	0x200078c4

0800c524 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c52c:	4b06      	ldr	r3, [pc, #24]	; (800c548 <vTaskInternalSetTimeOutState+0x24>)
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c534:	4b05      	ldr	r3, [pc, #20]	; (800c54c <vTaskInternalSetTimeOutState+0x28>)
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	605a      	str	r2, [r3, #4]
}
 800c53c:	bf00      	nop
 800c53e:	370c      	adds	r7, #12
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr
 800c548:	200078c8 	.word	0x200078c8
 800c54c:	200078b4 	.word	0x200078b4

0800c550 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b088      	sub	sp, #32
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d10a      	bne.n	800c576 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c560:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c564:	f383 8811 	msr	BASEPRI, r3
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	f3bf 8f4f 	dsb	sy
 800c570:	613b      	str	r3, [r7, #16]
}
 800c572:	bf00      	nop
 800c574:	e7fe      	b.n	800c574 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d10a      	bne.n	800c592 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c57c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c580:	f383 8811 	msr	BASEPRI, r3
 800c584:	f3bf 8f6f 	isb	sy
 800c588:	f3bf 8f4f 	dsb	sy
 800c58c:	60fb      	str	r3, [r7, #12]
}
 800c58e:	bf00      	nop
 800c590:	e7fe      	b.n	800c590 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c592:	f7fe fb7f 	bl	800ac94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c596:	4b24      	ldr	r3, [pc, #144]	; (800c628 <xTaskCheckForTimeOut+0xd8>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	69ba      	ldr	r2, [r7, #24]
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800c5a6:	4b21      	ldr	r3, [pc, #132]	; (800c62c <xTaskCheckForTimeOut+0xdc>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d007      	beq.n	800c5c2 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800c5b2:	4b1e      	ldr	r3, [pc, #120]	; (800c62c <xTaskCheckForTimeOut+0xdc>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
				xReturn = pdTRUE;
 800c5bc:	2301      	movs	r3, #1
 800c5be:	61fb      	str	r3, [r7, #28]
 800c5c0:	e02b      	b.n	800c61a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ca:	d102      	bne.n	800c5d2 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	61fb      	str	r3, [r7, #28]
 800c5d0:	e023      	b.n	800c61a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	4b16      	ldr	r3, [pc, #88]	; (800c630 <xTaskCheckForTimeOut+0xe0>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d007      	beq.n	800c5ee <xTaskCheckForTimeOut+0x9e>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	69ba      	ldr	r2, [r7, #24]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d302      	bcc.n	800c5ee <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	61fb      	str	r3, [r7, #28]
 800c5ec:	e015      	b.n	800c61a <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	697a      	ldr	r2, [r7, #20]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d20b      	bcs.n	800c610 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	1ad2      	subs	r2, r2, r3
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f7ff ff8d 	bl	800c524 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c60a:	2300      	movs	r3, #0
 800c60c:	61fb      	str	r3, [r7, #28]
 800c60e:	e004      	b.n	800c61a <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	2200      	movs	r2, #0
 800c614:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c616:	2301      	movs	r3, #1
 800c618:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c61a:	f7fe fb6b 	bl	800acf4 <vPortExitCritical>

	return xReturn;
 800c61e:	69fb      	ldr	r3, [r7, #28]
}
 800c620:	4618      	mov	r0, r3
 800c622:	3720      	adds	r7, #32
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	200078b4 	.word	0x200078b4
 800c62c:	200073d8 	.word	0x200073d8
 800c630:	200078c8 	.word	0x200078c8

0800c634 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c634:	b480      	push	{r7}
 800c636:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c638:	4b03      	ldr	r3, [pc, #12]	; (800c648 <vTaskMissedYield+0x14>)
 800c63a:	2201      	movs	r2, #1
 800c63c:	601a      	str	r2, [r3, #0]
}
 800c63e:	bf00      	nop
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr
 800c648:	200078c4 	.word	0x200078c4

0800c64c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c654:	f000 f87c 	bl	800c750 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c658:	4b19      	ldr	r3, [pc, #100]	; (800c6c0 <prvIdleTask+0x74>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d907      	bls.n	800c670 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c660:	4b18      	ldr	r3, [pc, #96]	; (800c6c4 <prvIdleTask+0x78>)
 800c662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c666:	601a      	str	r2, [r3, #0]
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c670:	f7f6 f9f2 	bl	8002a58 <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800c674:	f7ff fc40 	bl	800bef8 <prvGetExpectedIdleTime>
 800c678:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d9e9      	bls.n	800c654 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800c680:	f7ff fc2c 	bl	800bedc <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800c684:	4b10      	ldr	r3, [pc, #64]	; (800c6c8 <prvIdleTask+0x7c>)
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	4b10      	ldr	r3, [pc, #64]	; (800c6cc <prvIdleTask+0x80>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d20a      	bcs.n	800c6a6 <prvIdleTask+0x5a>
	__asm volatile
 800c690:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c694:	f383 8811 	msr	BASEPRI, r3
 800c698:	f3bf 8f6f 	isb	sy
 800c69c:	f3bf 8f4f 	dsb	sy
 800c6a0:	60bb      	str	r3, [r7, #8]
}
 800c6a2:	bf00      	nop
 800c6a4:	e7fe      	b.n	800c6a4 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800c6a6:	f7ff fc27 	bl	800bef8 <prvGetExpectedIdleTime>
 800c6aa:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d902      	bls.n	800c6b8 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f7f6 fa1b 	bl	8002aee <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800c6b8:	f7ff fc56 	bl	800bf68 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800c6bc:	e7ca      	b.n	800c654 <prvIdleTask+0x8>
 800c6be:	bf00      	nop
 800c6c0:	200073dc 	.word	0x200073dc
 800c6c4:	e000ed04 	.word	0xe000ed04
 800c6c8:	200078d0 	.word	0x200078d0
 800c6cc:	200078b4 	.word	0x200078b4

0800c6d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	607b      	str	r3, [r7, #4]
 800c6da:	e00c      	b.n	800c6f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4413      	add	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4a12      	ldr	r2, [pc, #72]	; (800c730 <prvInitialiseTaskLists+0x60>)
 800c6e8:	4413      	add	r3, r2
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7fe f8f2 	bl	800a8d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	607b      	str	r3, [r7, #4]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2b37      	cmp	r3, #55	; 0x37
 800c6fa:	d9ef      	bls.n	800c6dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c6fc:	480d      	ldr	r0, [pc, #52]	; (800c734 <prvInitialiseTaskLists+0x64>)
 800c6fe:	f7fe f8e9 	bl	800a8d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c702:	480d      	ldr	r0, [pc, #52]	; (800c738 <prvInitialiseTaskLists+0x68>)
 800c704:	f7fe f8e6 	bl	800a8d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c708:	480c      	ldr	r0, [pc, #48]	; (800c73c <prvInitialiseTaskLists+0x6c>)
 800c70a:	f7fe f8e3 	bl	800a8d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c70e:	480c      	ldr	r0, [pc, #48]	; (800c740 <prvInitialiseTaskLists+0x70>)
 800c710:	f7fe f8e0 	bl	800a8d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c714:	480b      	ldr	r0, [pc, #44]	; (800c744 <prvInitialiseTaskLists+0x74>)
 800c716:	f7fe f8dd 	bl	800a8d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c71a:	4b0b      	ldr	r3, [pc, #44]	; (800c748 <prvInitialiseTaskLists+0x78>)
 800c71c:	4a05      	ldr	r2, [pc, #20]	; (800c734 <prvInitialiseTaskLists+0x64>)
 800c71e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c720:	4b0a      	ldr	r3, [pc, #40]	; (800c74c <prvInitialiseTaskLists+0x7c>)
 800c722:	4a05      	ldr	r2, [pc, #20]	; (800c738 <prvInitialiseTaskLists+0x68>)
 800c724:	601a      	str	r2, [r3, #0]
}
 800c726:	bf00      	nop
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	200073dc 	.word	0x200073dc
 800c734:	2000783c 	.word	0x2000783c
 800c738:	20007850 	.word	0x20007850
 800c73c:	2000786c 	.word	0x2000786c
 800c740:	20007880 	.word	0x20007880
 800c744:	20007898 	.word	0x20007898
 800c748:	20007864 	.word	0x20007864
 800c74c:	20007868 	.word	0x20007868

0800c750 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c756:	e019      	b.n	800c78c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c758:	f7fe fa9c 	bl	800ac94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c75c:	4b10      	ldr	r3, [pc, #64]	; (800c7a0 <prvCheckTasksWaitingTermination+0x50>)
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	3304      	adds	r3, #4
 800c768:	4618      	mov	r0, r3
 800c76a:	f7fe f93d 	bl	800a9e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c76e:	4b0d      	ldr	r3, [pc, #52]	; (800c7a4 <prvCheckTasksWaitingTermination+0x54>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	3b01      	subs	r3, #1
 800c774:	4a0b      	ldr	r2, [pc, #44]	; (800c7a4 <prvCheckTasksWaitingTermination+0x54>)
 800c776:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c778:	4b0b      	ldr	r3, [pc, #44]	; (800c7a8 <prvCheckTasksWaitingTermination+0x58>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	3b01      	subs	r3, #1
 800c77e:	4a0a      	ldr	r2, [pc, #40]	; (800c7a8 <prvCheckTasksWaitingTermination+0x58>)
 800c780:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c782:	f7fe fab7 	bl	800acf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f810 	bl	800c7ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c78c:	4b06      	ldr	r3, [pc, #24]	; (800c7a8 <prvCheckTasksWaitingTermination+0x58>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d1e1      	bne.n	800c758 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop
 800c798:	3708      	adds	r7, #8
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	20007880 	.word	0x20007880
 800c7a4:	200078b0 	.word	0x200078b0
 800c7a8:	20007894 	.word	0x20007894

0800c7ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f001 ffba 	bl	800e734 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d108      	bne.n	800c7dc <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7fd ff62 	bl	800a698 <vPortFree>
				vPortFree( pxTCB );
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f7fd ff5f 	bl	800a698 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c7da:	e018      	b.n	800c80e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	d103      	bne.n	800c7ee <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f7fd ff56 	bl	800a698 <vPortFree>
	}
 800c7ec:	e00f      	b.n	800c80e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800c7f4:	2b02      	cmp	r3, #2
 800c7f6:	d00a      	beq.n	800c80e <prvDeleteTCB+0x62>
	__asm volatile
 800c7f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c7fc:	f383 8811 	msr	BASEPRI, r3
 800c800:	f3bf 8f6f 	isb	sy
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	60fb      	str	r3, [r7, #12]
}
 800c80a:	bf00      	nop
 800c80c:	e7fe      	b.n	800c80c <prvDeleteTCB+0x60>
	}
 800c80e:	bf00      	nop
 800c810:	3710      	adds	r7, #16
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
	...

0800c818 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c81e:	4b0c      	ldr	r3, [pc, #48]	; (800c850 <prvResetNextTaskUnblockTime+0x38>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d104      	bne.n	800c832 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c828:	4b0a      	ldr	r3, [pc, #40]	; (800c854 <prvResetNextTaskUnblockTime+0x3c>)
 800c82a:	f04f 32ff 	mov.w	r2, #4294967295
 800c82e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c830:	e008      	b.n	800c844 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c832:	4b07      	ldr	r3, [pc, #28]	; (800c850 <prvResetNextTaskUnblockTime+0x38>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	68db      	ldr	r3, [r3, #12]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	4a04      	ldr	r2, [pc, #16]	; (800c854 <prvResetNextTaskUnblockTime+0x3c>)
 800c842:	6013      	str	r3, [r2, #0]
}
 800c844:	bf00      	nop
 800c846:	370c      	adds	r7, #12
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr
 800c850:	20007864 	.word	0x20007864
 800c854:	200078d0 	.word	0x200078d0

0800c858 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c85e:	4b0b      	ldr	r3, [pc, #44]	; (800c88c <xTaskGetSchedulerState+0x34>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d102      	bne.n	800c86c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c866:	2301      	movs	r3, #1
 800c868:	607b      	str	r3, [r7, #4]
 800c86a:	e008      	b.n	800c87e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c86c:	4b08      	ldr	r3, [pc, #32]	; (800c890 <xTaskGetSchedulerState+0x38>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d102      	bne.n	800c87a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c874:	2302      	movs	r3, #2
 800c876:	607b      	str	r3, [r7, #4]
 800c878:	e001      	b.n	800c87e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c87a:	2300      	movs	r3, #0
 800c87c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c87e:	687b      	ldr	r3, [r7, #4]
	}
 800c880:	4618      	mov	r0, r3
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr
 800c88c:	200078bc 	.word	0x200078bc
 800c890:	200078d8 	.word	0x200078d8

0800c894 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d05c      	beq.n	800c964 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c8aa:	4b31      	ldr	r3, [pc, #196]	; (800c970 <xTaskPriorityDisinherit+0xdc>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	693a      	ldr	r2, [r7, #16]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d00a      	beq.n	800c8ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c8b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c8b8:	f383 8811 	msr	BASEPRI, r3
 800c8bc:	f3bf 8f6f 	isb	sy
 800c8c0:	f3bf 8f4f 	dsb	sy
 800c8c4:	60fb      	str	r3, [r7, #12]
}
 800c8c6:	bf00      	nop
 800c8c8:	e7fe      	b.n	800c8c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10a      	bne.n	800c8ea <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800c8d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	60bb      	str	r3, [r7, #8]
}
 800c8e6:	bf00      	nop
 800c8e8:	e7fe      	b.n	800c8e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c8f0:	1e5a      	subs	r2, r3, #1
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c902:	429a      	cmp	r2, r3
 800c904:	d02e      	beq.n	800c964 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d129      	bne.n	800c964 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	3304      	adds	r3, #4
 800c914:	4618      	mov	r0, r3
 800c916:	f7fe f867 	bl	800a9e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c928:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c934:	4b0f      	ldr	r3, [pc, #60]	; (800c974 <xTaskPriorityDisinherit+0xe0>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d903      	bls.n	800c944 <xTaskPriorityDisinherit+0xb0>
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c940:	4a0c      	ldr	r2, [pc, #48]	; (800c974 <xTaskPriorityDisinherit+0xe0>)
 800c942:	6013      	str	r3, [r2, #0]
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c948:	4613      	mov	r3, r2
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	4413      	add	r3, r2
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	4a09      	ldr	r2, [pc, #36]	; (800c978 <xTaskPriorityDisinherit+0xe4>)
 800c952:	441a      	add	r2, r3
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	3304      	adds	r3, #4
 800c958:	4619      	mov	r1, r3
 800c95a:	4610      	mov	r0, r2
 800c95c:	f7fd ffe7 	bl	800a92e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c960:	2301      	movs	r3, #1
 800c962:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c964:	697b      	ldr	r3, [r7, #20]
	}
 800c966:	4618      	mov	r0, r3
 800c968:	3718      	adds	r7, #24
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	200073d8 	.word	0x200073d8
 800c974:	200078b8 	.word	0x200078b8
 800c978:	200073dc 	.word	0x200073dc

0800c97c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c986:	4b24      	ldr	r3, [pc, #144]	; (800ca18 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800c98c:	4b23      	ldr	r3, [pc, #140]	; (800ca1c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2200      	movs	r2, #0
 800c992:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c996:	4b21      	ldr	r3, [pc, #132]	; (800ca1c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	3304      	adds	r3, #4
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7fe f823 	bl	800a9e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a8:	d10a      	bne.n	800c9c0 <prvAddCurrentTaskToDelayedList+0x44>
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d007      	beq.n	800c9c0 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9b0:	4b1a      	ldr	r3, [pc, #104]	; (800ca1c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	3304      	adds	r3, #4
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	4819      	ldr	r0, [pc, #100]	; (800ca20 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c9ba:	f7fd ffb8 	bl	800a92e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c9be:	e026      	b.n	800ca0e <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c9c0:	68fa      	ldr	r2, [r7, #12]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c9c8:	4b14      	ldr	r3, [pc, #80]	; (800ca1c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	68ba      	ldr	r2, [r7, #8]
 800c9ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c9d0:	68ba      	ldr	r2, [r7, #8]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d209      	bcs.n	800c9ec <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9d8:	4b12      	ldr	r3, [pc, #72]	; (800ca24 <prvAddCurrentTaskToDelayedList+0xa8>)
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	4b0f      	ldr	r3, [pc, #60]	; (800ca1c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	3304      	adds	r3, #4
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	4610      	mov	r0, r2
 800c9e6:	f7fd ffc6 	bl	800a976 <vListInsert>
}
 800c9ea:	e010      	b.n	800ca0e <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9ec:	4b0e      	ldr	r3, [pc, #56]	; (800ca28 <prvAddCurrentTaskToDelayedList+0xac>)
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	4b0a      	ldr	r3, [pc, #40]	; (800ca1c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	3304      	adds	r3, #4
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	f7fd ffbc 	bl	800a976 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c9fe:	4b0b      	ldr	r3, [pc, #44]	; (800ca2c <prvAddCurrentTaskToDelayedList+0xb0>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	68ba      	ldr	r2, [r7, #8]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d202      	bcs.n	800ca0e <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800ca08:	4a08      	ldr	r2, [pc, #32]	; (800ca2c <prvAddCurrentTaskToDelayedList+0xb0>)
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	6013      	str	r3, [r2, #0]
}
 800ca0e:	bf00      	nop
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	200078b4 	.word	0x200078b4
 800ca1c:	200073d8 	.word	0x200073d8
 800ca20:	20007898 	.word	0x20007898
 800ca24:	20007868 	.word	0x20007868
 800ca28:	20007864 	.word	0x20007864
 800ca2c:	200078d0 	.word	0x200078d0

0800ca30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b08a      	sub	sp, #40	; 0x28
 800ca34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ca36:	2300      	movs	r3, #0
 800ca38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ca3a:	f000 fba1 	bl	800d180 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ca3e:	4b1c      	ldr	r3, [pc, #112]	; (800cab0 <xTimerCreateTimerTask+0x80>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d021      	beq.n	800ca8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ca46:	2300      	movs	r3, #0
 800ca48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ca4e:	1d3a      	adds	r2, r7, #4
 800ca50:	f107 0108 	add.w	r1, r7, #8
 800ca54:	f107 030c 	add.w	r3, r7, #12
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fd fd33 	bl	800a4c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ca5e:	6879      	ldr	r1, [r7, #4]
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	68fa      	ldr	r2, [r7, #12]
 800ca64:	9202      	str	r2, [sp, #8]
 800ca66:	9301      	str	r3, [sp, #4]
 800ca68:	2337      	movs	r3, #55	; 0x37
 800ca6a:	9300      	str	r3, [sp, #0]
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	460a      	mov	r2, r1
 800ca70:	4910      	ldr	r1, [pc, #64]	; (800cab4 <xTimerCreateTimerTask+0x84>)
 800ca72:	4811      	ldr	r0, [pc, #68]	; (800cab8 <xTimerCreateTimerTask+0x88>)
 800ca74:	f7fe fefa 	bl	800b86c <xTaskCreateStatic>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	4a10      	ldr	r2, [pc, #64]	; (800cabc <xTimerCreateTimerTask+0x8c>)
 800ca7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ca7e:	4b0f      	ldr	r3, [pc, #60]	; (800cabc <xTimerCreateTimerTask+0x8c>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d001      	beq.n	800ca8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ca86:	2301      	movs	r3, #1
 800ca88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d10a      	bne.n	800caa6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ca90:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ca94:	f383 8811 	msr	BASEPRI, r3
 800ca98:	f3bf 8f6f 	isb	sy
 800ca9c:	f3bf 8f4f 	dsb	sy
 800caa0:	613b      	str	r3, [r7, #16]
}
 800caa2:	bf00      	nop
 800caa4:	e7fe      	b.n	800caa4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800caa6:	697b      	ldr	r3, [r7, #20]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3718      	adds	r7, #24
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	20007914 	.word	0x20007914
 800cab4:	0800ebb4 	.word	0x0800ebb4
 800cab8:	0800cd29 	.word	0x0800cd29
 800cabc:	20007918 	.word	0x20007918

0800cac0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b088      	sub	sp, #32
 800cac4:	af02      	add	r7, sp, #8
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	607a      	str	r2, [r7, #4]
 800cacc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800cace:	202c      	movs	r0, #44	; 0x2c
 800cad0:	f7fd fd12 	bl	800a4f8 <pvPortMalloc>
 800cad4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00d      	beq.n	800caf8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	2200      	movs	r2, #0
 800cae0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	9301      	str	r3, [sp, #4]
 800cae8:	6a3b      	ldr	r3, [r7, #32]
 800caea:	9300      	str	r3, [sp, #0]
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	68b9      	ldr	r1, [r7, #8]
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f000 f843 	bl	800cb7e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800caf8:	697b      	ldr	r3, [r7, #20]
	}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3718      	adds	r7, #24
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b08a      	sub	sp, #40	; 0x28
 800cb06:	af02      	add	r7, sp, #8
 800cb08:	60f8      	str	r0, [r7, #12]
 800cb0a:	60b9      	str	r1, [r7, #8]
 800cb0c:	607a      	str	r2, [r7, #4]
 800cb0e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800cb10:	232c      	movs	r3, #44	; 0x2c
 800cb12:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	2b2c      	cmp	r3, #44	; 0x2c
 800cb18:	d00a      	beq.n	800cb30 <xTimerCreateStatic+0x2e>
	__asm volatile
 800cb1a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cb1e:	f383 8811 	msr	BASEPRI, r3
 800cb22:	f3bf 8f6f 	isb	sy
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	61bb      	str	r3, [r7, #24]
}
 800cb2c:	bf00      	nop
 800cb2e:	e7fe      	b.n	800cb2e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cb30:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800cb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10a      	bne.n	800cb4e <xTimerCreateStatic+0x4c>
	__asm volatile
 800cb38:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cb3c:	f383 8811 	msr	BASEPRI, r3
 800cb40:	f3bf 8f6f 	isb	sy
 800cb44:	f3bf 8f4f 	dsb	sy
 800cb48:	617b      	str	r3, [r7, #20]
}
 800cb4a:	bf00      	nop
 800cb4c:	e7fe      	b.n	800cb4c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800cb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb50:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d00d      	beq.n	800cb74 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	2202      	movs	r2, #2
 800cb5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	9301      	str	r3, [sp, #4]
 800cb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb66:	9300      	str	r3, [sp, #0]
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	68b9      	ldr	r1, [r7, #8]
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f000 f805 	bl	800cb7e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cb74:	69fb      	ldr	r3, [r7, #28]
	}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3720      	adds	r7, #32
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b086      	sub	sp, #24
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	60f8      	str	r0, [r7, #12]
 800cb86:	60b9      	str	r1, [r7, #8]
 800cb88:	607a      	str	r2, [r7, #4]
 800cb8a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d10a      	bne.n	800cba8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800cb92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	617b      	str	r3, [r7, #20]
}
 800cba4:	bf00      	nop
 800cba6:	e7fe      	b.n	800cba6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800cba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d01e      	beq.n	800cbec <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800cbae:	f000 fae7 	bl	800d180 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800cbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbba:	68ba      	ldr	r2, [r7, #8]
 800cbbc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc0:	683a      	ldr	r2, [r7, #0]
 800cbc2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc6:	6a3a      	ldr	r2, [r7, #32]
 800cbc8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800cbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbcc:	3304      	adds	r3, #4
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fd fea0 	bl	800a914 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d008      	beq.n	800cbec <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800cbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbe0:	f043 0304 	orr.w	r3, r3, #4
 800cbe4:	b2da      	uxtb	r2, r3
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800cbec:	bf00      	nop
 800cbee:	3718      	adds	r7, #24
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b08a      	sub	sp, #40	; 0x28
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	607a      	str	r2, [r7, #4]
 800cc00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cc02:	2300      	movs	r3, #0
 800cc04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d10a      	bne.n	800cc22 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cc0c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cc10:	f383 8811 	msr	BASEPRI, r3
 800cc14:	f3bf 8f6f 	isb	sy
 800cc18:	f3bf 8f4f 	dsb	sy
 800cc1c:	623b      	str	r3, [r7, #32]
}
 800cc1e:	bf00      	nop
 800cc20:	e7fe      	b.n	800cc20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cc22:	4b1a      	ldr	r3, [pc, #104]	; (800cc8c <xTimerGenericCommand+0x98>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d02a      	beq.n	800cc80 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	2b05      	cmp	r3, #5
 800cc3a:	dc18      	bgt.n	800cc6e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cc3c:	f7ff fe0c 	bl	800c858 <xTaskGetSchedulerState>
 800cc40:	4603      	mov	r3, r0
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	d109      	bne.n	800cc5a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cc46:	4b11      	ldr	r3, [pc, #68]	; (800cc8c <xTimerGenericCommand+0x98>)
 800cc48:	6818      	ldr	r0, [r3, #0]
 800cc4a:	f107 0110 	add.w	r1, r7, #16
 800cc4e:	2300      	movs	r3, #0
 800cc50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc52:	f7fe fa23 	bl	800b09c <xQueueGenericSend>
 800cc56:	6278      	str	r0, [r7, #36]	; 0x24
 800cc58:	e012      	b.n	800cc80 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cc5a:	4b0c      	ldr	r3, [pc, #48]	; (800cc8c <xTimerGenericCommand+0x98>)
 800cc5c:	6818      	ldr	r0, [r3, #0]
 800cc5e:	f107 0110 	add.w	r1, r7, #16
 800cc62:	2300      	movs	r3, #0
 800cc64:	2200      	movs	r2, #0
 800cc66:	f7fe fa19 	bl	800b09c <xQueueGenericSend>
 800cc6a:	6278      	str	r0, [r7, #36]	; 0x24
 800cc6c:	e008      	b.n	800cc80 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cc6e:	4b07      	ldr	r3, [pc, #28]	; (800cc8c <xTimerGenericCommand+0x98>)
 800cc70:	6818      	ldr	r0, [r3, #0]
 800cc72:	f107 0110 	add.w	r1, r7, #16
 800cc76:	2300      	movs	r3, #0
 800cc78:	683a      	ldr	r2, [r7, #0]
 800cc7a:	f7fe fb0d 	bl	800b298 <xQueueGenericSendFromISR>
 800cc7e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3728      	adds	r7, #40	; 0x28
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	20007914 	.word	0x20007914

0800cc90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b088      	sub	sp, #32
 800cc94:	af02      	add	r7, sp, #8
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc9a:	4b22      	ldr	r3, [pc, #136]	; (800cd24 <prvProcessExpiredTimer+0x94>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	68db      	ldr	r3, [r3, #12]
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	3304      	adds	r3, #4
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7fd fe9d 	bl	800a9e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccb4:	f003 0304 	and.w	r3, r3, #4
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d022      	beq.n	800cd02 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	699a      	ldr	r2, [r3, #24]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	18d1      	adds	r1, r2, r3
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	683a      	ldr	r2, [r7, #0]
 800ccc8:	6978      	ldr	r0, [r7, #20]
 800ccca:	f000 f8d1 	bl	800ce70 <prvInsertTimerInActiveList>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d01f      	beq.n	800cd14 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	9300      	str	r3, [sp, #0]
 800ccd8:	2300      	movs	r3, #0
 800ccda:	687a      	ldr	r2, [r7, #4]
 800ccdc:	2100      	movs	r1, #0
 800ccde:	6978      	ldr	r0, [r7, #20]
 800cce0:	f7ff ff88 	bl	800cbf4 <xTimerGenericCommand>
 800cce4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d113      	bne.n	800cd14 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ccec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ccf0:	f383 8811 	msr	BASEPRI, r3
 800ccf4:	f3bf 8f6f 	isb	sy
 800ccf8:	f3bf 8f4f 	dsb	sy
 800ccfc:	60fb      	str	r3, [r7, #12]
}
 800ccfe:	bf00      	nop
 800cd00:	e7fe      	b.n	800cd00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd08:	f023 0301 	bic.w	r3, r3, #1
 800cd0c:	b2da      	uxtb	r2, r3
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	6a1b      	ldr	r3, [r3, #32]
 800cd18:	6978      	ldr	r0, [r7, #20]
 800cd1a:	4798      	blx	r3
}
 800cd1c:	bf00      	nop
 800cd1e:	3718      	adds	r7, #24
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	2000790c 	.word	0x2000790c

0800cd28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd30:	f107 0308 	add.w	r3, r7, #8
 800cd34:	4618      	mov	r0, r3
 800cd36:	f000 f857 	bl	800cde8 <prvGetNextExpireTime>
 800cd3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	4619      	mov	r1, r3
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f000 f803 	bl	800cd4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cd46:	f000 f8d5 	bl	800cef4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd4a:	e7f1      	b.n	800cd30 <prvTimerTask+0x8>

0800cd4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cd56:	f7ff f8c1 	bl	800bedc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd5a:	f107 0308 	add.w	r3, r7, #8
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f000 f866 	bl	800ce30 <prvSampleTimeNow>
 800cd64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d130      	bne.n	800cdce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10a      	bne.n	800cd88 <prvProcessTimerOrBlockTask+0x3c>
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d806      	bhi.n	800cd88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cd7a:	f7ff f8f5 	bl	800bf68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cd7e:	68f9      	ldr	r1, [r7, #12]
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f7ff ff85 	bl	800cc90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cd86:	e024      	b.n	800cdd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d008      	beq.n	800cda0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cd8e:	4b13      	ldr	r3, [pc, #76]	; (800cddc <prvProcessTimerOrBlockTask+0x90>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d101      	bne.n	800cd9c <prvProcessTimerOrBlockTask+0x50>
 800cd98:	2301      	movs	r3, #1
 800cd9a:	e000      	b.n	800cd9e <prvProcessTimerOrBlockTask+0x52>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cda0:	4b0f      	ldr	r3, [pc, #60]	; (800cde0 <prvProcessTimerOrBlockTask+0x94>)
 800cda2:	6818      	ldr	r0, [r3, #0]
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	1ad3      	subs	r3, r2, r3
 800cdaa:	683a      	ldr	r2, [r7, #0]
 800cdac:	4619      	mov	r1, r3
 800cdae:	f7fe fd29 	bl	800b804 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cdb2:	f7ff f8d9 	bl	800bf68 <xTaskResumeAll>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d10a      	bne.n	800cdd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cdbc:	4b09      	ldr	r3, [pc, #36]	; (800cde4 <prvProcessTimerOrBlockTask+0x98>)
 800cdbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdc2:	601a      	str	r2, [r3, #0]
 800cdc4:	f3bf 8f4f 	dsb	sy
 800cdc8:	f3bf 8f6f 	isb	sy
}
 800cdcc:	e001      	b.n	800cdd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cdce:	f7ff f8cb 	bl	800bf68 <xTaskResumeAll>
}
 800cdd2:	bf00      	nop
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	20007910 	.word	0x20007910
 800cde0:	20007914 	.word	0x20007914
 800cde4:	e000ed04 	.word	0xe000ed04

0800cde8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cde8:	b480      	push	{r7}
 800cdea:	b085      	sub	sp, #20
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cdf0:	4b0e      	ldr	r3, [pc, #56]	; (800ce2c <prvGetNextExpireTime+0x44>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d101      	bne.n	800cdfe <prvGetNextExpireTime+0x16>
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	e000      	b.n	800ce00 <prvGetNextExpireTime+0x18>
 800cdfe:	2200      	movs	r2, #0
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d105      	bne.n	800ce18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce0c:	4b07      	ldr	r3, [pc, #28]	; (800ce2c <prvGetNextExpireTime+0x44>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	60fb      	str	r3, [r7, #12]
 800ce16:	e001      	b.n	800ce1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3714      	adds	r7, #20
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	2000790c 	.word	0x2000790c

0800ce30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ce38:	f7ff f934 	bl	800c0a4 <xTaskGetTickCount>
 800ce3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ce3e:	4b0b      	ldr	r3, [pc, #44]	; (800ce6c <prvSampleTimeNow+0x3c>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	68fa      	ldr	r2, [r7, #12]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d205      	bcs.n	800ce54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ce48:	f000 f936 	bl	800d0b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	601a      	str	r2, [r3, #0]
 800ce52:	e002      	b.n	800ce5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ce5a:	4a04      	ldr	r2, [pc, #16]	; (800ce6c <prvSampleTimeNow+0x3c>)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ce60:	68fb      	ldr	r3, [r7, #12]
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3710      	adds	r7, #16
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	2000791c 	.word	0x2000791c

0800ce70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b086      	sub	sp, #24
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	607a      	str	r2, [r7, #4]
 800ce7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	68ba      	ldr	r2, [r7, #8]
 800ce86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ce8e:	68ba      	ldr	r2, [r7, #8]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d812      	bhi.n	800cebc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	1ad2      	subs	r2, r2, r3
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	699b      	ldr	r3, [r3, #24]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d302      	bcc.n	800ceaa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cea4:	2301      	movs	r3, #1
 800cea6:	617b      	str	r3, [r7, #20]
 800cea8:	e01b      	b.n	800cee2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ceaa:	4b10      	ldr	r3, [pc, #64]	; (800ceec <prvInsertTimerInActiveList+0x7c>)
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	3304      	adds	r3, #4
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	4610      	mov	r0, r2
 800ceb6:	f7fd fd5e 	bl	800a976 <vListInsert>
 800ceba:	e012      	b.n	800cee2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d206      	bcs.n	800ced2 <prvInsertTimerInActiveList+0x62>
 800cec4:	68ba      	ldr	r2, [r7, #8]
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d302      	bcc.n	800ced2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cecc:	2301      	movs	r3, #1
 800cece:	617b      	str	r3, [r7, #20]
 800ced0:	e007      	b.n	800cee2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ced2:	4b07      	ldr	r3, [pc, #28]	; (800cef0 <prvInsertTimerInActiveList+0x80>)
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	3304      	adds	r3, #4
 800ceda:	4619      	mov	r1, r3
 800cedc:	4610      	mov	r0, r2
 800cede:	f7fd fd4a 	bl	800a976 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cee2:	697b      	ldr	r3, [r7, #20]
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3718      	adds	r7, #24
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	20007910 	.word	0x20007910
 800cef0:	2000790c 	.word	0x2000790c

0800cef4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b08e      	sub	sp, #56	; 0x38
 800cef8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cefa:	e0ca      	b.n	800d092 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	da18      	bge.n	800cf34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cf02:	1d3b      	adds	r3, r7, #4
 800cf04:	3304      	adds	r3, #4
 800cf06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d10a      	bne.n	800cf24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cf0e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cf12:	f383 8811 	msr	BASEPRI, r3
 800cf16:	f3bf 8f6f 	isb	sy
 800cf1a:	f3bf 8f4f 	dsb	sy
 800cf1e:	61fb      	str	r3, [r7, #28]
}
 800cf20:	bf00      	nop
 800cf22:	e7fe      	b.n	800cf22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf2a:	6850      	ldr	r0, [r2, #4]
 800cf2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf2e:	6892      	ldr	r2, [r2, #8]
 800cf30:	4611      	mov	r1, r2
 800cf32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f2c0 80aa 	blt.w	800d090 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf42:	695b      	ldr	r3, [r3, #20]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d004      	beq.n	800cf52 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4a:	3304      	adds	r3, #4
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f7fd fd4b 	bl	800a9e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf52:	463b      	mov	r3, r7
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7ff ff6b 	bl	800ce30 <prvSampleTimeNow>
 800cf5a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2b09      	cmp	r3, #9
 800cf60:	f200 8097 	bhi.w	800d092 <prvProcessReceivedCommands+0x19e>
 800cf64:	a201      	add	r2, pc, #4	; (adr r2, 800cf6c <prvProcessReceivedCommands+0x78>)
 800cf66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf6a:	bf00      	nop
 800cf6c:	0800cf95 	.word	0x0800cf95
 800cf70:	0800cf95 	.word	0x0800cf95
 800cf74:	0800cf95 	.word	0x0800cf95
 800cf78:	0800d009 	.word	0x0800d009
 800cf7c:	0800d01d 	.word	0x0800d01d
 800cf80:	0800d067 	.word	0x0800d067
 800cf84:	0800cf95 	.word	0x0800cf95
 800cf88:	0800cf95 	.word	0x0800cf95
 800cf8c:	0800d009 	.word	0x0800d009
 800cf90:	0800d01d 	.word	0x0800d01d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf9a:	f043 0301 	orr.w	r3, r3, #1
 800cf9e:	b2da      	uxtb	r2, r3
 800cfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cfa6:	68ba      	ldr	r2, [r7, #8]
 800cfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfaa:	699b      	ldr	r3, [r3, #24]
 800cfac:	18d1      	adds	r1, r2, r3
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfb4:	f7ff ff5c 	bl	800ce70 <prvInsertTimerInActiveList>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d069      	beq.n	800d092 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc0:	6a1b      	ldr	r3, [r3, #32]
 800cfc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfc4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfcc:	f003 0304 	and.w	r3, r3, #4
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d05e      	beq.n	800d092 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd8:	699b      	ldr	r3, [r3, #24]
 800cfda:	441a      	add	r2, r3
 800cfdc:	2300      	movs	r3, #0
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfe6:	f7ff fe05 	bl	800cbf4 <xTimerGenericCommand>
 800cfea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cfec:	6a3b      	ldr	r3, [r7, #32]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d14f      	bne.n	800d092 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cff2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cff6:	f383 8811 	msr	BASEPRI, r3
 800cffa:	f3bf 8f6f 	isb	sy
 800cffe:	f3bf 8f4f 	dsb	sy
 800d002:	61bb      	str	r3, [r7, #24]
}
 800d004:	bf00      	nop
 800d006:	e7fe      	b.n	800d006 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d00e:	f023 0301 	bic.w	r3, r3, #1
 800d012:	b2da      	uxtb	r2, r3
 800d014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d016:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d01a:	e03a      	b.n	800d092 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d022:	f043 0301 	orr.w	r3, r3, #1
 800d026:	b2da      	uxtb	r2, r3
 800d028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d02e:	68ba      	ldr	r2, [r7, #8]
 800d030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d032:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d036:	699b      	ldr	r3, [r3, #24]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d10a      	bne.n	800d052 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d03c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d040:	f383 8811 	msr	BASEPRI, r3
 800d044:	f3bf 8f6f 	isb	sy
 800d048:	f3bf 8f4f 	dsb	sy
 800d04c:	617b      	str	r3, [r7, #20]
}
 800d04e:	bf00      	nop
 800d050:	e7fe      	b.n	800d050 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d054:	699a      	ldr	r2, [r3, #24]
 800d056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d058:	18d1      	adds	r1, r2, r3
 800d05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d05e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d060:	f7ff ff06 	bl	800ce70 <prvInsertTimerInActiveList>
					break;
 800d064:	e015      	b.n	800d092 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d06c:	f003 0302 	and.w	r3, r3, #2
 800d070:	2b00      	cmp	r3, #0
 800d072:	d103      	bne.n	800d07c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d076:	f7fd fb0f 	bl	800a698 <vPortFree>
 800d07a:	e00a      	b.n	800d092 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d082:	f023 0301 	bic.w	r3, r3, #1
 800d086:	b2da      	uxtb	r2, r3
 800d088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d08e:	e000      	b.n	800d092 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d090:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d092:	4b08      	ldr	r3, [pc, #32]	; (800d0b4 <prvProcessReceivedCommands+0x1c0>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	1d39      	adds	r1, r7, #4
 800d098:	2200      	movs	r2, #0
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fe f998 	bl	800b3d0 <xQueueReceive>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	f47f af2a 	bne.w	800cefc <prvProcessReceivedCommands+0x8>
	}
}
 800d0a8:	bf00      	nop
 800d0aa:	bf00      	nop
 800d0ac:	3730      	adds	r7, #48	; 0x30
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	20007914 	.word	0x20007914

0800d0b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b088      	sub	sp, #32
 800d0bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d0be:	e048      	b.n	800d152 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0c0:	4b2d      	ldr	r3, [pc, #180]	; (800d178 <prvSwitchTimerLists+0xc0>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	68db      	ldr	r3, [r3, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0ca:	4b2b      	ldr	r3, [pc, #172]	; (800d178 <prvSwitchTimerLists+0xc0>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	3304      	adds	r3, #4
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7fd fc85 	bl	800a9e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6a1b      	ldr	r3, [r3, #32]
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0ec:	f003 0304 	and.w	r3, r3, #4
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d02e      	beq.n	800d152 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	699b      	ldr	r3, [r3, #24]
 800d0f8:	693a      	ldr	r2, [r7, #16]
 800d0fa:	4413      	add	r3, r2
 800d0fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d0fe:	68ba      	ldr	r2, [r7, #8]
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	429a      	cmp	r2, r3
 800d104:	d90e      	bls.n	800d124 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	68ba      	ldr	r2, [r7, #8]
 800d10a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d112:	4b19      	ldr	r3, [pc, #100]	; (800d178 <prvSwitchTimerLists+0xc0>)
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	3304      	adds	r3, #4
 800d11a:	4619      	mov	r1, r3
 800d11c:	4610      	mov	r0, r2
 800d11e:	f7fd fc2a 	bl	800a976 <vListInsert>
 800d122:	e016      	b.n	800d152 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d124:	2300      	movs	r3, #0
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	2300      	movs	r3, #0
 800d12a:	693a      	ldr	r2, [r7, #16]
 800d12c:	2100      	movs	r1, #0
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f7ff fd60 	bl	800cbf4 <xTimerGenericCommand>
 800d134:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d10a      	bne.n	800d152 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d13c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d140:	f383 8811 	msr	BASEPRI, r3
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	f3bf 8f4f 	dsb	sy
 800d14c:	603b      	str	r3, [r7, #0]
}
 800d14e:	bf00      	nop
 800d150:	e7fe      	b.n	800d150 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d152:	4b09      	ldr	r3, [pc, #36]	; (800d178 <prvSwitchTimerLists+0xc0>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1b1      	bne.n	800d0c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d15c:	4b06      	ldr	r3, [pc, #24]	; (800d178 <prvSwitchTimerLists+0xc0>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d162:	4b06      	ldr	r3, [pc, #24]	; (800d17c <prvSwitchTimerLists+0xc4>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	4a04      	ldr	r2, [pc, #16]	; (800d178 <prvSwitchTimerLists+0xc0>)
 800d168:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d16a:	4a04      	ldr	r2, [pc, #16]	; (800d17c <prvSwitchTimerLists+0xc4>)
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	6013      	str	r3, [r2, #0]
}
 800d170:	bf00      	nop
 800d172:	3718      	adds	r7, #24
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}
 800d178:	2000790c 	.word	0x2000790c
 800d17c:	20007910 	.word	0x20007910

0800d180 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d186:	f7fd fd85 	bl	800ac94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d18a:	4b15      	ldr	r3, [pc, #84]	; (800d1e0 <prvCheckForValidListAndQueue+0x60>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d120      	bne.n	800d1d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d192:	4814      	ldr	r0, [pc, #80]	; (800d1e4 <prvCheckForValidListAndQueue+0x64>)
 800d194:	f7fd fb9e 	bl	800a8d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d198:	4813      	ldr	r0, [pc, #76]	; (800d1e8 <prvCheckForValidListAndQueue+0x68>)
 800d19a:	f7fd fb9b 	bl	800a8d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d19e:	4b13      	ldr	r3, [pc, #76]	; (800d1ec <prvCheckForValidListAndQueue+0x6c>)
 800d1a0:	4a10      	ldr	r2, [pc, #64]	; (800d1e4 <prvCheckForValidListAndQueue+0x64>)
 800d1a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d1a4:	4b12      	ldr	r3, [pc, #72]	; (800d1f0 <prvCheckForValidListAndQueue+0x70>)
 800d1a6:	4a10      	ldr	r2, [pc, #64]	; (800d1e8 <prvCheckForValidListAndQueue+0x68>)
 800d1a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	9300      	str	r3, [sp, #0]
 800d1ae:	4b11      	ldr	r3, [pc, #68]	; (800d1f4 <prvCheckForValidListAndQueue+0x74>)
 800d1b0:	4a11      	ldr	r2, [pc, #68]	; (800d1f8 <prvCheckForValidListAndQueue+0x78>)
 800d1b2:	2110      	movs	r1, #16
 800d1b4:	20ff      	movs	r0, #255	; 0xff
 800d1b6:	f7fd fed5 	bl	800af64 <xQueueGenericCreateStatic>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	4a08      	ldr	r2, [pc, #32]	; (800d1e0 <prvCheckForValidListAndQueue+0x60>)
 800d1be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d1c0:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <prvCheckForValidListAndQueue+0x60>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d005      	beq.n	800d1d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d1c8:	4b05      	ldr	r3, [pc, #20]	; (800d1e0 <prvCheckForValidListAndQueue+0x60>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	490b      	ldr	r1, [pc, #44]	; (800d1fc <prvCheckForValidListAndQueue+0x7c>)
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fe faee 	bl	800b7b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1d4:	f7fd fd8e 	bl	800acf4 <vPortExitCritical>
}
 800d1d8:	bf00      	nop
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	20007914 	.word	0x20007914
 800d1e4:	200078e4 	.word	0x200078e4
 800d1e8:	200078f8 	.word	0x200078f8
 800d1ec:	2000790c 	.word	0x2000790c
 800d1f0:	20007910 	.word	0x20007910
 800d1f4:	20008910 	.word	0x20008910
 800d1f8:	20007920 	.word	0x20007920
 800d1fc:	0800ebbc 	.word	0x0800ebbc

0800d200 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b086      	sub	sp, #24
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d10a      	bne.n	800d228 <xTimerIsTimerActive+0x28>
	__asm volatile
 800d212:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d216:	f383 8811 	msr	BASEPRI, r3
 800d21a:	f3bf 8f6f 	isb	sy
 800d21e:	f3bf 8f4f 	dsb	sy
 800d222:	60fb      	str	r3, [r7, #12]
}
 800d224:	bf00      	nop
 800d226:	e7fe      	b.n	800d226 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800d228:	f7fd fd34 	bl	800ac94 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d232:	f003 0301 	and.w	r3, r3, #1
 800d236:	2b00      	cmp	r3, #0
 800d238:	d102      	bne.n	800d240 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800d23a:	2300      	movs	r3, #0
 800d23c:	617b      	str	r3, [r7, #20]
 800d23e:	e001      	b.n	800d244 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800d240:	2301      	movs	r3, #1
 800d242:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800d244:	f7fd fd56 	bl	800acf4 <vPortExitCritical>

	return xReturn;
 800d248:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800d24a:	4618      	mov	r0, r3
 800d24c:	3718      	adds	r7, #24
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d252:	b580      	push	{r7, lr}
 800d254:	b086      	sub	sp, #24
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d10a      	bne.n	800d27a <pvTimerGetTimerID+0x28>
	__asm volatile
 800d264:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800d268:	f383 8811 	msr	BASEPRI, r3
 800d26c:	f3bf 8f6f 	isb	sy
 800d270:	f3bf 8f4f 	dsb	sy
 800d274:	60fb      	str	r3, [r7, #12]
}
 800d276:	bf00      	nop
 800d278:	e7fe      	b.n	800d278 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800d27a:	f7fd fd0b 	bl	800ac94 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	69db      	ldr	r3, [r3, #28]
 800d282:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d284:	f7fd fd36 	bl	800acf4 <vPortExitCritical>

	return pvReturn;
 800d288:	693b      	ldr	r3, [r7, #16]
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3718      	adds	r7, #24
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
	...

0800d294 <Rte_Write_TimH_TimHPort_Tim3Ccr2>:
{
	TIM3->CCR1 = data;
}
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr2(uint8 data)
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
 800d29a:	4603      	mov	r3, r0
 800d29c:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR2 = data;
 800d29e:	4a04      	ldr	r2, [pc, #16]	; (800d2b0 <Rte_Write_TimH_TimHPort_Tim3Ccr2+0x1c>)
 800d2a0:	79fb      	ldrb	r3, [r7, #7]
 800d2a2:	6393      	str	r3, [r2, #56]	; 0x38
}
 800d2a4:	bf00      	nop
 800d2a6:	370c      	adds	r7, #12
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr
 800d2b0:	40000400 	.word	0x40000400

0800d2b4 <Rte_Write_TimH_TimHPort_Tim3Ccr3>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr3(uint8 data)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR3 = data;
 800d2be:	4a04      	ldr	r2, [pc, #16]	; (800d2d0 <Rte_Write_TimH_TimHPort_Tim3Ccr3+0x1c>)
 800d2c0:	79fb      	ldrb	r3, [r7, #7]
 800d2c2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800d2c4:	bf00      	nop
 800d2c6:	370c      	adds	r7, #12
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr
 800d2d0:	40000400 	.word	0x40000400

0800d2d4 <Rte_Write_TimH_TimHPort_Tim3Ccr4>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr4(uint8 data)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	4603      	mov	r3, r0
 800d2dc:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR4 = data;
 800d2de:	4a04      	ldr	r2, [pc, #16]	; (800d2f0 <Rte_Write_TimH_TimHPort_Tim3Ccr4+0x1c>)
 800d2e0:	79fb      	ldrb	r3, [r7, #7]
 800d2e2:	6413      	str	r3, [r2, #64]	; 0x40
}
 800d2e4:	bf00      	nop
 800d2e6:	370c      	adds	r7, #12
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr
 800d2f0:	40000400 	.word	0x40000400

0800d2f4 <Rte_Write_TimH_TimHPort_Tim2Ccr1>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr1(uint16 data)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = data;
 800d2fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d302:	88fb      	ldrh	r3, [r7, #6]
 800d304:	6353      	str	r3, [r2, #52]	; 0x34
}
 800d306:	bf00      	nop
 800d308:	370c      	adds	r7, #12
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr

0800d312 <Rte_Write_TimH_TimHPort_Tim2Ccr2>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr2(uint16 data)
{
 800d312:	b480      	push	{r7}
 800d314:	b083      	sub	sp, #12
 800d316:	af00      	add	r7, sp, #0
 800d318:	4603      	mov	r3, r0
 800d31a:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR2 = data;
 800d31c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d320:	88fb      	ldrh	r3, [r7, #6]
 800d322:	6393      	str	r3, [r2, #56]	; 0x38
}
 800d324:	bf00      	nop
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>:
{
	TIM2->CCR3 = data;
}
/* Run time environment interface. */
VOID Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(uint8* data, uint8 position)
{
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	460b      	mov	r3, r1
 800d33a:	70fb      	strb	r3, [r7, #3]
	*data = SystemManager_Fault[position];
 800d33c:	78fb      	ldrb	r3, [r7, #3]
 800d33e:	4a06      	ldr	r2, [pc, #24]	; (800d358 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault+0x28>)
 800d340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d344:	b2da      	uxtb	r2, r3
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	701a      	strb	r2, [r3, #0]
}
 800d34a:	bf00      	nop
 800d34c:	370c      	adds	r7, #12
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr
 800d356:	bf00      	nop
 800d358:	200089c8 	.word	0x200089c8

0800d35c <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>:
{
	*data = SecAlm_SensorState;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(uint32* data)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
	SecAlm_SensorState = *data;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	b2da      	uxtb	r2, r3
 800d36a:	4b04      	ldr	r3, [pc, #16]	; (800d37c <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState+0x20>)
 800d36c:	701a      	strb	r2, [r3, #0]
}
 800d36e:	bf00      	nop
 800d370:	370c      	adds	r7, #12
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop
 800d37c:	20000118 	.word	0x20000118

0800d380 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>:
{
	*data = ExtLights_LightSensorState;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(uint32* data)
{
 800d380:	b480      	push	{r7}
 800d382:	b083      	sub	sp, #12
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
	ExtLights_LightSensorState = *data;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4a03      	ldr	r2, [pc, #12]	; (800d39c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState+0x1c>)
 800d38e:	6013      	str	r3, [r2, #0]
}
 800d390:	bf00      	nop
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr
 800d39c:	200000fc 	.word	0x200000fc

0800d3a0 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>:
/* Run time environment interface. */
VOID Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(uint32* data)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b083      	sub	sp, #12
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
	SenCtrl_MeasuredValues[0] = Adc_ChannelOne_Buffer[0];
 800d3a8:	4b08      	ldr	r3, [pc, #32]	; (800d3cc <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x2c>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a08      	ldr	r2, [pc, #32]	; (800d3d0 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x30>)
 800d3ae:	6013      	str	r3, [r2, #0]
	SenCtrl_MeasuredValues[1] = Adc_ChannelOne_Buffer[1];
 800d3b0:	4b06      	ldr	r3, [pc, #24]	; (800d3cc <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x2c>)
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	4a06      	ldr	r2, [pc, #24]	; (800d3d0 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x30>)
 800d3b6:	6053      	str	r3, [r2, #4]
	SenCtrl_MeasuredValues[2] = Adc_ChannelOne_Buffer[2];
 800d3b8:	4b04      	ldr	r3, [pc, #16]	; (800d3cc <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x2c>)
 800d3ba:	689b      	ldr	r3, [r3, #8]
 800d3bc:	4a04      	ldr	r2, [pc, #16]	; (800d3d0 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x30>)
 800d3be:	6093      	str	r3, [r2, #8]
}
 800d3c0:	bf00      	nop
 800d3c2:	370c      	adds	r7, #12
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr
 800d3cc:	200006b0 	.word	0x200006b0
 800d3d0:	2000011c 	.word	0x2000011c

0800d3d4 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>:
{
	*data = CenLoc_FollowMeHomeCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(uint8 data)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	4603      	mov	r3, r0
 800d3dc:	71fb      	strb	r3, [r7, #7]
	CenLoc_FollowMeHomeCounter = data;
 800d3de:	4a04      	ldr	r2, [pc, #16]	; (800d3f0 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter+0x1c>)
 800d3e0:	79fb      	ldrb	r3, [r7, #7]
 800d3e2:	7013      	strb	r3, [r2, #0]
}
 800d3e4:	bf00      	nop
 800d3e6:	370c      	adds	r7, #12
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr
 800d3f0:	200000c5 	.word	0x200000c5

0800d3f4 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>:
{
	*data = CenLoc_TurnOnLedCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(uint8* data)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b083      	sub	sp, #12
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
	CenLoc_TurnOnLedCounter = *data;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	781a      	ldrb	r2, [r3, #0]
 800d400:	4b03      	ldr	r3, [pc, #12]	; (800d410 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter+0x1c>)
 800d402:	701a      	strb	r2, [r3, #0]
}
 800d404:	bf00      	nop
 800d406:	370c      	adds	r7, #12
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr
 800d410:	200000c6 	.word	0x200000c6

0800d414 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>:
{
	*data = CenLoc_CyclicAlarmCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(uint8* data)
{
 800d414:	b480      	push	{r7}
 800d416:	b083      	sub	sp, #12
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
	CenLoc_CyclicAlarmCounter = *data;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	781a      	ldrb	r2, [r3, #0]
 800d420:	4b03      	ldr	r3, [pc, #12]	; (800d430 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter+0x1c>)
 800d422:	701a      	strb	r2, [r3, #0]
}
 800d424:	bf00      	nop
 800d426:	370c      	adds	r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr
 800d430:	200000c4 	.word	0x200000c4

0800d434 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>:
{
	*data = CenLoc_BlinkCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(uint8* data)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
	CenLoc_BlinkCounter = *data;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	781a      	ldrb	r2, [r3, #0]
 800d440:	4b03      	ldr	r3, [pc, #12]	; (800d450 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter+0x1c>)
 800d442:	701a      	strb	r2, [r3, #0]
}
 800d444:	bf00      	nop
 800d446:	370c      	adds	r7, #12
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr
 800d450:	200000c3 	.word	0x200000c3

0800d454 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>:
{
	*data = Os_Alarm_Counter;
}
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(uint8* data)
{
 800d454:	b480      	push	{r7}
 800d456:	b083      	sub	sp, #12
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
	Os_LockUnlockSequence_Counter = *data;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	781a      	ldrb	r2, [r3, #0]
 800d460:	4b03      	ldr	r3, [pc, #12]	; (800d470 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter+0x1c>)
 800d462:	701a      	strb	r2, [r3, #0]
}
 800d464:	bf00      	nop
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr
 800d470:	20000204 	.word	0x20000204

0800d474 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(uint8* data)
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
	Os_TurnOnCyclic_Counter = *data;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	781a      	ldrb	r2, [r3, #0]
 800d480:	4b03      	ldr	r3, [pc, #12]	; (800d490 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter+0x1c>)
 800d482:	701a      	strb	r2, [r3, #0]
}
 800d484:	bf00      	nop
 800d486:	370c      	adds	r7, #12
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr
 800d490:	20000205 	.word	0x20000205

0800d494 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(uint8* data)
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
	Os_TurnOnLed_Counter = *data;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	781a      	ldrb	r2, [r3, #0]
 800d4a0:	4b03      	ldr	r3, [pc, #12]	; (800d4b0 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter+0x1c>)
 800d4a2:	701a      	strb	r2, [r3, #0]
}
 800d4a4:	bf00      	nop
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr
 800d4b0:	20000206 	.word	0x20000206

0800d4b4 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(uint8 data)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	71fb      	strb	r3, [r7, #7]
	Os_FollowMeHome_Counter = data;
 800d4be:	4a04      	ldr	r2, [pc, #16]	; (800d4d0 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter+0x1c>)
 800d4c0:	79fb      	ldrb	r3, [r7, #7]
 800d4c2:	7013      	strb	r3, [r2, #0]
}
 800d4c4:	bf00      	nop
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr
 800d4d0:	20000207 	.word	0x20000207

0800d4d4 <Rte_Write_Os_R_OsPort_Os_Lts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Lts_Counter(uint32* data)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
	Os_Lts_Counter = *data;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a03      	ldr	r2, [pc, #12]	; (800d4f0 <Rte_Write_Os_R_OsPort_Os_Lts_Counter+0x1c>)
 800d4e2:	6013      	str	r3, [r2, #0]
}
 800d4e4:	bf00      	nop
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr
 800d4f0:	20000208 	.word	0x20000208

0800d4f4 <Rte_Write_Os_R_OsPort_Os_Rts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Rts_Counter(uint32* data)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
	Os_Rts_Counter = *data;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4a03      	ldr	r2, [pc, #12]	; (800d510 <Rte_Write_Os_R_OsPort_Os_Rts_Counter+0x1c>)
 800d502:	6013      	str	r3, [r2, #0]
}
 800d504:	bf00      	nop
 800d506:	370c      	adds	r7, #12
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr
 800d510:	2000020c 	.word	0x2000020c

0800d514 <Rte_Write_Os_R_OsPort_Os_HL_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_HL_Counter(uint32* data)
{
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
	Os_HL_Counter = *data;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a03      	ldr	r2, [pc, #12]	; (800d530 <Rte_Write_Os_R_OsPort_Os_HL_Counter+0x1c>)
 800d522:	6013      	str	r3, [r2, #0]
}
 800d524:	bf00      	nop
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr
 800d530:	20000210 	.word	0x20000210

0800d534 <Rte_Write_Os_R_OsPort_Os_Alarm_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Alarm_Counter(uint8* data)
{
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
	Os_Alarm_Counter = *data;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	781a      	ldrb	r2, [r3, #0]
 800d540:	4b03      	ldr	r3, [pc, #12]	; (800d550 <Rte_Write_Os_R_OsPort_Os_Alarm_Counter+0x1c>)
 800d542:	701a      	strb	r2, [r3, #0]
}
 800d544:	bf00      	nop
 800d546:	370c      	adds	r7, #12
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr
 800d550:	20000214 	.word	0x20000214

0800d554 <Rte_Runnable_EcuM_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_EcuM_MainFunction()
{
 800d554:	b580      	push	{r7, lr}
 800d556:	af00      	add	r7, sp, #0
	EcuM_MainFunction();
 800d558:	f000 fea4 	bl	800e2a4 <EcuM_MainFunction>
}
 800d55c:	bf00      	nop
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <Rte_Runnable_SystemManager_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SystemManager_MainFunction()
{
 800d560:	b580      	push	{r7, lr}
 800d562:	af00      	add	r7, sp, #0
	SystemManager_MainFunction();
 800d564:	f000 ff7c 	bl	800e460 <SystemManager_MainFunction>
}
 800d568:	bf00      	nop
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <Rte_Runnable_Crc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Crc_MainFunction()
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	af00      	add	r7, sp, #0
	Crc_MainFunction();
 800d570:	f000 fd22 	bl	800dfb8 <Crc_MainFunction>
}
 800d574:	bf00      	nop
 800d576:	bd80      	pop	{r7, pc}

0800d578 <Rte_Runnable_Wdg_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Wdg_MainFunction()
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	af00      	add	r7, sp, #0
	Watchdog_MainFunction();
 800d57c:	f001 f832 	bl	800e5e4 <Watchdog_MainFunction>
}
 800d580:	bf00      	nop
 800d582:	bd80      	pop	{r7, pc}

0800d584 <Rte_Runnable_Adc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Adc_MainFunction()
{
 800d584:	b580      	push	{r7, lr}
 800d586:	af00      	add	r7, sp, #0
	Adc_MainFunction();
 800d588:	f7fb ff06 	bl	8009398 <Adc_MainFunction>
}
 800d58c:	bf00      	nop
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <Rte_Runnable_Tim_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Tim_MainFunction()
{
 800d590:	b580      	push	{r7, lr}
 800d592:	af00      	add	r7, sp, #0
	Tim_MainFunction();
 800d594:	f7fc fbfc 	bl	8009d90 <Tim_MainFunction>
}
 800d598:	bf00      	nop
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <Rte_Runnable_Uart_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Uart_MainFunction()
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	af00      	add	r7, sp, #0
	Uart_MainFunction();
 800d5a0:	f7f4 ffa0 	bl	80024e4 <Uart_MainFunction>
}
 800d5a4:	bf00      	nop
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start_IT(htim, Channel);
 800d5b2:	6839      	ldr	r1, [r7, #0]
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f7f9 fa17 	bl	80069e8 <HAL_TIM_PWM_Start_IT>
}
 800d5ba:	bf00      	nop
 800d5bc:	3708      	adds	r7, #8
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b082      	sub	sp, #8
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
 800d5ca:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop_IT(htim, Channel);
 800d5cc:	6839      	ldr	r1, [r7, #0]
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f7f9 fb08 	bl	8006be4 <HAL_TIM_PWM_Stop_IT>
}
 800d5d4:	bf00      	nop
 800d5d6:	3708      	adds	r7, #8
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <Rte_Write_Btc_BtcPort_Btc_RxData>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxData(uint8* data)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
	Btc_RxData = *data;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	781a      	ldrb	r2, [r3, #0]
 800d5e8:	4b03      	ldr	r3, [pc, #12]	; (800d5f8 <Rte_Write_Btc_BtcPort_Btc_RxData+0x1c>)
 800d5ea:	701a      	strb	r2, [r3, #0]
}
 800d5ec:	bf00      	nop
 800d5ee:	370c      	adds	r7, #12
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr
 800d5f8:	200000b0 	.word	0x200000b0

0800d5fc <Rte_Write_Btc_BtcPort_Btc_RxCount>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxCount(uint8* data)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
	Btc_RxCount = *data;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	781a      	ldrb	r2, [r3, #0]
 800d608:	4b03      	ldr	r3, [pc, #12]	; (800d618 <Rte_Write_Btc_BtcPort_Btc_RxCount+0x1c>)
 800d60a:	701a      	strb	r2, [r3, #0]
}
 800d60c:	bf00      	nop
 800d60e:	370c      	adds	r7, #12
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr
 800d618:	200000b1 	.word	0x200000b1

0800d61c <Rte_Write_Btc_BtcPort_Btc_DataBuffer>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_DataBuffer(uint8* data, uint8 position)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	460b      	mov	r3, r1
 800d626:	70fb      	strb	r3, [r7, #3]
	Btc_DataBuffer[position] = *data;
 800d628:	78fb      	ldrb	r3, [r7, #3]
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	7811      	ldrb	r1, [r2, #0]
 800d62e:	4a04      	ldr	r2, [pc, #16]	; (800d640 <Rte_Write_Btc_BtcPort_Btc_DataBuffer+0x24>)
 800d630:	54d1      	strb	r1, [r2, r3]
}
 800d632:	bf00      	nop
 800d634:	370c      	adds	r7, #12
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr
 800d63e:	bf00      	nop
 800d640:	200000ac 	.word	0x200000ac

0800d644 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>:
/* Run time environment interface. */
VOID Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(uint32* data, uint8 position)
{
 800d644:	b480      	push	{r7}
 800d646:	b083      	sub	sp, #12
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	460b      	mov	r3, r1
 800d64e:	70fb      	strb	r3, [r7, #3]
	*data = Adc_ChannelOne_Buffer[position];
 800d650:	78fb      	ldrb	r3, [r7, #3]
 800d652:	4a05      	ldr	r2, [pc, #20]	; (800d668 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer+0x24>)
 800d654:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	601a      	str	r2, [r3, #0]
}
 800d65c:	bf00      	nop
 800d65e:	370c      	adds	r7, #12
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr
 800d668:	200006b0 	.word	0x200006b0

0800d66c <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
	Btc_ReceivedDataOnBluetooth = *data;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	781a      	ldrb	r2, [r3, #0]
 800d678:	4b03      	ldr	r3, [pc, #12]	; (800d688 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 800d67a:	701a      	strb	r2, [r3, #0]
}
 800d67c:	bf00      	nop
 800d67e:	370c      	adds	r7, #12
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr
 800d688:	200000b2 	.word	0x200000b2

0800d68c <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(uint8* data)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b083      	sub	sp, #12
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
	CenLoc_CurrentState = *data;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	781a      	ldrb	r2, [r3, #0]
 800d698:	4b03      	ldr	r3, [pc, #12]	; (800d6a8 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x1c>)
 800d69a:	701a      	strb	r2, [r3, #0]
}
 800d69c:	bf00      	nop
 800d69e:	370c      	adds	r7, #12
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr
 800d6a8:	200000bf 	.word	0x200000bf

0800d6ac <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>:
{
	CenLoc_PreviousState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(uint8* data)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
	CenLoc_FollowMeHomeState = *data;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	781a      	ldrb	r2, [r3, #0]
 800d6b8:	4b03      	ldr	r3, [pc, #12]	; (800d6c8 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x1c>)
 800d6ba:	701a      	strb	r2, [r3, #0]
}
 800d6bc:	bf00      	nop
 800d6be:	370c      	adds	r7, #12
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr
 800d6c8:	200000c1 	.word	0x200000c1

0800d6cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>:
{
	CenLoc_PreviousStateFlag = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(uint8* data)
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
	ExtLights_ReverseLight_CurrentState = *data;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	781a      	ldrb	r2, [r3, #0]
 800d6d8:	4b03      	ldr	r3, [pc, #12]	; (800d6e8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x1c>)
 800d6da:	701a      	strb	r2, [r3, #0]
}
 800d6dc:	bf00      	nop
 800d6de:	370c      	adds	r7, #12
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr
 800d6e8:	200000e0 	.word	0x200000e0

0800d6ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(uint8* data)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b083      	sub	sp, #12
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
	ExtLights_BrakeLight_CurrentState = *data;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	781a      	ldrb	r2, [r3, #0]
 800d6f8:	4b03      	ldr	r3, [pc, #12]	; (800d708 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x1c>)
 800d6fa:	701a      	strb	r2, [r3, #0]
}
 800d6fc:	bf00      	nop
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr
 800d708:	200000e2 	.word	0x200000e2

0800d70c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(uint8* data)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
	ExtLights_LightsSwitch_CurrentState = *data;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	781a      	ldrb	r2, [r3, #0]
 800d718:	4b03      	ldr	r3, [pc, #12]	; (800d728 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x1c>)
 800d71a:	701a      	strb	r2, [r3, #0]
}
 800d71c:	bf00      	nop
 800d71e:	370c      	adds	r7, #12
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr
 800d728:	200000e3 	.word	0x200000e3

0800d72c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(uint8* data)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
	ExtLights_HighBeam_CurrentState = *data;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	781a      	ldrb	r2, [r3, #0]
 800d738:	4b03      	ldr	r3, [pc, #12]	; (800d748 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x1c>)
 800d73a:	701a      	strb	r2, [r3, #0]
}
 800d73c:	bf00      	nop
 800d73e:	370c      	adds	r7, #12
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr
 800d748:	200000e4 	.word	0x200000e4

0800d74c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(uint8* data)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
	ExtLights_FrontFogLight_CurrentState = *data;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	781a      	ldrb	r2, [r3, #0]
 800d758:	4b03      	ldr	r3, [pc, #12]	; (800d768 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x1c>)
 800d75a:	701a      	strb	r2, [r3, #0]
}
 800d75c:	bf00      	nop
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr
 800d768:	200000e5 	.word	0x200000e5

0800d76c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(uint8* data)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalLeft_CurrentState = *data;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	781a      	ldrb	r2, [r3, #0]
 800d778:	4b03      	ldr	r3, [pc, #12]	; (800d788 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x1c>)
 800d77a:	701a      	strb	r2, [r3, #0]
}
 800d77c:	bf00      	nop
 800d77e:	370c      	adds	r7, #12
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr
 800d788:	200000e6 	.word	0x200000e6

0800d78c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(uint8* data)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalRight_CurrentState = *data;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	781a      	ldrb	r2, [r3, #0]
 800d798:	4b03      	ldr	r3, [pc, #12]	; (800d7a8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x1c>)
 800d79a:	701a      	strb	r2, [r3, #0]
}
 800d79c:	bf00      	nop
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr
 800d7a8:	200000e7 	.word	0x200000e7

0800d7ac <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(uint8* data)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
	ExtLights_HazardLight_CurrentState = *data;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	781a      	ldrb	r2, [r3, #0]
 800d7b8:	4b03      	ldr	r3, [pc, #12]	; (800d7c8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x1c>)
 800d7ba:	701a      	strb	r2, [r3, #0]
}
 800d7bc:	bf00      	nop
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr
 800d7c8:	200000ea 	.word	0x200000ea

0800d7cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(uint8* data)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
	ExtLights_RearFogLight_CurrentState = *data;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	781a      	ldrb	r2, [r3, #0]
 800d7d8:	4b03      	ldr	r3, [pc, #12]	; (800d7e8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x1c>)
 800d7da:	701a      	strb	r2, [r3, #0]
}
 800d7dc:	bf00      	nop
 800d7de:	370c      	adds	r7, #12
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr
 800d7e8:	200000eb 	.word	0x200000eb

0800d7ec <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>:
{
	ExtLights_HL_PrevState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(uint32* data)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b083      	sub	sp, #12
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
	ExtLights_RTSFlag = *data;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a03      	ldr	r2, [pc, #12]	; (800d808 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x1c>)
 800d7fa:	6013      	str	r3, [r2, #0]
}
 800d7fc:	bf00      	nop
 800d7fe:	370c      	adds	r7, #12
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr
 800d808:	200000f0 	.word	0x200000f0

0800d80c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(uint32* data)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
	ExtLights_LTSFlag = *data;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4a03      	ldr	r2, [pc, #12]	; (800d828 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x1c>)
 800d81a:	6013      	str	r3, [r2, #0]
}
 800d81c:	bf00      	nop
 800d81e:	370c      	adds	r7, #12
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr
 800d828:	200000f4 	.word	0x200000f4

0800d82c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(uint32* data)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
	ExtLights_HLFlag = *data;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a03      	ldr	r2, [pc, #12]	; (800d848 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x1c>)
 800d83a:	6013      	str	r3, [r2, #0]
}
 800d83c:	bf00      	nop
 800d83e:	370c      	adds	r7, #12
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr
 800d848:	200000f8 	.word	0x200000f8

0800d84c <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(uint8* data)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
	IntLights_CurrentState = *data;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	781a      	ldrb	r2, [r3, #0]
 800d858:	4b03      	ldr	r3, [pc, #12]	; (800d868 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x1c>)
 800d85a:	701a      	strb	r2, [r3, #0]
}
 800d85c:	bf00      	nop
 800d85e:	370c      	adds	r7, #12
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr
 800d868:	20000104 	.word	0x20000104

0800d86c <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>:
{
	SecAlm_PinStateChange = *data;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(uint8* data)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
	SecAlm_TriggerIRQCounterForTimer4 = *data;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	781a      	ldrb	r2, [r3, #0]
 800d878:	4b03      	ldr	r3, [pc, #12]	; (800d888 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x1c>)
 800d87a:	701a      	strb	r2, [r3, #0]
}
 800d87c:	bf00      	nop
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr
 800d888:	20000112 	.word	0x20000112

0800d88c <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>:
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(uint16 data)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	4603      	mov	r3, r0
 800d894:	80fb      	strh	r3, [r7, #6]
	SecAlm_SensorStatusCounter = data;
 800d896:	4a04      	ldr	r2, [pc, #16]	; (800d8a8 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter+0x1c>)
 800d898:	88fb      	ldrh	r3, [r7, #6]
 800d89a:	8013      	strh	r3, [r2, #0]
}
 800d89c:	bf00      	nop
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr
 800d8a8:	20000114 	.word	0x20000114

0800d8ac <Rte_Runnable_Btc_MainFunction>:
{
	SecAlm_SensorStatus = *data;
}
/* Run time environment interface. */
VOID Rte_Runnable_Btc_MainFunction()
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	af00      	add	r7, sp, #0
	Btc_MainFunction();
 800d8b0:	f7f3 fbda 	bl	8001068 <Btc_MainFunction>
}
 800d8b4:	bf00      	nop
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <Rte_Runnable_CenLoc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_CenLoc_MainFunction()
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	af00      	add	r7, sp, #0
	CenLoc_MainFunction();
 800d8bc:	f7f3 fe2a 	bl	8001514 <CenLoc_MainFunction>
}
 800d8c0:	bf00      	nop
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <Rte_Runnable_ExtLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_ExtLights_MainFunction()
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	af00      	add	r7, sp, #0
	ExtLights_MainFunction();
 800d8c8:	f7f4 f93c 	bl	8001b44 <ExtLights_MainFunction>
}
 800d8cc:	bf00      	nop
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <Rte_Runnable_IntLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_IntLights_MainFunction()
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	af00      	add	r7, sp, #0
	IntLights_MainFunction();
 800d8d4:	f7f4 fa7e 	bl	8001dd4 <IntLights_MainFunction>
}
 800d8d8:	bf00      	nop
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <Rte_Runnable_SecAlm_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SecAlm_MainFunction()
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	af00      	add	r7, sp, #0
	SecAlm_MainFunction();
 800d8e0:	f7f4 fd26 	bl	8002330 <SecAlm_MainFunction>
}
 800d8e4:	bf00      	nop
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
	*data = Btc_ReceivedDataOnBluetooth;
 800d8f0:	4b04      	ldr	r3, [pc, #16]	; (800d904 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 800d8f2:	781a      	ldrb	r2, [r3, #0]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	701a      	strb	r2, [r3, #0]
}
 800d8f8:	bf00      	nop
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr
 800d904:	200000b2 	.word	0x200000b2

0800d908 <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>:
{
	*data = SecAlm_SensorStatus;
}
/* Run time environment interface. */
VOID Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	4613      	mov	r3, r2
 800d914:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive_IT(huart, pData, Size);
 800d916:	88fb      	ldrh	r3, [r7, #6]
 800d918:	461a      	mov	r2, r3
 800d91a:	68b9      	ldr	r1, [r7, #8]
 800d91c:	68f8      	ldr	r0, [r7, #12]
 800d91e:	f7fa fd20 	bl	8008362 <HAL_UART_Receive_IT>
}
 800d922:	bf00      	nop
 800d924:	3710      	adds	r7, #16
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>:
{
	HAL_TIM_Base_Stop_IT(htim);
}
/* Run time environment interface. */
VOID Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b082      	sub	sp, #8
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
 800d932:	460b      	mov	r3, r1
 800d934:	807b      	strh	r3, [r7, #2]
 800d936:	4613      	mov	r3, r2
 800d938:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 800d93a:	787a      	ldrb	r2, [r7, #1]
 800d93c:	887b      	ldrh	r3, [r7, #2]
 800d93e:	4619      	mov	r1, r3
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f7f8 fa1f 	bl	8005d84 <HAL_GPIO_WritePin>
}
 800d946:	bf00      	nop
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>:
{
	HAL_GetTick();
}
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(osTimerId_t timer_id, uint32_t ticks)
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b082      	sub	sp, #8
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
 800d956:	6039      	str	r1, [r7, #0]
	osTimerStart(timer_id, ticks);
 800d958:	6839      	ldr	r1, [r7, #0]
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7fc fd16 	bl	800a38c <osTimerStart>
}
 800d960:	bf00      	nop
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>:
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(osTimerId_t timer_id)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
	osTimerStop(timer_id);
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f7fc fd39 	bl	800a3e8 <osTimerStop>
}
 800d976:	bf00      	nop
 800d978:	3708      	adds	r7, #8
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}

0800d97e <Rte_Runnable_DiagCtrl_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_DiagCtrl_MainFunction()
{
 800d97e:	b580      	push	{r7, lr}
 800d980:	af00      	add	r7, sp, #0
	DiagCtrl_MainFunction();
 800d982:	f7f3 fdcf 	bl	8001524 <DiagCtrl_MainFunction>
}
 800d986:	bf00      	nop
 800d988:	bd80      	pop	{r7, pc}

0800d98a <Rte_Runnable_Pdc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Pdc_MainFunction()
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	af00      	add	r7, sp, #0
	Pdc_MainFunction();
 800d98e:	f7f4 fa27 	bl	8001de0 <Pdc_MainFunction>
}
 800d992:	bf00      	nop
 800d994:	bd80      	pop	{r7, pc}

0800d996 <Rte_Runnable_Dem_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Dem_MainFunction()
{
 800d996:	b580      	push	{r7, lr}
 800d998:	af00      	add	r7, sp, #0
	Dem_MainFunction();
 800d99a:	f7f6 f8ee 	bl	8003b7a <Dem_MainFunction>
}
 800d99e:	bf00      	nop
 800d9a0:	bd80      	pop	{r7, pc}
	...

0800d9a4 <Crc_VerifyUartData>:
/***********************************************************************************
* Function: Crc_VerifyUartData													   *
* Description: Verifies the UART data received.							 		   *
************************************************************************************/
StdReturnType Crc_VerifyUartData()
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
	/* Local variable to store return value. */
	uint8 returnValue = E_NOT_OK;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	73fb      	strb	r3, [r7, #15]
	/* Local variable to store received value. */
	uint8 receivedValue = STD_LOW;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	71fb      	strb	r3, [r7, #7]
	/* Local value to calculate CRC. */
	uint32 calculatedCrc = STD_LOW;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	60bb      	str	r3, [r7, #8]
	/* Read the received data from UART. */
	Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&receivedValue);
 800d9b6:	1dfb      	adds	r3, r7, #7
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7ff ff95 	bl	800d8e8 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
	Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 800d9be:	4ba6      	ldr	r3, [pc, #664]	; (800dc58 <Crc_VerifyUartData+0x2b4>)
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	701a      	strb	r2, [r3, #0]
	/* Calculate the CRC. */
	calculatedCrc = HAL_CRC_Calculate(&hcrc, (uint32*)&receivedValue, 1);
 800d9c4:	1dfb      	adds	r3, r7, #7
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	48a4      	ldr	r0, [pc, #656]	; (800dc5c <Crc_VerifyUartData+0x2b8>)
 800d9cc:	f7f7 fad2 	bl	8004f74 <HAL_CRC_Calculate>
 800d9d0:	60b8      	str	r0, [r7, #8]
	/* Check the value if it has correct CRC. */
	switch(receivedValue)
 800d9d2:	79fb      	ldrb	r3, [r7, #7]
 800d9d4:	3b01      	subs	r3, #1
 800d9d6:	2b19      	cmp	r3, #25
 800d9d8:	f200 8175 	bhi.w	800dcc6 <Crc_VerifyUartData+0x322>
 800d9dc:	a201      	add	r2, pc, #4	; (adr r2, 800d9e4 <Crc_VerifyUartData+0x40>)
 800d9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e2:	bf00      	nop
 800d9e4:	0800dad1 	.word	0x0800dad1
 800d9e8:	0800dae7 	.word	0x0800dae7
 800d9ec:	0800dafd 	.word	0x0800dafd
 800d9f0:	0800db13 	.word	0x0800db13
 800d9f4:	0800dcc7 	.word	0x0800dcc7
 800d9f8:	0800dcc7 	.word	0x0800dcc7
 800d9fc:	0800db29 	.word	0x0800db29
 800da00:	0800db3f 	.word	0x0800db3f
 800da04:	0800db55 	.word	0x0800db55
 800da08:	0800db6b 	.word	0x0800db6b
 800da0c:	0800db81 	.word	0x0800db81
 800da10:	0800db97 	.word	0x0800db97
 800da14:	0800dbad 	.word	0x0800dbad
 800da18:	0800dbc3 	.word	0x0800dbc3
 800da1c:	0800dbd9 	.word	0x0800dbd9
 800da20:	0800dbef 	.word	0x0800dbef
 800da24:	0800dc05 	.word	0x0800dc05
 800da28:	0800dc1b 	.word	0x0800dc1b
 800da2c:	0800dc31 	.word	0x0800dc31
 800da30:	0800dc47 	.word	0x0800dc47
 800da34:	0800da4d 	.word	0x0800da4d
 800da38:	0800da63 	.word	0x0800da63
 800da3c:	0800da79 	.word	0x0800da79
 800da40:	0800da8f 	.word	0x0800da8f
 800da44:	0800daa5 	.word	0x0800daa5
 800da48:	0800dabb 	.word	0x0800dabb
	{
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_On)
 800da4c:	4b84      	ldr	r3, [pc, #528]	; (800dc60 <Crc_VerifyUartData+0x2bc>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	68ba      	ldr	r2, [r7, #8]
 800da52:	429a      	cmp	r2, r3
 800da54:	d102      	bne.n	800da5c <Crc_VerifyUartData+0xb8>
			{
				returnValue = E_OK;
 800da56:	2300      	movs	r3, #0
 800da58:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800da5a:	e135      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800da5c:	2301      	movs	r3, #1
 800da5e:	73fb      	strb	r3, [r7, #15]
			break;
 800da60:	e132      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_Off)
 800da62:	4b80      	ldr	r3, [pc, #512]	; (800dc64 <Crc_VerifyUartData+0x2c0>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	68ba      	ldr	r2, [r7, #8]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d102      	bne.n	800da72 <Crc_VerifyUartData+0xce>
			{
				returnValue = E_OK;
 800da6c:	2300      	movs	r3, #0
 800da6e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800da70:	e12a      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800da72:	2301      	movs	r3, #1
 800da74:	73fb      	strb	r3, [r7, #15]
			break;
 800da76:	e127      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO:
			if(calculatedCrc == Crc_ExtLights_PositionZero)
 800da78:	4b7b      	ldr	r3, [pc, #492]	; (800dc68 <Crc_VerifyUartData+0x2c4>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d102      	bne.n	800da88 <Crc_VerifyUartData+0xe4>
			{
				returnValue = E_OK;
 800da82:	2300      	movs	r3, #0
 800da84:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800da86:	e11f      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800da88:	2301      	movs	r3, #1
 800da8a:	73fb      	strb	r3, [r7, #15]
			break;
 800da8c:	e11c      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
			if(calculatedCrc == Crc_ExtLights_AutomaticLights)
 800da8e:	4b77      	ldr	r3, [pc, #476]	; (800dc6c <Crc_VerifyUartData+0x2c8>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	68ba      	ldr	r2, [r7, #8]
 800da94:	429a      	cmp	r2, r3
 800da96:	d102      	bne.n	800da9e <Crc_VerifyUartData+0xfa>
			{
				returnValue = E_OK;
 800da98:	2300      	movs	r3, #0
 800da9a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800da9c:	e114      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800da9e:	2301      	movs	r3, #1
 800daa0:	73fb      	strb	r3, [r7, #15]
			break;
 800daa2:	e111      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
			if(calculatedCrc == Crc_ExtLights_PositionLights)
 800daa4:	4b72      	ldr	r3, [pc, #456]	; (800dc70 <Crc_VerifyUartData+0x2cc>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	68ba      	ldr	r2, [r7, #8]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d102      	bne.n	800dab4 <Crc_VerifyUartData+0x110>
			{
				returnValue = E_OK;
 800daae:	2300      	movs	r3, #0
 800dab0:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dab2:	e109      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800dab4:	2301      	movs	r3, #1
 800dab6:	73fb      	strb	r3, [r7, #15]
			break;
 800dab8:	e106      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
			if(calculatedCrc == Crc_ExtLights_NightTimeLights)
 800daba:	4b6e      	ldr	r3, [pc, #440]	; (800dc74 <Crc_VerifyUartData+0x2d0>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	68ba      	ldr	r2, [r7, #8]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d102      	bne.n	800daca <Crc_VerifyUartData+0x126>
			{
				returnValue = E_OK;
 800dac4:	2300      	movs	r3, #0
 800dac6:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dac8:	e0fe      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800daca:	2301      	movs	r3, #1
 800dacc:	73fb      	strb	r3, [r7, #15]
			break;
 800dace:	e0fb      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_CENLOC_ON:
			if(calculatedCrc == Crc_CenLoc_On)
 800dad0:	4b69      	ldr	r3, [pc, #420]	; (800dc78 <Crc_VerifyUartData+0x2d4>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	68ba      	ldr	r2, [r7, #8]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d102      	bne.n	800dae0 <Crc_VerifyUartData+0x13c>
			{
				returnValue = E_OK;
 800dada:	2300      	movs	r3, #0
 800dadc:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dade:	e0f3      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800dae0:	2301      	movs	r3, #1
 800dae2:	73fb      	strb	r3, [r7, #15]
			break;
 800dae4:	e0f0      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_CENLOC_OFF:
			if(calculatedCrc == Crc_CenLoc_Off)
 800dae6:	4b65      	ldr	r3, [pc, #404]	; (800dc7c <Crc_VerifyUartData+0x2d8>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	68ba      	ldr	r2, [r7, #8]
 800daec:	429a      	cmp	r2, r3
 800daee:	d102      	bne.n	800daf6 <Crc_VerifyUartData+0x152>
			{
				returnValue = E_OK;
 800daf0:	2300      	movs	r3, #0
 800daf2:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800daf4:	e0e8      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800daf6:	2301      	movs	r3, #1
 800daf8:	73fb      	strb	r3, [r7, #15]
			break;
 800dafa:	e0e5      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
			if(calculatedCrc == Crc_ExtLights_HighBeam_On)
 800dafc:	4b60      	ldr	r3, [pc, #384]	; (800dc80 <Crc_VerifyUartData+0x2dc>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	68ba      	ldr	r2, [r7, #8]
 800db02:	429a      	cmp	r2, r3
 800db04:	d102      	bne.n	800db0c <Crc_VerifyUartData+0x168>
			{
				returnValue = E_OK;
 800db06:	2300      	movs	r3, #0
 800db08:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800db0a:	e0dd      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800db0c:	2301      	movs	r3, #1
 800db0e:	73fb      	strb	r3, [r7, #15]
			break;
 800db10:	e0da      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
			if(calculatedCrc == Crc_ExtLights_HighBeam_Off)
 800db12:	4b5c      	ldr	r3, [pc, #368]	; (800dc84 <Crc_VerifyUartData+0x2e0>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	68ba      	ldr	r2, [r7, #8]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d102      	bne.n	800db22 <Crc_VerifyUartData+0x17e>
			{
				returnValue = E_OK;
 800db1c:	2300      	movs	r3, #0
 800db1e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800db20:	e0d2      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800db22:	2301      	movs	r3, #1
 800db24:	73fb      	strb	r3, [r7, #15]
			break;
 800db26:	e0cf      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_On)
 800db28:	4b57      	ldr	r3, [pc, #348]	; (800dc88 <Crc_VerifyUartData+0x2e4>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	68ba      	ldr	r2, [r7, #8]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d102      	bne.n	800db38 <Crc_VerifyUartData+0x194>
			{
				returnValue = E_OK;
 800db32:	2300      	movs	r3, #0
 800db34:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800db36:	e0c7      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800db38:	2301      	movs	r3, #1
 800db3a:	73fb      	strb	r3, [r7, #15]
			break;
 800db3c:	e0c4      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_Off)
 800db3e:	4b53      	ldr	r3, [pc, #332]	; (800dc8c <Crc_VerifyUartData+0x2e8>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	68ba      	ldr	r2, [r7, #8]
 800db44:	429a      	cmp	r2, r3
 800db46:	d102      	bne.n	800db4e <Crc_VerifyUartData+0x1aa>
			{
				returnValue = E_OK;
 800db48:	2300      	movs	r3, #0
 800db4a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800db4c:	e0bc      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800db4e:	2301      	movs	r3, #1
 800db50:	73fb      	strb	r3, [r7, #15]
			break;
 800db52:	e0b9      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_On)
 800db54:	4b4e      	ldr	r3, [pc, #312]	; (800dc90 <Crc_VerifyUartData+0x2ec>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	68ba      	ldr	r2, [r7, #8]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d102      	bne.n	800db64 <Crc_VerifyUartData+0x1c0>
			{
				returnValue = E_OK;
 800db5e:	2300      	movs	r3, #0
 800db60:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800db62:	e0b1      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800db64:	2301      	movs	r3, #1
 800db66:	73fb      	strb	r3, [r7, #15]
			break;
 800db68:	e0ae      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_Off)
 800db6a:	4b4a      	ldr	r3, [pc, #296]	; (800dc94 <Crc_VerifyUartData+0x2f0>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	68ba      	ldr	r2, [r7, #8]
 800db70:	429a      	cmp	r2, r3
 800db72:	d102      	bne.n	800db7a <Crc_VerifyUartData+0x1d6>
			{
				returnValue = E_OK;
 800db74:	2300      	movs	r3, #0
 800db76:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800db78:	e0a6      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800db7a:	2301      	movs	r3, #1
 800db7c:	73fb      	strb	r3, [r7, #15]
			break;
 800db7e:	e0a3      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_HazardLight_On)
 800db80:	4b45      	ldr	r3, [pc, #276]	; (800dc98 <Crc_VerifyUartData+0x2f4>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	68ba      	ldr	r2, [r7, #8]
 800db86:	429a      	cmp	r2, r3
 800db88:	d102      	bne.n	800db90 <Crc_VerifyUartData+0x1ec>
			{
				returnValue = E_OK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800db8e:	e09b      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800db90:	2301      	movs	r3, #1
 800db92:	73fb      	strb	r3, [r7, #15]
			break;
 800db94:	e098      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_HazardLight_Off)
 800db96:	4b41      	ldr	r3, [pc, #260]	; (800dc9c <Crc_VerifyUartData+0x2f8>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	68ba      	ldr	r2, [r7, #8]
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d102      	bne.n	800dba6 <Crc_VerifyUartData+0x202>
			{
				returnValue = E_OK;
 800dba0:	2300      	movs	r3, #0
 800dba2:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dba4:	e090      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800dba6:	2301      	movs	r3, #1
 800dba8:	73fb      	strb	r3, [r7, #15]
			break;
 800dbaa:	e08d      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_On)
 800dbac:	4b3c      	ldr	r3, [pc, #240]	; (800dca0 <Crc_VerifyUartData+0x2fc>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	68ba      	ldr	r2, [r7, #8]
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d102      	bne.n	800dbbc <Crc_VerifyUartData+0x218>
			{
				returnValue = E_OK;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dbba:	e085      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	73fb      	strb	r3, [r7, #15]
			break;
 800dbc0:	e082      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_Off)
 800dbc2:	4b38      	ldr	r3, [pc, #224]	; (800dca4 <Crc_VerifyUartData+0x300>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	68ba      	ldr	r2, [r7, #8]
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d102      	bne.n	800dbd2 <Crc_VerifyUartData+0x22e>
			{
				returnValue = E_OK;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dbd0:	e07a      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	73fb      	strb	r3, [r7, #15]
			break;
 800dbd6:	e077      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_On)
 800dbd8:	4b33      	ldr	r3, [pc, #204]	; (800dca8 <Crc_VerifyUartData+0x304>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d102      	bne.n	800dbe8 <Crc_VerifyUartData+0x244>
			{
				returnValue = E_OK;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dbe6:	e06f      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	73fb      	strb	r3, [r7, #15]
			break;
 800dbec:	e06c      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_Off)
 800dbee:	4b2f      	ldr	r3, [pc, #188]	; (800dcac <Crc_VerifyUartData+0x308>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	68ba      	ldr	r2, [r7, #8]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d102      	bne.n	800dbfe <Crc_VerifyUartData+0x25a>
			{
				returnValue = E_OK;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dbfc:	e064      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800dbfe:	2301      	movs	r3, #1
 800dc00:	73fb      	strb	r3, [r7, #15]
			break;
 800dc02:	e061      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_On)
 800dc04:	4b2a      	ldr	r3, [pc, #168]	; (800dcb0 <Crc_VerifyUartData+0x30c>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	68ba      	ldr	r2, [r7, #8]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d102      	bne.n	800dc14 <Crc_VerifyUartData+0x270>
			{
				returnValue = E_OK;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dc12:	e059      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800dc14:	2301      	movs	r3, #1
 800dc16:	73fb      	strb	r3, [r7, #15]
			break;
 800dc18:	e056      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_Off)
 800dc1a:	4b26      	ldr	r3, [pc, #152]	; (800dcb4 <Crc_VerifyUartData+0x310>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	68ba      	ldr	r2, [r7, #8]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d102      	bne.n	800dc2a <Crc_VerifyUartData+0x286>
			{
				returnValue = E_OK;
 800dc24:	2300      	movs	r3, #0
 800dc26:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dc28:	e04e      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	73fb      	strb	r3, [r7, #15]
			break;
 800dc2e:	e04b      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
			if(calculatedCrc == Crc_IntLights_InteriorLight_On)
 800dc30:	4b21      	ldr	r3, [pc, #132]	; (800dcb8 <Crc_VerifyUartData+0x314>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	68ba      	ldr	r2, [r7, #8]
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d102      	bne.n	800dc40 <Crc_VerifyUartData+0x29c>
			{
				returnValue = E_OK;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dc3e:	e043      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800dc40:	2301      	movs	r3, #1
 800dc42:	73fb      	strb	r3, [r7, #15]
			break;
 800dc44:	e040      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
			if(calculatedCrc == Crc_IntLights_InteriorLights_Off)
 800dc46:	4b1d      	ldr	r3, [pc, #116]	; (800dcbc <Crc_VerifyUartData+0x318>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	68ba      	ldr	r2, [r7, #8]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d137      	bne.n	800dcc0 <Crc_VerifyUartData+0x31c>
			{
				returnValue = E_OK;
 800dc50:	2300      	movs	r3, #0
 800dc52:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800dc54:	e038      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
 800dc56:	bf00      	nop
 800dc58:	20008960 	.word	0x20008960
 800dc5c:	200001f0 	.word	0x200001f0
 800dc60:	2000899c 	.word	0x2000899c
 800dc64:	200089a0 	.word	0x200089a0
 800dc68:	200089a4 	.word	0x200089a4
 800dc6c:	200089a8 	.word	0x200089a8
 800dc70:	200089ac 	.word	0x200089ac
 800dc74:	200089b0 	.word	0x200089b0
 800dc78:	20008964 	.word	0x20008964
 800dc7c:	20008968 	.word	0x20008968
 800dc80:	2000896c 	.word	0x2000896c
 800dc84:	20008970 	.word	0x20008970
 800dc88:	20008974 	.word	0x20008974
 800dc8c:	20008978 	.word	0x20008978
 800dc90:	2000897c 	.word	0x2000897c
 800dc94:	20008980 	.word	0x20008980
 800dc98:	20008984 	.word	0x20008984
 800dc9c:	20008988 	.word	0x20008988
 800dca0:	2000898c 	.word	0x2000898c
 800dca4:	20008990 	.word	0x20008990
 800dca8:	200089bc 	.word	0x200089bc
 800dcac:	200089c0 	.word	0x200089c0
 800dcb0:	20008994 	.word	0x20008994
 800dcb4:	20008998 	.word	0x20008998
 800dcb8:	200089b4 	.word	0x200089b4
 800dcbc:	200089b8 	.word	0x200089b8
				returnValue = E_NOT_OK;
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	73fb      	strb	r3, [r7, #15]
			break;
 800dcc4:	e000      	b.n	800dcc8 <Crc_VerifyUartData+0x324>
		default:
			break;
 800dcc6:	bf00      	nop
	}
	return returnValue;
 800dcc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop

0800dcd4 <Crc_InitCrcValuesForUart>:
/***********************************************************************************
* Function: Crc_InitCrcValuesForUart									   		   *
* Description: Initialize the CRC default values for UART data.			 		   *
************************************************************************************/
VOID Crc_InitCrcValuesForUart()
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
	/* Local variable to store default value of possible
	 * received data from UART. */
	uint32 value = 0;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	607b      	str	r3, [r7, #4]
	/* Calculate CRC for each defined bluetooth command. */
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON;
 800dcde:	230f      	movs	r3, #15
 800dce0:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dce2:	1d3b      	adds	r3, r7, #4
 800dce4:	2201      	movs	r2, #1
 800dce6:	4619      	mov	r1, r3
 800dce8:	4883      	ldr	r0, [pc, #524]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800dcea:	f7f7 f943 	bl	8004f74 <HAL_CRC_Calculate>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	4a82      	ldr	r2, [pc, #520]	; (800defc <Crc_InitCrcValuesForUart+0x228>)
 800dcf2:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF;
 800dcf4:	2310      	movs	r3, #16
 800dcf6:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dcf8:	1d3b      	adds	r3, r7, #4
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	487e      	ldr	r0, [pc, #504]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800dd00:	f7f7 f938 	bl	8004f74 <HAL_CRC_Calculate>
 800dd04:	4603      	mov	r3, r0
 800dd06:	4a7e      	ldr	r2, [pc, #504]	; (800df00 <Crc_InitCrcValuesForUart+0x22c>)
 800dd08:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_ON;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dd0e:	1d3b      	adds	r3, r7, #4
 800dd10:	2201      	movs	r2, #1
 800dd12:	4619      	mov	r1, r3
 800dd14:	4878      	ldr	r0, [pc, #480]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800dd16:	f7f7 f92d 	bl	8004f74 <HAL_CRC_Calculate>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	4a79      	ldr	r2, [pc, #484]	; (800df04 <Crc_InitCrcValuesForUart+0x230>)
 800dd1e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_OFF;
 800dd20:	2302      	movs	r3, #2
 800dd22:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dd24:	1d3b      	adds	r3, r7, #4
 800dd26:	2201      	movs	r2, #1
 800dd28:	4619      	mov	r1, r3
 800dd2a:	4873      	ldr	r0, [pc, #460]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800dd2c:	f7f7 f922 	bl	8004f74 <HAL_CRC_Calculate>
 800dd30:	4603      	mov	r3, r0
 800dd32:	4a75      	ldr	r2, [pc, #468]	; (800df08 <Crc_InitCrcValuesForUart+0x234>)
 800dd34:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON;
 800dd36:	2303      	movs	r3, #3
 800dd38:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dd3a:	1d3b      	adds	r3, r7, #4
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	4619      	mov	r1, r3
 800dd40:	486d      	ldr	r0, [pc, #436]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800dd42:	f7f7 f917 	bl	8004f74 <HAL_CRC_Calculate>
 800dd46:	4603      	mov	r3, r0
 800dd48:	4a70      	ldr	r2, [pc, #448]	; (800df0c <Crc_InitCrcValuesForUart+0x238>)
 800dd4a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF;
 800dd4c:	2304      	movs	r3, #4
 800dd4e:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dd50:	1d3b      	adds	r3, r7, #4
 800dd52:	2201      	movs	r2, #1
 800dd54:	4619      	mov	r1, r3
 800dd56:	4868      	ldr	r0, [pc, #416]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800dd58:	f7f7 f90c 	bl	8004f74 <HAL_CRC_Calculate>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	4a6c      	ldr	r2, [pc, #432]	; (800df10 <Crc_InitCrcValuesForUart+0x23c>)
 800dd60:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON;
 800dd62:	2307      	movs	r3, #7
 800dd64:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dd66:	1d3b      	adds	r3, r7, #4
 800dd68:	2201      	movs	r2, #1
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	4862      	ldr	r0, [pc, #392]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800dd6e:	f7f7 f901 	bl	8004f74 <HAL_CRC_Calculate>
 800dd72:	4603      	mov	r3, r0
 800dd74:	4a67      	ldr	r2, [pc, #412]	; (800df14 <Crc_InitCrcValuesForUart+0x240>)
 800dd76:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF;
 800dd78:	2308      	movs	r3, #8
 800dd7a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dd7c:	1d3b      	adds	r3, r7, #4
 800dd7e:	2201      	movs	r2, #1
 800dd80:	4619      	mov	r1, r3
 800dd82:	485d      	ldr	r0, [pc, #372]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800dd84:	f7f7 f8f6 	bl	8004f74 <HAL_CRC_Calculate>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	4a63      	ldr	r2, [pc, #396]	; (800df18 <Crc_InitCrcValuesForUart+0x244>)
 800dd8c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON;
 800dd8e:	2309      	movs	r3, #9
 800dd90:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dd92:	1d3b      	adds	r3, r7, #4
 800dd94:	2201      	movs	r2, #1
 800dd96:	4619      	mov	r1, r3
 800dd98:	4857      	ldr	r0, [pc, #348]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800dd9a:	f7f7 f8eb 	bl	8004f74 <HAL_CRC_Calculate>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	4a5e      	ldr	r2, [pc, #376]	; (800df1c <Crc_InitCrcValuesForUart+0x248>)
 800dda2:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF;
 800dda4:	230a      	movs	r3, #10
 800dda6:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dda8:	1d3b      	adds	r3, r7, #4
 800ddaa:	2201      	movs	r2, #1
 800ddac:	4619      	mov	r1, r3
 800ddae:	4852      	ldr	r0, [pc, #328]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800ddb0:	f7f7 f8e0 	bl	8004f74 <HAL_CRC_Calculate>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	4a5a      	ldr	r2, [pc, #360]	; (800df20 <Crc_InitCrcValuesForUart+0x24c>)
 800ddb8:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON;
 800ddba:	230b      	movs	r3, #11
 800ddbc:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ddbe:	1d3b      	adds	r3, r7, #4
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	484c      	ldr	r0, [pc, #304]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800ddc6:	f7f7 f8d5 	bl	8004f74 <HAL_CRC_Calculate>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	4a55      	ldr	r2, [pc, #340]	; (800df24 <Crc_InitCrcValuesForUart+0x250>)
 800ddce:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF;
 800ddd0:	230c      	movs	r3, #12
 800ddd2:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ddd4:	1d3b      	adds	r3, r7, #4
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	4619      	mov	r1, r3
 800ddda:	4847      	ldr	r0, [pc, #284]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800dddc:	f7f7 f8ca 	bl	8004f74 <HAL_CRC_Calculate>
 800dde0:	4603      	mov	r3, r0
 800dde2:	4a51      	ldr	r2, [pc, #324]	; (800df28 <Crc_InitCrcValuesForUart+0x254>)
 800dde4:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON;
 800dde6:	230d      	movs	r3, #13
 800dde8:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800ddea:	1d3b      	adds	r3, r7, #4
 800ddec:	2201      	movs	r2, #1
 800ddee:	4619      	mov	r1, r3
 800ddf0:	4841      	ldr	r0, [pc, #260]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800ddf2:	f7f7 f8bf 	bl	8004f74 <HAL_CRC_Calculate>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	4a4c      	ldr	r2, [pc, #304]	; (800df2c <Crc_InitCrcValuesForUart+0x258>)
 800ddfa:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF;
 800ddfc:	230e      	movs	r3, #14
 800ddfe:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800de00:	1d3b      	adds	r3, r7, #4
 800de02:	2201      	movs	r2, #1
 800de04:	4619      	mov	r1, r3
 800de06:	483c      	ldr	r0, [pc, #240]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800de08:	f7f7 f8b4 	bl	8004f74 <HAL_CRC_Calculate>
 800de0c:	4603      	mov	r3, r0
 800de0e:	4a48      	ldr	r2, [pc, #288]	; (800df30 <Crc_InitCrcValuesForUart+0x25c>)
 800de10:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON;
 800de12:	2311      	movs	r3, #17
 800de14:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800de16:	1d3b      	adds	r3, r7, #4
 800de18:	2201      	movs	r2, #1
 800de1a:	4619      	mov	r1, r3
 800de1c:	4836      	ldr	r0, [pc, #216]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800de1e:	f7f7 f8a9 	bl	8004f74 <HAL_CRC_Calculate>
 800de22:	4603      	mov	r3, r0
 800de24:	4a43      	ldr	r2, [pc, #268]	; (800df34 <Crc_InitCrcValuesForUart+0x260>)
 800de26:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF;
 800de28:	2312      	movs	r3, #18
 800de2a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800de2c:	1d3b      	adds	r3, r7, #4
 800de2e:	2201      	movs	r2, #1
 800de30:	4619      	mov	r1, r3
 800de32:	4831      	ldr	r0, [pc, #196]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800de34:	f7f7 f89e 	bl	8004f74 <HAL_CRC_Calculate>
 800de38:	4603      	mov	r3, r0
 800de3a:	4a3f      	ldr	r2, [pc, #252]	; (800df38 <Crc_InitCrcValuesForUart+0x264>)
 800de3c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON;
 800de3e:	2315      	movs	r3, #21
 800de40:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800de42:	1d3b      	adds	r3, r7, #4
 800de44:	2201      	movs	r2, #1
 800de46:	4619      	mov	r1, r3
 800de48:	482b      	ldr	r0, [pc, #172]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800de4a:	f7f7 f893 	bl	8004f74 <HAL_CRC_Calculate>
 800de4e:	4603      	mov	r3, r0
 800de50:	4a3a      	ldr	r2, [pc, #232]	; (800df3c <Crc_InitCrcValuesForUart+0x268>)
 800de52:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF;
 800de54:	2316      	movs	r3, #22
 800de56:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800de58:	1d3b      	adds	r3, r7, #4
 800de5a:	2201      	movs	r2, #1
 800de5c:	4619      	mov	r1, r3
 800de5e:	4826      	ldr	r0, [pc, #152]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800de60:	f7f7 f888 	bl	8004f74 <HAL_CRC_Calculate>
 800de64:	4603      	mov	r3, r0
 800de66:	4a36      	ldr	r2, [pc, #216]	; (800df40 <Crc_InitCrcValuesForUart+0x26c>)
 800de68:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO;
 800de6a:	2317      	movs	r3, #23
 800de6c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionZero = HAL_CRC_Calculate(&hcrc, &value, 1);
 800de6e:	1d3b      	adds	r3, r7, #4
 800de70:	2201      	movs	r2, #1
 800de72:	4619      	mov	r1, r3
 800de74:	4820      	ldr	r0, [pc, #128]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800de76:	f7f7 f87d 	bl	8004f74 <HAL_CRC_Calculate>
 800de7a:	4603      	mov	r3, r0
 800de7c:	4a31      	ldr	r2, [pc, #196]	; (800df44 <Crc_InitCrcValuesForUart+0x270>)
 800de7e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 800de80:	2318      	movs	r3, #24
 800de82:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_AutomaticLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800de84:	1d3b      	adds	r3, r7, #4
 800de86:	2201      	movs	r2, #1
 800de88:	4619      	mov	r1, r3
 800de8a:	481b      	ldr	r0, [pc, #108]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800de8c:	f7f7 f872 	bl	8004f74 <HAL_CRC_Calculate>
 800de90:	4603      	mov	r3, r0
 800de92:	4a2d      	ldr	r2, [pc, #180]	; (800df48 <Crc_InitCrcValuesForUart+0x274>)
 800de94:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 800de96:	2319      	movs	r3, #25
 800de98:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800de9a:	1d3b      	adds	r3, r7, #4
 800de9c:	2201      	movs	r2, #1
 800de9e:	4619      	mov	r1, r3
 800dea0:	4815      	ldr	r0, [pc, #84]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800dea2:	f7f7 f867 	bl	8004f74 <HAL_CRC_Calculate>
 800dea6:	4603      	mov	r3, r0
 800dea8:	4a28      	ldr	r2, [pc, #160]	; (800df4c <Crc_InitCrcValuesForUart+0x278>)
 800deaa:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 800deac:	231a      	movs	r3, #26
 800deae:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_NightTimeLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800deb0:	1d3b      	adds	r3, r7, #4
 800deb2:	2201      	movs	r2, #1
 800deb4:	4619      	mov	r1, r3
 800deb6:	4810      	ldr	r0, [pc, #64]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800deb8:	f7f7 f85c 	bl	8004f74 <HAL_CRC_Calculate>
 800debc:	4603      	mov	r3, r0
 800debe:	4a24      	ldr	r2, [pc, #144]	; (800df50 <Crc_InitCrcValuesForUart+0x27c>)
 800dec0:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON;
 800dec2:	2313      	movs	r3, #19
 800dec4:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dec6:	1d3b      	adds	r3, r7, #4
 800dec8:	2201      	movs	r2, #1
 800deca:	4619      	mov	r1, r3
 800decc:	480a      	ldr	r0, [pc, #40]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800dece:	f7f7 f851 	bl	8004f74 <HAL_CRC_Calculate>
 800ded2:	4603      	mov	r3, r0
 800ded4:	4a1f      	ldr	r2, [pc, #124]	; (800df54 <Crc_InitCrcValuesForUart+0x280>)
 800ded6:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF;
 800ded8:	2314      	movs	r3, #20
 800deda:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLights_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dedc:	1d3b      	adds	r3, r7, #4
 800dede:	2201      	movs	r2, #1
 800dee0:	4619      	mov	r1, r3
 800dee2:	4805      	ldr	r0, [pc, #20]	; (800def8 <Crc_InitCrcValuesForUart+0x224>)
 800dee4:	f7f7 f846 	bl	8004f74 <HAL_CRC_Calculate>
 800dee8:	4603      	mov	r3, r0
 800deea:	4a1b      	ldr	r2, [pc, #108]	; (800df58 <Crc_InitCrcValuesForUart+0x284>)
 800deec:	6013      	str	r3, [r2, #0]
}
 800deee:	bf00      	nop
 800def0:	3708      	adds	r7, #8
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	200001f0 	.word	0x200001f0
 800defc:	200089bc 	.word	0x200089bc
 800df00:	200089c0 	.word	0x200089c0
 800df04:	20008964 	.word	0x20008964
 800df08:	20008968 	.word	0x20008968
 800df0c:	2000896c 	.word	0x2000896c
 800df10:	20008970 	.word	0x20008970
 800df14:	20008974 	.word	0x20008974
 800df18:	20008978 	.word	0x20008978
 800df1c:	2000897c 	.word	0x2000897c
 800df20:	20008980 	.word	0x20008980
 800df24:	20008984 	.word	0x20008984
 800df28:	20008988 	.word	0x20008988
 800df2c:	2000898c 	.word	0x2000898c
 800df30:	20008990 	.word	0x20008990
 800df34:	20008994 	.word	0x20008994
 800df38:	20008998 	.word	0x20008998
 800df3c:	2000899c 	.word	0x2000899c
 800df40:	200089a0 	.word	0x200089a0
 800df44:	200089a4 	.word	0x200089a4
 800df48:	200089a8 	.word	0x200089a8
 800df4c:	200089ac 	.word	0x200089ac
 800df50:	200089b0 	.word	0x200089b0
 800df54:	200089b4 	.word	0x200089b4
 800df58:	200089b8 	.word	0x200089b8

0800df5c <HAL_CRC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_CRC_ErrorCallback												   *
* Description: Called in case of error. 								 		   *
************************************************************************************/
VOID HAL_CRC_ErrorCallback(CRC_HandleTypeDef *hcrc)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization. */
	Crc_DeInit();
 800df64:	f000 f81e 	bl	800dfa4 <Crc_DeInit>
	Crc_Init();
 800df68:	f000 f804 	bl	800df74 <Crc_Init>
}
 800df6c:	bf00      	nop
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <Crc_Init>:
/***********************************************************************************
* Function: Crc_Init													   		   *
* Description: Initialize the peripheral.								 		   *
************************************************************************************/
StdReturnType Crc_Init()
{
 800df74:	b580      	push	{r7, lr}
 800df76:	af00      	add	r7, sp, #0
	/* Initialize the CRC.
	 * Call for the error callback in case of faulty initialization. */
	hcrc.Instance = CRC;
 800df78:	4b08      	ldr	r3, [pc, #32]	; (800df9c <Crc_Init+0x28>)
 800df7a:	4a09      	ldr	r2, [pc, #36]	; (800dfa0 <Crc_Init+0x2c>)
 800df7c:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800df7e:	4807      	ldr	r0, [pc, #28]	; (800df9c <Crc_Init+0x28>)
 800df80:	f7f6 ffac 	bl	8004edc <HAL_CRC_Init>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d002      	beq.n	800df90 <Crc_Init+0x1c>
	{
		HAL_CRC_ErrorCallback(&hcrc);
 800df8a:	4804      	ldr	r0, [pc, #16]	; (800df9c <Crc_Init+0x28>)
 800df8c:	f7ff ffe6 	bl	800df5c <HAL_CRC_ErrorCallback>
	else
	{
		/* do nothing */
	}
	/* Initialize the default CRC UART data received values. */
	Crc_InitCrcValuesForUart();
 800df90:	f7ff fea0 	bl	800dcd4 <Crc_InitCrcValuesForUart>
	return E_OK;
 800df94:	2300      	movs	r3, #0
}
 800df96:	4618      	mov	r0, r3
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	200001f0 	.word	0x200001f0
 800dfa0:	40023000 	.word	0x40023000

0800dfa4 <Crc_DeInit>:
/***********************************************************************************
* Function: Crc_DeInit													   		   *
* Description: De-initialize the peripheral.		 		   					   *
************************************************************************************/
StdReturnType Crc_DeInit()
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	af00      	add	r7, sp, #0
	/* De-initialize the CRC. */
	HAL_CRC_DeInit(&hcrc);
 800dfa8:	4802      	ldr	r0, [pc, #8]	; (800dfb4 <Crc_DeInit+0x10>)
 800dfaa:	f7f6 ffb3 	bl	8004f14 <HAL_CRC_DeInit>
	return E_OK;
 800dfae:	2300      	movs	r3, #0
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	bd80      	pop	{r7, pc}
 800dfb4:	200001f0 	.word	0x200001f0

0800dfb8 <Crc_MainFunction>:
/***********************************************************************************
* Function: Crc_MainFunction													   *
* Description: Peripheral main function.		 		   						   *
************************************************************************************/
VOID Crc_MainFunction()
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
	/* Get the error status in the local variable. */
	uint32 returnValue = HAL_CRC_GetState(&hcrc);
 800dfbe:	4825      	ldr	r0, [pc, #148]	; (800e054 <Crc_MainFunction+0x9c>)
 800dfc0:	f7f7 f80b 	bl	8004fda <HAL_CRC_GetState>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	607b      	str	r3, [r7, #4]
	/* Process module state. */
	switch(Crc_BswState)
 800dfc8:	4b23      	ldr	r3, [pc, #140]	; (800e058 <Crc_MainFunction+0xa0>)
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	2b03      	cmp	r3, #3
 800dfce:	d81a      	bhi.n	800e006 <Crc_MainFunction+0x4e>
 800dfd0:	a201      	add	r2, pc, #4	; (adr r2, 800dfd8 <Crc_MainFunction+0x20>)
 800dfd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd6:	bf00      	nop
 800dfd8:	0800dfe9 	.word	0x0800dfe9
 800dfdc:	0800e007 	.word	0x0800e007
 800dfe0:	0800dffb 	.word	0x0800dffb
 800dfe4:	0800dff5 	.word	0x0800dff5
	{
		case CRC_INIT_STATE:
			Crc_Init();
 800dfe8:	f7ff ffc4 	bl	800df74 <Crc_Init>
			Crc_BswState = CRC_INITCRCVALUES_STATE;
 800dfec:	4b1a      	ldr	r3, [pc, #104]	; (800e058 <Crc_MainFunction+0xa0>)
 800dfee:	2202      	movs	r2, #2
 800dff0:	701a      	strb	r2, [r3, #0]
			break;
 800dff2:	e009      	b.n	800e008 <Crc_MainFunction+0x50>
		case CRC_DEINIT_STATE:
			Crc_DeInit();
 800dff4:	f7ff ffd6 	bl	800dfa4 <Crc_DeInit>
			break;
 800dff8:	e006      	b.n	800e008 <Crc_MainFunction+0x50>
		case CRC_VERIFYUARTDATA_STATE:
			break;
		case CRC_INITCRCVALUES_STATE:
			Crc_InitCrcValuesForUart();
 800dffa:	f7ff fe6b 	bl	800dcd4 <Crc_InitCrcValuesForUart>
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 800dffe:	4b16      	ldr	r3, [pc, #88]	; (800e058 <Crc_MainFunction+0xa0>)
 800e000:	2201      	movs	r2, #1
 800e002:	701a      	strb	r2, [r3, #0]
			break;
 800e004:	e000      	b.n	800e008 <Crc_MainFunction+0x50>
		default:
			break;
 800e006:	bf00      	nop
	}
	/* Process peripheral state. */
	switch(returnValue)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2b04      	cmp	r3, #4
 800e00c:	d81c      	bhi.n	800e048 <Crc_MainFunction+0x90>
 800e00e:	a201      	add	r2, pc, #4	; (adr r2, 800e014 <Crc_MainFunction+0x5c>)
 800e010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e014:	0800e029 	.word	0x0800e029
 800e018:	0800e031 	.word	0x0800e031
 800e01c:	0800e049 	.word	0x0800e049
 800e020:	0800e039 	.word	0x0800e039
 800e024:	0800e041 	.word	0x0800e041
	{
		case HAL_CRC_STATE_RESET:
			Crc_BswState = CRC_INIT_STATE;
 800e028:	4b0b      	ldr	r3, [pc, #44]	; (800e058 <Crc_MainFunction+0xa0>)
 800e02a:	2200      	movs	r2, #0
 800e02c:	701a      	strb	r2, [r3, #0]
			break;
 800e02e:	e00c      	b.n	800e04a <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_READY:
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 800e030:	4b09      	ldr	r3, [pc, #36]	; (800e058 <Crc_MainFunction+0xa0>)
 800e032:	2201      	movs	r2, #1
 800e034:	701a      	strb	r2, [r3, #0]
			break;
 800e036:	e008      	b.n	800e04a <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_BUSY:
			break;
		case HAL_CRC_STATE_TIMEOUT:
			HAL_CRC_ErrorCallback(&hcrc);
 800e038:	4806      	ldr	r0, [pc, #24]	; (800e054 <Crc_MainFunction+0x9c>)
 800e03a:	f7ff ff8f 	bl	800df5c <HAL_CRC_ErrorCallback>
			break;
 800e03e:	e004      	b.n	800e04a <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_ERROR:
			HAL_CRC_ErrorCallback(&hcrc);
 800e040:	4804      	ldr	r0, [pc, #16]	; (800e054 <Crc_MainFunction+0x9c>)
 800e042:	f7ff ff8b 	bl	800df5c <HAL_CRC_ErrorCallback>
			break;
 800e046:	e000      	b.n	800e04a <Crc_MainFunction+0x92>
		default:
			break;
 800e048:	bf00      	nop
	}
}
 800e04a:	bf00      	nop
 800e04c:	3708      	adds	r7, #8
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}
 800e052:	bf00      	nop
 800e054:	200001f0 	.word	0x200001f0
 800e058:	20008960 	.word	0x20008960

0800e05c <EcuM_CheckForWakeupEvent>:
/***********************************************************************************
* Function: EcuM_CheckForWakeupEvent									   		   *
* Description: Checks for the wake up event and sends it forward for processing.   *
************************************************************************************/
VOID EcuM_CheckForWakeupEvent()
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	af00      	add	r7, sp, #0
	/* Check if power-on reset wake-up event occurred. */
	if((RCC->CSR & RCC_CSR_PORRSTF) != 0)
 800e060:	4b27      	ldr	r3, [pc, #156]	; (800e100 <EcuM_CheckForWakeupEvent+0xa4>)
 800e062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d009      	beq.n	800e080 <EcuM_CheckForWakeupEvent+0x24>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_POR);
 800e06c:	2000      	movs	r0, #0
 800e06e:	f000 f849 	bl	800e104 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_PORRSTF;
 800e072:	4b23      	ldr	r3, [pc, #140]	; (800e100 <EcuM_CheckForWakeupEvent+0xa4>)
 800e074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e076:	4a22      	ldr	r2, [pc, #136]	; (800e100 <EcuM_CheckForWakeupEvent+0xa4>)
 800e078:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e07c:	6753      	str	r3, [r2, #116]	; 0x74
	}/* Check if a button reset wake-up event occurred. */
	else
	{
		/* do nothing */
	}
}
 800e07e:	e03c      	b.n	800e0fa <EcuM_CheckForWakeupEvent+0x9e>
	else if((RCC->CSR & RCC_CSR_BORRSTF) != 0)
 800e080:	4b1f      	ldr	r3, [pc, #124]	; (800e100 <EcuM_CheckForWakeupEvent+0xa4>)
 800e082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d009      	beq.n	800e0a0 <EcuM_CheckForWakeupEvent+0x44>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_BOR);
 800e08c:	2001      	movs	r0, #1
 800e08e:	f000 f839 	bl	800e104 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_BORRSTF;
 800e092:	4b1b      	ldr	r3, [pc, #108]	; (800e100 <EcuM_CheckForWakeupEvent+0xa4>)
 800e094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e096:	4a1a      	ldr	r2, [pc, #104]	; (800e100 <EcuM_CheckForWakeupEvent+0xa4>)
 800e098:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e09c:	6753      	str	r3, [r2, #116]	; 0x74
}
 800e09e:	e02c      	b.n	800e0fa <EcuM_CheckForWakeupEvent+0x9e>
	else if((RCC->CSR & RCC_CSR_SFTRSTF) != 0)
 800e0a0:	4b17      	ldr	r3, [pc, #92]	; (800e100 <EcuM_CheckForWakeupEvent+0xa4>)
 800e0a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d009      	beq.n	800e0c0 <EcuM_CheckForWakeupEvent+0x64>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 800e0ac:	2002      	movs	r0, #2
 800e0ae:	f000 f829 	bl	800e104 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_SFTRSTF;
 800e0b2:	4b13      	ldr	r3, [pc, #76]	; (800e100 <EcuM_CheckForWakeupEvent+0xa4>)
 800e0b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0b6:	4a12      	ldr	r2, [pc, #72]	; (800e100 <EcuM_CheckForWakeupEvent+0xa4>)
 800e0b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0bc:	6753      	str	r3, [r2, #116]	; 0x74
}
 800e0be:	e01c      	b.n	800e0fa <EcuM_CheckForWakeupEvent+0x9e>
	else if((RCC->CSR & RCC_CSR_IWDGRSTF) != 0)
 800e0c0:	4b0f      	ldr	r3, [pc, #60]	; (800e100 <EcuM_CheckForWakeupEvent+0xa4>)
 800e0c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d009      	beq.n	800e0e0 <EcuM_CheckForWakeupEvent+0x84>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 800e0cc:	2003      	movs	r0, #3
 800e0ce:	f000 f819 	bl	800e104 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_IWDGRSTF;
 800e0d2:	4b0b      	ldr	r3, [pc, #44]	; (800e100 <EcuM_CheckForWakeupEvent+0xa4>)
 800e0d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0d6:	4a0a      	ldr	r2, [pc, #40]	; (800e100 <EcuM_CheckForWakeupEvent+0xa4>)
 800e0d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e0dc:	6753      	str	r3, [r2, #116]	; 0x74
}
 800e0de:	e00c      	b.n	800e0fa <EcuM_CheckForWakeupEvent+0x9e>
	else if((RCC->CSR & RCC_CSR_LPWRRSTF) != 0)
 800e0e0:	4b07      	ldr	r3, [pc, #28]	; (800e100 <EcuM_CheckForWakeupEvent+0xa4>)
 800e0e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	da08      	bge.n	800e0fa <EcuM_CheckForWakeupEvent+0x9e>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 800e0e8:	2004      	movs	r0, #4
 800e0ea:	f000 f80b 	bl	800e104 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_LPWRRSTF;
 800e0ee:	4b04      	ldr	r3, [pc, #16]	; (800e100 <EcuM_CheckForWakeupEvent+0xa4>)
 800e0f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0f2:	4a03      	ldr	r2, [pc, #12]	; (800e100 <EcuM_CheckForWakeupEvent+0xa4>)
 800e0f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e0f8:	6753      	str	r3, [r2, #116]	; 0x74
}
 800e0fa:	bf00      	nop
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	40023800 	.word	0x40023800

0800e104 <EcuM_SetWakeupSource>:
/***********************************************************************************
* Function: EcuM_SetWakeupSource									   		   	   *
* Description: Sets the wake up source received.			 		   			   *
************************************************************************************/
VOID EcuM_SetWakeupSource(uint32 wakeupSource)
{
 800e104:	b480      	push	{r7}
 800e106:	b083      	sub	sp, #12
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
	/* If wake-up source is valid. */
	if(wakeupSource != NULL_PTR)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d003      	beq.n	800e11a <EcuM_SetWakeupSource+0x16>
	{
		/* Store the wake-up event. */
		EcuM_GlobalState = wakeupSource;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	b2da      	uxtb	r2, r3
 800e116:	4b04      	ldr	r3, [pc, #16]	; (800e128 <EcuM_SetWakeupSource+0x24>)
 800e118:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 800e11a:	bf00      	nop
 800e11c:	370c      	adds	r7, #12
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr
 800e126:	bf00      	nop
 800e128:	200089c5 	.word	0x200089c5

0800e12c <EcuM_ProcessWakeupEvent>:
/***********************************************************************************
* Function: EcuM_ProcessWakeupEvent									   		       *
* Description: Sends forward the wake up event.							 		   *
************************************************************************************/
VOID EcuM_ProcessWakeupEvent()
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
	/* Store the wake-up event into local variable. */
	uint8 localWakeupEvent = EcuM_GlobalState;
 800e132:	4b1d      	ldr	r3, [pc, #116]	; (800e1a8 <EcuM_ProcessWakeupEvent+0x7c>)
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	71fb      	strb	r3, [r7, #7]
	/* Set the system fault for the respective wake-up event. */
	switch(localWakeupEvent)
 800e138:	79fb      	ldrb	r3, [r7, #7]
 800e13a:	2b04      	cmp	r3, #4
 800e13c:	d82f      	bhi.n	800e19e <EcuM_ProcessWakeupEvent+0x72>
 800e13e:	a201      	add	r2, pc, #4	; (adr r2, 800e144 <EcuM_ProcessWakeupEvent+0x18>)
 800e140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e144:	0800e159 	.word	0x0800e159
 800e148:	0800e167 	.word	0x0800e167
 800e14c:	0800e175 	.word	0x0800e175
 800e150:	0800e183 	.word	0x0800e183
 800e154:	0800e191 	.word	0x0800e191
	{
		case ECUM_WAKEUPSOURCE_POR:
			EcuM_GlobalState = 255;
 800e158:	4b13      	ldr	r3, [pc, #76]	; (800e1a8 <EcuM_ProcessWakeupEvent+0x7c>)
 800e15a:	22ff      	movs	r2, #255	; 0xff
 800e15c:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_POR);
 800e15e:	2000      	movs	r0, #0
 800e160:	f000 f95a 	bl	800e418 <SystemManager_SetFault>
			break;
 800e164:	e01c      	b.n	800e1a0 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_BOR:
			EcuM_GlobalState = 255;
 800e166:	4b10      	ldr	r3, [pc, #64]	; (800e1a8 <EcuM_ProcessWakeupEvent+0x7c>)
 800e168:	22ff      	movs	r2, #255	; 0xff
 800e16a:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_BOR);
 800e16c:	2001      	movs	r0, #1
 800e16e:	f000 f953 	bl	800e418 <SystemManager_SetFault>
			break;
 800e172:	e015      	b.n	800e1a0 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_SOFTWARE_RESET:
			EcuM_GlobalState = 255;
 800e174:	4b0c      	ldr	r3, [pc, #48]	; (800e1a8 <EcuM_ProcessWakeupEvent+0x7c>)
 800e176:	22ff      	movs	r2, #255	; 0xff
 800e178:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 800e17a:	2002      	movs	r0, #2
 800e17c:	f000 f94c 	bl	800e418 <SystemManager_SetFault>
			break;
 800e180:	e00e      	b.n	800e1a0 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET:
			EcuM_GlobalState = 255;
 800e182:	4b09      	ldr	r3, [pc, #36]	; (800e1a8 <EcuM_ProcessWakeupEvent+0x7c>)
 800e184:	22ff      	movs	r2, #255	; 0xff
 800e186:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 800e188:	2003      	movs	r0, #3
 800e18a:	f000 f945 	bl	800e418 <SystemManager_SetFault>
			break;
 800e18e:	e007      	b.n	800e1a0 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_LOWPOWER_RESET:
			EcuM_GlobalState = 255;
 800e190:	4b05      	ldr	r3, [pc, #20]	; (800e1a8 <EcuM_ProcessWakeupEvent+0x7c>)
 800e192:	22ff      	movs	r2, #255	; 0xff
 800e194:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 800e196:	2004      	movs	r0, #4
 800e198:	f000 f93e 	bl	800e418 <SystemManager_SetFault>
			break;
 800e19c:	e000      	b.n	800e1a0 <EcuM_ProcessWakeupEvent+0x74>
		default:
			break;
 800e19e:	bf00      	nop
	}
}
 800e1a0:	bf00      	nop
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	200089c5 	.word	0x200089c5

0800e1ac <EcuM_DriverInit>:
/***********************************************************************************
* Function: EcuM_DriverInit									   		               *
* Description: Initialize the drivers.			 		   						   *
************************************************************************************/
StdReturnType EcuM_DriverInit()
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
	Port_Init();
 800e1b2:	f7fb fa11 	bl	80095d8 <Port_Init>
	MX_DMA_Init();
 800e1b6:	f7f4 fbc7 	bl	8002948 <MX_DMA_Init>
	Tim_Init(TIMER_TWO);
 800e1ba:	2002      	movs	r0, #2
 800e1bc:	f7fb fb42 	bl	8009844 <Tim_Init>
	Tim_Init(TIMER_THREE);
 800e1c0:	2003      	movs	r0, #3
 800e1c2:	f7fb fb3f 	bl	8009844 <Tim_Init>
	Tim_Init(TIMER_FOUR);
 800e1c6:	2004      	movs	r0, #4
 800e1c8:	f7fb fb3c 	bl	8009844 <Tim_Init>
	Tim_Init(TIMER_FIVE);
 800e1cc:	2005      	movs	r0, #5
 800e1ce:	f7fb fb39 	bl	8009844 <Tim_Init>
	Adc_Init();
 800e1d2:	f7fb f961 	bl	8009498 <Adc_Init>
	Crc_Init();
 800e1d6:	f7ff fecd 	bl	800df74 <Crc_Init>
	Uart_Init();
 800e1da:	f7f4 f94d 	bl	8002478 <Uart_Init>
	//Watchdog_Init();
	MX_NVIC_Init();
 800e1de:	f000 f94b 	bl	800e478 <MX_NVIC_Init>
	MPU_Region_InitTypeDef MPU_InitStruct;
	HAL_MPU_Disable();
 800e1e2:	f7f6 fdff 	bl	8004de4 <HAL_MPU_Disable>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x08000000;
 800e1ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e1f2:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800e1f4:	2312      	movs	r3, #18
 800e1f6:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x0;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800e200:	2303      	movs	r3, #3
 800e202:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800e204:	2300      	movs	r3, #0
 800e206:	733b      	strb	r3, [r7, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800e208:	463b      	mov	r3, r7
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7f6 fe22 	bl	8004e54 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800e210:	2301      	movs	r3, #1
 800e212:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x20000000;
 800e214:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800e218:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800e21a:	2310      	movs	r3, #16
 800e21c:	723b      	strb	r3, [r7, #8]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800e21e:	463b      	mov	r3, r7
 800e220:	4618      	mov	r0, r3
 800e222:	f7f6 fe17 	bl	8004e54 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800e226:	2302      	movs	r3, #2
 800e228:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x40000000;
 800e22a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e22e:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 800e230:	231c      	movs	r3, #28
 800e232:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW;
 800e234:	2301      	movs	r3, #1
 800e236:	72fb      	strb	r3, [r7, #11]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800e238:	463b      	mov	r3, r7
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7f6 fe0a 	bl	8004e54 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800e240:	2303      	movs	r3, #3
 800e242:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x60000000;
 800e244:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800e248:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 800e24a:	2316      	movs	r3, #22
 800e24c:	723b      	strb	r3, [r7, #8]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800e24e:	463b      	mov	r3, r7
 800e250:	4618      	mov	r0, r3
 800e252:	f7f6 fdff 	bl	8004e54 <HAL_MPU_ConfigRegion>
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800e256:	2004      	movs	r0, #4
 800e258:	f7f6 fddc 	bl	8004e14 <HAL_MPU_Enable>
	EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 800e25c:	4b03      	ldr	r3, [pc, #12]	; (800e26c <EcuM_DriverInit+0xc0>)
 800e25e:	2201      	movs	r2, #1
 800e260:	701a      	strb	r2, [r3, #0]
	return E_OK;
 800e262:	2300      	movs	r3, #0
}
 800e264:	4618      	mov	r0, r3
 800e266:	3710      	adds	r7, #16
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	200089c4 	.word	0x200089c4

0800e270 <EcuM_DriverDeInit>:
/***********************************************************************************
* Function: EcuM_DriverDeInit									   		           *
* Description: De-initialize the drivers.			 		                       *
************************************************************************************/
StdReturnType EcuM_DriverDeInit()
{
 800e270:	b580      	push	{r7, lr}
 800e272:	af00      	add	r7, sp, #0
	Adc_DeInit();
 800e274:	f7fb f906 	bl	8009484 <Adc_DeInit>
	Tim_DeInit(TIMER_TWO);
 800e278:	2002      	movs	r0, #2
 800e27a:	f7fb fd01 	bl	8009c80 <Tim_DeInit>
	Tim_DeInit(TIMER_THREE);
 800e27e:	2003      	movs	r0, #3
 800e280:	f7fb fcfe 	bl	8009c80 <Tim_DeInit>
	Tim_DeInit(TIMER_FOUR);
 800e284:	2004      	movs	r0, #4
 800e286:	f7fb fcfb 	bl	8009c80 <Tim_DeInit>
	Tim_DeInit(TIMER_FIVE);
 800e28a:	2005      	movs	r0, #5
 800e28c:	f7fb fcf8 	bl	8009c80 <Tim_DeInit>
	Uart_DeInit();
 800e290:	f7f4 f91e 	bl	80024d0 <Uart_DeInit>
	Crc_DeInit();
 800e294:	f7ff fe86 	bl	800dfa4 <Crc_DeInit>
	SystemManager_DeInit();
 800e298:	f000 f8b8 	bl	800e40c <SystemManager_DeInit>
	return E_OK;
 800e29c:	2300      	movs	r3, #0
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	bd80      	pop	{r7, pc}
	...

0800e2a4 <EcuM_MainFunction>:
/***********************************************************************************
* Function: EcuM_MainFunction									   		           *
* Description: Electronic control unit manager main function.			 		   *
************************************************************************************/
VOID EcuM_MainFunction()
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	af00      	add	r7, sp, #0
	switch(EcuM_BswState)
 800e2a8:	4b12      	ldr	r3, [pc, #72]	; (800e2f4 <EcuM_MainFunction+0x50>)
 800e2aa:	781b      	ldrb	r3, [r3, #0]
 800e2ac:	2b03      	cmp	r3, #3
 800e2ae:	d81d      	bhi.n	800e2ec <EcuM_MainFunction+0x48>
 800e2b0:	a201      	add	r2, pc, #4	; (adr r2, 800e2b8 <EcuM_MainFunction+0x14>)
 800e2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2b6:	bf00      	nop
 800e2b8:	0800e2c9 	.word	0x0800e2c9
 800e2bc:	0800e2d5 	.word	0x0800e2d5
 800e2c0:	0800e2e1 	.word	0x0800e2e1
 800e2c4:	0800e2cf 	.word	0x0800e2cf
	{
		case ECUM_INIT_STATE:
			EcuM_DriverInit();
 800e2c8:	f7ff ff70 	bl	800e1ac <EcuM_DriverInit>
			break;
 800e2cc:	e00f      	b.n	800e2ee <EcuM_MainFunction+0x4a>
		case ECUM_DEINIT_STATE:
			EcuM_DriverDeInit();
 800e2ce:	f7ff ffcf 	bl	800e270 <EcuM_DriverDeInit>
			break;
 800e2d2:	e00c      	b.n	800e2ee <EcuM_MainFunction+0x4a>
		case ECUM_CHECKFORWAKEUP_STATE:
			EcuM_CheckForWakeupEvent();
 800e2d4:	f7ff fec2 	bl	800e05c <EcuM_CheckForWakeupEvent>
			EcuM_BswState = ECUM_PROCESSWAKEUP_STATE;
 800e2d8:	4b06      	ldr	r3, [pc, #24]	; (800e2f4 <EcuM_MainFunction+0x50>)
 800e2da:	2202      	movs	r2, #2
 800e2dc:	701a      	strb	r2, [r3, #0]
			break;
 800e2de:	e006      	b.n	800e2ee <EcuM_MainFunction+0x4a>
		case ECUM_PROCESSWAKEUP_STATE:
			EcuM_ProcessWakeupEvent();
 800e2e0:	f7ff ff24 	bl	800e12c <EcuM_ProcessWakeupEvent>
			EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 800e2e4:	4b03      	ldr	r3, [pc, #12]	; (800e2f4 <EcuM_MainFunction+0x50>)
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	701a      	strb	r2, [r3, #0]
			break;
 800e2ea:	e000      	b.n	800e2ee <EcuM_MainFunction+0x4a>
		default:
			break;
 800e2ec:	bf00      	nop
	}
}
 800e2ee:	bf00      	nop
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	200089c4 	.word	0x200089c4

0800e2f8 <SystemManager_ProcessFault>:
/***********************************************************************************
* Function: SystemManager_ProcessFault										       *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_ProcessFault()
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
	for(uint8 idx = STD_LOW ; idx < 26; idx++)
 800e2fe:	2300      	movs	r3, #0
 800e300:	71fb      	strb	r3, [r7, #7]
 800e302:	e070      	b.n	800e3e6 <SystemManager_ProcessFault+0xee>
	{
		if(SystemManager_Fault[idx] != STD_LOW)
 800e304:	79fb      	ldrb	r3, [r7, #7]
 800e306:	4a3c      	ldr	r2, [pc, #240]	; (800e3f8 <SystemManager_ProcessFault+0x100>)
 800e308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d067      	beq.n	800e3e0 <SystemManager_ProcessFault+0xe8>
		{
			if(idx == POWER_ON_RESET)
 800e310:	79fb      	ldrb	r3, [r7, #7]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d064      	beq.n	800e3e0 <SystemManager_ProcessFault+0xe8>
			{
				/* do nothing */
			}
			else if(idx == BROWN_OUT_RESET ||
 800e316:	79fb      	ldrb	r3, [r7, #7]
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d014      	beq.n	800e346 <SystemManager_ProcessFault+0x4e>
 800e31c:	79fb      	ldrb	r3, [r7, #7]
 800e31e:	2b04      	cmp	r3, #4
 800e320:	d011      	beq.n	800e346 <SystemManager_ProcessFault+0x4e>
					idx == LOW_POWER_RESET ||
 800e322:	79fb      	ldrb	r3, [r7, #7]
 800e324:	2b06      	cmp	r3, #6
 800e326:	d00e      	beq.n	800e346 <SystemManager_ProcessFault+0x4e>
					idx == HARDWARE_RESET ||
 800e328:	79fb      	ldrb	r3, [r7, #7]
 800e32a:	2b07      	cmp	r3, #7
 800e32c:	d00b      	beq.n	800e346 <SystemManager_ProcessFault+0x4e>
					idx == FLASH_FAULT_RESET ||
 800e32e:	79fb      	ldrb	r3, [r7, #7]
 800e330:	2b08      	cmp	r3, #8
 800e332:	d008      	beq.n	800e346 <SystemManager_ProcessFault+0x4e>
					idx == NMI_RESET ||
 800e334:	79fb      	ldrb	r3, [r7, #7]
 800e336:	2b09      	cmp	r3, #9
 800e338:	d005      	beq.n	800e346 <SystemManager_ProcessFault+0x4e>
					idx == MEMORY_FAULT_RESET ||
 800e33a:	79fb      	ldrb	r3, [r7, #7]
 800e33c:	2b0a      	cmp	r3, #10
 800e33e:	d002      	beq.n	800e346 <SystemManager_ProcessFault+0x4e>
					idx == USAGE_FAULT_RESET ||
 800e340:	79fb      	ldrb	r3, [r7, #7]
 800e342:	2b0b      	cmp	r3, #11
 800e344:	d109      	bne.n	800e35a <SystemManager_ProcessFault+0x62>
					idx == BUS_FAULT_RESET)
			{
				if(SystemManager_Fault[idx] >= 2)
 800e346:	79fb      	ldrb	r3, [r7, #7]
 800e348:	4a2b      	ldr	r2, [pc, #172]	; (800e3f8 <SystemManager_ProcessFault+0x100>)
 800e34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e34e:	2b01      	cmp	r3, #1
 800e350:	d946      	bls.n	800e3e0 <SystemManager_ProcessFault+0xe8>
				{
					Dem_ReceiveFault(HARDWARE_RESET_DTC_CODE);
 800e352:	2056      	movs	r0, #86	; 0x56
 800e354:	f7f5 fd06 	bl	8003d64 <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 2)
 800e358:	e042      	b.n	800e3e0 <SystemManager_ProcessFault+0xe8>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == SOFTWARE_RESET ||
 800e35a:	79fb      	ldrb	r3, [r7, #7]
 800e35c:	2b02      	cmp	r3, #2
 800e35e:	d008      	beq.n	800e372 <SystemManager_ProcessFault+0x7a>
 800e360:	79fb      	ldrb	r3, [r7, #7]
 800e362:	2b03      	cmp	r3, #3
 800e364:	d005      	beq.n	800e372 <SystemManager_ProcessFault+0x7a>
					idx == WATCHDOG_RESET ||
 800e366:	79fb      	ldrb	r3, [r7, #7]
 800e368:	2b0c      	cmp	r3, #12
 800e36a:	d002      	beq.n	800e372 <SystemManager_ProcessFault+0x7a>
					idx == STACK_OVERFLOW_RESET ||
 800e36c:	79fb      	ldrb	r3, [r7, #7]
 800e36e:	2b0d      	cmp	r3, #13
 800e370:	d109      	bne.n	800e386 <SystemManager_ProcessFault+0x8e>
					idx == MALLOC_FAILED_RESET)
			{
				if(SystemManager_Fault[idx] >= 2)
 800e372:	79fb      	ldrb	r3, [r7, #7]
 800e374:	4a20      	ldr	r2, [pc, #128]	; (800e3f8 <SystemManager_ProcessFault+0x100>)
 800e376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d930      	bls.n	800e3e0 <SystemManager_ProcessFault+0xe8>
				{
					Dem_ReceiveFault(SOFTWARE_RESET_DTC_CODE);
 800e37e:	2035      	movs	r0, #53	; 0x35
 800e380:	f7f5 fcf0 	bl	8003d64 <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 2)
 800e384:	e02c      	b.n	800e3e0 <SystemManager_ProcessFault+0xe8>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == ADC_ERROR_INTERNAL ||
 800e386:	79fb      	ldrb	r3, [r7, #7]
 800e388:	2b0e      	cmp	r3, #14
 800e38a:	d020      	beq.n	800e3ce <SystemManager_ProcessFault+0xd6>
 800e38c:	79fb      	ldrb	r3, [r7, #7]
 800e38e:	2b0f      	cmp	r3, #15
 800e390:	d01d      	beq.n	800e3ce <SystemManager_ProcessFault+0xd6>
					idx == ADC_ERROR_OVR ||
 800e392:	79fb      	ldrb	r3, [r7, #7]
 800e394:	2b10      	cmp	r3, #16
 800e396:	d01a      	beq.n	800e3ce <SystemManager_ProcessFault+0xd6>
					idx == ADC_ERROR_DMA ||
 800e398:	79fb      	ldrb	r3, [r7, #7]
 800e39a:	2b11      	cmp	r3, #17
 800e39c:	d017      	beq.n	800e3ce <SystemManager_ProcessFault+0xd6>
					idx == UART_ERROR_PE ||
 800e39e:	79fb      	ldrb	r3, [r7, #7]
 800e3a0:	2b12      	cmp	r3, #18
 800e3a2:	d014      	beq.n	800e3ce <SystemManager_ProcessFault+0xd6>
					idx == UART_ERROR_NE ||
 800e3a4:	79fb      	ldrb	r3, [r7, #7]
 800e3a6:	2b13      	cmp	r3, #19
 800e3a8:	d011      	beq.n	800e3ce <SystemManager_ProcessFault+0xd6>
					idx == UART_ERROR_FE ||
 800e3aa:	79fb      	ldrb	r3, [r7, #7]
 800e3ac:	2b14      	cmp	r3, #20
 800e3ae:	d00e      	beq.n	800e3ce <SystemManager_ProcessFault+0xd6>
					idx == UART_ERROR_ORE ||
 800e3b0:	79fb      	ldrb	r3, [r7, #7]
 800e3b2:	2b15      	cmp	r3, #21
 800e3b4:	d00b      	beq.n	800e3ce <SystemManager_ProcessFault+0xd6>
					idx == UART_ERROR_DMA ||
 800e3b6:	79fb      	ldrb	r3, [r7, #7]
 800e3b8:	2b16      	cmp	r3, #22
 800e3ba:	d008      	beq.n	800e3ce <SystemManager_ProcessFault+0xd6>
					idx == TIMER2_ERROR ||
 800e3bc:	79fb      	ldrb	r3, [r7, #7]
 800e3be:	2b17      	cmp	r3, #23
 800e3c0:	d005      	beq.n	800e3ce <SystemManager_ProcessFault+0xd6>
					idx == TIMER3_ERROR ||
 800e3c2:	79fb      	ldrb	r3, [r7, #7]
 800e3c4:	2b18      	cmp	r3, #24
 800e3c6:	d002      	beq.n	800e3ce <SystemManager_ProcessFault+0xd6>
					idx == TIMER4_ERROR ||
 800e3c8:	79fb      	ldrb	r3, [r7, #7]
 800e3ca:	2b19      	cmp	r3, #25
 800e3cc:	d108      	bne.n	800e3e0 <SystemManager_ProcessFault+0xe8>
					idx == TIMER5_ERROR)
			{
				if(SystemManager_Fault[idx] >= 2)
 800e3ce:	79fb      	ldrb	r3, [r7, #7]
 800e3d0:	4a09      	ldr	r2, [pc, #36]	; (800e3f8 <SystemManager_ProcessFault+0x100>)
 800e3d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d902      	bls.n	800e3e0 <SystemManager_ProcessFault+0xe8>
				{
					Dem_ReceiveFault(PERIPHERAL_ERROR_DTC_CODE);
 800e3da:	2099      	movs	r0, #153	; 0x99
 800e3dc:	f7f5 fcc2 	bl	8003d64 <Dem_ReceiveFault>
	for(uint8 idx = STD_LOW ; idx < 26; idx++)
 800e3e0:	79fb      	ldrb	r3, [r7, #7]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	71fb      	strb	r3, [r7, #7]
 800e3e6:	79fb      	ldrb	r3, [r7, #7]
 800e3e8:	2b19      	cmp	r3, #25
 800e3ea:	d98b      	bls.n	800e304 <SystemManager_ProcessFault+0xc>
		else
		{
			/* do nothing */
		}
	}
}
 800e3ec:	bf00      	nop
 800e3ee:	bf00      	nop
 800e3f0:	3708      	adds	r7, #8
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	200089c8 	.word	0x200089c8

0800e3fc <SystemManager_Init>:
/***********************************************************************************
* Function: SystemManager_Init													   *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_Init()
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	af00      	add	r7, sp, #0
	/* Perform system initialization sequence. */
	HAL_Init();
 800e400:	f7f5 fd36 	bl	8003e70 <HAL_Init>
	SystemClock_Config();
 800e404:	f000 f87c 	bl	800e500 <SystemClock_Config>
}
 800e408:	bf00      	nop
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <SystemManager_DeInit>:
/***********************************************************************************
* Function: SystemManager_DeInit												   *
* Description: De-initialize the system.  		   								   *
************************************************************************************/
VOID SystemManager_DeInit()
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	af00      	add	r7, sp, #0
	HAL_DeInit();
 800e410:	f7f5 fd50 	bl	8003eb4 <HAL_DeInit>
}
 800e414:	bf00      	nop
 800e416:	bd80      	pop	{r7, pc}

0800e418 <SystemManager_SetFault>:
/***********************************************************************************
* Function: SystemManager_SetFault										   		   *
* Description: Set the fault in the system.		 		   						   *
************************************************************************************/
StdReturnType SystemManager_SetFault(uint8 faultType)
{
 800e418:	b480      	push	{r7}
 800e41a:	b085      	sub	sp, #20
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	4603      	mov	r3, r0
 800e420:	71fb      	strb	r3, [r7, #7]
	/* Store the fault into the data type. */
	for(uint8 index = 0; index < 14; index++)
 800e422:	2300      	movs	r3, #0
 800e424:	73fb      	strb	r3, [r7, #15]
 800e426:	e00e      	b.n	800e446 <SystemManager_SetFault+0x2e>
	{
		if(faultType == index)
 800e428:	79fa      	ldrb	r2, [r7, #7]
 800e42a:	7bfb      	ldrb	r3, [r7, #15]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d107      	bne.n	800e440 <SystemManager_SetFault+0x28>
		{
			SystemManager_Fault[index]++;
 800e430:	7bfb      	ldrb	r3, [r7, #15]
 800e432:	4a0a      	ldr	r2, [pc, #40]	; (800e45c <SystemManager_SetFault+0x44>)
 800e434:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e438:	3201      	adds	r2, #1
 800e43a:	4908      	ldr	r1, [pc, #32]	; (800e45c <SystemManager_SetFault+0x44>)
 800e43c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8 index = 0; index < 14; index++)
 800e440:	7bfb      	ldrb	r3, [r7, #15]
 800e442:	3301      	adds	r3, #1
 800e444:	73fb      	strb	r3, [r7, #15]
 800e446:	7bfb      	ldrb	r3, [r7, #15]
 800e448:	2b0d      	cmp	r3, #13
 800e44a:	d9ed      	bls.n	800e428 <SystemManager_SetFault+0x10>
		else
		{
			/* do nothing */
		}
	}
	return E_OK;
 800e44c:	2300      	movs	r3, #0
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3714      	adds	r7, #20
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr
 800e45a:	bf00      	nop
 800e45c:	200089c8 	.word	0x200089c8

0800e460 <SystemManager_MainFunction>:
/***********************************************************************************
* Function: SystemManager_MainFunction									   		   *
* Description: System main function.									 		   *
************************************************************************************/
VOID SystemManager_MainFunction()
{
 800e460:	b580      	push	{r7, lr}
 800e462:	af00      	add	r7, sp, #0
	SystemManager_ProcessFault();
 800e464:	f7ff ff48 	bl	800e2f8 <SystemManager_ProcessFault>
}
 800e468:	bf00      	nop
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <SystemManager_PerformReset>:
/***********************************************************************************
* Function: SystemManager_PerformReset									   		   *
* Description: Perform system reset.		 		   							   *
************************************************************************************/
VOID SystemManager_PerformReset()
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 800e470:	f7f6 fcb3 	bl	8004dda <HAL_NVIC_SystemReset>
}
 800e474:	bf00      	nop
 800e476:	bd80      	pop	{r7, pc}

0800e478 <MX_NVIC_Init>:
* Function: MX_NVIC_Init													   	   *
* Description: Initialize the nested vector interrupt controller with configured   *
* 			   values.		 		   											   *
************************************************************************************/
VOID MX_NVIC_Init(VOID)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	af00      	add	r7, sp, #0
	/* TIM5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM5_IRQn, 10, 0);
 800e47c:	2200      	movs	r2, #0
 800e47e:	210a      	movs	r1, #10
 800e480:	2032      	movs	r0, #50	; 0x32
 800e482:	f7f6 fc72 	bl	8004d6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800e486:	2032      	movs	r0, #50	; 0x32
 800e488:	f7f6 fc8b 	bl	8004da2 <HAL_NVIC_EnableIRQ>
	/* RCC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RCC_IRQn, 15, 0);
 800e48c:	2200      	movs	r2, #0
 800e48e:	210f      	movs	r1, #15
 800e490:	2005      	movs	r0, #5
 800e492:	f7f6 fc6a 	bl	8004d6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 800e496:	2005      	movs	r0, #5
 800e498:	f7f6 fc83 	bl	8004da2 <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 800e49c:	2200      	movs	r2, #0
 800e49e:	210f      	movs	r1, #15
 800e4a0:	2012      	movs	r0, #18
 800e4a2:	f7f6 fc62 	bl	8004d6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 800e4a6:	2012      	movs	r0, #18
 800e4a8:	f7f6 fc7b 	bl	8004da2 <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	210f      	movs	r1, #15
 800e4b0:	201c      	movs	r0, #28
 800e4b2:	f7f6 fc5a 	bl	8004d6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800e4b6:	201c      	movs	r0, #28
 800e4b8:	f7f6 fc73 	bl	8004da2 <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 800e4bc:	2200      	movs	r2, #0
 800e4be:	210f      	movs	r1, #15
 800e4c0:	201d      	movs	r0, #29
 800e4c2:	f7f6 fc52 	bl	8004d6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800e4c6:	201d      	movs	r0, #29
 800e4c8:	f7f6 fc6b 	bl	8004da2 <HAL_NVIC_EnableIRQ>
	/* TIM4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	210f      	movs	r1, #15
 800e4d0:	201e      	movs	r0, #30
 800e4d2:	f7f6 fc4a 	bl	8004d6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800e4d6:	201e      	movs	r0, #30
 800e4d8:	f7f6 fc63 	bl	8004da2 <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 800e4dc:	2200      	movs	r2, #0
 800e4de:	210f      	movs	r1, #15
 800e4e0:	2025      	movs	r0, #37	; 0x25
 800e4e2:	f7f6 fc42 	bl	8004d6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e4e6:	2025      	movs	r0, #37	; 0x25
 800e4e8:	f7f6 fc5b 	bl	8004da2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 0);
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	210a      	movs	r1, #10
 800e4f0:	2038      	movs	r0, #56	; 0x38
 800e4f2:	f7f6 fc3a 	bl	8004d6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800e4f6:	2038      	movs	r0, #56	; 0x38
 800e4f8:	f7f6 fc53 	bl	8004da2 <HAL_NVIC_EnableIRQ>
}
 800e4fc:	bf00      	nop
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <SystemClock_Config>:
/***********************************************************************************
* Function: SystemClock_Config													   *
* Description: Initialize the system clock.		 		   						   *
************************************************************************************/
VOID SystemClock_Config(VOID)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b094      	sub	sp, #80	; 0x50
 800e504:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e506:	f107 0320 	add.w	r3, r7, #32
 800e50a:	2230      	movs	r2, #48	; 0x30
 800e50c:	2100      	movs	r1, #0
 800e50e:	4618      	mov	r0, r3
 800e510:	f000 f8ae 	bl	800e670 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e514:	f107 030c 	add.w	r3, r7, #12
 800e518:	2200      	movs	r2, #0
 800e51a:	601a      	str	r2, [r3, #0]
 800e51c:	605a      	str	r2, [r3, #4]
 800e51e:	609a      	str	r2, [r3, #8]
 800e520:	60da      	str	r2, [r3, #12]
 800e522:	611a      	str	r2, [r3, #16]
	__HAL_RCC_PWR_CLK_ENABLE();
 800e524:	2300      	movs	r3, #0
 800e526:	60bb      	str	r3, [r7, #8]
 800e528:	4b28      	ldr	r3, [pc, #160]	; (800e5cc <SystemClock_Config+0xcc>)
 800e52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e52c:	4a27      	ldr	r2, [pc, #156]	; (800e5cc <SystemClock_Config+0xcc>)
 800e52e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e532:	6413      	str	r3, [r2, #64]	; 0x40
 800e534:	4b25      	ldr	r3, [pc, #148]	; (800e5cc <SystemClock_Config+0xcc>)
 800e536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e53c:	60bb      	str	r3, [r7, #8]
 800e53e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e540:	2300      	movs	r3, #0
 800e542:	607b      	str	r3, [r7, #4]
 800e544:	4b22      	ldr	r3, [pc, #136]	; (800e5d0 <SystemClock_Config+0xd0>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4a21      	ldr	r2, [pc, #132]	; (800e5d0 <SystemClock_Config+0xd0>)
 800e54a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e54e:	6013      	str	r3, [r2, #0]
 800e550:	4b1f      	ldr	r3, [pc, #124]	; (800e5d0 <SystemClock_Config+0xd0>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e558:	607b      	str	r3, [r7, #4]
 800e55a:	687b      	ldr	r3, [r7, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800e55c:	2309      	movs	r3, #9
 800e55e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800e560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e564:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800e566:	2301      	movs	r3, #1
 800e568:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e56a:	2302      	movs	r3, #2
 800e56c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e56e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e572:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800e574:	2304      	movs	r3, #4
 800e576:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 800e578:	2364      	movs	r3, #100	; 0x64
 800e57a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e57c:	2302      	movs	r3, #2
 800e57e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800e580:	2304      	movs	r3, #4
 800e582:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e584:	f107 0320 	add.w	r3, r7, #32
 800e588:	4618      	mov	r0, r3
 800e58a:	f7f7 fc3f 	bl	8005e0c <HAL_RCC_OscConfig>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d001      	beq.n	800e598 <SystemClock_Config+0x98>
	{
		Error_Handler();
 800e594:	f000 f81e 	bl	800e5d4 <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800e598:	230f      	movs	r3, #15
 800e59a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e59c:	2302      	movs	r3, #2
 800e59e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800e5a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e5a8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	61fb      	str	r3, [r7, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800e5ae:	f107 030c 	add.w	r3, r7, #12
 800e5b2:	2103      	movs	r1, #3
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f7f7 fea1 	bl	80062fc <HAL_RCC_ClockConfig>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d001      	beq.n	800e5c4 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 800e5c0:	f000 f808 	bl	800e5d4 <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
}
 800e5c4:	bf00      	nop
 800e5c6:	3750      	adds	r7, #80	; 0x50
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	40023800 	.word	0x40023800
 800e5d0:	40007000 	.word	0x40007000

0800e5d4 <Error_Handler>:
/***********************************************************************************
* Function: Error_Handler													   	   *
* Description: Perform system reset in case of system fault.			 		   *
************************************************************************************/
VOID Error_Handler(VOID)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800e5d8:	b672      	cpsid	i
}
 800e5da:	bf00      	nop
	__disable_irq();
	SystemManager_PerformReset();
 800e5dc:	f7ff ff46 	bl	800e46c <SystemManager_PerformReset>
	while (1)
 800e5e0:	e7fe      	b.n	800e5e0 <Error_Handler+0xc>
	...

0800e5e4 <Watchdog_MainFunction>:
/***********************************************************************************
* Function: Watchdog_MainFunction									   		       *
* Description: Peripheral main function.							 		       *
************************************************************************************/
VOID Watchdog_MainFunction()
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 800e5e8:	4802      	ldr	r0, [pc, #8]	; (800e5f4 <Watchdog_MainFunction+0x10>)
 800e5ea:	f7f7 fbfe 	bl	8005dea <HAL_IWDG_Refresh>
}
 800e5ee:	bf00      	nop
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	20000290 	.word	0x20000290

0800e5f8 <atoi>:
 800e5f8:	220a      	movs	r2, #10
 800e5fa:	2100      	movs	r1, #0
 800e5fc:	f000 b978 	b.w	800e8f0 <strtol>

0800e600 <__errno>:
 800e600:	4b01      	ldr	r3, [pc, #4]	; (800e608 <__errno+0x8>)
 800e602:	6818      	ldr	r0, [r3, #0]
 800e604:	4770      	bx	lr
 800e606:	bf00      	nop
 800e608:	2000002c 	.word	0x2000002c

0800e60c <__libc_init_array>:
 800e60c:	b570      	push	{r4, r5, r6, lr}
 800e60e:	4d0d      	ldr	r5, [pc, #52]	; (800e644 <__libc_init_array+0x38>)
 800e610:	4c0d      	ldr	r4, [pc, #52]	; (800e648 <__libc_init_array+0x3c>)
 800e612:	1b64      	subs	r4, r4, r5
 800e614:	10a4      	asrs	r4, r4, #2
 800e616:	2600      	movs	r6, #0
 800e618:	42a6      	cmp	r6, r4
 800e61a:	d109      	bne.n	800e630 <__libc_init_array+0x24>
 800e61c:	4d0b      	ldr	r5, [pc, #44]	; (800e64c <__libc_init_array+0x40>)
 800e61e:	4c0c      	ldr	r4, [pc, #48]	; (800e650 <__libc_init_array+0x44>)
 800e620:	f000 f97c 	bl	800e91c <_init>
 800e624:	1b64      	subs	r4, r4, r5
 800e626:	10a4      	asrs	r4, r4, #2
 800e628:	2600      	movs	r6, #0
 800e62a:	42a6      	cmp	r6, r4
 800e62c:	d105      	bne.n	800e63a <__libc_init_array+0x2e>
 800e62e:	bd70      	pop	{r4, r5, r6, pc}
 800e630:	f855 3b04 	ldr.w	r3, [r5], #4
 800e634:	4798      	blx	r3
 800e636:	3601      	adds	r6, #1
 800e638:	e7ee      	b.n	800e618 <__libc_init_array+0xc>
 800e63a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e63e:	4798      	blx	r3
 800e640:	3601      	adds	r6, #1
 800e642:	e7f2      	b.n	800e62a <__libc_init_array+0x1e>
 800e644:	0800ef6c 	.word	0x0800ef6c
 800e648:	0800ef6c 	.word	0x0800ef6c
 800e64c:	0800ef6c 	.word	0x0800ef6c
 800e650:	0800ef70 	.word	0x0800ef70

0800e654 <memcpy>:
 800e654:	440a      	add	r2, r1
 800e656:	4291      	cmp	r1, r2
 800e658:	f100 33ff 	add.w	r3, r0, #4294967295
 800e65c:	d100      	bne.n	800e660 <memcpy+0xc>
 800e65e:	4770      	bx	lr
 800e660:	b510      	push	{r4, lr}
 800e662:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e66a:	4291      	cmp	r1, r2
 800e66c:	d1f9      	bne.n	800e662 <memcpy+0xe>
 800e66e:	bd10      	pop	{r4, pc}

0800e670 <memset>:
 800e670:	4402      	add	r2, r0
 800e672:	4603      	mov	r3, r0
 800e674:	4293      	cmp	r3, r2
 800e676:	d100      	bne.n	800e67a <memset+0xa>
 800e678:	4770      	bx	lr
 800e67a:	f803 1b01 	strb.w	r1, [r3], #1
 800e67e:	e7f9      	b.n	800e674 <memset+0x4>

0800e680 <_free_r>:
 800e680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e682:	2900      	cmp	r1, #0
 800e684:	d044      	beq.n	800e710 <_free_r+0x90>
 800e686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e68a:	9001      	str	r0, [sp, #4]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f1a1 0404 	sub.w	r4, r1, #4
 800e692:	bfb8      	it	lt
 800e694:	18e4      	addlt	r4, r4, r3
 800e696:	f000 f935 	bl	800e904 <__malloc_lock>
 800e69a:	4a1e      	ldr	r2, [pc, #120]	; (800e714 <_free_r+0x94>)
 800e69c:	9801      	ldr	r0, [sp, #4]
 800e69e:	6813      	ldr	r3, [r2, #0]
 800e6a0:	b933      	cbnz	r3, 800e6b0 <_free_r+0x30>
 800e6a2:	6063      	str	r3, [r4, #4]
 800e6a4:	6014      	str	r4, [r2, #0]
 800e6a6:	b003      	add	sp, #12
 800e6a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6ac:	f000 b930 	b.w	800e910 <__malloc_unlock>
 800e6b0:	42a3      	cmp	r3, r4
 800e6b2:	d908      	bls.n	800e6c6 <_free_r+0x46>
 800e6b4:	6825      	ldr	r5, [r4, #0]
 800e6b6:	1961      	adds	r1, r4, r5
 800e6b8:	428b      	cmp	r3, r1
 800e6ba:	bf01      	itttt	eq
 800e6bc:	6819      	ldreq	r1, [r3, #0]
 800e6be:	685b      	ldreq	r3, [r3, #4]
 800e6c0:	1949      	addeq	r1, r1, r5
 800e6c2:	6021      	streq	r1, [r4, #0]
 800e6c4:	e7ed      	b.n	800e6a2 <_free_r+0x22>
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	685b      	ldr	r3, [r3, #4]
 800e6ca:	b10b      	cbz	r3, 800e6d0 <_free_r+0x50>
 800e6cc:	42a3      	cmp	r3, r4
 800e6ce:	d9fa      	bls.n	800e6c6 <_free_r+0x46>
 800e6d0:	6811      	ldr	r1, [r2, #0]
 800e6d2:	1855      	adds	r5, r2, r1
 800e6d4:	42a5      	cmp	r5, r4
 800e6d6:	d10b      	bne.n	800e6f0 <_free_r+0x70>
 800e6d8:	6824      	ldr	r4, [r4, #0]
 800e6da:	4421      	add	r1, r4
 800e6dc:	1854      	adds	r4, r2, r1
 800e6de:	42a3      	cmp	r3, r4
 800e6e0:	6011      	str	r1, [r2, #0]
 800e6e2:	d1e0      	bne.n	800e6a6 <_free_r+0x26>
 800e6e4:	681c      	ldr	r4, [r3, #0]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	6053      	str	r3, [r2, #4]
 800e6ea:	4421      	add	r1, r4
 800e6ec:	6011      	str	r1, [r2, #0]
 800e6ee:	e7da      	b.n	800e6a6 <_free_r+0x26>
 800e6f0:	d902      	bls.n	800e6f8 <_free_r+0x78>
 800e6f2:	230c      	movs	r3, #12
 800e6f4:	6003      	str	r3, [r0, #0]
 800e6f6:	e7d6      	b.n	800e6a6 <_free_r+0x26>
 800e6f8:	6825      	ldr	r5, [r4, #0]
 800e6fa:	1961      	adds	r1, r4, r5
 800e6fc:	428b      	cmp	r3, r1
 800e6fe:	bf04      	itt	eq
 800e700:	6819      	ldreq	r1, [r3, #0]
 800e702:	685b      	ldreq	r3, [r3, #4]
 800e704:	6063      	str	r3, [r4, #4]
 800e706:	bf04      	itt	eq
 800e708:	1949      	addeq	r1, r1, r5
 800e70a:	6021      	streq	r1, [r4, #0]
 800e70c:	6054      	str	r4, [r2, #4]
 800e70e:	e7ca      	b.n	800e6a6 <_free_r+0x26>
 800e710:	b003      	add	sp, #12
 800e712:	bd30      	pop	{r4, r5, pc}
 800e714:	20008a30 	.word	0x20008a30

0800e718 <cleanup_glue>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	460c      	mov	r4, r1
 800e71c:	6809      	ldr	r1, [r1, #0]
 800e71e:	4605      	mov	r5, r0
 800e720:	b109      	cbz	r1, 800e726 <cleanup_glue+0xe>
 800e722:	f7ff fff9 	bl	800e718 <cleanup_glue>
 800e726:	4621      	mov	r1, r4
 800e728:	4628      	mov	r0, r5
 800e72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e72e:	f7ff bfa7 	b.w	800e680 <_free_r>
	...

0800e734 <_reclaim_reent>:
 800e734:	4b2c      	ldr	r3, [pc, #176]	; (800e7e8 <_reclaim_reent+0xb4>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4283      	cmp	r3, r0
 800e73a:	b570      	push	{r4, r5, r6, lr}
 800e73c:	4604      	mov	r4, r0
 800e73e:	d051      	beq.n	800e7e4 <_reclaim_reent+0xb0>
 800e740:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e742:	b143      	cbz	r3, 800e756 <_reclaim_reent+0x22>
 800e744:	68db      	ldr	r3, [r3, #12]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d14a      	bne.n	800e7e0 <_reclaim_reent+0xac>
 800e74a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e74c:	6819      	ldr	r1, [r3, #0]
 800e74e:	b111      	cbz	r1, 800e756 <_reclaim_reent+0x22>
 800e750:	4620      	mov	r0, r4
 800e752:	f7ff ff95 	bl	800e680 <_free_r>
 800e756:	6961      	ldr	r1, [r4, #20]
 800e758:	b111      	cbz	r1, 800e760 <_reclaim_reent+0x2c>
 800e75a:	4620      	mov	r0, r4
 800e75c:	f7ff ff90 	bl	800e680 <_free_r>
 800e760:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e762:	b111      	cbz	r1, 800e76a <_reclaim_reent+0x36>
 800e764:	4620      	mov	r0, r4
 800e766:	f7ff ff8b 	bl	800e680 <_free_r>
 800e76a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e76c:	b111      	cbz	r1, 800e774 <_reclaim_reent+0x40>
 800e76e:	4620      	mov	r0, r4
 800e770:	f7ff ff86 	bl	800e680 <_free_r>
 800e774:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e776:	b111      	cbz	r1, 800e77e <_reclaim_reent+0x4a>
 800e778:	4620      	mov	r0, r4
 800e77a:	f7ff ff81 	bl	800e680 <_free_r>
 800e77e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e780:	b111      	cbz	r1, 800e788 <_reclaim_reent+0x54>
 800e782:	4620      	mov	r0, r4
 800e784:	f7ff ff7c 	bl	800e680 <_free_r>
 800e788:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e78a:	b111      	cbz	r1, 800e792 <_reclaim_reent+0x5e>
 800e78c:	4620      	mov	r0, r4
 800e78e:	f7ff ff77 	bl	800e680 <_free_r>
 800e792:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e794:	b111      	cbz	r1, 800e79c <_reclaim_reent+0x68>
 800e796:	4620      	mov	r0, r4
 800e798:	f7ff ff72 	bl	800e680 <_free_r>
 800e79c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e79e:	b111      	cbz	r1, 800e7a6 <_reclaim_reent+0x72>
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	f7ff ff6d 	bl	800e680 <_free_r>
 800e7a6:	69a3      	ldr	r3, [r4, #24]
 800e7a8:	b1e3      	cbz	r3, 800e7e4 <_reclaim_reent+0xb0>
 800e7aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	4798      	blx	r3
 800e7b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e7b2:	b1b9      	cbz	r1, 800e7e4 <_reclaim_reent+0xb0>
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7ba:	f7ff bfad 	b.w	800e718 <cleanup_glue>
 800e7be:	5949      	ldr	r1, [r1, r5]
 800e7c0:	b941      	cbnz	r1, 800e7d4 <_reclaim_reent+0xa0>
 800e7c2:	3504      	adds	r5, #4
 800e7c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7c6:	2d80      	cmp	r5, #128	; 0x80
 800e7c8:	68d9      	ldr	r1, [r3, #12]
 800e7ca:	d1f8      	bne.n	800e7be <_reclaim_reent+0x8a>
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	f7ff ff57 	bl	800e680 <_free_r>
 800e7d2:	e7ba      	b.n	800e74a <_reclaim_reent+0x16>
 800e7d4:	680e      	ldr	r6, [r1, #0]
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	f7ff ff52 	bl	800e680 <_free_r>
 800e7dc:	4631      	mov	r1, r6
 800e7de:	e7ef      	b.n	800e7c0 <_reclaim_reent+0x8c>
 800e7e0:	2500      	movs	r5, #0
 800e7e2:	e7ef      	b.n	800e7c4 <_reclaim_reent+0x90>
 800e7e4:	bd70      	pop	{r4, r5, r6, pc}
 800e7e6:	bf00      	nop
 800e7e8:	2000002c 	.word	0x2000002c

0800e7ec <_strtol_l.constprop.0>:
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7f2:	d001      	beq.n	800e7f8 <_strtol_l.constprop.0+0xc>
 800e7f4:	2b24      	cmp	r3, #36	; 0x24
 800e7f6:	d906      	bls.n	800e806 <_strtol_l.constprop.0+0x1a>
 800e7f8:	f7ff ff02 	bl	800e600 <__errno>
 800e7fc:	2316      	movs	r3, #22
 800e7fe:	6003      	str	r3, [r0, #0]
 800e800:	2000      	movs	r0, #0
 800e802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e806:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e8ec <_strtol_l.constprop.0+0x100>
 800e80a:	460d      	mov	r5, r1
 800e80c:	462e      	mov	r6, r5
 800e80e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e812:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e816:	f017 0708 	ands.w	r7, r7, #8
 800e81a:	d1f7      	bne.n	800e80c <_strtol_l.constprop.0+0x20>
 800e81c:	2c2d      	cmp	r4, #45	; 0x2d
 800e81e:	d132      	bne.n	800e886 <_strtol_l.constprop.0+0x9a>
 800e820:	782c      	ldrb	r4, [r5, #0]
 800e822:	2701      	movs	r7, #1
 800e824:	1cb5      	adds	r5, r6, #2
 800e826:	2b00      	cmp	r3, #0
 800e828:	d05b      	beq.n	800e8e2 <_strtol_l.constprop.0+0xf6>
 800e82a:	2b10      	cmp	r3, #16
 800e82c:	d109      	bne.n	800e842 <_strtol_l.constprop.0+0x56>
 800e82e:	2c30      	cmp	r4, #48	; 0x30
 800e830:	d107      	bne.n	800e842 <_strtol_l.constprop.0+0x56>
 800e832:	782c      	ldrb	r4, [r5, #0]
 800e834:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e838:	2c58      	cmp	r4, #88	; 0x58
 800e83a:	d14d      	bne.n	800e8d8 <_strtol_l.constprop.0+0xec>
 800e83c:	786c      	ldrb	r4, [r5, #1]
 800e83e:	2310      	movs	r3, #16
 800e840:	3502      	adds	r5, #2
 800e842:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e846:	f108 38ff 	add.w	r8, r8, #4294967295
 800e84a:	f04f 0c00 	mov.w	ip, #0
 800e84e:	fbb8 f9f3 	udiv	r9, r8, r3
 800e852:	4666      	mov	r6, ip
 800e854:	fb03 8a19 	mls	sl, r3, r9, r8
 800e858:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e85c:	f1be 0f09 	cmp.w	lr, #9
 800e860:	d816      	bhi.n	800e890 <_strtol_l.constprop.0+0xa4>
 800e862:	4674      	mov	r4, lr
 800e864:	42a3      	cmp	r3, r4
 800e866:	dd24      	ble.n	800e8b2 <_strtol_l.constprop.0+0xc6>
 800e868:	f1bc 0f00 	cmp.w	ip, #0
 800e86c:	db1e      	blt.n	800e8ac <_strtol_l.constprop.0+0xc0>
 800e86e:	45b1      	cmp	r9, r6
 800e870:	d31c      	bcc.n	800e8ac <_strtol_l.constprop.0+0xc0>
 800e872:	d101      	bne.n	800e878 <_strtol_l.constprop.0+0x8c>
 800e874:	45a2      	cmp	sl, r4
 800e876:	db19      	blt.n	800e8ac <_strtol_l.constprop.0+0xc0>
 800e878:	fb06 4603 	mla	r6, r6, r3, r4
 800e87c:	f04f 0c01 	mov.w	ip, #1
 800e880:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e884:	e7e8      	b.n	800e858 <_strtol_l.constprop.0+0x6c>
 800e886:	2c2b      	cmp	r4, #43	; 0x2b
 800e888:	bf04      	itt	eq
 800e88a:	782c      	ldrbeq	r4, [r5, #0]
 800e88c:	1cb5      	addeq	r5, r6, #2
 800e88e:	e7ca      	b.n	800e826 <_strtol_l.constprop.0+0x3a>
 800e890:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e894:	f1be 0f19 	cmp.w	lr, #25
 800e898:	d801      	bhi.n	800e89e <_strtol_l.constprop.0+0xb2>
 800e89a:	3c37      	subs	r4, #55	; 0x37
 800e89c:	e7e2      	b.n	800e864 <_strtol_l.constprop.0+0x78>
 800e89e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e8a2:	f1be 0f19 	cmp.w	lr, #25
 800e8a6:	d804      	bhi.n	800e8b2 <_strtol_l.constprop.0+0xc6>
 800e8a8:	3c57      	subs	r4, #87	; 0x57
 800e8aa:	e7db      	b.n	800e864 <_strtol_l.constprop.0+0x78>
 800e8ac:	f04f 3cff 	mov.w	ip, #4294967295
 800e8b0:	e7e6      	b.n	800e880 <_strtol_l.constprop.0+0x94>
 800e8b2:	f1bc 0f00 	cmp.w	ip, #0
 800e8b6:	da05      	bge.n	800e8c4 <_strtol_l.constprop.0+0xd8>
 800e8b8:	2322      	movs	r3, #34	; 0x22
 800e8ba:	6003      	str	r3, [r0, #0]
 800e8bc:	4646      	mov	r6, r8
 800e8be:	b942      	cbnz	r2, 800e8d2 <_strtol_l.constprop.0+0xe6>
 800e8c0:	4630      	mov	r0, r6
 800e8c2:	e79e      	b.n	800e802 <_strtol_l.constprop.0+0x16>
 800e8c4:	b107      	cbz	r7, 800e8c8 <_strtol_l.constprop.0+0xdc>
 800e8c6:	4276      	negs	r6, r6
 800e8c8:	2a00      	cmp	r2, #0
 800e8ca:	d0f9      	beq.n	800e8c0 <_strtol_l.constprop.0+0xd4>
 800e8cc:	f1bc 0f00 	cmp.w	ip, #0
 800e8d0:	d000      	beq.n	800e8d4 <_strtol_l.constprop.0+0xe8>
 800e8d2:	1e69      	subs	r1, r5, #1
 800e8d4:	6011      	str	r1, [r2, #0]
 800e8d6:	e7f3      	b.n	800e8c0 <_strtol_l.constprop.0+0xd4>
 800e8d8:	2430      	movs	r4, #48	; 0x30
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d1b1      	bne.n	800e842 <_strtol_l.constprop.0+0x56>
 800e8de:	2308      	movs	r3, #8
 800e8e0:	e7af      	b.n	800e842 <_strtol_l.constprop.0+0x56>
 800e8e2:	2c30      	cmp	r4, #48	; 0x30
 800e8e4:	d0a5      	beq.n	800e832 <_strtol_l.constprop.0+0x46>
 800e8e6:	230a      	movs	r3, #10
 800e8e8:	e7ab      	b.n	800e842 <_strtol_l.constprop.0+0x56>
 800e8ea:	bf00      	nop
 800e8ec:	0800ee61 	.word	0x0800ee61

0800e8f0 <strtol>:
 800e8f0:	4613      	mov	r3, r2
 800e8f2:	460a      	mov	r2, r1
 800e8f4:	4601      	mov	r1, r0
 800e8f6:	4802      	ldr	r0, [pc, #8]	; (800e900 <strtol+0x10>)
 800e8f8:	6800      	ldr	r0, [r0, #0]
 800e8fa:	f7ff bf77 	b.w	800e7ec <_strtol_l.constprop.0>
 800e8fe:	bf00      	nop
 800e900:	2000002c 	.word	0x2000002c

0800e904 <__malloc_lock>:
 800e904:	4801      	ldr	r0, [pc, #4]	; (800e90c <__malloc_lock+0x8>)
 800e906:	f7f5 b910 	b.w	8003b2a <__retarget_lock_acquire_recursive>
 800e90a:	bf00      	nop
 800e90c:	20000694 	.word	0x20000694

0800e910 <__malloc_unlock>:
 800e910:	4801      	ldr	r0, [pc, #4]	; (800e918 <__malloc_unlock+0x8>)
 800e912:	f7f5 b91e 	b.w	8003b52 <__retarget_lock_release_recursive>
 800e916:	bf00      	nop
 800e918:	20000694 	.word	0x20000694

0800e91c <_init>:
 800e91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e91e:	bf00      	nop
 800e920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e922:	bc08      	pop	{r3}
 800e924:	469e      	mov	lr, r3
 800e926:	4770      	bx	lr

0800e928 <_fini>:
 800e928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e92a:	bf00      	nop
 800e92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e92e:	bc08      	pop	{r3}
 800e930:	469e      	mov	lr, r3
 800e932:	4770      	bx	lr
