
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e30  0800c160  0800c160  0001c160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf90  0800cf90  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf90  0800cf90  0001cf90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf98  0800cf98  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf98  0800cf98  0001cf98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf9c  0800cf9c  0001cf9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800cfa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b43c  20000074  0800d014  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b4b0  0800d014  0002b4b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e83e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000067d3  00000000  00000000  0004e8e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025e8  00000000  00000000  000550b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002338  00000000  00000000  000576a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eff1  00000000  00000000  000599d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032b89  00000000  00000000  000789c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4824  00000000  00000000  000ab552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015fd76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fac  00000000  00000000  0015fdc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c148 	.word	0x0800c148

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800c148 	.word	0x0800c148

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <CenLoc_MainFunction>:
uint8 PreviousState_CenLoc;
uint8 ExtLights_UnlockedState;
uint8 ExtLights_LockedState;

void CenLoc_MainFunction()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	if(CurrentState_CenLoc == STD_HIGH)
 80004e8:	4b95      	ldr	r3, [pc, #596]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d102      	bne.n	80004f6 <CenLoc_MainFunction+0x12>
	{
		SecAlmTrigger = STD_LOW;
 80004f0:	4b94      	ldr	r3, [pc, #592]	; (8000744 <CenLoc_MainFunction+0x260>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(PreviousState_CenLoc != CurrentState_CenLoc)
 80004f6:	4b94      	ldr	r3, [pc, #592]	; (8000748 <CenLoc_MainFunction+0x264>)
 80004f8:	781a      	ldrb	r2, [r3, #0]
 80004fa:	4b91      	ldr	r3, [pc, #580]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d027      	beq.n	8000552 <CenLoc_MainFunction+0x6e>
	{
		ExtLights_LockedState = PreviousState_CenLoc;
 8000502:	4b91      	ldr	r3, [pc, #580]	; (8000748 <CenLoc_MainFunction+0x264>)
 8000504:	781a      	ldrb	r2, [r3, #0]
 8000506:	4b91      	ldr	r3, [pc, #580]	; (800074c <CenLoc_MainFunction+0x268>)
 8000508:	701a      	strb	r2, [r3, #0]
		ExtLights_UnlockedState = CurrentState_CenLoc;
 800050a:	4b8d      	ldr	r3, [pc, #564]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800050c:	781a      	ldrb	r2, [r3, #0]
 800050e:	4b90      	ldr	r3, [pc, #576]	; (8000750 <CenLoc_MainFunction+0x26c>)
 8000510:	701a      	strb	r2, [r3, #0]
		PreviousState_CenLoc = CurrentState_CenLoc;
 8000512:	4b8b      	ldr	r3, [pc, #556]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000514:	781a      	ldrb	r2, [r3, #0]
 8000516:	4b8c      	ldr	r3, [pc, #560]	; (8000748 <CenLoc_MainFunction+0x264>)
 8000518:	701a      	strb	r2, [r3, #0]
		BTCenLoc_LockUnlockFlag = !CurrentState_CenLoc;
 800051a:	4b89      	ldr	r3, [pc, #548]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	bf0c      	ite	eq
 8000522:	2301      	moveq	r3, #1
 8000524:	2300      	movne	r3, #0
 8000526:	b2db      	uxtb	r3, r3
 8000528:	461a      	mov	r2, r3
 800052a:	4b8a      	ldr	r3, [pc, #552]	; (8000754 <CenLoc_MainFunction+0x270>)
 800052c:	701a      	strb	r2, [r3, #0]
		LockCounter = STD_LOW;
 800052e:	4b8a      	ldr	r3, [pc, #552]	; (8000758 <CenLoc_MainFunction+0x274>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
		UnlockCounter = STD_LOW;
 8000534:	4b89      	ldr	r3, [pc, #548]	; (800075c <CenLoc_MainFunction+0x278>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
		SecAlmCounter = STD_LOW;
 800053a:	4b89      	ldr	r3, [pc, #548]	; (8000760 <CenLoc_MainFunction+0x27c>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]

		HAL_TIM_Base_Init(&htim2);
 8000540:	4888      	ldr	r0, [pc, #544]	; (8000764 <CenLoc_MainFunction+0x280>)
 8000542:	f007 f9ff 	bl	8007944 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim3);
 8000546:	4888      	ldr	r0, [pc, #544]	; (8000768 <CenLoc_MainFunction+0x284>)
 8000548:	f007 f9fc 	bl	8007944 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim5);
 800054c:	4887      	ldr	r0, [pc, #540]	; (800076c <CenLoc_MainFunction+0x288>)
 800054e:	f007 f9f9 	bl	8007944 <HAL_TIM_Base_Init>
	else
	{
		/* do nothing */
	}

	if(CurrentState_CenLoc == STD_HIGH && SecAlmTrigger == STD_LOW)
 8000552:	4b7b      	ldr	r3, [pc, #492]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b01      	cmp	r3, #1
 8000558:	f040 810e 	bne.w	8000778 <CenLoc_MainFunction+0x294>
 800055c:	4b79      	ldr	r3, [pc, #484]	; (8000744 <CenLoc_MainFunction+0x260>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	f040 8109 	bne.w	8000778 <CenLoc_MainFunction+0x294>
	{
		HAL_TIM_Base_Stop(&htim3);
 8000566:	4880      	ldr	r0, [pc, #512]	; (8000768 <CenLoc_MainFunction+0x284>)
 8000568:	f007 faa2 	bl	8007ab0 <HAL_TIM_Base_Stop>
		BTCenLoc = STD_HIGH;
 800056c:	4b80      	ldr	r3, [pc, #512]	; (8000770 <CenLoc_MainFunction+0x28c>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]

		IntLights_Toggle_IntLights(CurrentState_CenLoc);
 8000572:	4b73      	ldr	r3, [pc, #460]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fe24 	bl	80011c4 <IntLights_Toggle_IntLights>
		CenLoc_Toggle_Door_LED(CurrentState_CenLoc);
 800057c:	4b70      	ldr	r3, [pc, #448]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4618      	mov	r0, r3
 8000582:	f000 fa4b 	bl	8000a1c <CenLoc_Toggle_Door_LED>
		SecAlm_ToggleAlarmLed(!CurrentState_CenLoc);
 8000586:	4b6e      	ldr	r3, [pc, #440]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf0c      	ite	eq
 800058e:	2301      	moveq	r3, #1
 8000590:	2300      	movne	r3, #0
 8000592:	b2db      	uxtb	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f000 ff1f 	bl	80013d8 <SecAlm_ToggleAlarmLed>

		if(ExtLights_UnlockedState == 1 && ExtLights_LockedState == 0)
 800059a:	4b6d      	ldr	r3, [pc, #436]	; (8000750 <CenLoc_MainFunction+0x26c>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d143      	bne.n	800062a <CenLoc_MainFunction+0x146>
 80005a2:	4b6a      	ldr	r3, [pc, #424]	; (800074c <CenLoc_MainFunction+0x268>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d13f      	bne.n	800062a <CenLoc_MainFunction+0x146>
		{
			HAL_TIM_Base_Start(&htim5);
 80005aa:	4870      	ldr	r0, [pc, #448]	; (800076c <CenLoc_MainFunction+0x288>)
 80005ac:	f007 fa26 	bl	80079fc <HAL_TIM_Base_Start>
			if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 80005b0:	4b6e      	ldr	r3, [pc, #440]	; (800076c <CenLoc_MainFunction+0x288>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005b6:	4a6f      	ldr	r2, [pc, #444]	; (8000774 <CenLoc_MainFunction+0x290>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d80f      	bhi.n	80005dc <CenLoc_MainFunction+0xf8>
			{
				ExtLights_FogLightFront(CurrentState_CenLoc);
 80005bc:	4b60      	ldr	r3, [pc, #384]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fd53 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_LowBeam(CurrentState_CenLoc);
 80005c6:	4b5e      	ldr	r3, [pc, #376]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fd2a 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(CurrentState_CenLoc);
 80005d0:	4b5b      	ldr	r3, [pc, #364]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fd91 	bl	80010fc <ExtLights_PositionLightRear>
 80005da:	e026      	b.n	800062a <CenLoc_MainFunction+0x146>
			}
			else
			{
				ExtLights_FogLightFront(!CurrentState_CenLoc);
 80005dc:	4b58      	ldr	r3, [pc, #352]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	bf0c      	ite	eq
 80005e4:	2301      	moveq	r3, #1
 80005e6:	2300      	movne	r3, #0
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fd3e 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_LowBeam(!CurrentState_CenLoc);
 80005f0:	4b53      	ldr	r3, [pc, #332]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf0c      	ite	eq
 80005f8:	2301      	moveq	r3, #1
 80005fa:	2300      	movne	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fd10 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(!CurrentState_CenLoc);
 8000604:	4b4e      	ldr	r3, [pc, #312]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	bf0c      	ite	eq
 800060c:	2301      	moveq	r3, #1
 800060e:	2300      	movne	r3, #0
 8000610:	b2db      	uxtb	r3, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fd72 	bl	80010fc <ExtLights_PositionLightRear>

				ExtLights_UnlockedState = 0;
 8000618:	4b4d      	ldr	r3, [pc, #308]	; (8000750 <CenLoc_MainFunction+0x26c>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
				ExtLights_LockedState = 1;
 800061e:	4b4b      	ldr	r3, [pc, #300]	; (800074c <CenLoc_MainFunction+0x268>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]

				HAL_TIM_Base_Stop(&htim5);
 8000624:	4851      	ldr	r0, [pc, #324]	; (800076c <CenLoc_MainFunction+0x288>)
 8000626:	f007 fa43 	bl	8007ab0 <HAL_TIM_Base_Stop>
		else
		{
			/* do nothing */
		}

		if(LockCounter < 4)
 800062a:	4b4b      	ldr	r3, [pc, #300]	; (8000758 <CenLoc_MainFunction+0x274>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b03      	cmp	r3, #3
 8000630:	d87b      	bhi.n	800072a <CenLoc_MainFunction+0x246>
		{
			HAL_TIM_Base_Start(&htim2);
 8000632:	484c      	ldr	r0, [pc, #304]	; (8000764 <CenLoc_MainFunction+0x280>)
 8000634:	f007 f9e2 	bl	80079fc <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000638:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <CenLoc_MainFunction+0x280>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800063e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000642:	4293      	cmp	r3, r2
 8000644:	d80a      	bhi.n	800065c <CenLoc_MainFunction+0x178>
			{
				ExtLights_TurnSignalLeft(CurrentState_CenLoc);
 8000646:	4b3e      	ldr	r3, [pc, #248]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fd32 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(CurrentState_CenLoc);
 8000650:	4b3b      	ldr	r3, [pc, #236]	; (8000740 <CenLoc_MainFunction+0x25c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fd3f 	bl	80010d8 <ExtLights_TurnSignalRight>
		if(LockCounter < 4)
 800065a:	e19c      	b.n	8000996 <CenLoc_MainFunction+0x4b2>
			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 800065c:	4b41      	ldr	r3, [pc, #260]	; (8000764 <CenLoc_MainFunction+0x280>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000662:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000666:	4293      	cmp	r3, r2
 8000668:	d91b      	bls.n	80006a2 <CenLoc_MainFunction+0x1be>
 800066a:	4b3e      	ldr	r3, [pc, #248]	; (8000764 <CenLoc_MainFunction+0x280>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000670:	f241 3287 	movw	r2, #4999	; 0x1387
 8000674:	4293      	cmp	r3, r2
 8000676:	d814      	bhi.n	80006a2 <CenLoc_MainFunction+0x1be>
			{
				ExtLights_TurnSignalLeft(!CurrentState_CenLoc);
 8000678:	4b31      	ldr	r3, [pc, #196]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	bf0c      	ite	eq
 8000680:	2301      	moveq	r3, #1
 8000682:	2300      	movne	r3, #0
 8000684:	b2db      	uxtb	r3, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fd14 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(!CurrentState_CenLoc);
 800068c:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	bf0c      	ite	eq
 8000694:	2301      	moveq	r3, #1
 8000696:	2300      	movne	r3, #0
 8000698:	b2db      	uxtb	r3, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fd1c 	bl	80010d8 <ExtLights_TurnSignalRight>
 80006a0:	e04c      	b.n	800073c <CenLoc_MainFunction+0x258>
			}
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80006a2:	4b30      	ldr	r3, [pc, #192]	; (8000764 <CenLoc_MainFunction+0x280>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d911      	bls.n	80006d4 <CenLoc_MainFunction+0x1f0>
 80006b0:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <CenLoc_MainFunction+0x280>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b6:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d80a      	bhi.n	80006d4 <CenLoc_MainFunction+0x1f0>
			{
				ExtLights_TurnSignalLeft(CurrentState_CenLoc);
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fcf6 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(CurrentState_CenLoc);
 80006c8:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fd03 	bl	80010d8 <ExtLights_TurnSignalRight>
 80006d2:	e033      	b.n	800073c <CenLoc_MainFunction+0x258>
			}
			else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <CenLoc_MainFunction+0x280>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006da:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80006de:	4293      	cmp	r3, r2
 80006e0:	f240 8159 	bls.w	8000996 <CenLoc_MainFunction+0x4b2>
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <CenLoc_MainFunction+0x280>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80006ee:	4293      	cmp	r3, r2
 80006f0:	f200 8151 	bhi.w	8000996 <CenLoc_MainFunction+0x4b2>
			{
				ExtLights_TurnSignalLeft(!CurrentState_CenLoc);
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <CenLoc_MainFunction+0x25c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	bf0c      	ite	eq
 80006fc:	2301      	moveq	r3, #1
 80006fe:	2300      	movne	r3, #0
 8000700:	b2db      	uxtb	r3, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fcd6 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(!CurrentState_CenLoc);
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <CenLoc_MainFunction+0x25c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	bf0c      	ite	eq
 8000710:	2301      	moveq	r3, #1
 8000712:	2300      	movne	r3, #0
 8000714:	b2db      	uxtb	r3, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fcde 	bl	80010d8 <ExtLights_TurnSignalRight>

				LockCounter++;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <CenLoc_MainFunction+0x274>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <CenLoc_MainFunction+0x274>)
 8000726:	701a      	strb	r2, [r3, #0]
		if(LockCounter < 4)
 8000728:	e135      	b.n	8000996 <CenLoc_MainFunction+0x4b2>
			else
			{
				/* do nothing */
			}
		}
		else if(LockCounter >= 4)
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <CenLoc_MainFunction+0x274>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b03      	cmp	r3, #3
 8000730:	f240 8131 	bls.w	8000996 <CenLoc_MainFunction+0x4b2>
		{
			HAL_TIM_Base_Stop(&htim2);
 8000734:	480b      	ldr	r0, [pc, #44]	; (8000764 <CenLoc_MainFunction+0x280>)
 8000736:	f007 f9bb 	bl	8007ab0 <HAL_TIM_Base_Stop>
		if(LockCounter < 4)
 800073a:	e12c      	b.n	8000996 <CenLoc_MainFunction+0x4b2>
 800073c:	e12b      	b.n	8000996 <CenLoc_MainFunction+0x4b2>
 800073e:	bf00      	nop
 8000740:	20000090 	.word	0x20000090
 8000744:	200000b0 	.word	0x200000b0
 8000748:	20000093 	.word	0x20000093
 800074c:	20000095 	.word	0x20000095
 8000750:	20000094 	.word	0x20000094
 8000754:	20000092 	.word	0x20000092
 8000758:	200000ae 	.word	0x200000ae
 800075c:	200000af 	.word	0x200000af
 8000760:	200000b1 	.word	0x200000b1
 8000764:	200004bc 	.word	0x200004bc
 8000768:	20000570 	.word	0x20000570
 800076c:	200006d8 	.word	0x200006d8
 8000770:	20000091 	.word	0x20000091
 8000774:	0001869f 	.word	0x0001869f
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_CenLoc == STD_LOW && SecAlmTrigger == STD_LOW)
 8000778:	4b89      	ldr	r3, [pc, #548]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	f040 810d 	bne.w	800099c <CenLoc_MainFunction+0x4b8>
 8000782:	4b88      	ldr	r3, [pc, #544]	; (80009a4 <CenLoc_MainFunction+0x4c0>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	f040 8108 	bne.w	800099c <CenLoc_MainFunction+0x4b8>
	{
		BTCenLoc = STD_LOW;
 800078c:	4b86      	ldr	r3, [pc, #536]	; (80009a8 <CenLoc_MainFunction+0x4c4>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
		IntLights_Toggle_IntLights(CurrentState_CenLoc);
 8000792:	4b83      	ldr	r3, [pc, #524]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fd14 	bl	80011c4 <IntLights_Toggle_IntLights>
		CenLoc_Toggle_Door_LED(CurrentState_CenLoc);
 800079c:	4b80      	ldr	r3, [pc, #512]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f93b 	bl	8000a1c <CenLoc_Toggle_Door_LED>

		HAL_TIM_Base_Start(&htim3);
 80007a6:	4881      	ldr	r0, [pc, #516]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 80007a8:	f007 f928 	bl	80079fc <HAL_TIM_Base_Start>

		if(ExtLights_UnlockedState == 0 && ExtLights_LockedState == 1)
 80007ac:	4b80      	ldr	r3, [pc, #512]	; (80009b0 <CenLoc_MainFunction+0x4cc>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d149      	bne.n	8000848 <CenLoc_MainFunction+0x364>
 80007b4:	4b7f      	ldr	r3, [pc, #508]	; (80009b4 <CenLoc_MainFunction+0x4d0>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d145      	bne.n	8000848 <CenLoc_MainFunction+0x364>
		{
			HAL_TIM_Base_Start(&htim5);
 80007bc:	487e      	ldr	r0, [pc, #504]	; (80009b8 <CenLoc_MainFunction+0x4d4>)
 80007be:	f007 f91d 	bl	80079fc <HAL_TIM_Base_Start>
			if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 80007c2:	4b7d      	ldr	r3, [pc, #500]	; (80009b8 <CenLoc_MainFunction+0x4d4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c8:	4a7c      	ldr	r2, [pc, #496]	; (80009bc <CenLoc_MainFunction+0x4d8>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d81e      	bhi.n	800080c <CenLoc_MainFunction+0x328>
			{
				ExtLights_FogLightFront(!CurrentState_CenLoc);
 80007ce:	4b74      	ldr	r3, [pc, #464]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	bf0c      	ite	eq
 80007d6:	2301      	moveq	r3, #1
 80007d8:	2300      	movne	r3, #0
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fc45 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_LowBeam(!CurrentState_CenLoc);
 80007e2:	4b6f      	ldr	r3, [pc, #444]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	bf0c      	ite	eq
 80007ea:	2301      	moveq	r3, #1
 80007ec:	2300      	movne	r3, #0
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fc17 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(!CurrentState_CenLoc);
 80007f6:	4b6a      	ldr	r3, [pc, #424]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf0c      	ite	eq
 80007fe:	2301      	moveq	r3, #1
 8000800:	2300      	movne	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f000 fc79 	bl	80010fc <ExtLights_PositionLightRear>
 800080a:	e01d      	b.n	8000848 <CenLoc_MainFunction+0x364>
			}
			else if(__HAL_TIM_GET_COUNTER(&htim5) > 100000)
 800080c:	4b6a      	ldr	r3, [pc, #424]	; (80009b8 <CenLoc_MainFunction+0x4d4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000812:	4a6b      	ldr	r2, [pc, #428]	; (80009c0 <CenLoc_MainFunction+0x4dc>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d917      	bls.n	8000848 <CenLoc_MainFunction+0x364>
			{
				ExtLights_FogLightFront(CurrentState_CenLoc);
 8000818:	4b61      	ldr	r3, [pc, #388]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fc25 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_LowBeam(CurrentState_CenLoc);
 8000822:	4b5f      	ldr	r3, [pc, #380]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fbfc 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(CurrentState_CenLoc);
 800082c:	4b5c      	ldr	r3, [pc, #368]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fc63 	bl	80010fc <ExtLights_PositionLightRear>

				ExtLights_UnlockedState = 1;
 8000836:	4b5e      	ldr	r3, [pc, #376]	; (80009b0 <CenLoc_MainFunction+0x4cc>)
 8000838:	2201      	movs	r2, #1
 800083a:	701a      	strb	r2, [r3, #0]
				ExtLights_LockedState = 0;
 800083c:	4b5d      	ldr	r3, [pc, #372]	; (80009b4 <CenLoc_MainFunction+0x4d0>)
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]

				HAL_TIM_Base_Stop(&htim5);
 8000842:	485d      	ldr	r0, [pc, #372]	; (80009b8 <CenLoc_MainFunction+0x4d4>)
 8000844:	f007 f934 	bl	8007ab0 <HAL_TIM_Base_Stop>
		else
		{
			/* do nothing */
		}

		if(40000 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 41250)
 8000848:	4b58      	ldr	r3, [pc, #352]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000852:	4293      	cmp	r3, r2
 8000854:	d911      	bls.n	800087a <CenLoc_MainFunction+0x396>
 8000856:	4b55      	ldr	r3, [pc, #340]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085c:	f24a 1221 	movw	r2, #41249	; 0xa121
 8000860:	4293      	cmp	r3, r2
 8000862:	d80a      	bhi.n	800087a <CenLoc_MainFunction+0x396>
		{
			SecAlm_ToggleAlarmLed(!CurrentState_CenLoc);
 8000864:	4b4e      	ldr	r3, [pc, #312]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	bf0c      	ite	eq
 800086c:	2301      	moveq	r3, #1
 800086e:	2300      	movne	r3, #0
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f000 fdb0 	bl	80013d8 <SecAlm_ToggleAlarmLed>
 8000878:	e03f      	b.n	80008fa <CenLoc_MainFunction+0x416>
		}
		else if(41250 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 42500)
 800087a:	4b4c      	ldr	r3, [pc, #304]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000880:	f24a 1222 	movw	r2, #41250	; 0xa122
 8000884:	4293      	cmp	r3, r2
 8000886:	d90c      	bls.n	80008a2 <CenLoc_MainFunction+0x3be>
 8000888:	4b48      	ldr	r3, [pc, #288]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088e:	f24a 6203 	movw	r2, #42499	; 0xa603
 8000892:	4293      	cmp	r3, r2
 8000894:	d805      	bhi.n	80008a2 <CenLoc_MainFunction+0x3be>
		{
			SecAlm_ToggleAlarmLed(CurrentState_CenLoc);
 8000896:	4b42      	ldr	r3, [pc, #264]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fd9c 	bl	80013d8 <SecAlm_ToggleAlarmLed>
 80008a0:	e02b      	b.n	80008fa <CenLoc_MainFunction+0x416>
		}
		else if(42500 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 43750)
 80008a2:	4b42      	ldr	r3, [pc, #264]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a8:	f24a 6204 	movw	r2, #42500	; 0xa604
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d911      	bls.n	80008d4 <CenLoc_MainFunction+0x3f0>
 80008b0:	4b3e      	ldr	r3, [pc, #248]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	f64a 22e5 	movw	r2, #43749	; 0xaae5
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d80a      	bhi.n	80008d4 <CenLoc_MainFunction+0x3f0>
		{
			SecAlm_ToggleAlarmLed(!CurrentState_CenLoc);
 80008be:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	bf0c      	ite	eq
 80008c6:	2301      	moveq	r3, #1
 80008c8:	2300      	movne	r3, #0
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fd83 	bl	80013d8 <SecAlm_ToggleAlarmLed>
 80008d2:	e012      	b.n	80008fa <CenLoc_MainFunction+0x416>
		}
		else if(43750 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 45000)
 80008d4:	4b35      	ldr	r3, [pc, #212]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008da:	f64a 22e6 	movw	r2, #43750	; 0xaae6
 80008de:	4293      	cmp	r3, r2
 80008e0:	d90b      	bls.n	80008fa <CenLoc_MainFunction+0x416>
 80008e2:	4b32      	ldr	r3, [pc, #200]	; (80009ac <CenLoc_MainFunction+0x4c8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e8:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d804      	bhi.n	80008fa <CenLoc_MainFunction+0x416>
		{
			SecAlm_ToggleAlarmLed(CurrentState_CenLoc);
 80008f0:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fd6f 	bl	80013d8 <SecAlm_ToggleAlarmLed>
		else
		{
			/* do nothing */
		}

		if(UnlockCounter < 2 && BTCenLoc_LockUnlockFlag == STD_HIGH)
 80008fa:	4b32      	ldr	r3, [pc, #200]	; (80009c4 <CenLoc_MainFunction+0x4e0>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d841      	bhi.n	8000986 <CenLoc_MainFunction+0x4a2>
 8000902:	4b31      	ldr	r3, [pc, #196]	; (80009c8 <CenLoc_MainFunction+0x4e4>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d13d      	bne.n	8000986 <CenLoc_MainFunction+0x4a2>
		{
			HAL_TIM_Base_Start(&htim2);
 800090a:	4830      	ldr	r0, [pc, #192]	; (80009cc <CenLoc_MainFunction+0x4e8>)
 800090c:	f007 f876 	bl	80079fc <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000910:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <CenLoc_MainFunction+0x4e8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000916:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800091a:	4293      	cmp	r3, r2
 800091c:	d814      	bhi.n	8000948 <CenLoc_MainFunction+0x464>
			{
				ExtLights_TurnSignalLeft(!CurrentState_CenLoc);
 800091e:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	bf0c      	ite	eq
 8000926:	2301      	moveq	r3, #1
 8000928:	2300      	movne	r3, #0
 800092a:	b2db      	uxtb	r3, r3
 800092c:	4618      	mov	r0, r3
 800092e:	f000 fbc1 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(!CurrentState_CenLoc);
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf0c      	ite	eq
 800093a:	2301      	moveq	r3, #1
 800093c:	2300      	movne	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fbc9 	bl	80010d8 <ExtLights_TurnSignalRight>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000946:	e028      	b.n	800099a <CenLoc_MainFunction+0x4b6>
			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <CenLoc_MainFunction+0x4e8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000952:	4293      	cmp	r3, r2
 8000954:	d921      	bls.n	800099a <CenLoc_MainFunction+0x4b6>
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <CenLoc_MainFunction+0x4e8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000960:	4293      	cmp	r3, r2
 8000962:	d81a      	bhi.n	800099a <CenLoc_MainFunction+0x4b6>
			{
				ExtLights_TurnSignalLeft(CurrentState_CenLoc);
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fba3 	bl	80010b4 <ExtLights_TurnSignalLeft>
				ExtLights_TurnSignalRight(CurrentState_CenLoc);
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <CenLoc_MainFunction+0x4bc>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fbb0 	bl	80010d8 <ExtLights_TurnSignalRight>

				UnlockCounter++;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <CenLoc_MainFunction+0x4e0>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <CenLoc_MainFunction+0x4e0>)
 8000982:	701a      	strb	r2, [r3, #0]
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000984:	e009      	b.n	800099a <CenLoc_MainFunction+0x4b6>
			else
			{
				/* do nothing */
			}
		}
		else if(UnlockCounter >= 2)
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <CenLoc_MainFunction+0x4e0>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d906      	bls.n	800099c <CenLoc_MainFunction+0x4b8>
		{
			HAL_TIM_Base_Stop(&htim2);
 800098e:	480f      	ldr	r0, [pc, #60]	; (80009cc <CenLoc_MainFunction+0x4e8>)
 8000990:	f007 f88e 	bl	8007ab0 <HAL_TIM_Base_Stop>
	}
	else
	{
		/* do nothing */
	}
}
 8000994:	e002      	b.n	800099c <CenLoc_MainFunction+0x4b8>
		if(LockCounter < 4)
 8000996:	bf00      	nop
 8000998:	e000      	b.n	800099c <CenLoc_MainFunction+0x4b8>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 800099a:	bf00      	nop
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000090 	.word	0x20000090
 80009a4:	200000b0 	.word	0x200000b0
 80009a8:	20000091 	.word	0x20000091
 80009ac:	20000570 	.word	0x20000570
 80009b0:	20000094 	.word	0x20000094
 80009b4:	20000095 	.word	0x20000095
 80009b8:	200006d8 	.word	0x200006d8
 80009bc:	0001869f 	.word	0x0001869f
 80009c0:	000186a0 	.word	0x000186a0
 80009c4:	200000af 	.word	0x200000af
 80009c8:	20000092 	.word	0x20000092
 80009cc:	200004bc 	.word	0x200004bc

080009d0 <CenLoc_Init>:

StdReturnType CenLoc_Init()
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
	CurrentState_CenLoc = STD_LOW;
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <CenLoc_Init+0x34>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
	BTCenLoc = STD_LOW;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <CenLoc_Init+0x38>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
	BTCenLoc_LockUnlockFlag = STD_LOW;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <CenLoc_Init+0x3c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
	PreviousState_CenLoc = STD_LOW;
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <CenLoc_Init+0x40>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
	ExtLights_UnlockedState = STD_LOW;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <CenLoc_Init+0x44>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
	ExtLights_LockedState = STD_LOW;
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <CenLoc_Init+0x48>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]

	return E_OK;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	20000090 	.word	0x20000090
 8000a08:	20000091 	.word	0x20000091
 8000a0c:	20000092 	.word	0x20000092
 8000a10:	20000093 	.word	0x20000093
 8000a14:	20000094 	.word	0x20000094
 8000a18:	20000095 	.word	0x20000095

08000a1c <CenLoc_Toggle_Door_LED>:

void CenLoc_Toggle_Door_LED(uint8 PinState)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DOOR_LED_PORT, DOOR_LED_PIN, PinState);
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2140      	movs	r1, #64	; 0x40
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <CenLoc_Toggle_Door_LED+0x20>)
 8000a2e:	f003 fca9 	bl	8004384 <HAL_GPIO_WritePin>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40020400 	.word	0x40020400

08000a40 <ExtLights_MainFunction>:
uint8_t BTHazardLight;
uint8_t BTExtLight_IrqFlag;


void ExtLights_MainFunction()
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	if(BTLowBeam == STD_HIGH)
 8000a44:	4b86      	ldr	r3, [pc, #536]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d104      	bne.n	8000a56 <ExtLights_MainFunction+0x16>
	{
		CurrentState_LowBeam = BTLowBeam;
 8000a4c:	4b84      	ldr	r3, [pc, #528]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a4e:	781a      	ldrb	r2, [r3, #0]
 8000a50:	4b84      	ldr	r3, [pc, #528]	; (8000c64 <ExtLights_MainFunction+0x224>)
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	e007      	b.n	8000a66 <ExtLights_MainFunction+0x26>
	}
	else if(BTLowBeam == STD_LOW)
 8000a56:	4b82      	ldr	r3, [pc, #520]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d103      	bne.n	8000a66 <ExtLights_MainFunction+0x26>
	{
		CurrentState_LowBeam = BTLowBeam;
 8000a5e:	4b80      	ldr	r3, [pc, #512]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	4b80      	ldr	r3, [pc, #512]	; (8000c64 <ExtLights_MainFunction+0x224>)
 8000a64:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTHighBeam == STD_HIGH)
 8000a66:	4b80      	ldr	r3, [pc, #512]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d104      	bne.n	8000a78 <ExtLights_MainFunction+0x38>
	{
		CurrentState_HighBeam = BTLowBeam;
 8000a6e:	4b7c      	ldr	r3, [pc, #496]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a70:	781a      	ldrb	r2, [r3, #0]
 8000a72:	4b7e      	ldr	r3, [pc, #504]	; (8000c6c <ExtLights_MainFunction+0x22c>)
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	e007      	b.n	8000a88 <ExtLights_MainFunction+0x48>
	}
	else if(BTHighBeam == STD_LOW)
 8000a78:	4b7b      	ldr	r3, [pc, #492]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d103      	bne.n	8000a88 <ExtLights_MainFunction+0x48>
	{
		CurrentState_HighBeam = BTLowBeam;
 8000a80:	4b77      	ldr	r3, [pc, #476]	; (8000c60 <ExtLights_MainFunction+0x220>)
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	4b79      	ldr	r3, [pc, #484]	; (8000c6c <ExtLights_MainFunction+0x22c>)
 8000a86:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTHighBeam == STD_HIGH)
 8000a88:	4b77      	ldr	r3, [pc, #476]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d104      	bne.n	8000a9a <ExtLights_MainFunction+0x5a>
	{
		CurrentState_HighBeam = BTHighBeam;
 8000a90:	4b75      	ldr	r3, [pc, #468]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000a92:	781a      	ldrb	r2, [r3, #0]
 8000a94:	4b75      	ldr	r3, [pc, #468]	; (8000c6c <ExtLights_MainFunction+0x22c>)
 8000a96:	701a      	strb	r2, [r3, #0]
 8000a98:	e007      	b.n	8000aaa <ExtLights_MainFunction+0x6a>
	}
	else if(BTHighBeam == STD_LOW)
 8000a9a:	4b73      	ldr	r3, [pc, #460]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d103      	bne.n	8000aaa <ExtLights_MainFunction+0x6a>
	{
		CurrentState_HighBeam = BTHighBeam;
 8000aa2:	4b71      	ldr	r3, [pc, #452]	; (8000c68 <ExtLights_MainFunction+0x228>)
 8000aa4:	781a      	ldrb	r2, [r3, #0]
 8000aa6:	4b71      	ldr	r3, [pc, #452]	; (8000c6c <ExtLights_MainFunction+0x22c>)
 8000aa8:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTFogLightFront == STD_HIGH)
 8000aaa:	4b71      	ldr	r3, [pc, #452]	; (8000c70 <ExtLights_MainFunction+0x230>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d104      	bne.n	8000abc <ExtLights_MainFunction+0x7c>
	{
		CurrentState_FogLightFront = BTFogLightFront;
 8000ab2:	4b6f      	ldr	r3, [pc, #444]	; (8000c70 <ExtLights_MainFunction+0x230>)
 8000ab4:	781a      	ldrb	r2, [r3, #0]
 8000ab6:	4b6f      	ldr	r3, [pc, #444]	; (8000c74 <ExtLights_MainFunction+0x234>)
 8000ab8:	701a      	strb	r2, [r3, #0]
 8000aba:	e007      	b.n	8000acc <ExtLights_MainFunction+0x8c>
	}
	else if(BTFogLightFront == STD_LOW)
 8000abc:	4b6c      	ldr	r3, [pc, #432]	; (8000c70 <ExtLights_MainFunction+0x230>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d103      	bne.n	8000acc <ExtLights_MainFunction+0x8c>
	{
		CurrentState_FogLightFront = BTFogLightFront;
 8000ac4:	4b6a      	ldr	r3, [pc, #424]	; (8000c70 <ExtLights_MainFunction+0x230>)
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	4b6a      	ldr	r3, [pc, #424]	; (8000c74 <ExtLights_MainFunction+0x234>)
 8000aca:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTFogLightRear == STD_HIGH)
 8000acc:	4b6a      	ldr	r3, [pc, #424]	; (8000c78 <ExtLights_MainFunction+0x238>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d104      	bne.n	8000ade <ExtLights_MainFunction+0x9e>
	{
		CurrentState_FogLightRear = BTFogLightRear;
 8000ad4:	4b68      	ldr	r3, [pc, #416]	; (8000c78 <ExtLights_MainFunction+0x238>)
 8000ad6:	781a      	ldrb	r2, [r3, #0]
 8000ad8:	4b68      	ldr	r3, [pc, #416]	; (8000c7c <ExtLights_MainFunction+0x23c>)
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	e007      	b.n	8000aee <ExtLights_MainFunction+0xae>
	}
	else if(BTFogLightRear == STD_LOW)
 8000ade:	4b66      	ldr	r3, [pc, #408]	; (8000c78 <ExtLights_MainFunction+0x238>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <ExtLights_MainFunction+0xae>
	{
		CurrentState_FogLightRear = BTFogLightRear;
 8000ae6:	4b64      	ldr	r3, [pc, #400]	; (8000c78 <ExtLights_MainFunction+0x238>)
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	4b64      	ldr	r3, [pc, #400]	; (8000c7c <ExtLights_MainFunction+0x23c>)
 8000aec:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTPositionLightRear == STD_HIGH)
 8000aee:	4b64      	ldr	r3, [pc, #400]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d104      	bne.n	8000b00 <ExtLights_MainFunction+0xc0>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000af6:	4b62      	ldr	r3, [pc, #392]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	4b62      	ldr	r3, [pc, #392]	; (8000c84 <ExtLights_MainFunction+0x244>)
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	e007      	b.n	8000b10 <ExtLights_MainFunction+0xd0>
	}
	else if(BTPositionLightRear == STD_LOW)
 8000b00:	4b5f      	ldr	r3, [pc, #380]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d103      	bne.n	8000b10 <ExtLights_MainFunction+0xd0>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000b08:	4b5d      	ldr	r3, [pc, #372]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	4b5d      	ldr	r3, [pc, #372]	; (8000c84 <ExtLights_MainFunction+0x244>)
 8000b0e:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTPositionLightRear == STD_HIGH)
 8000b10:	4b5b      	ldr	r3, [pc, #364]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d104      	bne.n	8000b22 <ExtLights_MainFunction+0xe2>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000b18:	4b59      	ldr	r3, [pc, #356]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	4b59      	ldr	r3, [pc, #356]	; (8000c84 <ExtLights_MainFunction+0x244>)
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	e007      	b.n	8000b32 <ExtLights_MainFunction+0xf2>
	}
	else if(BTPositionLightRear == STD_LOW)
 8000b22:	4b57      	ldr	r3, [pc, #348]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d103      	bne.n	8000b32 <ExtLights_MainFunction+0xf2>
	{
		CurrentState_PositionLightRear = BTPositionLightRear;
 8000b2a:	4b55      	ldr	r3, [pc, #340]	; (8000c80 <ExtLights_MainFunction+0x240>)
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	4b55      	ldr	r3, [pc, #340]	; (8000c84 <ExtLights_MainFunction+0x244>)
 8000b30:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTBrakeLight == STD_HIGH)
 8000b32:	4b55      	ldr	r3, [pc, #340]	; (8000c88 <ExtLights_MainFunction+0x248>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d104      	bne.n	8000b44 <ExtLights_MainFunction+0x104>
	{
		CurrentState_BrakeLight = BTBrakeLight;
 8000b3a:	4b53      	ldr	r3, [pc, #332]	; (8000c88 <ExtLights_MainFunction+0x248>)
 8000b3c:	781a      	ldrb	r2, [r3, #0]
 8000b3e:	4b53      	ldr	r3, [pc, #332]	; (8000c8c <ExtLights_MainFunction+0x24c>)
 8000b40:	701a      	strb	r2, [r3, #0]
 8000b42:	e007      	b.n	8000b54 <ExtLights_MainFunction+0x114>
	}
	else if(BTBrakeLight == STD_LOW)
 8000b44:	4b50      	ldr	r3, [pc, #320]	; (8000c88 <ExtLights_MainFunction+0x248>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d103      	bne.n	8000b54 <ExtLights_MainFunction+0x114>
	{
		CurrentState_BrakeLight = BTBrakeLight;
 8000b4c:	4b4e      	ldr	r3, [pc, #312]	; (8000c88 <ExtLights_MainFunction+0x248>)
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	4b4e      	ldr	r3, [pc, #312]	; (8000c8c <ExtLights_MainFunction+0x24c>)
 8000b52:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTReverseLight == STD_HIGH)
 8000b54:	4b4e      	ldr	r3, [pc, #312]	; (8000c90 <ExtLights_MainFunction+0x250>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d104      	bne.n	8000b66 <ExtLights_MainFunction+0x126>
	{
		CurrentState_ReverseLight = BTReverseLight;
 8000b5c:	4b4c      	ldr	r3, [pc, #304]	; (8000c90 <ExtLights_MainFunction+0x250>)
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	4b4c      	ldr	r3, [pc, #304]	; (8000c94 <ExtLights_MainFunction+0x254>)
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	e007      	b.n	8000b76 <ExtLights_MainFunction+0x136>
	}
	else if(BTReverseLight == STD_LOW)
 8000b66:	4b4a      	ldr	r3, [pc, #296]	; (8000c90 <ExtLights_MainFunction+0x250>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d103      	bne.n	8000b76 <ExtLights_MainFunction+0x136>
	{
		CurrentState_ReverseLight = BTReverseLight;
 8000b6e:	4b48      	ldr	r3, [pc, #288]	; (8000c90 <ExtLights_MainFunction+0x250>)
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	4b48      	ldr	r3, [pc, #288]	; (8000c94 <ExtLights_MainFunction+0x254>)
 8000b74:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTTurnSignalLeft == STD_HIGH)
 8000b76:	4b48      	ldr	r3, [pc, #288]	; (8000c98 <ExtLights_MainFunction+0x258>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d104      	bne.n	8000b88 <ExtLights_MainFunction+0x148>
	{
		CurrentState_TurnSignalLeft = BTTurnSignalLeft;
 8000b7e:	4b46      	ldr	r3, [pc, #280]	; (8000c98 <ExtLights_MainFunction+0x258>)
 8000b80:	781a      	ldrb	r2, [r3, #0]
 8000b82:	4b46      	ldr	r3, [pc, #280]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e007      	b.n	8000b98 <ExtLights_MainFunction+0x158>
	}
	else if(BTTurnSignalLeft == STD_LOW)
 8000b88:	4b43      	ldr	r3, [pc, #268]	; (8000c98 <ExtLights_MainFunction+0x258>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d103      	bne.n	8000b98 <ExtLights_MainFunction+0x158>
	{
		CurrentState_TurnSignalLeft = BTTurnSignalLeft;
 8000b90:	4b41      	ldr	r3, [pc, #260]	; (8000c98 <ExtLights_MainFunction+0x258>)
 8000b92:	781a      	ldrb	r2, [r3, #0]
 8000b94:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000b96:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTTurnSignalRight == STD_HIGH)
 8000b98:	4b41      	ldr	r3, [pc, #260]	; (8000ca0 <ExtLights_MainFunction+0x260>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d104      	bne.n	8000baa <ExtLights_MainFunction+0x16a>
	{
		CurrentState_TurnSignalRight = BTTurnSignalRight;
 8000ba0:	4b3f      	ldr	r3, [pc, #252]	; (8000ca0 <ExtLights_MainFunction+0x260>)
 8000ba2:	781a      	ldrb	r2, [r3, #0]
 8000ba4:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <ExtLights_MainFunction+0x264>)
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	e007      	b.n	8000bba <ExtLights_MainFunction+0x17a>
	}
	else if(BTTurnSignalRight == STD_LOW)
 8000baa:	4b3d      	ldr	r3, [pc, #244]	; (8000ca0 <ExtLights_MainFunction+0x260>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d103      	bne.n	8000bba <ExtLights_MainFunction+0x17a>
	{
		CurrentState_TurnSignalRight = BTTurnSignalRight;
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <ExtLights_MainFunction+0x260>)
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	4b3b      	ldr	r3, [pc, #236]	; (8000ca4 <ExtLights_MainFunction+0x264>)
 8000bb8:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(BTHazardLight == STD_HIGH)
 8000bba:	4b3b      	ldr	r3, [pc, #236]	; (8000ca8 <ExtLights_MainFunction+0x268>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d104      	bne.n	8000bcc <ExtLights_MainFunction+0x18c>
	{
		CurrentState_HazardLight = BTHazardLight;
 8000bc2:	4b39      	ldr	r3, [pc, #228]	; (8000ca8 <ExtLights_MainFunction+0x268>)
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	4b39      	ldr	r3, [pc, #228]	; (8000cac <ExtLights_MainFunction+0x26c>)
 8000bc8:	701a      	strb	r2, [r3, #0]
 8000bca:	e007      	b.n	8000bdc <ExtLights_MainFunction+0x19c>
	}
	else if(BTHazardLight == STD_LOW)
 8000bcc:	4b36      	ldr	r3, [pc, #216]	; (8000ca8 <ExtLights_MainFunction+0x268>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d103      	bne.n	8000bdc <ExtLights_MainFunction+0x19c>
	{
		CurrentState_HazardLight = BTHazardLight;
 8000bd4:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <ExtLights_MainFunction+0x268>)
 8000bd6:	781a      	ldrb	r2, [r3, #0]
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <ExtLights_MainFunction+0x26c>)
 8000bda:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(CurrentState_TurnSignalLeft == STD_HIGH)
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	f040 8080 	bne.w	8000ce6 <ExtLights_MainFunction+0x2a6>
	{
		HAL_TIM_Base_Start(&htim2);
 8000be6:	4832      	ldr	r0, [pc, #200]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000be8:	f006 ff08 	bl	80079fc <HAL_TIM_Base_Start>
		if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000bec:	4b30      	ldr	r3, [pc, #192]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d805      	bhi.n	8000c06 <ExtLights_MainFunction+0x1c6>
		{
			ExtLights_TurnSignalLeft(CurrentState_TurnSignalLeft);
 8000bfa:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 fa58 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000c04:	e078      	b.n	8000cf8 <ExtLights_MainFunction+0x2b8>
		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2)  && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000c06:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d911      	bls.n	8000c38 <ExtLights_MainFunction+0x1f8>
 8000c14:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1a:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d80a      	bhi.n	8000c38 <ExtLights_MainFunction+0x1f8>
		{
			ExtLights_TurnSignalLeft(!CurrentState_TurnSignalLeft);
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	bf0c      	ite	eq
 8000c2a:	2301      	moveq	r3, #1
 8000c2c:	2300      	movne	r3, #0
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 fa3f 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000c36:	e05f      	b.n	8000cf8 <ExtLights_MainFunction+0x2b8>
		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d936      	bls.n	8000cb4 <ExtLights_MainFunction+0x274>
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <ExtLights_MainFunction+0x270>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4c:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d82f      	bhi.n	8000cb4 <ExtLights_MainFunction+0x274>
		{
			ExtLights_TurnSignalLeft(CurrentState_TurnSignalLeft);
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <ExtLights_MainFunction+0x25c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fa2b 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000c5e:	e04b      	b.n	8000cf8 <ExtLights_MainFunction+0x2b8>
 8000c60:	200000a0 	.word	0x200000a0
 8000c64:	20000096 	.word	0x20000096
 8000c68:	200000a1 	.word	0x200000a1
 8000c6c:	20000097 	.word	0x20000097
 8000c70:	200000a2 	.word	0x200000a2
 8000c74:	20000098 	.word	0x20000098
 8000c78:	200000a3 	.word	0x200000a3
 8000c7c:	20000099 	.word	0x20000099
 8000c80:	200000a4 	.word	0x200000a4
 8000c84:	2000009c 	.word	0x2000009c
 8000c88:	200000a5 	.word	0x200000a5
 8000c8c:	2000009d 	.word	0x2000009d
 8000c90:	200000a6 	.word	0x200000a6
 8000c94:	2000009e 	.word	0x2000009e
 8000c98:	200000a8 	.word	0x200000a8
 8000c9c:	2000009b 	.word	0x2000009b
 8000ca0:	200000a7 	.word	0x200000a7
 8000ca4:	2000009a 	.word	0x2000009a
 8000ca8:	200000a9 	.word	0x200000a9
 8000cac:	2000009f 	.word	0x2000009f
 8000cb0:	200004bc 	.word	0x200004bc
		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8000cb4:	4b97      	ldr	r3, [pc, #604]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d91a      	bls.n	8000cf8 <ExtLights_MainFunction+0x2b8>
 8000cc2:	4b94      	ldr	r3, [pc, #592]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d813      	bhi.n	8000cf8 <ExtLights_MainFunction+0x2b8>
		{
			ExtLights_TurnSignalLeft(!CurrentState_TurnSignalLeft);
 8000cd0:	4b91      	ldr	r3, [pc, #580]	; (8000f18 <ExtLights_MainFunction+0x4d8>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	bf0c      	ite	eq
 8000cd8:	2301      	moveq	r3, #1
 8000cda:	2300      	movne	r3, #0
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f9e8 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000ce4:	e008      	b.n	8000cf8 <ExtLights_MainFunction+0x2b8>
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_TurnSignalLeft == STD_LOW)
 8000ce6:	4b8c      	ldr	r3, [pc, #560]	; (8000f18 <ExtLights_MainFunction+0x4d8>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d104      	bne.n	8000cf8 <ExtLights_MainFunction+0x2b8>
	{
		ExtLights_TurnSignalLeft(CurrentState_TurnSignalLeft);
 8000cee:	4b8a      	ldr	r3, [pc, #552]	; (8000f18 <ExtLights_MainFunction+0x4d8>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f9de 	bl	80010b4 <ExtLights_TurnSignalLeft>
	else
	{
		/* do nothing */
	}

	if(CurrentState_TurnSignalRight == STD_HIGH)
 8000cf8:	4b88      	ldr	r3, [pc, #544]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d155      	bne.n	8000dac <ExtLights_MainFunction+0x36c>
	{
		HAL_TIM_Base_Start(&htim2);
 8000d00:	4884      	ldr	r0, [pc, #528]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d02:	f006 fe7b 	bl	80079fc <HAL_TIM_Base_Start>
		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8000d06:	4b83      	ldr	r3, [pc, #524]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d805      	bhi.n	8000d20 <ExtLights_MainFunction+0x2e0>
		{
			ExtLights_TurnSignalRight(CurrentState_TurnSignalRight);
 8000d14:	4b81      	ldr	r3, [pc, #516]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f9dd 	bl	80010d8 <ExtLights_TurnSignalRight>
 8000d1e:	e04e      	b.n	8000dbe <ExtLights_MainFunction+0x37e>
		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000d20:	4b7c      	ldr	r3, [pc, #496]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d26:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d911      	bls.n	8000d52 <ExtLights_MainFunction+0x312>
 8000d2e:	4b79      	ldr	r3, [pc, #484]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d34:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d80a      	bhi.n	8000d52 <ExtLights_MainFunction+0x312>
		{
			ExtLights_TurnSignalRight(!CurrentState_TurnSignalRight);
 8000d3c:	4b77      	ldr	r3, [pc, #476]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	bf0c      	ite	eq
 8000d44:	2301      	moveq	r3, #1
 8000d46:	2300      	movne	r3, #0
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f9c4 	bl	80010d8 <ExtLights_TurnSignalRight>
 8000d50:	e035      	b.n	8000dbe <ExtLights_MainFunction+0x37e>
		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8000d52:	4b70      	ldr	r3, [pc, #448]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d90c      	bls.n	8000d7a <ExtLights_MainFunction+0x33a>
 8000d60:	4b6c      	ldr	r3, [pc, #432]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d805      	bhi.n	8000d7a <ExtLights_MainFunction+0x33a>
		{
			ExtLights_TurnSignalRight(CurrentState_TurnSignalRight);
 8000d6e:	4b6b      	ldr	r3, [pc, #428]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f9b0 	bl	80010d8 <ExtLights_TurnSignalRight>
 8000d78:	e021      	b.n	8000dbe <ExtLights_MainFunction+0x37e>
		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8000d7a:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d80:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d91a      	bls.n	8000dbe <ExtLights_MainFunction+0x37e>
 8000d88:	4b62      	ldr	r3, [pc, #392]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d813      	bhi.n	8000dbe <ExtLights_MainFunction+0x37e>
		{
			ExtLights_TurnSignalRight(!CurrentState_TurnSignalRight);
 8000d96:	4b61      	ldr	r3, [pc, #388]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	bf0c      	ite	eq
 8000d9e:	2301      	moveq	r3, #1
 8000da0:	2300      	movne	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f997 	bl	80010d8 <ExtLights_TurnSignalRight>
 8000daa:	e008      	b.n	8000dbe <ExtLights_MainFunction+0x37e>
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_TurnSignalRight == STD_LOW)
 8000dac:	4b5b      	ldr	r3, [pc, #364]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d104      	bne.n	8000dbe <ExtLights_MainFunction+0x37e>
	{
		ExtLights_TurnSignalRight(CurrentState_TurnSignalRight);
 8000db4:	4b59      	ldr	r3, [pc, #356]	; (8000f1c <ExtLights_MainFunction+0x4dc>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 f98d 	bl	80010d8 <ExtLights_TurnSignalRight>
	else
	{
		/* do nothing */
	}

	if(CurrentState_HazardLight == STD_HIGH)
 8000dbe:	4b58      	ldr	r3, [pc, #352]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d173      	bne.n	8000eae <ExtLights_MainFunction+0x46e>
	{
		HAL_TIM_Base_Start(&htim2);
 8000dc6:	4853      	ldr	r0, [pc, #332]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000dc8:	f006 fe18 	bl	80079fc <HAL_TIM_Base_Start>
		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8000dcc:	4b51      	ldr	r3, [pc, #324]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d80a      	bhi.n	8000df0 <ExtLights_MainFunction+0x3b0>
		{
			ExtLights_TurnSignalRight(CurrentState_HazardLight);
 8000dda:	4b51      	ldr	r3, [pc, #324]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f97a 	bl	80010d8 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(CurrentState_HazardLight);
 8000de4:	4b4e      	ldr	r3, [pc, #312]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f963 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000dee:	e06c      	b.n	8000eca <ExtLights_MainFunction+0x48a>
		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000df0:	4b48      	ldr	r3, [pc, #288]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d91b      	bls.n	8000e36 <ExtLights_MainFunction+0x3f6>
 8000dfe:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	f241 3287 	movw	r2, #4999	; 0x1387
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d814      	bhi.n	8000e36 <ExtLights_MainFunction+0x3f6>
		{
			ExtLights_TurnSignalRight(!CurrentState_HazardLight);
 8000e0c:	4b44      	ldr	r3, [pc, #272]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	bf0c      	ite	eq
 8000e14:	2301      	moveq	r3, #1
 8000e16:	2300      	movne	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f95c 	bl	80010d8 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(!CurrentState_HazardLight);
 8000e20:	4b3f      	ldr	r3, [pc, #252]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	bf0c      	ite	eq
 8000e28:	2301      	moveq	r3, #1
 8000e2a:	2300      	movne	r3, #0
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f940 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000e34:	e049      	b.n	8000eca <ExtLights_MainFunction+0x48a>
		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2)&& __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8000e36:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d911      	bls.n	8000e68 <ExtLights_MainFunction+0x428>
 8000e44:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d80a      	bhi.n	8000e68 <ExtLights_MainFunction+0x428>
		{
			ExtLights_TurnSignalRight(CurrentState_HazardLight);
 8000e52:	4b33      	ldr	r3, [pc, #204]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f93e 	bl	80010d8 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(CurrentState_HazardLight);
 8000e5c:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f927 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000e66:	e030      	b.n	8000eca <ExtLights_MainFunction+0x48a>
		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d929      	bls.n	8000eca <ExtLights_MainFunction+0x48a>
 8000e76:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <ExtLights_MainFunction+0x4d4>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d822      	bhi.n	8000eca <ExtLights_MainFunction+0x48a>
		{
			ExtLights_TurnSignalRight(!CurrentState_HazardLight);
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	bf0c      	ite	eq
 8000e8c:	2301      	moveq	r3, #1
 8000e8e:	2300      	movne	r3, #0
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f920 	bl	80010d8 <ExtLights_TurnSignalRight>
			ExtLights_TurnSignalLeft(!CurrentState_HazardLight);
 8000e98:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf0c      	ite	eq
 8000ea0:	2301      	moveq	r3, #1
 8000ea2:	2300      	movne	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f904 	bl	80010b4 <ExtLights_TurnSignalLeft>
 8000eac:	e00d      	b.n	8000eca <ExtLights_MainFunction+0x48a>
		else
		{
			/* do nothing */
		}
	}
	else if(CurrentState_HazardLight == STD_LOW)
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d109      	bne.n	8000eca <ExtLights_MainFunction+0x48a>
	{
		ExtLights_TurnSignalRight(CurrentState_HazardLight);
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f90c 	bl	80010d8 <ExtLights_TurnSignalRight>
		ExtLights_TurnSignalLeft(CurrentState_HazardLight);
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <ExtLights_MainFunction+0x4e0>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f8f5 	bl	80010b4 <ExtLights_TurnSignalLeft>
	else
	{
		/* do nothing */
	}

	ExtLights_LowBeam(CurrentState_LowBeam);
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <ExtLights_MainFunction+0x4e4>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f8a8 	bl	8001024 <ExtLights_LowBeam>
	ExtLights_HighBeam(CurrentState_HighBeam);
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <ExtLights_MainFunction+0x4e8>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 f8b5 	bl	8001048 <ExtLights_HighBeam>
	ExtLights_FogLightFront(CurrentState_FogLightFront);
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <ExtLights_MainFunction+0x4ec>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f8c2 	bl	800106c <ExtLights_FogLightFront>
	ExtLights_FogLightRear(CurrentState_FogLightRear);
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <ExtLights_MainFunction+0x4f0>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 f8cf 	bl	8001090 <ExtLights_FogLightRear>
	ExtLights_PositionLightRear(CurrentState_PositionLightRear);
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <ExtLights_MainFunction+0x4f4>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f900 	bl	80010fc <ExtLights_PositionLightRear>
	ExtLights_BrakeLight(CurrentState_BrakeLight);
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <ExtLights_MainFunction+0x4f8>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f90d 	bl	8001120 <ExtLights_BrakeLight>
	ExtLights_ReverseLight(CurrentState_ReverseLight);
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <ExtLights_MainFunction+0x4fc>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f91a 	bl	8001144 <ExtLights_ReverseLight>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200004bc 	.word	0x200004bc
 8000f18:	2000009b 	.word	0x2000009b
 8000f1c:	2000009a 	.word	0x2000009a
 8000f20:	2000009f 	.word	0x2000009f
 8000f24:	20000096 	.word	0x20000096
 8000f28:	20000097 	.word	0x20000097
 8000f2c:	20000098 	.word	0x20000098
 8000f30:	20000099 	.word	0x20000099
 8000f34:	2000009c 	.word	0x2000009c
 8000f38:	2000009d 	.word	0x2000009d
 8000f3c:	2000009e 	.word	0x2000009e

08000f40 <ExtLights_Init>:

StdReturnType ExtLights_Init()
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
	CurrentState_LowBeam = STD_LOW;
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <ExtLights_Init+0x90>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
	CurrentState_HighBeam = STD_LOW;
 8000f4a:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <ExtLights_Init+0x94>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
	CurrentState_FogLightFront = STD_LOW;
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <ExtLights_Init+0x98>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
	CurrentState_FogLightRear = STD_LOW;
 8000f56:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <ExtLights_Init+0x9c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
	CurrentState_TurnSignalLeft = STD_LOW;
 8000f5c:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <ExtLights_Init+0xa0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	CurrentState_TurnSignalRight = STD_LOW;
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <ExtLights_Init+0xa4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
	CurrentState_PositionLightRear = STD_LOW;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <ExtLights_Init+0xa8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
	CurrentState_BrakeLight = STD_LOW;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <ExtLights_Init+0xac>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
	CurrentState_ReverseLight = STD_LOW;
 8000f74:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <ExtLights_Init+0xb0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
	CurrentState_HazardLight = STD_LOW;
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <ExtLights_Init+0xb4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
	BTLowBeam = STD_LOW;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <ExtLights_Init+0xb8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
	BTHighBeam = STD_LOW;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <ExtLights_Init+0xbc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
	BTFogLightFront = STD_LOW;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <ExtLights_Init+0xc0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
	BTFogLightRear = STD_LOW;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <ExtLights_Init+0xc4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
	BTPositionLightRear = STD_LOW;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <ExtLights_Init+0xc8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
	BTBrakeLight = STD_LOW;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <ExtLights_Init+0xcc>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
	BTReverseLight = STD_LOW;
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <ExtLights_Init+0xd0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
	BTTurnSignalRight = STD_LOW;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <ExtLights_Init+0xd4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
	BTTurnSignalLeft = STD_LOW;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <ExtLights_Init+0xd8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
	BTHazardLight = STD_LOW;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <ExtLights_Init+0xdc>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
	BTExtLight_IrqFlag = STD_LOW;
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <ExtLights_Init+0xe0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]

	return E_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000096 	.word	0x20000096
 8000fd4:	20000097 	.word	0x20000097
 8000fd8:	20000098 	.word	0x20000098
 8000fdc:	20000099 	.word	0x20000099
 8000fe0:	2000009b 	.word	0x2000009b
 8000fe4:	2000009a 	.word	0x2000009a
 8000fe8:	2000009c 	.word	0x2000009c
 8000fec:	2000009d 	.word	0x2000009d
 8000ff0:	2000009e 	.word	0x2000009e
 8000ff4:	2000009f 	.word	0x2000009f
 8000ff8:	200000a0 	.word	0x200000a0
 8000ffc:	200000a1 	.word	0x200000a1
 8001000:	200000a2 	.word	0x200000a2
 8001004:	200000a3 	.word	0x200000a3
 8001008:	200000a4 	.word	0x200000a4
 800100c:	200000a5 	.word	0x200000a5
 8001010:	200000a6 	.word	0x200000a6
 8001014:	200000a7 	.word	0x200000a7
 8001018:	200000a8 	.word	0x200000a8
 800101c:	200000a9 	.word	0x200000a9
 8001020:	200000aa 	.word	0x200000aa

08001024 <ExtLights_LowBeam>:


void ExtLights_LowBeam(uint8 PinState)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LOW_BEAM_PORT, LOW_BEAM_PIN, PinState);
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	461a      	mov	r2, r3
 8001032:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001036:	4803      	ldr	r0, [pc, #12]	; (8001044 <ExtLights_LowBeam+0x20>)
 8001038:	f003 f9a4 	bl	8004384 <HAL_GPIO_WritePin>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40020000 	.word	0x40020000

08001048 <ExtLights_HighBeam>:

void ExtLights_HighBeam(uint8 PinState)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HIGH_BEAM_PORT, HIGH_BEAM_PIN, PinState);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	461a      	mov	r2, r3
 8001056:	2120      	movs	r1, #32
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <ExtLights_HighBeam+0x20>)
 800105a:	f003 f993 	bl	8004384 <HAL_GPIO_WritePin>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40020400 	.word	0x40020400

0800106c <ExtLights_FogLightFront>:

void ExtLights_FogLightFront(uint8 PinState)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(FRONT_FOG_LIGHT_PORT, FRONT_FOG_LIGHT_PIN, PinState);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	461a      	mov	r2, r3
 800107a:	2110      	movs	r1, #16
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <ExtLights_FogLightFront+0x20>)
 800107e:	f003 f981 	bl	8004384 <HAL_GPIO_WritePin>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40020400 	.word	0x40020400

08001090 <ExtLights_FogLightRear>:

void ExtLights_FogLightRear(uint8 PinState)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(REAR_FOG_LIGHT_PORT, REAR_FOG_LIGHT_PIN, PinState);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	461a      	mov	r2, r3
 800109e:	2140      	movs	r1, #64	; 0x40
 80010a0:	4803      	ldr	r0, [pc, #12]	; (80010b0 <ExtLights_FogLightRear+0x20>)
 80010a2:	f003 f96f 	bl	8004384 <HAL_GPIO_WritePin>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40020000 	.word	0x40020000

080010b4 <ExtLights_TurnSignalLeft>:

void ExtLights_TurnSignalLeft(uint8 PinState)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LEFT_TURN_SIGNAL_PORT, LEFT_TURN_SIGNAL_PIN, PinState);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	461a      	mov	r2, r3
 80010c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <ExtLights_TurnSignalLeft+0x20>)
 80010c8:	f003 f95c 	bl	8004384 <HAL_GPIO_WritePin>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40020000 	.word	0x40020000

080010d8 <ExtLights_TurnSignalRight>:

void ExtLights_TurnSignalRight(uint8 PinState)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RIGHT_TURN_SIGNAL_PORT, RIGHT_TURN_SIGNAL_PIN, PinState);
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	461a      	mov	r2, r3
 80010e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <ExtLights_TurnSignalRight+0x20>)
 80010ec:	f003 f94a 	bl	8004384 <HAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40020000 	.word	0x40020000

080010fc <ExtLights_PositionLightRear>:

void ExtLights_PositionLightRear(uint8 PinState)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(REAR_POSITION_LIGHT_PORT, REAR_POSITION_LIGHT_PIN, PinState);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	461a      	mov	r2, r3
 800110a:	2120      	movs	r1, #32
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <ExtLights_PositionLightRear+0x20>)
 800110e:	f003 f939 	bl	8004384 <HAL_GPIO_WritePin>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020000 	.word	0x40020000

08001120 <ExtLights_BrakeLight>:

void ExtLights_BrakeLight(uint8 PinState)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(BRAKE_LIGHT_PORT, BRAKE_LIGHT_PIN, PinState);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	461a      	mov	r2, r3
 800112e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <ExtLights_BrakeLight+0x20>)
 8001134:	f003 f926 	bl	8004384 <HAL_GPIO_WritePin>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40020400 	.word	0x40020400

08001144 <ExtLights_ReverseLight>:

void ExtLights_ReverseLight(uint8 PinState)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(REVERSE_LIGHT_PORT, REVERSE_LIGHT_PIN, PinState);
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	461a      	mov	r2, r3
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <ExtLights_ReverseLight+0x20>)
 8001156:	f003 f915 	bl	8004384 <HAL_GPIO_WritePin>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40020800 	.word	0x40020800

08001168 <IntLights_MainFunction>:

uint8 CurrentState_IntLights;
uint8 BTIntLights;

void IntLights_MainFunction()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	if(BTIntLights == STD_HIGH)
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <IntLights_MainFunction+0x30>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d103      	bne.n	800117c <IntLights_MainFunction+0x14>
	{
		CurrentState_IntLights = STD_HIGH;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <IntLights_MainFunction+0x34>)
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	e006      	b.n	800118a <IntLights_MainFunction+0x22>
	}
	else if(BTIntLights == STD_LOW)
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <IntLights_MainFunction+0x30>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d102      	bne.n	800118a <IntLights_MainFunction+0x22>
	{
		CurrentState_IntLights = STD_LOW;
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <IntLights_MainFunction+0x34>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	IntLights_Toggle_IntLights(CurrentState_IntLights);
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <IntLights_MainFunction+0x34>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f818 	bl	80011c4 <IntLights_Toggle_IntLights>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200000ac 	.word	0x200000ac
 800119c:	200000ab 	.word	0x200000ab

080011a0 <IntLights_Init>:

StdReturnType IntLights_Init()
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
	CurrentState_IntLights = STD_LOW;
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <IntLights_Init+0x1c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
	BTIntLights = STD_LOW;
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <IntLights_Init+0x20>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]

	return E_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	200000ab 	.word	0x200000ab
 80011c0:	200000ac 	.word	0x200000ac

080011c4 <IntLights_Toggle_IntLights>:

void IntLights_Toggle_IntLights(uint8 PinState)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	461a      	mov	r2, r3
 80011d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d6:	4803      	ldr	r0, [pc, #12]	; (80011e4 <IntLights_Toggle_IntLights+0x20>)
 80011d8:	f003 f8d4 	bl	8004384 <HAL_GPIO_WritePin>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40020400 	.word	0x40020400

080011e8 <SecAlm_MainFunction>:
uint8 SecAlmTrigger;
uint8 SecAlmCounter;
uint8 PreviousState_SecAlm;

void SecAlm_MainFunction()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	if(PreviousState_SecAlm != SecAlmTrigger)
 80011ec:	4b61      	ldr	r3, [pc, #388]	; (8001374 <SecAlm_MainFunction+0x18c>)
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	4b61      	ldr	r3, [pc, #388]	; (8001378 <SecAlm_MainFunction+0x190>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d006      	beq.n	8001206 <SecAlm_MainFunction+0x1e>
	{
		HAL_TIM_Base_Init(&htim5);
 80011f8:	4860      	ldr	r0, [pc, #384]	; (800137c <SecAlm_MainFunction+0x194>)
 80011fa:	f006 fba3 	bl	8007944 <HAL_TIM_Base_Init>
		PreviousState_SecAlm = SecAlmTrigger;
 80011fe:	4b5e      	ldr	r3, [pc, #376]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	4b5c      	ldr	r3, [pc, #368]	; (8001374 <SecAlm_MainFunction+0x18c>)
 8001204:	701a      	strb	r2, [r3, #0]
	}

	if(SecAlmTrigger == STD_HIGH)
 8001206:	4b5c      	ldr	r3, [pc, #368]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b01      	cmp	r3, #1
 800120c:	f040 808a 	bne.w	8001324 <SecAlm_MainFunction+0x13c>
	{
		HAL_TIM_Base_Start(&htim5);
 8001210:	485a      	ldr	r0, [pc, #360]	; (800137c <SecAlm_MainFunction+0x194>)
 8001212:	f006 fbf3 	bl	80079fc <HAL_TIM_Base_Start>
		if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 8001216:	4b59      	ldr	r3, [pc, #356]	; (800137c <SecAlm_MainFunction+0x194>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	4a58      	ldr	r2, [pc, #352]	; (8001380 <SecAlm_MainFunction+0x198>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d873      	bhi.n	800130a <SecAlm_MainFunction+0x122>
		{
			HAL_TIM_Base_Start(&htim4);
 8001222:	4858      	ldr	r0, [pc, #352]	; (8001384 <SecAlm_MainFunction+0x19c>)
 8001224:	f006 fbea 	bl	80079fc <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim4) < 5000)
 8001228:	4b56      	ldr	r3, [pc, #344]	; (8001384 <SecAlm_MainFunction+0x19c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001232:	4293      	cmp	r3, r2
 8001234:	d81e      	bhi.n	8001274 <SecAlm_MainFunction+0x8c>
			{
				ExtLights_LowBeam(SecAlmTrigger);
 8001236:	4b50      	ldr	r3, [pc, #320]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fef2 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(SecAlmTrigger);
 8001240:	4b4d      	ldr	r3, [pc, #308]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff59 	bl	80010fc <ExtLights_PositionLightRear>
				ExtLights_FogLightFront(SecAlmTrigger);
 800124a:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <SecAlm_MainFunction+0x190>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff0c 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_FogLightRear(SecAlmTrigger);
 8001254:	4b48      	ldr	r3, [pc, #288]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff19 	bl	8001090 <ExtLights_FogLightRear>
				ExtLights_TurnSignalRight(SecAlmTrigger);
 800125e:	4b46      	ldr	r3, [pc, #280]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff38 	bl	80010d8 <ExtLights_TurnSignalRight>
				ExtLights_TurnSignalLeft(SecAlmTrigger);
 8001268:	4b43      	ldr	r3, [pc, #268]	; (8001378 <SecAlm_MainFunction+0x190>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff21 	bl	80010b4 <ExtLights_TurnSignalLeft>
	}
	else
	{
		/* do nothing */
	}
}
 8001272:	e07c      	b.n	800136e <SecAlm_MainFunction+0x186>
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim4) && __HAL_TIM_GET_COUNTER(&htim4) < 10000)
 8001274:	4b43      	ldr	r3, [pc, #268]	; (8001384 <SecAlm_MainFunction+0x19c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	f241 3288 	movw	r2, #5000	; 0x1388
 800127e:	4293      	cmp	r3, r2
 8001280:	d975      	bls.n	800136e <SecAlm_MainFunction+0x186>
 8001282:	4b40      	ldr	r3, [pc, #256]	; (8001384 <SecAlm_MainFunction+0x19c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	f242 720f 	movw	r2, #9999	; 0x270f
 800128c:	4293      	cmp	r3, r2
 800128e:	d86e      	bhi.n	800136e <SecAlm_MainFunction+0x186>
				ExtLights_LowBeam(!SecAlmTrigger);
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fec0 	bl	8001024 <ExtLights_LowBeam>
				ExtLights_PositionLightRear(!SecAlmTrigger);
 80012a4:	4b34      	ldr	r3, [pc, #208]	; (8001378 <SecAlm_MainFunction+0x190>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff22 	bl	80010fc <ExtLights_PositionLightRear>
				ExtLights_FogLightFront(!SecAlmTrigger);
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <SecAlm_MainFunction+0x190>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bf0c      	ite	eq
 80012c0:	2301      	moveq	r3, #1
 80012c2:	2300      	movne	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fed0 	bl	800106c <ExtLights_FogLightFront>
				ExtLights_FogLightRear(!SecAlmTrigger);
 80012cc:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <SecAlm_MainFunction+0x190>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bf0c      	ite	eq
 80012d4:	2301      	moveq	r3, #1
 80012d6:	2300      	movne	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fed8 	bl	8001090 <ExtLights_FogLightRear>
				ExtLights_TurnSignalRight(!SecAlmTrigger);
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <SecAlm_MainFunction+0x190>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	bf0c      	ite	eq
 80012e8:	2301      	moveq	r3, #1
 80012ea:	2300      	movne	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fef2 	bl	80010d8 <ExtLights_TurnSignalRight>
				ExtLights_TurnSignalLeft(!SecAlmTrigger);
 80012f4:	4b20      	ldr	r3, [pc, #128]	; (8001378 <SecAlm_MainFunction+0x190>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf0c      	ite	eq
 80012fc:	2301      	moveq	r3, #1
 80012fe:	2300      	movne	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fed6 	bl	80010b4 <ExtLights_TurnSignalLeft>
}
 8001308:	e031      	b.n	800136e <SecAlm_MainFunction+0x186>
		else if(__HAL_TIM_GET_COUNTER(&htim5) > 100000)
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <SecAlm_MainFunction+0x194>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <SecAlm_MainFunction+0x1a0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d92b      	bls.n	800136e <SecAlm_MainFunction+0x186>
			SecAlmTrigger = STD_LOW;
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim5);
 800131c:	4817      	ldr	r0, [pc, #92]	; (800137c <SecAlm_MainFunction+0x194>)
 800131e:	f006 fbc7 	bl	8007ab0 <HAL_TIM_Base_Stop>
}
 8001322:	e024      	b.n	800136e <SecAlm_MainFunction+0x186>
	else if(SecAlmTrigger == STD_LOW)
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d120      	bne.n	800136e <SecAlm_MainFunction+0x186>
		HAL_TIM_Base_Stop(&htim4);
 800132c:	4815      	ldr	r0, [pc, #84]	; (8001384 <SecAlm_MainFunction+0x19c>)
 800132e:	f006 fbbf 	bl	8007ab0 <HAL_TIM_Base_Stop>
		ExtLights_LowBeam(SecAlmTrigger);
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fe74 	bl	8001024 <ExtLights_LowBeam>
		ExtLights_PositionLightRear(SecAlmTrigger);
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <SecAlm_MainFunction+0x190>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fedb 	bl	80010fc <ExtLights_PositionLightRear>
		ExtLights_FogLightFront(SecAlmTrigger);
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fe8e 	bl	800106c <ExtLights_FogLightFront>
		ExtLights_FogLightRear(SecAlmTrigger);
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fe9b 	bl	8001090 <ExtLights_FogLightRear>
		ExtLights_TurnSignalRight(SecAlmTrigger);
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <SecAlm_MainFunction+0x190>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff feba 	bl	80010d8 <ExtLights_TurnSignalRight>
		ExtLights_TurnSignalLeft(SecAlmTrigger);
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SecAlm_MainFunction+0x190>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fea3 	bl	80010b4 <ExtLights_TurnSignalLeft>
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200000b2 	.word	0x200000b2
 8001378:	200000b0 	.word	0x200000b0
 800137c:	200006d8 	.word	0x200006d8
 8001380:	0001869f 	.word	0x0001869f
 8001384:	20000624 	.word	0x20000624
 8001388:	000186a0 	.word	0x000186a0

0800138c <SecAlm_Init>:

StdReturnType SecAlm_Init()
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
	CurrentState_Alarm_LED = STD_LOW;
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <SecAlm_Init+0x34>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
	LockCounter = STD_LOW;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <SecAlm_Init+0x38>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
	UnlockCounter = STD_LOW;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <SecAlm_Init+0x3c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
	SecAlmTrigger = STD_LOW;
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <SecAlm_Init+0x40>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
	SecAlmCounter = STD_LOW;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <SecAlm_Init+0x44>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
	PreviousState_SecAlm = STD_LOW;
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <SecAlm_Init+0x48>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]

	return E_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	200000ad 	.word	0x200000ad
 80013c4:	200000ae 	.word	0x200000ae
 80013c8:	200000af 	.word	0x200000af
 80013cc:	200000b0 	.word	0x200000b0
 80013d0:	200000b1 	.word	0x200000b1
 80013d4:	200000b2 	.word	0x200000b2

080013d8 <SecAlm_ToggleAlarmLed>:
{
	HAL_GPIO_WritePin(ALARM_BUZZER_PORT, ALARM_BUZZER_PIN, PinState);
}

void SecAlm_ToggleAlarmLed(uint8 PinState)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ALARM_LED_PORT, ALARM_LED_PIN, PinState);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	461a      	mov	r2, r3
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <SecAlm_ToggleAlarmLed+0x20>)
 80013ea:	f002 ffcb 	bl	8004384 <HAL_GPIO_WritePin>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40020000 	.word	0x40020000

080013fc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001420:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <MX_ADC1_Init+0xd8>)
 8001422:	4a2d      	ldr	r2, [pc, #180]	; (80014d8 <MX_ADC1_Init+0xdc>)
 8001424:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <MX_ADC1_Init+0xd8>)
 8001428:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800142c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800142e:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <MX_ADC1_Init+0xd8>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001434:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <MX_ADC1_Init+0xd8>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <MX_ADC1_Init+0xd8>)
 800143c:	2200      	movs	r2, #0
 800143e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001440:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <MX_ADC1_Init+0xd8>)
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <MX_ADC1_Init+0xd8>)
 800144a:	2200      	movs	r2, #0
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <MX_ADC1_Init+0xd8>)
 8001450:	4a22      	ldr	r2, [pc, #136]	; (80014dc <MX_ADC1_Init+0xe0>)
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_ADC1_Init+0xd8>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <MX_ADC1_Init+0xd8>)
 800145c:	2201      	movs	r2, #1
 800145e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_ADC1_Init+0xd8>)
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_ADC1_Init+0xd8>)
 800146a:	2201      	movs	r2, #1
 800146c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800146e:	4819      	ldr	r0, [pc, #100]	; (80014d4 <MX_ADC1_Init+0xd8>)
 8001470:	f001 fef4 	bl	800325c <HAL_ADC_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 800147a:	f001 f89f 	bl	80025bc <Error_Handler>
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <MX_ADC1_Init+0xe4>)
 8001480:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 800148a:	2301      	movs	r3, #1
 800148c:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = ENABLE;
 800148e:	2301      	movs	r3, #1
 8001490:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	4619      	mov	r1, r3
 800149a:	480e      	ldr	r0, [pc, #56]	; (80014d4 <MX_ADC1_Init+0xd8>)
 800149c:	f002 f9b2 	bl	8003804 <HAL_ADC_AnalogWDGConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80014a6:	f001 f889 	bl	80025bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014aa:	2301      	movs	r3, #1
 80014ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014ae:	2301      	movs	r3, #1
 80014b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b6:	463b      	mov	r3, r7
 80014b8:	4619      	mov	r1, r3
 80014ba:	4806      	ldr	r0, [pc, #24]	; (80014d4 <MX_ADC1_Init+0xd8>)
 80014bc:	f002 f870 	bl	80035a0 <HAL_ADC_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80014c6:	f001 f879 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	3728      	adds	r7, #40	; 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200000b4 	.word	0x200000b4
 80014d8:	40012000 	.word	0x40012000
 80014dc:	0f000001 	.word	0x0f000001
 80014e0:	00800200 	.word	0x00800200

080014e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	; 0x30
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a35      	ldr	r2, [pc, #212]	; (80015d8 <HAL_ADC_MspInit+0xf4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d163      	bne.n	80015ce <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	4b34      	ldr	r3, [pc, #208]	; (80015dc <HAL_ADC_MspInit+0xf8>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	4a33      	ldr	r2, [pc, #204]	; (80015dc <HAL_ADC_MspInit+0xf8>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001514:	6453      	str	r3, [r2, #68]	; 0x44
 8001516:	4b31      	ldr	r3, [pc, #196]	; (80015dc <HAL_ADC_MspInit+0xf8>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151e:	61bb      	str	r3, [r7, #24]
 8001520:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <HAL_ADC_MspInit+0xf8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a2c      	ldr	r2, [pc, #176]	; (80015dc <HAL_ADC_MspInit+0xf8>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <HAL_ADC_MspInit+0xf8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <HAL_ADC_MspInit+0xf8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a25      	ldr	r2, [pc, #148]	; (80015dc <HAL_ADC_MspInit+0xf8>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b23      	ldr	r3, [pc, #140]	; (80015dc <HAL_ADC_MspInit+0xf8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <HAL_ADC_MspInit+0xf8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a1e      	ldr	r2, [pc, #120]	; (80015dc <HAL_ADC_MspInit+0xf8>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <HAL_ADC_MspInit+0xf8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001576:	2307      	movs	r3, #7
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157a:	2303      	movs	r3, #3
 800157c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	4619      	mov	r1, r3
 8001588:	4815      	ldr	r0, [pc, #84]	; (80015e0 <HAL_ADC_MspInit+0xfc>)
 800158a:	f002 fd77 	bl	800407c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800158e:	230e      	movs	r3, #14
 8001590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001592:	2303      	movs	r3, #3
 8001594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	4619      	mov	r1, r3
 80015a0:	4810      	ldr	r0, [pc, #64]	; (80015e4 <HAL_ADC_MspInit+0x100>)
 80015a2:	f002 fd6b 	bl	800407c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015a6:	2302      	movs	r3, #2
 80015a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015aa:	2303      	movs	r3, #3
 80015ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4619      	mov	r1, r3
 80015b8:	480b      	ldr	r0, [pc, #44]	; (80015e8 <HAL_ADC_MspInit+0x104>)
 80015ba:	f002 fd5f 	bl	800407c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2105      	movs	r1, #5
 80015c2:	2012      	movs	r0, #18
 80015c4:	f002 fb3c 	bl	8003c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80015c8:	2012      	movs	r0, #18
 80015ca:	f002 fb55 	bl	8003c78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80015ce:	bf00      	nop
 80015d0:	3730      	adds	r7, #48	; 0x30
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40012000 	.word	0x40012000
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020800 	.word	0x40020800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40020400 	.word	0x40020400

080015ec <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_CRC_Init+0x20>)
 80015f2:	4a07      	ldr	r2, [pc, #28]	; (8001610 <MX_CRC_Init+0x24>)
 80015f4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_CRC_Init+0x20>)
 80015f8:	f002 fb4c 	bl	8003c94 <HAL_CRC_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001602:	f000 ffdb 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000118 	.word	0x20000118
 8001610:	40023000 	.word	0x40023000

08001614 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <HAL_CRC_MspInit+0x3c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10d      	bne.n	8001642 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <HAL_CRC_MspInit+0x40>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a09      	ldr	r2, [pc, #36]	; (8001654 <HAL_CRC_MspInit+0x40>)
 8001630:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <HAL_CRC_MspInit+0x40>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023000 	.word	0x40023000
 8001654:	40023800 	.word	0x40023800

08001658 <configureTimerForRunTimeStats>:
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
return 0;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <PreSleepProcessing>:
/* USER CODE END DAEMON_TASK_STARTUP_HOOK */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of OsTimerCounter */
  OsTimerCounterHandle = osTimerNew(OsTimerCounter_Callback, osTimerPeriodic, NULL, &OsTimerCounter_attributes);
 80016f0:	4ba9      	ldr	r3, [pc, #676]	; (8001998 <MX_FREERTOS_Init+0x2ac>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	2101      	movs	r1, #1
 80016f6:	48a9      	ldr	r0, [pc, #676]	; (800199c <MX_FREERTOS_Init+0x2b0>)
 80016f8:	f007 fba2 	bl	8008e40 <osTimerNew>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4aa8      	ldr	r2, [pc, #672]	; (80019a0 <MX_FREERTOS_Init+0x2b4>)
 8001700:	6013      	str	r3, [r2, #0]

  /* creation of SystemManagerCounter */
  SystemManagerCounterHandle = osTimerNew(SystemManagerCounter_Callback, osTimerPeriodic, NULL, &SystemManagerCounter_attributes);
 8001702:	4ba8      	ldr	r3, [pc, #672]	; (80019a4 <MX_FREERTOS_Init+0x2b8>)
 8001704:	2200      	movs	r2, #0
 8001706:	2101      	movs	r1, #1
 8001708:	48a7      	ldr	r0, [pc, #668]	; (80019a8 <MX_FREERTOS_Init+0x2bc>)
 800170a:	f007 fb99 	bl	8008e40 <osTimerNew>
 800170e:	4603      	mov	r3, r0
 8001710:	4aa6      	ldr	r2, [pc, #664]	; (80019ac <MX_FREERTOS_Init+0x2c0>)
 8001712:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Os_Init */
  Os_InitHandle = osThreadNew(Task_Os_Init, NULL, &Os_Init_attributes);
 8001714:	4aa6      	ldr	r2, [pc, #664]	; (80019b0 <MX_FREERTOS_Init+0x2c4>)
 8001716:	2100      	movs	r1, #0
 8001718:	48a6      	ldr	r0, [pc, #664]	; (80019b4 <MX_FREERTOS_Init+0x2c8>)
 800171a:	f007 facd 	bl	8008cb8 <osThreadNew>
 800171e:	4603      	mov	r3, r0
 8001720:	4aa5      	ldr	r2, [pc, #660]	; (80019b8 <MX_FREERTOS_Init+0x2cc>)
 8001722:	6013      	str	r3, [r2, #0]

  /* creation of EcuM_Init */
  EcuM_InitHandle = osThreadNew(Task_EcuM_Init, NULL, &EcuM_Init_attributes);
 8001724:	4aa5      	ldr	r2, [pc, #660]	; (80019bc <MX_FREERTOS_Init+0x2d0>)
 8001726:	2100      	movs	r1, #0
 8001728:	48a5      	ldr	r0, [pc, #660]	; (80019c0 <MX_FREERTOS_Init+0x2d4>)
 800172a:	f007 fac5 	bl	8008cb8 <osThreadNew>
 800172e:	4603      	mov	r3, r0
 8001730:	4aa4      	ldr	r2, [pc, #656]	; (80019c4 <MX_FREERTOS_Init+0x2d8>)
 8001732:	6013      	str	r3, [r2, #0]

  /* creation of EcuM_MainFunction */
  EcuM_MainFunctionHandle = osThreadNew(Task_EcuMMainFunction, NULL, &EcuM_MainFunction_attributes);
 8001734:	4aa4      	ldr	r2, [pc, #656]	; (80019c8 <MX_FREERTOS_Init+0x2dc>)
 8001736:	2100      	movs	r1, #0
 8001738:	48a4      	ldr	r0, [pc, #656]	; (80019cc <MX_FREERTOS_Init+0x2e0>)
 800173a:	f007 fabd 	bl	8008cb8 <osThreadNew>
 800173e:	4603      	mov	r3, r0
 8001740:	4aa3      	ldr	r2, [pc, #652]	; (80019d0 <MX_FREERTOS_Init+0x2e4>)
 8001742:	6013      	str	r3, [r2, #0]

  /* creation of BswM_Init */
  BswM_InitHandle = osThreadNew(Task_BswM_Init, NULL, &BswM_Init_attributes);
 8001744:	4aa3      	ldr	r2, [pc, #652]	; (80019d4 <MX_FREERTOS_Init+0x2e8>)
 8001746:	2100      	movs	r1, #0
 8001748:	48a3      	ldr	r0, [pc, #652]	; (80019d8 <MX_FREERTOS_Init+0x2ec>)
 800174a:	f007 fab5 	bl	8008cb8 <osThreadNew>
 800174e:	4603      	mov	r3, r0
 8001750:	4aa2      	ldr	r2, [pc, #648]	; (80019dc <MX_FREERTOS_Init+0x2f0>)
 8001752:	6013      	str	r3, [r2, #0]

  /* creation of BswM_MainFunction */
  BswM_MainFunctionHandle = osThreadNew(Task_BswMMainFunction, NULL, &BswM_MainFunction_attributes);
 8001754:	4aa2      	ldr	r2, [pc, #648]	; (80019e0 <MX_FREERTOS_Init+0x2f4>)
 8001756:	2100      	movs	r1, #0
 8001758:	48a2      	ldr	r0, [pc, #648]	; (80019e4 <MX_FREERTOS_Init+0x2f8>)
 800175a:	f007 faad 	bl	8008cb8 <osThreadNew>
 800175e:	4603      	mov	r3, r0
 8001760:	4aa1      	ldr	r2, [pc, #644]	; (80019e8 <MX_FREERTOS_Init+0x2fc>)
 8001762:	6013      	str	r3, [r2, #0]

  /* creation of WatchdogManager_Init */
  WatchdogManager_InitHandle = osThreadNew(Task_WatchdogManager_Init, NULL, &WatchdogManager_Init_attributes);
 8001764:	4aa1      	ldr	r2, [pc, #644]	; (80019ec <MX_FREERTOS_Init+0x300>)
 8001766:	2100      	movs	r1, #0
 8001768:	48a1      	ldr	r0, [pc, #644]	; (80019f0 <MX_FREERTOS_Init+0x304>)
 800176a:	f007 faa5 	bl	8008cb8 <osThreadNew>
 800176e:	4603      	mov	r3, r0
 8001770:	4aa0      	ldr	r2, [pc, #640]	; (80019f4 <MX_FREERTOS_Init+0x308>)
 8001772:	6013      	str	r3, [r2, #0]

  /* creation of WatchdogManager_MainFunction */
  WatchdogManager_MainFunctionHandle = osThreadNew(Task_WatchdogManager_MainFunction, NULL, &WatchdogManager_MainFunction_attributes);
 8001774:	4aa0      	ldr	r2, [pc, #640]	; (80019f8 <MX_FREERTOS_Init+0x30c>)
 8001776:	2100      	movs	r1, #0
 8001778:	48a0      	ldr	r0, [pc, #640]	; (80019fc <MX_FREERTOS_Init+0x310>)
 800177a:	f007 fa9d 	bl	8008cb8 <osThreadNew>
 800177e:	4603      	mov	r3, r0
 8001780:	4a9f      	ldr	r2, [pc, #636]	; (8001a00 <MX_FREERTOS_Init+0x314>)
 8001782:	6013      	str	r3, [r2, #0]

  /* creation of ErrorManager_Init */
  ErrorManager_InitHandle = osThreadNew(Task_ErrorManager_Init, NULL, &ErrorManager_Init_attributes);
 8001784:	4a9f      	ldr	r2, [pc, #636]	; (8001a04 <MX_FREERTOS_Init+0x318>)
 8001786:	2100      	movs	r1, #0
 8001788:	489f      	ldr	r0, [pc, #636]	; (8001a08 <MX_FREERTOS_Init+0x31c>)
 800178a:	f007 fa95 	bl	8008cb8 <osThreadNew>
 800178e:	4603      	mov	r3, r0
 8001790:	4a9e      	ldr	r2, [pc, #632]	; (8001a0c <MX_FREERTOS_Init+0x320>)
 8001792:	6013      	str	r3, [r2, #0]

  /* creation of ErrorManager_MainFunction */
  ErrorManager_MainFunctionHandle = osThreadNew(Task_ErrorManager_MainFunction, NULL, &ErrorManager_MainFunction_attributes);
 8001794:	4a9e      	ldr	r2, [pc, #632]	; (8001a10 <MX_FREERTOS_Init+0x324>)
 8001796:	2100      	movs	r1, #0
 8001798:	489e      	ldr	r0, [pc, #632]	; (8001a14 <MX_FREERTOS_Init+0x328>)
 800179a:	f007 fa8d 	bl	8008cb8 <osThreadNew>
 800179e:	4603      	mov	r3, r0
 80017a0:	4a9d      	ldr	r2, [pc, #628]	; (8001a18 <MX_FREERTOS_Init+0x32c>)
 80017a2:	6013      	str	r3, [r2, #0]

  /* creation of SystemManager_Init */
  SystemManager_InitHandle = osThreadNew(Task_SystemManager_Init, NULL, &SystemManager_Init_attributes);
 80017a4:	4a9d      	ldr	r2, [pc, #628]	; (8001a1c <MX_FREERTOS_Init+0x330>)
 80017a6:	2100      	movs	r1, #0
 80017a8:	489d      	ldr	r0, [pc, #628]	; (8001a20 <MX_FREERTOS_Init+0x334>)
 80017aa:	f007 fa85 	bl	8008cb8 <osThreadNew>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a9c      	ldr	r2, [pc, #624]	; (8001a24 <MX_FREERTOS_Init+0x338>)
 80017b2:	6013      	str	r3, [r2, #0]

  /* creation of SystemManager_MainFunction */
  SystemManager_MainFunctionHandle = osThreadNew(Task_SystemManager_MainFunction, NULL, &SystemManager_MainFunction_attributes);
 80017b4:	4a9c      	ldr	r2, [pc, #624]	; (8001a28 <MX_FREERTOS_Init+0x33c>)
 80017b6:	2100      	movs	r1, #0
 80017b8:	489c      	ldr	r0, [pc, #624]	; (8001a2c <MX_FREERTOS_Init+0x340>)
 80017ba:	f007 fa7d 	bl	8008cb8 <osThreadNew>
 80017be:	4603      	mov	r3, r0
 80017c0:	4a9b      	ldr	r2, [pc, #620]	; (8001a30 <MX_FREERTOS_Init+0x344>)
 80017c2:	6013      	str	r3, [r2, #0]

  /* creation of ModeManager_Init */
  ModeManager_InitHandle = osThreadNew(Task_ModeManager_Init, NULL, &ModeManager_Init_attributes);
 80017c4:	4a9b      	ldr	r2, [pc, #620]	; (8001a34 <MX_FREERTOS_Init+0x348>)
 80017c6:	2100      	movs	r1, #0
 80017c8:	489b      	ldr	r0, [pc, #620]	; (8001a38 <MX_FREERTOS_Init+0x34c>)
 80017ca:	f007 fa75 	bl	8008cb8 <osThreadNew>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4a9a      	ldr	r2, [pc, #616]	; (8001a3c <MX_FREERTOS_Init+0x350>)
 80017d2:	6013      	str	r3, [r2, #0]

  /* creation of ModeManager_MainFunction */
  ModeManager_MainFunctionHandle = osThreadNew(Task_ModeManager_MainFunction, NULL, &ModeManager_MainFunction_attributes);
 80017d4:	4a9a      	ldr	r2, [pc, #616]	; (8001a40 <MX_FREERTOS_Init+0x354>)
 80017d6:	2100      	movs	r1, #0
 80017d8:	489a      	ldr	r0, [pc, #616]	; (8001a44 <MX_FREERTOS_Init+0x358>)
 80017da:	f007 fa6d 	bl	8008cb8 <osThreadNew>
 80017de:	4603      	mov	r3, r0
 80017e0:	4a99      	ldr	r2, [pc, #612]	; (8001a48 <MX_FREERTOS_Init+0x35c>)
 80017e2:	6013      	str	r3, [r2, #0]

  /* creation of Os_Start */
  Os_StartHandle = osThreadNew(Task_Os_Start, NULL, &Os_Start_attributes);
 80017e4:	4a99      	ldr	r2, [pc, #612]	; (8001a4c <MX_FREERTOS_Init+0x360>)
 80017e6:	2100      	movs	r1, #0
 80017e8:	4899      	ldr	r0, [pc, #612]	; (8001a50 <MX_FREERTOS_Init+0x364>)
 80017ea:	f007 fa65 	bl	8008cb8 <osThreadNew>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4a98      	ldr	r2, [pc, #608]	; (8001a54 <MX_FREERTOS_Init+0x368>)
 80017f2:	6013      	str	r3, [r2, #0]

  /* creation of Crc_Init */
  Crc_InitHandle = osThreadNew(Task_Crc_Init, NULL, &Crc_Init_attributes);
 80017f4:	4a98      	ldr	r2, [pc, #608]	; (8001a58 <MX_FREERTOS_Init+0x36c>)
 80017f6:	2100      	movs	r1, #0
 80017f8:	4898      	ldr	r0, [pc, #608]	; (8001a5c <MX_FREERTOS_Init+0x370>)
 80017fa:	f007 fa5d 	bl	8008cb8 <osThreadNew>
 80017fe:	4603      	mov	r3, r0
 8001800:	4a97      	ldr	r2, [pc, #604]	; (8001a60 <MX_FREERTOS_Init+0x374>)
 8001802:	6013      	str	r3, [r2, #0]

  /* creation of Crc_MainFunction */
  Crc_MainFunctionHandle = osThreadNew(Task_Crc_MainFunction, NULL, &Crc_MainFunction_attributes);
 8001804:	4a97      	ldr	r2, [pc, #604]	; (8001a64 <MX_FREERTOS_Init+0x378>)
 8001806:	2100      	movs	r1, #0
 8001808:	4897      	ldr	r0, [pc, #604]	; (8001a68 <MX_FREERTOS_Init+0x37c>)
 800180a:	f007 fa55 	bl	8008cb8 <osThreadNew>
 800180e:	4603      	mov	r3, r0
 8001810:	4a96      	ldr	r2, [pc, #600]	; (8001a6c <MX_FREERTOS_Init+0x380>)
 8001812:	6013      	str	r3, [r2, #0]

  /* creation of Rte_Init */
  Rte_InitHandle = osThreadNew(Task_Rte_Init, NULL, &Rte_Init_attributes);
 8001814:	4a96      	ldr	r2, [pc, #600]	; (8001a70 <MX_FREERTOS_Init+0x384>)
 8001816:	2100      	movs	r1, #0
 8001818:	4896      	ldr	r0, [pc, #600]	; (8001a74 <MX_FREERTOS_Init+0x388>)
 800181a:	f007 fa4d 	bl	8008cb8 <osThreadNew>
 800181e:	4603      	mov	r3, r0
 8001820:	4a95      	ldr	r2, [pc, #596]	; (8001a78 <MX_FREERTOS_Init+0x38c>)
 8001822:	6013      	str	r3, [r2, #0]

  /* creation of Rte_MainFunction */
  Rte_MainFunctionHandle = osThreadNew(Task_Rte_MainFunction, NULL, &Rte_MainFunction_attributes);
 8001824:	4a95      	ldr	r2, [pc, #596]	; (8001a7c <MX_FREERTOS_Init+0x390>)
 8001826:	2100      	movs	r1, #0
 8001828:	4895      	ldr	r0, [pc, #596]	; (8001a80 <MX_FREERTOS_Init+0x394>)
 800182a:	f007 fa45 	bl	8008cb8 <osThreadNew>
 800182e:	4603      	mov	r3, r0
 8001830:	4a94      	ldr	r2, [pc, #592]	; (8001a84 <MX_FREERTOS_Init+0x398>)
 8001832:	6013      	str	r3, [r2, #0]

  /* creation of Os_StartUpHook */
  Os_StartUpHookHandle = osThreadNew(Task_Os_StartUpHook, NULL, &Os_StartUpHook_attributes);
 8001834:	4a94      	ldr	r2, [pc, #592]	; (8001a88 <MX_FREERTOS_Init+0x39c>)
 8001836:	2100      	movs	r1, #0
 8001838:	4894      	ldr	r0, [pc, #592]	; (8001a8c <MX_FREERTOS_Init+0x3a0>)
 800183a:	f007 fa3d 	bl	8008cb8 <osThreadNew>
 800183e:	4603      	mov	r3, r0
 8001840:	4a93      	ldr	r2, [pc, #588]	; (8001a90 <MX_FREERTOS_Init+0x3a4>)
 8001842:	6013      	str	r3, [r2, #0]

  /* creation of Os_ShutdownHook */
  Os_ShutdownHookHandle = osThreadNew(Task_Os_ShutdownHook, NULL, &Os_ShutdownHook_attributes);
 8001844:	4a93      	ldr	r2, [pc, #588]	; (8001a94 <MX_FREERTOS_Init+0x3a8>)
 8001846:	2100      	movs	r1, #0
 8001848:	4893      	ldr	r0, [pc, #588]	; (8001a98 <MX_FREERTOS_Init+0x3ac>)
 800184a:	f007 fa35 	bl	8008cb8 <osThreadNew>
 800184e:	4603      	mov	r3, r0
 8001850:	4a92      	ldr	r2, [pc, #584]	; (8001a9c <MX_FREERTOS_Init+0x3b0>)
 8001852:	6013      	str	r3, [r2, #0]

  /* creation of NvM_Init */
  NvM_InitHandle = osThreadNew(Task_NvM_Init, NULL, &NvM_Init_attributes);
 8001854:	4a92      	ldr	r2, [pc, #584]	; (8001aa0 <MX_FREERTOS_Init+0x3b4>)
 8001856:	2100      	movs	r1, #0
 8001858:	4892      	ldr	r0, [pc, #584]	; (8001aa4 <MX_FREERTOS_Init+0x3b8>)
 800185a:	f007 fa2d 	bl	8008cb8 <osThreadNew>
 800185e:	4603      	mov	r3, r0
 8001860:	4a91      	ldr	r2, [pc, #580]	; (8001aa8 <MX_FREERTOS_Init+0x3bc>)
 8001862:	6013      	str	r3, [r2, #0]

  /* creation of NvM_MainFunction */
  NvM_MainFunctionHandle = osThreadNew(Task_NvM_MainFunction, NULL, &NvM_MainFunction_attributes);
 8001864:	4a91      	ldr	r2, [pc, #580]	; (8001aac <MX_FREERTOS_Init+0x3c0>)
 8001866:	2100      	movs	r1, #0
 8001868:	4891      	ldr	r0, [pc, #580]	; (8001ab0 <MX_FREERTOS_Init+0x3c4>)
 800186a:	f007 fa25 	bl	8008cb8 <osThreadNew>
 800186e:	4603      	mov	r3, r0
 8001870:	4a90      	ldr	r2, [pc, #576]	; (8001ab4 <MX_FREERTOS_Init+0x3c8>)
 8001872:	6013      	str	r3, [r2, #0]

  /* creation of MemIf_Status */
  MemIf_StatusHandle = osThreadNew(Task_MemIf_Status, NULL, &MemIf_Status_attributes);
 8001874:	4a90      	ldr	r2, [pc, #576]	; (8001ab8 <MX_FREERTOS_Init+0x3cc>)
 8001876:	2100      	movs	r1, #0
 8001878:	4890      	ldr	r0, [pc, #576]	; (8001abc <MX_FREERTOS_Init+0x3d0>)
 800187a:	f007 fa1d 	bl	8008cb8 <osThreadNew>
 800187e:	4603      	mov	r3, r0
 8001880:	4a8f      	ldr	r2, [pc, #572]	; (8001ac0 <MX_FREERTOS_Init+0x3d4>)
 8001882:	6013      	str	r3, [r2, #0]

  /* creation of Fee_Init */
  Fee_InitHandle = osThreadNew(Task_Fee_Init, NULL, &Fee_Init_attributes);
 8001884:	4a8f      	ldr	r2, [pc, #572]	; (8001ac4 <MX_FREERTOS_Init+0x3d8>)
 8001886:	2100      	movs	r1, #0
 8001888:	488f      	ldr	r0, [pc, #572]	; (8001ac8 <MX_FREERTOS_Init+0x3dc>)
 800188a:	f007 fa15 	bl	8008cb8 <osThreadNew>
 800188e:	4603      	mov	r3, r0
 8001890:	4a8e      	ldr	r2, [pc, #568]	; (8001acc <MX_FREERTOS_Init+0x3e0>)
 8001892:	6013      	str	r3, [r2, #0]

  /* creation of Fee_MainFunction */
  Fee_MainFunctionHandle = osThreadNew(Task_Fee_MainFunction, NULL, &Fee_MainFunction_attributes);
 8001894:	4a8e      	ldr	r2, [pc, #568]	; (8001ad0 <MX_FREERTOS_Init+0x3e4>)
 8001896:	2100      	movs	r1, #0
 8001898:	488e      	ldr	r0, [pc, #568]	; (8001ad4 <MX_FREERTOS_Init+0x3e8>)
 800189a:	f007 fa0d 	bl	8008cb8 <osThreadNew>
 800189e:	4603      	mov	r3, r0
 80018a0:	4a8d      	ldr	r2, [pc, #564]	; (8001ad8 <MX_FREERTOS_Init+0x3ec>)
 80018a2:	6013      	str	r3, [r2, #0]

  /* creation of Ea_Init */
  Ea_InitHandle = osThreadNew(Task_Ea_Init, NULL, &Ea_Init_attributes);
 80018a4:	4a8d      	ldr	r2, [pc, #564]	; (8001adc <MX_FREERTOS_Init+0x3f0>)
 80018a6:	2100      	movs	r1, #0
 80018a8:	488d      	ldr	r0, [pc, #564]	; (8001ae0 <MX_FREERTOS_Init+0x3f4>)
 80018aa:	f007 fa05 	bl	8008cb8 <osThreadNew>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a8c      	ldr	r2, [pc, #560]	; (8001ae4 <MX_FREERTOS_Init+0x3f8>)
 80018b2:	6013      	str	r3, [r2, #0]

  /* creation of Ea_MainFunction */
  Ea_MainFunctionHandle = osThreadNew(Task_Ea_MainFunction, NULL, &Ea_MainFunction_attributes);
 80018b4:	4a8c      	ldr	r2, [pc, #560]	; (8001ae8 <MX_FREERTOS_Init+0x3fc>)
 80018b6:	2100      	movs	r1, #0
 80018b8:	488c      	ldr	r0, [pc, #560]	; (8001aec <MX_FREERTOS_Init+0x400>)
 80018ba:	f007 f9fd 	bl	8008cb8 <osThreadNew>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a8b      	ldr	r2, [pc, #556]	; (8001af0 <MX_FREERTOS_Init+0x404>)
 80018c2:	6013      	str	r3, [r2, #0]

  /* creation of VibSen_Init */
  VibSen_InitHandle = osThreadNew(Task_VibSen_Init, NULL, &VibSen_Init_attributes);
 80018c4:	4a8b      	ldr	r2, [pc, #556]	; (8001af4 <MX_FREERTOS_Init+0x408>)
 80018c6:	2100      	movs	r1, #0
 80018c8:	488b      	ldr	r0, [pc, #556]	; (8001af8 <MX_FREERTOS_Init+0x40c>)
 80018ca:	f007 f9f5 	bl	8008cb8 <osThreadNew>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4a8a      	ldr	r2, [pc, #552]	; (8001afc <MX_FREERTOS_Init+0x410>)
 80018d2:	6013      	str	r3, [r2, #0]

  /* creation of VibSen_MainFunction */
  VibSen_MainFunctionHandle = osThreadNew(Task_VibSen_MainFunction, NULL, &VibSen_MainFunction_attributes);
 80018d4:	4a8a      	ldr	r2, [pc, #552]	; (8001b00 <MX_FREERTOS_Init+0x414>)
 80018d6:	2100      	movs	r1, #0
 80018d8:	488a      	ldr	r0, [pc, #552]	; (8001b04 <MX_FREERTOS_Init+0x418>)
 80018da:	f007 f9ed 	bl	8008cb8 <osThreadNew>
 80018de:	4603      	mov	r3, r0
 80018e0:	4a89      	ldr	r2, [pc, #548]	; (8001b08 <MX_FREERTOS_Init+0x41c>)
 80018e2:	6013      	str	r3, [r2, #0]

  /* creation of TemSen_Init */
  TemSen_InitHandle = osThreadNew(Task_TemSen_Init, NULL, &TemSen_Init_attributes);
 80018e4:	4a89      	ldr	r2, [pc, #548]	; (8001b0c <MX_FREERTOS_Init+0x420>)
 80018e6:	2100      	movs	r1, #0
 80018e8:	4889      	ldr	r0, [pc, #548]	; (8001b10 <MX_FREERTOS_Init+0x424>)
 80018ea:	f007 f9e5 	bl	8008cb8 <osThreadNew>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4a88      	ldr	r2, [pc, #544]	; (8001b14 <MX_FREERTOS_Init+0x428>)
 80018f2:	6013      	str	r3, [r2, #0]

  /* creation of TemSen_MainFunction */
  TemSen_MainFunctionHandle = osThreadNew(Task_TemSen_MainFunction, NULL, &TemSen_MainFunction_attributes);
 80018f4:	4a88      	ldr	r2, [pc, #544]	; (8001b18 <MX_FREERTOS_Init+0x42c>)
 80018f6:	2100      	movs	r1, #0
 80018f8:	4888      	ldr	r0, [pc, #544]	; (8001b1c <MX_FREERTOS_Init+0x430>)
 80018fa:	f007 f9dd 	bl	8008cb8 <osThreadNew>
 80018fe:	4603      	mov	r3, r0
 8001900:	4a87      	ldr	r2, [pc, #540]	; (8001b20 <MX_FREERTOS_Init+0x434>)
 8001902:	6013      	str	r3, [r2, #0]

  /* creation of SecAlm_Init */
  SecAlm_InitHandle = osThreadNew(Task_SecAlm_Init, NULL, &SecAlm_Init_attributes);
 8001904:	4a87      	ldr	r2, [pc, #540]	; (8001b24 <MX_FREERTOS_Init+0x438>)
 8001906:	2100      	movs	r1, #0
 8001908:	4887      	ldr	r0, [pc, #540]	; (8001b28 <MX_FREERTOS_Init+0x43c>)
 800190a:	f007 f9d5 	bl	8008cb8 <osThreadNew>
 800190e:	4603      	mov	r3, r0
 8001910:	4a86      	ldr	r2, [pc, #536]	; (8001b2c <MX_FREERTOS_Init+0x440>)
 8001912:	6013      	str	r3, [r2, #0]

  /* creation of SecAlm_MainFunction */
  SecAlm_MainFunctionHandle = osThreadNew(Task_SecAlm_MainFunction, NULL, &SecAlm_MainFunction_attributes);
 8001914:	4a86      	ldr	r2, [pc, #536]	; (8001b30 <MX_FREERTOS_Init+0x444>)
 8001916:	2100      	movs	r1, #0
 8001918:	4886      	ldr	r0, [pc, #536]	; (8001b34 <MX_FREERTOS_Init+0x448>)
 800191a:	f007 f9cd 	bl	8008cb8 <osThreadNew>
 800191e:	4603      	mov	r3, r0
 8001920:	4a85      	ldr	r2, [pc, #532]	; (8001b38 <MX_FREERTOS_Init+0x44c>)
 8001922:	6013      	str	r3, [r2, #0]

  /* creation of PDC_Init */
  PDC_InitHandle = osThreadNew(Task_PDC_Init, NULL, &PDC_Init_attributes);
 8001924:	4a85      	ldr	r2, [pc, #532]	; (8001b3c <MX_FREERTOS_Init+0x450>)
 8001926:	2100      	movs	r1, #0
 8001928:	4885      	ldr	r0, [pc, #532]	; (8001b40 <MX_FREERTOS_Init+0x454>)
 800192a:	f007 f9c5 	bl	8008cb8 <osThreadNew>
 800192e:	4603      	mov	r3, r0
 8001930:	4a84      	ldr	r2, [pc, #528]	; (8001b44 <MX_FREERTOS_Init+0x458>)
 8001932:	6013      	str	r3, [r2, #0]

  /* creation of PDC_MainFunction */
  PDC_MainFunctionHandle = osThreadNew(Task_PDC_MainFunction, NULL, &PDC_MainFunction_attributes);
 8001934:	4a84      	ldr	r2, [pc, #528]	; (8001b48 <MX_FREERTOS_Init+0x45c>)
 8001936:	2100      	movs	r1, #0
 8001938:	4884      	ldr	r0, [pc, #528]	; (8001b4c <MX_FREERTOS_Init+0x460>)
 800193a:	f007 f9bd 	bl	8008cb8 <osThreadNew>
 800193e:	4603      	mov	r3, r0
 8001940:	4a83      	ldr	r2, [pc, #524]	; (8001b50 <MX_FREERTOS_Init+0x464>)
 8001942:	6013      	str	r3, [r2, #0]

  /* creation of LightSen_Init */
  LightSen_InitHandle = osThreadNew(Task_LightSen_Init, NULL, &LightSen_Init_attributes);
 8001944:	4a83      	ldr	r2, [pc, #524]	; (8001b54 <MX_FREERTOS_Init+0x468>)
 8001946:	2100      	movs	r1, #0
 8001948:	4883      	ldr	r0, [pc, #524]	; (8001b58 <MX_FREERTOS_Init+0x46c>)
 800194a:	f007 f9b5 	bl	8008cb8 <osThreadNew>
 800194e:	4603      	mov	r3, r0
 8001950:	4a82      	ldr	r2, [pc, #520]	; (8001b5c <MX_FREERTOS_Init+0x470>)
 8001952:	6013      	str	r3, [r2, #0]

  /* creation of LightSen_MainFunction */
  LightSen_MainFunctionHandle = osThreadNew(Task_LightSen_MainFunction, NULL, &LightSen_MainFunction_attributes);
 8001954:	4a82      	ldr	r2, [pc, #520]	; (8001b60 <MX_FREERTOS_Init+0x474>)
 8001956:	2100      	movs	r1, #0
 8001958:	4882      	ldr	r0, [pc, #520]	; (8001b64 <MX_FREERTOS_Init+0x478>)
 800195a:	f007 f9ad 	bl	8008cb8 <osThreadNew>
 800195e:	4603      	mov	r3, r0
 8001960:	4a81      	ldr	r2, [pc, #516]	; (8001b68 <MX_FREERTOS_Init+0x47c>)
 8001962:	6013      	str	r3, [r2, #0]

  /* creation of IoH_MainFunction */
  IoH_MainFunctionHandle = osThreadNew(Task_IoH_MainFunction, NULL, &IoH_MainFunction_attributes);
 8001964:	4a81      	ldr	r2, [pc, #516]	; (8001b6c <MX_FREERTOS_Init+0x480>)
 8001966:	2100      	movs	r1, #0
 8001968:	4881      	ldr	r0, [pc, #516]	; (8001b70 <MX_FREERTOS_Init+0x484>)
 800196a:	f007 f9a5 	bl	8008cb8 <osThreadNew>
 800196e:	4603      	mov	r3, r0
 8001970:	4a80      	ldr	r2, [pc, #512]	; (8001b74 <MX_FREERTOS_Init+0x488>)
 8001972:	6013      	str	r3, [r2, #0]

  /* creation of IntLights_Init */
  IntLights_InitHandle = osThreadNew(Task_IntLights_Init, NULL, &IntLights_Init_attributes);
 8001974:	4a80      	ldr	r2, [pc, #512]	; (8001b78 <MX_FREERTOS_Init+0x48c>)
 8001976:	2100      	movs	r1, #0
 8001978:	4880      	ldr	r0, [pc, #512]	; (8001b7c <MX_FREERTOS_Init+0x490>)
 800197a:	f007 f99d 	bl	8008cb8 <osThreadNew>
 800197e:	4603      	mov	r3, r0
 8001980:	4a7f      	ldr	r2, [pc, #508]	; (8001b80 <MX_FREERTOS_Init+0x494>)
 8001982:	6013      	str	r3, [r2, #0]

  /* creation of IntLights_MainFunction */
  IntLights_MainFunctionHandle = osThreadNew(Task_IntLights_MainFunction, NULL, &IntLights_MainFunction_attributes);
 8001984:	4a7f      	ldr	r2, [pc, #508]	; (8001b84 <MX_FREERTOS_Init+0x498>)
 8001986:	2100      	movs	r1, #0
 8001988:	487f      	ldr	r0, [pc, #508]	; (8001b88 <MX_FREERTOS_Init+0x49c>)
 800198a:	f007 f995 	bl	8008cb8 <osThreadNew>
 800198e:	4603      	mov	r3, r0
 8001990:	4a7e      	ldr	r2, [pc, #504]	; (8001b8c <MX_FREERTOS_Init+0x4a0>)
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	e0fc      	b.n	8001b90 <MX_FREERTOS_Init+0x4a4>
 8001996:	bf00      	nop
 8001998:	0800cd98 	.word	0x0800cd98
 800199c:	08002185 	.word	0x08002185
 80019a0:	200001e8 	.word	0x200001e8
 80019a4:	0800cda8 	.word	0x0800cda8
 80019a8:	08002199 	.word	0x08002199
 80019ac:	200001ec 	.word	0x200001ec
 80019b0:	0800c690 	.word	0x0800c690
 80019b4:	08001e65 	.word	0x08001e65
 80019b8:	20000120 	.word	0x20000120
 80019bc:	0800c6b4 	.word	0x0800c6b4
 80019c0:	08001e75 	.word	0x08001e75
 80019c4:	20000124 	.word	0x20000124
 80019c8:	0800c6d8 	.word	0x0800c6d8
 80019cc:	08001e85 	.word	0x08001e85
 80019d0:	20000128 	.word	0x20000128
 80019d4:	0800c6fc 	.word	0x0800c6fc
 80019d8:	08001e95 	.word	0x08001e95
 80019dc:	2000012c 	.word	0x2000012c
 80019e0:	0800c720 	.word	0x0800c720
 80019e4:	08001ea5 	.word	0x08001ea5
 80019e8:	20000130 	.word	0x20000130
 80019ec:	0800c744 	.word	0x0800c744
 80019f0:	08001eb5 	.word	0x08001eb5
 80019f4:	20000134 	.word	0x20000134
 80019f8:	0800c768 	.word	0x0800c768
 80019fc:	08001ec5 	.word	0x08001ec5
 8001a00:	20000138 	.word	0x20000138
 8001a04:	0800c78c 	.word	0x0800c78c
 8001a08:	08001ed5 	.word	0x08001ed5
 8001a0c:	2000013c 	.word	0x2000013c
 8001a10:	0800c7b0 	.word	0x0800c7b0
 8001a14:	08001ee5 	.word	0x08001ee5
 8001a18:	20000140 	.word	0x20000140
 8001a1c:	0800c7d4 	.word	0x0800c7d4
 8001a20:	08001ef5 	.word	0x08001ef5
 8001a24:	20000144 	.word	0x20000144
 8001a28:	0800c7f8 	.word	0x0800c7f8
 8001a2c:	08001f05 	.word	0x08001f05
 8001a30:	20000148 	.word	0x20000148
 8001a34:	0800c81c 	.word	0x0800c81c
 8001a38:	08001f15 	.word	0x08001f15
 8001a3c:	2000014c 	.word	0x2000014c
 8001a40:	0800c840 	.word	0x0800c840
 8001a44:	08001f25 	.word	0x08001f25
 8001a48:	20000150 	.word	0x20000150
 8001a4c:	0800c864 	.word	0x0800c864
 8001a50:	08001f35 	.word	0x08001f35
 8001a54:	20000154 	.word	0x20000154
 8001a58:	0800c888 	.word	0x0800c888
 8001a5c:	08001f45 	.word	0x08001f45
 8001a60:	20000158 	.word	0x20000158
 8001a64:	0800c8ac 	.word	0x0800c8ac
 8001a68:	08001f55 	.word	0x08001f55
 8001a6c:	2000015c 	.word	0x2000015c
 8001a70:	0800c8d0 	.word	0x0800c8d0
 8001a74:	08001f65 	.word	0x08001f65
 8001a78:	20000160 	.word	0x20000160
 8001a7c:	0800c8f4 	.word	0x0800c8f4
 8001a80:	08001f75 	.word	0x08001f75
 8001a84:	20000164 	.word	0x20000164
 8001a88:	0800c918 	.word	0x0800c918
 8001a8c:	08001f85 	.word	0x08001f85
 8001a90:	20000168 	.word	0x20000168
 8001a94:	0800c93c 	.word	0x0800c93c
 8001a98:	08001f95 	.word	0x08001f95
 8001a9c:	2000016c 	.word	0x2000016c
 8001aa0:	0800c960 	.word	0x0800c960
 8001aa4:	08001fa5 	.word	0x08001fa5
 8001aa8:	20000170 	.word	0x20000170
 8001aac:	0800c984 	.word	0x0800c984
 8001ab0:	08001fb5 	.word	0x08001fb5
 8001ab4:	20000174 	.word	0x20000174
 8001ab8:	0800c9a8 	.word	0x0800c9a8
 8001abc:	08001fc5 	.word	0x08001fc5
 8001ac0:	20000178 	.word	0x20000178
 8001ac4:	0800c9cc 	.word	0x0800c9cc
 8001ac8:	08001fd5 	.word	0x08001fd5
 8001acc:	2000017c 	.word	0x2000017c
 8001ad0:	0800c9f0 	.word	0x0800c9f0
 8001ad4:	08001fe5 	.word	0x08001fe5
 8001ad8:	20000180 	.word	0x20000180
 8001adc:	0800ca14 	.word	0x0800ca14
 8001ae0:	08001ff5 	.word	0x08001ff5
 8001ae4:	20000184 	.word	0x20000184
 8001ae8:	0800ca38 	.word	0x0800ca38
 8001aec:	08002005 	.word	0x08002005
 8001af0:	20000188 	.word	0x20000188
 8001af4:	0800ca5c 	.word	0x0800ca5c
 8001af8:	08002015 	.word	0x08002015
 8001afc:	2000018c 	.word	0x2000018c
 8001b00:	0800ca80 	.word	0x0800ca80
 8001b04:	08002025 	.word	0x08002025
 8001b08:	20000190 	.word	0x20000190
 8001b0c:	0800caa4 	.word	0x0800caa4
 8001b10:	08002035 	.word	0x08002035
 8001b14:	20000194 	.word	0x20000194
 8001b18:	0800cac8 	.word	0x0800cac8
 8001b1c:	08002045 	.word	0x08002045
 8001b20:	20000198 	.word	0x20000198
 8001b24:	0800caec 	.word	0x0800caec
 8001b28:	08002055 	.word	0x08002055
 8001b2c:	2000019c 	.word	0x2000019c
 8001b30:	0800cb10 	.word	0x0800cb10
 8001b34:	08002065 	.word	0x08002065
 8001b38:	200001a0 	.word	0x200001a0
 8001b3c:	0800cb34 	.word	0x0800cb34
 8001b40:	08002075 	.word	0x08002075
 8001b44:	200001a4 	.word	0x200001a4
 8001b48:	0800cb58 	.word	0x0800cb58
 8001b4c:	08002085 	.word	0x08002085
 8001b50:	200001a8 	.word	0x200001a8
 8001b54:	0800cb7c 	.word	0x0800cb7c
 8001b58:	08002095 	.word	0x08002095
 8001b5c:	200001ac 	.word	0x200001ac
 8001b60:	0800cba0 	.word	0x0800cba0
 8001b64:	080020a5 	.word	0x080020a5
 8001b68:	200001b0 	.word	0x200001b0
 8001b6c:	0800cbc4 	.word	0x0800cbc4
 8001b70:	080020b5 	.word	0x080020b5
 8001b74:	200001b4 	.word	0x200001b4
 8001b78:	0800cbe8 	.word	0x0800cbe8
 8001b7c:	080020c5 	.word	0x080020c5
 8001b80:	200001b8 	.word	0x200001b8
 8001b84:	0800cc0c 	.word	0x0800cc0c
 8001b88:	080020d5 	.word	0x080020d5
 8001b8c:	200001bc 	.word	0x200001bc

  /* creation of HVAC_Init */
  HVAC_InitHandle = osThreadNew(Task_HVAC_Init, NULL, &HVAC_Init_attributes);
 8001b90:	4a6a      	ldr	r2, [pc, #424]	; (8001d3c <MX_FREERTOS_Init+0x650>)
 8001b92:	2100      	movs	r1, #0
 8001b94:	486a      	ldr	r0, [pc, #424]	; (8001d40 <MX_FREERTOS_Init+0x654>)
 8001b96:	f007 f88f 	bl	8008cb8 <osThreadNew>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4a69      	ldr	r2, [pc, #420]	; (8001d44 <MX_FREERTOS_Init+0x658>)
 8001b9e:	6013      	str	r3, [r2, #0]

  /* creation of HVAC_MainFunction */
  HVAC_MainFunctionHandle = osThreadNew(Task_HVAC_MainFunction, NULL, &HVAC_MainFunction_attributes);
 8001ba0:	4a69      	ldr	r2, [pc, #420]	; (8001d48 <MX_FREERTOS_Init+0x65c>)
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4869      	ldr	r0, [pc, #420]	; (8001d4c <MX_FREERTOS_Init+0x660>)
 8001ba6:	f007 f887 	bl	8008cb8 <osThreadNew>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4a68      	ldr	r2, [pc, #416]	; (8001d50 <MX_FREERTOS_Init+0x664>)
 8001bae:	6013      	str	r3, [r2, #0]

  /* creation of ExtLights_Init */
  ExtLights_InitHandle = osThreadNew(Task_ExtLights_Init, NULL, &ExtLights_Init_attributes);
 8001bb0:	4a68      	ldr	r2, [pc, #416]	; (8001d54 <MX_FREERTOS_Init+0x668>)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4868      	ldr	r0, [pc, #416]	; (8001d58 <MX_FREERTOS_Init+0x66c>)
 8001bb6:	f007 f87f 	bl	8008cb8 <osThreadNew>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4a67      	ldr	r2, [pc, #412]	; (8001d5c <MX_FREERTOS_Init+0x670>)
 8001bbe:	6013      	str	r3, [r2, #0]

  /* creation of ExtLights_MainFunction */
  ExtLights_MainFunctionHandle = osThreadNew(Task_ExtLights_MainFunction, NULL, &ExtLights_MainFunction_attributes);
 8001bc0:	4a67      	ldr	r2, [pc, #412]	; (8001d60 <MX_FREERTOS_Init+0x674>)
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4867      	ldr	r0, [pc, #412]	; (8001d64 <MX_FREERTOS_Init+0x678>)
 8001bc6:	f007 f877 	bl	8008cb8 <osThreadNew>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4a66      	ldr	r2, [pc, #408]	; (8001d68 <MX_FREERTOS_Init+0x67c>)
 8001bce:	6013      	str	r3, [r2, #0]

  /* creation of DiagMonH_MainFunction */
  DiagMonH_MainFunctionHandle = osThreadNew(Task_DiagMonH_MainFunction, NULL, &DiagMonH_MainFunction_attributes);
 8001bd0:	4a66      	ldr	r2, [pc, #408]	; (8001d6c <MX_FREERTOS_Init+0x680>)
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4866      	ldr	r0, [pc, #408]	; (8001d70 <MX_FREERTOS_Init+0x684>)
 8001bd6:	f007 f86f 	bl	8008cb8 <osThreadNew>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4a65      	ldr	r2, [pc, #404]	; (8001d74 <MX_FREERTOS_Init+0x688>)
 8001bde:	6013      	str	r3, [r2, #0]

  /* creation of ComMon_MainFunction */
  ComMon_MainFunctionHandle = osThreadNew(Task_ComMon_MainFunction, NULL, &ComMon_MainFunction_attributes);
 8001be0:	4a65      	ldr	r2, [pc, #404]	; (8001d78 <MX_FREERTOS_Init+0x68c>)
 8001be2:	2100      	movs	r1, #0
 8001be4:	4865      	ldr	r0, [pc, #404]	; (8001d7c <MX_FREERTOS_Init+0x690>)
 8001be6:	f007 f867 	bl	8008cb8 <osThreadNew>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4a64      	ldr	r2, [pc, #400]	; (8001d80 <MX_FREERTOS_Init+0x694>)
 8001bee:	6013      	str	r3, [r2, #0]

  /* creation of CenLoc_Init */
  CenLoc_InitHandle = osThreadNew(Task_CenLoc_Init, NULL, &CenLoc_Init_attributes);
 8001bf0:	4a64      	ldr	r2, [pc, #400]	; (8001d84 <MX_FREERTOS_Init+0x698>)
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4864      	ldr	r0, [pc, #400]	; (8001d88 <MX_FREERTOS_Init+0x69c>)
 8001bf6:	f007 f85f 	bl	8008cb8 <osThreadNew>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a63      	ldr	r2, [pc, #396]	; (8001d8c <MX_FREERTOS_Init+0x6a0>)
 8001bfe:	6013      	str	r3, [r2, #0]

  /* creation of CenLoc_MainFunction */
  CenLoc_MainFunctionHandle = osThreadNew(Task_CenLoc_MainFunction, NULL, &CenLoc_MainFunction_attributes);
 8001c00:	4a63      	ldr	r2, [pc, #396]	; (8001d90 <MX_FREERTOS_Init+0x6a4>)
 8001c02:	2100      	movs	r1, #0
 8001c04:	4863      	ldr	r0, [pc, #396]	; (8001d94 <MX_FREERTOS_Init+0x6a8>)
 8001c06:	f007 f857 	bl	8008cb8 <osThreadNew>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4a62      	ldr	r2, [pc, #392]	; (8001d98 <MX_FREERTOS_Init+0x6ac>)
 8001c0e:	6013      	str	r3, [r2, #0]

  /* creation of BTC_Init */
  BTC_InitHandle = osThreadNew(Task_BTC_Init, NULL, &BTC_Init_attributes);
 8001c10:	4a62      	ldr	r2, [pc, #392]	; (8001d9c <MX_FREERTOS_Init+0x6b0>)
 8001c12:	2100      	movs	r1, #0
 8001c14:	4862      	ldr	r0, [pc, #392]	; (8001da0 <MX_FREERTOS_Init+0x6b4>)
 8001c16:	f007 f84f 	bl	8008cb8 <osThreadNew>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4a61      	ldr	r2, [pc, #388]	; (8001da4 <MX_FREERTOS_Init+0x6b8>)
 8001c1e:	6013      	str	r3, [r2, #0]

  /* creation of BTC_MainFunction */
  BTC_MainFunctionHandle = osThreadNew(Task_BTC_MainFunction, NULL, &BTC_MainFunction_attributes);
 8001c20:	4a61      	ldr	r2, [pc, #388]	; (8001da8 <MX_FREERTOS_Init+0x6bc>)
 8001c22:	2100      	movs	r1, #0
 8001c24:	4861      	ldr	r0, [pc, #388]	; (8001dac <MX_FREERTOS_Init+0x6c0>)
 8001c26:	f007 f847 	bl	8008cb8 <osThreadNew>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4a60      	ldr	r2, [pc, #384]	; (8001db0 <MX_FREERTOS_Init+0x6c4>)
 8001c2e:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of eventPOR */
  eventPORHandle = osEventFlagsNew(&eventPOR_attributes);
 8001c30:	4860      	ldr	r0, [pc, #384]	; (8001db4 <MX_FREERTOS_Init+0x6c8>)
 8001c32:	f007 f981 	bl	8008f38 <osEventFlagsNew>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4a5f      	ldr	r2, [pc, #380]	; (8001db8 <MX_FREERTOS_Init+0x6cc>)
 8001c3a:	6013      	str	r3, [r2, #0]

  /* creation of eventHWR */
  eventHWRHandle = osEventFlagsNew(&eventHWR_attributes);
 8001c3c:	485f      	ldr	r0, [pc, #380]	; (8001dbc <MX_FREERTOS_Init+0x6d0>)
 8001c3e:	f007 f97b 	bl	8008f38 <osEventFlagsNew>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4a5e      	ldr	r2, [pc, #376]	; (8001dc0 <MX_FREERTOS_Init+0x6d4>)
 8001c46:	6013      	str	r3, [r2, #0]

  /* creation of eventSWR */
  eventSWRHandle = osEventFlagsNew(&eventSWR_attributes);
 8001c48:	485e      	ldr	r0, [pc, #376]	; (8001dc4 <MX_FREERTOS_Init+0x6d8>)
 8001c4a:	f007 f975 	bl	8008f38 <osEventFlagsNew>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4a5d      	ldr	r2, [pc, #372]	; (8001dc8 <MX_FREERTOS_Init+0x6dc>)
 8001c52:	6013      	str	r3, [r2, #0]

  /* creation of eventCoreReset */
  eventCoreResetHandle = osEventFlagsNew(&eventCoreReset_attributes);
 8001c54:	485d      	ldr	r0, [pc, #372]	; (8001dcc <MX_FREERTOS_Init+0x6e0>)
 8001c56:	f007 f96f 	bl	8008f38 <osEventFlagsNew>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4a5c      	ldr	r2, [pc, #368]	; (8001dd0 <MX_FREERTOS_Init+0x6e4>)
 8001c5e:	6013      	str	r3, [r2, #0]

  /* creation of eventMemManage */
  eventMemManageHandle = osEventFlagsNew(&eventMemManage_attributes);
 8001c60:	485c      	ldr	r0, [pc, #368]	; (8001dd4 <MX_FREERTOS_Init+0x6e8>)
 8001c62:	f007 f969 	bl	8008f38 <osEventFlagsNew>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4a5b      	ldr	r2, [pc, #364]	; (8001dd8 <MX_FREERTOS_Init+0x6ec>)
 8001c6a:	6013      	str	r3, [r2, #0]

  /* creation of eventNMI */
  eventNMIHandle = osEventFlagsNew(&eventNMI_attributes);
 8001c6c:	485b      	ldr	r0, [pc, #364]	; (8001ddc <MX_FREERTOS_Init+0x6f0>)
 8001c6e:	f007 f963 	bl	8008f38 <osEventFlagsNew>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4a5a      	ldr	r2, [pc, #360]	; (8001de0 <MX_FREERTOS_Init+0x6f4>)
 8001c76:	6013      	str	r3, [r2, #0]

  /* creation of eventHardFault */
  eventHardFaultHandle = osEventFlagsNew(&eventHardFault_attributes);
 8001c78:	485a      	ldr	r0, [pc, #360]	; (8001de4 <MX_FREERTOS_Init+0x6f8>)
 8001c7a:	f007 f95d 	bl	8008f38 <osEventFlagsNew>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4a59      	ldr	r2, [pc, #356]	; (8001de8 <MX_FREERTOS_Init+0x6fc>)
 8001c82:	6013      	str	r3, [r2, #0]

  /* creation of eventBusFault */
  eventBusFaultHandle = osEventFlagsNew(&eventBusFault_attributes);
 8001c84:	4859      	ldr	r0, [pc, #356]	; (8001dec <MX_FREERTOS_Init+0x700>)
 8001c86:	f007 f957 	bl	8008f38 <osEventFlagsNew>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4a58      	ldr	r2, [pc, #352]	; (8001df0 <MX_FREERTOS_Init+0x704>)
 8001c8e:	6013      	str	r3, [r2, #0]

  /* creation of eventUsageFault */
  eventUsageFaultHandle = osEventFlagsNew(&eventUsageFault_attributes);
 8001c90:	4858      	ldr	r0, [pc, #352]	; (8001df4 <MX_FREERTOS_Init+0x708>)
 8001c92:	f007 f951 	bl	8008f38 <osEventFlagsNew>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4a57      	ldr	r2, [pc, #348]	; (8001df8 <MX_FREERTOS_Init+0x70c>)
 8001c9a:	6013      	str	r3, [r2, #0]

  /* creation of eventDebugMon */
  eventDebugMonHandle = osEventFlagsNew(&eventDebugMon_attributes);
 8001c9c:	4857      	ldr	r0, [pc, #348]	; (8001dfc <MX_FREERTOS_Init+0x710>)
 8001c9e:	f007 f94b 	bl	8008f38 <osEventFlagsNew>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a56      	ldr	r2, [pc, #344]	; (8001e00 <MX_FREERTOS_Init+0x714>)
 8001ca6:	6013      	str	r3, [r2, #0]

  /* creation of eventPVD_IRQ */
  eventPVD_IRQHandle = osEventFlagsNew(&eventPVD_IRQ_attributes);
 8001ca8:	4856      	ldr	r0, [pc, #344]	; (8001e04 <MX_FREERTOS_Init+0x718>)
 8001caa:	f007 f945 	bl	8008f38 <osEventFlagsNew>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4a55      	ldr	r2, [pc, #340]	; (8001e08 <MX_FREERTOS_Init+0x71c>)
 8001cb2:	6013      	str	r3, [r2, #0]

  /* creation of eventFlash_IRQ */
  eventFlash_IRQHandle = osEventFlagsNew(&eventFlash_IRQ_attributes);
 8001cb4:	4855      	ldr	r0, [pc, #340]	; (8001e0c <MX_FREERTOS_Init+0x720>)
 8001cb6:	f007 f93f 	bl	8008f38 <osEventFlagsNew>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4a54      	ldr	r2, [pc, #336]	; (8001e10 <MX_FREERTOS_Init+0x724>)
 8001cbe:	6013      	str	r3, [r2, #0]

  /* creation of eventRCC_IRQ */
  eventRCC_IRQHandle = osEventFlagsNew(&eventRCC_IRQ_attributes);
 8001cc0:	4854      	ldr	r0, [pc, #336]	; (8001e14 <MX_FREERTOS_Init+0x728>)
 8001cc2:	f007 f939 	bl	8008f38 <osEventFlagsNew>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4a53      	ldr	r2, [pc, #332]	; (8001e18 <MX_FREERTOS_Init+0x72c>)
 8001cca:	6013      	str	r3, [r2, #0]

  /* creation of eventTIM1_IRQ */
  eventTIM1_IRQHandle = osEventFlagsNew(&eventTIM1_IRQ_attributes);
 8001ccc:	4853      	ldr	r0, [pc, #332]	; (8001e1c <MX_FREERTOS_Init+0x730>)
 8001cce:	f007 f933 	bl	8008f38 <osEventFlagsNew>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4a52      	ldr	r2, [pc, #328]	; (8001e20 <MX_FREERTOS_Init+0x734>)
 8001cd6:	6013      	str	r3, [r2, #0]

  /* creation of eventTIM10_IRQ */
  eventTIM10_IRQHandle = osEventFlagsNew(&eventTIM10_IRQ_attributes);
 8001cd8:	4852      	ldr	r0, [pc, #328]	; (8001e24 <MX_FREERTOS_Init+0x738>)
 8001cda:	f007 f92d 	bl	8008f38 <osEventFlagsNew>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4a51      	ldr	r2, [pc, #324]	; (8001e28 <MX_FREERTOS_Init+0x73c>)
 8001ce2:	6013      	str	r3, [r2, #0]

  /* creation of eventTIM2_IRQ */
  eventTIM2_IRQHandle = osEventFlagsNew(&eventTIM2_IRQ_attributes);
 8001ce4:	4851      	ldr	r0, [pc, #324]	; (8001e2c <MX_FREERTOS_Init+0x740>)
 8001ce6:	f007 f927 	bl	8008f38 <osEventFlagsNew>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4a50      	ldr	r2, [pc, #320]	; (8001e30 <MX_FREERTOS_Init+0x744>)
 8001cee:	6013      	str	r3, [r2, #0]

  /* creation of eventTIM3_IRQ */
  eventTIM3_IRQHandle = osEventFlagsNew(&eventTIM3_IRQ_attributes);
 8001cf0:	4850      	ldr	r0, [pc, #320]	; (8001e34 <MX_FREERTOS_Init+0x748>)
 8001cf2:	f007 f921 	bl	8008f38 <osEventFlagsNew>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4a4f      	ldr	r2, [pc, #316]	; (8001e38 <MX_FREERTOS_Init+0x74c>)
 8001cfa:	6013      	str	r3, [r2, #0]

  /* creation of eventTIM4_IRQ */
  eventTIM4_IRQHandle = osEventFlagsNew(&eventTIM4_IRQ_attributes);
 8001cfc:	484f      	ldr	r0, [pc, #316]	; (8001e3c <MX_FREERTOS_Init+0x750>)
 8001cfe:	f007 f91b 	bl	8008f38 <osEventFlagsNew>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4a4e      	ldr	r2, [pc, #312]	; (8001e40 <MX_FREERTOS_Init+0x754>)
 8001d06:	6013      	str	r3, [r2, #0]

  /* creation of eventSPI2_IRQ */
  eventSPI2_IRQHandle = osEventFlagsNew(&eventSPI2_IRQ_attributes);
 8001d08:	484e      	ldr	r0, [pc, #312]	; (8001e44 <MX_FREERTOS_Init+0x758>)
 8001d0a:	f007 f915 	bl	8008f38 <osEventFlagsNew>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4a4d      	ldr	r2, [pc, #308]	; (8001e48 <MX_FREERTOS_Init+0x75c>)
 8001d12:	6013      	str	r3, [r2, #0]

  /* creation of eventSPI3_IRQ */
  eventSPI3_IRQHandle = osEventFlagsNew(&eventSPI3_IRQ_attributes);
 8001d14:	484d      	ldr	r0, [pc, #308]	; (8001e4c <MX_FREERTOS_Init+0x760>)
 8001d16:	f007 f90f 	bl	8008f38 <osEventFlagsNew>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4a4c      	ldr	r2, [pc, #304]	; (8001e50 <MX_FREERTOS_Init+0x764>)
 8001d1e:	6013      	str	r3, [r2, #0]

  /* creation of eventUSART1_IRQ */
  eventUSART1_IRQHandle = osEventFlagsNew(&eventUSART1_IRQ_attributes);
 8001d20:	484c      	ldr	r0, [pc, #304]	; (8001e54 <MX_FREERTOS_Init+0x768>)
 8001d22:	f007 f909 	bl	8008f38 <osEventFlagsNew>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a4b      	ldr	r2, [pc, #300]	; (8001e58 <MX_FREERTOS_Init+0x76c>)
 8001d2a:	6013      	str	r3, [r2, #0]

  /* creation of eventWDGR */
  eventWDGRHandle = osEventFlagsNew(&eventWDGR_attributes);
 8001d2c:	484b      	ldr	r0, [pc, #300]	; (8001e5c <MX_FREERTOS_Init+0x770>)
 8001d2e:	f007 f903 	bl	8008f38 <osEventFlagsNew>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4a4a      	ldr	r2, [pc, #296]	; (8001e60 <MX_FREERTOS_Init+0x774>)
 8001d36:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	0800cc30 	.word	0x0800cc30
 8001d40:	080020e5 	.word	0x080020e5
 8001d44:	200001c0 	.word	0x200001c0
 8001d48:	0800cc54 	.word	0x0800cc54
 8001d4c:	080020f5 	.word	0x080020f5
 8001d50:	200001c4 	.word	0x200001c4
 8001d54:	0800cc78 	.word	0x0800cc78
 8001d58:	08002105 	.word	0x08002105
 8001d5c:	200001c8 	.word	0x200001c8
 8001d60:	0800cc9c 	.word	0x0800cc9c
 8001d64:	08002115 	.word	0x08002115
 8001d68:	200001cc 	.word	0x200001cc
 8001d6c:	0800ccc0 	.word	0x0800ccc0
 8001d70:	08002125 	.word	0x08002125
 8001d74:	200001d0 	.word	0x200001d0
 8001d78:	0800cce4 	.word	0x0800cce4
 8001d7c:	08002135 	.word	0x08002135
 8001d80:	200001d4 	.word	0x200001d4
 8001d84:	0800cd08 	.word	0x0800cd08
 8001d88:	08002145 	.word	0x08002145
 8001d8c:	200001d8 	.word	0x200001d8
 8001d90:	0800cd2c 	.word	0x0800cd2c
 8001d94:	08002155 	.word	0x08002155
 8001d98:	200001dc 	.word	0x200001dc
 8001d9c:	0800cd50 	.word	0x0800cd50
 8001da0:	08002165 	.word	0x08002165
 8001da4:	200001e0 	.word	0x200001e0
 8001da8:	0800cd74 	.word	0x0800cd74
 8001dac:	08002175 	.word	0x08002175
 8001db0:	200001e4 	.word	0x200001e4
 8001db4:	0800cdb8 	.word	0x0800cdb8
 8001db8:	200001f0 	.word	0x200001f0
 8001dbc:	0800cdc8 	.word	0x0800cdc8
 8001dc0:	200001f4 	.word	0x200001f4
 8001dc4:	0800cdd8 	.word	0x0800cdd8
 8001dc8:	200001f8 	.word	0x200001f8
 8001dcc:	0800cde8 	.word	0x0800cde8
 8001dd0:	200001fc 	.word	0x200001fc
 8001dd4:	0800cdf8 	.word	0x0800cdf8
 8001dd8:	20000200 	.word	0x20000200
 8001ddc:	0800ce08 	.word	0x0800ce08
 8001de0:	20000204 	.word	0x20000204
 8001de4:	0800ce18 	.word	0x0800ce18
 8001de8:	20000208 	.word	0x20000208
 8001dec:	0800ce28 	.word	0x0800ce28
 8001df0:	2000020c 	.word	0x2000020c
 8001df4:	0800ce38 	.word	0x0800ce38
 8001df8:	20000210 	.word	0x20000210
 8001dfc:	0800ce48 	.word	0x0800ce48
 8001e00:	20000214 	.word	0x20000214
 8001e04:	0800ce58 	.word	0x0800ce58
 8001e08:	20000218 	.word	0x20000218
 8001e0c:	0800ce68 	.word	0x0800ce68
 8001e10:	2000021c 	.word	0x2000021c
 8001e14:	0800ce78 	.word	0x0800ce78
 8001e18:	20000220 	.word	0x20000220
 8001e1c:	0800ce88 	.word	0x0800ce88
 8001e20:	20000224 	.word	0x20000224
 8001e24:	0800ce98 	.word	0x0800ce98
 8001e28:	20000228 	.word	0x20000228
 8001e2c:	0800cea8 	.word	0x0800cea8
 8001e30:	2000022c 	.word	0x2000022c
 8001e34:	0800ceb8 	.word	0x0800ceb8
 8001e38:	20000230 	.word	0x20000230
 8001e3c:	0800cec8 	.word	0x0800cec8
 8001e40:	20000234 	.word	0x20000234
 8001e44:	0800ced8 	.word	0x0800ced8
 8001e48:	20000238 	.word	0x20000238
 8001e4c:	0800cee8 	.word	0x0800cee8
 8001e50:	2000023c 	.word	0x2000023c
 8001e54:	0800cef8 	.word	0x0800cef8
 8001e58:	20000240 	.word	0x20000240
 8001e5c:	0800cf08 	.word	0x0800cf08
 8001e60:	20000244 	.word	0x20000244

08001e64 <Task_Os_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_Os_Init */
void Task_Os_Init(void *argument)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Os_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f006 ffb6 	bl	8008dde <osDelay>
 8001e72:	e7fb      	b.n	8001e6c <Task_Os_Init+0x8>

08001e74 <Task_EcuM_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_EcuM_Init */
void Task_EcuM_Init(void *argument)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_EcuM_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f006 ffae 	bl	8008dde <osDelay>
 8001e82:	e7fb      	b.n	8001e7c <Task_EcuM_Init+0x8>

08001e84 <Task_EcuMMainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_EcuMMainFunction */
void Task_EcuMMainFunction(void *argument)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_EcuMMainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f006 ffa6 	bl	8008dde <osDelay>
 8001e92:	e7fb      	b.n	8001e8c <Task_EcuMMainFunction+0x8>

08001e94 <Task_BswM_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_BswM_Init */
void Task_BswM_Init(void *argument)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_BswM_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f006 ff9e 	bl	8008dde <osDelay>
 8001ea2:	e7fb      	b.n	8001e9c <Task_BswM_Init+0x8>

08001ea4 <Task_BswMMainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_BswMMainFunction */
void Task_BswMMainFunction(void *argument)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_BswMMainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001eac:	2001      	movs	r0, #1
 8001eae:	f006 ff96 	bl	8008dde <osDelay>
 8001eb2:	e7fb      	b.n	8001eac <Task_BswMMainFunction+0x8>

08001eb4 <Task_WatchdogManager_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_WatchdogManager_Init */
void Task_WatchdogManager_Init(void *argument)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_WatchdogManager_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f006 ff8e 	bl	8008dde <osDelay>
 8001ec2:	e7fb      	b.n	8001ebc <Task_WatchdogManager_Init+0x8>

08001ec4 <Task_WatchdogManager_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_WatchdogManager_MainFunction */
void Task_WatchdogManager_MainFunction(void *argument)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_WatchdogManager_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f006 ff86 	bl	8008dde <osDelay>
 8001ed2:	e7fb      	b.n	8001ecc <Task_WatchdogManager_MainFunction+0x8>

08001ed4 <Task_ErrorManager_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_ErrorManager_Init */
void Task_ErrorManager_Init(void *argument)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_ErrorManager_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001edc:	2001      	movs	r0, #1
 8001ede:	f006 ff7e 	bl	8008dde <osDelay>
 8001ee2:	e7fb      	b.n	8001edc <Task_ErrorManager_Init+0x8>

08001ee4 <Task_ErrorManager_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_ErrorManager_MainFunction */
void Task_ErrorManager_MainFunction(void *argument)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_ErrorManager_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001eec:	2001      	movs	r0, #1
 8001eee:	f006 ff76 	bl	8008dde <osDelay>
 8001ef2:	e7fb      	b.n	8001eec <Task_ErrorManager_MainFunction+0x8>

08001ef4 <Task_SystemManager_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_SystemManager_Init */
void Task_SystemManager_Init(void *argument)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_SystemManager_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001efc:	2001      	movs	r0, #1
 8001efe:	f006 ff6e 	bl	8008dde <osDelay>
 8001f02:	e7fb      	b.n	8001efc <Task_SystemManager_Init+0x8>

08001f04 <Task_SystemManager_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_SystemManager_MainFunction */
void Task_SystemManager_MainFunction(void *argument)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_SystemManager_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f006 ff66 	bl	8008dde <osDelay>
 8001f12:	e7fb      	b.n	8001f0c <Task_SystemManager_MainFunction+0x8>

08001f14 <Task_ModeManager_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_ModeManager_Init */
void Task_ModeManager_Init(void *argument)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_ModeManager_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f006 ff5e 	bl	8008dde <osDelay>
 8001f22:	e7fb      	b.n	8001f1c <Task_ModeManager_Init+0x8>

08001f24 <Task_ModeManager_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_ModeManager_MainFunction */
void Task_ModeManager_MainFunction(void *argument)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_ModeManager_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f006 ff56 	bl	8008dde <osDelay>
 8001f32:	e7fb      	b.n	8001f2c <Task_ModeManager_MainFunction+0x8>

08001f34 <Task_Os_Start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Os_Start */
void Task_Os_Start(void *argument)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Os_Start */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f006 ff4e 	bl	8008dde <osDelay>
 8001f42:	e7fb      	b.n	8001f3c <Task_Os_Start+0x8>

08001f44 <Task_Crc_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Crc_Init */
void Task_Crc_Init(void *argument)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Crc_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f006 ff46 	bl	8008dde <osDelay>
 8001f52:	e7fb      	b.n	8001f4c <Task_Crc_Init+0x8>

08001f54 <Task_Crc_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Crc_MainFunction */
void Task_Crc_MainFunction(void *argument)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Crc_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f006 ff3e 	bl	8008dde <osDelay>
 8001f62:	e7fb      	b.n	8001f5c <Task_Crc_MainFunction+0x8>

08001f64 <Task_Rte_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Rte_Init */
void Task_Rte_Init(void *argument)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Rte_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f006 ff36 	bl	8008dde <osDelay>
 8001f72:	e7fb      	b.n	8001f6c <Task_Rte_Init+0x8>

08001f74 <Task_Rte_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Rte_MainFunction */
void Task_Rte_MainFunction(void *argument)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Rte_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f006 ff2e 	bl	8008dde <osDelay>
 8001f82:	e7fb      	b.n	8001f7c <Task_Rte_MainFunction+0x8>

08001f84 <Task_Os_StartUpHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Os_StartUpHook */
void Task_Os_StartUpHook(void *argument)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Os_StartUpHook */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f006 ff26 	bl	8008dde <osDelay>
 8001f92:	e7fb      	b.n	8001f8c <Task_Os_StartUpHook+0x8>

08001f94 <Task_Os_ShutdownHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Os_ShutdownHook */
void Task_Os_ShutdownHook(void *argument)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Os_ShutdownHook */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f006 ff1e 	bl	8008dde <osDelay>
 8001fa2:	e7fb      	b.n	8001f9c <Task_Os_ShutdownHook+0x8>

08001fa4 <Task_NvM_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_NvM_Init */
void Task_NvM_Init(void *argument)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_NvM_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001fac:	2001      	movs	r0, #1
 8001fae:	f006 ff16 	bl	8008dde <osDelay>
 8001fb2:	e7fb      	b.n	8001fac <Task_NvM_Init+0x8>

08001fb4 <Task_NvM_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_NvM_MainFunction */
void Task_NvM_MainFunction(void *argument)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_NvM_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	f006 ff0e 	bl	8008dde <osDelay>
 8001fc2:	e7fb      	b.n	8001fbc <Task_NvM_MainFunction+0x8>

08001fc4 <Task_MemIf_Status>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_MemIf_Status */
void Task_MemIf_Status(void *argument)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_MemIf_Status */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f006 ff06 	bl	8008dde <osDelay>
 8001fd2:	e7fb      	b.n	8001fcc <Task_MemIf_Status+0x8>

08001fd4 <Task_Fee_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Fee_Init */
void Task_Fee_Init(void *argument)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Fee_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f006 fefe 	bl	8008dde <osDelay>
 8001fe2:	e7fb      	b.n	8001fdc <Task_Fee_Init+0x8>

08001fe4 <Task_Fee_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Fee_MainFunction */
void Task_Fee_MainFunction(void *argument)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Fee_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001fec:	2001      	movs	r0, #1
 8001fee:	f006 fef6 	bl	8008dde <osDelay>
 8001ff2:	e7fb      	b.n	8001fec <Task_Fee_MainFunction+0x8>

08001ff4 <Task_Ea_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Ea_Init */
void Task_Ea_Init(void *argument)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Ea_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f006 feee 	bl	8008dde <osDelay>
 8002002:	e7fb      	b.n	8001ffc <Task_Ea_Init+0x8>

08002004 <Task_Ea_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Ea_MainFunction */
void Task_Ea_MainFunction(void *argument)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Ea_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800200c:	2001      	movs	r0, #1
 800200e:	f006 fee6 	bl	8008dde <osDelay>
 8002012:	e7fb      	b.n	800200c <Task_Ea_MainFunction+0x8>

08002014 <Task_VibSen_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_VibSen_Init */
void Task_VibSen_Init(void *argument)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_VibSen_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800201c:	2001      	movs	r0, #1
 800201e:	f006 fede 	bl	8008dde <osDelay>
 8002022:	e7fb      	b.n	800201c <Task_VibSen_Init+0x8>

08002024 <Task_VibSen_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_VibSen_MainFunction */
void Task_VibSen_MainFunction(void *argument)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_VibSen_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800202c:	2001      	movs	r0, #1
 800202e:	f006 fed6 	bl	8008dde <osDelay>
 8002032:	e7fb      	b.n	800202c <Task_VibSen_MainFunction+0x8>

08002034 <Task_TemSen_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_TemSen_Init */
void Task_TemSen_Init(void *argument)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_TemSen_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800203c:	2001      	movs	r0, #1
 800203e:	f006 fece 	bl	8008dde <osDelay>
 8002042:	e7fb      	b.n	800203c <Task_TemSen_Init+0x8>

08002044 <Task_TemSen_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_TemSen_MainFunction */
void Task_TemSen_MainFunction(void *argument)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_TemSen_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800204c:	2001      	movs	r0, #1
 800204e:	f006 fec6 	bl	8008dde <osDelay>
 8002052:	e7fb      	b.n	800204c <Task_TemSen_MainFunction+0x8>

08002054 <Task_SecAlm_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_SecAlm_Init */
void Task_SecAlm_Init(void *argument)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_SecAlm_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800205c:	2001      	movs	r0, #1
 800205e:	f006 febe 	bl	8008dde <osDelay>
 8002062:	e7fb      	b.n	800205c <Task_SecAlm_Init+0x8>

08002064 <Task_SecAlm_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_SecAlm_MainFunction */
void Task_SecAlm_MainFunction(void *argument)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_SecAlm_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800206c:	2001      	movs	r0, #1
 800206e:	f006 feb6 	bl	8008dde <osDelay>
 8002072:	e7fb      	b.n	800206c <Task_SecAlm_MainFunction+0x8>

08002074 <Task_PDC_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_PDC_Init */
void Task_PDC_Init(void *argument)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_PDC_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800207c:	2001      	movs	r0, #1
 800207e:	f006 feae 	bl	8008dde <osDelay>
 8002082:	e7fb      	b.n	800207c <Task_PDC_Init+0x8>

08002084 <Task_PDC_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_PDC_MainFunction */
void Task_PDC_MainFunction(void *argument)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_PDC_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800208c:	2001      	movs	r0, #1
 800208e:	f006 fea6 	bl	8008dde <osDelay>
 8002092:	e7fb      	b.n	800208c <Task_PDC_MainFunction+0x8>

08002094 <Task_LightSen_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_LightSen_Init */
void Task_LightSen_Init(void *argument)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_LightSen_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800209c:	2001      	movs	r0, #1
 800209e:	f006 fe9e 	bl	8008dde <osDelay>
 80020a2:	e7fb      	b.n	800209c <Task_LightSen_Init+0x8>

080020a4 <Task_LightSen_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_LightSen_MainFunction */
void Task_LightSen_MainFunction(void *argument)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_LightSen_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80020ac:	2001      	movs	r0, #1
 80020ae:	f006 fe96 	bl	8008dde <osDelay>
 80020b2:	e7fb      	b.n	80020ac <Task_LightSen_MainFunction+0x8>

080020b4 <Task_IoH_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_IoH_MainFunction */
void Task_IoH_MainFunction(void *argument)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_IoH_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80020bc:	2001      	movs	r0, #1
 80020be:	f006 fe8e 	bl	8008dde <osDelay>
 80020c2:	e7fb      	b.n	80020bc <Task_IoH_MainFunction+0x8>

080020c4 <Task_IntLights_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_IntLights_Init */
void Task_IntLights_Init(void *argument)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_IntLights_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80020cc:	2001      	movs	r0, #1
 80020ce:	f006 fe86 	bl	8008dde <osDelay>
 80020d2:	e7fb      	b.n	80020cc <Task_IntLights_Init+0x8>

080020d4 <Task_IntLights_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_IntLights_MainFunction */
void Task_IntLights_MainFunction(void *argument)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_IntLights_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80020dc:	2001      	movs	r0, #1
 80020de:	f006 fe7e 	bl	8008dde <osDelay>
 80020e2:	e7fb      	b.n	80020dc <Task_IntLights_MainFunction+0x8>

080020e4 <Task_HVAC_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_HVAC_Init */
void Task_HVAC_Init(void *argument)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_HVAC_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f006 fe76 	bl	8008dde <osDelay>
 80020f2:	e7fb      	b.n	80020ec <Task_HVAC_Init+0x8>

080020f4 <Task_HVAC_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_HVAC_MainFunction */
void Task_HVAC_MainFunction(void *argument)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_HVAC_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80020fc:	2001      	movs	r0, #1
 80020fe:	f006 fe6e 	bl	8008dde <osDelay>
 8002102:	e7fb      	b.n	80020fc <Task_HVAC_MainFunction+0x8>

08002104 <Task_ExtLights_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_ExtLights_Init */
void Task_ExtLights_Init(void *argument)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_ExtLights_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800210c:	2001      	movs	r0, #1
 800210e:	f006 fe66 	bl	8008dde <osDelay>
 8002112:	e7fb      	b.n	800210c <Task_ExtLights_Init+0x8>

08002114 <Task_ExtLights_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_ExtLights_MainFunction */
void Task_ExtLights_MainFunction(void *argument)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_ExtLights_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800211c:	2001      	movs	r0, #1
 800211e:	f006 fe5e 	bl	8008dde <osDelay>
 8002122:	e7fb      	b.n	800211c <Task_ExtLights_MainFunction+0x8>

08002124 <Task_DiagMonH_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_DiagMonH_MainFunction */
void Task_DiagMonH_MainFunction(void *argument)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_DiagMonH_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800212c:	2001      	movs	r0, #1
 800212e:	f006 fe56 	bl	8008dde <osDelay>
 8002132:	e7fb      	b.n	800212c <Task_DiagMonH_MainFunction+0x8>

08002134 <Task_ComMon_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_ComMon_MainFunction */
void Task_ComMon_MainFunction(void *argument)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_ComMon_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800213c:	2001      	movs	r0, #1
 800213e:	f006 fe4e 	bl	8008dde <osDelay>
 8002142:	e7fb      	b.n	800213c <Task_ComMon_MainFunction+0x8>

08002144 <Task_CenLoc_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_CenLoc_Init */
void Task_CenLoc_Init(void *argument)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_CenLoc_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800214c:	2001      	movs	r0, #1
 800214e:	f006 fe46 	bl	8008dde <osDelay>
 8002152:	e7fb      	b.n	800214c <Task_CenLoc_Init+0x8>

08002154 <Task_CenLoc_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_CenLoc_MainFunction */
void Task_CenLoc_MainFunction(void *argument)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_CenLoc_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800215c:	2001      	movs	r0, #1
 800215e:	f006 fe3e 	bl	8008dde <osDelay>
 8002162:	e7fb      	b.n	800215c <Task_CenLoc_MainFunction+0x8>

08002164 <Task_BTC_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_BTC_Init */
void Task_BTC_Init(void *argument)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_BTC_Init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800216c:	2001      	movs	r0, #1
 800216e:	f006 fe36 	bl	8008dde <osDelay>
 8002172:	e7fb      	b.n	800216c <Task_BTC_Init+0x8>

08002174 <Task_BTC_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_BTC_MainFunction */
void Task_BTC_MainFunction(void *argument)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_BTC_MainFunction */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800217c:	2001      	movs	r0, #1
 800217e:	f006 fe2e 	bl	8008dde <osDelay>
 8002182:	e7fb      	b.n	800217c <Task_BTC_MainFunction+0x8>

08002184 <OsTimerCounter_Callback>:
  /* USER CODE END Task_BTC_MainFunction */
}

/* OsTimerCounter_Callback function */
void OsTimerCounter_Callback(void *argument)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OsTimerCounter_Callback */

  /* USER CODE END OsTimerCounter_Callback */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <SystemManagerCounter_Callback>:

/* SystemManagerCounter_Callback function */
void SystemManagerCounter_Callback(void *argument)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SystemManagerCounter_Callback */

  /* USER CODE END SystemManagerCounter_Callback */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	60da      	str	r2, [r3, #12]
 80021c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	4b49      	ldr	r3, [pc, #292]	; (80022ec <MX_GPIO_Init+0x140>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a48      	ldr	r2, [pc, #288]	; (80022ec <MX_GPIO_Init+0x140>)
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b46      	ldr	r3, [pc, #280]	; (80022ec <MX_GPIO_Init+0x140>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b42      	ldr	r3, [pc, #264]	; (80022ec <MX_GPIO_Init+0x140>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a41      	ldr	r2, [pc, #260]	; (80022ec <MX_GPIO_Init+0x140>)
 80021e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <MX_GPIO_Init+0x140>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <MX_GPIO_Init+0x140>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a3a      	ldr	r2, [pc, #232]	; (80022ec <MX_GPIO_Init+0x140>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b38      	ldr	r3, [pc, #224]	; (80022ec <MX_GPIO_Init+0x140>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	4b34      	ldr	r3, [pc, #208]	; (80022ec <MX_GPIO_Init+0x140>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a33      	ldr	r2, [pc, #204]	; (80022ec <MX_GPIO_Init+0x140>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b31      	ldr	r3, [pc, #196]	; (80022ec <MX_GPIO_Init+0x140>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_6|GPIO_PIN_7
 8002232:	2200      	movs	r2, #0
 8002234:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8002238:	482d      	ldr	r0, [pc, #180]	; (80022f0 <MX_GPIO_Init+0x144>)
 800223a:	f002 f8a3 	bl	8004384 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	f240 4131 	movw	r1, #1073	; 0x431
 8002244:	482b      	ldr	r0, [pc, #172]	; (80022f4 <MX_GPIO_Init+0x148>)
 8002246:	f002 f89d 	bl	8004384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800224a:	2200      	movs	r2, #0
 800224c:	2180      	movs	r1, #128	; 0x80
 800224e:	482a      	ldr	r0, [pc, #168]	; (80022f8 <MX_GPIO_Init+0x14c>)
 8002250:	f002 f898 	bl	8004384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800225a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800225e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	4823      	ldr	r0, [pc, #140]	; (80022f8 <MX_GPIO_Init+0x14c>)
 800226c:	f001 ff06 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002270:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002276:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800227a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	481c      	ldr	r0, [pc, #112]	; (80022f8 <MX_GPIO_Init+0x14c>)
 8002288:	f001 fef8 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin PA6 PA7
                           PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_6|GPIO_PIN_7
 800228c:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 8002290:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002292:	2301      	movs	r3, #1
 8002294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	4619      	mov	r1, r3
 80022a4:	4812      	ldr	r0, [pc, #72]	; (80022f0 <MX_GPIO_Init+0x144>)
 80022a6:	f001 fee9 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80022aa:	f240 4331 	movw	r3, #1073	; 0x431
 80022ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	480c      	ldr	r0, [pc, #48]	; (80022f4 <MX_GPIO_Init+0x148>)
 80022c4:	f001 feda 	bl	800407c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022cc:	2301      	movs	r3, #1
 80022ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	4619      	mov	r1, r3
 80022de:	4806      	ldr	r0, [pc, #24]	; (80022f8 <MX_GPIO_Init+0x14c>)
 80022e0:	f001 fecc 	bl	800407c <HAL_GPIO_Init>

}
 80022e4:	bf00      	nop
 80022e6:	3728      	adds	r7, #40	; 0x28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40020000 	.word	0x40020000
 80022f4:	40020400 	.word	0x40020400
 80022f8:	40020800 	.word	0x40020800

080022fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <MX_I2C1_Init+0x50>)
 8002302:	4a13      	ldr	r2, [pc, #76]	; (8002350 <MX_I2C1_Init+0x54>)
 8002304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_I2C1_Init+0x50>)
 8002308:	4a12      	ldr	r2, [pc, #72]	; (8002354 <MX_I2C1_Init+0x58>)
 800230a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <MX_I2C1_Init+0x50>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_I2C1_Init+0x50>)
 8002314:	2200      	movs	r2, #0
 8002316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_I2C1_Init+0x50>)
 800231a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800231e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <MX_I2C1_Init+0x50>)
 8002322:	2200      	movs	r2, #0
 8002324:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_I2C1_Init+0x50>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <MX_I2C1_Init+0x50>)
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_I2C1_Init+0x50>)
 8002334:	2200      	movs	r2, #0
 8002336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002338:	4804      	ldr	r0, [pc, #16]	; (800234c <MX_I2C1_Init+0x50>)
 800233a:	f002 f83d 	bl	80043b8 <HAL_I2C_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002344:	f000 f93a 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000248 	.word	0x20000248
 8002350:	40005400 	.word	0x40005400
 8002354:	000186a0 	.word	0x000186a0

08002358 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a21      	ldr	r2, [pc, #132]	; (80023fc <HAL_I2C_MspInit+0xa4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d13c      	bne.n	80023f4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <HAL_I2C_MspInit+0xa8>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <HAL_I2C_MspInit+0xa8>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <HAL_I2C_MspInit+0xa8>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002396:	f44f 7310 	mov.w	r3, #576	; 0x240
 800239a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800239c:	2312      	movs	r3, #18
 800239e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023a8:	2304      	movs	r3, #4
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	4619      	mov	r1, r3
 80023b2:	4814      	ldr	r0, [pc, #80]	; (8002404 <HAL_I2C_MspInit+0xac>)
 80023b4:	f001 fe62 	bl	800407c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	4b10      	ldr	r3, [pc, #64]	; (8002400 <HAL_I2C_MspInit+0xa8>)
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	4a0f      	ldr	r2, [pc, #60]	; (8002400 <HAL_I2C_MspInit+0xa8>)
 80023c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023c6:	6413      	str	r3, [r2, #64]	; 0x40
 80023c8:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <HAL_I2C_MspInit+0xa8>)
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2105      	movs	r1, #5
 80023d8:	201f      	movs	r0, #31
 80023da:	f001 fc31 	bl	8003c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80023de:	201f      	movs	r0, #31
 80023e0:	f001 fc4a 	bl	8003c78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80023e4:	2200      	movs	r2, #0
 80023e6:	2105      	movs	r1, #5
 80023e8:	2020      	movs	r0, #32
 80023ea:	f001 fc29 	bl	8003c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80023ee:	2020      	movs	r0, #32
 80023f0:	f001 fc42 	bl	8003c78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80023f4:	bf00      	nop
 80023f6:	3728      	adds	r7, #40	; 0x28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40005400 	.word	0x40005400
 8002400:	40023800 	.word	0x40023800
 8002404:	40020400 	.word	0x40020400

08002408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800240c:	f000 fee4 	bl	80031d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002410:	f000 f834 	bl	800247c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002414:	f7ff feca 	bl	80021ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002418:	f000 fde0 	bl	8002fdc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800241c:	f000 fc3e 	bl	8002c9c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002420:	f000 fc8a 	bl	8002d38 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002424:	f000 fd24 	bl	8002e70 <MX_TIM5_Init>
  MX_TIM4_Init();
 8002428:	f000 fcd4 	bl	8002dd4 <MX_TIM4_Init>
  MX_SPI2_Init();
 800242c:	f000 f9b2 	bl	8002794 <MX_SPI2_Init>
  MX_SPI3_Init();
 8002430:	f000 f9e6 	bl	8002800 <MX_SPI3_Init>
  MX_ADC1_Init();
 8002434:	f7fe ffe2 	bl	80013fc <MX_ADC1_Init>
  MX_CRC_Init();
 8002438:	f7ff f8d8 	bl	80015ec <MX_CRC_Init>
  MX_RTC_Init();
 800243c:	f000 f8c4 	bl	80025c8 <MX_RTC_Init>
  MX_WWDG_Init();
 8002440:	f000 fe5e 	bl	8003100 <MX_WWDG_Init>
  MX_I2C1_Init();
 8002444:	f7ff ff5a 	bl	80022fc <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002448:	f000 f882 	bl	8002550 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  CenLoc_Init();
 800244c:	f7fe fac0 	bl	80009d0 <CenLoc_Init>
  SecAlm_Init();
 8002450:	f7fe ff9c 	bl	800138c <SecAlm_Init>
  ExtLights_Init();
 8002454:	f7fe fd74 	bl	8000f40 <ExtLights_Init>
  IntLights_Init();
 8002458:	f7fe fea2 	bl	80011a0 <IntLights_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800245c:	f006 fbe2 	bl	8008c24 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002460:	f7ff f944 	bl	80016ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002464:	f006 fc02 	bl	8008c6c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	CenLoc_MainFunction();
 8002468:	f7fe f83c 	bl	80004e4 <CenLoc_MainFunction>
	SecAlm_MainFunction();
 800246c:	f7fe febc 	bl	80011e8 <SecAlm_MainFunction>
	ExtLights_MainFunction();
 8002470:	f7fe fae6 	bl	8000a40 <ExtLights_MainFunction>
	IntLights_MainFunction();
 8002474:	f7fe fe78 	bl	8001168 <IntLights_MainFunction>
	CenLoc_MainFunction();
 8002478:	e7f6      	b.n	8002468 <main+0x60>
	...

0800247c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b094      	sub	sp, #80	; 0x50
 8002480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002482:	f107 0320 	add.w	r3, r7, #32
 8002486:	2230      	movs	r2, #48	; 0x30
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f009 fd92 	bl	800bfb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002490:	f107 030c 	add.w	r3, r7, #12
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a0:	2300      	movs	r3, #0
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	4b28      	ldr	r3, [pc, #160]	; (8002548 <SystemClock_Config+0xcc>)
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	4a27      	ldr	r2, [pc, #156]	; (8002548 <SystemClock_Config+0xcc>)
 80024aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ae:	6413      	str	r3, [r2, #64]	; 0x40
 80024b0:	4b25      	ldr	r3, [pc, #148]	; (8002548 <SystemClock_Config+0xcc>)
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024bc:	2300      	movs	r3, #0
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	4b22      	ldr	r3, [pc, #136]	; (800254c <SystemClock_Config+0xd0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a21      	ldr	r2, [pc, #132]	; (800254c <SystemClock_Config+0xd0>)
 80024c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b1f      	ldr	r3, [pc, #124]	; (800254c <SystemClock_Config+0xd0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024d4:	607b      	str	r3, [r7, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80024d8:	2309      	movs	r3, #9
 80024da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80024e2:	2301      	movs	r3, #1
 80024e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024e6:	2302      	movs	r3, #2
 80024e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024f0:	2304      	movs	r3, #4
 80024f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80024f4:	2364      	movs	r3, #100	; 0x64
 80024f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024f8:	2302      	movs	r3, #2
 80024fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024fc:	2304      	movs	r3, #4
 80024fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002500:	f107 0320 	add.w	r3, r7, #32
 8002504:	4618      	mov	r0, r3
 8002506:	f003 fde7 	bl	80060d8 <HAL_RCC_OscConfig>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002510:	f000 f854 	bl	80025bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002514:	230f      	movs	r3, #15
 8002516:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002518:	2302      	movs	r3, #2
 800251a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002524:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800252a:	f107 030c 	add.w	r3, r7, #12
 800252e:	2103      	movs	r1, #3
 8002530:	4618      	mov	r0, r3
 8002532:	f004 f849 	bl	80065c8 <HAL_RCC_ClockConfig>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800253c:	f000 f83e 	bl	80025bc <Error_Handler>
  }
}
 8002540:	bf00      	nop
 8002542:	3750      	adds	r7, #80	; 0x50
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40023800 	.word	0x40023800
 800254c:	40007000 	.word	0x40007000

08002550 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8002554:	2200      	movs	r2, #0
 8002556:	2105      	movs	r1, #5
 8002558:	2004      	movs	r0, #4
 800255a:	f001 fb71 	bl	8003c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800255e:	2004      	movs	r0, #4
 8002560:	f001 fb8a 	bl	8003c78 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002564:	2200      	movs	r2, #0
 8002566:	2105      	movs	r1, #5
 8002568:	201c      	movs	r0, #28
 800256a:	f001 fb69 	bl	8003c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800256e:	201c      	movs	r0, #28
 8002570:	f001 fb82 	bl	8003c78 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002574:	2200      	movs	r2, #0
 8002576:	2105      	movs	r1, #5
 8002578:	201d      	movs	r0, #29
 800257a:	f001 fb61 	bl	8003c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800257e:	201d      	movs	r0, #29
 8002580:	f001 fb7a 	bl	8003c78 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8002584:	2200      	movs	r2, #0
 8002586:	2105      	movs	r1, #5
 8002588:	2051      	movs	r0, #81	; 0x51
 800258a:	f001 fb59 	bl	8003c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800258e:	2051      	movs	r0, #81	; 0x51
 8002590:	f001 fb72 	bl	8003c78 <HAL_NVIC_EnableIRQ>
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025aa:	f000 fe37 	bl	800321c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40010000 	.word	0x40010000

080025bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025c0:	b672      	cpsid	i
}
 80025c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025c4:	e7fe      	b.n	80025c4 <Error_Handler+0x8>
	...

080025c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b090      	sub	sp, #64	; 0x40
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80025ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
 80025dc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80025de:	2300      	movs	r3, #0
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80025e2:	463b      	mov	r3, r7
 80025e4:	2228      	movs	r2, #40	; 0x28
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f009 fce3 	bl	800bfb4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80025ee:	4b46      	ldr	r3, [pc, #280]	; (8002708 <MX_RTC_Init+0x140>)
 80025f0:	4a46      	ldr	r2, [pc, #280]	; (800270c <MX_RTC_Init+0x144>)
 80025f2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80025f4:	4b44      	ldr	r3, [pc, #272]	; (8002708 <MX_RTC_Init+0x140>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80025fa:	4b43      	ldr	r3, [pc, #268]	; (8002708 <MX_RTC_Init+0x140>)
 80025fc:	227f      	movs	r2, #127	; 0x7f
 80025fe:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002600:	4b41      	ldr	r3, [pc, #260]	; (8002708 <MX_RTC_Init+0x140>)
 8002602:	22ff      	movs	r2, #255	; 0xff
 8002604:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002606:	4b40      	ldr	r3, [pc, #256]	; (8002708 <MX_RTC_Init+0x140>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800260c:	4b3e      	ldr	r3, [pc, #248]	; (8002708 <MX_RTC_Init+0x140>)
 800260e:	2200      	movs	r2, #0
 8002610:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002612:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <MX_RTC_Init+0x140>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002618:	483b      	ldr	r0, [pc, #236]	; (8002708 <MX_RTC_Init+0x140>)
 800261a:	f004 fb17 	bl	8006c4c <HAL_RTC_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002624:	f7ff ffca 	bl	80025bc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002628:	2300      	movs	r3, #0
 800262a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800262e:	2300      	movs	r3, #0
 8002630:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8002634:	2300      	movs	r3, #0
 8002636:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800263a:	2300      	movs	r3, #0
 800263c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002642:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002646:	2201      	movs	r2, #1
 8002648:	4619      	mov	r1, r3
 800264a:	482f      	ldr	r0, [pc, #188]	; (8002708 <MX_RTC_Init+0x140>)
 800264c:	f004 fba0 	bl	8006d90 <HAL_RTC_SetTime>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002656:	f7ff ffb1 	bl	80025bc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800265a:	2301      	movs	r3, #1
 800265c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002660:	2301      	movs	r3, #1
 8002662:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8002666:	2301      	movs	r3, #1
 8002668:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 800266c:	2300      	movs	r3, #0
 800266e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002676:	2201      	movs	r2, #1
 8002678:	4619      	mov	r1, r3
 800267a:	4823      	ldr	r0, [pc, #140]	; (8002708 <MX_RTC_Init+0x140>)
 800267c:	f004 fc22 	bl	8006ec4 <HAL_RTC_SetDate>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002686:	f7ff ff99 	bl	80025bc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800268a:	2300      	movs	r3, #0
 800268c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800268e:	2300      	movs	r3, #0
 8002690:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002692:	2300      	movs	r3, #0
 8002694:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80026b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80026ba:	463b      	mov	r3, r7
 80026bc:	2201      	movs	r2, #1
 80026be:	4619      	mov	r1, r3
 80026c0:	4811      	ldr	r0, [pc, #68]	; (8002708 <MX_RTC_Init+0x140>)
 80026c2:	f004 fc83 	bl	8006fcc <HAL_RTC_SetAlarm>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80026cc:	f7ff ff76 	bl	80025bc <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80026d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80026d6:	463b      	mov	r3, r7
 80026d8:	2201      	movs	r2, #1
 80026da:	4619      	mov	r1, r3
 80026dc:	480a      	ldr	r0, [pc, #40]	; (8002708 <MX_RTC_Init+0x140>)
 80026de:	f004 fc75 	bl	8006fcc <HAL_RTC_SetAlarm>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80026e8:	f7ff ff68 	bl	80025bc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80026ec:	2200      	movs	r2, #0
 80026ee:	2100      	movs	r1, #0
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <MX_RTC_Init+0x140>)
 80026f2:	f004 fe54 	bl	800739e <HAL_RTCEx_SetWakeUpTimer>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 80026fc:	f7ff ff5e 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002700:	bf00      	nop
 8002702:	3740      	adds	r7, #64	; 0x40
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200002cc 	.word	0x200002cc
 800270c:	40002800 	.word	0x40002800

08002710 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002718:	f107 0308 	add.w	r3, r7, #8
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
 8002728:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a0c      	ldr	r2, [pc, #48]	; (8002760 <HAL_RTC_MspInit+0x50>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d111      	bne.n	8002758 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002734:	2302      	movs	r3, #2
 8002736:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800273c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800273e:	f107 0308 	add.w	r3, r7, #8
 8002742:	4618      	mov	r0, r3
 8002744:	f004 f992 	bl	8006a6c <HAL_RCCEx_PeriphCLKConfig>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800274e:	f7ff ff35 	bl	80025bc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002752:	4b04      	ldr	r3, [pc, #16]	; (8002764 <HAL_RTC_MspInit+0x54>)
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002758:	bf00      	nop
 800275a:	3720      	adds	r7, #32
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40002800 	.word	0x40002800
 8002764:	42470e3c 	.word	0x42470e3c

08002768 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a05      	ldr	r2, [pc, #20]	; (800278c <HAL_RTC_MspDeInit+0x24>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d102      	bne.n	8002780 <HAL_RTC_MspDeInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RTC_MspDeInit+0x28>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	40002800 	.word	0x40002800
 8002790:	42470e3c 	.word	0x42470e3c

08002794 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002798:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <MX_SPI2_Init+0x64>)
 800279a:	4a18      	ldr	r2, [pc, #96]	; (80027fc <MX_SPI2_Init+0x68>)
 800279c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800279e:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <MX_SPI2_Init+0x64>)
 80027a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027a6:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <MX_SPI2_Init+0x64>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <MX_SPI2_Init+0x64>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <MX_SPI2_Init+0x64>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027b8:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <MX_SPI2_Init+0x64>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80027be:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <MX_SPI2_Init+0x64>)
 80027c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80027c6:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <MX_SPI2_Init+0x64>)
 80027c8:	2218      	movs	r2, #24
 80027ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027cc:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <MX_SPI2_Init+0x64>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <MX_SPI2_Init+0x64>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d8:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <MX_SPI2_Init+0x64>)
 80027da:	2200      	movs	r2, #0
 80027dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <MX_SPI2_Init+0x64>)
 80027e0:	220a      	movs	r2, #10
 80027e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027e4:	4804      	ldr	r0, [pc, #16]	; (80027f8 <MX_SPI2_Init+0x64>)
 80027e6:	f004 fe8b 	bl	8007500 <HAL_SPI_Init>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80027f0:	f7ff fee4 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80027f4:	bf00      	nop
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000308 	.word	0x20000308
 80027fc:	40003800 	.word	0x40003800

08002800 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002804:	4b17      	ldr	r3, [pc, #92]	; (8002864 <MX_SPI3_Init+0x64>)
 8002806:	4a18      	ldr	r2, [pc, #96]	; (8002868 <MX_SPI3_Init+0x68>)
 8002808:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800280a:	4b16      	ldr	r3, [pc, #88]	; (8002864 <MX_SPI3_Init+0x64>)
 800280c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002810:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002812:	4b14      	ldr	r3, [pc, #80]	; (8002864 <MX_SPI3_Init+0x64>)
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <MX_SPI3_Init+0x64>)
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800281e:	4b11      	ldr	r3, [pc, #68]	; (8002864 <MX_SPI3_Init+0x64>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <MX_SPI3_Init+0x64>)
 8002826:	2200      	movs	r2, #0
 8002828:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800282a:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <MX_SPI3_Init+0x64>)
 800282c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002830:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <MX_SPI3_Init+0x64>)
 8002834:	2218      	movs	r2, #24
 8002836:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <MX_SPI3_Init+0x64>)
 800283a:	2200      	movs	r2, #0
 800283c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <MX_SPI3_Init+0x64>)
 8002840:	2200      	movs	r2, #0
 8002842:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002844:	4b07      	ldr	r3, [pc, #28]	; (8002864 <MX_SPI3_Init+0x64>)
 8002846:	2200      	movs	r2, #0
 8002848:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <MX_SPI3_Init+0x64>)
 800284c:	220a      	movs	r2, #10
 800284e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002850:	4804      	ldr	r0, [pc, #16]	; (8002864 <MX_SPI3_Init+0x64>)
 8002852:	f004 fe55 	bl	8007500 <HAL_SPI_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800285c:	f7ff feae 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002860:	bf00      	nop
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000388 	.word	0x20000388
 8002868:	40003c00 	.word	0x40003c00

0800286c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08e      	sub	sp, #56	; 0x38
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a59      	ldr	r2, [pc, #356]	; (80029f0 <HAL_SPI_MspInit+0x184>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d153      	bne.n	8002936 <HAL_SPI_MspInit+0xca>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
 8002892:	4b58      	ldr	r3, [pc, #352]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a57      	ldr	r2, [pc, #348]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 8002898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
 800289e:	4b55      	ldr	r3, [pc, #340]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a6:	623b      	str	r3, [r7, #32]
 80028a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	4b51      	ldr	r3, [pc, #324]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a50      	ldr	r2, [pc, #320]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b4e      	ldr	r3, [pc, #312]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	61fb      	str	r3, [r7, #28]
 80028c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	4b4a      	ldr	r3, [pc, #296]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a49      	ldr	r2, [pc, #292]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028e2:	2308      	movs	r3, #8
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2302      	movs	r3, #2
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ee:	2303      	movs	r3, #3
 80028f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028f2:	2305      	movs	r3, #5
 80028f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fa:	4619      	mov	r1, r3
 80028fc:	483e      	ldr	r0, [pc, #248]	; (80029f8 <HAL_SPI_MspInit+0x18c>)
 80028fe:	f001 fbbd 	bl	800407c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002902:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002910:	2303      	movs	r3, #3
 8002912:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002914:	2305      	movs	r3, #5
 8002916:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800291c:	4619      	mov	r1, r3
 800291e:	4837      	ldr	r0, [pc, #220]	; (80029fc <HAL_SPI_MspInit+0x190>)
 8002920:	f001 fbac 	bl	800407c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002924:	2200      	movs	r2, #0
 8002926:	2105      	movs	r1, #5
 8002928:	2024      	movs	r0, #36	; 0x24
 800292a:	f001 f989 	bl	8003c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800292e:	2024      	movs	r0, #36	; 0x24
 8002930:	f001 f9a2 	bl	8003c78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002934:	e058      	b.n	80029e8 <HAL_SPI_MspInit+0x17c>
  else if(spiHandle->Instance==SPI3)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a31      	ldr	r2, [pc, #196]	; (8002a00 <HAL_SPI_MspInit+0x194>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d153      	bne.n	80029e8 <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	4a2a      	ldr	r2, [pc, #168]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 800294a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800294e:	6413      	str	r3, [r2, #64]	; 0x40
 8002950:	4b28      	ldr	r3, [pc, #160]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	4b24      	ldr	r3, [pc, #144]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	4a23      	ldr	r2, [pc, #140]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	6313      	str	r3, [r2, #48]	; 0x30
 800296c:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 8002982:	f043 0304 	orr.w	r3, r3, #4
 8002986:	6313      	str	r3, [r2, #48]	; 0x30
 8002988:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <HAL_SPI_MspInit+0x188>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a2:	2303      	movs	r3, #3
 80029a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80029a6:	2307      	movs	r3, #7
 80029a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ae:	4619      	mov	r1, r3
 80029b0:	4812      	ldr	r0, [pc, #72]	; (80029fc <HAL_SPI_MspInit+0x190>)
 80029b2:	f001 fb63 	bl	800407c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c4:	2303      	movs	r3, #3
 80029c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029c8:	2306      	movs	r3, #6
 80029ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d0:	4619      	mov	r1, r3
 80029d2:	4809      	ldr	r0, [pc, #36]	; (80029f8 <HAL_SPI_MspInit+0x18c>)
 80029d4:	f001 fb52 	bl	800407c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80029d8:	2200      	movs	r2, #0
 80029da:	2105      	movs	r1, #5
 80029dc:	2033      	movs	r0, #51	; 0x33
 80029de:	f001 f92f 	bl	8003c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80029e2:	2033      	movs	r0, #51	; 0x33
 80029e4:	f001 f948 	bl	8003c78 <HAL_NVIC_EnableIRQ>
}
 80029e8:	bf00      	nop
 80029ea:	3738      	adds	r7, #56	; 0x38
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40003800 	.word	0x40003800
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40020800 	.word	0x40020800
 80029fc:	40020400 	.word	0x40020400
 8002a00:	40003c00 	.word	0x40003c00

08002a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <HAL_MspInit+0x74>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	4a19      	ldr	r2, [pc, #100]	; (8002a78 <HAL_MspInit+0x74>)
 8002a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a18:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1a:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <HAL_MspInit+0x74>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	603b      	str	r3, [r7, #0]
 8002a2a:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <HAL_MspInit+0x74>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <HAL_MspInit+0x74>)
 8002a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a34:	6413      	str	r3, [r2, #64]	; 0x40
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <HAL_MspInit+0x74>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a42:	2200      	movs	r2, #0
 8002a44:	210f      	movs	r1, #15
 8002a46:	f06f 0001 	mvn.w	r0, #1
 8002a4a:	f001 f8f9 	bl	8003c40 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2105      	movs	r1, #5
 8002a52:	2001      	movs	r0, #1
 8002a54:	f001 f8f4 	bl	8003c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8002a58:	2001      	movs	r0, #1
 8002a5a:	f001 f90d 	bl	8003c78 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2105      	movs	r1, #5
 8002a62:	2005      	movs	r0, #5
 8002a64:	f001 f8ec 	bl	8003c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002a68:	2005      	movs	r0, #5
 8002a6a:	f001 f905 	bl	8003c78 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800

08002a7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	; 0x30
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	4b2e      	ldr	r3, [pc, #184]	; (8002b4c <HAL_InitTick+0xd0>)
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	4a2d      	ldr	r2, [pc, #180]	; (8002b4c <HAL_InitTick+0xd0>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9c:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <HAL_InitTick+0xd0>)
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002aa8:	f107 020c 	add.w	r2, r7, #12
 8002aac:	f107 0310 	add.w	r3, r7, #16
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f003 ffa8 	bl	8006a08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002ab8:	f003 ff92 	bl	80069e0 <HAL_RCC_GetPCLK2Freq>
 8002abc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac0:	4a23      	ldr	r2, [pc, #140]	; (8002b50 <HAL_InitTick+0xd4>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	0c9b      	lsrs	r3, r3, #18
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002acc:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <HAL_InitTick+0xd8>)
 8002ace:	4a22      	ldr	r2, [pc, #136]	; (8002b58 <HAL_InitTick+0xdc>)
 8002ad0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002ad2:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <HAL_InitTick+0xd8>)
 8002ad4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ad8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002ada:	4a1e      	ldr	r2, [pc, #120]	; (8002b54 <HAL_InitTick+0xd8>)
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002ae0:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <HAL_InitTick+0xd8>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <HAL_InitTick+0xd8>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_InitTick+0xd8>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002af2:	4818      	ldr	r0, [pc, #96]	; (8002b54 <HAL_InitTick+0xd8>)
 8002af4:	f004 ff26 	bl	8007944 <HAL_TIM_Base_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d11b      	bne.n	8002b3e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002b06:	4813      	ldr	r0, [pc, #76]	; (8002b54 <HAL_InitTick+0xd8>)
 8002b08:	f004 fffa 	bl	8007b00 <HAL_TIM_Base_Start_IT>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002b12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d111      	bne.n	8002b3e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002b1a:	2019      	movs	r0, #25
 8002b1c:	f001 f8ac 	bl	8003c78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b0f      	cmp	r3, #15
 8002b24:	d808      	bhi.n	8002b38 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002b26:	2200      	movs	r2, #0
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	2019      	movs	r0, #25
 8002b2c:	f001 f888 	bl	8003c40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b30:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <HAL_InitTick+0xe0>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e002      	b.n	8002b3e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3730      	adds	r7, #48	; 0x30
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	431bde83 	.word	0x431bde83
 8002b54:	20000408 	.word	0x20000408
 8002b58:	40010000 	.word	0x40010000
 8002b5c:	20000004 	.word	0x20000004

08002b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b64:	e7fe      	b.n	8002b64 <NMI_Handler+0x4>

08002b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b66:	b480      	push	{r7}
 8002b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b6a:	e7fe      	b.n	8002b6a <HardFault_Handler+0x4>

08002b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b70:	e7fe      	b.n	8002b70 <MemManage_Handler+0x4>

08002b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b76:	e7fe      	b.n	8002b76 <BusFault_Handler+0x4>

08002b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b7c:	e7fe      	b.n	8002b7c <UsageFault_Handler+0x4>

08002b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002b90:	f003 fa88 	bl	80060a4 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002b9c:	f001 f8c6 	bl	8003d2c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002bb8:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <ADC_IRQHandler+0x10>)
 8002bba:	f000 fbb5 	bl	8003328 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200000b4 	.word	0x200000b4

08002bc8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002bcc:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002bce:	f004 fff9 	bl	8007bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000408 	.word	0x20000408

08002bdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002be0:	4802      	ldr	r0, [pc, #8]	; (8002bec <TIM2_IRQHandler+0x10>)
 8002be2:	f004 ffef 	bl	8007bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	200004bc 	.word	0x200004bc

08002bf0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bf4:	4802      	ldr	r0, [pc, #8]	; (8002c00 <TIM3_IRQHandler+0x10>)
 8002bf6:	f004 ffe5 	bl	8007bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000570 	.word	0x20000570

08002c04 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c08:	4802      	ldr	r0, [pc, #8]	; (8002c14 <TIM4_IRQHandler+0x10>)
 8002c0a:	f004 ffdb 	bl	8007bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000624 	.word	0x20000624

08002c18 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c1c:	4802      	ldr	r0, [pc, #8]	; (8002c28 <I2C1_EV_IRQHandler+0x10>)
 8002c1e:	f001 fd4b 	bl	80046b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000248 	.word	0x20000248

08002c2c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002c30:	4802      	ldr	r0, [pc, #8]	; (8002c3c <I2C1_ER_IRQHandler+0x10>)
 8002c32:	f001 feb2 	bl	800499a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000248 	.word	0x20000248

08002c40 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002c44:	4802      	ldr	r0, [pc, #8]	; (8002c50 <SPI2_IRQHandler+0x10>)
 8002c46:	f004 fd17 	bl	8007678 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000308 	.word	0x20000308

08002c54 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <SPI3_IRQHandler+0x10>)
 8002c5a:	f004 fd0d 	bl	8007678 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000388 	.word	0x20000388

08002c68 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <SystemInit+0x20>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	4a05      	ldr	r2, [pc, #20]	; (8002c98 <SystemInit+0x20>)
 8002c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ca2:	f107 0308 	add.w	r3, r7, #8
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	609a      	str	r2, [r3, #8]
 8002cae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb0:	463b      	mov	r3, r7
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cb8:	4b1e      	ldr	r3, [pc, #120]	; (8002d34 <MX_TIM2_Init+0x98>)
 8002cba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8002cc0:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <MX_TIM2_Init+0x98>)
 8002cc2:	f242 720f 	movw	r2, #9999	; 0x270f
 8002cc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <MX_TIM2_Init+0x98>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002cce:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <MX_TIM2_Init+0x98>)
 8002cd0:	f242 720f 	movw	r2, #9999	; 0x270f
 8002cd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cd6:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <MX_TIM2_Init+0x98>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cdc:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <MX_TIM2_Init+0x98>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ce2:	4814      	ldr	r0, [pc, #80]	; (8002d34 <MX_TIM2_Init+0x98>)
 8002ce4:	f004 fe2e 	bl	8007944 <HAL_TIM_Base_Init>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002cee:	f7ff fc65 	bl	80025bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cf6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cf8:	f107 0308 	add.w	r3, r7, #8
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	480d      	ldr	r0, [pc, #52]	; (8002d34 <MX_TIM2_Init+0x98>)
 8002d00:	f005 f888 	bl	8007e14 <HAL_TIM_ConfigClockSource>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002d0a:	f7ff fc57 	bl	80025bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d16:	463b      	mov	r3, r7
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4806      	ldr	r0, [pc, #24]	; (8002d34 <MX_TIM2_Init+0x98>)
 8002d1c:	f005 fb0e 	bl	800833c <HAL_TIMEx_MasterConfigSynchronization>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002d26:	f7ff fc49 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d2a:	bf00      	nop
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200004bc 	.word	0x200004bc

08002d38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d3e:	f107 0308 	add.w	r3, r7, #8
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	605a      	str	r2, [r3, #4]
 8002d48:	609a      	str	r2, [r3, #8]
 8002d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d4c:	463b      	mov	r3, r7
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <MX_TIM3_Init+0x94>)
 8002d56:	4a1e      	ldr	r2, [pc, #120]	; (8002dd0 <MX_TIM3_Init+0x98>)
 8002d58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8002d5a:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <MX_TIM3_Init+0x94>)
 8002d5c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d62:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <MX_TIM3_Init+0x94>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8002d68:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <MX_TIM3_Init+0x94>)
 8002d6a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002d6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d70:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <MX_TIM3_Init+0x94>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d76:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <MX_TIM3_Init+0x94>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d7c:	4813      	ldr	r0, [pc, #76]	; (8002dcc <MX_TIM3_Init+0x94>)
 8002d7e:	f004 fde1 	bl	8007944 <HAL_TIM_Base_Init>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002d88:	f7ff fc18 	bl	80025bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d92:	f107 0308 	add.w	r3, r7, #8
 8002d96:	4619      	mov	r1, r3
 8002d98:	480c      	ldr	r0, [pc, #48]	; (8002dcc <MX_TIM3_Init+0x94>)
 8002d9a:	f005 f83b 	bl	8007e14 <HAL_TIM_ConfigClockSource>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002da4:	f7ff fc0a 	bl	80025bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002da8:	2300      	movs	r3, #0
 8002daa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002db0:	463b      	mov	r3, r7
 8002db2:	4619      	mov	r1, r3
 8002db4:	4805      	ldr	r0, [pc, #20]	; (8002dcc <MX_TIM3_Init+0x94>)
 8002db6:	f005 fac1 	bl	800833c <HAL_TIMEx_MasterConfigSynchronization>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002dc0:	f7ff fbfc 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002dc4:	bf00      	nop
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000570 	.word	0x20000570
 8002dd0:	40000400 	.word	0x40000400

08002dd4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dda:	f107 0308 	add.w	r3, r7, #8
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de8:	463b      	mov	r3, r7
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <MX_TIM4_Init+0x94>)
 8002df2:	4a1e      	ldr	r2, [pc, #120]	; (8002e6c <MX_TIM4_Init+0x98>)
 8002df4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8002df6:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <MX_TIM4_Init+0x94>)
 8002df8:	f242 720f 	movw	r2, #9999	; 0x270f
 8002dfc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <MX_TIM4_Init+0x94>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8002e04:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <MX_TIM4_Init+0x94>)
 8002e06:	f242 720f 	movw	r2, #9999	; 0x270f
 8002e0a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e0c:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <MX_TIM4_Init+0x94>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <MX_TIM4_Init+0x94>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e18:	4813      	ldr	r0, [pc, #76]	; (8002e68 <MX_TIM4_Init+0x94>)
 8002e1a:	f004 fd93 	bl	8007944 <HAL_TIM_Base_Init>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002e24:	f7ff fbca 	bl	80025bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e2e:	f107 0308 	add.w	r3, r7, #8
 8002e32:	4619      	mov	r1, r3
 8002e34:	480c      	ldr	r0, [pc, #48]	; (8002e68 <MX_TIM4_Init+0x94>)
 8002e36:	f004 ffed 	bl	8007e14 <HAL_TIM_ConfigClockSource>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002e40:	f7ff fbbc 	bl	80025bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e44:	2300      	movs	r3, #0
 8002e46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e4c:	463b      	mov	r3, r7
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4805      	ldr	r0, [pc, #20]	; (8002e68 <MX_TIM4_Init+0x94>)
 8002e52:	f005 fa73 	bl	800833c <HAL_TIMEx_MasterConfigSynchronization>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002e5c:	f7ff fbae 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e60:	bf00      	nop
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000624 	.word	0x20000624
 8002e6c:	40000800 	.word	0x40000800

08002e70 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e76:	f107 0308 	add.w	r3, r7, #8
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e84:	463b      	mov	r3, r7
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002e8c:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <MX_TIM5_Init+0x94>)
 8002e8e:	4a1e      	ldr	r2, [pc, #120]	; (8002f08 <MX_TIM5_Init+0x98>)
 8002e90:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002e92:	4b1c      	ldr	r3, [pc, #112]	; (8002f04 <MX_TIM5_Init+0x94>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e98:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <MX_TIM5_Init+0x94>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002e9e:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <MX_TIM5_Init+0x94>)
 8002ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ea6:	4b17      	ldr	r3, [pc, #92]	; (8002f04 <MX_TIM5_Init+0x94>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eac:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <MX_TIM5_Init+0x94>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002eb2:	4814      	ldr	r0, [pc, #80]	; (8002f04 <MX_TIM5_Init+0x94>)
 8002eb4:	f004 fd46 	bl	8007944 <HAL_TIM_Base_Init>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002ebe:	f7ff fb7d 	bl	80025bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002ec8:	f107 0308 	add.w	r3, r7, #8
 8002ecc:	4619      	mov	r1, r3
 8002ece:	480d      	ldr	r0, [pc, #52]	; (8002f04 <MX_TIM5_Init+0x94>)
 8002ed0:	f004 ffa0 	bl	8007e14 <HAL_TIM_ConfigClockSource>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002eda:	f7ff fb6f 	bl	80025bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002ee6:	463b      	mov	r3, r7
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4806      	ldr	r0, [pc, #24]	; (8002f04 <MX_TIM5_Init+0x94>)
 8002eec:	f005 fa26 	bl	800833c <HAL_TIMEx_MasterConfigSynchronization>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002ef6:	f7ff fb61 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002efa:	bf00      	nop
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	200006d8 	.word	0x200006d8
 8002f08:	40000c00 	.word	0x40000c00

08002f0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1c:	d10e      	bne.n	8002f3c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	4b2a      	ldr	r3, [pc, #168]	; (8002fcc <HAL_TIM_Base_MspInit+0xc0>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a29      	ldr	r2, [pc, #164]	; (8002fcc <HAL_TIM_Base_MspInit+0xc0>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <HAL_TIM_Base_MspInit+0xc0>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002f3a:	e042      	b.n	8002fc2 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a23      	ldr	r2, [pc, #140]	; (8002fd0 <HAL_TIM_Base_MspInit+0xc4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10e      	bne.n	8002f64 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <HAL_TIM_Base_MspInit+0xc0>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	4a1f      	ldr	r2, [pc, #124]	; (8002fcc <HAL_TIM_Base_MspInit+0xc0>)
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	6413      	str	r3, [r2, #64]	; 0x40
 8002f56:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <HAL_TIM_Base_MspInit+0xc0>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	693b      	ldr	r3, [r7, #16]
}
 8002f62:	e02e      	b.n	8002fc2 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <HAL_TIM_Base_MspInit+0xc8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d116      	bne.n	8002f9c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <HAL_TIM_Base_MspInit+0xc0>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <HAL_TIM_Base_MspInit+0xc0>)
 8002f78:	f043 0304 	orr.w	r3, r3, #4
 8002f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7e:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <HAL_TIM_Base_MspInit+0xc0>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2105      	movs	r1, #5
 8002f8e:	201e      	movs	r0, #30
 8002f90:	f000 fe56 	bl	8003c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f94:	201e      	movs	r0, #30
 8002f96:	f000 fe6f 	bl	8003c78 <HAL_NVIC_EnableIRQ>
}
 8002f9a:	e012      	b.n	8002fc2 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0d      	ldr	r2, [pc, #52]	; (8002fd8 <HAL_TIM_Base_MspInit+0xcc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10d      	bne.n	8002fc2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <HAL_TIM_Base_MspInit+0xc0>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a07      	ldr	r2, [pc, #28]	; (8002fcc <HAL_TIM_Base_MspInit+0xc0>)
 8002fb0:	f043 0308 	orr.w	r3, r3, #8
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <HAL_TIM_Base_MspInit+0xc0>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
}
 8002fc2:	bf00      	nop
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800
 8002fd8:	40000c00 	.word	0x40000c00

08002fdc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fe0:	4b11      	ldr	r3, [pc, #68]	; (8003028 <MX_USART1_UART_Init+0x4c>)
 8002fe2:	4a12      	ldr	r2, [pc, #72]	; (800302c <MX_USART1_UART_Init+0x50>)
 8002fe4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <MX_USART1_UART_Init+0x4c>)
 8002fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <MX_USART1_UART_Init+0x4c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <MX_USART1_UART_Init+0x4c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <MX_USART1_UART_Init+0x4c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <MX_USART1_UART_Init+0x4c>)
 8003002:	220c      	movs	r2, #12
 8003004:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003006:	4b08      	ldr	r3, [pc, #32]	; (8003028 <MX_USART1_UART_Init+0x4c>)
 8003008:	2200      	movs	r2, #0
 800300a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <MX_USART1_UART_Init+0x4c>)
 800300e:	2200      	movs	r2, #0
 8003010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003012:	4805      	ldr	r0, [pc, #20]	; (8003028 <MX_USART1_UART_Init+0x4c>)
 8003014:	f005 fa1e 	bl	8008454 <HAL_UART_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800301e:	f7ff facd 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	2000078c 	.word	0x2000078c
 800302c:	40011000 	.word	0x40011000

08003030 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	; 0x28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	f107 0314 	add.w	r3, r7, #20
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a28      	ldr	r2, [pc, #160]	; (80030f0 <HAL_UART_MspInit+0xc0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d14a      	bne.n	80030e8 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	4b27      	ldr	r3, [pc, #156]	; (80030f4 <HAL_UART_MspInit+0xc4>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	4a26      	ldr	r2, [pc, #152]	; (80030f4 <HAL_UART_MspInit+0xc4>)
 800305c:	f043 0310 	orr.w	r3, r3, #16
 8003060:	6453      	str	r3, [r2, #68]	; 0x44
 8003062:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_UART_MspInit+0xc4>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <HAL_UART_MspInit+0xc4>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	4a1f      	ldr	r2, [pc, #124]	; (80030f4 <HAL_UART_MspInit+0xc4>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6313      	str	r3, [r2, #48]	; 0x30
 800307e:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_UART_MspInit+0xc4>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_UART_MspInit+0xc4>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	4a18      	ldr	r2, [pc, #96]	; (80030f4 <HAL_UART_MspInit+0xc4>)
 8003094:	f043 0302 	orr.w	r3, r3, #2
 8003098:	6313      	str	r3, [r2, #48]	; 0x30
 800309a:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <HAL_UART_MspInit+0xc4>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80030a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2302      	movs	r3, #2
 80030ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b4:	2303      	movs	r3, #3
 80030b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030b8:	2307      	movs	r3, #7
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	4619      	mov	r1, r3
 80030c2:	480d      	ldr	r0, [pc, #52]	; (80030f8 <HAL_UART_MspInit+0xc8>)
 80030c4:	f000 ffda 	bl	800407c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030cc:	2302      	movs	r3, #2
 80030ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d4:	2303      	movs	r3, #3
 80030d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030d8:	2307      	movs	r3, #7
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030dc:	f107 0314 	add.w	r3, r7, #20
 80030e0:	4619      	mov	r1, r3
 80030e2:	4806      	ldr	r0, [pc, #24]	; (80030fc <HAL_UART_MspInit+0xcc>)
 80030e4:	f000 ffca 	bl	800407c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80030e8:	bf00      	nop
 80030ea:	3728      	adds	r7, #40	; 0x28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40011000 	.word	0x40011000
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40020000 	.word	0x40020000
 80030fc:	40020400 	.word	0x40020400

08003100 <MX_WWDG_Init>:

WWDG_HandleTypeDef hwwdg;

/* WWDG init function */
void MX_WWDG_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8003104:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <MX_WWDG_Init+0x38>)
 8003106:	4a0d      	ldr	r2, [pc, #52]	; (800313c <MX_WWDG_Init+0x3c>)
 8003108:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <MX_WWDG_Init+0x38>)
 800310c:	2200      	movs	r2, #0
 800310e:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8003110:	4b09      	ldr	r3, [pc, #36]	; (8003138 <MX_WWDG_Init+0x38>)
 8003112:	2240      	movs	r2, #64	; 0x40
 8003114:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 8003116:	4b08      	ldr	r3, [pc, #32]	; (8003138 <MX_WWDG_Init+0x38>)
 8003118:	2240      	movs	r2, #64	; 0x40
 800311a:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <MX_WWDG_Init+0x38>)
 800311e:	2200      	movs	r2, #0
 8003120:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8003122:	4805      	ldr	r0, [pc, #20]	; (8003138 <MX_WWDG_Init+0x38>)
 8003124:	f005 fcf8 	bl	8008b18 <HAL_WWDG_Init>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 800312e:	f7ff fa45 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000800 	.word	0x20000800
 800313c:	40002c00 	.word	0x40002c00

08003140 <HAL_WWDG_MspInit>:

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* wwdgHandle)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]

  if(wwdgHandle->Instance==WWDG)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a0b      	ldr	r2, [pc, #44]	; (800317c <HAL_WWDG_MspInit+0x3c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d10d      	bne.n	800316e <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* WWDG clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_WWDG_MspInit+0x40>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	4a09      	ldr	r2, [pc, #36]	; (8003180 <HAL_WWDG_MspInit+0x40>)
 800315c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003160:	6413      	str	r3, [r2, #64]	; 0x40
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <HAL_WWDG_MspInit+0x40>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }
}
 800316e:	bf00      	nop
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40002c00 	.word	0x40002c00
 8003180:	40023800 	.word	0x40023800

08003184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003188:	480d      	ldr	r0, [pc, #52]	; (80031c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800318a:	490e      	ldr	r1, [pc, #56]	; (80031c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800318c:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800318e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003190:	e002      	b.n	8003198 <LoopCopyDataInit>

08003192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003196:	3304      	adds	r3, #4

08003198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800319a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800319c:	d3f9      	bcc.n	8003192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800319e:	4a0b      	ldr	r2, [pc, #44]	; (80031cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031a0:	4c0b      	ldr	r4, [pc, #44]	; (80031d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031a4:	e001      	b.n	80031aa <LoopFillZerobss>

080031a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031a8:	3204      	adds	r2, #4

080031aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031ac:	d3fb      	bcc.n	80031a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031ae:	f7ff fd63 	bl	8002c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031b2:	f008 fecb 	bl	800bf4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031b6:	f7ff f927 	bl	8002408 <main>
  bx  lr    
 80031ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031c4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80031c8:	0800cfa0 	.word	0x0800cfa0
  ldr r2, =_sbss
 80031cc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80031d0:	2000b4b0 	.word	0x2000b4b0

080031d4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031d4:	e7fe      	b.n	80031d4 <DMA1_Stream0_IRQHandler>
	...

080031d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031dc:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <HAL_Init+0x40>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0d      	ldr	r2, [pc, #52]	; (8003218 <HAL_Init+0x40>)
 80031e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_Init+0x40>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <HAL_Init+0x40>)
 80031ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <HAL_Init+0x40>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a07      	ldr	r2, [pc, #28]	; (8003218 <HAL_Init+0x40>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003200:	2003      	movs	r0, #3
 8003202:	f000 fd12 	bl	8003c2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003206:	200f      	movs	r0, #15
 8003208:	f7ff fc38 	bl	8002a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800320c:	f7ff fbfa 	bl	8002a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023c00 	.word	0x40023c00

0800321c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <HAL_IncTick+0x20>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_IncTick+0x24>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4413      	add	r3, r2
 800322c:	4a04      	ldr	r2, [pc, #16]	; (8003240 <HAL_IncTick+0x24>)
 800322e:	6013      	str	r3, [r2, #0]
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000008 	.word	0x20000008
 8003240:	2000081c 	.word	0x2000081c

08003244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return uwTick;
 8003248:	4b03      	ldr	r3, [pc, #12]	; (8003258 <HAL_GetTick+0x14>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	2000081c 	.word	0x2000081c

0800325c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e04a      	b.n	8003308 <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d120      	bne.n	80032bc <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a24      	ldr	r2, [pc, #144]	; (8003310 <HAL_ADC_Init+0xb4>)
 800327e:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a24      	ldr	r2, [pc, #144]	; (8003314 <HAL_ADC_Init+0xb8>)
 8003284:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a23      	ldr	r2, [pc, #140]	; (8003318 <HAL_ADC_Init+0xbc>)
 800328a:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a23      	ldr	r2, [pc, #140]	; (800331c <HAL_ADC_Init+0xc0>)
 8003290:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a22      	ldr	r2, [pc, #136]	; (8003320 <HAL_ADC_Init+0xc4>)
 8003296:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329c:	2b00      	cmp	r3, #0
 800329e:	d102      	bne.n	80032a6 <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a20      	ldr	r2, [pc, #128]	; (8003324 <HAL_ADC_Init+0xc8>)
 80032a4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d118      	bne.n	80032fa <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032d0:	f023 0302 	bic.w	r3, r3, #2
 80032d4:	f043 0202 	orr.w	r2, r3, #2
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 faf1 	bl	80038c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f023 0303 	bic.w	r3, r3, #3
 80032f0:	f043 0201 	orr.w	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40
 80032f8:	e001      	b.n	80032fe <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003306:	7bfb      	ldrb	r3, [r7, #15]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	08003551 	.word	0x08003551
 8003314:	08003565 	.word	0x08003565
 8003318:	08003579 	.word	0x08003579
 800331c:	0800358d 	.word	0x0800358d
 8003320:	08003abd 	.word	0x08003abd
 8003324:	080014e5 	.word	0x080014e5

08003328 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	2300      	movs	r3, #0
 8003336:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d04a      	beq.n	80033f4 <HAL_ADC_IRQHandler+0xcc>
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d047      	beq.n	80033f4 <HAL_ADC_IRQHandler+0xcc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b00      	cmp	r3, #0
 800336e:	d105      	bne.n	800337c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d12b      	bne.n	80033e2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800338e:	2b00      	cmp	r3, #0
 8003390:	d127      	bne.n	80033e2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800339c:	2b00      	cmp	r3, #0
 800339e:	d006      	beq.n	80033ae <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d119      	bne.n	80033e2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0220 	bic.w	r2, r2, #32
 80033bc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d105      	bne.n	80033e2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f06f 0212 	mvn.w	r2, #18
 80033f2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003402:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d058      	beq.n	80034bc <HAL_ADC_IRQHandler+0x194>
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d055      	beq.n	80034bc <HAL_ADC_IRQHandler+0x194>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <HAL_ADC_IRQHandler+0x100>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d139      	bne.n	80034aa <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003440:	2b00      	cmp	r3, #0
 8003442:	d006      	beq.n	8003452 <HAL_ADC_IRQHandler+0x12a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800344e:	2b00      	cmp	r3, #0
 8003450:	d12b      	bne.n	80034aa <HAL_ADC_IRQHandler+0x182>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800345c:	2b00      	cmp	r3, #0
 800345e:	d124      	bne.n	80034aa <HAL_ADC_IRQHandler+0x182>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800346a:	2b00      	cmp	r3, #0
 800346c:	d11d      	bne.n	80034aa <HAL_ADC_IRQHandler+0x182>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003472:	2b00      	cmp	r3, #0
 8003474:	d119      	bne.n	80034aa <HAL_ADC_IRQHandler+0x182>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003484:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d105      	bne.n	80034aa <HAL_ADC_IRQHandler+0x182>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f043 0201 	orr.w	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f06f 020c 	mvn.w	r2, #12
 80034ba:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ca:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d018      	beq.n	8003504 <HAL_ADC_IRQHandler+0x1dc>
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d015      	beq.n	8003504 <HAL_ADC_IRQHandler+0x1dc>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d10e      	bne.n	8003504 <HAL_ADC_IRQHandler+0x1dc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f06f 0201 	mvn.w	r2, #1
 8003502:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003512:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d016      	beq.n	8003548 <HAL_ADC_IRQHandler+0x220>
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d013      	beq.n	8003548 <HAL_ADC_IRQHandler+0x220>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	f043 0202 	orr.w	r2, r3, #2
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0220 	mvn.w	r2, #32
 8003534:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f06f 0220 	mvn.w	r2, #32
 8003546:	601a      	str	r2, [r3, #0]
  }
}
 8003548:	bf00      	nop
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x1c>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e113      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x244>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b09      	cmp	r3, #9
 80035ca:	d925      	bls.n	8003618 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68d9      	ldr	r1, [r3, #12]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	4613      	mov	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	3b1e      	subs	r3, #30
 80035e2:	2207      	movs	r2, #7
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43da      	mvns	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	400a      	ands	r2, r1
 80035f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68d9      	ldr	r1, [r3, #12]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	b29b      	uxth	r3, r3
 8003602:	4618      	mov	r0, r3
 8003604:	4603      	mov	r3, r0
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4403      	add	r3, r0
 800360a:	3b1e      	subs	r3, #30
 800360c:	409a      	lsls	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	e022      	b.n	800365e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6919      	ldr	r1, [r3, #16]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	b29b      	uxth	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	4613      	mov	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	4413      	add	r3, r2
 800362c:	2207      	movs	r2, #7
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43da      	mvns	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	400a      	ands	r2, r1
 800363a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6919      	ldr	r1, [r3, #16]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	4618      	mov	r0, r3
 800364e:	4603      	mov	r3, r0
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	4403      	add	r3, r0
 8003654:	409a      	lsls	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b06      	cmp	r3, #6
 8003664:	d824      	bhi.n	80036b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	3b05      	subs	r3, #5
 8003678:	221f      	movs	r2, #31
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43da      	mvns	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	400a      	ands	r2, r1
 8003686:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	b29b      	uxth	r3, r3
 8003694:	4618      	mov	r0, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	3b05      	subs	r3, #5
 80036a2:	fa00 f203 	lsl.w	r2, r0, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	635a      	str	r2, [r3, #52]	; 0x34
 80036ae:	e04c      	b.n	800374a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b0c      	cmp	r3, #12
 80036b6:	d824      	bhi.n	8003702 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	3b23      	subs	r3, #35	; 0x23
 80036ca:	221f      	movs	r2, #31
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43da      	mvns	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	400a      	ands	r2, r1
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	4618      	mov	r0, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	3b23      	subs	r3, #35	; 0x23
 80036f4:	fa00 f203 	lsl.w	r2, r0, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003700:	e023      	b.n	800374a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	3b41      	subs	r3, #65	; 0x41
 8003714:	221f      	movs	r2, #31
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43da      	mvns	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	400a      	ands	r2, r1
 8003722:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	b29b      	uxth	r3, r3
 8003730:	4618      	mov	r0, r3
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	3b41      	subs	r3, #65	; 0x41
 800373e:	fa00 f203 	lsl.w	r2, r0, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800374a:	4b29      	ldr	r3, [pc, #164]	; (80037f0 <HAL_ADC_ConfigChannel+0x250>)
 800374c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a28      	ldr	r2, [pc, #160]	; (80037f4 <HAL_ADC_ConfigChannel+0x254>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d10f      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x1d8>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b12      	cmp	r3, #18
 800375e:	d10b      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1d      	ldr	r2, [pc, #116]	; (80037f4 <HAL_ADC_ConfigChannel+0x254>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d12b      	bne.n	80037da <HAL_ADC_ConfigChannel+0x23a>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <HAL_ADC_ConfigChannel+0x258>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <HAL_ADC_ConfigChannel+0x1f4>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b11      	cmp	r3, #17
 8003792:	d122      	bne.n	80037da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a11      	ldr	r2, [pc, #68]	; (80037f8 <HAL_ADC_ConfigChannel+0x258>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d111      	bne.n	80037da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037b6:	4b11      	ldr	r3, [pc, #68]	; (80037fc <HAL_ADC_ConfigChannel+0x25c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a11      	ldr	r2, [pc, #68]	; (8003800 <HAL_ADC_ConfigChannel+0x260>)
 80037bc:	fba2 2303 	umull	r2, r3, r2, r3
 80037c0:	0c9a      	lsrs	r2, r3, #18
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037cc:	e002      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f9      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	40012300 	.word	0x40012300
 80037f4:	40012000 	.word	0x40012000
 80037f8:	10000012 	.word	0x10000012
 80037fc:	20000000 	.word	0x20000000
 8003800:	431bde83 	.word	0x431bde83

08003804 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_ADC_AnalogWDGConfig+0x18>
 8003818:	2302      	movs	r3, #2
 800381a:	e04d      	b.n	80038b8 <HAL_ADC_AnalogWDGConfig+0xb4>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	7c1b      	ldrb	r3, [r3, #16]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d108      	bne.n	800383e <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	e007      	b.n	800384e <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800384c:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800385c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003860:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	6852      	ldr	r2, [r2, #4]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	6892      	ldr	r2, [r2, #8]
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 021f 	bic.w	r2, r2, #31
 8003896:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	4619      	mov	r1, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038cc:	4b79      	ldr	r3, [pc, #484]	; (8003ab4 <ADC_Init+0x1f0>)
 80038ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	431a      	orrs	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6859      	ldr	r1, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	021a      	lsls	r2, r3, #8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800391c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6859      	ldr	r1, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800393e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6899      	ldr	r1, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003956:	4a58      	ldr	r2, [pc, #352]	; (8003ab8 <ADC_Init+0x1f4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d022      	beq.n	80039a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800396a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6899      	ldr	r1, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800398c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6899      	ldr	r1, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	609a      	str	r2, [r3, #8]
 80039a0:	e00f      	b.n	80039c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0202 	bic.w	r2, r2, #2
 80039d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6899      	ldr	r1, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	7e1b      	ldrb	r3, [r3, #24]
 80039dc:	005a      	lsls	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d01b      	beq.n	8003a28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6859      	ldr	r1, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	035a      	lsls	r2, r3, #13
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	e007      	b.n	8003a38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	051a      	lsls	r2, r3, #20
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6899      	ldr	r1, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a7a:	025a      	lsls	r2, r3, #9
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6899      	ldr	r1, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	029a      	lsls	r2, r3, #10
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	609a      	str	r2, [r3, #8]
}
 8003aa8:	bf00      	nop
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	40012300 	.word	0x40012300
 8003ab8:	0f000001 	.word	0x0f000001

08003abc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003aec:	4013      	ands	r3, r2
 8003aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b02:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <__NVIC_SetPriorityGrouping+0x44>)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	60d3      	str	r3, [r2, #12]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <__NVIC_GetPriorityGrouping+0x18>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	f003 0307 	and.w	r3, r3, #7
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	db0b      	blt.n	8003b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	f003 021f 	and.w	r2, r3, #31
 8003b4c:	4907      	ldr	r1, [pc, #28]	; (8003b6c <__NVIC_EnableIRQ+0x38>)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	2001      	movs	r0, #1
 8003b56:	fa00 f202 	lsl.w	r2, r0, r2
 8003b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	e000e100 	.word	0xe000e100

08003b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	6039      	str	r1, [r7, #0]
 8003b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	db0a      	blt.n	8003b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	490c      	ldr	r1, [pc, #48]	; (8003bbc <__NVIC_SetPriority+0x4c>)
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	0112      	lsls	r2, r2, #4
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	440b      	add	r3, r1
 8003b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b98:	e00a      	b.n	8003bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	4908      	ldr	r1, [pc, #32]	; (8003bc0 <__NVIC_SetPriority+0x50>)
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	3b04      	subs	r3, #4
 8003ba8:	0112      	lsls	r2, r2, #4
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	440b      	add	r3, r1
 8003bae:	761a      	strb	r2, [r3, #24]
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	e000e100 	.word	0xe000e100
 8003bc0:	e000ed00 	.word	0xe000ed00

08003bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b089      	sub	sp, #36	; 0x24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f1c3 0307 	rsb	r3, r3, #7
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	bf28      	it	cs
 8003be2:	2304      	movcs	r3, #4
 8003be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	3304      	adds	r3, #4
 8003bea:	2b06      	cmp	r3, #6
 8003bec:	d902      	bls.n	8003bf4 <NVIC_EncodePriority+0x30>
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3b03      	subs	r3, #3
 8003bf2:	e000      	b.n	8003bf6 <NVIC_EncodePriority+0x32>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43da      	mvns	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	401a      	ands	r2, r3
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	43d9      	mvns	r1, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c1c:	4313      	orrs	r3, r2
         );
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3724      	adds	r7, #36	; 0x24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff ff4c 	bl	8003ad0 <__NVIC_SetPriorityGrouping>
}
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c52:	f7ff ff61 	bl	8003b18 <__NVIC_GetPriorityGrouping>
 8003c56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	6978      	ldr	r0, [r7, #20]
 8003c5e:	f7ff ffb1 	bl	8003bc4 <NVIC_EncodePriority>
 8003c62:	4602      	mov	r2, r0
 8003c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c68:	4611      	mov	r1, r2
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff ff80 	bl	8003b70 <__NVIC_SetPriority>
}
 8003c70:	bf00      	nop
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff ff54 	bl	8003b34 <__NVIC_EnableIRQ>
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e00e      	b.n	8003cc4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	795b      	ldrb	r3, [r3, #5]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d105      	bne.n	8003cbc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fd fcac 	bl	8001614 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d004      	beq.n	8003cea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2280      	movs	r2, #128	; 0x80
 8003ce4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e00c      	b.n	8003d04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2205      	movs	r2, #5
 8003cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0201 	bic.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d1e:	b2db      	uxtb	r3, r3
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003d36:	4b4b      	ldr	r3, [pc, #300]	; (8003e64 <HAL_FLASH_IRQHandler+0x138>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d020      	beq.n	8003d84 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8003d42:	4b49      	ldr	r3, [pc, #292]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d107      	bne.n	8003d5c <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8003d4c:	4b46      	ldr	r3, [pc, #280]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8003d52:	4b45      	ldr	r3, [pc, #276]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003d54:	f04f 32ff 	mov.w	r2, #4294967295
 8003d58:	60da      	str	r2, [r3, #12]
 8003d5a:	e00b      	b.n	8003d74 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8003d5c:	4b42      	ldr	r3, [pc, #264]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d103      	bne.n	8003d6e <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8003d66:	4b40      	ldr	r3, [pc, #256]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	e002      	b.n	8003d74 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8003d6e:	4b3e      	ldr	r3, [pc, #248]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8003d74:	f000 f88e 	bl	8003e94 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f881 	bl	8003e80 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003d7e:	4b3a      	ldr	r3, [pc, #232]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003d84:	4b37      	ldr	r3, [pc, #220]	; (8003e64 <HAL_FLASH_IRQHandler+0x138>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d04a      	beq.n	8003e26 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003d90:	4b34      	ldr	r3, [pc, #208]	; (8003e64 <HAL_FLASH_IRQHandler+0x138>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8003d96:	4b34      	ldr	r3, [pc, #208]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d12d      	bne.n	8003dfc <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8003da0:	4b31      	ldr	r3, [pc, #196]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	4a30      	ldr	r2, [pc, #192]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003da8:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8003daa:	4b2f      	ldr	r3, [pc, #188]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d015      	beq.n	8003dde <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8003db2:	4b2d      	ldr	r3, [pc, #180]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f857 	bl	8003e6c <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8003dbe:	4b2a      	ldr	r3, [pc, #168]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	4a28      	ldr	r2, [pc, #160]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003dc6:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8003dc8:	4b27      	ldr	r3, [pc, #156]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8003dce:	4b26      	ldr	r3, [pc, #152]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003dd0:	7a1b      	ldrb	r3, [r3, #8]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f8c2 	bl	8003f60 <FLASH_Erase_Sector>
 8003ddc:	e023      	b.n	8003e26 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8003dde:	f04f 33ff 	mov.w	r3, #4294967295
 8003de2:	607b      	str	r3, [r7, #4]
 8003de4:	4a20      	ldr	r2, [pc, #128]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003dea:	4b1f      	ldr	r3, [pc, #124]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8003df0:	f000 f8fe 	bl	8003ff0 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f839 	bl	8003e6c <HAL_FLASH_EndOfOperationCallback>
 8003dfa:	e014      	b.n	8003e26 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8003dfc:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d107      	bne.n	8003e16 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8003e06:	f000 f8f3 	bl	8003ff0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8003e0a:	4b17      	ldr	r3, [pc, #92]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f82c 	bl	8003e6c <HAL_FLASH_EndOfOperationCallback>
 8003e14:	e004      	b.n	8003e20 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003e16:	4b14      	ldr	r3, [pc, #80]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f826 	bl	8003e6c <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003e20:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d114      	bne.n	8003e5a <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8003e30:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <HAL_FLASH_IRQHandler+0x138>)
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	4a0b      	ldr	r2, [pc, #44]	; (8003e64 <HAL_FLASH_IRQHandler+0x138>)
 8003e36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e3a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8003e3c:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <HAL_FLASH_IRQHandler+0x138>)
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	4a08      	ldr	r2, [pc, #32]	; (8003e64 <HAL_FLASH_IRQHandler+0x138>)
 8003e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e46:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <HAL_FLASH_IRQHandler+0x138>)
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	4a05      	ldr	r2, [pc, #20]	; (8003e64 <HAL_FLASH_IRQHandler+0x138>)
 8003e4e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003e52:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8003e54:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <HAL_FLASH_IRQHandler+0x13c>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	761a      	strb	r2, [r3, #24]
  }
}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40023c00 	.word	0x40023c00
 8003e68:	20000820 	.word	0x20000820

08003e6c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003e98:	4b2f      	ldr	r3, [pc, #188]	; (8003f58 <FLASH_SetErrorCode+0xc4>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003ea4:	4b2d      	ldr	r3, [pc, #180]	; (8003f5c <FLASH_SetErrorCode+0xc8>)
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	f043 0310 	orr.w	r3, r3, #16
 8003eac:	4a2b      	ldr	r2, [pc, #172]	; (8003f5c <FLASH_SetErrorCode+0xc8>)
 8003eae:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003eb0:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <FLASH_SetErrorCode+0xc4>)
 8003eb2:	2210      	movs	r2, #16
 8003eb4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003eb6:	4b28      	ldr	r3, [pc, #160]	; (8003f58 <FLASH_SetErrorCode+0xc4>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003ec2:	4b26      	ldr	r3, [pc, #152]	; (8003f5c <FLASH_SetErrorCode+0xc8>)
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f043 0308 	orr.w	r3, r3, #8
 8003eca:	4a24      	ldr	r2, [pc, #144]	; (8003f5c <FLASH_SetErrorCode+0xc8>)
 8003ecc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003ece:	4b22      	ldr	r3, [pc, #136]	; (8003f58 <FLASH_SetErrorCode+0xc4>)
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003ed4:	4b20      	ldr	r3, [pc, #128]	; (8003f58 <FLASH_SetErrorCode+0xc4>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d008      	beq.n	8003ef2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003ee0:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <FLASH_SetErrorCode+0xc8>)
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f043 0304 	orr.w	r3, r3, #4
 8003ee8:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <FLASH_SetErrorCode+0xc8>)
 8003eea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003eec:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <FLASH_SetErrorCode+0xc4>)
 8003eee:	2240      	movs	r2, #64	; 0x40
 8003ef0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003ef2:	4b19      	ldr	r3, [pc, #100]	; (8003f58 <FLASH_SetErrorCode+0xc4>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d008      	beq.n	8003f10 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003efe:	4b17      	ldr	r3, [pc, #92]	; (8003f5c <FLASH_SetErrorCode+0xc8>)
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	f043 0302 	orr.w	r3, r3, #2
 8003f06:	4a15      	ldr	r2, [pc, #84]	; (8003f5c <FLASH_SetErrorCode+0xc8>)
 8003f08:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003f0a:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <FLASH_SetErrorCode+0xc4>)
 8003f0c:	2280      	movs	r2, #128	; 0x80
 8003f0e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003f10:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <FLASH_SetErrorCode+0xc4>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d009      	beq.n	8003f30 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <FLASH_SetErrorCode+0xc8>)
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	4a0d      	ldr	r2, [pc, #52]	; (8003f5c <FLASH_SetErrorCode+0xc8>)
 8003f26:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003f28:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <FLASH_SetErrorCode+0xc4>)
 8003f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f2e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003f30:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <FLASH_SetErrorCode+0xc4>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003f3c:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <FLASH_SetErrorCode+0xc8>)
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f043 0320 	orr.w	r3, r3, #32
 8003f44:	4a05      	ldr	r2, [pc, #20]	; (8003f5c <FLASH_SetErrorCode+0xc8>)
 8003f46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <FLASH_SetErrorCode+0xc4>)
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	60da      	str	r2, [r3, #12]
  }
}
 8003f4e:	bf00      	nop
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	40023c00 	.word	0x40023c00
 8003f5c:	20000820 	.word	0x20000820

08003f60 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	e010      	b.n	8003f9e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d103      	bne.n	8003f8a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	e009      	b.n	8003f9e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003f8a:	78fb      	ldrb	r3, [r7, #3]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d103      	bne.n	8003f98 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	e002      	b.n	8003f9e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003f98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f9c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f9e:	4b13      	ldr	r3, [pc, #76]	; (8003fec <FLASH_Erase_Sector+0x8c>)
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	4a12      	ldr	r2, [pc, #72]	; (8003fec <FLASH_Erase_Sector+0x8c>)
 8003fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <FLASH_Erase_Sector+0x8c>)
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	490f      	ldr	r1, [pc, #60]	; (8003fec <FLASH_Erase_Sector+0x8c>)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <FLASH_Erase_Sector+0x8c>)
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	4a0c      	ldr	r2, [pc, #48]	; (8003fec <FLASH_Erase_Sector+0x8c>)
 8003fbc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003fc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <FLASH_Erase_Sector+0x8c>)
 8003fc4:	691a      	ldr	r2, [r3, #16]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	4a07      	ldr	r2, [pc, #28]	; (8003fec <FLASH_Erase_Sector+0x8c>)
 8003fce:	f043 0302 	orr.w	r3, r3, #2
 8003fd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <FLASH_Erase_Sector+0x8c>)
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	4a04      	ldr	r2, [pc, #16]	; (8003fec <FLASH_Erase_Sector+0x8c>)
 8003fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fde:	6113      	str	r3, [r2, #16]
}
 8003fe0:	bf00      	nop
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	40023c00 	.word	0x40023c00

08003ff0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003ff4:	4b20      	ldr	r3, [pc, #128]	; (8004078 <FLASH_FlushCaches+0x88>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d017      	beq.n	8004030 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004000:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <FLASH_FlushCaches+0x88>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1c      	ldr	r2, [pc, #112]	; (8004078 <FLASH_FlushCaches+0x88>)
 8004006:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800400a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800400c:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <FLASH_FlushCaches+0x88>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a19      	ldr	r2, [pc, #100]	; (8004078 <FLASH_FlushCaches+0x88>)
 8004012:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	4b17      	ldr	r3, [pc, #92]	; (8004078 <FLASH_FlushCaches+0x88>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a16      	ldr	r2, [pc, #88]	; (8004078 <FLASH_FlushCaches+0x88>)
 800401e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004022:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004024:	4b14      	ldr	r3, [pc, #80]	; (8004078 <FLASH_FlushCaches+0x88>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a13      	ldr	r2, [pc, #76]	; (8004078 <FLASH_FlushCaches+0x88>)
 800402a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800402e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004030:	4b11      	ldr	r3, [pc, #68]	; (8004078 <FLASH_FlushCaches+0x88>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004038:	2b00      	cmp	r3, #0
 800403a:	d017      	beq.n	800406c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800403c:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <FLASH_FlushCaches+0x88>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a0d      	ldr	r2, [pc, #52]	; (8004078 <FLASH_FlushCaches+0x88>)
 8004042:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004046:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <FLASH_FlushCaches+0x88>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <FLASH_FlushCaches+0x88>)
 800404e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b08      	ldr	r3, [pc, #32]	; (8004078 <FLASH_FlushCaches+0x88>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a07      	ldr	r2, [pc, #28]	; (8004078 <FLASH_FlushCaches+0x88>)
 800405a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800405e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <FLASH_FlushCaches+0x88>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a04      	ldr	r2, [pc, #16]	; (8004078 <FLASH_FlushCaches+0x88>)
 8004066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800406a:	6013      	str	r3, [r2, #0]
  }
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40023c00 	.word	0x40023c00

0800407c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800407c:	b480      	push	{r7}
 800407e:	b089      	sub	sp, #36	; 0x24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800408e:	2300      	movs	r3, #0
 8004090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	e159      	b.n	800434c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004098:	2201      	movs	r2, #1
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4013      	ands	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	f040 8148 	bne.w	8004346 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d005      	beq.n	80040ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d130      	bne.n	8004130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	2203      	movs	r2, #3
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4013      	ands	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004104:	2201      	movs	r2, #1
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	f003 0201 	and.w	r2, r3, #1
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	2b03      	cmp	r3, #3
 800413a:	d017      	beq.n	800416c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	2203      	movs	r2, #3
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4013      	ands	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4313      	orrs	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d123      	bne.n	80041c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	08da      	lsrs	r2, r3, #3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3208      	adds	r2, #8
 8004180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	220f      	movs	r2, #15
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	08da      	lsrs	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3208      	adds	r2, #8
 80041ba:	69b9      	ldr	r1, [r7, #24]
 80041bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	2203      	movs	r2, #3
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4013      	ands	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 0203 	and.w	r2, r3, #3
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80a2 	beq.w	8004346 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	4b57      	ldr	r3, [pc, #348]	; (8004364 <HAL_GPIO_Init+0x2e8>)
 8004208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420a:	4a56      	ldr	r2, [pc, #344]	; (8004364 <HAL_GPIO_Init+0x2e8>)
 800420c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004210:	6453      	str	r3, [r2, #68]	; 0x44
 8004212:	4b54      	ldr	r3, [pc, #336]	; (8004364 <HAL_GPIO_Init+0x2e8>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800421e:	4a52      	ldr	r2, [pc, #328]	; (8004368 <HAL_GPIO_Init+0x2ec>)
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	089b      	lsrs	r3, r3, #2
 8004224:	3302      	adds	r3, #2
 8004226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800422a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	220f      	movs	r2, #15
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a49      	ldr	r2, [pc, #292]	; (800436c <HAL_GPIO_Init+0x2f0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d019      	beq.n	800427e <HAL_GPIO_Init+0x202>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a48      	ldr	r2, [pc, #288]	; (8004370 <HAL_GPIO_Init+0x2f4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d013      	beq.n	800427a <HAL_GPIO_Init+0x1fe>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a47      	ldr	r2, [pc, #284]	; (8004374 <HAL_GPIO_Init+0x2f8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00d      	beq.n	8004276 <HAL_GPIO_Init+0x1fa>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a46      	ldr	r2, [pc, #280]	; (8004378 <HAL_GPIO_Init+0x2fc>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d007      	beq.n	8004272 <HAL_GPIO_Init+0x1f6>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a45      	ldr	r2, [pc, #276]	; (800437c <HAL_GPIO_Init+0x300>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d101      	bne.n	800426e <HAL_GPIO_Init+0x1f2>
 800426a:	2304      	movs	r3, #4
 800426c:	e008      	b.n	8004280 <HAL_GPIO_Init+0x204>
 800426e:	2307      	movs	r3, #7
 8004270:	e006      	b.n	8004280 <HAL_GPIO_Init+0x204>
 8004272:	2303      	movs	r3, #3
 8004274:	e004      	b.n	8004280 <HAL_GPIO_Init+0x204>
 8004276:	2302      	movs	r3, #2
 8004278:	e002      	b.n	8004280 <HAL_GPIO_Init+0x204>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <HAL_GPIO_Init+0x204>
 800427e:	2300      	movs	r3, #0
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	f002 0203 	and.w	r2, r2, #3
 8004286:	0092      	lsls	r2, r2, #2
 8004288:	4093      	lsls	r3, r2
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004290:	4935      	ldr	r1, [pc, #212]	; (8004368 <HAL_GPIO_Init+0x2ec>)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	089b      	lsrs	r3, r3, #2
 8004296:	3302      	adds	r3, #2
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800429e:	4b38      	ldr	r3, [pc, #224]	; (8004380 <HAL_GPIO_Init+0x304>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	43db      	mvns	r3, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4013      	ands	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042c2:	4a2f      	ldr	r2, [pc, #188]	; (8004380 <HAL_GPIO_Init+0x304>)
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042c8:	4b2d      	ldr	r3, [pc, #180]	; (8004380 <HAL_GPIO_Init+0x304>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042ec:	4a24      	ldr	r2, [pc, #144]	; (8004380 <HAL_GPIO_Init+0x304>)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042f2:	4b23      	ldr	r3, [pc, #140]	; (8004380 <HAL_GPIO_Init+0x304>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	43db      	mvns	r3, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4013      	ands	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004316:	4a1a      	ldr	r2, [pc, #104]	; (8004380 <HAL_GPIO_Init+0x304>)
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800431c:	4b18      	ldr	r3, [pc, #96]	; (8004380 <HAL_GPIO_Init+0x304>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004340:	4a0f      	ldr	r2, [pc, #60]	; (8004380 <HAL_GPIO_Init+0x304>)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3301      	adds	r3, #1
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	2b0f      	cmp	r3, #15
 8004350:	f67f aea2 	bls.w	8004098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	3724      	adds	r7, #36	; 0x24
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40023800 	.word	0x40023800
 8004368:	40013800 	.word	0x40013800
 800436c:	40020000 	.word	0x40020000
 8004370:	40020400 	.word	0x40020400
 8004374:	40020800 	.word	0x40020800
 8004378:	40020c00 	.word	0x40020c00
 800437c:	40021000 	.word	0x40021000
 8004380:	40013c00 	.word	0x40013c00

08004384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	807b      	strh	r3, [r7, #2]
 8004390:	4613      	mov	r3, r2
 8004392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004394:	787b      	ldrb	r3, [r7, #1]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800439a:	887a      	ldrh	r2, [r7, #2]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043a0:	e003      	b.n	80043aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043a2:	887b      	ldrh	r3, [r7, #2]
 80043a4:	041a      	lsls	r2, r3, #16
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	619a      	str	r2, [r3, #24]
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e171      	b.n	80046ae <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d12c      	bne.n	8004430 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a77      	ldr	r2, [pc, #476]	; (80045c0 <HAL_I2C_Init+0x208>)
 80043e2:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a77      	ldr	r2, [pc, #476]	; (80045c4 <HAL_I2C_Init+0x20c>)
 80043e8:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a76      	ldr	r2, [pc, #472]	; (80045c8 <HAL_I2C_Init+0x210>)
 80043ee:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a76      	ldr	r2, [pc, #472]	; (80045cc <HAL_I2C_Init+0x214>)
 80043f4:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a75      	ldr	r2, [pc, #468]	; (80045d0 <HAL_I2C_Init+0x218>)
 80043fa:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a75      	ldr	r2, [pc, #468]	; (80045d4 <HAL_I2C_Init+0x21c>)
 8004400:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a74      	ldr	r2, [pc, #464]	; (80045d8 <HAL_I2C_Init+0x220>)
 8004406:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a74      	ldr	r2, [pc, #464]	; (80045dc <HAL_I2C_Init+0x224>)
 800440c:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a73      	ldr	r2, [pc, #460]	; (80045e0 <HAL_I2C_Init+0x228>)
 8004412:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a73      	ldr	r2, [pc, #460]	; (80045e4 <HAL_I2C_Init+0x22c>)
 8004418:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a70      	ldr	r2, [pc, #448]	; (80045e8 <HAL_I2C_Init+0x230>)
 8004426:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2224      	movs	r2, #36	; 0x24
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0201 	bic.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004456:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004466:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004468:	f002 faa6 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 800446c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4a5e      	ldr	r2, [pc, #376]	; (80045ec <HAL_I2C_Init+0x234>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d807      	bhi.n	8004488 <HAL_I2C_Init+0xd0>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4a5d      	ldr	r2, [pc, #372]	; (80045f0 <HAL_I2C_Init+0x238>)
 800447c:	4293      	cmp	r3, r2
 800447e:	bf94      	ite	ls
 8004480:	2301      	movls	r3, #1
 8004482:	2300      	movhi	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	e006      	b.n	8004496 <HAL_I2C_Init+0xde>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4a5a      	ldr	r2, [pc, #360]	; (80045f4 <HAL_I2C_Init+0x23c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	bf94      	ite	ls
 8004490:	2301      	movls	r3, #1
 8004492:	2300      	movhi	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e107      	b.n	80046ae <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4a55      	ldr	r2, [pc, #340]	; (80045f8 <HAL_I2C_Init+0x240>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	0c9b      	lsrs	r3, r3, #18
 80044a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	4a47      	ldr	r2, [pc, #284]	; (80045ec <HAL_I2C_Init+0x234>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d802      	bhi.n	80044d8 <HAL_I2C_Init+0x120>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	3301      	adds	r3, #1
 80044d6:	e009      	b.n	80044ec <HAL_I2C_Init+0x134>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044de:	fb02 f303 	mul.w	r3, r2, r3
 80044e2:	4a46      	ldr	r2, [pc, #280]	; (80045fc <HAL_I2C_Init+0x244>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	099b      	lsrs	r3, r3, #6
 80044ea:	3301      	adds	r3, #1
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	4939      	ldr	r1, [pc, #228]	; (80045ec <HAL_I2C_Init+0x234>)
 8004508:	428b      	cmp	r3, r1
 800450a:	d819      	bhi.n	8004540 <HAL_I2C_Init+0x188>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	1e59      	subs	r1, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	fbb1 f3f3 	udiv	r3, r1, r3
 800451a:	1c59      	adds	r1, r3, #1
 800451c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004520:	400b      	ands	r3, r1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_I2C_Init+0x184>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1e59      	subs	r1, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	fbb1 f3f3 	udiv	r3, r1, r3
 8004534:	3301      	adds	r3, #1
 8004536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800453a:	e071      	b.n	8004620 <HAL_I2C_Init+0x268>
 800453c:	2304      	movs	r3, #4
 800453e:	e06f      	b.n	8004620 <HAL_I2C_Init+0x268>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d111      	bne.n	800456c <HAL_I2C_Init+0x1b4>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	1e58      	subs	r0, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6859      	ldr	r1, [r3, #4]
 8004550:	460b      	mov	r3, r1
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	440b      	add	r3, r1
 8004556:	fbb0 f3f3 	udiv	r3, r0, r3
 800455a:	3301      	adds	r3, #1
 800455c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004560:	2b00      	cmp	r3, #0
 8004562:	bf0c      	ite	eq
 8004564:	2301      	moveq	r3, #1
 8004566:	2300      	movne	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	e012      	b.n	8004592 <HAL_I2C_Init+0x1da>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	1e58      	subs	r0, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6859      	ldr	r1, [r3, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	0099      	lsls	r1, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004582:	3301      	adds	r3, #1
 8004584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004588:	2b00      	cmp	r3, #0
 800458a:	bf0c      	ite	eq
 800458c:	2301      	moveq	r3, #1
 800458e:	2300      	movne	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_I2C_Init+0x1e2>
 8004596:	2301      	movs	r3, #1
 8004598:	e042      	b.n	8004620 <HAL_I2C_Init+0x268>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d12e      	bne.n	8004600 <HAL_I2C_Init+0x248>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1e58      	subs	r0, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6859      	ldr	r1, [r3, #4]
 80045aa:	460b      	mov	r3, r1
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	440b      	add	r3, r1
 80045b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80045b4:	3301      	adds	r3, #1
 80045b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045be:	e02f      	b.n	8004620 <HAL_I2C_Init+0x268>
 80045c0:	08004ae9 	.word	0x08004ae9
 80045c4:	08004afd 	.word	0x08004afd
 80045c8:	08004b11 	.word	0x08004b11
 80045cc:	08004b25 	.word	0x08004b25
 80045d0:	08004b55 	.word	0x08004b55
 80045d4:	08004b69 	.word	0x08004b69
 80045d8:	08004b7d 	.word	0x08004b7d
 80045dc:	08004b91 	.word	0x08004b91
 80045e0:	08004ba5 	.word	0x08004ba5
 80045e4:	08004b39 	.word	0x08004b39
 80045e8:	08002359 	.word	0x08002359
 80045ec:	000186a0 	.word	0x000186a0
 80045f0:	001e847f 	.word	0x001e847f
 80045f4:	003d08ff 	.word	0x003d08ff
 80045f8:	431bde83 	.word	0x431bde83
 80045fc:	10624dd3 	.word	0x10624dd3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	1e58      	subs	r0, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6859      	ldr	r1, [r3, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	0099      	lsls	r1, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	fbb0 f3f3 	udiv	r3, r0, r3
 8004616:	3301      	adds	r3, #1
 8004618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800461c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	6809      	ldr	r1, [r1, #0]
 8004624:	4313      	orrs	r3, r2
 8004626:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69da      	ldr	r2, [r3, #28]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800464e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6911      	ldr	r1, [r2, #16]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68d2      	ldr	r2, [r2, #12]
 800465a:	4311      	orrs	r1, r2
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6812      	ldr	r2, [r2, #0]
 8004660:	430b      	orrs	r3, r1
 8004662:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop

080046b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d003      	beq.n	80046f0 <HAL_I2C_EV_IRQHandler+0x38>
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	2b40      	cmp	r3, #64	; 0x40
 80046ec:	f040 80c1 	bne.w	8004872 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10d      	bne.n	8004726 <HAL_I2C_EV_IRQHandler+0x6e>
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004710:	d003      	beq.n	800471a <HAL_I2C_EV_IRQHandler+0x62>
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004718:	d101      	bne.n	800471e <HAL_I2C_EV_IRQHandler+0x66>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <HAL_I2C_EV_IRQHandler+0x68>
 800471e:	2300      	movs	r3, #0
 8004720:	2b01      	cmp	r3, #1
 8004722:	f000 8132 	beq.w	800498a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00c      	beq.n	800474a <HAL_I2C_EV_IRQHandler+0x92>
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	0a5b      	lsrs	r3, r3, #9
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d006      	beq.n	800474a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f001 fc95 	bl	800606c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fd8f 	bl	8005266 <I2C_Master_SB>
 8004748:	e092      	b.n	8004870 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	08db      	lsrs	r3, r3, #3
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <HAL_I2C_EV_IRQHandler+0xb2>
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	0a5b      	lsrs	r3, r3, #9
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fe05 	bl	8005372 <I2C_Master_ADD10>
 8004768:	e082      	b.n	8004870 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	085b      	lsrs	r3, r3, #1
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_I2C_EV_IRQHandler+0xd2>
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	0a5b      	lsrs	r3, r3, #9
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fe1f 	bl	80053c6 <I2C_Master_ADDR>
 8004788:	e072      	b.n	8004870 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	089b      	lsrs	r3, r3, #2
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d03b      	beq.n	800480e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a4:	f000 80f3 	beq.w	800498e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	09db      	lsrs	r3, r3, #7
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00f      	beq.n	80047d4 <HAL_I2C_EV_IRQHandler+0x11c>
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	0a9b      	lsrs	r3, r3, #10
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d009      	beq.n	80047d4 <HAL_I2C_EV_IRQHandler+0x11c>
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	089b      	lsrs	r3, r3, #2
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d103      	bne.n	80047d4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f9f3 	bl	8004bb8 <I2C_MasterTransmit_TXE>
 80047d2:	e04d      	b.n	8004870 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	089b      	lsrs	r3, r3, #2
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80d6 	beq.w	800498e <HAL_I2C_EV_IRQHandler+0x2d6>
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	0a5b      	lsrs	r3, r3, #9
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 80cf 	beq.w	800498e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047f0:	7bbb      	ldrb	r3, [r7, #14]
 80047f2:	2b21      	cmp	r3, #33	; 0x21
 80047f4:	d103      	bne.n	80047fe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fa7d 	bl	8004cf6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047fc:	e0c7      	b.n	800498e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	f040 80c4 	bne.w	800498e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 faee 	bl	8004de8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800480c:	e0bf      	b.n	800498e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800481c:	f000 80b7 	beq.w	800498e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	099b      	lsrs	r3, r3, #6
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00f      	beq.n	800484c <HAL_I2C_EV_IRQHandler+0x194>
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	0a9b      	lsrs	r3, r3, #10
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d009      	beq.n	800484c <HAL_I2C_EV_IRQHandler+0x194>
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	089b      	lsrs	r3, r3, #2
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d103      	bne.n	800484c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fb64 	bl	8004f12 <I2C_MasterReceive_RXNE>
 800484a:	e011      	b.n	8004870 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	089b      	lsrs	r3, r3, #2
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 809a 	beq.w	800498e <HAL_I2C_EV_IRQHandler+0x2d6>
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	0a5b      	lsrs	r3, r3, #9
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 8093 	beq.w	800498e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fc10 	bl	800508e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800486e:	e08e      	b.n	800498e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004870:	e08d      	b.n	800498e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d004      	beq.n	8004884 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	e007      	b.n	8004894 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d012      	beq.n	80048c6 <HAL_I2C_EV_IRQHandler+0x20e>
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	0a5b      	lsrs	r3, r3, #9
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00c      	beq.n	80048c6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80048bc:	69b9      	ldr	r1, [r7, #24]
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 ffd2 	bl	8005868 <I2C_Slave_ADDR>
 80048c4:	e066      	b.n	8004994 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <HAL_I2C_EV_IRQHandler+0x22e>
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	0a5b      	lsrs	r3, r3, #9
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f001 f80c 	bl	80058fc <I2C_Slave_STOPF>
 80048e4:	e056      	b.n	8004994 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048e6:	7bbb      	ldrb	r3, [r7, #14]
 80048e8:	2b21      	cmp	r3, #33	; 0x21
 80048ea:	d002      	beq.n	80048f2 <HAL_I2C_EV_IRQHandler+0x23a>
 80048ec:	7bbb      	ldrb	r3, [r7, #14]
 80048ee:	2b29      	cmp	r3, #41	; 0x29
 80048f0:	d125      	bne.n	800493e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	09db      	lsrs	r3, r3, #7
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00f      	beq.n	800491e <HAL_I2C_EV_IRQHandler+0x266>
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	0a9b      	lsrs	r3, r3, #10
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_I2C_EV_IRQHandler+0x266>
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	089b      	lsrs	r3, r3, #2
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fee6 	bl	80056e8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800491c:	e039      	b.n	8004992 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	089b      	lsrs	r3, r3, #2
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d033      	beq.n	8004992 <HAL_I2C_EV_IRQHandler+0x2da>
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	0a5b      	lsrs	r3, r3, #9
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d02d      	beq.n	8004992 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 ff14 	bl	8005764 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800493c:	e029      	b.n	8004992 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	099b      	lsrs	r3, r3, #6
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00f      	beq.n	800496a <HAL_I2C_EV_IRQHandler+0x2b2>
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	0a9b      	lsrs	r3, r3, #10
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d009      	beq.n	800496a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	089b      	lsrs	r3, r3, #2
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d103      	bne.n	800496a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 ff1f 	bl	80057a6 <I2C_SlaveReceive_RXNE>
 8004968:	e014      	b.n	8004994 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	089b      	lsrs	r3, r3, #2
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00e      	beq.n	8004994 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	0a5b      	lsrs	r3, r3, #9
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d008      	beq.n	8004994 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 ff4e 	bl	8005824 <I2C_SlaveReceive_BTF>
 8004988:	e004      	b.n	8004994 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800498a:	bf00      	nop
 800498c:	e002      	b.n	8004994 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800498e:	bf00      	nop
 8004990:	e000      	b.n	8004994 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004992:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004994:	3720      	adds	r7, #32
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b08a      	sub	sp, #40	; 0x28
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80049b2:	2300      	movs	r3, #0
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049bc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	0a1b      	lsrs	r3, r3, #8
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00e      	beq.n	80049e8 <HAL_I2C_ER_IRQHandler+0x4e>
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	0a1b      	lsrs	r3, r3, #8
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d008      	beq.n	80049e8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	f043 0301 	orr.w	r3, r3, #1
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049e6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	0a5b      	lsrs	r3, r3, #9
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00e      	beq.n	8004a12 <HAL_I2C_ER_IRQHandler+0x78>
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	0a1b      	lsrs	r3, r3, #8
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d008      	beq.n	8004a12 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	f043 0302 	orr.w	r3, r3, #2
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004a10:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	0a9b      	lsrs	r3, r3, #10
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d03f      	beq.n	8004a9e <HAL_I2C_ER_IRQHandler+0x104>
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	0a1b      	lsrs	r3, r3, #8
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d039      	beq.n	8004a9e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004a2a:	7efb      	ldrb	r3, [r7, #27]
 8004a2c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004a44:	7ebb      	ldrb	r3, [r7, #26]
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d112      	bne.n	8004a70 <HAL_I2C_ER_IRQHandler+0xd6>
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10f      	bne.n	8004a70 <HAL_I2C_ER_IRQHandler+0xd6>
 8004a50:	7cfb      	ldrb	r3, [r7, #19]
 8004a52:	2b21      	cmp	r3, #33	; 0x21
 8004a54:	d008      	beq.n	8004a68 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004a56:	7cfb      	ldrb	r3, [r7, #19]
 8004a58:	2b29      	cmp	r3, #41	; 0x29
 8004a5a:	d005      	beq.n	8004a68 <HAL_I2C_ER_IRQHandler+0xce>
 8004a5c:	7cfb      	ldrb	r3, [r7, #19]
 8004a5e:	2b28      	cmp	r3, #40	; 0x28
 8004a60:	d106      	bne.n	8004a70 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b21      	cmp	r3, #33	; 0x21
 8004a66:	d103      	bne.n	8004a70 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f001 f87b 	bl	8005b64 <I2C_Slave_AF>
 8004a6e:	e016      	b.n	8004a9e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a78:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	f043 0304 	orr.w	r3, r3, #4
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a82:	7efb      	ldrb	r3, [r7, #27]
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d002      	beq.n	8004a8e <HAL_I2C_ER_IRQHandler+0xf4>
 8004a88:	7efb      	ldrb	r3, [r7, #27]
 8004a8a:	2b40      	cmp	r3, #64	; 0x40
 8004a8c:	d107      	bne.n	8004a9e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	0adb      	lsrs	r3, r3, #11
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00e      	beq.n	8004ac8 <HAL_I2C_ER_IRQHandler+0x12e>
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	0a1b      	lsrs	r3, r3, #8
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d008      	beq.n	8004ac8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	f043 0308 	orr.w	r3, r3, #8
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004ac6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f001 f8b4 	bl	8005c48 <I2C_ITError>
  }
}
 8004ae0:	bf00      	nop
 8004ae2:	3728      	adds	r7, #40	; 0x28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	70fb      	strb	r3, [r7, #3]
 8004b44:	4613      	mov	r3, r2
 8004b46:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d153      	bne.n	8004c86 <I2C_MasterTransmit_TXE+0xce>
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	2b21      	cmp	r3, #33	; 0x21
 8004be2:	d150      	bne.n	8004c86 <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d01e      	beq.n	8004c28 <I2C_MasterTransmit_TXE+0x70>
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d01b      	beq.n	8004c28 <I2C_MasterTransmit_TXE+0x70>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bf6:	d017      	beq.n	8004c28 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c06:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2211      	movs	r2, #17
 8004c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c26:	e062      	b.n	8004cee <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c36:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c46:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b40      	cmp	r3, #64	; 0x40
 8004c60:	d108      	bne.n	8004c74 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c72:	e03c      	b.n	8004cee <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c84:	e033      	b.n	8004cee <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	2b21      	cmp	r3, #33	; 0x21
 8004c8a:	d005      	beq.n	8004c98 <I2C_MasterTransmit_TXE+0xe0>
 8004c8c:	7bbb      	ldrb	r3, [r7, #14]
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	d12d      	bne.n	8004cee <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	2b22      	cmp	r3, #34	; 0x22
 8004c96:	d12a      	bne.n	8004cee <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d108      	bne.n	8004cb4 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004cb2:	e01c      	b.n	8004cee <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b40      	cmp	r3, #64	; 0x40
 8004cbe:	d103      	bne.n	8004cc8 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f891 	bl	8004de8 <I2C_MemoryTransmit_TXE_BTF>
}
 8004cc6:	e012      	b.n	8004cee <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	781a      	ldrb	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cec:	e7ff      	b.n	8004cee <I2C_MasterTransmit_TXE+0x136>
 8004cee:	bf00      	nop
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b21      	cmp	r3, #33	; 0x21
 8004d0e:	d167      	bne.n	8004de0 <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d012      	beq.n	8004d40 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	781a      	ldrb	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d3e:	e04f      	b.n	8004de0 <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d01e      	beq.n	8004d84 <I2C_MasterTransmit_BTF+0x8e>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d01b      	beq.n	8004d84 <I2C_MasterTransmit_BTF+0x8e>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d52:	d017      	beq.n	8004d84 <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d62:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2211      	movs	r2, #17
 8004d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	4798      	blx	r3
}
 8004d82:	e02d      	b.n	8004de0 <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d92:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b40      	cmp	r3, #64	; 0x40
 8004dbc:	d108      	bne.n	8004dd0 <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	4798      	blx	r3
}
 8004dce:	e007      	b.n	8004de0 <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	4798      	blx	r3
}
 8004de0:	bf00      	nop
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d11d      	bne.n	8004e3c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d10b      	bne.n	8004e20 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e18:	1c9a      	adds	r2, r3, #2
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004e1e:	e074      	b.n	8004f0a <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	121b      	asrs	r3, r3, #8
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e3a:	e066      	b.n	8004f0a <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d10b      	bne.n	8004e5c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e5a:	e056      	b.n	8004f0a <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d152      	bne.n	8004f0a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	2b22      	cmp	r3, #34	; 0x22
 8004e68:	d10d      	bne.n	8004e86 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e78:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e84:	e041      	b.n	8004f0a <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d015      	beq.n	8004ebc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b21      	cmp	r3, #33	; 0x21
 8004e94:	d112      	bne.n	8004ebc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	781a      	ldrb	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004eba:	e026      	b.n	8004f0a <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d121      	bne.n	8004f0a <I2C_MemoryTransmit_TXE_BTF+0x122>
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	2b21      	cmp	r3, #33	; 0x21
 8004eca:	d11e      	bne.n	8004f0a <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004eda:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	4798      	blx	r3
}
 8004f0a:	bf00      	nop
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b22      	cmp	r3, #34	; 0x22
 8004f24:	f040 80af 	bne.w	8005086 <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d921      	bls.n	8004f7a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	f040 808f 	bne.w	8005086 <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f76:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004f78:	e085      	b.n	8005086 <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d078      	beq.n	8005074 <I2C_MasterReceive_RXNE+0x162>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d002      	beq.n	8004f8e <I2C_MasterReceive_RXNE+0x7c>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d172      	bne.n	8005074 <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f001 f83a 	bl	8006008 <I2C_WaitOnSTOPRequestThroughIT>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d144      	bne.n	8005024 <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fb8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b40      	cmp	r3, #64	; 0x40
 8004ff2:	d10b      	bne.n	800500c <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800500a:	e03c      	b.n	8005086 <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2212      	movs	r2, #18
 8005018:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005022:	e030      	b.n	8005086 <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005032:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005050:	b29b      	uxth	r3, r3
 8005052:	3b01      	subs	r3, #1
 8005054:	b29a      	uxth	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005072:	e008      	b.n	8005086 <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005082:	605a      	str	r2, [r3, #4]
}
 8005084:	e7ff      	b.n	8005086 <I2C_MasterReceive_RXNE+0x174>
 8005086:	bf00      	nop
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d11b      	bne.n	80050de <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80050dc:	e0bf      	b.n	800525e <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d129      	bne.n	800513c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d00a      	beq.n	8005114 <I2C_MasterReceive_BTF+0x86>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d007      	beq.n	8005114 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005112:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800513a:	e090      	b.n	800525e <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d178      	bne.n	8005238 <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d002      	beq.n	8005152 <I2C_MasterReceive_BTF+0xc4>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b10      	cmp	r3, #16
 8005150:	d108      	bne.n	8005164 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e019      	b.n	8005198 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b04      	cmp	r3, #4
 8005168:	d002      	beq.n	8005170 <I2C_MasterReceive_BTF+0xe2>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b02      	cmp	r3, #2
 800516e:	d108      	bne.n	8005182 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e00a      	b.n	8005198 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b10      	cmp	r3, #16
 8005186:	d007      	beq.n	8005198 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005196:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051da:	b29b      	uxth	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b40      	cmp	r3, #64	; 0x40
 8005206:	d10b      	bne.n	8005220 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	4798      	blx	r3
}
 800521e:	e01e      	b.n	800525e <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2212      	movs	r2, #18
 800522c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	4798      	blx	r3
}
 8005236:	e012      	b.n	800525e <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005254:	b29b      	uxth	r3, r3
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800525e:	bf00      	nop
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b40      	cmp	r3, #64	; 0x40
 8005278:	d117      	bne.n	80052aa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527e:	2b00      	cmp	r3, #0
 8005280:	d109      	bne.n	8005296 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005286:	b2db      	uxtb	r3, r3
 8005288:	461a      	mov	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005292:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005294:	e067      	b.n	8005366 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	b2db      	uxtb	r3, r3
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	611a      	str	r2, [r3, #16]
}
 80052a8:	e05d      	b.n	8005366 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052b2:	d133      	bne.n	800531c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b21      	cmp	r3, #33	; 0x21
 80052be:	d109      	bne.n	80052d4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052d0:	611a      	str	r2, [r3, #16]
 80052d2:	e008      	b.n	80052e6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <I2C_Master_SB+0x92>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d108      	bne.n	800530a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d032      	beq.n	8005366 <I2C_Master_SB+0x100>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d02d      	beq.n	8005366 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005318:	605a      	str	r2, [r3, #4]
}
 800531a:	e024      	b.n	8005366 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10e      	bne.n	8005342 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005328:	b29b      	uxth	r3, r3
 800532a:	11db      	asrs	r3, r3, #7
 800532c:	b2db      	uxtb	r3, r3
 800532e:	f003 0306 	and.w	r3, r3, #6
 8005332:	b2db      	uxtb	r3, r3
 8005334:	f063 030f 	orn	r3, r3, #15
 8005338:	b2da      	uxtb	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	611a      	str	r2, [r3, #16]
}
 8005340:	e011      	b.n	8005366 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005346:	2b01      	cmp	r3, #1
 8005348:	d10d      	bne.n	8005366 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	b29b      	uxth	r3, r3
 8005350:	11db      	asrs	r3, r3, #7
 8005352:	b2db      	uxtb	r3, r3
 8005354:	f003 0306 	and.w	r3, r3, #6
 8005358:	b2db      	uxtb	r3, r3
 800535a:	f063 030e 	orn	r3, r3, #14
 800535e:	b2da      	uxtb	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	611a      	str	r2, [r3, #16]
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537e:	b2da      	uxtb	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538a:	2b00      	cmp	r3, #0
 800538c:	d004      	beq.n	8005398 <I2C_Master_ADD10+0x26>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005394:	2b00      	cmp	r3, #0
 8005396:	d108      	bne.n	80053aa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00c      	beq.n	80053ba <I2C_Master_ADD10+0x48>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b8:	605a      	str	r2, [r3, #4]
  }
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b091      	sub	sp, #68	; 0x44
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053dc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b22      	cmp	r3, #34	; 0x22
 80053ee:	f040 8169 	bne.w	80056c4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10f      	bne.n	800541a <I2C_Master_ADDR+0x54>
 80053fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053fe:	2b40      	cmp	r3, #64	; 0x40
 8005400:	d10b      	bne.n	800541a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005402:	2300      	movs	r3, #0
 8005404:	633b      	str	r3, [r7, #48]	; 0x30
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	633b      	str	r3, [r7, #48]	; 0x30
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	633b      	str	r3, [r7, #48]	; 0x30
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	e160      	b.n	80056dc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541e:	2b00      	cmp	r3, #0
 8005420:	d11d      	bne.n	800545e <I2C_Master_ADDR+0x98>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800542a:	d118      	bne.n	800545e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800542c:	2300      	movs	r3, #0
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005440:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005450:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	651a      	str	r2, [r3, #80]	; 0x50
 800545c:	e13e      	b.n	80056dc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d113      	bne.n	8005490 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005468:	2300      	movs	r3, #0
 800546a:	62bb      	str	r3, [r7, #40]	; 0x28
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	62bb      	str	r3, [r7, #40]	; 0x28
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	e115      	b.n	80056bc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b01      	cmp	r3, #1
 8005498:	f040 808a 	bne.w	80055b0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800549c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054a2:	d137      	bne.n	8005514 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054b2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c2:	d113      	bne.n	80054ec <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d4:	2300      	movs	r3, #0
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	e0e7      	b.n	80056bc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ec:	2300      	movs	r3, #0
 80054ee:	623b      	str	r3, [r7, #32]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	623b      	str	r3, [r7, #32]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	623b      	str	r3, [r7, #32]
 8005500:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	e0d3      	b.n	80056bc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	2b08      	cmp	r3, #8
 8005518:	d02e      	beq.n	8005578 <I2C_Master_ADDR+0x1b2>
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	2b20      	cmp	r3, #32
 800551e:	d02b      	beq.n	8005578 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005522:	2b12      	cmp	r3, #18
 8005524:	d102      	bne.n	800552c <I2C_Master_ADDR+0x166>
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	2b01      	cmp	r3, #1
 800552a:	d125      	bne.n	8005578 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800552c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552e:	2b04      	cmp	r3, #4
 8005530:	d00e      	beq.n	8005550 <I2C_Master_ADDR+0x18a>
 8005532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005534:	2b02      	cmp	r3, #2
 8005536:	d00b      	beq.n	8005550 <I2C_Master_ADDR+0x18a>
 8005538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553a:	2b10      	cmp	r3, #16
 800553c:	d008      	beq.n	8005550 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e007      	b.n	8005560 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800555e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005560:	2300      	movs	r3, #0
 8005562:	61fb      	str	r3, [r7, #28]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	61fb      	str	r3, [r7, #28]
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	e0a1      	b.n	80056bc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005586:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005588:	2300      	movs	r3, #0
 800558a:	61bb      	str	r3, [r7, #24]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	61bb      	str	r3, [r7, #24]
 800559c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e085      	b.n	80056bc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d14d      	bne.n	8005656 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80055ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d016      	beq.n	80055ee <I2C_Master_ADDR+0x228>
 80055c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d013      	beq.n	80055ee <I2C_Master_ADDR+0x228>
 80055c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c8:	2b10      	cmp	r3, #16
 80055ca:	d010      	beq.n	80055ee <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055da:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	e007      	b.n	80055fe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055fc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800560c:	d117      	bne.n	800563e <I2C_Master_ADDR+0x278>
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005614:	d00b      	beq.n	800562e <I2C_Master_ADDR+0x268>
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	2b01      	cmp	r3, #1
 800561a:	d008      	beq.n	800562e <I2C_Master_ADDR+0x268>
 800561c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561e:	2b08      	cmp	r3, #8
 8005620:	d005      	beq.n	800562e <I2C_Master_ADDR+0x268>
 8005622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005624:	2b10      	cmp	r3, #16
 8005626:	d002      	beq.n	800562e <I2C_Master_ADDR+0x268>
 8005628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562a:	2b20      	cmp	r3, #32
 800562c:	d107      	bne.n	800563e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800563c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	e032      	b.n	80056bc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005664:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005674:	d117      	bne.n	80056a6 <I2C_Master_ADDR+0x2e0>
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800567c:	d00b      	beq.n	8005696 <I2C_Master_ADDR+0x2d0>
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	2b01      	cmp	r3, #1
 8005682:	d008      	beq.n	8005696 <I2C_Master_ADDR+0x2d0>
 8005684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005686:	2b08      	cmp	r3, #8
 8005688:	d005      	beq.n	8005696 <I2C_Master_ADDR+0x2d0>
 800568a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568c:	2b10      	cmp	r3, #16
 800568e:	d002      	beq.n	8005696 <I2C_Master_ADDR+0x2d0>
 8005690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005692:	2b20      	cmp	r3, #32
 8005694:	d107      	bne.n	80056a6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a6:	2300      	movs	r3, #0
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80056c2:	e00b      	b.n	80056dc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
}
 80056da:	e7ff      	b.n	80056dc <I2C_Master_ADDR+0x316>
 80056dc:	bf00      	nop
 80056de:	3744      	adds	r7, #68	; 0x44
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d02c      	beq.n	800575c <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	781a      	ldrb	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d115      	bne.n	800575c <I2C_SlaveTransmit_TXE+0x74>
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	2b29      	cmp	r3, #41	; 0x29
 8005734:	d112      	bne.n	800575c <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005744:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2221      	movs	r2, #33	; 0x21
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2228      	movs	r2, #40	; 0x28
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d011      	beq.n	800579a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	781a      	ldrb	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d02d      	beq.n	800581c <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d115      	bne.n	800581c <I2C_SlaveReceive_RXNE+0x76>
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2b2a      	cmp	r3, #42	; 0x2a
 80057f4:	d112      	bne.n	800581c <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005804:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2222      	movs	r2, #34	; 0x22
 800580a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2228      	movs	r2, #40	; 0x28
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800581c:	bf00      	nop
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d012      	beq.n	800585c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	1c5a      	adds	r2, r3, #1
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005872:	2300      	movs	r3, #0
 8005874:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587c:	b2db      	uxtb	r3, r3
 800587e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005882:	2b28      	cmp	r3, #40	; 0x28
 8005884:	d127      	bne.n	80058d6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005894:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	089b      	lsrs	r3, r3, #2
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80058a2:	2301      	movs	r3, #1
 80058a4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	09db      	lsrs	r3, r3, #7
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d103      	bne.n	80058ba <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	81bb      	strh	r3, [r7, #12]
 80058b8:	e002      	b.n	80058c0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058cc:	89ba      	ldrh	r2, [r7, #12]
 80058ce:	7bf9      	ldrb	r1, [r7, #15]
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80058d4:	e00e      	b.n	80058f4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058d6:	2300      	movs	r3, #0
 80058d8:	60bb      	str	r3, [r7, #8]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	60bb      	str	r3, [r7, #8]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	60bb      	str	r3, [r7, #8]
 80058ea:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800591a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800591c:	2300      	movs	r3, #0
 800591e:	60bb      	str	r3, [r7, #8]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	60bb      	str	r3, [r7, #8]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005948:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005958:	d172      	bne.n	8005a40 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	2b22      	cmp	r3, #34	; 0x22
 800595e:	d002      	beq.n	8005966 <I2C_Slave_STOPF+0x6a>
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	2b2a      	cmp	r3, #42	; 0x2a
 8005964:	d135      	bne.n	80059d2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	b29a      	uxth	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f043 0204 	orr.w	r2, r3, #4
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005998:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fe f9b6 	bl	8003d10 <HAL_DMA_GetState>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d049      	beq.n	8005a3e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ae:	4a6b      	ldr	r2, [pc, #428]	; (8005b5c <I2C_Slave_STOPF+0x260>)
 80059b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe f988 	bl	8003ccc <HAL_DMA_Abort_IT>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d03d      	beq.n	8005a3e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059cc:	4610      	mov	r0, r2
 80059ce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059d0:	e035      	b.n	8005a3e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	b29a      	uxth	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	f043 0204 	orr.w	r2, r3, #4
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe f980 	bl	8003d10 <HAL_DMA_GetState>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d014      	beq.n	8005a40 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1a:	4a50      	ldr	r2, [pc, #320]	; (8005b5c <I2C_Slave_STOPF+0x260>)
 8005a1c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fe f952 	bl	8003ccc <HAL_DMA_Abort_IT>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d008      	beq.n	8005a40 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a38:	4610      	mov	r0, r2
 8005a3a:	4798      	blx	r3
 8005a3c:	e000      	b.n	8005a40 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a3e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d03e      	beq.n	8005ac8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d112      	bne.n	8005a7e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a88:	2b40      	cmp	r3, #64	; 0x40
 8005a8a:	d112      	bne.n	8005ab2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691a      	ldr	r2, [r3, #16]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d005      	beq.n	8005ac8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac0:	f043 0204 	orr.w	r2, r3, #4
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f8b9 	bl	8005c48 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005ad6:	e03c      	b.n	8005b52 <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	2b2a      	cmp	r3, #42	; 0x2a
 8005adc:	d10a      	bne.n	8005af4 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2228      	movs	r2, #40	; 0x28
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b28      	cmp	r3, #40	; 0x28
 8005afe:	d112      	bne.n	8005b26 <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a17      	ldr	r2, [pc, #92]	; (8005b60 <I2C_Slave_STOPF+0x264>)
 8005b04:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	4798      	blx	r3
}
 8005b24:	e015      	b.n	8005b52 <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	2b22      	cmp	r3, #34	; 0x22
 8005b2c:	d002      	beq.n	8005b34 <I2C_Slave_STOPF+0x238>
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
 8005b30:	2b22      	cmp	r3, #34	; 0x22
 8005b32:	d10e      	bne.n	8005b52 <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	4798      	blx	r3
}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	08005eb5 	.word	0x08005eb5
 8005b60:	ffff0000 	.word	0xffff0000

08005b64 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b72:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d002      	beq.n	8005b86 <I2C_Slave_AF+0x22>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	d12a      	bne.n	8005bdc <I2C_Slave_AF+0x78>
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
 8005b88:	2b28      	cmp	r3, #40	; 0x28
 8005b8a:	d127      	bne.n	8005bdc <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a2d      	ldr	r2, [pc, #180]	; (8005c44 <I2C_Slave_AF+0xe0>)
 8005b90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ba0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005baa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bba:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005bda:	e02f      	b.n	8005c3c <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	2b21      	cmp	r3, #33	; 0x21
 8005be0:	d127      	bne.n	8005c32 <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a17      	ldr	r2, [pc, #92]	; (8005c44 <I2C_Slave_AF+0xe0>)
 8005be6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2221      	movs	r2, #33	; 0x21
 8005bec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c0c:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c16:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c26:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	4798      	blx	r3
}
 8005c30:	e004      	b.n	8005c3c <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c3a:	615a      	str	r2, [r3, #20]
}
 8005c3c:	bf00      	nop
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	ffff0000 	.word	0xffff0000

08005c48 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c60:	7bbb      	ldrb	r3, [r7, #14]
 8005c62:	2b10      	cmp	r3, #16
 8005c64:	d002      	beq.n	8005c6c <I2C_ITError+0x24>
 8005c66:	7bbb      	ldrb	r3, [r7, #14]
 8005c68:	2b40      	cmp	r3, #64	; 0x40
 8005c6a:	d10a      	bne.n	8005c82 <I2C_ITError+0x3a>
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	2b22      	cmp	r3, #34	; 0x22
 8005c70:	d107      	bne.n	8005c82 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c80:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c88:	2b28      	cmp	r3, #40	; 0x28
 8005c8a:	d107      	bne.n	8005c9c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2228      	movs	r2, #40	; 0x28
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c9a:	e015      	b.n	8005cc8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005caa:	d00a      	beq.n	8005cc2 <I2C_ITError+0x7a>
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	2b60      	cmp	r3, #96	; 0x60
 8005cb0:	d007      	beq.n	8005cc2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd6:	d162      	bne.n	8005d9e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ce6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d020      	beq.n	8005d38 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfa:	4a6c      	ldr	r2, [pc, #432]	; (8005eac <I2C_ITError+0x264>)
 8005cfc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fd ffe2 	bl	8003ccc <HAL_DMA_Abort_IT>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 808b 	beq.w	8005e26 <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0201 	bic.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d32:	4610      	mov	r0, r2
 8005d34:	4798      	blx	r3
 8005d36:	e076      	b.n	8005e26 <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	4a5b      	ldr	r2, [pc, #364]	; (8005eac <I2C_ITError+0x264>)
 8005d3e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fd ffc1 	bl	8003ccc <HAL_DMA_Abort_IT>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d06a      	beq.n	8005e26 <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5a:	2b40      	cmp	r3, #64	; 0x40
 8005d5c:	d10b      	bne.n	8005d76 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0201 	bic.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d98:	4610      	mov	r0, r2
 8005d9a:	4798      	blx	r3
 8005d9c:	e043      	b.n	8005e26 <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b60      	cmp	r3, #96	; 0x60
 8005da8:	d126      	bne.n	8005df8 <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc2:	2b40      	cmp	r3, #64	; 0x40
 8005dc4:	d10b      	bne.n	8005dde <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	691a      	ldr	r2, [r3, #16]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0201 	bic.w	r2, r2, #1
 8005dec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	4798      	blx	r3
 8005df6:	e016      	b.n	8005e26 <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e02:	2b40      	cmp	r3, #64	; 0x40
 8005e04:	d10b      	bne.n	8005e1e <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10e      	bne.n	8005e54 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d109      	bne.n	8005e54 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d104      	bne.n	8005e54 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d007      	beq.n	8005e64 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e62:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d114      	bne.n	8005ea2 <I2C_ITError+0x25a>
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	2b28      	cmp	r3, #40	; 0x28
 8005e7c:	d111      	bne.n	8005ea2 <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a0b      	ldr	r2, [pc, #44]	; (8005eb0 <I2C_ITError+0x268>)
 8005e82:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ea2:	bf00      	nop
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	08005eb5 	.word	0x08005eb5
 8005eb0:	ffff0000 	.word	0xffff0000

08005eb4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ecc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ece:	4b4c      	ldr	r3, [pc, #304]	; (8006000 <I2C_DMAAbort+0x14c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	08db      	lsrs	r3, r3, #3
 8005ed4:	4a4b      	ldr	r2, [pc, #300]	; (8006004 <I2C_DMAAbort+0x150>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	0a1a      	lsrs	r2, r3, #8
 8005edc:	4613      	mov	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	00da      	lsls	r2, r3, #3
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	f043 0220 	orr.w	r2, r3, #32
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005efa:	e00a      	b.n	8005f12 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f10:	d0ea      	beq.n	8005ee8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1e:	2200      	movs	r2, #0
 8005f20:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	2200      	movs	r2, #0
 8005f30:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f40:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2200      	movs	r2, #0
 8005f46:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f54:	2200      	movs	r2, #0
 8005f56:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f64:	2200      	movs	r2, #0
 8005f66:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0201 	bic.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b60      	cmp	r3, #96	; 0x60
 8005f82:	d10f      	bne.n	8005fa4 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2200      	movs	r2, #0
 8005f98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f9e:	6978      	ldr	r0, [r7, #20]
 8005fa0:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fa2:	e028      	b.n	8005ff6 <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fa4:	7cfb      	ldrb	r3, [r7, #19]
 8005fa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005faa:	2b28      	cmp	r3, #40	; 0x28
 8005fac:	d117      	bne.n	8005fde <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 0201 	orr.w	r2, r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fcc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2228      	movs	r2, #40	; 0x28
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005fdc:	e007      	b.n	8005fee <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff2:	6978      	ldr	r0, [r7, #20]
 8005ff4:	4798      	blx	r3
}
 8005ff6:	bf00      	nop
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000000 	.word	0x20000000
 8006004:	14f8b589 	.word	0x14f8b589

08006008 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006014:	4b13      	ldr	r3, [pc, #76]	; (8006064 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	08db      	lsrs	r3, r3, #3
 800601a:	4a13      	ldr	r2, [pc, #76]	; (8006068 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800601c:	fba2 2303 	umull	r2, r3, r2, r3
 8006020:	0a1a      	lsrs	r2, r3, #8
 8006022:	4613      	mov	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3b01      	subs	r3, #1
 800602e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d107      	bne.n	8006046 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	f043 0220 	orr.w	r2, r3, #32
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e008      	b.n	8006058 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006054:	d0e9      	beq.n	800602a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	20000000 	.word	0x20000000
 8006068:	14f8b589 	.word	0x14f8b589

0800606c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800607c:	d103      	bne.n	8006086 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006084:	e007      	b.n	8006096 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800608e:	d102      	bne.n	8006096 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2208      	movs	r2, #8
 8006094:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
	...

080060a4 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80060a8:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <HAL_PWR_PVD_IRQHandler+0x20>)
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d005      	beq.n	80060c0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80060b4:	f000 f808 	bl	80060c8 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80060b8:	4b02      	ldr	r3, [pc, #8]	; (80060c4 <HAL_PWR_PVD_IRQHandler+0x20>)
 80060ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80060be:	615a      	str	r2, [r3, #20]
  }
}
 80060c0:	bf00      	nop
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	40013c00 	.word	0x40013c00

080060c8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80060cc:	bf00      	nop
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e267      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d075      	beq.n	80061e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060f6:	4b88      	ldr	r3, [pc, #544]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 030c 	and.w	r3, r3, #12
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d00c      	beq.n	800611c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006102:	4b85      	ldr	r3, [pc, #532]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800610a:	2b08      	cmp	r3, #8
 800610c:	d112      	bne.n	8006134 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800610e:	4b82      	ldr	r3, [pc, #520]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800611a:	d10b      	bne.n	8006134 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800611c:	4b7e      	ldr	r3, [pc, #504]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d05b      	beq.n	80061e0 <HAL_RCC_OscConfig+0x108>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d157      	bne.n	80061e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e242      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800613c:	d106      	bne.n	800614c <HAL_RCC_OscConfig+0x74>
 800613e:	4b76      	ldr	r3, [pc, #472]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a75      	ldr	r2, [pc, #468]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 8006144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	e01d      	b.n	8006188 <HAL_RCC_OscConfig+0xb0>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006154:	d10c      	bne.n	8006170 <HAL_RCC_OscConfig+0x98>
 8006156:	4b70      	ldr	r3, [pc, #448]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a6f      	ldr	r2, [pc, #444]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 800615c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006160:	6013      	str	r3, [r2, #0]
 8006162:	4b6d      	ldr	r3, [pc, #436]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a6c      	ldr	r2, [pc, #432]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 8006168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	e00b      	b.n	8006188 <HAL_RCC_OscConfig+0xb0>
 8006170:	4b69      	ldr	r3, [pc, #420]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a68      	ldr	r2, [pc, #416]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 8006176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	4b66      	ldr	r3, [pc, #408]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a65      	ldr	r2, [pc, #404]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 8006182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d013      	beq.n	80061b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006190:	f7fd f858 	bl	8003244 <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006198:	f7fd f854 	bl	8003244 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b64      	cmp	r3, #100	; 0x64
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e207      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061aa:	4b5b      	ldr	r3, [pc, #364]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0f0      	beq.n	8006198 <HAL_RCC_OscConfig+0xc0>
 80061b6:	e014      	b.n	80061e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b8:	f7fd f844 	bl	8003244 <HAL_GetTick>
 80061bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061c0:	f7fd f840 	bl	8003244 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b64      	cmp	r3, #100	; 0x64
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e1f3      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061d2:	4b51      	ldr	r3, [pc, #324]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1f0      	bne.n	80061c0 <HAL_RCC_OscConfig+0xe8>
 80061de:	e000      	b.n	80061e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d063      	beq.n	80062b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061ee:	4b4a      	ldr	r3, [pc, #296]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 030c 	and.w	r3, r3, #12
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00b      	beq.n	8006212 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061fa:	4b47      	ldr	r3, [pc, #284]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006202:	2b08      	cmp	r3, #8
 8006204:	d11c      	bne.n	8006240 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006206:	4b44      	ldr	r3, [pc, #272]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d116      	bne.n	8006240 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006212:	4b41      	ldr	r3, [pc, #260]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d005      	beq.n	800622a <HAL_RCC_OscConfig+0x152>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d001      	beq.n	800622a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e1c7      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800622a:	4b3b      	ldr	r3, [pc, #236]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	4937      	ldr	r1, [pc, #220]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 800623a:	4313      	orrs	r3, r2
 800623c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800623e:	e03a      	b.n	80062b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d020      	beq.n	800628a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006248:	4b34      	ldr	r3, [pc, #208]	; (800631c <HAL_RCC_OscConfig+0x244>)
 800624a:	2201      	movs	r2, #1
 800624c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800624e:	f7fc fff9 	bl	8003244 <HAL_GetTick>
 8006252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006254:	e008      	b.n	8006268 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006256:	f7fc fff5 	bl	8003244 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e1a8      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006268:	4b2b      	ldr	r3, [pc, #172]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0f0      	beq.n	8006256 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006274:	4b28      	ldr	r3, [pc, #160]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	4925      	ldr	r1, [pc, #148]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 8006284:	4313      	orrs	r3, r2
 8006286:	600b      	str	r3, [r1, #0]
 8006288:	e015      	b.n	80062b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800628a:	4b24      	ldr	r3, [pc, #144]	; (800631c <HAL_RCC_OscConfig+0x244>)
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006290:	f7fc ffd8 	bl	8003244 <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006298:	f7fc ffd4 	bl	8003244 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e187      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062aa:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1f0      	bne.n	8006298 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d036      	beq.n	8006330 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d016      	beq.n	80062f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ca:	4b15      	ldr	r3, [pc, #84]	; (8006320 <HAL_RCC_OscConfig+0x248>)
 80062cc:	2201      	movs	r2, #1
 80062ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d0:	f7fc ffb8 	bl	8003244 <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062d8:	f7fc ffb4 	bl	8003244 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e167      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ea:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <HAL_RCC_OscConfig+0x240>)
 80062ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0f0      	beq.n	80062d8 <HAL_RCC_OscConfig+0x200>
 80062f6:	e01b      	b.n	8006330 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062f8:	4b09      	ldr	r3, [pc, #36]	; (8006320 <HAL_RCC_OscConfig+0x248>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062fe:	f7fc ffa1 	bl	8003244 <HAL_GetTick>
 8006302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006304:	e00e      	b.n	8006324 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006306:	f7fc ff9d 	bl	8003244 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d907      	bls.n	8006324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e150      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
 8006318:	40023800 	.word	0x40023800
 800631c:	42470000 	.word	0x42470000
 8006320:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006324:	4b88      	ldr	r3, [pc, #544]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 8006326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1ea      	bne.n	8006306 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0304 	and.w	r3, r3, #4
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 8097 	beq.w	800646c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800633e:	2300      	movs	r3, #0
 8006340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006342:	4b81      	ldr	r3, [pc, #516]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10f      	bne.n	800636e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800634e:	2300      	movs	r3, #0
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	4b7d      	ldr	r3, [pc, #500]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	4a7c      	ldr	r2, [pc, #496]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 8006358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800635c:	6413      	str	r3, [r2, #64]	; 0x40
 800635e:	4b7a      	ldr	r3, [pc, #488]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006366:	60bb      	str	r3, [r7, #8]
 8006368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800636a:	2301      	movs	r3, #1
 800636c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800636e:	4b77      	ldr	r3, [pc, #476]	; (800654c <HAL_RCC_OscConfig+0x474>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006376:	2b00      	cmp	r3, #0
 8006378:	d118      	bne.n	80063ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800637a:	4b74      	ldr	r3, [pc, #464]	; (800654c <HAL_RCC_OscConfig+0x474>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a73      	ldr	r2, [pc, #460]	; (800654c <HAL_RCC_OscConfig+0x474>)
 8006380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006386:	f7fc ff5d 	bl	8003244 <HAL_GetTick>
 800638a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800638c:	e008      	b.n	80063a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800638e:	f7fc ff59 	bl	8003244 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d901      	bls.n	80063a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e10c      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063a0:	4b6a      	ldr	r3, [pc, #424]	; (800654c <HAL_RCC_OscConfig+0x474>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0f0      	beq.n	800638e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d106      	bne.n	80063c2 <HAL_RCC_OscConfig+0x2ea>
 80063b4:	4b64      	ldr	r3, [pc, #400]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 80063b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b8:	4a63      	ldr	r2, [pc, #396]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	6713      	str	r3, [r2, #112]	; 0x70
 80063c0:	e01c      	b.n	80063fc <HAL_RCC_OscConfig+0x324>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	2b05      	cmp	r3, #5
 80063c8:	d10c      	bne.n	80063e4 <HAL_RCC_OscConfig+0x30c>
 80063ca:	4b5f      	ldr	r3, [pc, #380]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 80063cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ce:	4a5e      	ldr	r2, [pc, #376]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 80063d0:	f043 0304 	orr.w	r3, r3, #4
 80063d4:	6713      	str	r3, [r2, #112]	; 0x70
 80063d6:	4b5c      	ldr	r3, [pc, #368]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 80063d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063da:	4a5b      	ldr	r2, [pc, #364]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 80063dc:	f043 0301 	orr.w	r3, r3, #1
 80063e0:	6713      	str	r3, [r2, #112]	; 0x70
 80063e2:	e00b      	b.n	80063fc <HAL_RCC_OscConfig+0x324>
 80063e4:	4b58      	ldr	r3, [pc, #352]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 80063e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e8:	4a57      	ldr	r2, [pc, #348]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 80063ea:	f023 0301 	bic.w	r3, r3, #1
 80063ee:	6713      	str	r3, [r2, #112]	; 0x70
 80063f0:	4b55      	ldr	r3, [pc, #340]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 80063f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f4:	4a54      	ldr	r2, [pc, #336]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 80063f6:	f023 0304 	bic.w	r3, r3, #4
 80063fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d015      	beq.n	8006430 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006404:	f7fc ff1e 	bl	8003244 <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800640a:	e00a      	b.n	8006422 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800640c:	f7fc ff1a 	bl	8003244 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	f241 3288 	movw	r2, #5000	; 0x1388
 800641a:	4293      	cmp	r3, r2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e0cb      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006422:	4b49      	ldr	r3, [pc, #292]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 8006424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d0ee      	beq.n	800640c <HAL_RCC_OscConfig+0x334>
 800642e:	e014      	b.n	800645a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006430:	f7fc ff08 	bl	8003244 <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006436:	e00a      	b.n	800644e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006438:	f7fc ff04 	bl	8003244 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	f241 3288 	movw	r2, #5000	; 0x1388
 8006446:	4293      	cmp	r3, r2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e0b5      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800644e:	4b3e      	ldr	r3, [pc, #248]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 8006450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1ee      	bne.n	8006438 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800645a:	7dfb      	ldrb	r3, [r7, #23]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d105      	bne.n	800646c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006460:	4b39      	ldr	r3, [pc, #228]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 8006462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006464:	4a38      	ldr	r2, [pc, #224]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 8006466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800646a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 80a1 	beq.w	80065b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006476:	4b34      	ldr	r3, [pc, #208]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 030c 	and.w	r3, r3, #12
 800647e:	2b08      	cmp	r3, #8
 8006480:	d05c      	beq.n	800653c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	2b02      	cmp	r3, #2
 8006488:	d141      	bne.n	800650e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800648a:	4b31      	ldr	r3, [pc, #196]	; (8006550 <HAL_RCC_OscConfig+0x478>)
 800648c:	2200      	movs	r2, #0
 800648e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006490:	f7fc fed8 	bl	8003244 <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006498:	f7fc fed4 	bl	8003244 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e087      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064aa:	4b27      	ldr	r3, [pc, #156]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f0      	bne.n	8006498 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69da      	ldr	r2, [r3, #28]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	019b      	lsls	r3, r3, #6
 80064c6:	431a      	orrs	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064cc:	085b      	lsrs	r3, r3, #1
 80064ce:	3b01      	subs	r3, #1
 80064d0:	041b      	lsls	r3, r3, #16
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	061b      	lsls	r3, r3, #24
 80064da:	491b      	ldr	r1, [pc, #108]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064e0:	4b1b      	ldr	r3, [pc, #108]	; (8006550 <HAL_RCC_OscConfig+0x478>)
 80064e2:	2201      	movs	r2, #1
 80064e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e6:	f7fc fead 	bl	8003244 <HAL_GetTick>
 80064ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ec:	e008      	b.n	8006500 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064ee:	f7fc fea9 	bl	8003244 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d901      	bls.n	8006500 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e05c      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006500:	4b11      	ldr	r3, [pc, #68]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0f0      	beq.n	80064ee <HAL_RCC_OscConfig+0x416>
 800650c:	e054      	b.n	80065b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800650e:	4b10      	ldr	r3, [pc, #64]	; (8006550 <HAL_RCC_OscConfig+0x478>)
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006514:	f7fc fe96 	bl	8003244 <HAL_GetTick>
 8006518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800651c:	f7fc fe92 	bl	8003244 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e045      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800652e:	4b06      	ldr	r3, [pc, #24]	; (8006548 <HAL_RCC_OscConfig+0x470>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1f0      	bne.n	800651c <HAL_RCC_OscConfig+0x444>
 800653a:	e03d      	b.n	80065b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d107      	bne.n	8006554 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e038      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
 8006548:	40023800 	.word	0x40023800
 800654c:	40007000 	.word	0x40007000
 8006550:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006554:	4b1b      	ldr	r3, [pc, #108]	; (80065c4 <HAL_RCC_OscConfig+0x4ec>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d028      	beq.n	80065b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800656c:	429a      	cmp	r2, r3
 800656e:	d121      	bne.n	80065b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800657a:	429a      	cmp	r2, r3
 800657c:	d11a      	bne.n	80065b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006584:	4013      	ands	r3, r2
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800658a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800658c:	4293      	cmp	r3, r2
 800658e:	d111      	bne.n	80065b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659a:	085b      	lsrs	r3, r3, #1
 800659c:	3b01      	subs	r3, #1
 800659e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d107      	bne.n	80065b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d001      	beq.n	80065b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e000      	b.n	80065ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	40023800 	.word	0x40023800

080065c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e0cc      	b.n	8006776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065dc:	4b68      	ldr	r3, [pc, #416]	; (8006780 <HAL_RCC_ClockConfig+0x1b8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0307 	and.w	r3, r3, #7
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d90c      	bls.n	8006604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ea:	4b65      	ldr	r3, [pc, #404]	; (8006780 <HAL_RCC_ClockConfig+0x1b8>)
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065f2:	4b63      	ldr	r3, [pc, #396]	; (8006780 <HAL_RCC_ClockConfig+0x1b8>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d001      	beq.n	8006604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e0b8      	b.n	8006776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d020      	beq.n	8006652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b00      	cmp	r3, #0
 800661a:	d005      	beq.n	8006628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800661c:	4b59      	ldr	r3, [pc, #356]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	4a58      	ldr	r2, [pc, #352]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 8006622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006626:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0308 	and.w	r3, r3, #8
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006634:	4b53      	ldr	r3, [pc, #332]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	4a52      	ldr	r2, [pc, #328]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 800663a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800663e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006640:	4b50      	ldr	r3, [pc, #320]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	494d      	ldr	r1, [pc, #308]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 800664e:	4313      	orrs	r3, r2
 8006650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d044      	beq.n	80066e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d107      	bne.n	8006676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006666:	4b47      	ldr	r3, [pc, #284]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d119      	bne.n	80066a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e07f      	b.n	8006776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	2b02      	cmp	r3, #2
 800667c:	d003      	beq.n	8006686 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006682:	2b03      	cmp	r3, #3
 8006684:	d107      	bne.n	8006696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006686:	4b3f      	ldr	r3, [pc, #252]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d109      	bne.n	80066a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e06f      	b.n	8006776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006696:	4b3b      	ldr	r3, [pc, #236]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e067      	b.n	8006776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066a6:	4b37      	ldr	r3, [pc, #220]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f023 0203 	bic.w	r2, r3, #3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	4934      	ldr	r1, [pc, #208]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066b8:	f7fc fdc4 	bl	8003244 <HAL_GetTick>
 80066bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066be:	e00a      	b.n	80066d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066c0:	f7fc fdc0 	bl	8003244 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e04f      	b.n	8006776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066d6:	4b2b      	ldr	r3, [pc, #172]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 020c 	and.w	r2, r3, #12
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d1eb      	bne.n	80066c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066e8:	4b25      	ldr	r3, [pc, #148]	; (8006780 <HAL_RCC_ClockConfig+0x1b8>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d20c      	bcs.n	8006710 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066f6:	4b22      	ldr	r3, [pc, #136]	; (8006780 <HAL_RCC_ClockConfig+0x1b8>)
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066fe:	4b20      	ldr	r3, [pc, #128]	; (8006780 <HAL_RCC_ClockConfig+0x1b8>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	d001      	beq.n	8006710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e032      	b.n	8006776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d008      	beq.n	800672e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800671c:	4b19      	ldr	r3, [pc, #100]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	4916      	ldr	r1, [pc, #88]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	4313      	orrs	r3, r2
 800672c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0308 	and.w	r3, r3, #8
 8006736:	2b00      	cmp	r3, #0
 8006738:	d009      	beq.n	800674e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800673a:	4b12      	ldr	r3, [pc, #72]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	00db      	lsls	r3, r3, #3
 8006748:	490e      	ldr	r1, [pc, #56]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 800674a:	4313      	orrs	r3, r2
 800674c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800674e:	f000 f821 	bl	8006794 <HAL_RCC_GetSysClockFreq>
 8006752:	4602      	mov	r2, r0
 8006754:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	091b      	lsrs	r3, r3, #4
 800675a:	f003 030f 	and.w	r3, r3, #15
 800675e:	490a      	ldr	r1, [pc, #40]	; (8006788 <HAL_RCC_ClockConfig+0x1c0>)
 8006760:	5ccb      	ldrb	r3, [r1, r3]
 8006762:	fa22 f303 	lsr.w	r3, r2, r3
 8006766:	4a09      	ldr	r2, [pc, #36]	; (800678c <HAL_RCC_ClockConfig+0x1c4>)
 8006768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800676a:	4b09      	ldr	r3, [pc, #36]	; (8006790 <HAL_RCC_ClockConfig+0x1c8>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4618      	mov	r0, r3
 8006770:	f7fc f984 	bl	8002a7c <HAL_InitTick>

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	40023c00 	.word	0x40023c00
 8006784:	40023800 	.word	0x40023800
 8006788:	0800cf18 	.word	0x0800cf18
 800678c:	20000000 	.word	0x20000000
 8006790:	20000004 	.word	0x20000004

08006794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006798:	b094      	sub	sp, #80	; 0x50
 800679a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	647b      	str	r3, [r7, #68]	; 0x44
 80067a0:	2300      	movs	r3, #0
 80067a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067a4:	2300      	movs	r3, #0
 80067a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067ac:	4b79      	ldr	r3, [pc, #484]	; (8006994 <HAL_RCC_GetSysClockFreq+0x200>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f003 030c 	and.w	r3, r3, #12
 80067b4:	2b08      	cmp	r3, #8
 80067b6:	d00d      	beq.n	80067d4 <HAL_RCC_GetSysClockFreq+0x40>
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	f200 80e1 	bhi.w	8006980 <HAL_RCC_GetSysClockFreq+0x1ec>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <HAL_RCC_GetSysClockFreq+0x34>
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d003      	beq.n	80067ce <HAL_RCC_GetSysClockFreq+0x3a>
 80067c6:	e0db      	b.n	8006980 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067c8:	4b73      	ldr	r3, [pc, #460]	; (8006998 <HAL_RCC_GetSysClockFreq+0x204>)
 80067ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80067cc:	e0db      	b.n	8006986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067ce:	4b73      	ldr	r3, [pc, #460]	; (800699c <HAL_RCC_GetSysClockFreq+0x208>)
 80067d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067d2:	e0d8      	b.n	8006986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067d4:	4b6f      	ldr	r3, [pc, #444]	; (8006994 <HAL_RCC_GetSysClockFreq+0x200>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067de:	4b6d      	ldr	r3, [pc, #436]	; (8006994 <HAL_RCC_GetSysClockFreq+0x200>)
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d063      	beq.n	80068b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ea:	4b6a      	ldr	r3, [pc, #424]	; (8006994 <HAL_RCC_GetSysClockFreq+0x200>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	099b      	lsrs	r3, r3, #6
 80067f0:	2200      	movs	r2, #0
 80067f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80067f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80067f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fc:	633b      	str	r3, [r7, #48]	; 0x30
 80067fe:	2300      	movs	r3, #0
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
 8006802:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006806:	4622      	mov	r2, r4
 8006808:	462b      	mov	r3, r5
 800680a:	f04f 0000 	mov.w	r0, #0
 800680e:	f04f 0100 	mov.w	r1, #0
 8006812:	0159      	lsls	r1, r3, #5
 8006814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006818:	0150      	lsls	r0, r2, #5
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4621      	mov	r1, r4
 8006820:	1a51      	subs	r1, r2, r1
 8006822:	6139      	str	r1, [r7, #16]
 8006824:	4629      	mov	r1, r5
 8006826:	eb63 0301 	sbc.w	r3, r3, r1
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006838:	4659      	mov	r1, fp
 800683a:	018b      	lsls	r3, r1, #6
 800683c:	4651      	mov	r1, sl
 800683e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006842:	4651      	mov	r1, sl
 8006844:	018a      	lsls	r2, r1, #6
 8006846:	4651      	mov	r1, sl
 8006848:	ebb2 0801 	subs.w	r8, r2, r1
 800684c:	4659      	mov	r1, fp
 800684e:	eb63 0901 	sbc.w	r9, r3, r1
 8006852:	f04f 0200 	mov.w	r2, #0
 8006856:	f04f 0300 	mov.w	r3, #0
 800685a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800685e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006866:	4690      	mov	r8, r2
 8006868:	4699      	mov	r9, r3
 800686a:	4623      	mov	r3, r4
 800686c:	eb18 0303 	adds.w	r3, r8, r3
 8006870:	60bb      	str	r3, [r7, #8]
 8006872:	462b      	mov	r3, r5
 8006874:	eb49 0303 	adc.w	r3, r9, r3
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	f04f 0200 	mov.w	r2, #0
 800687e:	f04f 0300 	mov.w	r3, #0
 8006882:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006886:	4629      	mov	r1, r5
 8006888:	024b      	lsls	r3, r1, #9
 800688a:	4621      	mov	r1, r4
 800688c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006890:	4621      	mov	r1, r4
 8006892:	024a      	lsls	r2, r1, #9
 8006894:	4610      	mov	r0, r2
 8006896:	4619      	mov	r1, r3
 8006898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800689a:	2200      	movs	r2, #0
 800689c:	62bb      	str	r3, [r7, #40]	; 0x28
 800689e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068a4:	f7f9 fc9c 	bl	80001e0 <__aeabi_uldivmod>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4613      	mov	r3, r2
 80068ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068b0:	e058      	b.n	8006964 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068b2:	4b38      	ldr	r3, [pc, #224]	; (8006994 <HAL_RCC_GetSysClockFreq+0x200>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	099b      	lsrs	r3, r3, #6
 80068b8:	2200      	movs	r2, #0
 80068ba:	4618      	mov	r0, r3
 80068bc:	4611      	mov	r1, r2
 80068be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80068c2:	623b      	str	r3, [r7, #32]
 80068c4:	2300      	movs	r3, #0
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
 80068c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80068cc:	4642      	mov	r2, r8
 80068ce:	464b      	mov	r3, r9
 80068d0:	f04f 0000 	mov.w	r0, #0
 80068d4:	f04f 0100 	mov.w	r1, #0
 80068d8:	0159      	lsls	r1, r3, #5
 80068da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068de:	0150      	lsls	r0, r2, #5
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4641      	mov	r1, r8
 80068e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80068ea:	4649      	mov	r1, r9
 80068ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80068f0:	f04f 0200 	mov.w	r2, #0
 80068f4:	f04f 0300 	mov.w	r3, #0
 80068f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80068fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006900:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006904:	ebb2 040a 	subs.w	r4, r2, sl
 8006908:	eb63 050b 	sbc.w	r5, r3, fp
 800690c:	f04f 0200 	mov.w	r2, #0
 8006910:	f04f 0300 	mov.w	r3, #0
 8006914:	00eb      	lsls	r3, r5, #3
 8006916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800691a:	00e2      	lsls	r2, r4, #3
 800691c:	4614      	mov	r4, r2
 800691e:	461d      	mov	r5, r3
 8006920:	4643      	mov	r3, r8
 8006922:	18e3      	adds	r3, r4, r3
 8006924:	603b      	str	r3, [r7, #0]
 8006926:	464b      	mov	r3, r9
 8006928:	eb45 0303 	adc.w	r3, r5, r3
 800692c:	607b      	str	r3, [r7, #4]
 800692e:	f04f 0200 	mov.w	r2, #0
 8006932:	f04f 0300 	mov.w	r3, #0
 8006936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800693a:	4629      	mov	r1, r5
 800693c:	028b      	lsls	r3, r1, #10
 800693e:	4621      	mov	r1, r4
 8006940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006944:	4621      	mov	r1, r4
 8006946:	028a      	lsls	r2, r1, #10
 8006948:	4610      	mov	r0, r2
 800694a:	4619      	mov	r1, r3
 800694c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800694e:	2200      	movs	r2, #0
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	61fa      	str	r2, [r7, #28]
 8006954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006958:	f7f9 fc42 	bl	80001e0 <__aeabi_uldivmod>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4613      	mov	r3, r2
 8006962:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006964:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <HAL_RCC_GetSysClockFreq+0x200>)
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	0c1b      	lsrs	r3, r3, #16
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	3301      	adds	r3, #1
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006974:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006978:	fbb2 f3f3 	udiv	r3, r2, r3
 800697c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800697e:	e002      	b.n	8006986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006980:	4b05      	ldr	r3, [pc, #20]	; (8006998 <HAL_RCC_GetSysClockFreq+0x204>)
 8006982:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006988:	4618      	mov	r0, r3
 800698a:	3750      	adds	r7, #80	; 0x50
 800698c:	46bd      	mov	sp, r7
 800698e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006992:	bf00      	nop
 8006994:	40023800 	.word	0x40023800
 8006998:	00f42400 	.word	0x00f42400
 800699c:	007a1200 	.word	0x007a1200

080069a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069a4:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80069a6:	681b      	ldr	r3, [r3, #0]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000000 	.word	0x20000000

080069b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069bc:	f7ff fff0 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069c0:	4602      	mov	r2, r0
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	0a9b      	lsrs	r3, r3, #10
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	4903      	ldr	r1, [pc, #12]	; (80069dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069ce:	5ccb      	ldrb	r3, [r1, r3]
 80069d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40023800 	.word	0x40023800
 80069dc:	0800cf28 	.word	0x0800cf28

080069e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069e4:	f7ff ffdc 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069e8:	4602      	mov	r2, r0
 80069ea:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	0b5b      	lsrs	r3, r3, #13
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	4903      	ldr	r1, [pc, #12]	; (8006a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069f6:	5ccb      	ldrb	r3, [r1, r3]
 80069f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	40023800 	.word	0x40023800
 8006a04:	0800cf28 	.word	0x0800cf28

08006a08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	220f      	movs	r2, #15
 8006a16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a18:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <HAL_RCC_GetClockConfig+0x5c>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 0203 	and.w	r2, r3, #3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a24:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <HAL_RCC_GetClockConfig+0x5c>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a30:	4b0c      	ldr	r3, [pc, #48]	; (8006a64 <HAL_RCC_GetClockConfig+0x5c>)
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a3c:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <HAL_RCC_GetClockConfig+0x5c>)
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	08db      	lsrs	r3, r3, #3
 8006a42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a4a:	4b07      	ldr	r3, [pc, #28]	; (8006a68 <HAL_RCC_GetClockConfig+0x60>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0207 	and.w	r2, r3, #7
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	601a      	str	r2, [r3, #0]
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	40023800 	.word	0x40023800
 8006a68:	40023c00 	.word	0x40023c00

08006a6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d105      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d038      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a94:	4b68      	ldr	r3, [pc, #416]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a9a:	f7fc fbd3 	bl	8003244 <HAL_GetTick>
 8006a9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006aa2:	f7fc fbcf 	bl	8003244 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e0bd      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ab4:	4b61      	ldr	r3, [pc, #388]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1f0      	bne.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	019b      	lsls	r3, r3, #6
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	071b      	lsls	r3, r3, #28
 8006ad2:	495a      	ldr	r1, [pc, #360]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ada:	4b57      	ldr	r3, [pc, #348]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006adc:	2201      	movs	r2, #1
 8006ade:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ae0:	f7fc fbb0 	bl	8003244 <HAL_GetTick>
 8006ae4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ae6:	e008      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ae8:	f7fc fbac 	bl	8003244 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d901      	bls.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e09a      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006afa:	4b50      	ldr	r3, [pc, #320]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0f0      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 8083 	beq.w	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	4b48      	ldr	r3, [pc, #288]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1c:	4a47      	ldr	r2, [pc, #284]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b22:	6413      	str	r3, [r2, #64]	; 0x40
 8006b24:	4b45      	ldr	r3, [pc, #276]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b30:	4b43      	ldr	r3, [pc, #268]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a42      	ldr	r2, [pc, #264]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b3a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b3c:	f7fc fb82 	bl	8003244 <HAL_GetTick>
 8006b40:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b42:	e008      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b44:	f7fc fb7e 	bl	8003244 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e06c      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b56:	4b3a      	ldr	r3, [pc, #232]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0f0      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b62:	4b36      	ldr	r3, [pc, #216]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b6a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d02f      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d028      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b80:	4b2e      	ldr	r3, [pc, #184]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b88:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b8a:	4b2e      	ldr	r3, [pc, #184]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b90:	4b2c      	ldr	r3, [pc, #176]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006b96:	4a29      	ldr	r2, [pc, #164]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b9c:	4b27      	ldr	r3, [pc, #156]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d114      	bne.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006ba8:	f7fc fb4c 	bl	8003244 <HAL_GetTick>
 8006bac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bae:	e00a      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bb0:	f7fc fb48 	bl	8003244 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e034      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc6:	4b1d      	ldr	r3, [pc, #116]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0ee      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bde:	d10d      	bne.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006be0:	4b16      	ldr	r3, [pc, #88]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf4:	4911      	ldr	r1, [pc, #68]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	608b      	str	r3, [r1, #8]
 8006bfa:	e005      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006bfc:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	4a0e      	ldr	r2, [pc, #56]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c06:	6093      	str	r3, [r2, #8]
 8006c08:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c14:	4909      	ldr	r1, [pc, #36]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0308 	and.w	r3, r3, #8
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	7d1a      	ldrb	r2, [r3, #20]
 8006c2a:	4b07      	ldr	r3, [pc, #28]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006c2c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	42470068 	.word	0x42470068
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	40007000 	.word	0x40007000
 8006c44:	42470e40 	.word	0x42470e40
 8006c48:	424711e0 	.word	0x424711e0

08006c4c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e084      	b.n	8006d6c <HAL_RTC_Init+0x120>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	7f5b      	ldrb	r3, [r3, #29]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d123      	bne.n	8006cb4 <HAL_RTC_Init+0x68>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a3f      	ldr	r2, [pc, #252]	; (8006d74 <HAL_RTC_Init+0x128>)
 8006c76:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a3f      	ldr	r2, [pc, #252]	; (8006d78 <HAL_RTC_Init+0x12c>)
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a3e      	ldr	r2, [pc, #248]	; (8006d7c <HAL_RTC_Init+0x130>)
 8006c82:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a3e      	ldr	r2, [pc, #248]	; (8006d80 <HAL_RTC_Init+0x134>)
 8006c88:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a3d      	ldr	r2, [pc, #244]	; (8006d84 <HAL_RTC_Init+0x138>)
 8006c8e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER2_SUPPORT)
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
#endif /* RTC_TAMPER2_SUPPORT */

    if (hrtc->MspInitCallback == NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d102      	bne.n	8006c9e <HAL_RTC_Init+0x52>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a3b      	ldr	r2, [pc, #236]	; (8006d88 <HAL_RTC_Init+0x13c>)
 8006c9c:	635a      	str	r2, [r3, #52]	; 0x34
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	4798      	blx	r3

    if (hrtc->MspDeInitCallback == NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d102      	bne.n	8006cb4 <HAL_RTC_Init+0x68>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a36      	ldr	r2, [pc, #216]	; (8006d8c <HAL_RTC_Init+0x140>)
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	22ca      	movs	r2, #202	; 0xca
 8006cc0:	625a      	str	r2, [r3, #36]	; 0x24
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2253      	movs	r2, #83	; 0x53
 8006cc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fada 	bl	8007284 <RTC_EnterInitMode>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d12c      	bne.n	8006d34 <HAL_RTC_Init+0xe8>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	6812      	ldr	r2, [r2, #0]
 8006ce4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cec:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6899      	ldr	r1, [r3, #8]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	68d2      	ldr	r2, [r2, #12]
 8006d14:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6919      	ldr	r1, [r3, #16]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	041a      	lsls	r2, r3, #16
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fae1 	bl	80072f2 <RTC_ExitInitMode>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d113      	bne.n	8006d62 <HAL_RTC_Init+0x116>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d48:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	699a      	ldr	r2, [r3, #24]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	22ff      	movs	r2, #255	; 0xff
 8006d68:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	08007221 	.word	0x08007221
 8006d78:	080074ed 	.word	0x080074ed
 8006d7c:	08007377 	.word	0x08007377
 8006d80:	080074d9 	.word	0x080074d9
 8006d84:	0800738b 	.word	0x0800738b
 8006d88:	08002711 	.word	0x08002711
 8006d8c:	08002769 	.word	0x08002769

08006d90 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006d90:	b590      	push	{r4, r7, lr}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	7f1b      	ldrb	r3, [r3, #28]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d101      	bne.n	8006dac <HAL_RTC_SetTime+0x1c>
 8006da8:	2302      	movs	r3, #2
 8006daa:	e087      	b.n	8006ebc <HAL_RTC_SetTime+0x12c>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2201      	movs	r2, #1
 8006db0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2202      	movs	r2, #2
 8006db6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d126      	bne.n	8006e0c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d102      	bne.n	8006dd2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fab0 	bl	800733c <RTC_ByteToBcd2>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	785b      	ldrb	r3, [r3, #1]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 faa9 	bl	800733c <RTC_ByteToBcd2>
 8006dea:	4603      	mov	r3, r0
 8006dec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006dee:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	789b      	ldrb	r3, [r3, #2]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 faa1 	bl	800733c <RTC_ByteToBcd2>
 8006dfa:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006dfc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	78db      	ldrb	r3, [r3, #3]
 8006e04:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006e06:	4313      	orrs	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]
 8006e0a:	e018      	b.n	8006e3e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	785b      	ldrb	r3, [r3, #1]
 8006e2a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006e2c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006e32:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	78db      	ldrb	r3, [r3, #3]
 8006e38:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	22ca      	movs	r2, #202	; 0xca
 8006e44:	625a      	str	r2, [r3, #36]	; 0x24
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2253      	movs	r2, #83	; 0x53
 8006e4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 fa18 	bl	8007284 <RTC_EnterInitMode>
 8006e54:	4603      	mov	r3, r0
 8006e56:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006e58:	7cfb      	ldrb	r3, [r7, #19]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d120      	bne.n	8006ea0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006e68:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006e6c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e7c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6899      	ldr	r1, [r3, #8]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 fa2b 	bl	80072f2 <RTC_ExitInitMode>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006ea0:	7cfb      	ldrb	r3, [r7, #19]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d102      	bne.n	8006eac <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	22ff      	movs	r2, #255	; 0xff
 8006eb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	771a      	strb	r2, [r3, #28]

  return status;
 8006eba:	7cfb      	ldrb	r3, [r7, #19]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	371c      	adds	r7, #28
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd90      	pop	{r4, r7, pc}

08006ec4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006ec4:	b590      	push	{r4, r7, lr}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	7f1b      	ldrb	r3, [r3, #28]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d101      	bne.n	8006ee0 <HAL_RTC_SetDate+0x1c>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e071      	b.n	8006fc4 <HAL_RTC_SetDate+0x100>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2202      	movs	r2, #2
 8006eea:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10e      	bne.n	8006f10 <HAL_RTC_SetDate+0x4c>
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	785b      	ldrb	r3, [r3, #1]
 8006ef6:	f003 0310 	and.w	r3, r3, #16
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d008      	beq.n	8006f10 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	785b      	ldrb	r3, [r3, #1]
 8006f02:	f023 0310 	bic.w	r3, r3, #16
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	330a      	adds	r3, #10
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d11c      	bne.n	8006f50 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	78db      	ldrb	r3, [r3, #3]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fa0e 	bl	800733c <RTC_ByteToBcd2>
 8006f20:	4603      	mov	r3, r0
 8006f22:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	785b      	ldrb	r3, [r3, #1]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fa07 	bl	800733c <RTC_ByteToBcd2>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006f32:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	789b      	ldrb	r3, [r3, #2]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 f9ff 	bl	800733c <RTC_ByteToBcd2>
 8006f3e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006f40:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	617b      	str	r3, [r7, #20]
 8006f4e:	e00e      	b.n	8006f6e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	78db      	ldrb	r3, [r3, #3]
 8006f54:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	785b      	ldrb	r3, [r3, #1]
 8006f5a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006f5c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006f62:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	22ca      	movs	r2, #202	; 0xca
 8006f74:	625a      	str	r2, [r3, #36]	; 0x24
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2253      	movs	r2, #83	; 0x53
 8006f7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f000 f980 	bl	8007284 <RTC_EnterInitMode>
 8006f84:	4603      	mov	r3, r0
 8006f86:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006f88:	7cfb      	ldrb	r3, [r7, #19]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10c      	bne.n	8006fa8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006f9c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 f9a7 	bl	80072f2 <RTC_ExitInitMode>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006fa8:	7cfb      	ldrb	r3, [r7, #19]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d102      	bne.n	8006fb4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	22ff      	movs	r2, #255	; 0xff
 8006fba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	771a      	strb	r2, [r3, #28]

  return status;
 8006fc2:	7cfb      	ldrb	r3, [r7, #19]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	371c      	adds	r7, #28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd90      	pop	{r4, r7, pc}

08006fcc <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006fcc:	b590      	push	{r4, r7, lr}
 8006fce:	b089      	sub	sp, #36	; 0x24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	7f1b      	ldrb	r3, [r3, #28]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d101      	bne.n	8006ff0 <HAL_RTC_SetAlarm+0x24>
 8006fec:	2302      	movs	r3, #2
 8006fee:	e113      	b.n	8007218 <HAL_RTC_SetAlarm+0x24c>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d137      	bne.n	8007072 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700c:	2b00      	cmp	r3, #0
 800700e:	d102      	bne.n	8007016 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2200      	movs	r2, #0
 8007014:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	4618      	mov	r0, r3
 800701c:	f000 f98e 	bl	800733c <RTC_ByteToBcd2>
 8007020:	4603      	mov	r3, r0
 8007022:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	785b      	ldrb	r3, [r3, #1]
 8007028:	4618      	mov	r0, r3
 800702a:	f000 f987 	bl	800733c <RTC_ByteToBcd2>
 800702e:	4603      	mov	r3, r0
 8007030:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007032:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	789b      	ldrb	r3, [r3, #2]
 8007038:	4618      	mov	r0, r3
 800703a:	f000 f97f 	bl	800733c <RTC_ByteToBcd2>
 800703e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007040:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	78db      	ldrb	r3, [r3, #3]
 8007048:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800704a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007054:	4618      	mov	r0, r3
 8007056:	f000 f971 	bl	800733c <RTC_ByteToBcd2>
 800705a:	4603      	mov	r3, r0
 800705c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800705e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007066:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800706c:	4313      	orrs	r3, r2
 800706e:	61fb      	str	r3, [r7, #28]
 8007070:	e023      	b.n	80070ba <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707c:	2b00      	cmp	r3, #0
 800707e:	d102      	bne.n	8007086 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2200      	movs	r2, #0
 8007084:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	785b      	ldrb	r3, [r3, #1]
 8007090:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007092:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007098:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	78db      	ldrb	r3, [r3, #3]
 800709e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80070a0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070a8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80070aa:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80070b0:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80070b6:	4313      	orrs	r3, r2
 80070b8:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	22ca      	movs	r2, #202	; 0xca
 80070cc:	625a      	str	r2, [r3, #36]	; 0x24
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2253      	movs	r2, #83	; 0x53
 80070d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070de:	d148      	bne.n	8007172 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070ee:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070fe:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	b2da      	uxtb	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007110:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007112:	f7fc f897 	bl	8003244 <HAL_GetTick>
 8007116:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007118:	e013      	b.n	8007142 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800711a:	f7fc f893 	bl	8003244 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007128:	d90b      	bls.n	8007142 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	22ff      	movs	r2, #255	; 0xff
 8007130:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2203      	movs	r2, #3
 8007136:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e06a      	b.n	8007218 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	d0e4      	beq.n	800711a <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	69fa      	ldr	r2, [r7, #28]
 8007156:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800716e:	609a      	str	r2, [r3, #8]
 8007170:	e047      	b.n	8007202 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007180:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007190:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	b2da      	uxtb	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f462 7220 	orn	r2, r2, #640	; 0x280
 80071a2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071a4:	f7fc f84e 	bl	8003244 <HAL_GetTick>
 80071a8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80071aa:	e013      	b.n	80071d4 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80071ac:	f7fc f84a 	bl	8003244 <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071ba:	d90b      	bls.n	80071d4 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	22ff      	movs	r2, #255	; 0xff
 80071c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2203      	movs	r2, #3
 80071c8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e021      	b.n	8007218 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d0e4      	beq.n	80071ac <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69fa      	ldr	r2, [r7, #28]
 80071e8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007200:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	22ff      	movs	r2, #255	; 0xff
 8007208:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3724      	adds	r7, #36	; 0x24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd90      	pop	{r4, r7, pc}

08007220 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68da      	ldr	r2, [r3, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800724e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007250:	f7fb fff8 	bl	8003244 <HAL_GetTick>
 8007254:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007256:	e009      	b.n	800726c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007258:	f7fb fff4 	bl	8003244 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007266:	d901      	bls.n	800726c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e007      	b.n	800727c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f003 0320 	and.w	r3, r3, #32
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0ee      	beq.n	8007258 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800728c:	2300      	movs	r3, #0
 800728e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d122      	bne.n	80072e8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072b0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072b2:	f7fb ffc7 	bl	8003244 <HAL_GetTick>
 80072b6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80072b8:	e00c      	b.n	80072d4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80072ba:	f7fb ffc3 	bl	8003244 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072c8:	d904      	bls.n	80072d4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2204      	movs	r2, #4
 80072ce:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d102      	bne.n	80072e8 <RTC_EnterInitMode+0x64>
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d1e8      	bne.n	80072ba <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800730c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f003 0320 	and.w	r3, r3, #32
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10a      	bne.n	8007332 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f7ff ff89 	bl	8007234 <HAL_RTC_WaitForSynchro>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d004      	beq.n	8007332 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2204      	movs	r2, #4
 800732c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007332:	7bfb      	ldrb	r3, [r7, #15]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	4603      	mov	r3, r0
 8007344:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800734a:	e005      	b.n	8007358 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	3301      	adds	r3, #1
 8007350:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007352:	79fb      	ldrb	r3, [r7, #7]
 8007354:	3b0a      	subs	r3, #10
 8007356:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007358:	79fb      	ldrb	r3, [r7, #7]
 800735a:	2b09      	cmp	r3, #9
 800735c:	d8f6      	bhi.n	800734c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	011b      	lsls	r3, r3, #4
 8007362:	b2da      	uxtb	r2, r3
 8007364:	79fb      	ldrb	r3, [r7, #7]
 8007366:	4313      	orrs	r3, r2
 8007368:	b2db      	uxtb	r3, r3
}
 800736a:	4618      	mov	r0, r3
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b086      	sub	sp, #24
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	7f1b      	ldrb	r3, [r3, #28]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d101      	bne.n	80073ba <HAL_RTCEx_SetWakeUpTimer+0x1c>
 80073b6:	2302      	movs	r3, #2
 80073b8:	e08a      	b.n	80074d0 <HAL_RTCEx_SetWakeUpTimer+0x132>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2201      	movs	r2, #1
 80073be:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2202      	movs	r2, #2
 80073c4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	22ca      	movs	r2, #202	; 0xca
 80073cc:	625a      	str	r2, [r3, #36]	; 0x24
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2253      	movs	r2, #83	; 0x53
 80073d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01e      	beq.n	8007422 <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 80073e4:	f7fb ff2e 	bl	8003244 <HAL_GetTick>
 80073e8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80073ea:	e013      	b.n	8007414 <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80073ec:	f7fb ff2a 	bl	8003244 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073fa:	d90b      	bls.n	8007414 <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	22ff      	movs	r2, #255	; 0xff
 8007402:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2203      	movs	r2, #3
 8007408:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e05d      	b.n	80074d0 <HAL_RTCEx_SetWakeUpTimer+0x132>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f003 0304 	and.w	r3, r3, #4
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e4      	bne.n	80073ec <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007430:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	b2da      	uxtb	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007442:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007444:	f7fb fefe 	bl	8003244 <HAL_GetTick>
 8007448:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800744a:	e013      	b.n	8007474 <HAL_RTCEx_SetWakeUpTimer+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800744c:	f7fb fefa 	bl	8003244 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800745a:	d90b      	bls.n	8007474 <HAL_RTCEx_SetWakeUpTimer+0xd6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	22ff      	movs	r2, #255	; 0xff
 8007462:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2203      	movs	r2, #3
 8007468:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e02d      	b.n	80074d0 <HAL_RTCEx_SetWakeUpTimer+0x132>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f003 0304 	and.w	r3, r3, #4
 800747e:	2b00      	cmp	r3, #0
 8007480:	d0e4      	beq.n	800744c <HAL_RTCEx_SetWakeUpTimer+0xae>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0207 	bic.w	r2, r2, #7
 8007490:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6899      	ldr	r1, [r3, #8]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	430a      	orrs	r2, r1
 80074a0:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074b8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	22ff      	movs	r2, #255	; 0xff
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2201      	movs	r2, #1
 80074c6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e09b      	b.n	800764a <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007516:	2b00      	cmp	r3, #0
 8007518:	d108      	bne.n	800752c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007522:	d009      	beq.n	8007538 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	61da      	str	r2, [r3, #28]
 800752a:	e005      	b.n	8007538 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d126      	bne.n	8007598 <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a3f      	ldr	r2, [pc, #252]	; (8007654 <HAL_SPI_Init+0x154>)
 8007556:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a3f      	ldr	r2, [pc, #252]	; (8007658 <HAL_SPI_Init+0x158>)
 800755c:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a3e      	ldr	r2, [pc, #248]	; (800765c <HAL_SPI_Init+0x15c>)
 8007562:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a3e      	ldr	r2, [pc, #248]	; (8007660 <HAL_SPI_Init+0x160>)
 8007568:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a3d      	ldr	r2, [pc, #244]	; (8007664 <HAL_SPI_Init+0x164>)
 800756e:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a3d      	ldr	r2, [pc, #244]	; (8007668 <HAL_SPI_Init+0x168>)
 8007574:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a3c      	ldr	r2, [pc, #240]	; (800766c <HAL_SPI_Init+0x16c>)
 800757a:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a3c      	ldr	r2, [pc, #240]	; (8007670 <HAL_SPI_Init+0x170>)
 8007580:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007586:	2b00      	cmp	r3, #0
 8007588:	d102      	bne.n	8007590 <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a39      	ldr	r2, [pc, #228]	; (8007674 <HAL_SPI_Init+0x174>)
 800758e:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075c0:	431a      	orrs	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	431a      	orrs	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	431a      	orrs	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075e8:	431a      	orrs	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075f2:	431a      	orrs	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fc:	ea42 0103 	orr.w	r1, r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007604:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	0c1b      	lsrs	r3, r3, #16
 8007616:	f003 0104 	and.w	r1, r3, #4
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	f003 0210 	and.w	r2, r3, #16
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69da      	ldr	r2, [r3, #28]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007638:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	08007879 	.word	0x08007879
 8007658:	0800788d 	.word	0x0800788d
 800765c:	080078a1 	.word	0x080078a1
 8007660:	080078b5 	.word	0x080078b5
 8007664:	080078c9 	.word	0x080078c9
 8007668:	080078dd 	.word	0x080078dd
 800766c:	080078f1 	.word	0x080078f1
 8007670:	08007905 	.word	0x08007905
 8007674:	0800286d 	.word	0x0800286d

08007678 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b088      	sub	sp, #32
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	099b      	lsrs	r3, r3, #6
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10f      	bne.n	80076bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	099b      	lsrs	r3, r3, #6
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d004      	beq.n	80076bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	4798      	blx	r3
    return;
 80076ba:	e0d8      	b.n	800786e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	085b      	lsrs	r3, r3, #1
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00a      	beq.n	80076de <HAL_SPI_IRQHandler+0x66>
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	09db      	lsrs	r3, r3, #7
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d004      	beq.n	80076de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	4798      	blx	r3
    return;
 80076dc:	e0c7      	b.n	800786e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	095b      	lsrs	r3, r3, #5
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10c      	bne.n	8007704 <HAL_SPI_IRQHandler+0x8c>
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	099b      	lsrs	r3, r3, #6
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d106      	bne.n	8007704 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	0a1b      	lsrs	r3, r3, #8
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 80b5 	beq.w	800786e <HAL_SPI_IRQHandler+0x1f6>
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	095b      	lsrs	r3, r3, #5
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 80ae 	beq.w	800786e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	099b      	lsrs	r3, r3, #6
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d023      	beq.n	8007766 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b03      	cmp	r3, #3
 8007728:	d011      	beq.n	800774e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772e:	f043 0204 	orr.w	r2, r3, #4
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	e00b      	b.n	8007766 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800774e:	2300      	movs	r3, #0
 8007750:	613b      	str	r3, [r7, #16]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	613b      	str	r3, [r7, #16]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	613b      	str	r3, [r7, #16]
 8007762:	693b      	ldr	r3, [r7, #16]
        return;
 8007764:	e083      	b.n	800786e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	095b      	lsrs	r3, r3, #5
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	d014      	beq.n	800779c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007776:	f043 0201 	orr.w	r2, r3, #1
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	0a1b      	lsrs	r3, r3, #8
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00c      	beq.n	80077c2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ac:	f043 0208 	orr.w	r2, r3, #8
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80077b4:	2300      	movs	r3, #0
 80077b6:	60bb      	str	r3, [r7, #8]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	60bb      	str	r3, [r7, #8]
 80077c0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d050      	beq.n	800786c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077d8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d104      	bne.n	80077f6 <HAL_SPI_IRQHandler+0x17e>
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d034      	beq.n	8007860 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 0203 	bic.w	r2, r2, #3
 8007804:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800780a:	2b00      	cmp	r3, #0
 800780c:	d011      	beq.n	8007832 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007812:	4a18      	ldr	r2, [pc, #96]	; (8007874 <HAL_SPI_IRQHandler+0x1fc>)
 8007814:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800781a:	4618      	mov	r0, r3
 800781c:	f7fc fa56 	bl	8003ccc <HAL_DMA_Abort_IT>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d005      	beq.n	8007832 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007836:	2b00      	cmp	r3, #0
 8007838:	d017      	beq.n	800786a <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800783e:	4a0d      	ldr	r2, [pc, #52]	; (8007874 <HAL_SPI_IRQHandler+0x1fc>)
 8007840:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007846:	4618      	mov	r0, r3
 8007848:	f7fc fa40 	bl	8003ccc <HAL_DMA_Abort_IT>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00b      	beq.n	800786a <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007856:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800785e:	e004      	b.n	800786a <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007868:	e000      	b.n	800786c <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 800786a:	bf00      	nop
    return;
 800786c:	bf00      	nop
  }
}
 800786e:	3720      	adds	r7, #32
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	08007919 	.word	0x08007919

08007878 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007924:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800793a:	bf00      	nop
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e04c      	b.n	80079f0 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d111      	bne.n	8007986 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fc8e 	bl	800828c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007974:	2b00      	cmp	r3, #0
 8007976:	d102      	bne.n	800797e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a1f      	ldr	r2, [pc, #124]	; (80079f8 <HAL_TIM_Base_Init+0xb4>)
 800797c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2202      	movs	r2, #2
 800798a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	3304      	adds	r3, #4
 8007996:	4619      	mov	r1, r3
 8007998:	4610      	mov	r0, r2
 800799a:	f000 fb5d 	bl	8008058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	08002f0d 	.word	0x08002f0d

080079fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d001      	beq.n	8007a14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e03c      	b.n	8007a8e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a1e      	ldr	r2, [pc, #120]	; (8007a9c <HAL_TIM_Base_Start+0xa0>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d018      	beq.n	8007a58 <HAL_TIM_Base_Start+0x5c>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a2e:	d013      	beq.n	8007a58 <HAL_TIM_Base_Start+0x5c>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a1a      	ldr	r2, [pc, #104]	; (8007aa0 <HAL_TIM_Base_Start+0xa4>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d00e      	beq.n	8007a58 <HAL_TIM_Base_Start+0x5c>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a19      	ldr	r2, [pc, #100]	; (8007aa4 <HAL_TIM_Base_Start+0xa8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d009      	beq.n	8007a58 <HAL_TIM_Base_Start+0x5c>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a17      	ldr	r2, [pc, #92]	; (8007aa8 <HAL_TIM_Base_Start+0xac>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d004      	beq.n	8007a58 <HAL_TIM_Base_Start+0x5c>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a16      	ldr	r2, [pc, #88]	; (8007aac <HAL_TIM_Base_Start+0xb0>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d111      	bne.n	8007a7c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2b06      	cmp	r3, #6
 8007a68:	d010      	beq.n	8007a8c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f042 0201 	orr.w	r2, r2, #1
 8007a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a7a:	e007      	b.n	8007a8c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0201 	orr.w	r2, r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	40010000 	.word	0x40010000
 8007aa0:	40000400 	.word	0x40000400
 8007aa4:	40000800 	.word	0x40000800
 8007aa8:	40000c00 	.word	0x40000c00
 8007aac:	40014000 	.word	0x40014000

08007ab0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6a1a      	ldr	r2, [r3, #32]
 8007abe:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10f      	bne.n	8007ae8 <HAL_TIM_Base_Stop+0x38>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6a1a      	ldr	r2, [r3, #32]
 8007ace:	f240 4344 	movw	r3, #1092	; 0x444
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d107      	bne.n	8007ae8 <HAL_TIM_Base_Stop+0x38>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f022 0201 	bic.w	r2, r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
	...

08007b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d001      	beq.n	8007b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e044      	b.n	8007ba2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0201 	orr.w	r2, r2, #1
 8007b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a1e      	ldr	r2, [pc, #120]	; (8007bb0 <HAL_TIM_Base_Start_IT+0xb0>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d018      	beq.n	8007b6c <HAL_TIM_Base_Start_IT+0x6c>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b42:	d013      	beq.n	8007b6c <HAL_TIM_Base_Start_IT+0x6c>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a1a      	ldr	r2, [pc, #104]	; (8007bb4 <HAL_TIM_Base_Start_IT+0xb4>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d00e      	beq.n	8007b6c <HAL_TIM_Base_Start_IT+0x6c>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a19      	ldr	r2, [pc, #100]	; (8007bb8 <HAL_TIM_Base_Start_IT+0xb8>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d009      	beq.n	8007b6c <HAL_TIM_Base_Start_IT+0x6c>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a17      	ldr	r2, [pc, #92]	; (8007bbc <HAL_TIM_Base_Start_IT+0xbc>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d004      	beq.n	8007b6c <HAL_TIM_Base_Start_IT+0x6c>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a16      	ldr	r2, [pc, #88]	; (8007bc0 <HAL_TIM_Base_Start_IT+0xc0>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d111      	bne.n	8007b90 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f003 0307 	and.w	r3, r3, #7
 8007b76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2b06      	cmp	r3, #6
 8007b7c:	d010      	beq.n	8007ba0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f042 0201 	orr.w	r2, r2, #1
 8007b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b8e:	e007      	b.n	8007ba0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f042 0201 	orr.w	r2, r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	40010000 	.word	0x40010000
 8007bb4:	40000400 	.word	0x40000400
 8007bb8:	40000800 	.word	0x40000800
 8007bbc:	40000c00 	.word	0x40000c00
 8007bc0:	40014000 	.word	0x40014000

08007bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f003 0302 	and.w	r3, r3, #2
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d128      	bne.n	8007c2c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d121      	bne.n	8007c2c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f06f 0202 	mvn.w	r2, #2
 8007bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d005      	beq.n	8007c12 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	4798      	blx	r3
 8007c10:	e009      	b.n	8007c26 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	f003 0304 	and.w	r3, r3, #4
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d128      	bne.n	8007c8c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b04      	cmp	r3, #4
 8007c46:	d121      	bne.n	8007c8c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f06f 0204 	mvn.w	r2, #4
 8007c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2202      	movs	r2, #2
 8007c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d005      	beq.n	8007c72 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	4798      	blx	r3
 8007c70:	e009      	b.n	8007c86 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	f003 0308 	and.w	r3, r3, #8
 8007c96:	2b08      	cmp	r3, #8
 8007c98:	d128      	bne.n	8007cec <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f003 0308 	and.w	r3, r3, #8
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	d121      	bne.n	8007cec <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f06f 0208 	mvn.w	r2, #8
 8007cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2204      	movs	r2, #4
 8007cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	f003 0303 	and.w	r3, r3, #3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d005      	beq.n	8007cd2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	4798      	blx	r3
 8007cd0:	e009      	b.n	8007ce6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f003 0310 	and.w	r3, r3, #16
 8007cf6:	2b10      	cmp	r3, #16
 8007cf8:	d128      	bne.n	8007d4c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f003 0310 	and.w	r3, r3, #16
 8007d04:	2b10      	cmp	r3, #16
 8007d06:	d121      	bne.n	8007d4c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f06f 0210 	mvn.w	r2, #16
 8007d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2208      	movs	r2, #8
 8007d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d005      	beq.n	8007d32 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	4798      	blx	r3
 8007d30:	e009      	b.n	8007d46 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d110      	bne.n	8007d7c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d109      	bne.n	8007d7c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f06f 0201 	mvn.w	r2, #1
 8007d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d86:	2b80      	cmp	r3, #128	; 0x80
 8007d88:	d110      	bne.n	8007dac <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d94:	2b80      	cmp	r3, #128	; 0x80
 8007d96:	d109      	bne.n	8007dac <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db6:	2b40      	cmp	r3, #64	; 0x40
 8007db8:	d110      	bne.n	8007ddc <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc4:	2b40      	cmp	r3, #64	; 0x40
 8007dc6:	d109      	bne.n	8007ddc <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b20      	cmp	r3, #32
 8007de8:	d110      	bne.n	8007e0c <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f003 0320 	and.w	r3, r3, #32
 8007df4:	2b20      	cmp	r3, #32
 8007df6:	d109      	bne.n	8007e0c <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f06f 0220 	mvn.w	r2, #32
 8007e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e0c:	bf00      	nop
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d101      	bne.n	8007e30 <HAL_TIM_ConfigClockSource+0x1c>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	e0b4      	b.n	8007f9a <HAL_TIM_ConfigClockSource+0x186>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e68:	d03e      	beq.n	8007ee8 <HAL_TIM_ConfigClockSource+0xd4>
 8007e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e6e:	f200 8087 	bhi.w	8007f80 <HAL_TIM_ConfigClockSource+0x16c>
 8007e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e76:	f000 8086 	beq.w	8007f86 <HAL_TIM_ConfigClockSource+0x172>
 8007e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e7e:	d87f      	bhi.n	8007f80 <HAL_TIM_ConfigClockSource+0x16c>
 8007e80:	2b70      	cmp	r3, #112	; 0x70
 8007e82:	d01a      	beq.n	8007eba <HAL_TIM_ConfigClockSource+0xa6>
 8007e84:	2b70      	cmp	r3, #112	; 0x70
 8007e86:	d87b      	bhi.n	8007f80 <HAL_TIM_ConfigClockSource+0x16c>
 8007e88:	2b60      	cmp	r3, #96	; 0x60
 8007e8a:	d050      	beq.n	8007f2e <HAL_TIM_ConfigClockSource+0x11a>
 8007e8c:	2b60      	cmp	r3, #96	; 0x60
 8007e8e:	d877      	bhi.n	8007f80 <HAL_TIM_ConfigClockSource+0x16c>
 8007e90:	2b50      	cmp	r3, #80	; 0x50
 8007e92:	d03c      	beq.n	8007f0e <HAL_TIM_ConfigClockSource+0xfa>
 8007e94:	2b50      	cmp	r3, #80	; 0x50
 8007e96:	d873      	bhi.n	8007f80 <HAL_TIM_ConfigClockSource+0x16c>
 8007e98:	2b40      	cmp	r3, #64	; 0x40
 8007e9a:	d058      	beq.n	8007f4e <HAL_TIM_ConfigClockSource+0x13a>
 8007e9c:	2b40      	cmp	r3, #64	; 0x40
 8007e9e:	d86f      	bhi.n	8007f80 <HAL_TIM_ConfigClockSource+0x16c>
 8007ea0:	2b30      	cmp	r3, #48	; 0x30
 8007ea2:	d064      	beq.n	8007f6e <HAL_TIM_ConfigClockSource+0x15a>
 8007ea4:	2b30      	cmp	r3, #48	; 0x30
 8007ea6:	d86b      	bhi.n	8007f80 <HAL_TIM_ConfigClockSource+0x16c>
 8007ea8:	2b20      	cmp	r3, #32
 8007eaa:	d060      	beq.n	8007f6e <HAL_TIM_ConfigClockSource+0x15a>
 8007eac:	2b20      	cmp	r3, #32
 8007eae:	d867      	bhi.n	8007f80 <HAL_TIM_ConfigClockSource+0x16c>
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d05c      	beq.n	8007f6e <HAL_TIM_ConfigClockSource+0x15a>
 8007eb4:	2b10      	cmp	r3, #16
 8007eb6:	d05a      	beq.n	8007f6e <HAL_TIM_ConfigClockSource+0x15a>
 8007eb8:	e062      	b.n	8007f80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6818      	ldr	r0, [r3, #0]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	6899      	ldr	r1, [r3, #8]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f000 f9bf 	bl	800824c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007edc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	609a      	str	r2, [r3, #8]
      break;
 8007ee6:	e04f      	b.n	8007f88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6818      	ldr	r0, [r3, #0]
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	6899      	ldr	r1, [r3, #8]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	f000 f9a8 	bl	800824c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f0a:	609a      	str	r2, [r3, #8]
      break;
 8007f0c:	e03c      	b.n	8007f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	6859      	ldr	r1, [r3, #4]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	f000 f91c 	bl	8008158 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2150      	movs	r1, #80	; 0x50
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 f975 	bl	8008216 <TIM_ITRx_SetConfig>
      break;
 8007f2c:	e02c      	b.n	8007f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6818      	ldr	r0, [r3, #0]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	6859      	ldr	r1, [r3, #4]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	f000 f93b 	bl	80081b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2160      	movs	r1, #96	; 0x60
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 f965 	bl	8008216 <TIM_ITRx_SetConfig>
      break;
 8007f4c:	e01c      	b.n	8007f88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6818      	ldr	r0, [r3, #0]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	6859      	ldr	r1, [r3, #4]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	f000 f8fc 	bl	8008158 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2140      	movs	r1, #64	; 0x40
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 f955 	bl	8008216 <TIM_ITRx_SetConfig>
      break;
 8007f6c:	e00c      	b.n	8007f88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4619      	mov	r1, r3
 8007f78:	4610      	mov	r0, r2
 8007f7a:	f000 f94c 	bl	8008216 <TIM_ITRx_SetConfig>
      break;
 8007f7e:	e003      	b.n	8007f88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	73fb      	strb	r3, [r7, #15]
      break;
 8007f84:	e000      	b.n	8007f88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007faa:	bf00      	nop
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b083      	sub	sp, #12
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ffa:	bf00      	nop
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008006:	b480      	push	{r7}
 8008008:	b083      	sub	sp, #12
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800800e:	bf00      	nop
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008022:	bf00      	nop
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008036:	bf00      	nop
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008042:	b480      	push	{r7}
 8008044:	b083      	sub	sp, #12
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800804a:	bf00      	nop
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
	...

08008058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a34      	ldr	r2, [pc, #208]	; (800813c <TIM_Base_SetConfig+0xe4>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d00f      	beq.n	8008090 <TIM_Base_SetConfig+0x38>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008076:	d00b      	beq.n	8008090 <TIM_Base_SetConfig+0x38>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a31      	ldr	r2, [pc, #196]	; (8008140 <TIM_Base_SetConfig+0xe8>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d007      	beq.n	8008090 <TIM_Base_SetConfig+0x38>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a30      	ldr	r2, [pc, #192]	; (8008144 <TIM_Base_SetConfig+0xec>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d003      	beq.n	8008090 <TIM_Base_SetConfig+0x38>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a2f      	ldr	r2, [pc, #188]	; (8008148 <TIM_Base_SetConfig+0xf0>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d108      	bne.n	80080a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	4313      	orrs	r3, r2
 80080a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a25      	ldr	r2, [pc, #148]	; (800813c <TIM_Base_SetConfig+0xe4>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d01b      	beq.n	80080e2 <TIM_Base_SetConfig+0x8a>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b0:	d017      	beq.n	80080e2 <TIM_Base_SetConfig+0x8a>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a22      	ldr	r2, [pc, #136]	; (8008140 <TIM_Base_SetConfig+0xe8>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d013      	beq.n	80080e2 <TIM_Base_SetConfig+0x8a>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a21      	ldr	r2, [pc, #132]	; (8008144 <TIM_Base_SetConfig+0xec>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d00f      	beq.n	80080e2 <TIM_Base_SetConfig+0x8a>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a20      	ldr	r2, [pc, #128]	; (8008148 <TIM_Base_SetConfig+0xf0>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d00b      	beq.n	80080e2 <TIM_Base_SetConfig+0x8a>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a1f      	ldr	r2, [pc, #124]	; (800814c <TIM_Base_SetConfig+0xf4>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d007      	beq.n	80080e2 <TIM_Base_SetConfig+0x8a>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a1e      	ldr	r2, [pc, #120]	; (8008150 <TIM_Base_SetConfig+0xf8>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d003      	beq.n	80080e2 <TIM_Base_SetConfig+0x8a>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a1d      	ldr	r2, [pc, #116]	; (8008154 <TIM_Base_SetConfig+0xfc>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d108      	bne.n	80080f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	689a      	ldr	r2, [r3, #8]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a08      	ldr	r2, [pc, #32]	; (800813c <TIM_Base_SetConfig+0xe4>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d103      	bne.n	8008128 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	691a      	ldr	r2, [r3, #16]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	615a      	str	r2, [r3, #20]
}
 800812e:	bf00      	nop
 8008130:	3714      	adds	r7, #20
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	40010000 	.word	0x40010000
 8008140:	40000400 	.word	0x40000400
 8008144:	40000800 	.word	0x40000800
 8008148:	40000c00 	.word	0x40000c00
 800814c:	40014000 	.word	0x40014000
 8008150:	40014400 	.word	0x40014400
 8008154:	40014800 	.word	0x40014800

08008158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	f023 0201 	bic.w	r2, r3, #1
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	011b      	lsls	r3, r3, #4
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	4313      	orrs	r3, r2
 800818c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f023 030a 	bic.w	r3, r3, #10
 8008194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	4313      	orrs	r3, r2
 800819c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	621a      	str	r2, [r3, #32]
}
 80081aa:	bf00      	nop
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b087      	sub	sp, #28
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	f023 0210 	bic.w	r2, r3, #16
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	031b      	lsls	r3, r3, #12
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	011b      	lsls	r3, r3, #4
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	621a      	str	r2, [r3, #32]
}
 800820a:	bf00      	nop
 800820c:	371c      	adds	r7, #28
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008216:	b480      	push	{r7}
 8008218:	b085      	sub	sp, #20
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800822c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4313      	orrs	r3, r2
 8008234:	f043 0307 	orr.w	r3, r3, #7
 8008238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	609a      	str	r2, [r3, #8]
}
 8008240:	bf00      	nop
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
 8008258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	021a      	lsls	r2, r3, #8
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	431a      	orrs	r2, r3
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4313      	orrs	r3, r2
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	4313      	orrs	r3, r2
 8008278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	609a      	str	r2, [r3, #8]
}
 8008280:	bf00      	nop
 8008282:	371c      	adds	r7, #28
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a1c      	ldr	r2, [pc, #112]	; (8008308 <TIM_ResetCallback+0x7c>)
 8008298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a1b      	ldr	r2, [pc, #108]	; (800830c <TIM_ResetCallback+0x80>)
 80082a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a1a      	ldr	r2, [pc, #104]	; (8008310 <TIM_ResetCallback+0x84>)
 80082a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a19      	ldr	r2, [pc, #100]	; (8008314 <TIM_ResetCallback+0x88>)
 80082b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a18      	ldr	r2, [pc, #96]	; (8008318 <TIM_ResetCallback+0x8c>)
 80082b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a17      	ldr	r2, [pc, #92]	; (800831c <TIM_ResetCallback+0x90>)
 80082c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a16      	ldr	r2, [pc, #88]	; (8008320 <TIM_ResetCallback+0x94>)
 80082c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a15      	ldr	r2, [pc, #84]	; (8008324 <TIM_ResetCallback+0x98>)
 80082d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a14      	ldr	r2, [pc, #80]	; (8008328 <TIM_ResetCallback+0x9c>)
 80082d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a13      	ldr	r2, [pc, #76]	; (800832c <TIM_ResetCallback+0xa0>)
 80082e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a12      	ldr	r2, [pc, #72]	; (8008330 <TIM_ResetCallback+0xa4>)
 80082e8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a11      	ldr	r2, [pc, #68]	; (8008334 <TIM_ResetCallback+0xa8>)
 80082f0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a10      	ldr	r2, [pc, #64]	; (8008338 <TIM_ResetCallback+0xac>)
 80082f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	08002599 	.word	0x08002599
 800830c:	08007fa3 	.word	0x08007fa3
 8008310:	0800801b 	.word	0x0800801b
 8008314:	0800802f 	.word	0x0800802f
 8008318:	08007fcb 	.word	0x08007fcb
 800831c:	08007fdf 	.word	0x08007fdf
 8008320:	08007fb7 	.word	0x08007fb7
 8008324:	08007ff3 	.word	0x08007ff3
 8008328:	08008007 	.word	0x08008007
 800832c:	08008043 	.word	0x08008043
 8008330:	08008419 	.word	0x08008419
 8008334:	0800842d 	.word	0x0800842d
 8008338:	08008441 	.word	0x08008441

0800833c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800834c:	2b01      	cmp	r3, #1
 800834e:	d101      	bne.n	8008354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008350:	2302      	movs	r3, #2
 8008352:	e050      	b.n	80083f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2202      	movs	r2, #2
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800837a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	4313      	orrs	r3, r2
 8008384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a1c      	ldr	r2, [pc, #112]	; (8008404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d018      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a0:	d013      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a18      	ldr	r2, [pc, #96]	; (8008408 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d00e      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a16      	ldr	r2, [pc, #88]	; (800840c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d009      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a15      	ldr	r2, [pc, #84]	; (8008410 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d004      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a13      	ldr	r2, [pc, #76]	; (8008414 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d10c      	bne.n	80083e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	4313      	orrs	r3, r2
 80083da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	40010000 	.word	0x40010000
 8008408:	40000400 	.word	0x40000400
 800840c:	40000800 	.word	0x40000800
 8008410:	40000c00 	.word	0x40000c00
 8008414:	40014000 	.word	0x40014000

08008418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e04a      	b.n	80084fc <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d111      	bne.n	8008496 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f8a0 	bl	80085c0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008484:	2b00      	cmp	r3, #0
 8008486:	d102      	bne.n	800848e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a1e      	ldr	r2, [pc, #120]	; (8008504 <HAL_UART_Init+0xb0>)
 800848c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2224      	movs	r2, #36	; 0x24
 800849a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68da      	ldr	r2, [r3, #12]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f8be 	bl	8008630 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	691a      	ldr	r2, [r3, #16]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	695a      	ldr	r2, [r3, #20]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68da      	ldr	r2, [r3, #12]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2220      	movs	r2, #32
 80084ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2220      	movs	r2, #32
 80084f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	08003031 	.word	0x08003031

08008508 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a10      	ldr	r2, [pc, #64]	; (800860c <UART_InitCallbacksToDefault+0x4c>)
 80085cc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a0f      	ldr	r2, [pc, #60]	; (8008610 <UART_InitCallbacksToDefault+0x50>)
 80085d2:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a0f      	ldr	r2, [pc, #60]	; (8008614 <UART_InitCallbacksToDefault+0x54>)
 80085d8:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a0e      	ldr	r2, [pc, #56]	; (8008618 <UART_InitCallbacksToDefault+0x58>)
 80085de:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a0e      	ldr	r2, [pc, #56]	; (800861c <UART_InitCallbacksToDefault+0x5c>)
 80085e4:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a0d      	ldr	r2, [pc, #52]	; (8008620 <UART_InitCallbacksToDefault+0x60>)
 80085ea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a0d      	ldr	r2, [pc, #52]	; (8008624 <UART_InitCallbacksToDefault+0x64>)
 80085f0:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a0c      	ldr	r2, [pc, #48]	; (8008628 <UART_InitCallbacksToDefault+0x68>)
 80085f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a0c      	ldr	r2, [pc, #48]	; (800862c <UART_InitCallbacksToDefault+0x6c>)
 80085fc:	669a      	str	r2, [r3, #104]	; 0x68

}
 80085fe:	bf00      	nop
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	0800851d 	.word	0x0800851d
 8008610:	08008509 	.word	0x08008509
 8008614:	08008545 	.word	0x08008545
 8008618:	08008531 	.word	0x08008531
 800861c:	08008559 	.word	0x08008559
 8008620:	0800856d 	.word	0x0800856d
 8008624:	08008581 	.word	0x08008581
 8008628:	08008595 	.word	0x08008595
 800862c:	080085a9 	.word	0x080085a9

08008630 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008634:	b0c0      	sub	sp, #256	; 0x100
 8008636:	af00      	add	r7, sp, #0
 8008638:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800863c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800864c:	68d9      	ldr	r1, [r3, #12]
 800864e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	ea40 0301 	orr.w	r3, r0, r1
 8008658:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800865a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800865e:	689a      	ldr	r2, [r3, #8]
 8008660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	431a      	orrs	r2, r3
 8008668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	431a      	orrs	r2, r3
 8008670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	4313      	orrs	r3, r2
 8008678:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800867c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008688:	f021 010c 	bic.w	r1, r1, #12
 800868c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008696:	430b      	orrs	r3, r1
 8008698:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800869a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80086a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086aa:	6999      	ldr	r1, [r3, #24]
 80086ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	ea40 0301 	orr.w	r3, r0, r1
 80086b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	4b8f      	ldr	r3, [pc, #572]	; (80088fc <UART_SetConfig+0x2cc>)
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d005      	beq.n	80086d0 <UART_SetConfig+0xa0>
 80086c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	4b8d      	ldr	r3, [pc, #564]	; (8008900 <UART_SetConfig+0x2d0>)
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d104      	bne.n	80086da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80086d0:	f7fe f986 	bl	80069e0 <HAL_RCC_GetPCLK2Freq>
 80086d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80086d8:	e003      	b.n	80086e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086da:	f7fe f96d 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 80086de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086ec:	f040 810c 	bne.w	8008908 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086f4:	2200      	movs	r2, #0
 80086f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80086fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008702:	4622      	mov	r2, r4
 8008704:	462b      	mov	r3, r5
 8008706:	1891      	adds	r1, r2, r2
 8008708:	65b9      	str	r1, [r7, #88]	; 0x58
 800870a:	415b      	adcs	r3, r3
 800870c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800870e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008712:	4621      	mov	r1, r4
 8008714:	eb12 0801 	adds.w	r8, r2, r1
 8008718:	4629      	mov	r1, r5
 800871a:	eb43 0901 	adc.w	r9, r3, r1
 800871e:	f04f 0200 	mov.w	r2, #0
 8008722:	f04f 0300 	mov.w	r3, #0
 8008726:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800872a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800872e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008732:	4690      	mov	r8, r2
 8008734:	4699      	mov	r9, r3
 8008736:	4623      	mov	r3, r4
 8008738:	eb18 0303 	adds.w	r3, r8, r3
 800873c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008740:	462b      	mov	r3, r5
 8008742:	eb49 0303 	adc.w	r3, r9, r3
 8008746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800874a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008756:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800875a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800875e:	460b      	mov	r3, r1
 8008760:	18db      	adds	r3, r3, r3
 8008762:	653b      	str	r3, [r7, #80]	; 0x50
 8008764:	4613      	mov	r3, r2
 8008766:	eb42 0303 	adc.w	r3, r2, r3
 800876a:	657b      	str	r3, [r7, #84]	; 0x54
 800876c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008770:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008774:	f7f7 fd34 	bl	80001e0 <__aeabi_uldivmod>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4b61      	ldr	r3, [pc, #388]	; (8008904 <UART_SetConfig+0x2d4>)
 800877e:	fba3 2302 	umull	r2, r3, r3, r2
 8008782:	095b      	lsrs	r3, r3, #5
 8008784:	011c      	lsls	r4, r3, #4
 8008786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800878a:	2200      	movs	r2, #0
 800878c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008790:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008794:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008798:	4642      	mov	r2, r8
 800879a:	464b      	mov	r3, r9
 800879c:	1891      	adds	r1, r2, r2
 800879e:	64b9      	str	r1, [r7, #72]	; 0x48
 80087a0:	415b      	adcs	r3, r3
 80087a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80087a8:	4641      	mov	r1, r8
 80087aa:	eb12 0a01 	adds.w	sl, r2, r1
 80087ae:	4649      	mov	r1, r9
 80087b0:	eb43 0b01 	adc.w	fp, r3, r1
 80087b4:	f04f 0200 	mov.w	r2, #0
 80087b8:	f04f 0300 	mov.w	r3, #0
 80087bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80087c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80087c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087c8:	4692      	mov	sl, r2
 80087ca:	469b      	mov	fp, r3
 80087cc:	4643      	mov	r3, r8
 80087ce:	eb1a 0303 	adds.w	r3, sl, r3
 80087d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087d6:	464b      	mov	r3, r9
 80087d8:	eb4b 0303 	adc.w	r3, fp, r3
 80087dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80087f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80087f4:	460b      	mov	r3, r1
 80087f6:	18db      	adds	r3, r3, r3
 80087f8:	643b      	str	r3, [r7, #64]	; 0x40
 80087fa:	4613      	mov	r3, r2
 80087fc:	eb42 0303 	adc.w	r3, r2, r3
 8008800:	647b      	str	r3, [r7, #68]	; 0x44
 8008802:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008806:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800880a:	f7f7 fce9 	bl	80001e0 <__aeabi_uldivmod>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4611      	mov	r1, r2
 8008814:	4b3b      	ldr	r3, [pc, #236]	; (8008904 <UART_SetConfig+0x2d4>)
 8008816:	fba3 2301 	umull	r2, r3, r3, r1
 800881a:	095b      	lsrs	r3, r3, #5
 800881c:	2264      	movs	r2, #100	; 0x64
 800881e:	fb02 f303 	mul.w	r3, r2, r3
 8008822:	1acb      	subs	r3, r1, r3
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800882a:	4b36      	ldr	r3, [pc, #216]	; (8008904 <UART_SetConfig+0x2d4>)
 800882c:	fba3 2302 	umull	r2, r3, r3, r2
 8008830:	095b      	lsrs	r3, r3, #5
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008838:	441c      	add	r4, r3
 800883a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800883e:	2200      	movs	r2, #0
 8008840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008844:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008848:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800884c:	4642      	mov	r2, r8
 800884e:	464b      	mov	r3, r9
 8008850:	1891      	adds	r1, r2, r2
 8008852:	63b9      	str	r1, [r7, #56]	; 0x38
 8008854:	415b      	adcs	r3, r3
 8008856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008858:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800885c:	4641      	mov	r1, r8
 800885e:	1851      	adds	r1, r2, r1
 8008860:	6339      	str	r1, [r7, #48]	; 0x30
 8008862:	4649      	mov	r1, r9
 8008864:	414b      	adcs	r3, r1
 8008866:	637b      	str	r3, [r7, #52]	; 0x34
 8008868:	f04f 0200 	mov.w	r2, #0
 800886c:	f04f 0300 	mov.w	r3, #0
 8008870:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008874:	4659      	mov	r1, fp
 8008876:	00cb      	lsls	r3, r1, #3
 8008878:	4651      	mov	r1, sl
 800887a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800887e:	4651      	mov	r1, sl
 8008880:	00ca      	lsls	r2, r1, #3
 8008882:	4610      	mov	r0, r2
 8008884:	4619      	mov	r1, r3
 8008886:	4603      	mov	r3, r0
 8008888:	4642      	mov	r2, r8
 800888a:	189b      	adds	r3, r3, r2
 800888c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008890:	464b      	mov	r3, r9
 8008892:	460a      	mov	r2, r1
 8008894:	eb42 0303 	adc.w	r3, r2, r3
 8008898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800889c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80088a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80088ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80088b0:	460b      	mov	r3, r1
 80088b2:	18db      	adds	r3, r3, r3
 80088b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80088b6:	4613      	mov	r3, r2
 80088b8:	eb42 0303 	adc.w	r3, r2, r3
 80088bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80088c6:	f7f7 fc8b 	bl	80001e0 <__aeabi_uldivmod>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4b0d      	ldr	r3, [pc, #52]	; (8008904 <UART_SetConfig+0x2d4>)
 80088d0:	fba3 1302 	umull	r1, r3, r3, r2
 80088d4:	095b      	lsrs	r3, r3, #5
 80088d6:	2164      	movs	r1, #100	; 0x64
 80088d8:	fb01 f303 	mul.w	r3, r1, r3
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	3332      	adds	r3, #50	; 0x32
 80088e2:	4a08      	ldr	r2, [pc, #32]	; (8008904 <UART_SetConfig+0x2d4>)
 80088e4:	fba2 2303 	umull	r2, r3, r2, r3
 80088e8:	095b      	lsrs	r3, r3, #5
 80088ea:	f003 0207 	and.w	r2, r3, #7
 80088ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4422      	add	r2, r4
 80088f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80088f8:	e105      	b.n	8008b06 <UART_SetConfig+0x4d6>
 80088fa:	bf00      	nop
 80088fc:	40011000 	.word	0x40011000
 8008900:	40011400 	.word	0x40011400
 8008904:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800890c:	2200      	movs	r2, #0
 800890e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008912:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008916:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800891a:	4642      	mov	r2, r8
 800891c:	464b      	mov	r3, r9
 800891e:	1891      	adds	r1, r2, r2
 8008920:	6239      	str	r1, [r7, #32]
 8008922:	415b      	adcs	r3, r3
 8008924:	627b      	str	r3, [r7, #36]	; 0x24
 8008926:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800892a:	4641      	mov	r1, r8
 800892c:	1854      	adds	r4, r2, r1
 800892e:	4649      	mov	r1, r9
 8008930:	eb43 0501 	adc.w	r5, r3, r1
 8008934:	f04f 0200 	mov.w	r2, #0
 8008938:	f04f 0300 	mov.w	r3, #0
 800893c:	00eb      	lsls	r3, r5, #3
 800893e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008942:	00e2      	lsls	r2, r4, #3
 8008944:	4614      	mov	r4, r2
 8008946:	461d      	mov	r5, r3
 8008948:	4643      	mov	r3, r8
 800894a:	18e3      	adds	r3, r4, r3
 800894c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008950:	464b      	mov	r3, r9
 8008952:	eb45 0303 	adc.w	r3, r5, r3
 8008956:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800895a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008966:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800896a:	f04f 0200 	mov.w	r2, #0
 800896e:	f04f 0300 	mov.w	r3, #0
 8008972:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008976:	4629      	mov	r1, r5
 8008978:	008b      	lsls	r3, r1, #2
 800897a:	4621      	mov	r1, r4
 800897c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008980:	4621      	mov	r1, r4
 8008982:	008a      	lsls	r2, r1, #2
 8008984:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008988:	f7f7 fc2a 	bl	80001e0 <__aeabi_uldivmod>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4b60      	ldr	r3, [pc, #384]	; (8008b14 <UART_SetConfig+0x4e4>)
 8008992:	fba3 2302 	umull	r2, r3, r3, r2
 8008996:	095b      	lsrs	r3, r3, #5
 8008998:	011c      	lsls	r4, r3, #4
 800899a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800899e:	2200      	movs	r2, #0
 80089a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80089a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80089a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80089ac:	4642      	mov	r2, r8
 80089ae:	464b      	mov	r3, r9
 80089b0:	1891      	adds	r1, r2, r2
 80089b2:	61b9      	str	r1, [r7, #24]
 80089b4:	415b      	adcs	r3, r3
 80089b6:	61fb      	str	r3, [r7, #28]
 80089b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089bc:	4641      	mov	r1, r8
 80089be:	1851      	adds	r1, r2, r1
 80089c0:	6139      	str	r1, [r7, #16]
 80089c2:	4649      	mov	r1, r9
 80089c4:	414b      	adcs	r3, r1
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	f04f 0200 	mov.w	r2, #0
 80089cc:	f04f 0300 	mov.w	r3, #0
 80089d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80089d4:	4659      	mov	r1, fp
 80089d6:	00cb      	lsls	r3, r1, #3
 80089d8:	4651      	mov	r1, sl
 80089da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089de:	4651      	mov	r1, sl
 80089e0:	00ca      	lsls	r2, r1, #3
 80089e2:	4610      	mov	r0, r2
 80089e4:	4619      	mov	r1, r3
 80089e6:	4603      	mov	r3, r0
 80089e8:	4642      	mov	r2, r8
 80089ea:	189b      	adds	r3, r3, r2
 80089ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089f0:	464b      	mov	r3, r9
 80089f2:	460a      	mov	r2, r1
 80089f4:	eb42 0303 	adc.w	r3, r2, r3
 80089f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008a08:	f04f 0200 	mov.w	r2, #0
 8008a0c:	f04f 0300 	mov.w	r3, #0
 8008a10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008a14:	4649      	mov	r1, r9
 8008a16:	008b      	lsls	r3, r1, #2
 8008a18:	4641      	mov	r1, r8
 8008a1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a1e:	4641      	mov	r1, r8
 8008a20:	008a      	lsls	r2, r1, #2
 8008a22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008a26:	f7f7 fbdb 	bl	80001e0 <__aeabi_uldivmod>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4b39      	ldr	r3, [pc, #228]	; (8008b14 <UART_SetConfig+0x4e4>)
 8008a30:	fba3 1302 	umull	r1, r3, r3, r2
 8008a34:	095b      	lsrs	r3, r3, #5
 8008a36:	2164      	movs	r1, #100	; 0x64
 8008a38:	fb01 f303 	mul.w	r3, r1, r3
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	011b      	lsls	r3, r3, #4
 8008a40:	3332      	adds	r3, #50	; 0x32
 8008a42:	4a34      	ldr	r2, [pc, #208]	; (8008b14 <UART_SetConfig+0x4e4>)
 8008a44:	fba2 2303 	umull	r2, r3, r2, r3
 8008a48:	095b      	lsrs	r3, r3, #5
 8008a4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a4e:	441c      	add	r4, r3
 8008a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a54:	2200      	movs	r2, #0
 8008a56:	673b      	str	r3, [r7, #112]	; 0x70
 8008a58:	677a      	str	r2, [r7, #116]	; 0x74
 8008a5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008a5e:	4642      	mov	r2, r8
 8008a60:	464b      	mov	r3, r9
 8008a62:	1891      	adds	r1, r2, r2
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	415b      	adcs	r3, r3
 8008a68:	60fb      	str	r3, [r7, #12]
 8008a6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a6e:	4641      	mov	r1, r8
 8008a70:	1851      	adds	r1, r2, r1
 8008a72:	6039      	str	r1, [r7, #0]
 8008a74:	4649      	mov	r1, r9
 8008a76:	414b      	adcs	r3, r1
 8008a78:	607b      	str	r3, [r7, #4]
 8008a7a:	f04f 0200 	mov.w	r2, #0
 8008a7e:	f04f 0300 	mov.w	r3, #0
 8008a82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a86:	4659      	mov	r1, fp
 8008a88:	00cb      	lsls	r3, r1, #3
 8008a8a:	4651      	mov	r1, sl
 8008a8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a90:	4651      	mov	r1, sl
 8008a92:	00ca      	lsls	r2, r1, #3
 8008a94:	4610      	mov	r0, r2
 8008a96:	4619      	mov	r1, r3
 8008a98:	4603      	mov	r3, r0
 8008a9a:	4642      	mov	r2, r8
 8008a9c:	189b      	adds	r3, r3, r2
 8008a9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008aa0:	464b      	mov	r3, r9
 8008aa2:	460a      	mov	r2, r1
 8008aa4:	eb42 0303 	adc.w	r3, r2, r3
 8008aa8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	663b      	str	r3, [r7, #96]	; 0x60
 8008ab4:	667a      	str	r2, [r7, #100]	; 0x64
 8008ab6:	f04f 0200 	mov.w	r2, #0
 8008aba:	f04f 0300 	mov.w	r3, #0
 8008abe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	008b      	lsls	r3, r1, #2
 8008ac6:	4641      	mov	r1, r8
 8008ac8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008acc:	4641      	mov	r1, r8
 8008ace:	008a      	lsls	r2, r1, #2
 8008ad0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008ad4:	f7f7 fb84 	bl	80001e0 <__aeabi_uldivmod>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	4b0d      	ldr	r3, [pc, #52]	; (8008b14 <UART_SetConfig+0x4e4>)
 8008ade:	fba3 1302 	umull	r1, r3, r3, r2
 8008ae2:	095b      	lsrs	r3, r3, #5
 8008ae4:	2164      	movs	r1, #100	; 0x64
 8008ae6:	fb01 f303 	mul.w	r3, r1, r3
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	011b      	lsls	r3, r3, #4
 8008aee:	3332      	adds	r3, #50	; 0x32
 8008af0:	4a08      	ldr	r2, [pc, #32]	; (8008b14 <UART_SetConfig+0x4e4>)
 8008af2:	fba2 2303 	umull	r2, r3, r2, r3
 8008af6:	095b      	lsrs	r3, r3, #5
 8008af8:	f003 020f 	and.w	r2, r3, #15
 8008afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4422      	add	r2, r4
 8008b04:	609a      	str	r2, [r3, #8]
}
 8008b06:	bf00      	nop
 8008b08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b12:	bf00      	nop
 8008b14:	51eb851f 	.word	0x51eb851f

08008b18 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e025      	b.n	8008b76 <HAL_WWDG_Init+0x5e>
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));

#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
  /* Reset Callback pointers */
  if (hwwdg->EwiCallback == NULL)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d102      	bne.n	8008b38 <HAL_WWDG_Init+0x20>
  {
    hwwdg->EwiCallback = HAL_WWDG_EarlyWakeupCallback;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a12      	ldr	r2, [pc, #72]	; (8008b80 <HAL_WWDG_Init+0x68>)
 8008b36:	615a      	str	r2, [r3, #20]
  }

  if (hwwdg->MspInitCallback == NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d102      	bne.n	8008b46 <HAL_WWDG_Init+0x2e>
  {
    hwwdg->MspInitCallback = HAL_WWDG_MspInit;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a10      	ldr	r2, [pc, #64]	; (8008b84 <HAL_WWDG_Init+0x6c>)
 8008b44:	619a      	str	r2, [r3, #24]
  }

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	4798      	blx	r3
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68da      	ldr	r2, [r3, #12]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b5a:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	691a      	ldr	r2, [r3, #16]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	ea42 0103 	orr.w	r1, r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	689a      	ldr	r2, [r3, #8]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	430a      	orrs	r2, r1
 8008b72:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	08008b89 	.word	0x08008b89
 8008b84:	08003141 	.word	0x08003141

08008b88 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <__NVIC_SetPriority>:
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	6039      	str	r1, [r7, #0]
 8008ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	db0a      	blt.n	8008bc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	490c      	ldr	r1, [pc, #48]	; (8008be8 <__NVIC_SetPriority+0x4c>)
 8008bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bba:	0112      	lsls	r2, r2, #4
 8008bbc:	b2d2      	uxtb	r2, r2
 8008bbe:	440b      	add	r3, r1
 8008bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008bc4:	e00a      	b.n	8008bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	4908      	ldr	r1, [pc, #32]	; (8008bec <__NVIC_SetPriority+0x50>)
 8008bcc:	79fb      	ldrb	r3, [r7, #7]
 8008bce:	f003 030f 	and.w	r3, r3, #15
 8008bd2:	3b04      	subs	r3, #4
 8008bd4:	0112      	lsls	r2, r2, #4
 8008bd6:	b2d2      	uxtb	r2, r2
 8008bd8:	440b      	add	r3, r1
 8008bda:	761a      	strb	r2, [r3, #24]
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	e000e100 	.word	0xe000e100
 8008bec:	e000ed00 	.word	0xe000ed00

08008bf0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008bf4:	4b05      	ldr	r3, [pc, #20]	; (8008c0c <SysTick_Handler+0x1c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008bf8:	f002 fcb2 	bl	800b560 <xTaskGetSchedulerState>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d001      	beq.n	8008c06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008c02:	f000 fec1 	bl	8009988 <xPortSysTickHandler>
  }
}
 8008c06:	bf00      	nop
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	e000e010 	.word	0xe000e010

08008c10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c10:	b580      	push	{r7, lr}
 8008c12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008c14:	2100      	movs	r1, #0
 8008c16:	f06f 0004 	mvn.w	r0, #4
 8008c1a:	f7ff ffbf 	bl	8008b9c <__NVIC_SetPriority>
#endif
}
 8008c1e:	bf00      	nop
 8008c20:	bd80      	pop	{r7, pc}
	...

08008c24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c2a:	f3ef 8305 	mrs	r3, IPSR
 8008c2e:	603b      	str	r3, [r7, #0]
  return(result);
 8008c30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d003      	beq.n	8008c3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008c36:	f06f 0305 	mvn.w	r3, #5
 8008c3a:	607b      	str	r3, [r7, #4]
 8008c3c:	e00c      	b.n	8008c58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c3e:	4b0a      	ldr	r3, [pc, #40]	; (8008c68 <osKernelInitialize+0x44>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d105      	bne.n	8008c52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008c46:	4b08      	ldr	r3, [pc, #32]	; (8008c68 <osKernelInitialize+0x44>)
 8008c48:	2201      	movs	r2, #1
 8008c4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	607b      	str	r3, [r7, #4]
 8008c50:	e002      	b.n	8008c58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008c52:	f04f 33ff 	mov.w	r3, #4294967295
 8008c56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c58:	687b      	ldr	r3, [r7, #4]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	20000840 	.word	0x20000840

08008c6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c72:	f3ef 8305 	mrs	r3, IPSR
 8008c76:	603b      	str	r3, [r7, #0]
  return(result);
 8008c78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008c7e:	f06f 0305 	mvn.w	r3, #5
 8008c82:	607b      	str	r3, [r7, #4]
 8008c84:	e010      	b.n	8008ca8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008c86:	4b0b      	ldr	r3, [pc, #44]	; (8008cb4 <osKernelStart+0x48>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d109      	bne.n	8008ca2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008c8e:	f7ff ffbf 	bl	8008c10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008c92:	4b08      	ldr	r3, [pc, #32]	; (8008cb4 <osKernelStart+0x48>)
 8008c94:	2202      	movs	r2, #2
 8008c96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008c98:	f001 fedc 	bl	800aa54 <vTaskStartScheduler>
      stat = osOK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	607b      	str	r3, [r7, #4]
 8008ca0:	e002      	b.n	8008ca8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ca8:	687b      	ldr	r3, [r7, #4]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20000840 	.word	0x20000840

08008cb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08e      	sub	sp, #56	; 0x38
 8008cbc:	af04      	add	r7, sp, #16
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cc8:	f3ef 8305 	mrs	r3, IPSR
 8008ccc:	617b      	str	r3, [r7, #20]
  return(result);
 8008cce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d17f      	bne.n	8008dd4 <osThreadNew+0x11c>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d07c      	beq.n	8008dd4 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8008cda:	2380      	movs	r3, #128	; 0x80
 8008cdc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008cde:	2318      	movs	r3, #24
 8008ce0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d046      	beq.n	8008d80 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d002      	beq.n	8008d00 <osThreadNew+0x48>
        name = attr->name;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d008      	beq.n	8008d26 <osThreadNew+0x6e>
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	2b38      	cmp	r3, #56	; 0x38
 8008d18:	d805      	bhi.n	8008d26 <osThreadNew+0x6e>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f003 0301 	and.w	r3, r3, #1
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <osThreadNew+0x72>
        return (NULL);
 8008d26:	2300      	movs	r3, #0
 8008d28:	e055      	b.n	8008dd6 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	089b      	lsrs	r3, r3, #2
 8008d38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00f      	beq.n	8008d62 <osThreadNew+0xaa>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 8008d4a:	d30a      	bcc.n	8008d62 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d006      	beq.n	8008d62 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d002      	beq.n	8008d62 <osThreadNew+0xaa>
        mem = 1;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	61bb      	str	r3, [r7, #24]
 8008d60:	e010      	b.n	8008d84 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10c      	bne.n	8008d84 <osThreadNew+0xcc>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d108      	bne.n	8008d84 <osThreadNew+0xcc>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d104      	bne.n	8008d84 <osThreadNew+0xcc>
          mem = 0;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	61bb      	str	r3, [r7, #24]
 8008d7e:	e001      	b.n	8008d84 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8008d80:	2300      	movs	r3, #0
 8008d82:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d110      	bne.n	8008dac <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d92:	9202      	str	r2, [sp, #8]
 8008d94:	9301      	str	r3, [sp, #4]
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	6a3a      	ldr	r2, [r7, #32]
 8008d9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f001 fc51 	bl	800a648 <xTaskCreateStatic>
 8008da6:	4603      	mov	r3, r0
 8008da8:	613b      	str	r3, [r7, #16]
 8008daa:	e013      	b.n	8008dd4 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d110      	bne.n	8008dd4 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	f107 0310 	add.w	r3, r7, #16
 8008dba:	9301      	str	r3, [sp, #4]
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f001 fc9e 	bl	800a706 <xTaskCreate>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d001      	beq.n	8008dd4 <osThreadNew+0x11c>
            hTask = NULL;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008dd4:	693b      	ldr	r3, [r7, #16]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3728      	adds	r7, #40	; 0x28
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b084      	sub	sp, #16
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008de6:	f3ef 8305 	mrs	r3, IPSR
 8008dea:	60bb      	str	r3, [r7, #8]
  return(result);
 8008dec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d003      	beq.n	8008dfa <osDelay+0x1c>
    stat = osErrorISR;
 8008df2:	f06f 0305 	mvn.w	r3, #5
 8008df6:	60fb      	str	r3, [r7, #12]
 8008df8:	e007      	b.n	8008e0a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d002      	beq.n	8008e0a <osDelay+0x2c>
      vTaskDelay(ticks);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 fdf1 	bl	800a9ec <vTaskDelay>
    }
  }

  return (stat);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f003 f875 	bl	800bf0c <pvTimerGetTimerID>
 8008e22:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d005      	beq.n	8008e36 <TimerCallback+0x22>
    callb->func (callb->arg);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	6852      	ldr	r2, [r2, #4]
 8008e32:	4610      	mov	r0, r2
 8008e34:	4798      	blx	r3
  }
}
 8008e36:	bf00      	nop
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08c      	sub	sp, #48	; 0x30
 8008e44:	af02      	add	r7, sp, #8
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	607a      	str	r2, [r7, #4]
 8008e4a:	603b      	str	r3, [r7, #0]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008e50:	2300      	movs	r3, #0
 8008e52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e54:	f3ef 8305 	mrs	r3, IPSR
 8008e58:	613b      	str	r3, [r7, #16]
  return(result);
 8008e5a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d163      	bne.n	8008f28 <osTimerNew+0xe8>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d060      	beq.n	8008f28 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8008e66:	2008      	movs	r0, #8
 8008e68:	f000 f92c 	bl	80090c4 <pvPortMalloc>
 8008e6c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d059      	beq.n	8008f28 <osTimerNew+0xe8>
      callb->func = func;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008e80:	7afb      	ldrb	r3, [r7, #11]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d102      	bne.n	8008e8c <osTimerNew+0x4c>
        reload = pdFALSE;
 8008e86:	2300      	movs	r3, #0
 8008e88:	61fb      	str	r3, [r7, #28]
 8008e8a:	e001      	b.n	8008e90 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8008e90:	f04f 33ff 	mov.w	r3, #4294967295
 8008e94:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8008e96:	2300      	movs	r3, #0
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d01c      	beq.n	8008eda <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <osTimerNew+0x6e>
          name = attr->name;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d006      	beq.n	8008ec4 <osTimerNew+0x84>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	2b2b      	cmp	r3, #43	; 0x2b
 8008ebc:	d902      	bls.n	8008ec4 <osTimerNew+0x84>
          mem = 1;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	61bb      	str	r3, [r7, #24]
 8008ec2:	e00c      	b.n	8008ede <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d108      	bne.n	8008ede <osTimerNew+0x9e>
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d104      	bne.n	8008ede <osTimerNew+0x9e>
            mem = 0;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	61bb      	str	r3, [r7, #24]
 8008ed8:	e001      	b.n	8008ede <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d10c      	bne.n	8008efe <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	4b12      	ldr	r3, [pc, #72]	; (8008f34 <osTimerNew+0xf4>)
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	69fa      	ldr	r2, [r7, #28]
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ef6:	f002 fc88 	bl	800b80a <xTimerCreateStatic>
 8008efa:	6238      	str	r0, [r7, #32]
 8008efc:	e00b      	b.n	8008f16 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d108      	bne.n	8008f16 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8008f04:	4b0b      	ldr	r3, [pc, #44]	; (8008f34 <osTimerNew+0xf4>)
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	69fa      	ldr	r2, [r7, #28]
 8008f0c:	2101      	movs	r1, #1
 8008f0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f10:	f002 fc5a 	bl	800b7c8 <xTimerCreate>
 8008f14:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8008f16:	6a3b      	ldr	r3, [r7, #32]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d105      	bne.n	8008f28 <osTimerNew+0xe8>
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d002      	beq.n	8008f28 <osTimerNew+0xe8>
        vPortFree (callb);
 8008f22:	6978      	ldr	r0, [r7, #20]
 8008f24:	f000 f99e 	bl	8009264 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8008f28:	6a3b      	ldr	r3, [r7, #32]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3728      	adds	r7, #40	; 0x28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	08008e15 	.word	0x08008e15

08008f38 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8008f40:	2300      	movs	r3, #0
 8008f42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f44:	f3ef 8305 	mrs	r3, IPSR
 8008f48:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f4a:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d12d      	bne.n	8008fac <osEventFlagsNew+0x74>
    mem = -1;
 8008f50:	f04f 33ff 	mov.w	r3, #4294967295
 8008f54:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d015      	beq.n	8008f88 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d006      	beq.n	8008f72 <osEventFlagsNew+0x3a>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	2b1f      	cmp	r3, #31
 8008f6a:	d902      	bls.n	8008f72 <osEventFlagsNew+0x3a>
        mem = 1;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	613b      	str	r3, [r7, #16]
 8008f70:	e00c      	b.n	8008f8c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d108      	bne.n	8008f8c <osEventFlagsNew+0x54>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d104      	bne.n	8008f8c <osEventFlagsNew+0x54>
          mem = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	613b      	str	r3, [r7, #16]
 8008f86:	e001      	b.n	8008f8c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d106      	bne.n	8008fa0 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 f842 	bl	8009020 <xEventGroupCreateStatic>
 8008f9c:	6178      	str	r0, [r7, #20]
 8008f9e:	e005      	b.n	8008fac <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d102      	bne.n	8008fac <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8008fa6:	f000 f872 	bl	800908e <xEventGroupCreate>
 8008faa:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8008fac:	697b      	ldr	r3, [r7, #20]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
	...

08008fb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	4a07      	ldr	r2, [pc, #28]	; (8008fe4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008fc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	4a06      	ldr	r2, [pc, #24]	; (8008fe8 <vApplicationGetIdleTaskMemory+0x30>)
 8008fce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2280      	movs	r2, #128	; 0x80
 8008fd4:	601a      	str	r2, [r3, #0]
}
 8008fd6:	bf00      	nop
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	20000844 	.word	0x20000844
 8008fe8:	20000a00 	.word	0x20000a00

08008fec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	4a07      	ldr	r2, [pc, #28]	; (8009018 <vApplicationGetTimerTaskMemory+0x2c>)
 8008ffc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	4a06      	ldr	r2, [pc, #24]	; (800901c <vApplicationGetTimerTaskMemory+0x30>)
 8009002:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f44f 7280 	mov.w	r2, #256	; 0x100
 800900a:	601a      	str	r2, [r3, #0]
}
 800900c:	bf00      	nop
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	20000c00 	.word	0x20000c00
 800901c:	20000dbc 	.word	0x20000dbc

08009020 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10a      	bne.n	8009044 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009040:	bf00      	nop
 8009042:	e7fe      	b.n	8009042 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8009044:	2320      	movs	r3, #32
 8009046:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2b20      	cmp	r3, #32
 800904c:	d00a      	beq.n	8009064 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	60fb      	str	r3, [r7, #12]
}
 8009060:	bf00      	nop
 8009062:	e7fe      	b.n	8009062 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00a      	beq.n	8009084 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2200      	movs	r2, #0
 8009072:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	3304      	adds	r3, #4
 8009078:	4618      	mov	r0, r3
 800907a:	f000 fa11 	bl	80094a0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2201      	movs	r2, #1
 8009082:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8009084:	697b      	ldr	r3, [r7, #20]
	}
 8009086:	4618      	mov	r0, r3
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800908e:	b580      	push	{r7, lr}
 8009090:	b082      	sub	sp, #8
 8009092:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8009094:	2020      	movs	r0, #32
 8009096:	f000 f815 	bl	80090c4 <pvPortMalloc>
 800909a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00a      	beq.n	80090b8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	3304      	adds	r3, #4
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 f9f7 	bl	80094a0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80090b8:	687b      	ldr	r3, [r7, #4]
	}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b08a      	sub	sp, #40	; 0x28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80090cc:	2300      	movs	r3, #0
 80090ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80090d0:	f001 fd32 	bl	800ab38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80090d4:	4b5d      	ldr	r3, [pc, #372]	; (800924c <pvPortMalloc+0x188>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80090dc:	f000 f924 	bl	8009328 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80090e0:	4b5b      	ldr	r3, [pc, #364]	; (8009250 <pvPortMalloc+0x18c>)
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4013      	ands	r3, r2
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f040 8093 	bne.w	8009214 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d01d      	beq.n	8009130 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80090f4:	2208      	movs	r2, #8
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4413      	add	r3, r2
 80090fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f003 0307 	and.w	r3, r3, #7
 8009102:	2b00      	cmp	r3, #0
 8009104:	d014      	beq.n	8009130 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f023 0307 	bic.w	r3, r3, #7
 800910c:	3308      	adds	r3, #8
 800910e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f003 0307 	and.w	r3, r3, #7
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00a      	beq.n	8009130 <pvPortMalloc+0x6c>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	617b      	str	r3, [r7, #20]
}
 800912c:	bf00      	nop
 800912e:	e7fe      	b.n	800912e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d06e      	beq.n	8009214 <pvPortMalloc+0x150>
 8009136:	4b47      	ldr	r3, [pc, #284]	; (8009254 <pvPortMalloc+0x190>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	429a      	cmp	r2, r3
 800913e:	d869      	bhi.n	8009214 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009140:	4b45      	ldr	r3, [pc, #276]	; (8009258 <pvPortMalloc+0x194>)
 8009142:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009144:	4b44      	ldr	r3, [pc, #272]	; (8009258 <pvPortMalloc+0x194>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800914a:	e004      	b.n	8009156 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	429a      	cmp	r2, r3
 800915e:	d903      	bls.n	8009168 <pvPortMalloc+0xa4>
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1f1      	bne.n	800914c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009168:	4b38      	ldr	r3, [pc, #224]	; (800924c <pvPortMalloc+0x188>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800916e:	429a      	cmp	r2, r3
 8009170:	d050      	beq.n	8009214 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2208      	movs	r2, #8
 8009178:	4413      	add	r3, r2
 800917a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800917c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	1ad2      	subs	r2, r2, r3
 800918c:	2308      	movs	r3, #8
 800918e:	005b      	lsls	r3, r3, #1
 8009190:	429a      	cmp	r2, r3
 8009192:	d91f      	bls.n	80091d4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4413      	add	r3, r2
 800919a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	f003 0307 	and.w	r3, r3, #7
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00a      	beq.n	80091bc <pvPortMalloc+0xf8>
	__asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	613b      	str	r3, [r7, #16]
}
 80091b8:	bf00      	nop
 80091ba:	e7fe      	b.n	80091ba <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	1ad2      	subs	r2, r2, r3
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80091ce:	69b8      	ldr	r0, [r7, #24]
 80091d0:	f000 f90c 	bl	80093ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80091d4:	4b1f      	ldr	r3, [pc, #124]	; (8009254 <pvPortMalloc+0x190>)
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	4a1d      	ldr	r2, [pc, #116]	; (8009254 <pvPortMalloc+0x190>)
 80091e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80091e2:	4b1c      	ldr	r3, [pc, #112]	; (8009254 <pvPortMalloc+0x190>)
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	4b1d      	ldr	r3, [pc, #116]	; (800925c <pvPortMalloc+0x198>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d203      	bcs.n	80091f6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80091ee:	4b19      	ldr	r3, [pc, #100]	; (8009254 <pvPortMalloc+0x190>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a1a      	ldr	r2, [pc, #104]	; (800925c <pvPortMalloc+0x198>)
 80091f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	4b15      	ldr	r3, [pc, #84]	; (8009250 <pvPortMalloc+0x18c>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	431a      	orrs	r2, r3
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	2200      	movs	r2, #0
 8009208:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800920a:	4b15      	ldr	r3, [pc, #84]	; (8009260 <pvPortMalloc+0x19c>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3301      	adds	r3, #1
 8009210:	4a13      	ldr	r2, [pc, #76]	; (8009260 <pvPortMalloc+0x19c>)
 8009212:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009214:	f001 fcd6 	bl	800abc4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d101      	bne.n	8009222 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800921e:	f7f8 fa43 	bl	80016a8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	f003 0307 	and.w	r3, r3, #7
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00a      	beq.n	8009242 <pvPortMalloc+0x17e>
	__asm volatile
 800922c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009230:	f383 8811 	msr	BASEPRI, r3
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	60fb      	str	r3, [r7, #12]
}
 800923e:	bf00      	nop
 8009240:	e7fe      	b.n	8009240 <pvPortMalloc+0x17c>
	return pvReturn;
 8009242:	69fb      	ldr	r3, [r7, #28]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3728      	adds	r7, #40	; 0x28
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	2000ae04 	.word	0x2000ae04
 8009250:	2000ae18 	.word	0x2000ae18
 8009254:	2000ae08 	.word	0x2000ae08
 8009258:	2000adfc 	.word	0x2000adfc
 800925c:	2000ae0c 	.word	0x2000ae0c
 8009260:	2000ae10 	.word	0x2000ae10

08009264 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d04d      	beq.n	8009312 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009276:	2308      	movs	r3, #8
 8009278:	425b      	negs	r3, r3
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	4413      	add	r3, r2
 800927e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	4b24      	ldr	r3, [pc, #144]	; (800931c <vPortFree+0xb8>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4013      	ands	r3, r2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10a      	bne.n	80092a8 <vPortFree+0x44>
	__asm volatile
 8009292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009296:	f383 8811 	msr	BASEPRI, r3
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	60fb      	str	r3, [r7, #12]
}
 80092a4:	bf00      	nop
 80092a6:	e7fe      	b.n	80092a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00a      	beq.n	80092c6 <vPortFree+0x62>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	60bb      	str	r3, [r7, #8]
}
 80092c2:	bf00      	nop
 80092c4:	e7fe      	b.n	80092c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	4b14      	ldr	r3, [pc, #80]	; (800931c <vPortFree+0xb8>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4013      	ands	r3, r2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d01e      	beq.n	8009312 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d11a      	bne.n	8009312 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	4b0e      	ldr	r3, [pc, #56]	; (800931c <vPortFree+0xb8>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	43db      	mvns	r3, r3
 80092e6:	401a      	ands	r2, r3
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80092ec:	f001 fc24 	bl	800ab38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	4b0a      	ldr	r3, [pc, #40]	; (8009320 <vPortFree+0xbc>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4413      	add	r3, r2
 80092fa:	4a09      	ldr	r2, [pc, #36]	; (8009320 <vPortFree+0xbc>)
 80092fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80092fe:	6938      	ldr	r0, [r7, #16]
 8009300:	f000 f874 	bl	80093ec <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009304:	4b07      	ldr	r3, [pc, #28]	; (8009324 <vPortFree+0xc0>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	3301      	adds	r3, #1
 800930a:	4a06      	ldr	r2, [pc, #24]	; (8009324 <vPortFree+0xc0>)
 800930c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800930e:	f001 fc59 	bl	800abc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009312:	bf00      	nop
 8009314:	3718      	adds	r7, #24
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	2000ae18 	.word	0x2000ae18
 8009320:	2000ae08 	.word	0x2000ae08
 8009324:	2000ae14 	.word	0x2000ae14

08009328 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800932e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8009332:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009334:	4b27      	ldr	r3, [pc, #156]	; (80093d4 <prvHeapInit+0xac>)
 8009336:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f003 0307 	and.w	r3, r3, #7
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00c      	beq.n	800935c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3307      	adds	r3, #7
 8009346:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f023 0307 	bic.w	r3, r3, #7
 800934e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	4a1f      	ldr	r2, [pc, #124]	; (80093d4 <prvHeapInit+0xac>)
 8009358:	4413      	add	r3, r2
 800935a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009360:	4a1d      	ldr	r2, [pc, #116]	; (80093d8 <prvHeapInit+0xb0>)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009366:	4b1c      	ldr	r3, [pc, #112]	; (80093d8 <prvHeapInit+0xb0>)
 8009368:	2200      	movs	r2, #0
 800936a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	4413      	add	r3, r2
 8009372:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009374:	2208      	movs	r2, #8
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	1a9b      	subs	r3, r3, r2
 800937a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 0307 	bic.w	r3, r3, #7
 8009382:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	4a15      	ldr	r2, [pc, #84]	; (80093dc <prvHeapInit+0xb4>)
 8009388:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800938a:	4b14      	ldr	r3, [pc, #80]	; (80093dc <prvHeapInit+0xb4>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2200      	movs	r2, #0
 8009390:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009392:	4b12      	ldr	r3, [pc, #72]	; (80093dc <prvHeapInit+0xb4>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2200      	movs	r2, #0
 8009398:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	1ad2      	subs	r2, r2, r3
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093a8:	4b0c      	ldr	r3, [pc, #48]	; (80093dc <prvHeapInit+0xb4>)
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	4a0a      	ldr	r2, [pc, #40]	; (80093e0 <prvHeapInit+0xb8>)
 80093b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	4a09      	ldr	r2, [pc, #36]	; (80093e4 <prvHeapInit+0xbc>)
 80093be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093c0:	4b09      	ldr	r3, [pc, #36]	; (80093e8 <prvHeapInit+0xc0>)
 80093c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093c6:	601a      	str	r2, [r3, #0]
}
 80093c8:	bf00      	nop
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	200011bc 	.word	0x200011bc
 80093d8:	2000adfc 	.word	0x2000adfc
 80093dc:	2000ae04 	.word	0x2000ae04
 80093e0:	2000ae0c 	.word	0x2000ae0c
 80093e4:	2000ae08 	.word	0x2000ae08
 80093e8:	2000ae18 	.word	0x2000ae18

080093ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093f4:	4b28      	ldr	r3, [pc, #160]	; (8009498 <prvInsertBlockIntoFreeList+0xac>)
 80093f6:	60fb      	str	r3, [r7, #12]
 80093f8:	e002      	b.n	8009400 <prvInsertBlockIntoFreeList+0x14>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	429a      	cmp	r2, r3
 8009408:	d8f7      	bhi.n	80093fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	4413      	add	r3, r2
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	429a      	cmp	r2, r3
 800941a:	d108      	bne.n	800942e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	441a      	add	r2, r3
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	441a      	add	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	429a      	cmp	r2, r3
 8009440:	d118      	bne.n	8009474 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	4b15      	ldr	r3, [pc, #84]	; (800949c <prvInsertBlockIntoFreeList+0xb0>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	429a      	cmp	r2, r3
 800944c:	d00d      	beq.n	800946a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685a      	ldr	r2, [r3, #4]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	441a      	add	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	601a      	str	r2, [r3, #0]
 8009468:	e008      	b.n	800947c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800946a:	4b0c      	ldr	r3, [pc, #48]	; (800949c <prvInsertBlockIntoFreeList+0xb0>)
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	e003      	b.n	800947c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	429a      	cmp	r2, r3
 8009482:	d002      	beq.n	800948a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800948a:	bf00      	nop
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	2000adfc 	.word	0x2000adfc
 800949c:	2000ae04 	.word	0x2000ae04

080094a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f103 0208 	add.w	r2, r3, #8
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f04f 32ff 	mov.w	r2, #4294967295
 80094b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f103 0208 	add.w	r2, r3, #8
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f103 0208 	add.w	r2, r3, #8
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094ee:	bf00      	nop
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094fa:	b480      	push	{r7}
 80094fc:	b085      	sub	sp, #20
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	689a      	ldr	r2, [r3, #8]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	1c5a      	adds	r2, r3, #1
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	601a      	str	r2, [r3, #0]
}
 8009536:	bf00      	nop
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009542:	b480      	push	{r7}
 8009544:	b085      	sub	sp, #20
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009558:	d103      	bne.n	8009562 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	e00c      	b.n	800957c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	3308      	adds	r3, #8
 8009566:	60fb      	str	r3, [r7, #12]
 8009568:	e002      	b.n	8009570 <vListInsert+0x2e>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	60fb      	str	r3, [r7, #12]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	429a      	cmp	r2, r3
 800957a:	d2f6      	bcs.n	800956a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	685a      	ldr	r2, [r3, #4]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	68fa      	ldr	r2, [r7, #12]
 8009590:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	683a      	ldr	r2, [r7, #0]
 8009596:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	1c5a      	adds	r2, r3, #1
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	601a      	str	r2, [r3, #0]
}
 80095a8:	bf00      	nop
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	6892      	ldr	r2, [r2, #8]
 80095ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	6852      	ldr	r2, [r2, #4]
 80095d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d103      	bne.n	80095e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	689a      	ldr	r2, [r3, #8]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	1e5a      	subs	r2, r3, #1
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3714      	adds	r7, #20
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	3b04      	subs	r3, #4
 8009618:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	3b04      	subs	r3, #4
 8009626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	f023 0201 	bic.w	r2, r3, #1
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	3b04      	subs	r3, #4
 8009636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009638:	4a0c      	ldr	r2, [pc, #48]	; (800966c <pxPortInitialiseStack+0x64>)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3b14      	subs	r3, #20
 8009642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	3b04      	subs	r3, #4
 800964e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f06f 0202 	mvn.w	r2, #2
 8009656:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3b20      	subs	r3, #32
 800965c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800965e:	68fb      	ldr	r3, [r7, #12]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	08009671 	.word	0x08009671

08009670 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009676:	2300      	movs	r3, #0
 8009678:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800967a:	4b12      	ldr	r3, [pc, #72]	; (80096c4 <prvTaskExitError+0x54>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009682:	d00a      	beq.n	800969a <prvTaskExitError+0x2a>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	60fb      	str	r3, [r7, #12]
}
 8009696:	bf00      	nop
 8009698:	e7fe      	b.n	8009698 <prvTaskExitError+0x28>
	__asm volatile
 800969a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969e:	f383 8811 	msr	BASEPRI, r3
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	60bb      	str	r3, [r7, #8]
}
 80096ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096ae:	bf00      	nop
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d0fc      	beq.n	80096b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096b6:	bf00      	nop
 80096b8:	bf00      	nop
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr
 80096c4:	2000000c 	.word	0x2000000c
	...

080096d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096d0:	4b07      	ldr	r3, [pc, #28]	; (80096f0 <pxCurrentTCBConst2>)
 80096d2:	6819      	ldr	r1, [r3, #0]
 80096d4:	6808      	ldr	r0, [r1, #0]
 80096d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096da:	f380 8809 	msr	PSP, r0
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	f04f 0000 	mov.w	r0, #0
 80096e6:	f380 8811 	msr	BASEPRI, r0
 80096ea:	4770      	bx	lr
 80096ec:	f3af 8000 	nop.w

080096f0 <pxCurrentTCBConst2>:
 80096f0:	2000ae70 	.word	0x2000ae70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096f4:	bf00      	nop
 80096f6:	bf00      	nop

080096f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096f8:	4808      	ldr	r0, [pc, #32]	; (800971c <prvPortStartFirstTask+0x24>)
 80096fa:	6800      	ldr	r0, [r0, #0]
 80096fc:	6800      	ldr	r0, [r0, #0]
 80096fe:	f380 8808 	msr	MSP, r0
 8009702:	f04f 0000 	mov.w	r0, #0
 8009706:	f380 8814 	msr	CONTROL, r0
 800970a:	b662      	cpsie	i
 800970c:	b661      	cpsie	f
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	df00      	svc	0
 8009718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800971a:	bf00      	nop
 800971c:	e000ed08 	.word	0xe000ed08

08009720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009726:	4b46      	ldr	r3, [pc, #280]	; (8009840 <xPortStartScheduler+0x120>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a46      	ldr	r2, [pc, #280]	; (8009844 <xPortStartScheduler+0x124>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d10a      	bne.n	8009746 <xPortStartScheduler+0x26>
	__asm volatile
 8009730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009734:	f383 8811 	msr	BASEPRI, r3
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	613b      	str	r3, [r7, #16]
}
 8009742:	bf00      	nop
 8009744:	e7fe      	b.n	8009744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009746:	4b3e      	ldr	r3, [pc, #248]	; (8009840 <xPortStartScheduler+0x120>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a3f      	ldr	r2, [pc, #252]	; (8009848 <xPortStartScheduler+0x128>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d10a      	bne.n	8009766 <xPortStartScheduler+0x46>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	60fb      	str	r3, [r7, #12]
}
 8009762:	bf00      	nop
 8009764:	e7fe      	b.n	8009764 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009766:	4b39      	ldr	r3, [pc, #228]	; (800984c <xPortStartScheduler+0x12c>)
 8009768:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	b2db      	uxtb	r3, r3
 8009770:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	22ff      	movs	r2, #255	; 0xff
 8009776:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	b2db      	uxtb	r3, r3
 800977e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	b2db      	uxtb	r3, r3
 8009784:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009788:	b2da      	uxtb	r2, r3
 800978a:	4b31      	ldr	r3, [pc, #196]	; (8009850 <xPortStartScheduler+0x130>)
 800978c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800978e:	4b31      	ldr	r3, [pc, #196]	; (8009854 <xPortStartScheduler+0x134>)
 8009790:	2207      	movs	r2, #7
 8009792:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009794:	e009      	b.n	80097aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009796:	4b2f      	ldr	r3, [pc, #188]	; (8009854 <xPortStartScheduler+0x134>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3b01      	subs	r3, #1
 800979c:	4a2d      	ldr	r2, [pc, #180]	; (8009854 <xPortStartScheduler+0x134>)
 800979e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097a0:	78fb      	ldrb	r3, [r7, #3]
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	005b      	lsls	r3, r3, #1
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097aa:	78fb      	ldrb	r3, [r7, #3]
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097b2:	2b80      	cmp	r3, #128	; 0x80
 80097b4:	d0ef      	beq.n	8009796 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097b6:	4b27      	ldr	r3, [pc, #156]	; (8009854 <xPortStartScheduler+0x134>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f1c3 0307 	rsb	r3, r3, #7
 80097be:	2b04      	cmp	r3, #4
 80097c0:	d00a      	beq.n	80097d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	60bb      	str	r3, [r7, #8]
}
 80097d4:	bf00      	nop
 80097d6:	e7fe      	b.n	80097d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097d8:	4b1e      	ldr	r3, [pc, #120]	; (8009854 <xPortStartScheduler+0x134>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	021b      	lsls	r3, r3, #8
 80097de:	4a1d      	ldr	r2, [pc, #116]	; (8009854 <xPortStartScheduler+0x134>)
 80097e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097e2:	4b1c      	ldr	r3, [pc, #112]	; (8009854 <xPortStartScheduler+0x134>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097ea:	4a1a      	ldr	r2, [pc, #104]	; (8009854 <xPortStartScheduler+0x134>)
 80097ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097f6:	4b18      	ldr	r3, [pc, #96]	; (8009858 <xPortStartScheduler+0x138>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a17      	ldr	r2, [pc, #92]	; (8009858 <xPortStartScheduler+0x138>)
 80097fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009800:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009802:	4b15      	ldr	r3, [pc, #84]	; (8009858 <xPortStartScheduler+0x138>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a14      	ldr	r2, [pc, #80]	; (8009858 <xPortStartScheduler+0x138>)
 8009808:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800980c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800980e:	f000 f9a9 	bl	8009b64 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009812:	4b12      	ldr	r3, [pc, #72]	; (800985c <xPortStartScheduler+0x13c>)
 8009814:	2200      	movs	r2, #0
 8009816:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009818:	f000 f9e0 	bl	8009bdc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800981c:	4b10      	ldr	r3, [pc, #64]	; (8009860 <xPortStartScheduler+0x140>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a0f      	ldr	r2, [pc, #60]	; (8009860 <xPortStartScheduler+0x140>)
 8009822:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009826:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009828:	f7ff ff66 	bl	80096f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800982c:	f001 fb62 	bl	800aef4 <vTaskSwitchContext>
	prvTaskExitError();
 8009830:	f7ff ff1e 	bl	8009670 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3718      	adds	r7, #24
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	e000ed00 	.word	0xe000ed00
 8009844:	410fc271 	.word	0x410fc271
 8009848:	410fc270 	.word	0x410fc270
 800984c:	e000e400 	.word	0xe000e400
 8009850:	2000ae28 	.word	0x2000ae28
 8009854:	2000ae2c 	.word	0x2000ae2c
 8009858:	e000ed20 	.word	0xe000ed20
 800985c:	2000000c 	.word	0x2000000c
 8009860:	e000ef34 	.word	0xe000ef34

08009864 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
	__asm volatile
 800986a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986e:	f383 8811 	msr	BASEPRI, r3
 8009872:	f3bf 8f6f 	isb	sy
 8009876:	f3bf 8f4f 	dsb	sy
 800987a:	607b      	str	r3, [r7, #4]
}
 800987c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800987e:	4b0f      	ldr	r3, [pc, #60]	; (80098bc <vPortEnterCritical+0x58>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	3301      	adds	r3, #1
 8009884:	4a0d      	ldr	r2, [pc, #52]	; (80098bc <vPortEnterCritical+0x58>)
 8009886:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009888:	4b0c      	ldr	r3, [pc, #48]	; (80098bc <vPortEnterCritical+0x58>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d10f      	bne.n	80098b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009890:	4b0b      	ldr	r3, [pc, #44]	; (80098c0 <vPortEnterCritical+0x5c>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	b2db      	uxtb	r3, r3
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00a      	beq.n	80098b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800989a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989e:	f383 8811 	msr	BASEPRI, r3
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	f3bf 8f4f 	dsb	sy
 80098aa:	603b      	str	r3, [r7, #0]
}
 80098ac:	bf00      	nop
 80098ae:	e7fe      	b.n	80098ae <vPortEnterCritical+0x4a>
	}
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr
 80098bc:	2000000c 	.word	0x2000000c
 80098c0:	e000ed04 	.word	0xe000ed04

080098c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098ca:	4b12      	ldr	r3, [pc, #72]	; (8009914 <vPortExitCritical+0x50>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10a      	bne.n	80098e8 <vPortExitCritical+0x24>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	607b      	str	r3, [r7, #4]
}
 80098e4:	bf00      	nop
 80098e6:	e7fe      	b.n	80098e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80098e8:	4b0a      	ldr	r3, [pc, #40]	; (8009914 <vPortExitCritical+0x50>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3b01      	subs	r3, #1
 80098ee:	4a09      	ldr	r2, [pc, #36]	; (8009914 <vPortExitCritical+0x50>)
 80098f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098f2:	4b08      	ldr	r3, [pc, #32]	; (8009914 <vPortExitCritical+0x50>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d105      	bne.n	8009906 <vPortExitCritical+0x42>
 80098fa:	2300      	movs	r3, #0
 80098fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009904:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009906:	bf00      	nop
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	2000000c 	.word	0x2000000c
	...

08009920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009920:	f3ef 8009 	mrs	r0, PSP
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	4b15      	ldr	r3, [pc, #84]	; (8009980 <pxCurrentTCBConst>)
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	f01e 0f10 	tst.w	lr, #16
 8009930:	bf08      	it	eq
 8009932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993a:	6010      	str	r0, [r2, #0]
 800993c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009944:	f380 8811 	msr	BASEPRI, r0
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f001 fad0 	bl	800aef4 <vTaskSwitchContext>
 8009954:	f04f 0000 	mov.w	r0, #0
 8009958:	f380 8811 	msr	BASEPRI, r0
 800995c:	bc09      	pop	{r0, r3}
 800995e:	6819      	ldr	r1, [r3, #0]
 8009960:	6808      	ldr	r0, [r1, #0]
 8009962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009966:	f01e 0f10 	tst.w	lr, #16
 800996a:	bf08      	it	eq
 800996c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009970:	f380 8809 	msr	PSP, r0
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	f3af 8000 	nop.w

08009980 <pxCurrentTCBConst>:
 8009980:	2000ae70 	.word	0x2000ae70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop

08009988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	607b      	str	r3, [r7, #4]
}
 80099a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099a2:	f001 f9e5 	bl	800ad70 <xTaskIncrementTick>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d003      	beq.n	80099b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099ac:	4b06      	ldr	r3, [pc, #24]	; (80099c8 <xPortSysTickHandler+0x40>)
 80099ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	2300      	movs	r3, #0
 80099b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	f383 8811 	msr	BASEPRI, r3
}
 80099be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099c0:	bf00      	nop
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	e000ed04 	.word	0xe000ed04

080099cc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b088      	sub	sp, #32
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 80099d4:	4b5d      	ldr	r3, [pc, #372]	; (8009b4c <vPortSuppressTicksAndSleep+0x180>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d902      	bls.n	80099e4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 80099de:	4b5b      	ldr	r3, [pc, #364]	; (8009b4c <vPortSuppressTicksAndSleep+0x180>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80099e4:	4b5a      	ldr	r3, [pc, #360]	; (8009b50 <vPortSuppressTicksAndSleep+0x184>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a59      	ldr	r2, [pc, #356]	; (8009b50 <vPortSuppressTicksAndSleep+0x184>)
 80099ea:	f023 0301 	bic.w	r3, r3, #1
 80099ee:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80099f0:	4b58      	ldr	r3, [pc, #352]	; (8009b54 <vPortSuppressTicksAndSleep+0x188>)
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	4957      	ldr	r1, [pc, #348]	; (8009b58 <vPortSuppressTicksAndSleep+0x18c>)
 80099fa:	6809      	ldr	r1, [r1, #0]
 80099fc:	fb01 f303 	mul.w	r3, r1, r3
 8009a00:	4413      	add	r3, r2
 8009a02:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8009a04:	4b55      	ldr	r3, [pc, #340]	; (8009b5c <vPortSuppressTicksAndSleep+0x190>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	69fa      	ldr	r2, [r7, #28]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d904      	bls.n	8009a18 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8009a0e:	4b53      	ldr	r3, [pc, #332]	; (8009b5c <vPortSuppressTicksAndSleep+0x190>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	69fa      	ldr	r2, [r7, #28]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8009a18:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8009a1a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8009a1e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8009a22:	f001 fcab 	bl	800b37c <eTaskConfirmSleepModeStatus>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d110      	bne.n	8009a4e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8009a2c:	4b49      	ldr	r3, [pc, #292]	; (8009b54 <vPortSuppressTicksAndSleep+0x188>)
 8009a2e:	4a4c      	ldr	r2, [pc, #304]	; (8009b60 <vPortSuppressTicksAndSleep+0x194>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8009a34:	4b46      	ldr	r3, [pc, #280]	; (8009b50 <vPortSuppressTicksAndSleep+0x184>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a45      	ldr	r2, [pc, #276]	; (8009b50 <vPortSuppressTicksAndSleep+0x184>)
 8009a3a:	f043 0301 	orr.w	r3, r3, #1
 8009a3e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8009a40:	4b45      	ldr	r3, [pc, #276]	; (8009b58 <vPortSuppressTicksAndSleep+0x18c>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a46      	ldr	r2, [pc, #280]	; (8009b60 <vPortSuppressTicksAndSleep+0x194>)
 8009a46:	3b01      	subs	r3, #1
 8009a48:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8009a4a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8009a4c:	e079      	b.n	8009b42 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8009a4e:	4a44      	ldr	r2, [pc, #272]	; (8009b60 <vPortSuppressTicksAndSleep+0x194>)
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a54:	4b3f      	ldr	r3, [pc, #252]	; (8009b54 <vPortSuppressTicksAndSleep+0x188>)
 8009a56:	2200      	movs	r2, #0
 8009a58:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8009a5a:	4b3d      	ldr	r3, [pc, #244]	; (8009b50 <vPortSuppressTicksAndSleep+0x184>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a3c      	ldr	r2, [pc, #240]	; (8009b50 <vPortSuppressTicksAndSleep+0x184>)
 8009a60:	f043 0301 	orr.w	r3, r3, #1
 8009a64:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	613b      	str	r3, [r7, #16]
 8009a6e:	6938      	ldr	r0, [r7, #16]
 8009a70:	f7f7 fe28 	bl	80016c4 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d004      	beq.n	8009a84 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8009a7a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8009a7e:	bf30      	wfi
				__asm volatile( "isb" );
 8009a80:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f7f7 fe27 	bl	80016d8 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8009a8a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8009a8c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8009a90:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8009a94:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8009a96:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8009a9a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8009a9e:	4b2c      	ldr	r3, [pc, #176]	; (8009b50 <vPortSuppressTicksAndSleep+0x184>)
 8009aa0:	2206      	movs	r2, #6
 8009aa2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8009aa4:	4b2a      	ldr	r3, [pc, #168]	; (8009b50 <vPortSuppressTicksAndSleep+0x184>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d01d      	beq.n	8009aec <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8009ab0:	4b29      	ldr	r3, [pc, #164]	; (8009b58 <vPortSuppressTicksAndSleep+0x18c>)
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	4b27      	ldr	r3, [pc, #156]	; (8009b54 <vPortSuppressTicksAndSleep+0x188>)
 8009ab6:	6819      	ldr	r1, [r3, #0]
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	1acb      	subs	r3, r1, r3
 8009abc:	4413      	add	r3, r2
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8009ac2:	4b26      	ldr	r3, [pc, #152]	; (8009b5c <vPortSuppressTicksAndSleep+0x190>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d304      	bcc.n	8009ad6 <vPortSuppressTicksAndSleep+0x10a>
 8009acc:	4b22      	ldr	r3, [pc, #136]	; (8009b58 <vPortSuppressTicksAndSleep+0x18c>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	697a      	ldr	r2, [r7, #20]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d903      	bls.n	8009ade <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8009ad6:	4b20      	ldr	r3, [pc, #128]	; (8009b58 <vPortSuppressTicksAndSleep+0x18c>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8009ade:	4a20      	ldr	r2, [pc, #128]	; (8009b60 <vPortSuppressTicksAndSleep+0x194>)
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	61bb      	str	r3, [r7, #24]
 8009aea:	e018      	b.n	8009b1e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8009aec:	4b1a      	ldr	r3, [pc, #104]	; (8009b58 <vPortSuppressTicksAndSleep+0x18c>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	fb03 f202 	mul.w	r2, r3, r2
 8009af6:	4b17      	ldr	r3, [pc, #92]	; (8009b54 <vPortSuppressTicksAndSleep+0x188>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8009afe:	4b16      	ldr	r3, [pc, #88]	; (8009b58 <vPortSuppressTicksAndSleep+0x18c>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b08:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	4a12      	ldr	r2, [pc, #72]	; (8009b58 <vPortSuppressTicksAndSleep+0x18c>)
 8009b10:	6812      	ldr	r2, [r2, #0]
 8009b12:	fb03 f202 	mul.w	r2, r3, r2
 8009b16:	4912      	ldr	r1, [pc, #72]	; (8009b60 <vPortSuppressTicksAndSleep+0x194>)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b1e:	4b0d      	ldr	r3, [pc, #52]	; (8009b54 <vPortSuppressTicksAndSleep+0x188>)
 8009b20:	2200      	movs	r2, #0
 8009b22:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8009b24:	4b0a      	ldr	r3, [pc, #40]	; (8009b50 <vPortSuppressTicksAndSleep+0x184>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a09      	ldr	r2, [pc, #36]	; (8009b50 <vPortSuppressTicksAndSleep+0x184>)
 8009b2a:	f043 0301 	orr.w	r3, r3, #1
 8009b2e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8009b30:	69b8      	ldr	r0, [r7, #24]
 8009b32:	f001 f8f5 	bl	800ad20 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8009b36:	4b08      	ldr	r3, [pc, #32]	; (8009b58 <vPortSuppressTicksAndSleep+0x18c>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a09      	ldr	r2, [pc, #36]	; (8009b60 <vPortSuppressTicksAndSleep+0x194>)
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8009b40:	b662      	cpsie	i
	}
 8009b42:	bf00      	nop
 8009b44:	3720      	adds	r7, #32
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	2000ae20 	.word	0x2000ae20
 8009b50:	e000e010 	.word	0xe000e010
 8009b54:	e000e018 	.word	0xe000e018
 8009b58:	2000ae1c 	.word	0x2000ae1c
 8009b5c:	2000ae24 	.word	0x2000ae24
 8009b60:	e000e014 	.word	0xe000e014

08009b64 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b64:	b480      	push	{r7}
 8009b66:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8009b68:	4b14      	ldr	r3, [pc, #80]	; (8009bbc <vPortSetupTimerInterrupt+0x58>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a14      	ldr	r2, [pc, #80]	; (8009bc0 <vPortSetupTimerInterrupt+0x5c>)
 8009b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b72:	099b      	lsrs	r3, r3, #6
 8009b74:	4a13      	ldr	r2, [pc, #76]	; (8009bc4 <vPortSetupTimerInterrupt+0x60>)
 8009b76:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8009b78:	4b12      	ldr	r3, [pc, #72]	; (8009bc4 <vPortSetupTimerInterrupt+0x60>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8009b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b84:	4a10      	ldr	r2, [pc, #64]	; (8009bc8 <vPortSetupTimerInterrupt+0x64>)
 8009b86:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8009b88:	4b10      	ldr	r3, [pc, #64]	; (8009bcc <vPortSetupTimerInterrupt+0x68>)
 8009b8a:	222d      	movs	r2, #45	; 0x2d
 8009b8c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b8e:	4b10      	ldr	r3, [pc, #64]	; (8009bd0 <vPortSetupTimerInterrupt+0x6c>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b94:	4b0f      	ldr	r3, [pc, #60]	; (8009bd4 <vPortSetupTimerInterrupt+0x70>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b9a:	4b08      	ldr	r3, [pc, #32]	; (8009bbc <vPortSetupTimerInterrupt+0x58>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a08      	ldr	r2, [pc, #32]	; (8009bc0 <vPortSetupTimerInterrupt+0x5c>)
 8009ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba4:	099b      	lsrs	r3, r3, #6
 8009ba6:	4a0c      	ldr	r2, [pc, #48]	; (8009bd8 <vPortSetupTimerInterrupt+0x74>)
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bac:	4b08      	ldr	r3, [pc, #32]	; (8009bd0 <vPortSetupTimerInterrupt+0x6c>)
 8009bae:	2207      	movs	r2, #7
 8009bb0:	601a      	str	r2, [r3, #0]
}
 8009bb2:	bf00      	nop
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	20000000 	.word	0x20000000
 8009bc0:	10624dd3 	.word	0x10624dd3
 8009bc4:	2000ae1c 	.word	0x2000ae1c
 8009bc8:	2000ae20 	.word	0x2000ae20
 8009bcc:	2000ae24 	.word	0x2000ae24
 8009bd0:	e000e010 	.word	0xe000e010
 8009bd4:	e000e018 	.word	0xe000e018
 8009bd8:	e000e014 	.word	0xe000e014

08009bdc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009bdc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009bec <vPortEnableVFP+0x10>
 8009be0:	6801      	ldr	r1, [r0, #0]
 8009be2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009be6:	6001      	str	r1, [r0, #0]
 8009be8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009bea:	bf00      	nop
 8009bec:	e000ed88 	.word	0xe000ed88

08009bf0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bf6:	f3ef 8305 	mrs	r3, IPSR
 8009bfa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2b0f      	cmp	r3, #15
 8009c00:	d914      	bls.n	8009c2c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c02:	4a17      	ldr	r2, [pc, #92]	; (8009c60 <vPortValidateInterruptPriority+0x70>)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	4413      	add	r3, r2
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c0c:	4b15      	ldr	r3, [pc, #84]	; (8009c64 <vPortValidateInterruptPriority+0x74>)
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	7afa      	ldrb	r2, [r7, #11]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d20a      	bcs.n	8009c2c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	607b      	str	r3, [r7, #4]
}
 8009c28:	bf00      	nop
 8009c2a:	e7fe      	b.n	8009c2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c2c:	4b0e      	ldr	r3, [pc, #56]	; (8009c68 <vPortValidateInterruptPriority+0x78>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c34:	4b0d      	ldr	r3, [pc, #52]	; (8009c6c <vPortValidateInterruptPriority+0x7c>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d90a      	bls.n	8009c52 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	603b      	str	r3, [r7, #0]
}
 8009c4e:	bf00      	nop
 8009c50:	e7fe      	b.n	8009c50 <vPortValidateInterruptPriority+0x60>
	}
 8009c52:	bf00      	nop
 8009c54:	3714      	adds	r7, #20
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	e000e3f0 	.word	0xe000e3f0
 8009c64:	2000ae28 	.word	0x2000ae28
 8009c68:	e000ed0c 	.word	0xe000ed0c
 8009c6c:	2000ae2c 	.word	0x2000ae2c

08009c70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10a      	bne.n	8009c9a <xQueueGenericReset+0x2a>
	__asm volatile
 8009c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c88:	f383 8811 	msr	BASEPRI, r3
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	60bb      	str	r3, [r7, #8]
}
 8009c96:	bf00      	nop
 8009c98:	e7fe      	b.n	8009c98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c9a:	f7ff fde3 	bl	8009864 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca6:	68f9      	ldr	r1, [r7, #12]
 8009ca8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009caa:	fb01 f303 	mul.w	r3, r1, r3
 8009cae:	441a      	add	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	68f9      	ldr	r1, [r7, #12]
 8009cce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009cd0:	fb01 f303 	mul.w	r3, r1, r3
 8009cd4:	441a      	add	r2, r3
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	22ff      	movs	r2, #255	; 0xff
 8009cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	22ff      	movs	r2, #255	; 0xff
 8009ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d114      	bne.n	8009d1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d01a      	beq.n	8009d2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	3310      	adds	r3, #16
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f001 fa01 	bl	800b104 <xTaskRemoveFromEventList>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d012      	beq.n	8009d2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d08:	4b0c      	ldr	r3, [pc, #48]	; (8009d3c <xQueueGenericReset+0xcc>)
 8009d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	e009      	b.n	8009d2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	3310      	adds	r3, #16
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7ff fbbe 	bl	80094a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	3324      	adds	r3, #36	; 0x24
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7ff fbb9 	bl	80094a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d2e:	f7ff fdc9 	bl	80098c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d32:	2301      	movs	r3, #1
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	e000ed04 	.word	0xe000ed04

08009d40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b08e      	sub	sp, #56	; 0x38
 8009d44:	af02      	add	r7, sp, #8
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
 8009d4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10a      	bne.n	8009d6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d66:	bf00      	nop
 8009d68:	e7fe      	b.n	8009d68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10a      	bne.n	8009d86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d82:	bf00      	nop
 8009d84:	e7fe      	b.n	8009d84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d002      	beq.n	8009d92 <xQueueGenericCreateStatic+0x52>
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <xQueueGenericCreateStatic+0x56>
 8009d92:	2301      	movs	r3, #1
 8009d94:	e000      	b.n	8009d98 <xQueueGenericCreateStatic+0x58>
 8009d96:	2300      	movs	r3, #0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10a      	bne.n	8009db2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	623b      	str	r3, [r7, #32]
}
 8009dae:	bf00      	nop
 8009db0:	e7fe      	b.n	8009db0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d102      	bne.n	8009dbe <xQueueGenericCreateStatic+0x7e>
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d101      	bne.n	8009dc2 <xQueueGenericCreateStatic+0x82>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e000      	b.n	8009dc4 <xQueueGenericCreateStatic+0x84>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10a      	bne.n	8009dde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	61fb      	str	r3, [r7, #28]
}
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009dde:	2350      	movs	r3, #80	; 0x50
 8009de0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	2b50      	cmp	r3, #80	; 0x50
 8009de6:	d00a      	beq.n	8009dfe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	61bb      	str	r3, [r7, #24]
}
 8009dfa:	bf00      	nop
 8009dfc:	e7fe      	b.n	8009dfc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009dfe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00d      	beq.n	8009e26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	68b9      	ldr	r1, [r7, #8]
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f000 f805 	bl	8009e30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3730      	adds	r7, #48	; 0x30
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	607a      	str	r2, [r7, #4]
 8009e3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d103      	bne.n	8009e4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	69ba      	ldr	r2, [r7, #24]
 8009e48:	601a      	str	r2, [r3, #0]
 8009e4a:	e002      	b.n	8009e52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009e5e:	2101      	movs	r1, #1
 8009e60:	69b8      	ldr	r0, [r7, #24]
 8009e62:	f7ff ff05 	bl	8009c70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	78fa      	ldrb	r2, [r7, #3]
 8009e6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009e6e:	bf00      	nop
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
	...

08009e78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b08e      	sub	sp, #56	; 0x38
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
 8009e84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e86:	2300      	movs	r3, #0
 8009e88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10a      	bne.n	8009eaa <xQueueGenericSend+0x32>
	__asm volatile
 8009e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ea6:	bf00      	nop
 8009ea8:	e7fe      	b.n	8009ea8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d103      	bne.n	8009eb8 <xQueueGenericSend+0x40>
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d101      	bne.n	8009ebc <xQueueGenericSend+0x44>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e000      	b.n	8009ebe <xQueueGenericSend+0x46>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d10a      	bne.n	8009ed8 <xQueueGenericSend+0x60>
	__asm volatile
 8009ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec6:	f383 8811 	msr	BASEPRI, r3
 8009eca:	f3bf 8f6f 	isb	sy
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ed4:	bf00      	nop
 8009ed6:	e7fe      	b.n	8009ed6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d103      	bne.n	8009ee6 <xQueueGenericSend+0x6e>
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d101      	bne.n	8009eea <xQueueGenericSend+0x72>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e000      	b.n	8009eec <xQueueGenericSend+0x74>
 8009eea:	2300      	movs	r3, #0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10a      	bne.n	8009f06 <xQueueGenericSend+0x8e>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	623b      	str	r3, [r7, #32]
}
 8009f02:	bf00      	nop
 8009f04:	e7fe      	b.n	8009f04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f06:	f001 fb2b 	bl	800b560 <xTaskGetSchedulerState>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d102      	bne.n	8009f16 <xQueueGenericSend+0x9e>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d101      	bne.n	8009f1a <xQueueGenericSend+0xa2>
 8009f16:	2301      	movs	r3, #1
 8009f18:	e000      	b.n	8009f1c <xQueueGenericSend+0xa4>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10a      	bne.n	8009f36 <xQueueGenericSend+0xbe>
	__asm volatile
 8009f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f24:	f383 8811 	msr	BASEPRI, r3
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	61fb      	str	r3, [r7, #28]
}
 8009f32:	bf00      	nop
 8009f34:	e7fe      	b.n	8009f34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f36:	f7ff fc95 	bl	8009864 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d302      	bcc.n	8009f4c <xQueueGenericSend+0xd4>
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d129      	bne.n	8009fa0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f4c:	683a      	ldr	r2, [r7, #0]
 8009f4e:	68b9      	ldr	r1, [r7, #8]
 8009f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f52:	f000 fa0b 	bl	800a36c <prvCopyDataToQueue>
 8009f56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d010      	beq.n	8009f82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f62:	3324      	adds	r3, #36	; 0x24
 8009f64:	4618      	mov	r0, r3
 8009f66:	f001 f8cd 	bl	800b104 <xTaskRemoveFromEventList>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d013      	beq.n	8009f98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f70:	4b3f      	ldr	r3, [pc, #252]	; (800a070 <xQueueGenericSend+0x1f8>)
 8009f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f76:	601a      	str	r2, [r3, #0]
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	e00a      	b.n	8009f98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d007      	beq.n	8009f98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f88:	4b39      	ldr	r3, [pc, #228]	; (800a070 <xQueueGenericSend+0x1f8>)
 8009f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f98:	f7ff fc94 	bl	80098c4 <vPortExitCritical>
				return pdPASS;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e063      	b.n	800a068 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d103      	bne.n	8009fae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009fa6:	f7ff fc8d 	bl	80098c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009faa:	2300      	movs	r3, #0
 8009fac:	e05c      	b.n	800a068 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d106      	bne.n	8009fc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fb4:	f107 0314 	add.w	r3, r7, #20
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f001 f909 	bl	800b1d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009fc2:	f7ff fc7f 	bl	80098c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009fc6:	f000 fdb7 	bl	800ab38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fca:	f7ff fc4b 	bl	8009864 <vPortEnterCritical>
 8009fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fd4:	b25b      	sxtb	r3, r3
 8009fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fda:	d103      	bne.n	8009fe4 <xQueueGenericSend+0x16c>
 8009fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fea:	b25b      	sxtb	r3, r3
 8009fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff0:	d103      	bne.n	8009ffa <xQueueGenericSend+0x182>
 8009ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ffa:	f7ff fc63 	bl	80098c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ffe:	1d3a      	adds	r2, r7, #4
 800a000:	f107 0314 	add.w	r3, r7, #20
 800a004:	4611      	mov	r1, r2
 800a006:	4618      	mov	r0, r3
 800a008:	f001 f8f8 	bl	800b1fc <xTaskCheckForTimeOut>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d124      	bne.n	800a05c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a014:	f000 faa2 	bl	800a55c <prvIsQueueFull>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d018      	beq.n	800a050 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	3310      	adds	r3, #16
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	4611      	mov	r1, r2
 800a026:	4618      	mov	r0, r3
 800a028:	f001 f81c 	bl	800b064 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a02c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a02e:	f000 fa2d 	bl	800a48c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a032:	f000 fdc7 	bl	800abc4 <xTaskResumeAll>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f47f af7c 	bne.w	8009f36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a03e:	4b0c      	ldr	r3, [pc, #48]	; (800a070 <xQueueGenericSend+0x1f8>)
 800a040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a044:	601a      	str	r2, [r3, #0]
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	e772      	b.n	8009f36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a052:	f000 fa1b 	bl	800a48c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a056:	f000 fdb5 	bl	800abc4 <xTaskResumeAll>
 800a05a:	e76c      	b.n	8009f36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a05c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a05e:	f000 fa15 	bl	800a48c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a062:	f000 fdaf 	bl	800abc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a066:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3738      	adds	r7, #56	; 0x38
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	e000ed04 	.word	0xe000ed04

0800a074 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b090      	sub	sp, #64	; 0x40
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
 800a080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10a      	bne.n	800a0a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	f383 8811 	msr	BASEPRI, r3
 800a094:	f3bf 8f6f 	isb	sy
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a09e:	bf00      	nop
 800a0a0:	e7fe      	b.n	800a0a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d103      	bne.n	800a0b0 <xQueueGenericSendFromISR+0x3c>
 800a0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <xQueueGenericSendFromISR+0x40>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e000      	b.n	800a0b6 <xQueueGenericSendFromISR+0x42>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d10a      	bne.n	800a0d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0cc:	bf00      	nop
 800a0ce:	e7fe      	b.n	800a0ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d103      	bne.n	800a0de <xQueueGenericSendFromISR+0x6a>
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d101      	bne.n	800a0e2 <xQueueGenericSendFromISR+0x6e>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e000      	b.n	800a0e4 <xQueueGenericSendFromISR+0x70>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10a      	bne.n	800a0fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	623b      	str	r3, [r7, #32]
}
 800a0fa:	bf00      	nop
 800a0fc:	e7fe      	b.n	800a0fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0fe:	f7ff fd77 	bl	8009bf0 <vPortValidateInterruptPriority>
	__asm volatile
 800a102:	f3ef 8211 	mrs	r2, BASEPRI
 800a106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	61fa      	str	r2, [r7, #28]
 800a118:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a11a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a11c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a126:	429a      	cmp	r2, r3
 800a128:	d302      	bcc.n	800a130 <xQueueGenericSendFromISR+0xbc>
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d12f      	bne.n	800a190 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a140:	683a      	ldr	r2, [r7, #0]
 800a142:	68b9      	ldr	r1, [r7, #8]
 800a144:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a146:	f000 f911 	bl	800a36c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a14a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a152:	d112      	bne.n	800a17a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d016      	beq.n	800a18a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15e:	3324      	adds	r3, #36	; 0x24
 800a160:	4618      	mov	r0, r3
 800a162:	f000 ffcf 	bl	800b104 <xTaskRemoveFromEventList>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00e      	beq.n	800a18a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00b      	beq.n	800a18a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2201      	movs	r2, #1
 800a176:	601a      	str	r2, [r3, #0]
 800a178:	e007      	b.n	800a18a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a17a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a17e:	3301      	adds	r3, #1
 800a180:	b2db      	uxtb	r3, r3
 800a182:	b25a      	sxtb	r2, r3
 800a184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a18a:	2301      	movs	r3, #1
 800a18c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a18e:	e001      	b.n	800a194 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a190:	2300      	movs	r3, #0
 800a192:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a196:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	f383 8811 	msr	BASEPRI, r3
}
 800a19e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a1a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3740      	adds	r7, #64	; 0x40
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
	...

0800a1ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08c      	sub	sp, #48	; 0x30
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10a      	bne.n	800a1dc <xQueueReceive+0x30>
	__asm volatile
 800a1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	623b      	str	r3, [r7, #32]
}
 800a1d8:	bf00      	nop
 800a1da:	e7fe      	b.n	800a1da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d103      	bne.n	800a1ea <xQueueReceive+0x3e>
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <xQueueReceive+0x42>
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e000      	b.n	800a1f0 <xQueueReceive+0x44>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10a      	bne.n	800a20a <xQueueReceive+0x5e>
	__asm volatile
 800a1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	61fb      	str	r3, [r7, #28]
}
 800a206:	bf00      	nop
 800a208:	e7fe      	b.n	800a208 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a20a:	f001 f9a9 	bl	800b560 <xTaskGetSchedulerState>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d102      	bne.n	800a21a <xQueueReceive+0x6e>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d101      	bne.n	800a21e <xQueueReceive+0x72>
 800a21a:	2301      	movs	r3, #1
 800a21c:	e000      	b.n	800a220 <xQueueReceive+0x74>
 800a21e:	2300      	movs	r3, #0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <xQueueReceive+0x8e>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	61bb      	str	r3, [r7, #24]
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a23a:	f7ff fb13 	bl	8009864 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a242:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a246:	2b00      	cmp	r3, #0
 800a248:	d01f      	beq.n	800a28a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a24a:	68b9      	ldr	r1, [r7, #8]
 800a24c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a24e:	f000 f8f7 	bl	800a440 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a254:	1e5a      	subs	r2, r3, #1
 800a256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a258:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00f      	beq.n	800a282 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a264:	3310      	adds	r3, #16
 800a266:	4618      	mov	r0, r3
 800a268:	f000 ff4c 	bl	800b104 <xTaskRemoveFromEventList>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d007      	beq.n	800a282 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a272:	4b3d      	ldr	r3, [pc, #244]	; (800a368 <xQueueReceive+0x1bc>)
 800a274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a278:	601a      	str	r2, [r3, #0]
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a282:	f7ff fb1f 	bl	80098c4 <vPortExitCritical>
				return pdPASS;
 800a286:	2301      	movs	r3, #1
 800a288:	e069      	b.n	800a35e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d103      	bne.n	800a298 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a290:	f7ff fb18 	bl	80098c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a294:	2300      	movs	r3, #0
 800a296:	e062      	b.n	800a35e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d106      	bne.n	800a2ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a29e:	f107 0310 	add.w	r3, r7, #16
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 ff94 	bl	800b1d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2ac:	f7ff fb0a 	bl	80098c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2b0:	f000 fc42 	bl	800ab38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2b4:	f7ff fad6 	bl	8009864 <vPortEnterCritical>
 800a2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2be:	b25b      	sxtb	r3, r3
 800a2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c4:	d103      	bne.n	800a2ce <xQueueReceive+0x122>
 800a2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2d4:	b25b      	sxtb	r3, r3
 800a2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2da:	d103      	bne.n	800a2e4 <xQueueReceive+0x138>
 800a2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2e4:	f7ff faee 	bl	80098c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2e8:	1d3a      	adds	r2, r7, #4
 800a2ea:	f107 0310 	add.w	r3, r7, #16
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f000 ff83 	bl	800b1fc <xTaskCheckForTimeOut>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d123      	bne.n	800a344 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2fe:	f000 f917 	bl	800a530 <prvIsQueueEmpty>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d017      	beq.n	800a338 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30a:	3324      	adds	r3, #36	; 0x24
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	4611      	mov	r1, r2
 800a310:	4618      	mov	r0, r3
 800a312:	f000 fea7 	bl	800b064 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a318:	f000 f8b8 	bl	800a48c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a31c:	f000 fc52 	bl	800abc4 <xTaskResumeAll>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d189      	bne.n	800a23a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a326:	4b10      	ldr	r3, [pc, #64]	; (800a368 <xQueueReceive+0x1bc>)
 800a328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	e780      	b.n	800a23a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a33a:	f000 f8a7 	bl	800a48c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a33e:	f000 fc41 	bl	800abc4 <xTaskResumeAll>
 800a342:	e77a      	b.n	800a23a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a346:	f000 f8a1 	bl	800a48c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a34a:	f000 fc3b 	bl	800abc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a34e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a350:	f000 f8ee 	bl	800a530 <prvIsQueueEmpty>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	f43f af6f 	beq.w	800a23a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a35c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3730      	adds	r7, #48	; 0x30
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	e000ed04 	.word	0xe000ed04

0800a36c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b086      	sub	sp, #24
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a378:	2300      	movs	r3, #0
 800a37a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a380:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a386:	2b00      	cmp	r3, #0
 800a388:	d10d      	bne.n	800a3a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d14d      	bne.n	800a42e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	4618      	mov	r0, r3
 800a398:	f001 f900 	bl	800b59c <xTaskPriorityDisinherit>
 800a39c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	609a      	str	r2, [r3, #8]
 800a3a4:	e043      	b.n	800a42e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d119      	bne.n	800a3e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6858      	ldr	r0, [r3, #4]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	68b9      	ldr	r1, [r7, #8]
 800a3b8:	f001 fdee 	bl	800bf98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	685a      	ldr	r2, [r3, #4]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c4:	441a      	add	r2, r3
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	685a      	ldr	r2, [r3, #4]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d32b      	bcc.n	800a42e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	605a      	str	r2, [r3, #4]
 800a3de:	e026      	b.n	800a42e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	68d8      	ldr	r0, [r3, #12]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	68b9      	ldr	r1, [r7, #8]
 800a3ec:	f001 fdd4 	bl	800bf98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	68da      	ldr	r2, [r3, #12]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f8:	425b      	negs	r3, r3
 800a3fa:	441a      	add	r2, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	68da      	ldr	r2, [r3, #12]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d207      	bcs.n	800a41c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	689a      	ldr	r2, [r3, #8]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a414:	425b      	negs	r3, r3
 800a416:	441a      	add	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d105      	bne.n	800a42e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d002      	beq.n	800a42e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	1c5a      	adds	r2, r3, #1
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a436:	697b      	ldr	r3, [r7, #20]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3718      	adds	r7, #24
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d018      	beq.n	800a484 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68da      	ldr	r2, [r3, #12]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45a:	441a      	add	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	68da      	ldr	r2, [r3, #12]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d303      	bcc.n	800a474 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	68d9      	ldr	r1, [r3, #12]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a47c:	461a      	mov	r2, r3
 800a47e:	6838      	ldr	r0, [r7, #0]
 800a480:	f001 fd8a 	bl	800bf98 <memcpy>
	}
}
 800a484:	bf00      	nop
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a494:	f7ff f9e6 	bl	8009864 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a49e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4a0:	e011      	b.n	800a4c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d012      	beq.n	800a4d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	3324      	adds	r3, #36	; 0x24
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f000 fe28 	bl	800b104 <xTaskRemoveFromEventList>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d001      	beq.n	800a4be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a4ba:	f000 ff11 	bl	800b2e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a4be:	7bfb      	ldrb	r3, [r7, #15]
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	dce9      	bgt.n	800a4a2 <prvUnlockQueue+0x16>
 800a4ce:	e000      	b.n	800a4d2 <prvUnlockQueue+0x46>
					break;
 800a4d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	22ff      	movs	r2, #255	; 0xff
 800a4d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a4da:	f7ff f9f3 	bl	80098c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a4de:	f7ff f9c1 	bl	8009864 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4ea:	e011      	b.n	800a510 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d012      	beq.n	800a51a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	3310      	adds	r3, #16
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f000 fe03 	bl	800b104 <xTaskRemoveFromEventList>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d001      	beq.n	800a508 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a504:	f000 feec 	bl	800b2e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a508:	7bbb      	ldrb	r3, [r7, #14]
 800a50a:	3b01      	subs	r3, #1
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a514:	2b00      	cmp	r3, #0
 800a516:	dce9      	bgt.n	800a4ec <prvUnlockQueue+0x60>
 800a518:	e000      	b.n	800a51c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a51a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	22ff      	movs	r2, #255	; 0xff
 800a520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a524:	f7ff f9ce 	bl	80098c4 <vPortExitCritical>
}
 800a528:	bf00      	nop
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a538:	f7ff f994 	bl	8009864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a540:	2b00      	cmp	r3, #0
 800a542:	d102      	bne.n	800a54a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a544:	2301      	movs	r3, #1
 800a546:	60fb      	str	r3, [r7, #12]
 800a548:	e001      	b.n	800a54e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a54a:	2300      	movs	r3, #0
 800a54c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a54e:	f7ff f9b9 	bl	80098c4 <vPortExitCritical>

	return xReturn;
 800a552:	68fb      	ldr	r3, [r7, #12]
}
 800a554:	4618      	mov	r0, r3
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a564:	f7ff f97e 	bl	8009864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a570:	429a      	cmp	r2, r3
 800a572:	d102      	bne.n	800a57a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a574:	2301      	movs	r3, #1
 800a576:	60fb      	str	r3, [r7, #12]
 800a578:	e001      	b.n	800a57e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a57a:	2300      	movs	r3, #0
 800a57c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a57e:	f7ff f9a1 	bl	80098c4 <vPortExitCritical>

	return xReturn;
 800a582:	68fb      	ldr	r3, [r7, #12]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a596:	2300      	movs	r3, #0
 800a598:	60fb      	str	r3, [r7, #12]
 800a59a:	e014      	b.n	800a5c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a59c:	4a0f      	ldr	r2, [pc, #60]	; (800a5dc <vQueueAddToRegistry+0x50>)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10b      	bne.n	800a5c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a5a8:	490c      	ldr	r1, [pc, #48]	; (800a5dc <vQueueAddToRegistry+0x50>)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	683a      	ldr	r2, [r7, #0]
 800a5ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a5b2:	4a0a      	ldr	r2, [pc, #40]	; (800a5dc <vQueueAddToRegistry+0x50>)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	00db      	lsls	r3, r3, #3
 800a5b8:	4413      	add	r3, r2
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a5be:	e006      	b.n	800a5ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	60fb      	str	r3, [r7, #12]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2b07      	cmp	r3, #7
 800a5ca:	d9e7      	bls.n	800a59c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a5cc:	bf00      	nop
 800a5ce:	bf00      	nop
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	2000ae30 	.word	0x2000ae30

0800a5e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a5f0:	f7ff f938 	bl	8009864 <vPortEnterCritical>
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5fa:	b25b      	sxtb	r3, r3
 800a5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a600:	d103      	bne.n	800a60a <vQueueWaitForMessageRestricted+0x2a>
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a610:	b25b      	sxtb	r3, r3
 800a612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a616:	d103      	bne.n	800a620 <vQueueWaitForMessageRestricted+0x40>
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a620:	f7ff f950 	bl	80098c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d106      	bne.n	800a63a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	3324      	adds	r3, #36	; 0x24
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	68b9      	ldr	r1, [r7, #8]
 800a634:	4618      	mov	r0, r3
 800a636:	f000 fd39 	bl	800b0ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a63a:	6978      	ldr	r0, [r7, #20]
 800a63c:	f7ff ff26 	bl	800a48c <prvUnlockQueue>
	}
 800a640:	bf00      	nop
 800a642:	3718      	adds	r7, #24
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b08e      	sub	sp, #56	; 0x38
 800a64c:	af04      	add	r7, sp, #16
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
 800a654:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10a      	bne.n	800a672 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a660:	f383 8811 	msr	BASEPRI, r3
 800a664:	f3bf 8f6f 	isb	sy
 800a668:	f3bf 8f4f 	dsb	sy
 800a66c:	623b      	str	r3, [r7, #32]
}
 800a66e:	bf00      	nop
 800a670:	e7fe      	b.n	800a670 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10a      	bne.n	800a68e <xTaskCreateStatic+0x46>
	__asm volatile
 800a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	61fb      	str	r3, [r7, #28]
}
 800a68a:	bf00      	nop
 800a68c:	e7fe      	b.n	800a68c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a68e:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800a692:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800a69a:	d00a      	beq.n	800a6b2 <xTaskCreateStatic+0x6a>
	__asm volatile
 800a69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a0:	f383 8811 	msr	BASEPRI, r3
 800a6a4:	f3bf 8f6f 	isb	sy
 800a6a8:	f3bf 8f4f 	dsb	sy
 800a6ac:	61bb      	str	r3, [r7, #24]
}
 800a6ae:	bf00      	nop
 800a6b0:	e7fe      	b.n	800a6b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a6b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d01e      	beq.n	800a6f8 <xTaskCreateStatic+0xb0>
 800a6ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d01b      	beq.n	800a6f8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	9303      	str	r3, [sp, #12]
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d8:	9302      	str	r3, [sp, #8]
 800a6da:	f107 0314 	add.w	r3, r7, #20
 800a6de:	9301      	str	r3, [sp, #4]
 800a6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	68b9      	ldr	r1, [r7, #8]
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f000 f852 	bl	800a794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6f2:	f000 f90b 	bl	800a90c <prvAddNewTaskToReadyList>
 800a6f6:	e001      	b.n	800a6fc <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a6fc:	697b      	ldr	r3, [r7, #20]
	}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3728      	adds	r7, #40	; 0x28
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a706:	b580      	push	{r7, lr}
 800a708:	b08c      	sub	sp, #48	; 0x30
 800a70a:	af04      	add	r7, sp, #16
 800a70c:	60f8      	str	r0, [r7, #12]
 800a70e:	60b9      	str	r1, [r7, #8]
 800a710:	603b      	str	r3, [r7, #0]
 800a712:	4613      	mov	r3, r2
 800a714:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a716:	88fb      	ldrh	r3, [r7, #6]
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7fe fcd2 	bl	80090c4 <pvPortMalloc>
 800a720:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d00f      	beq.n	800a748 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a728:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 800a72c:	f7fe fcca 	bl	80090c4 <pvPortMalloc>
 800a730:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d003      	beq.n	800a740 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	631a      	str	r2, [r3, #48]	; 0x30
 800a73e:	e005      	b.n	800a74c <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a740:	6978      	ldr	r0, [r7, #20]
 800a742:	f7fe fd8f 	bl	8009264 <vPortFree>
 800a746:	e001      	b.n	800a74c <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a748:	2300      	movs	r3, #0
 800a74a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d017      	beq.n	800a782 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a75a:	88fa      	ldrh	r2, [r7, #6]
 800a75c:	2300      	movs	r3, #0
 800a75e:	9303      	str	r3, [sp, #12]
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	9302      	str	r3, [sp, #8]
 800a764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a766:	9301      	str	r3, [sp, #4]
 800a768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	68b9      	ldr	r1, [r7, #8]
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 f80f 	bl	800a794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a776:	69f8      	ldr	r0, [r7, #28]
 800a778:	f000 f8c8 	bl	800a90c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a77c:	2301      	movs	r3, #1
 800a77e:	61bb      	str	r3, [r7, #24]
 800a780:	e002      	b.n	800a788 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a782:	f04f 33ff 	mov.w	r3, #4294967295
 800a786:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a788:	69bb      	ldr	r3, [r7, #24]
	}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3720      	adds	r7, #32
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
	...

0800a794 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b088      	sub	sp, #32
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
 800a7a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	21a5      	movs	r1, #165	; 0xa5
 800a7ae:	f001 fc01 	bl	800bfb4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	f023 0307 	bic.w	r3, r3, #7
 800a7ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	f003 0307 	and.w	r3, r3, #7
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00a      	beq.n	800a7ec <prvInitialiseNewTask+0x58>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	617b      	str	r3, [r7, #20]
}
 800a7e8:	bf00      	nop
 800a7ea:	e7fe      	b.n	800a7ea <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ee:	69ba      	ldr	r2, [r7, #24]
 800a7f0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d01f      	beq.n	800a83a <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	61fb      	str	r3, [r7, #28]
 800a7fe:	e012      	b.n	800a826 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	4413      	add	r3, r2
 800a806:	7819      	ldrb	r1, [r3, #0]
 800a808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	4413      	add	r3, r2
 800a80e:	3334      	adds	r3, #52	; 0x34
 800a810:	460a      	mov	r2, r1
 800a812:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	4413      	add	r3, r2
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d006      	beq.n	800a82e <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	3301      	adds	r3, #1
 800a824:	61fb      	str	r3, [r7, #28]
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	2bfe      	cmp	r3, #254	; 0xfe
 800a82a:	d9e9      	bls.n	800a800 <prvInitialiseNewTask+0x6c>
 800a82c:	e000      	b.n	800a830 <prvInitialiseNewTask+0x9c>
			{
				break;
 800a82e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a832:	2200      	movs	r2, #0
 800a834:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800a838:	e003      	b.n	800a842 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a844:	2b37      	cmp	r3, #55	; 0x37
 800a846:	d901      	bls.n	800a84c <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a848:	2337      	movs	r3, #55	; 0x37
 800a84a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a850:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a856:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		pxNewTCB->uxMutexesHeld = 0;
 800a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85c:	2200      	movs	r2, #0
 800a85e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	3304      	adds	r3, #4
 800a866:	4618      	mov	r0, r3
 800a868:	f7fe fe3a 	bl	80094e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86e:	3318      	adds	r3, #24
 800a870:	4618      	mov	r0, r3
 800a872:	f7fe fe35 	bl	80094e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a87a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a88a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88e:	2200      	movs	r2, #0
 800a890:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a896:	2200      	movs	r2, #0
 800a898:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8b2:	2260      	movs	r2, #96	; 0x60
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f001 fb7c 	bl	800bfb4 <memset>
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8be:	4a10      	ldr	r2, [pc, #64]	; (800a900 <prvInitialiseNewTask+0x16c>)
 800a8c0:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c6:	4a0f      	ldr	r2, [pc, #60]	; (800a904 <prvInitialiseNewTask+0x170>)
 800a8c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ce:	4a0e      	ldr	r2, [pc, #56]	; (800a908 <prvInitialiseNewTask+0x174>)
 800a8d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a8dc:	683a      	ldr	r2, [r7, #0]
 800a8de:	68f9      	ldr	r1, [r7, #12]
 800a8e0:	69b8      	ldr	r0, [r7, #24]
 800a8e2:	f7fe fe91 	bl	8009608 <pxPortInitialiseStack>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d002      	beq.n	800a8f8 <prvInitialiseNewTask+0x164>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8f8:	bf00      	nop
 800a8fa:	3720      	adds	r7, #32
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	0800cf50 	.word	0x0800cf50
 800a904:	0800cf70 	.word	0x0800cf70
 800a908:	0800cf30 	.word	0x0800cf30

0800a90c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a914:	f7fe ffa6 	bl	8009864 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a918:	4b2d      	ldr	r3, [pc, #180]	; (800a9d0 <prvAddNewTaskToReadyList+0xc4>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	3301      	adds	r3, #1
 800a91e:	4a2c      	ldr	r2, [pc, #176]	; (800a9d0 <prvAddNewTaskToReadyList+0xc4>)
 800a920:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a922:	4b2c      	ldr	r3, [pc, #176]	; (800a9d4 <prvAddNewTaskToReadyList+0xc8>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d109      	bne.n	800a93e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a92a:	4a2a      	ldr	r2, [pc, #168]	; (800a9d4 <prvAddNewTaskToReadyList+0xc8>)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a930:	4b27      	ldr	r3, [pc, #156]	; (800a9d0 <prvAddNewTaskToReadyList+0xc4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b01      	cmp	r3, #1
 800a936:	d110      	bne.n	800a95a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a938:	f000 fd4e 	bl	800b3d8 <prvInitialiseTaskLists>
 800a93c:	e00d      	b.n	800a95a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a93e:	4b26      	ldr	r3, [pc, #152]	; (800a9d8 <prvAddNewTaskToReadyList+0xcc>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d109      	bne.n	800a95a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a946:	4b23      	ldr	r3, [pc, #140]	; (800a9d4 <prvAddNewTaskToReadyList+0xc8>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a950:	429a      	cmp	r2, r3
 800a952:	d802      	bhi.n	800a95a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a954:	4a1f      	ldr	r2, [pc, #124]	; (800a9d4 <prvAddNewTaskToReadyList+0xc8>)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a95a:	4b20      	ldr	r3, [pc, #128]	; (800a9dc <prvAddNewTaskToReadyList+0xd0>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	3301      	adds	r3, #1
 800a960:	4a1e      	ldr	r2, [pc, #120]	; (800a9dc <prvAddNewTaskToReadyList+0xd0>)
 800a962:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a964:	4b1d      	ldr	r3, [pc, #116]	; (800a9dc <prvAddNewTaskToReadyList+0xd0>)
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a972:	4b1b      	ldr	r3, [pc, #108]	; (800a9e0 <prvAddNewTaskToReadyList+0xd4>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	429a      	cmp	r2, r3
 800a978:	d903      	bls.n	800a982 <prvAddNewTaskToReadyList+0x76>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97e:	4a18      	ldr	r2, [pc, #96]	; (800a9e0 <prvAddNewTaskToReadyList+0xd4>)
 800a980:	6013      	str	r3, [r2, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a986:	4613      	mov	r3, r2
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4413      	add	r3, r2
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4a15      	ldr	r2, [pc, #84]	; (800a9e4 <prvAddNewTaskToReadyList+0xd8>)
 800a990:	441a      	add	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	3304      	adds	r3, #4
 800a996:	4619      	mov	r1, r3
 800a998:	4610      	mov	r0, r2
 800a99a:	f7fe fdae 	bl	80094fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a99e:	f7fe ff91 	bl	80098c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a9a2:	4b0d      	ldr	r3, [pc, #52]	; (800a9d8 <prvAddNewTaskToReadyList+0xcc>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00e      	beq.n	800a9c8 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a9aa:	4b0a      	ldr	r3, [pc, #40]	; (800a9d4 <prvAddNewTaskToReadyList+0xc8>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d207      	bcs.n	800a9c8 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a9b8:	4b0b      	ldr	r3, [pc, #44]	; (800a9e8 <prvAddNewTaskToReadyList+0xdc>)
 800a9ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9be:	601a      	str	r2, [r3, #0]
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9c8:	bf00      	nop
 800a9ca:	3708      	adds	r7, #8
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	2000b348 	.word	0x2000b348
 800a9d4:	2000ae70 	.word	0x2000ae70
 800a9d8:	2000b354 	.word	0x2000b354
 800a9dc:	2000b364 	.word	0x2000b364
 800a9e0:	2000b350 	.word	0x2000b350
 800a9e4:	2000ae74 	.word	0x2000ae74
 800a9e8:	e000ed04 	.word	0xe000ed04

0800a9ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d017      	beq.n	800aa2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a9fe:	4b13      	ldr	r3, [pc, #76]	; (800aa4c <vTaskDelay+0x60>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d00a      	beq.n	800aa1c <vTaskDelay+0x30>
	__asm volatile
 800aa06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	60bb      	str	r3, [r7, #8]
}
 800aa18:	bf00      	nop
 800aa1a:	e7fe      	b.n	800aa1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aa1c:	f000 f88c 	bl	800ab38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aa20:	2100      	movs	r1, #0
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 fe2e 	bl	800b684 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aa28:	f000 f8cc 	bl	800abc4 <xTaskResumeAll>
 800aa2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d107      	bne.n	800aa44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aa34:	4b06      	ldr	r3, [pc, #24]	; (800aa50 <vTaskDelay+0x64>)
 800aa36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa3a:	601a      	str	r2, [r3, #0]
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa44:	bf00      	nop
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	2000b370 	.word	0x2000b370
 800aa50:	e000ed04 	.word	0xe000ed04

0800aa54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b08a      	sub	sp, #40	; 0x28
 800aa58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aa62:	463a      	mov	r2, r7
 800aa64:	1d39      	adds	r1, r7, #4
 800aa66:	f107 0308 	add.w	r3, r7, #8
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fe faa4 	bl	8008fb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aa70:	6839      	ldr	r1, [r7, #0]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	9202      	str	r2, [sp, #8]
 800aa78:	9301      	str	r3, [sp, #4]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	9300      	str	r3, [sp, #0]
 800aa7e:	2300      	movs	r3, #0
 800aa80:	460a      	mov	r2, r1
 800aa82:	4925      	ldr	r1, [pc, #148]	; (800ab18 <vTaskStartScheduler+0xc4>)
 800aa84:	4825      	ldr	r0, [pc, #148]	; (800ab1c <vTaskStartScheduler+0xc8>)
 800aa86:	f7ff fddf 	bl	800a648 <xTaskCreateStatic>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	4a24      	ldr	r2, [pc, #144]	; (800ab20 <vTaskStartScheduler+0xcc>)
 800aa8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aa90:	4b23      	ldr	r3, [pc, #140]	; (800ab20 <vTaskStartScheduler+0xcc>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d002      	beq.n	800aa9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	617b      	str	r3, [r7, #20]
 800aa9c:	e001      	b.n	800aaa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d102      	bne.n	800aaae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aaa8:	f000 fe46 	bl	800b738 <xTimerCreateTimerTask>
 800aaac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d11e      	bne.n	800aaf2 <vTaskStartScheduler+0x9e>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	613b      	str	r3, [r7, #16]
}
 800aac6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aac8:	4b16      	ldr	r3, [pc, #88]	; (800ab24 <vTaskStartScheduler+0xd0>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aad0:	4a15      	ldr	r2, [pc, #84]	; (800ab28 <vTaskStartScheduler+0xd4>)
 800aad2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aad4:	4b15      	ldr	r3, [pc, #84]	; (800ab2c <vTaskStartScheduler+0xd8>)
 800aad6:	f04f 32ff 	mov.w	r2, #4294967295
 800aada:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aadc:	4b14      	ldr	r3, [pc, #80]	; (800ab30 <vTaskStartScheduler+0xdc>)
 800aade:	2201      	movs	r2, #1
 800aae0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aae2:	4b14      	ldr	r3, [pc, #80]	; (800ab34 <vTaskStartScheduler+0xe0>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800aae8:	f7f6 fdb6 	bl	8001658 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aaec:	f7fe fe18 	bl	8009720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aaf0:	e00e      	b.n	800ab10 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf8:	d10a      	bne.n	800ab10 <vTaskStartScheduler+0xbc>
	__asm volatile
 800aafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafe:	f383 8811 	msr	BASEPRI, r3
 800ab02:	f3bf 8f6f 	isb	sy
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	60fb      	str	r3, [r7, #12]
}
 800ab0c:	bf00      	nop
 800ab0e:	e7fe      	b.n	800ab0e <vTaskStartScheduler+0xba>
}
 800ab10:	bf00      	nop
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	0800c650 	.word	0x0800c650
 800ab1c:	0800b2f9 	.word	0x0800b2f9
 800ab20:	2000b36c 	.word	0x2000b36c
 800ab24:	2000ae70 	.word	0x2000ae70
 800ab28:	20000010 	.word	0x20000010
 800ab2c:	2000b368 	.word	0x2000b368
 800ab30:	2000b354 	.word	0x2000b354
 800ab34:	2000b34c 	.word	0x2000b34c

0800ab38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ab38:	b480      	push	{r7}
 800ab3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ab3c:	4b04      	ldr	r3, [pc, #16]	; (800ab50 <vTaskSuspendAll+0x18>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	3301      	adds	r3, #1
 800ab42:	4a03      	ldr	r2, [pc, #12]	; (800ab50 <vTaskSuspendAll+0x18>)
 800ab44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ab46:	bf00      	nop
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr
 800ab50:	2000b370 	.word	0x2000b370

0800ab54 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800ab5e:	4b14      	ldr	r3, [pc, #80]	; (800abb0 <prvGetExpectedIdleTime+0x5c>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800ab66:	2301      	movs	r3, #1
 800ab68:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800ab6a:	4b12      	ldr	r3, [pc, #72]	; (800abb4 <prvGetExpectedIdleTime+0x60>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800ab74:	2300      	movs	r3, #0
 800ab76:	607b      	str	r3, [r7, #4]
 800ab78:	e012      	b.n	800aba0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800ab7a:	4b0f      	ldr	r3, [pc, #60]	; (800abb8 <prvGetExpectedIdleTime+0x64>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d902      	bls.n	800ab88 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800ab82:	2300      	movs	r3, #0
 800ab84:	607b      	str	r3, [r7, #4]
 800ab86:	e00b      	b.n	800aba0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d002      	beq.n	800ab94 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	607b      	str	r3, [r7, #4]
 800ab92:	e005      	b.n	800aba0 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800ab94:	4b09      	ldr	r3, [pc, #36]	; (800abbc <prvGetExpectedIdleTime+0x68>)
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	4b09      	ldr	r3, [pc, #36]	; (800abc0 <prvGetExpectedIdleTime+0x6c>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800aba0:	687b      	ldr	r3, [r7, #4]
	}
 800aba2:	4618      	mov	r0, r3
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	2000b350 	.word	0x2000b350
 800abb4:	2000ae70 	.word	0x2000ae70
 800abb8:	2000ae74 	.word	0x2000ae74
 800abbc:	2000b368 	.word	0x2000b368
 800abc0:	2000b34c 	.word	0x2000b34c

0800abc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800abca:	2300      	movs	r3, #0
 800abcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800abce:	2300      	movs	r3, #0
 800abd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800abd2:	4b42      	ldr	r3, [pc, #264]	; (800acdc <xTaskResumeAll+0x118>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10a      	bne.n	800abf0 <xTaskResumeAll+0x2c>
	__asm volatile
 800abda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	603b      	str	r3, [r7, #0]
}
 800abec:	bf00      	nop
 800abee:	e7fe      	b.n	800abee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800abf0:	f7fe fe38 	bl	8009864 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800abf4:	4b39      	ldr	r3, [pc, #228]	; (800acdc <xTaskResumeAll+0x118>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	3b01      	subs	r3, #1
 800abfa:	4a38      	ldr	r2, [pc, #224]	; (800acdc <xTaskResumeAll+0x118>)
 800abfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abfe:	4b37      	ldr	r3, [pc, #220]	; (800acdc <xTaskResumeAll+0x118>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d162      	bne.n	800accc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac06:	4b36      	ldr	r3, [pc, #216]	; (800ace0 <xTaskResumeAll+0x11c>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d05e      	beq.n	800accc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac0e:	e02f      	b.n	800ac70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac10:	4b34      	ldr	r3, [pc, #208]	; (800ace4 <xTaskResumeAll+0x120>)
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	3318      	adds	r3, #24
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7fe fcc9 	bl	80095b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	3304      	adds	r3, #4
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fe fcc4 	bl	80095b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac30:	4b2d      	ldr	r3, [pc, #180]	; (800ace8 <xTaskResumeAll+0x124>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d903      	bls.n	800ac40 <xTaskResumeAll+0x7c>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3c:	4a2a      	ldr	r2, [pc, #168]	; (800ace8 <xTaskResumeAll+0x124>)
 800ac3e:	6013      	str	r3, [r2, #0]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac44:	4613      	mov	r3, r2
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4413      	add	r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4a27      	ldr	r2, [pc, #156]	; (800acec <xTaskResumeAll+0x128>)
 800ac4e:	441a      	add	r2, r3
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	3304      	adds	r3, #4
 800ac54:	4619      	mov	r1, r3
 800ac56:	4610      	mov	r0, r2
 800ac58:	f7fe fc4f 	bl	80094fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac60:	4b23      	ldr	r3, [pc, #140]	; (800acf0 <xTaskResumeAll+0x12c>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d302      	bcc.n	800ac70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ac6a:	4b22      	ldr	r3, [pc, #136]	; (800acf4 <xTaskResumeAll+0x130>)
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac70:	4b1c      	ldr	r3, [pc, #112]	; (800ace4 <xTaskResumeAll+0x120>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1cb      	bne.n	800ac10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d001      	beq.n	800ac82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ac7e:	f000 fc4f 	bl	800b520 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ac82:	4b1d      	ldr	r3, [pc, #116]	; (800acf8 <xTaskResumeAll+0x134>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d010      	beq.n	800acb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ac8e:	f000 f86f 	bl	800ad70 <xTaskIncrementTick>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d002      	beq.n	800ac9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ac98:	4b16      	ldr	r3, [pc, #88]	; (800acf4 <xTaskResumeAll+0x130>)
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	3b01      	subs	r3, #1
 800aca2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1f1      	bne.n	800ac8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800acaa:	4b13      	ldr	r3, [pc, #76]	; (800acf8 <xTaskResumeAll+0x134>)
 800acac:	2200      	movs	r2, #0
 800acae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800acb0:	4b10      	ldr	r3, [pc, #64]	; (800acf4 <xTaskResumeAll+0x130>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d009      	beq.n	800accc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800acb8:	2301      	movs	r3, #1
 800acba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800acbc:	4b0f      	ldr	r3, [pc, #60]	; (800acfc <xTaskResumeAll+0x138>)
 800acbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acc2:	601a      	str	r2, [r3, #0]
 800acc4:	f3bf 8f4f 	dsb	sy
 800acc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800accc:	f7fe fdfa 	bl	80098c4 <vPortExitCritical>

	return xAlreadyYielded;
 800acd0:	68bb      	ldr	r3, [r7, #8]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	2000b370 	.word	0x2000b370
 800ace0:	2000b348 	.word	0x2000b348
 800ace4:	2000b304 	.word	0x2000b304
 800ace8:	2000b350 	.word	0x2000b350
 800acec:	2000ae74 	.word	0x2000ae74
 800acf0:	2000ae70 	.word	0x2000ae70
 800acf4:	2000b35c 	.word	0x2000b35c
 800acf8:	2000b358 	.word	0x2000b358
 800acfc:	e000ed04 	.word	0xe000ed04

0800ad00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ad06:	4b05      	ldr	r3, [pc, #20]	; (800ad1c <xTaskGetTickCount+0x1c>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ad0c:	687b      	ldr	r3, [r7, #4]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	370c      	adds	r7, #12
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	2000b34c 	.word	0x2000b34c

0800ad20 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800ad20:	b480      	push	{r7}
 800ad22:	b085      	sub	sp, #20
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800ad28:	4b0f      	ldr	r3, [pc, #60]	; (800ad68 <vTaskStepTick+0x48>)
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	441a      	add	r2, r3
 800ad30:	4b0e      	ldr	r3, [pc, #56]	; (800ad6c <vTaskStepTick+0x4c>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d90a      	bls.n	800ad4e <vTaskStepTick+0x2e>
	__asm volatile
 800ad38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3c:	f383 8811 	msr	BASEPRI, r3
 800ad40:	f3bf 8f6f 	isb	sy
 800ad44:	f3bf 8f4f 	dsb	sy
 800ad48:	60fb      	str	r3, [r7, #12]
}
 800ad4a:	bf00      	nop
 800ad4c:	e7fe      	b.n	800ad4c <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800ad4e:	4b06      	ldr	r3, [pc, #24]	; (800ad68 <vTaskStepTick+0x48>)
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4413      	add	r3, r2
 800ad56:	4a04      	ldr	r2, [pc, #16]	; (800ad68 <vTaskStepTick+0x48>)
 800ad58:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800ad5a:	bf00      	nop
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	2000b34c 	.word	0x2000b34c
 800ad6c:	2000b368 	.word	0x2000b368

0800ad70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ad76:	2300      	movs	r3, #0
 800ad78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad7a:	4b53      	ldr	r3, [pc, #332]	; (800aec8 <xTaskIncrementTick+0x158>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f040 8095 	bne.w	800aeae <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad84:	4b51      	ldr	r3, [pc, #324]	; (800aecc <xTaskIncrementTick+0x15c>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad8c:	4a4f      	ldr	r2, [pc, #316]	; (800aecc <xTaskIncrementTick+0x15c>)
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d120      	bne.n	800adda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad98:	4b4d      	ldr	r3, [pc, #308]	; (800aed0 <xTaskIncrementTick+0x160>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00a      	beq.n	800adb8 <xTaskIncrementTick+0x48>
	__asm volatile
 800ada2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada6:	f383 8811 	msr	BASEPRI, r3
 800adaa:	f3bf 8f6f 	isb	sy
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	603b      	str	r3, [r7, #0]
}
 800adb4:	bf00      	nop
 800adb6:	e7fe      	b.n	800adb6 <xTaskIncrementTick+0x46>
 800adb8:	4b45      	ldr	r3, [pc, #276]	; (800aed0 <xTaskIncrementTick+0x160>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	60fb      	str	r3, [r7, #12]
 800adbe:	4b45      	ldr	r3, [pc, #276]	; (800aed4 <xTaskIncrementTick+0x164>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a43      	ldr	r2, [pc, #268]	; (800aed0 <xTaskIncrementTick+0x160>)
 800adc4:	6013      	str	r3, [r2, #0]
 800adc6:	4a43      	ldr	r2, [pc, #268]	; (800aed4 <xTaskIncrementTick+0x164>)
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6013      	str	r3, [r2, #0]
 800adcc:	4b42      	ldr	r3, [pc, #264]	; (800aed8 <xTaskIncrementTick+0x168>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	3301      	adds	r3, #1
 800add2:	4a41      	ldr	r2, [pc, #260]	; (800aed8 <xTaskIncrementTick+0x168>)
 800add4:	6013      	str	r3, [r2, #0]
 800add6:	f000 fba3 	bl	800b520 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800adda:	4b40      	ldr	r3, [pc, #256]	; (800aedc <xTaskIncrementTick+0x16c>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	693a      	ldr	r2, [r7, #16]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d349      	bcc.n	800ae78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ade4:	4b3a      	ldr	r3, [pc, #232]	; (800aed0 <xTaskIncrementTick+0x160>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d104      	bne.n	800adf8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adee:	4b3b      	ldr	r3, [pc, #236]	; (800aedc <xTaskIncrementTick+0x16c>)
 800adf0:	f04f 32ff 	mov.w	r2, #4294967295
 800adf4:	601a      	str	r2, [r3, #0]
					break;
 800adf6:	e03f      	b.n	800ae78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adf8:	4b35      	ldr	r3, [pc, #212]	; (800aed0 <xTaskIncrementTick+0x160>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d203      	bcs.n	800ae18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae10:	4a32      	ldr	r2, [pc, #200]	; (800aedc <xTaskIncrementTick+0x16c>)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae16:	e02f      	b.n	800ae78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fe fbc9 	bl	80095b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d004      	beq.n	800ae34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	3318      	adds	r3, #24
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fe fbc0 	bl	80095b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae38:	4b29      	ldr	r3, [pc, #164]	; (800aee0 <xTaskIncrementTick+0x170>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d903      	bls.n	800ae48 <xTaskIncrementTick+0xd8>
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae44:	4a26      	ldr	r2, [pc, #152]	; (800aee0 <xTaskIncrementTick+0x170>)
 800ae46:	6013      	str	r3, [r2, #0]
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4413      	add	r3, r2
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	4a23      	ldr	r2, [pc, #140]	; (800aee4 <xTaskIncrementTick+0x174>)
 800ae56:	441a      	add	r2, r3
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	3304      	adds	r3, #4
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	4610      	mov	r0, r2
 800ae60:	f7fe fb4b 	bl	80094fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae68:	4b1f      	ldr	r3, [pc, #124]	; (800aee8 <xTaskIncrementTick+0x178>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d3b8      	bcc.n	800ade4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ae72:	2301      	movs	r3, #1
 800ae74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae76:	e7b5      	b.n	800ade4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae78:	4b1b      	ldr	r3, [pc, #108]	; (800aee8 <xTaskIncrementTick+0x178>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae7e:	4919      	ldr	r1, [pc, #100]	; (800aee4 <xTaskIncrementTick+0x174>)
 800ae80:	4613      	mov	r3, r2
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	4413      	add	r3, r2
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	440b      	add	r3, r1
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d901      	bls.n	800ae94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ae90:	2301      	movs	r3, #1
 800ae92:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800ae94:	4b15      	ldr	r3, [pc, #84]	; (800aeec <xTaskIncrementTick+0x17c>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d101      	bne.n	800aea0 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800ae9c:	f7f6 fbf2 	bl	8001684 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aea0:	4b13      	ldr	r3, [pc, #76]	; (800aef0 <xTaskIncrementTick+0x180>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d009      	beq.n	800aebc <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	617b      	str	r3, [r7, #20]
 800aeac:	e006      	b.n	800aebc <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aeae:	4b0f      	ldr	r3, [pc, #60]	; (800aeec <xTaskIncrementTick+0x17c>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	4a0d      	ldr	r2, [pc, #52]	; (800aeec <xTaskIncrementTick+0x17c>)
 800aeb6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800aeb8:	f7f6 fbe4 	bl	8001684 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800aebc:	697b      	ldr	r3, [r7, #20]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3718      	adds	r7, #24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	2000b370 	.word	0x2000b370
 800aecc:	2000b34c 	.word	0x2000b34c
 800aed0:	2000b2fc 	.word	0x2000b2fc
 800aed4:	2000b300 	.word	0x2000b300
 800aed8:	2000b360 	.word	0x2000b360
 800aedc:	2000b368 	.word	0x2000b368
 800aee0:	2000b350 	.word	0x2000b350
 800aee4:	2000ae74 	.word	0x2000ae74
 800aee8:	2000ae70 	.word	0x2000ae70
 800aeec:	2000b358 	.word	0x2000b358
 800aef0:	2000b35c 	.word	0x2000b35c

0800aef4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aefa:	4b51      	ldr	r3, [pc, #324]	; (800b040 <vTaskSwitchContext+0x14c>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d003      	beq.n	800af0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af02:	4b50      	ldr	r3, [pc, #320]	; (800b044 <vTaskSwitchContext+0x150>)
 800af04:	2201      	movs	r2, #1
 800af06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af08:	e095      	b.n	800b036 <vTaskSwitchContext+0x142>
		xYieldPending = pdFALSE;
 800af0a:	4b4e      	ldr	r3, [pc, #312]	; (800b044 <vTaskSwitchContext+0x150>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800af10:	f7f6 fba9 	bl	8001666 <getRunTimeCounterValue>
 800af14:	4603      	mov	r3, r0
 800af16:	4a4c      	ldr	r2, [pc, #304]	; (800b048 <vTaskSwitchContext+0x154>)
 800af18:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800af1a:	4b4b      	ldr	r3, [pc, #300]	; (800b048 <vTaskSwitchContext+0x154>)
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	4b4b      	ldr	r3, [pc, #300]	; (800b04c <vTaskSwitchContext+0x158>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	429a      	cmp	r2, r3
 800af24:	d90b      	bls.n	800af3e <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800af26:	4b4a      	ldr	r3, [pc, #296]	; (800b050 <vTaskSwitchContext+0x15c>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
 800af2e:	4a46      	ldr	r2, [pc, #280]	; (800b048 <vTaskSwitchContext+0x154>)
 800af30:	6810      	ldr	r0, [r2, #0]
 800af32:	4a46      	ldr	r2, [pc, #280]	; (800b04c <vTaskSwitchContext+0x158>)
 800af34:	6812      	ldr	r2, [r2, #0]
 800af36:	1a82      	subs	r2, r0, r2
 800af38:	440a      	add	r2, r1
 800af3a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800af3e:	4b42      	ldr	r3, [pc, #264]	; (800b048 <vTaskSwitchContext+0x154>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a42      	ldr	r2, [pc, #264]	; (800b04c <vTaskSwitchContext+0x158>)
 800af44:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800af46:	4b42      	ldr	r3, [pc, #264]	; (800b050 <vTaskSwitchContext+0x15c>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af4c:	613b      	str	r3, [r7, #16]
 800af4e:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800af52:	60fb      	str	r3, [r7, #12]
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d111      	bne.n	800af82 <vTaskSwitchContext+0x8e>
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	3304      	adds	r3, #4
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	429a      	cmp	r2, r3
 800af68:	d10b      	bne.n	800af82 <vTaskSwitchContext+0x8e>
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	3308      	adds	r3, #8
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	429a      	cmp	r2, r3
 800af74:	d105      	bne.n	800af82 <vTaskSwitchContext+0x8e>
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	330c      	adds	r3, #12
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d008      	beq.n	800af94 <vTaskSwitchContext+0xa0>
 800af82:	4b33      	ldr	r3, [pc, #204]	; (800b050 <vTaskSwitchContext+0x15c>)
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	4b32      	ldr	r3, [pc, #200]	; (800b050 <vTaskSwitchContext+0x15c>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	3334      	adds	r3, #52	; 0x34
 800af8c:	4619      	mov	r1, r3
 800af8e:	4610      	mov	r0, r2
 800af90:	f7f6 fb7f 	bl	8001692 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800af94:	4b2e      	ldr	r3, [pc, #184]	; (800b050 <vTaskSwitchContext+0x15c>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a2e      	ldr	r2, [pc, #184]	; (800b054 <vTaskSwitchContext+0x160>)
 800af9a:	6812      	ldr	r2, [r2, #0]
 800af9c:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afa0:	4b2d      	ldr	r3, [pc, #180]	; (800b058 <vTaskSwitchContext+0x164>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	617b      	str	r3, [r7, #20]
 800afa6:	e010      	b.n	800afca <vTaskSwitchContext+0xd6>
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d10a      	bne.n	800afc4 <vTaskSwitchContext+0xd0>
	__asm volatile
 800afae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb2:	f383 8811 	msr	BASEPRI, r3
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	607b      	str	r3, [r7, #4]
}
 800afc0:	bf00      	nop
 800afc2:	e7fe      	b.n	800afc2 <vTaskSwitchContext+0xce>
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	3b01      	subs	r3, #1
 800afc8:	617b      	str	r3, [r7, #20]
 800afca:	4924      	ldr	r1, [pc, #144]	; (800b05c <vTaskSwitchContext+0x168>)
 800afcc:	697a      	ldr	r2, [r7, #20]
 800afce:	4613      	mov	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	4413      	add	r3, r2
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	440b      	add	r3, r1
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d0e4      	beq.n	800afa8 <vTaskSwitchContext+0xb4>
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	4613      	mov	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	4413      	add	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4a1c      	ldr	r2, [pc, #112]	; (800b05c <vTaskSwitchContext+0x168>)
 800afea:	4413      	add	r3, r2
 800afec:	60bb      	str	r3, [r7, #8]
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	685a      	ldr	r2, [r3, #4]
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	605a      	str	r2, [r3, #4]
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	3308      	adds	r3, #8
 800b000:	429a      	cmp	r2, r3
 800b002:	d104      	bne.n	800b00e <vTaskSwitchContext+0x11a>
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	685a      	ldr	r2, [r3, #4]
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	605a      	str	r2, [r3, #4]
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	4a0e      	ldr	r2, [pc, #56]	; (800b050 <vTaskSwitchContext+0x15c>)
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	4a0f      	ldr	r2, [pc, #60]	; (800b058 <vTaskSwitchContext+0x164>)
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800b01e:	4b0c      	ldr	r3, [pc, #48]	; (800b050 <vTaskSwitchContext+0x15c>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800b026:	4a0b      	ldr	r2, [pc, #44]	; (800b054 <vTaskSwitchContext+0x160>)
 800b028:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b02a:	4b09      	ldr	r3, [pc, #36]	; (800b050 <vTaskSwitchContext+0x15c>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b032:	4a0b      	ldr	r2, [pc, #44]	; (800b060 <vTaskSwitchContext+0x16c>)
 800b034:	6013      	str	r3, [r2, #0]
}
 800b036:	bf00      	nop
 800b038:	3718      	adds	r7, #24
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	2000b370 	.word	0x2000b370
 800b044:	2000b35c 	.word	0x2000b35c
 800b048:	2000b378 	.word	0x2000b378
 800b04c:	2000b374 	.word	0x2000b374
 800b050:	2000ae70 	.word	0x2000ae70
 800b054:	2000b344 	.word	0x2000b344
 800b058:	2000b350 	.word	0x2000b350
 800b05c:	2000ae74 	.word	0x2000ae74
 800b060:	20000010 	.word	0x20000010

0800b064 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10a      	bne.n	800b08a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b078:	f383 8811 	msr	BASEPRI, r3
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	60fb      	str	r3, [r7, #12]
}
 800b086:	bf00      	nop
 800b088:	e7fe      	b.n	800b088 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b08a:	4b07      	ldr	r3, [pc, #28]	; (800b0a8 <vTaskPlaceOnEventList+0x44>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	3318      	adds	r3, #24
 800b090:	4619      	mov	r1, r3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7fe fa55 	bl	8009542 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b098:	2101      	movs	r1, #1
 800b09a:	6838      	ldr	r0, [r7, #0]
 800b09c:	f000 faf2 	bl	800b684 <prvAddCurrentTaskToDelayedList>
}
 800b0a0:	bf00      	nop
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	2000ae70 	.word	0x2000ae70

0800b0ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d10a      	bne.n	800b0d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	617b      	str	r3, [r7, #20]
}
 800b0d0:	bf00      	nop
 800b0d2:	e7fe      	b.n	800b0d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0d4:	4b0a      	ldr	r3, [pc, #40]	; (800b100 <vTaskPlaceOnEventListRestricted+0x54>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	3318      	adds	r3, #24
 800b0da:	4619      	mov	r1, r3
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f7fe fa0c 	bl	80094fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b0ee:	6879      	ldr	r1, [r7, #4]
 800b0f0:	68b8      	ldr	r0, [r7, #8]
 800b0f2:	f000 fac7 	bl	800b684 <prvAddCurrentTaskToDelayedList>
	}
 800b0f6:	bf00      	nop
 800b0f8:	3718      	adds	r7, #24
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	2000ae70 	.word	0x2000ae70

0800b104 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d10a      	bne.n	800b130 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11e:	f383 8811 	msr	BASEPRI, r3
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	60fb      	str	r3, [r7, #12]
}
 800b12c:	bf00      	nop
 800b12e:	e7fe      	b.n	800b12e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	3318      	adds	r3, #24
 800b134:	4618      	mov	r0, r3
 800b136:	f7fe fa3d 	bl	80095b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b13a:	4b1f      	ldr	r3, [pc, #124]	; (800b1b8 <xTaskRemoveFromEventList+0xb4>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d11f      	bne.n	800b182 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	3304      	adds	r3, #4
 800b146:	4618      	mov	r0, r3
 800b148:	f7fe fa34 	bl	80095b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b150:	4b1a      	ldr	r3, [pc, #104]	; (800b1bc <xTaskRemoveFromEventList+0xb8>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	429a      	cmp	r2, r3
 800b156:	d903      	bls.n	800b160 <xTaskRemoveFromEventList+0x5c>
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15c:	4a17      	ldr	r2, [pc, #92]	; (800b1bc <xTaskRemoveFromEventList+0xb8>)
 800b15e:	6013      	str	r3, [r2, #0]
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b164:	4613      	mov	r3, r2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4413      	add	r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4a14      	ldr	r2, [pc, #80]	; (800b1c0 <xTaskRemoveFromEventList+0xbc>)
 800b16e:	441a      	add	r2, r3
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	3304      	adds	r3, #4
 800b174:	4619      	mov	r1, r3
 800b176:	4610      	mov	r0, r2
 800b178:	f7fe f9bf 	bl	80094fa <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800b17c:	f000 f9d0 	bl	800b520 <prvResetNextTaskUnblockTime>
 800b180:	e005      	b.n	800b18e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	3318      	adds	r3, #24
 800b186:	4619      	mov	r1, r3
 800b188:	480e      	ldr	r0, [pc, #56]	; (800b1c4 <xTaskRemoveFromEventList+0xc0>)
 800b18a:	f7fe f9b6 	bl	80094fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b192:	4b0d      	ldr	r3, [pc, #52]	; (800b1c8 <xTaskRemoveFromEventList+0xc4>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b198:	429a      	cmp	r2, r3
 800b19a:	d905      	bls.n	800b1a8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b19c:	2301      	movs	r3, #1
 800b19e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b1a0:	4b0a      	ldr	r3, [pc, #40]	; (800b1cc <xTaskRemoveFromEventList+0xc8>)
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	e001      	b.n	800b1ac <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b1ac:	697b      	ldr	r3, [r7, #20]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3718      	adds	r7, #24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	2000b370 	.word	0x2000b370
 800b1bc:	2000b350 	.word	0x2000b350
 800b1c0:	2000ae74 	.word	0x2000ae74
 800b1c4:	2000b304 	.word	0x2000b304
 800b1c8:	2000ae70 	.word	0x2000ae70
 800b1cc:	2000b35c 	.word	0x2000b35c

0800b1d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b1d8:	4b06      	ldr	r3, [pc, #24]	; (800b1f4 <vTaskInternalSetTimeOutState+0x24>)
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b1e0:	4b05      	ldr	r3, [pc, #20]	; (800b1f8 <vTaskInternalSetTimeOutState+0x28>)
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	605a      	str	r2, [r3, #4]
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr
 800b1f4:	2000b360 	.word	0x2000b360
 800b1f8:	2000b34c 	.word	0x2000b34c

0800b1fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b088      	sub	sp, #32
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d10a      	bne.n	800b222 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b210:	f383 8811 	msr	BASEPRI, r3
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	f3bf 8f4f 	dsb	sy
 800b21c:	613b      	str	r3, [r7, #16]
}
 800b21e:	bf00      	nop
 800b220:	e7fe      	b.n	800b220 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d10a      	bne.n	800b23e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b22c:	f383 8811 	msr	BASEPRI, r3
 800b230:	f3bf 8f6f 	isb	sy
 800b234:	f3bf 8f4f 	dsb	sy
 800b238:	60fb      	str	r3, [r7, #12]
}
 800b23a:	bf00      	nop
 800b23c:	e7fe      	b.n	800b23c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b23e:	f7fe fb11 	bl	8009864 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b242:	4b24      	ldr	r3, [pc, #144]	; (800b2d4 <xTaskCheckForTimeOut+0xd8>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	69ba      	ldr	r2, [r7, #24]
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800b252:	4b21      	ldr	r3, [pc, #132]	; (800b2d8 <xTaskCheckForTimeOut+0xdc>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d007      	beq.n	800b26e <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800b25e:	4b1e      	ldr	r3, [pc, #120]	; (800b2d8 <xTaskCheckForTimeOut+0xdc>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2200      	movs	r2, #0
 800b264:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
				xReturn = pdTRUE;
 800b268:	2301      	movs	r3, #1
 800b26a:	61fb      	str	r3, [r7, #28]
 800b26c:	e02b      	b.n	800b2c6 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b276:	d102      	bne.n	800b27e <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b278:	2300      	movs	r3, #0
 800b27a:	61fb      	str	r3, [r7, #28]
 800b27c:	e023      	b.n	800b2c6 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	4b16      	ldr	r3, [pc, #88]	; (800b2dc <xTaskCheckForTimeOut+0xe0>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	429a      	cmp	r2, r3
 800b288:	d007      	beq.n	800b29a <xTaskCheckForTimeOut+0x9e>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	69ba      	ldr	r2, [r7, #24]
 800b290:	429a      	cmp	r2, r3
 800b292:	d302      	bcc.n	800b29a <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b294:	2301      	movs	r3, #1
 800b296:	61fb      	str	r3, [r7, #28]
 800b298:	e015      	b.n	800b2c6 <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d20b      	bcs.n	800b2bc <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	1ad2      	subs	r2, r2, r3
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f7ff ff8d 	bl	800b1d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	61fb      	str	r3, [r7, #28]
 800b2ba:	e004      	b.n	800b2c6 <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b2c6:	f7fe fafd 	bl	80098c4 <vPortExitCritical>

	return xReturn;
 800b2ca:	69fb      	ldr	r3, [r7, #28]
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3720      	adds	r7, #32
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	2000b34c 	.word	0x2000b34c
 800b2d8:	2000ae70 	.word	0x2000ae70
 800b2dc:	2000b360 	.word	0x2000b360

0800b2e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b2e4:	4b03      	ldr	r3, [pc, #12]	; (800b2f4 <vTaskMissedYield+0x14>)
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	601a      	str	r2, [r3, #0]
}
 800b2ea:	bf00      	nop
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr
 800b2f4:	2000b35c 	.word	0x2000b35c

0800b2f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b300:	f000 f8aa 	bl	800b458 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b304:	4b19      	ldr	r3, [pc, #100]	; (800b36c <prvIdleTask+0x74>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d907      	bls.n	800b31c <prvIdleTask+0x24>
			{
				taskYIELD();
 800b30c:	4b18      	ldr	r3, [pc, #96]	; (800b370 <prvIdleTask+0x78>)
 800b30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b312:	601a      	str	r2, [r3, #0]
 800b314:	f3bf 8f4f 	dsb	sy
 800b318:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800b31c:	f7f6 f9ab 	bl	8001676 <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800b320:	f7ff fc18 	bl	800ab54 <prvGetExpectedIdleTime>
 800b324:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d9e9      	bls.n	800b300 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800b32c:	f7ff fc04 	bl	800ab38 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800b330:	4b10      	ldr	r3, [pc, #64]	; (800b374 <prvIdleTask+0x7c>)
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	4b10      	ldr	r3, [pc, #64]	; (800b378 <prvIdleTask+0x80>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d20a      	bcs.n	800b352 <prvIdleTask+0x5a>
	__asm volatile
 800b33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b340:	f383 8811 	msr	BASEPRI, r3
 800b344:	f3bf 8f6f 	isb	sy
 800b348:	f3bf 8f4f 	dsb	sy
 800b34c:	60bb      	str	r3, [r7, #8]
}
 800b34e:	bf00      	nop
 800b350:	e7fe      	b.n	800b350 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800b352:	f7ff fbff 	bl	800ab54 <prvGetExpectedIdleTime>
 800b356:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d902      	bls.n	800b364 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f7fe fb34 	bl	80099cc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800b364:	f7ff fc2e 	bl	800abc4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800b368:	e7ca      	b.n	800b300 <prvIdleTask+0x8>
 800b36a:	bf00      	nop
 800b36c:	2000ae74 	.word	0x2000ae74
 800b370:	e000ed04 	.word	0xe000ed04
 800b374:	2000b368 	.word	0x2000b368
 800b378:	2000b34c 	.word	0x2000b34c

0800b37c <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800b382:	2301      	movs	r3, #1
 800b384:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800b386:	2301      	movs	r3, #1
 800b388:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800b38a:	4b0f      	ldr	r3, [pc, #60]	; (800b3c8 <eTaskConfirmSleepModeStatus+0x4c>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d002      	beq.n	800b398 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800b392:	2300      	movs	r3, #0
 800b394:	71fb      	strb	r3, [r7, #7]
 800b396:	e010      	b.n	800b3ba <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800b398:	4b0c      	ldr	r3, [pc, #48]	; (800b3cc <eTaskConfirmSleepModeStatus+0x50>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d002      	beq.n	800b3a6 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	71fb      	strb	r3, [r7, #7]
 800b3a4:	e009      	b.n	800b3ba <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800b3a6:	4b0a      	ldr	r3, [pc, #40]	; (800b3d0 <eTaskConfirmSleepModeStatus+0x54>)
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	4b0a      	ldr	r3, [pc, #40]	; (800b3d4 <eTaskConfirmSleepModeStatus+0x58>)
 800b3ac:	6819      	ldr	r1, [r3, #0]
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	1acb      	subs	r3, r1, r3
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d101      	bne.n	800b3ba <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800b3b6:	2302      	movs	r3, #2
 800b3b8:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800b3ba:	79fb      	ldrb	r3, [r7, #7]
	}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr
 800b3c8:	2000b304 	.word	0x2000b304
 800b3cc:	2000b35c 	.word	0x2000b35c
 800b3d0:	2000b330 	.word	0x2000b330
 800b3d4:	2000b348 	.word	0x2000b348

0800b3d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3de:	2300      	movs	r3, #0
 800b3e0:	607b      	str	r3, [r7, #4]
 800b3e2:	e00c      	b.n	800b3fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	4613      	mov	r3, r2
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	4413      	add	r3, r2
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	4a12      	ldr	r2, [pc, #72]	; (800b438 <prvInitialiseTaskLists+0x60>)
 800b3f0:	4413      	add	r3, r2
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fe f854 	bl	80094a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	607b      	str	r3, [r7, #4]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b37      	cmp	r3, #55	; 0x37
 800b402:	d9ef      	bls.n	800b3e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b404:	480d      	ldr	r0, [pc, #52]	; (800b43c <prvInitialiseTaskLists+0x64>)
 800b406:	f7fe f84b 	bl	80094a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b40a:	480d      	ldr	r0, [pc, #52]	; (800b440 <prvInitialiseTaskLists+0x68>)
 800b40c:	f7fe f848 	bl	80094a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b410:	480c      	ldr	r0, [pc, #48]	; (800b444 <prvInitialiseTaskLists+0x6c>)
 800b412:	f7fe f845 	bl	80094a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b416:	480c      	ldr	r0, [pc, #48]	; (800b448 <prvInitialiseTaskLists+0x70>)
 800b418:	f7fe f842 	bl	80094a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b41c:	480b      	ldr	r0, [pc, #44]	; (800b44c <prvInitialiseTaskLists+0x74>)
 800b41e:	f7fe f83f 	bl	80094a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b422:	4b0b      	ldr	r3, [pc, #44]	; (800b450 <prvInitialiseTaskLists+0x78>)
 800b424:	4a05      	ldr	r2, [pc, #20]	; (800b43c <prvInitialiseTaskLists+0x64>)
 800b426:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b428:	4b0a      	ldr	r3, [pc, #40]	; (800b454 <prvInitialiseTaskLists+0x7c>)
 800b42a:	4a05      	ldr	r2, [pc, #20]	; (800b440 <prvInitialiseTaskLists+0x68>)
 800b42c:	601a      	str	r2, [r3, #0]
}
 800b42e:	bf00      	nop
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	2000ae74 	.word	0x2000ae74
 800b43c:	2000b2d4 	.word	0x2000b2d4
 800b440:	2000b2e8 	.word	0x2000b2e8
 800b444:	2000b304 	.word	0x2000b304
 800b448:	2000b318 	.word	0x2000b318
 800b44c:	2000b330 	.word	0x2000b330
 800b450:	2000b2fc 	.word	0x2000b2fc
 800b454:	2000b300 	.word	0x2000b300

0800b458 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b45e:	e019      	b.n	800b494 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b460:	f7fe fa00 	bl	8009864 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b464:	4b10      	ldr	r3, [pc, #64]	; (800b4a8 <prvCheckTasksWaitingTermination+0x50>)
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	3304      	adds	r3, #4
 800b470:	4618      	mov	r0, r3
 800b472:	f7fe f89f 	bl	80095b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b476:	4b0d      	ldr	r3, [pc, #52]	; (800b4ac <prvCheckTasksWaitingTermination+0x54>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	3b01      	subs	r3, #1
 800b47c:	4a0b      	ldr	r2, [pc, #44]	; (800b4ac <prvCheckTasksWaitingTermination+0x54>)
 800b47e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b480:	4b0b      	ldr	r3, [pc, #44]	; (800b4b0 <prvCheckTasksWaitingTermination+0x58>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	3b01      	subs	r3, #1
 800b486:	4a0a      	ldr	r2, [pc, #40]	; (800b4b0 <prvCheckTasksWaitingTermination+0x58>)
 800b488:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b48a:	f7fe fa1b 	bl	80098c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 f810 	bl	800b4b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b494:	4b06      	ldr	r3, [pc, #24]	; (800b4b0 <prvCheckTasksWaitingTermination+0x58>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1e1      	bne.n	800b460 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b49c:	bf00      	nop
 800b49e:	bf00      	nop
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	2000b318 	.word	0x2000b318
 800b4ac:	2000b348 	.word	0x2000b348
 800b4b0:	2000b32c 	.word	0x2000b32c

0800b4b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f000 fd8c 	bl	800bfe0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d108      	bne.n	800b4e4 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7fd fec4 	bl	8009264 <vPortFree>
				vPortFree( pxTCB );
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f7fd fec1 	bl	8009264 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b4e2:	e018      	b.n	800b516 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d103      	bne.n	800b4f6 <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7fd feb8 	bl	8009264 <vPortFree>
	}
 800b4f4:	e00f      	b.n	800b516 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	d00a      	beq.n	800b516 <prvDeleteTCB+0x62>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	60fb      	str	r3, [r7, #12]
}
 800b512:	bf00      	nop
 800b514:	e7fe      	b.n	800b514 <prvDeleteTCB+0x60>
	}
 800b516:	bf00      	nop
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
	...

0800b520 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b526:	4b0c      	ldr	r3, [pc, #48]	; (800b558 <prvResetNextTaskUnblockTime+0x38>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d104      	bne.n	800b53a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b530:	4b0a      	ldr	r3, [pc, #40]	; (800b55c <prvResetNextTaskUnblockTime+0x3c>)
 800b532:	f04f 32ff 	mov.w	r2, #4294967295
 800b536:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b538:	e008      	b.n	800b54c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b53a:	4b07      	ldr	r3, [pc, #28]	; (800b558 <prvResetNextTaskUnblockTime+0x38>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	4a04      	ldr	r2, [pc, #16]	; (800b55c <prvResetNextTaskUnblockTime+0x3c>)
 800b54a:	6013      	str	r3, [r2, #0]
}
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr
 800b558:	2000b2fc 	.word	0x2000b2fc
 800b55c:	2000b368 	.word	0x2000b368

0800b560 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b566:	4b0b      	ldr	r3, [pc, #44]	; (800b594 <xTaskGetSchedulerState+0x34>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d102      	bne.n	800b574 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b56e:	2301      	movs	r3, #1
 800b570:	607b      	str	r3, [r7, #4]
 800b572:	e008      	b.n	800b586 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b574:	4b08      	ldr	r3, [pc, #32]	; (800b598 <xTaskGetSchedulerState+0x38>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d102      	bne.n	800b582 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b57c:	2302      	movs	r3, #2
 800b57e:	607b      	str	r3, [r7, #4]
 800b580:	e001      	b.n	800b586 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b582:	2300      	movs	r3, #0
 800b584:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b586:	687b      	ldr	r3, [r7, #4]
	}
 800b588:	4618      	mov	r0, r3
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr
 800b594:	2000b354 	.word	0x2000b354
 800b598:	2000b370 	.word	0x2000b370

0800b59c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b086      	sub	sp, #24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d05c      	beq.n	800b66c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b5b2:	4b31      	ldr	r3, [pc, #196]	; (800b678 <xTaskPriorityDisinherit+0xdc>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	693a      	ldr	r2, [r7, #16]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d00a      	beq.n	800b5d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c0:	f383 8811 	msr	BASEPRI, r3
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	60fb      	str	r3, [r7, #12]
}
 800b5ce:	bf00      	nop
 800b5d0:	e7fe      	b.n	800b5d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10a      	bne.n	800b5f2 <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	60bb      	str	r3, [r7, #8]
}
 800b5ee:	bf00      	nop
 800b5f0:	e7fe      	b.n	800b5f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800b5f8:	1e5a      	subs	r2, r3, #1
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d02e      	beq.n	800b66c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800b614:	2b00      	cmp	r3, #0
 800b616:	d129      	bne.n	800b66c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	3304      	adds	r3, #4
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7fd ffc9 	bl	80095b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b630:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b63c:	4b0f      	ldr	r3, [pc, #60]	; (800b67c <xTaskPriorityDisinherit+0xe0>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	429a      	cmp	r2, r3
 800b642:	d903      	bls.n	800b64c <xTaskPriorityDisinherit+0xb0>
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b648:	4a0c      	ldr	r2, [pc, #48]	; (800b67c <xTaskPriorityDisinherit+0xe0>)
 800b64a:	6013      	str	r3, [r2, #0]
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b650:	4613      	mov	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	4413      	add	r3, r2
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	4a09      	ldr	r2, [pc, #36]	; (800b680 <xTaskPriorityDisinherit+0xe4>)
 800b65a:	441a      	add	r2, r3
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	3304      	adds	r3, #4
 800b660:	4619      	mov	r1, r3
 800b662:	4610      	mov	r0, r2
 800b664:	f7fd ff49 	bl	80094fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b668:	2301      	movs	r3, #1
 800b66a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b66c:	697b      	ldr	r3, [r7, #20]
	}
 800b66e:	4618      	mov	r0, r3
 800b670:	3718      	adds	r7, #24
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	2000ae70 	.word	0x2000ae70
 800b67c:	2000b350 	.word	0x2000b350
 800b680:	2000ae74 	.word	0x2000ae74

0800b684 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b084      	sub	sp, #16
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b68e:	4b24      	ldr	r3, [pc, #144]	; (800b720 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800b694:	4b23      	ldr	r3, [pc, #140]	; (800b724 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2200      	movs	r2, #0
 800b69a:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b69e:	4b21      	ldr	r3, [pc, #132]	; (800b724 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3304      	adds	r3, #4
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7fd ff85 	bl	80095b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6b0:	d10a      	bne.n	800b6c8 <prvAddCurrentTaskToDelayedList+0x44>
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d007      	beq.n	800b6c8 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6b8:	4b1a      	ldr	r3, [pc, #104]	; (800b724 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	3304      	adds	r3, #4
 800b6be:	4619      	mov	r1, r3
 800b6c0:	4819      	ldr	r0, [pc, #100]	; (800b728 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6c2:	f7fd ff1a 	bl	80094fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b6c6:	e026      	b.n	800b716 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b6d0:	4b14      	ldr	r3, [pc, #80]	; (800b724 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d209      	bcs.n	800b6f4 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6e0:	4b12      	ldr	r3, [pc, #72]	; (800b72c <prvAddCurrentTaskToDelayedList+0xa8>)
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	4b0f      	ldr	r3, [pc, #60]	; (800b724 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	3304      	adds	r3, #4
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	f7fd ff28 	bl	8009542 <vListInsert>
}
 800b6f2:	e010      	b.n	800b716 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6f4:	4b0e      	ldr	r3, [pc, #56]	; (800b730 <prvAddCurrentTaskToDelayedList+0xac>)
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	4b0a      	ldr	r3, [pc, #40]	; (800b724 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	4619      	mov	r1, r3
 800b700:	4610      	mov	r0, r2
 800b702:	f7fd ff1e 	bl	8009542 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b706:	4b0b      	ldr	r3, [pc, #44]	; (800b734 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68ba      	ldr	r2, [r7, #8]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d202      	bcs.n	800b716 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800b710:	4a08      	ldr	r2, [pc, #32]	; (800b734 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	6013      	str	r3, [r2, #0]
}
 800b716:	bf00      	nop
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	2000b34c 	.word	0x2000b34c
 800b724:	2000ae70 	.word	0x2000ae70
 800b728:	2000b330 	.word	0x2000b330
 800b72c:	2000b300 	.word	0x2000b300
 800b730:	2000b2fc 	.word	0x2000b2fc
 800b734:	2000b368 	.word	0x2000b368

0800b738 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b08a      	sub	sp, #40	; 0x28
 800b73c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b73e:	2300      	movs	r3, #0
 800b740:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b742:	f000 fba3 	bl	800be8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b746:	4b1c      	ldr	r3, [pc, #112]	; (800b7b8 <xTimerCreateTimerTask+0x80>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d021      	beq.n	800b792 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b74e:	2300      	movs	r3, #0
 800b750:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b752:	2300      	movs	r3, #0
 800b754:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b756:	1d3a      	adds	r2, r7, #4
 800b758:	f107 0108 	add.w	r1, r7, #8
 800b75c:	f107 030c 	add.w	r3, r7, #12
 800b760:	4618      	mov	r0, r3
 800b762:	f7fd fc43 	bl	8008fec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b766:	6879      	ldr	r1, [r7, #4]
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	9202      	str	r2, [sp, #8]
 800b76e:	9301      	str	r3, [sp, #4]
 800b770:	2302      	movs	r3, #2
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	2300      	movs	r3, #0
 800b776:	460a      	mov	r2, r1
 800b778:	4910      	ldr	r1, [pc, #64]	; (800b7bc <xTimerCreateTimerTask+0x84>)
 800b77a:	4811      	ldr	r0, [pc, #68]	; (800b7c0 <xTimerCreateTimerTask+0x88>)
 800b77c:	f7fe ff64 	bl	800a648 <xTaskCreateStatic>
 800b780:	4603      	mov	r3, r0
 800b782:	4a10      	ldr	r2, [pc, #64]	; (800b7c4 <xTimerCreateTimerTask+0x8c>)
 800b784:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b786:	4b0f      	ldr	r3, [pc, #60]	; (800b7c4 <xTimerCreateTimerTask+0x8c>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d001      	beq.n	800b792 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b78e:	2301      	movs	r3, #1
 800b790:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d10a      	bne.n	800b7ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79c:	f383 8811 	msr	BASEPRI, r3
 800b7a0:	f3bf 8f6f 	isb	sy
 800b7a4:	f3bf 8f4f 	dsb	sy
 800b7a8:	613b      	str	r3, [r7, #16]
}
 800b7aa:	bf00      	nop
 800b7ac:	e7fe      	b.n	800b7ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b7ae:	697b      	ldr	r3, [r7, #20]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3718      	adds	r7, #24
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	2000b3ac 	.word	0x2000b3ac
 800b7bc:	0800c680 	.word	0x0800c680
 800b7c0:	0800ba31 	.word	0x0800ba31
 800b7c4:	2000b3b0 	.word	0x2000b3b0

0800b7c8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b088      	sub	sp, #32
 800b7cc:	af02      	add	r7, sp, #8
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
 800b7d4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b7d6:	202c      	movs	r0, #44	; 0x2c
 800b7d8:	f7fd fc74 	bl	80090c4 <pvPortMalloc>
 800b7dc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00d      	beq.n	800b800 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	9301      	str	r3, [sp, #4]
 800b7f0:	6a3b      	ldr	r3, [r7, #32]
 800b7f2:	9300      	str	r3, [sp, #0]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	68b9      	ldr	r1, [r7, #8]
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f000 f843 	bl	800b886 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b800:	697b      	ldr	r3, [r7, #20]
	}
 800b802:	4618      	mov	r0, r3
 800b804:	3718      	adds	r7, #24
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}

0800b80a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b08a      	sub	sp, #40	; 0x28
 800b80e:	af02      	add	r7, sp, #8
 800b810:	60f8      	str	r0, [r7, #12]
 800b812:	60b9      	str	r1, [r7, #8]
 800b814:	607a      	str	r2, [r7, #4]
 800b816:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b818:	232c      	movs	r3, #44	; 0x2c
 800b81a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	2b2c      	cmp	r3, #44	; 0x2c
 800b820:	d00a      	beq.n	800b838 <xTimerCreateStatic+0x2e>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	61bb      	str	r3, [r7, #24]
}
 800b834:	bf00      	nop
 800b836:	e7fe      	b.n	800b836 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b838:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10a      	bne.n	800b856 <xTimerCreateStatic+0x4c>
	__asm volatile
 800b840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b844:	f383 8811 	msr	BASEPRI, r3
 800b848:	f3bf 8f6f 	isb	sy
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	617b      	str	r3, [r7, #20]
}
 800b852:	bf00      	nop
 800b854:	e7fe      	b.n	800b854 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800b856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b858:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00d      	beq.n	800b87c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	2202      	movs	r2, #2
 800b864:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	9301      	str	r3, [sp, #4]
 800b86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86e:	9300      	str	r3, [sp, #0]
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	68b9      	ldr	r1, [r7, #8]
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f000 f805 	bl	800b886 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b87c:	69fb      	ldr	r3, [r7, #28]
	}
 800b87e:	4618      	mov	r0, r3
 800b880:	3720      	adds	r7, #32
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b086      	sub	sp, #24
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	60f8      	str	r0, [r7, #12]
 800b88e:	60b9      	str	r1, [r7, #8]
 800b890:	607a      	str	r2, [r7, #4]
 800b892:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d10a      	bne.n	800b8b0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	617b      	str	r3, [r7, #20]
}
 800b8ac:	bf00      	nop
 800b8ae:	e7fe      	b.n	800b8ae <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d01e      	beq.n	800b8f4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b8b6:	f000 fae9 	bl	800be8c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c8:	683a      	ldr	r2, [r7, #0]
 800b8ca:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ce:	6a3a      	ldr	r2, [r7, #32]
 800b8d0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fd fe02 	bl	80094e0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d008      	beq.n	800b8f4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8e8:	f043 0304 	orr.w	r3, r3, #4
 800b8ec:	b2da      	uxtb	r2, r3
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b8f4:	bf00      	nop
 800b8f6:	3718      	adds	r7, #24
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08a      	sub	sp, #40	; 0x28
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
 800b908:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b90a:	2300      	movs	r3, #0
 800b90c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10a      	bne.n	800b92a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b918:	f383 8811 	msr	BASEPRI, r3
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	623b      	str	r3, [r7, #32]
}
 800b926:	bf00      	nop
 800b928:	e7fe      	b.n	800b928 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b92a:	4b1a      	ldr	r3, [pc, #104]	; (800b994 <xTimerGenericCommand+0x98>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d02a      	beq.n	800b988 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	2b05      	cmp	r3, #5
 800b942:	dc18      	bgt.n	800b976 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b944:	f7ff fe0c 	bl	800b560 <xTaskGetSchedulerState>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	d109      	bne.n	800b962 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b94e:	4b11      	ldr	r3, [pc, #68]	; (800b994 <xTimerGenericCommand+0x98>)
 800b950:	6818      	ldr	r0, [r3, #0]
 800b952:	f107 0110 	add.w	r1, r7, #16
 800b956:	2300      	movs	r3, #0
 800b958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b95a:	f7fe fa8d 	bl	8009e78 <xQueueGenericSend>
 800b95e:	6278      	str	r0, [r7, #36]	; 0x24
 800b960:	e012      	b.n	800b988 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b962:	4b0c      	ldr	r3, [pc, #48]	; (800b994 <xTimerGenericCommand+0x98>)
 800b964:	6818      	ldr	r0, [r3, #0]
 800b966:	f107 0110 	add.w	r1, r7, #16
 800b96a:	2300      	movs	r3, #0
 800b96c:	2200      	movs	r2, #0
 800b96e:	f7fe fa83 	bl	8009e78 <xQueueGenericSend>
 800b972:	6278      	str	r0, [r7, #36]	; 0x24
 800b974:	e008      	b.n	800b988 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b976:	4b07      	ldr	r3, [pc, #28]	; (800b994 <xTimerGenericCommand+0x98>)
 800b978:	6818      	ldr	r0, [r3, #0]
 800b97a:	f107 0110 	add.w	r1, r7, #16
 800b97e:	2300      	movs	r3, #0
 800b980:	683a      	ldr	r2, [r7, #0]
 800b982:	f7fe fb77 	bl	800a074 <xQueueGenericSendFromISR>
 800b986:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3728      	adds	r7, #40	; 0x28
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	2000b3ac 	.word	0x2000b3ac

0800b998 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b088      	sub	sp, #32
 800b99c:	af02      	add	r7, sp, #8
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9a2:	4b22      	ldr	r3, [pc, #136]	; (800ba2c <prvProcessExpiredTimer+0x94>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7fd fdff 	bl	80095b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9bc:	f003 0304 	and.w	r3, r3, #4
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d022      	beq.n	800ba0a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	699a      	ldr	r2, [r3, #24]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	18d1      	adds	r1, r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	683a      	ldr	r2, [r7, #0]
 800b9d0:	6978      	ldr	r0, [r7, #20]
 800b9d2:	f000 f8d3 	bl	800bb7c <prvInsertTimerInActiveList>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d01f      	beq.n	800ba1c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9dc:	2300      	movs	r3, #0
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	6978      	ldr	r0, [r7, #20]
 800b9e8:	f7ff ff88 	bl	800b8fc <xTimerGenericCommand>
 800b9ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d113      	bne.n	800ba1c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f8:	f383 8811 	msr	BASEPRI, r3
 800b9fc:	f3bf 8f6f 	isb	sy
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	60fb      	str	r3, [r7, #12]
}
 800ba06:	bf00      	nop
 800ba08:	e7fe      	b.n	800ba08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba10:	f023 0301 	bic.w	r3, r3, #1
 800ba14:	b2da      	uxtb	r2, r3
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	6a1b      	ldr	r3, [r3, #32]
 800ba20:	6978      	ldr	r0, [r7, #20]
 800ba22:	4798      	blx	r3
}
 800ba24:	bf00      	nop
 800ba26:	3718      	adds	r7, #24
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	2000b3a4 	.word	0x2000b3a4

0800ba30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 800ba38:	f7f5 fe3d 	bl	80016b6 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba3c:	f107 0308 	add.w	r3, r7, #8
 800ba40:	4618      	mov	r0, r3
 800ba42:	f000 f857 	bl	800baf4 <prvGetNextExpireTime>
 800ba46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f000 f803 	bl	800ba58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ba52:	f000 f8d5 	bl	800bc00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba56:	e7f1      	b.n	800ba3c <prvTimerTask+0xc>

0800ba58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ba62:	f7ff f869 	bl	800ab38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba66:	f107 0308 	add.w	r3, r7, #8
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f000 f866 	bl	800bb3c <prvSampleTimeNow>
 800ba70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d130      	bne.n	800bada <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d10a      	bne.n	800ba94 <prvProcessTimerOrBlockTask+0x3c>
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d806      	bhi.n	800ba94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ba86:	f7ff f89d 	bl	800abc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ba8a:	68f9      	ldr	r1, [r7, #12]
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f7ff ff83 	bl	800b998 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ba92:	e024      	b.n	800bade <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d008      	beq.n	800baac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba9a:	4b13      	ldr	r3, [pc, #76]	; (800bae8 <prvProcessTimerOrBlockTask+0x90>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d101      	bne.n	800baa8 <prvProcessTimerOrBlockTask+0x50>
 800baa4:	2301      	movs	r3, #1
 800baa6:	e000      	b.n	800baaa <prvProcessTimerOrBlockTask+0x52>
 800baa8:	2300      	movs	r3, #0
 800baaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800baac:	4b0f      	ldr	r3, [pc, #60]	; (800baec <prvProcessTimerOrBlockTask+0x94>)
 800baae:	6818      	ldr	r0, [r3, #0]
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	4619      	mov	r1, r3
 800baba:	f7fe fd91 	bl	800a5e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800babe:	f7ff f881 	bl	800abc4 <xTaskResumeAll>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10a      	bne.n	800bade <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bac8:	4b09      	ldr	r3, [pc, #36]	; (800baf0 <prvProcessTimerOrBlockTask+0x98>)
 800baca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bace:	601a      	str	r2, [r3, #0]
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	f3bf 8f6f 	isb	sy
}
 800bad8:	e001      	b.n	800bade <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bada:	f7ff f873 	bl	800abc4 <xTaskResumeAll>
}
 800bade:	bf00      	nop
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	2000b3a8 	.word	0x2000b3a8
 800baec:	2000b3ac 	.word	0x2000b3ac
 800baf0:	e000ed04 	.word	0xe000ed04

0800baf4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bafc:	4b0e      	ldr	r3, [pc, #56]	; (800bb38 <prvGetNextExpireTime+0x44>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d101      	bne.n	800bb0a <prvGetNextExpireTime+0x16>
 800bb06:	2201      	movs	r2, #1
 800bb08:	e000      	b.n	800bb0c <prvGetNextExpireTime+0x18>
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d105      	bne.n	800bb24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb18:	4b07      	ldr	r3, [pc, #28]	; (800bb38 <prvGetNextExpireTime+0x44>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	60fb      	str	r3, [r7, #12]
 800bb22:	e001      	b.n	800bb28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bb24:	2300      	movs	r3, #0
 800bb26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bb28:	68fb      	ldr	r3, [r7, #12]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3714      	adds	r7, #20
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	2000b3a4 	.word	0x2000b3a4

0800bb3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bb44:	f7ff f8dc 	bl	800ad00 <xTaskGetTickCount>
 800bb48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bb4a:	4b0b      	ldr	r3, [pc, #44]	; (800bb78 <prvSampleTimeNow+0x3c>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d205      	bcs.n	800bb60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bb54:	f000 f936 	bl	800bdc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	601a      	str	r2, [r3, #0]
 800bb5e:	e002      	b.n	800bb66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bb66:	4a04      	ldr	r2, [pc, #16]	; (800bb78 <prvSampleTimeNow+0x3c>)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	2000b3b4 	.word	0x2000b3b4

0800bb7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b086      	sub	sp, #24
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	607a      	str	r2, [r7, #4]
 800bb88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d812      	bhi.n	800bbc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	1ad2      	subs	r2, r2, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	699b      	ldr	r3, [r3, #24]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d302      	bcc.n	800bbb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	617b      	str	r3, [r7, #20]
 800bbb4:	e01b      	b.n	800bbee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bbb6:	4b10      	ldr	r3, [pc, #64]	; (800bbf8 <prvInsertTimerInActiveList+0x7c>)
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	3304      	adds	r3, #4
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	4610      	mov	r0, r2
 800bbc2:	f7fd fcbe 	bl	8009542 <vListInsert>
 800bbc6:	e012      	b.n	800bbee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d206      	bcs.n	800bbde <prvInsertTimerInActiveList+0x62>
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d302      	bcc.n	800bbde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	617b      	str	r3, [r7, #20]
 800bbdc:	e007      	b.n	800bbee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbde:	4b07      	ldr	r3, [pc, #28]	; (800bbfc <prvInsertTimerInActiveList+0x80>)
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	3304      	adds	r3, #4
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	4610      	mov	r0, r2
 800bbea:	f7fd fcaa 	bl	8009542 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bbee:	697b      	ldr	r3, [r7, #20]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3718      	adds	r7, #24
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	2000b3a8 	.word	0x2000b3a8
 800bbfc:	2000b3a4 	.word	0x2000b3a4

0800bc00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b08e      	sub	sp, #56	; 0x38
 800bc04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc06:	e0ca      	b.n	800bd9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	da18      	bge.n	800bc40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bc0e:	1d3b      	adds	r3, r7, #4
 800bc10:	3304      	adds	r3, #4
 800bc12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d10a      	bne.n	800bc30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1e:	f383 8811 	msr	BASEPRI, r3
 800bc22:	f3bf 8f6f 	isb	sy
 800bc26:	f3bf 8f4f 	dsb	sy
 800bc2a:	61fb      	str	r3, [r7, #28]
}
 800bc2c:	bf00      	nop
 800bc2e:	e7fe      	b.n	800bc2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc36:	6850      	ldr	r0, [r2, #4]
 800bc38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc3a:	6892      	ldr	r2, [r2, #8]
 800bc3c:	4611      	mov	r1, r2
 800bc3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f2c0 80aa 	blt.w	800bd9c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4e:	695b      	ldr	r3, [r3, #20]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d004      	beq.n	800bc5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc56:	3304      	adds	r3, #4
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7fd fcab 	bl	80095b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc5e:	463b      	mov	r3, r7
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7ff ff6b 	bl	800bb3c <prvSampleTimeNow>
 800bc66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b09      	cmp	r3, #9
 800bc6c:	f200 8097 	bhi.w	800bd9e <prvProcessReceivedCommands+0x19e>
 800bc70:	a201      	add	r2, pc, #4	; (adr r2, 800bc78 <prvProcessReceivedCommands+0x78>)
 800bc72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc76:	bf00      	nop
 800bc78:	0800bca1 	.word	0x0800bca1
 800bc7c:	0800bca1 	.word	0x0800bca1
 800bc80:	0800bca1 	.word	0x0800bca1
 800bc84:	0800bd15 	.word	0x0800bd15
 800bc88:	0800bd29 	.word	0x0800bd29
 800bc8c:	0800bd73 	.word	0x0800bd73
 800bc90:	0800bca1 	.word	0x0800bca1
 800bc94:	0800bca1 	.word	0x0800bca1
 800bc98:	0800bd15 	.word	0x0800bd15
 800bc9c:	0800bd29 	.word	0x0800bd29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bca6:	f043 0301 	orr.w	r3, r3, #1
 800bcaa:	b2da      	uxtb	r2, r3
 800bcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bcb2:	68ba      	ldr	r2, [r7, #8]
 800bcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb6:	699b      	ldr	r3, [r3, #24]
 800bcb8:	18d1      	adds	r1, r2, r3
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcc0:	f7ff ff5c 	bl	800bb7c <prvInsertTimerInActiveList>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d069      	beq.n	800bd9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bccc:	6a1b      	ldr	r3, [r3, #32]
 800bcce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcd8:	f003 0304 	and.w	r3, r3, #4
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d05e      	beq.n	800bd9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bce0:	68ba      	ldr	r2, [r7, #8]
 800bce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce4:	699b      	ldr	r3, [r3, #24]
 800bce6:	441a      	add	r2, r3
 800bce8:	2300      	movs	r3, #0
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	2300      	movs	r3, #0
 800bcee:	2100      	movs	r1, #0
 800bcf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcf2:	f7ff fe03 	bl	800b8fc <xTimerGenericCommand>
 800bcf6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bcf8:	6a3b      	ldr	r3, [r7, #32]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d14f      	bne.n	800bd9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd02:	f383 8811 	msr	BASEPRI, r3
 800bd06:	f3bf 8f6f 	isb	sy
 800bd0a:	f3bf 8f4f 	dsb	sy
 800bd0e:	61bb      	str	r3, [r7, #24]
}
 800bd10:	bf00      	nop
 800bd12:	e7fe      	b.n	800bd12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd1a:	f023 0301 	bic.w	r3, r3, #1
 800bd1e:	b2da      	uxtb	r2, r3
 800bd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bd26:	e03a      	b.n	800bd9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd2e:	f043 0301 	orr.w	r3, r3, #1
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd3a:	68ba      	ldr	r2, [r7, #8]
 800bd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	699b      	ldr	r3, [r3, #24]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d10a      	bne.n	800bd5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4c:	f383 8811 	msr	BASEPRI, r3
 800bd50:	f3bf 8f6f 	isb	sy
 800bd54:	f3bf 8f4f 	dsb	sy
 800bd58:	617b      	str	r3, [r7, #20]
}
 800bd5a:	bf00      	nop
 800bd5c:	e7fe      	b.n	800bd5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd60:	699a      	ldr	r2, [r3, #24]
 800bd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd64:	18d1      	adds	r1, r2, r3
 800bd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd6c:	f7ff ff06 	bl	800bb7c <prvInsertTimerInActiveList>
					break;
 800bd70:	e015      	b.n	800bd9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd78:	f003 0302 	and.w	r3, r3, #2
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d103      	bne.n	800bd88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bd80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd82:	f7fd fa6f 	bl	8009264 <vPortFree>
 800bd86:	e00a      	b.n	800bd9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd8e:	f023 0301 	bic.w	r3, r3, #1
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bd9a:	e000      	b.n	800bd9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bd9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd9e:	4b08      	ldr	r3, [pc, #32]	; (800bdc0 <prvProcessReceivedCommands+0x1c0>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	1d39      	adds	r1, r7, #4
 800bda4:	2200      	movs	r2, #0
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fe fa00 	bl	800a1ac <xQueueReceive>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f47f af2a 	bne.w	800bc08 <prvProcessReceivedCommands+0x8>
	}
}
 800bdb4:	bf00      	nop
 800bdb6:	bf00      	nop
 800bdb8:	3730      	adds	r7, #48	; 0x30
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	2000b3ac 	.word	0x2000b3ac

0800bdc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b088      	sub	sp, #32
 800bdc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bdca:	e048      	b.n	800be5e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bdcc:	4b2d      	ldr	r3, [pc, #180]	; (800be84 <prvSwitchTimerLists+0xc0>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	68db      	ldr	r3, [r3, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdd6:	4b2b      	ldr	r3, [pc, #172]	; (800be84 <prvSwitchTimerLists+0xc0>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	3304      	adds	r3, #4
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7fd fbe5 	bl	80095b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	6a1b      	ldr	r3, [r3, #32]
 800bdee:	68f8      	ldr	r0, [r7, #12]
 800bdf0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdf8:	f003 0304 	and.w	r3, r3, #4
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d02e      	beq.n	800be5e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	693a      	ldr	r2, [r7, #16]
 800be06:	4413      	add	r3, r2
 800be08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d90e      	bls.n	800be30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	68fa      	ldr	r2, [r7, #12]
 800be1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be1e:	4b19      	ldr	r3, [pc, #100]	; (800be84 <prvSwitchTimerLists+0xc0>)
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	3304      	adds	r3, #4
 800be26:	4619      	mov	r1, r3
 800be28:	4610      	mov	r0, r2
 800be2a:	f7fd fb8a 	bl	8009542 <vListInsert>
 800be2e:	e016      	b.n	800be5e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be30:	2300      	movs	r3, #0
 800be32:	9300      	str	r3, [sp, #0]
 800be34:	2300      	movs	r3, #0
 800be36:	693a      	ldr	r2, [r7, #16]
 800be38:	2100      	movs	r1, #0
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f7ff fd5e 	bl	800b8fc <xTimerGenericCommand>
 800be40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d10a      	bne.n	800be5e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800be48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4c:	f383 8811 	msr	BASEPRI, r3
 800be50:	f3bf 8f6f 	isb	sy
 800be54:	f3bf 8f4f 	dsb	sy
 800be58:	603b      	str	r3, [r7, #0]
}
 800be5a:	bf00      	nop
 800be5c:	e7fe      	b.n	800be5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be5e:	4b09      	ldr	r3, [pc, #36]	; (800be84 <prvSwitchTimerLists+0xc0>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1b1      	bne.n	800bdcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be68:	4b06      	ldr	r3, [pc, #24]	; (800be84 <prvSwitchTimerLists+0xc0>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800be6e:	4b06      	ldr	r3, [pc, #24]	; (800be88 <prvSwitchTimerLists+0xc4>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a04      	ldr	r2, [pc, #16]	; (800be84 <prvSwitchTimerLists+0xc0>)
 800be74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800be76:	4a04      	ldr	r2, [pc, #16]	; (800be88 <prvSwitchTimerLists+0xc4>)
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	6013      	str	r3, [r2, #0]
}
 800be7c:	bf00      	nop
 800be7e:	3718      	adds	r7, #24
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	2000b3a4 	.word	0x2000b3a4
 800be88:	2000b3a8 	.word	0x2000b3a8

0800be8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800be92:	f7fd fce7 	bl	8009864 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800be96:	4b15      	ldr	r3, [pc, #84]	; (800beec <prvCheckForValidListAndQueue+0x60>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d120      	bne.n	800bee0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800be9e:	4814      	ldr	r0, [pc, #80]	; (800bef0 <prvCheckForValidListAndQueue+0x64>)
 800bea0:	f7fd fafe 	bl	80094a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bea4:	4813      	ldr	r0, [pc, #76]	; (800bef4 <prvCheckForValidListAndQueue+0x68>)
 800bea6:	f7fd fafb 	bl	80094a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800beaa:	4b13      	ldr	r3, [pc, #76]	; (800bef8 <prvCheckForValidListAndQueue+0x6c>)
 800beac:	4a10      	ldr	r2, [pc, #64]	; (800bef0 <prvCheckForValidListAndQueue+0x64>)
 800beae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800beb0:	4b12      	ldr	r3, [pc, #72]	; (800befc <prvCheckForValidListAndQueue+0x70>)
 800beb2:	4a10      	ldr	r2, [pc, #64]	; (800bef4 <prvCheckForValidListAndQueue+0x68>)
 800beb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800beb6:	2300      	movs	r3, #0
 800beb8:	9300      	str	r3, [sp, #0]
 800beba:	4b11      	ldr	r3, [pc, #68]	; (800bf00 <prvCheckForValidListAndQueue+0x74>)
 800bebc:	4a11      	ldr	r2, [pc, #68]	; (800bf04 <prvCheckForValidListAndQueue+0x78>)
 800bebe:	2110      	movs	r1, #16
 800bec0:	200a      	movs	r0, #10
 800bec2:	f7fd ff3d 	bl	8009d40 <xQueueGenericCreateStatic>
 800bec6:	4603      	mov	r3, r0
 800bec8:	4a08      	ldr	r2, [pc, #32]	; (800beec <prvCheckForValidListAndQueue+0x60>)
 800beca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800becc:	4b07      	ldr	r3, [pc, #28]	; (800beec <prvCheckForValidListAndQueue+0x60>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d005      	beq.n	800bee0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bed4:	4b05      	ldr	r3, [pc, #20]	; (800beec <prvCheckForValidListAndQueue+0x60>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	490b      	ldr	r1, [pc, #44]	; (800bf08 <prvCheckForValidListAndQueue+0x7c>)
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fe fb56 	bl	800a58c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bee0:	f7fd fcf0 	bl	80098c4 <vPortExitCritical>
}
 800bee4:	bf00      	nop
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	2000b3ac 	.word	0x2000b3ac
 800bef0:	2000b37c 	.word	0x2000b37c
 800bef4:	2000b390 	.word	0x2000b390
 800bef8:	2000b3a4 	.word	0x2000b3a4
 800befc:	2000b3a8 	.word	0x2000b3a8
 800bf00:	2000b458 	.word	0x2000b458
 800bf04:	2000b3b8 	.word	0x2000b3b8
 800bf08:	0800c688 	.word	0x0800c688

0800bf0c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d10a      	bne.n	800bf34 <pvTimerGetTimerID+0x28>
	__asm volatile
 800bf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf22:	f383 8811 	msr	BASEPRI, r3
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	60fb      	str	r3, [r7, #12]
}
 800bf30:	bf00      	nop
 800bf32:	e7fe      	b.n	800bf32 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800bf34:	f7fd fc96 	bl	8009864 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	69db      	ldr	r3, [r3, #28]
 800bf3c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800bf3e:	f7fd fcc1 	bl	80098c4 <vPortExitCritical>

	return pvReturn;
 800bf42:	693b      	ldr	r3, [r7, #16]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3718      	adds	r7, #24
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <__libc_init_array>:
 800bf4c:	b570      	push	{r4, r5, r6, lr}
 800bf4e:	4d0d      	ldr	r5, [pc, #52]	; (800bf84 <__libc_init_array+0x38>)
 800bf50:	4c0d      	ldr	r4, [pc, #52]	; (800bf88 <__libc_init_array+0x3c>)
 800bf52:	1b64      	subs	r4, r4, r5
 800bf54:	10a4      	asrs	r4, r4, #2
 800bf56:	2600      	movs	r6, #0
 800bf58:	42a6      	cmp	r6, r4
 800bf5a:	d109      	bne.n	800bf70 <__libc_init_array+0x24>
 800bf5c:	4d0b      	ldr	r5, [pc, #44]	; (800bf8c <__libc_init_array+0x40>)
 800bf5e:	4c0c      	ldr	r4, [pc, #48]	; (800bf90 <__libc_init_array+0x44>)
 800bf60:	f000 f8f2 	bl	800c148 <_init>
 800bf64:	1b64      	subs	r4, r4, r5
 800bf66:	10a4      	asrs	r4, r4, #2
 800bf68:	2600      	movs	r6, #0
 800bf6a:	42a6      	cmp	r6, r4
 800bf6c:	d105      	bne.n	800bf7a <__libc_init_array+0x2e>
 800bf6e:	bd70      	pop	{r4, r5, r6, pc}
 800bf70:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf74:	4798      	blx	r3
 800bf76:	3601      	adds	r6, #1
 800bf78:	e7ee      	b.n	800bf58 <__libc_init_array+0xc>
 800bf7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf7e:	4798      	blx	r3
 800bf80:	3601      	adds	r6, #1
 800bf82:	e7f2      	b.n	800bf6a <__libc_init_array+0x1e>
 800bf84:	0800cf98 	.word	0x0800cf98
 800bf88:	0800cf98 	.word	0x0800cf98
 800bf8c:	0800cf98 	.word	0x0800cf98
 800bf90:	0800cf9c 	.word	0x0800cf9c

0800bf94 <__retarget_lock_acquire_recursive>:
 800bf94:	4770      	bx	lr

0800bf96 <__retarget_lock_release_recursive>:
 800bf96:	4770      	bx	lr

0800bf98 <memcpy>:
 800bf98:	440a      	add	r2, r1
 800bf9a:	4291      	cmp	r1, r2
 800bf9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfa0:	d100      	bne.n	800bfa4 <memcpy+0xc>
 800bfa2:	4770      	bx	lr
 800bfa4:	b510      	push	{r4, lr}
 800bfa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfae:	4291      	cmp	r1, r2
 800bfb0:	d1f9      	bne.n	800bfa6 <memcpy+0xe>
 800bfb2:	bd10      	pop	{r4, pc}

0800bfb4 <memset>:
 800bfb4:	4402      	add	r2, r0
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d100      	bne.n	800bfbe <memset+0xa>
 800bfbc:	4770      	bx	lr
 800bfbe:	f803 1b01 	strb.w	r1, [r3], #1
 800bfc2:	e7f9      	b.n	800bfb8 <memset+0x4>

0800bfc4 <cleanup_glue>:
 800bfc4:	b538      	push	{r3, r4, r5, lr}
 800bfc6:	460c      	mov	r4, r1
 800bfc8:	6809      	ldr	r1, [r1, #0]
 800bfca:	4605      	mov	r5, r0
 800bfcc:	b109      	cbz	r1, 800bfd2 <cleanup_glue+0xe>
 800bfce:	f7ff fff9 	bl	800bfc4 <cleanup_glue>
 800bfd2:	4621      	mov	r1, r4
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfda:	f000 b869 	b.w	800c0b0 <_free_r>
	...

0800bfe0 <_reclaim_reent>:
 800bfe0:	4b2c      	ldr	r3, [pc, #176]	; (800c094 <_reclaim_reent+0xb4>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4283      	cmp	r3, r0
 800bfe6:	b570      	push	{r4, r5, r6, lr}
 800bfe8:	4604      	mov	r4, r0
 800bfea:	d051      	beq.n	800c090 <_reclaim_reent+0xb0>
 800bfec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bfee:	b143      	cbz	r3, 800c002 <_reclaim_reent+0x22>
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d14a      	bne.n	800c08c <_reclaim_reent+0xac>
 800bff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bff8:	6819      	ldr	r1, [r3, #0]
 800bffa:	b111      	cbz	r1, 800c002 <_reclaim_reent+0x22>
 800bffc:	4620      	mov	r0, r4
 800bffe:	f000 f857 	bl	800c0b0 <_free_r>
 800c002:	6961      	ldr	r1, [r4, #20]
 800c004:	b111      	cbz	r1, 800c00c <_reclaim_reent+0x2c>
 800c006:	4620      	mov	r0, r4
 800c008:	f000 f852 	bl	800c0b0 <_free_r>
 800c00c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c00e:	b111      	cbz	r1, 800c016 <_reclaim_reent+0x36>
 800c010:	4620      	mov	r0, r4
 800c012:	f000 f84d 	bl	800c0b0 <_free_r>
 800c016:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c018:	b111      	cbz	r1, 800c020 <_reclaim_reent+0x40>
 800c01a:	4620      	mov	r0, r4
 800c01c:	f000 f848 	bl	800c0b0 <_free_r>
 800c020:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c022:	b111      	cbz	r1, 800c02a <_reclaim_reent+0x4a>
 800c024:	4620      	mov	r0, r4
 800c026:	f000 f843 	bl	800c0b0 <_free_r>
 800c02a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c02c:	b111      	cbz	r1, 800c034 <_reclaim_reent+0x54>
 800c02e:	4620      	mov	r0, r4
 800c030:	f000 f83e 	bl	800c0b0 <_free_r>
 800c034:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c036:	b111      	cbz	r1, 800c03e <_reclaim_reent+0x5e>
 800c038:	4620      	mov	r0, r4
 800c03a:	f000 f839 	bl	800c0b0 <_free_r>
 800c03e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c040:	b111      	cbz	r1, 800c048 <_reclaim_reent+0x68>
 800c042:	4620      	mov	r0, r4
 800c044:	f000 f834 	bl	800c0b0 <_free_r>
 800c048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c04a:	b111      	cbz	r1, 800c052 <_reclaim_reent+0x72>
 800c04c:	4620      	mov	r0, r4
 800c04e:	f000 f82f 	bl	800c0b0 <_free_r>
 800c052:	69a3      	ldr	r3, [r4, #24]
 800c054:	b1e3      	cbz	r3, 800c090 <_reclaim_reent+0xb0>
 800c056:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c058:	4620      	mov	r0, r4
 800c05a:	4798      	blx	r3
 800c05c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c05e:	b1b9      	cbz	r1, 800c090 <_reclaim_reent+0xb0>
 800c060:	4620      	mov	r0, r4
 800c062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c066:	f7ff bfad 	b.w	800bfc4 <cleanup_glue>
 800c06a:	5949      	ldr	r1, [r1, r5]
 800c06c:	b941      	cbnz	r1, 800c080 <_reclaim_reent+0xa0>
 800c06e:	3504      	adds	r5, #4
 800c070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c072:	2d80      	cmp	r5, #128	; 0x80
 800c074:	68d9      	ldr	r1, [r3, #12]
 800c076:	d1f8      	bne.n	800c06a <_reclaim_reent+0x8a>
 800c078:	4620      	mov	r0, r4
 800c07a:	f000 f819 	bl	800c0b0 <_free_r>
 800c07e:	e7ba      	b.n	800bff6 <_reclaim_reent+0x16>
 800c080:	680e      	ldr	r6, [r1, #0]
 800c082:	4620      	mov	r0, r4
 800c084:	f000 f814 	bl	800c0b0 <_free_r>
 800c088:	4631      	mov	r1, r6
 800c08a:	e7ef      	b.n	800c06c <_reclaim_reent+0x8c>
 800c08c:	2500      	movs	r5, #0
 800c08e:	e7ef      	b.n	800c070 <_reclaim_reent+0x90>
 800c090:	bd70      	pop	{r4, r5, r6, pc}
 800c092:	bf00      	nop
 800c094:	20000010 	.word	0x20000010

0800c098 <__malloc_lock>:
 800c098:	4801      	ldr	r0, [pc, #4]	; (800c0a0 <__malloc_lock+0x8>)
 800c09a:	f7ff bf7b 	b.w	800bf94 <__retarget_lock_acquire_recursive>
 800c09e:	bf00      	nop
 800c0a0:	2000b4a8 	.word	0x2000b4a8

0800c0a4 <__malloc_unlock>:
 800c0a4:	4801      	ldr	r0, [pc, #4]	; (800c0ac <__malloc_unlock+0x8>)
 800c0a6:	f7ff bf76 	b.w	800bf96 <__retarget_lock_release_recursive>
 800c0aa:	bf00      	nop
 800c0ac:	2000b4a8 	.word	0x2000b4a8

0800c0b0 <_free_r>:
 800c0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0b2:	2900      	cmp	r1, #0
 800c0b4:	d044      	beq.n	800c140 <_free_r+0x90>
 800c0b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0ba:	9001      	str	r0, [sp, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f1a1 0404 	sub.w	r4, r1, #4
 800c0c2:	bfb8      	it	lt
 800c0c4:	18e4      	addlt	r4, r4, r3
 800c0c6:	f7ff ffe7 	bl	800c098 <__malloc_lock>
 800c0ca:	4a1e      	ldr	r2, [pc, #120]	; (800c144 <_free_r+0x94>)
 800c0cc:	9801      	ldr	r0, [sp, #4]
 800c0ce:	6813      	ldr	r3, [r2, #0]
 800c0d0:	b933      	cbnz	r3, 800c0e0 <_free_r+0x30>
 800c0d2:	6063      	str	r3, [r4, #4]
 800c0d4:	6014      	str	r4, [r2, #0]
 800c0d6:	b003      	add	sp, #12
 800c0d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0dc:	f7ff bfe2 	b.w	800c0a4 <__malloc_unlock>
 800c0e0:	42a3      	cmp	r3, r4
 800c0e2:	d908      	bls.n	800c0f6 <_free_r+0x46>
 800c0e4:	6825      	ldr	r5, [r4, #0]
 800c0e6:	1961      	adds	r1, r4, r5
 800c0e8:	428b      	cmp	r3, r1
 800c0ea:	bf01      	itttt	eq
 800c0ec:	6819      	ldreq	r1, [r3, #0]
 800c0ee:	685b      	ldreq	r3, [r3, #4]
 800c0f0:	1949      	addeq	r1, r1, r5
 800c0f2:	6021      	streq	r1, [r4, #0]
 800c0f4:	e7ed      	b.n	800c0d2 <_free_r+0x22>
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	b10b      	cbz	r3, 800c100 <_free_r+0x50>
 800c0fc:	42a3      	cmp	r3, r4
 800c0fe:	d9fa      	bls.n	800c0f6 <_free_r+0x46>
 800c100:	6811      	ldr	r1, [r2, #0]
 800c102:	1855      	adds	r5, r2, r1
 800c104:	42a5      	cmp	r5, r4
 800c106:	d10b      	bne.n	800c120 <_free_r+0x70>
 800c108:	6824      	ldr	r4, [r4, #0]
 800c10a:	4421      	add	r1, r4
 800c10c:	1854      	adds	r4, r2, r1
 800c10e:	42a3      	cmp	r3, r4
 800c110:	6011      	str	r1, [r2, #0]
 800c112:	d1e0      	bne.n	800c0d6 <_free_r+0x26>
 800c114:	681c      	ldr	r4, [r3, #0]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	6053      	str	r3, [r2, #4]
 800c11a:	4421      	add	r1, r4
 800c11c:	6011      	str	r1, [r2, #0]
 800c11e:	e7da      	b.n	800c0d6 <_free_r+0x26>
 800c120:	d902      	bls.n	800c128 <_free_r+0x78>
 800c122:	230c      	movs	r3, #12
 800c124:	6003      	str	r3, [r0, #0]
 800c126:	e7d6      	b.n	800c0d6 <_free_r+0x26>
 800c128:	6825      	ldr	r5, [r4, #0]
 800c12a:	1961      	adds	r1, r4, r5
 800c12c:	428b      	cmp	r3, r1
 800c12e:	bf04      	itt	eq
 800c130:	6819      	ldreq	r1, [r3, #0]
 800c132:	685b      	ldreq	r3, [r3, #4]
 800c134:	6063      	str	r3, [r4, #4]
 800c136:	bf04      	itt	eq
 800c138:	1949      	addeq	r1, r1, r5
 800c13a:	6021      	streq	r1, [r4, #0]
 800c13c:	6054      	str	r4, [r2, #4]
 800c13e:	e7ca      	b.n	800c0d6 <_free_r+0x26>
 800c140:	b003      	add	sp, #12
 800c142:	bd30      	pop	{r4, r5, pc}
 800c144:	2000b4ac 	.word	0x2000b4ac

0800c148 <_init>:
 800c148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14a:	bf00      	nop
 800c14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c14e:	bc08      	pop	{r3}
 800c150:	469e      	mov	lr, r3
 800c152:	4770      	bx	lr

0800c154 <_fini>:
 800c154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c156:	bf00      	nop
 800c158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c15a:	bc08      	pop	{r3}
 800c15c:	469e      	mov	lr, r3
 800c15e:	4770      	bx	lr
