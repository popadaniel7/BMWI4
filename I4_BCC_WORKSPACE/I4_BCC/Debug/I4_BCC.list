
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  0800ed4c  0800ed4c  0001ed4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f524  0800f524  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800f524  0800f524  0001f524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f52c  0800f52c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f52c  0800f52c  0001f52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f530  0800f530  0001f530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800f534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052b4  20000074  0800f5a8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005328  0800f5a8  00025328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002da85  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a3e  00000000  00000000  0004db29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002460  00000000  00000000  00054568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002190  00000000  00000000  000569c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021554  00000000  00000000  00058b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a946  00000000  00000000  0007a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5861  00000000  00000000  000b49f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a253  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000970c  00000000  00000000  0016a2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ed34 	.word	0x0800ed34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800ed34 	.word	0x0800ed34

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <BtcRxVal>:
	return E_OK;

}

StdReturnType BtcRxVal()
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

	if(BtcReceivedDataOnBluetooth >= BTC_RX_HVAC_TEMPERATUREVALUE_MIN && BtcReceivedDataOnBluetooth <= BTC_RX_HVAC_TEMPERATUREVALUE_MAX)
 80004e8:	4bec      	ldr	r3, [pc, #944]	; (800089c <BtcRxVal+0x3b8>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b95      	cmp	r3, #149	; 0x95
 80004ee:	d908      	bls.n	8000502 <BtcRxVal+0x1e>
 80004f0:	4bea      	ldr	r3, [pc, #936]	; (800089c <BtcRxVal+0x3b8>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2ba6      	cmp	r3, #166	; 0xa6
 80004f6:	d804      	bhi.n	8000502 <BtcRxVal+0x1e>
	{

		Btc_TemperatureValue = BtcReceivedDataOnBluetooth;
 80004f8:	4be8      	ldr	r3, [pc, #928]	; (800089c <BtcRxVal+0x3b8>)
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	4be8      	ldr	r3, [pc, #928]	; (80008a0 <BtcRxVal+0x3bc>)
 80004fe:	701a      	strb	r2, [r3, #0]
 8000500:	e00b      	b.n	800051a <BtcRxVal+0x36>

	}
	else if(BtcReceivedDataOnBluetooth >= BTC_RX_HVAC_FANVALUE_MIN && BtcReceivedDataOnBluetooth <= BTC_RX_HVAC_FANVALUE_MAX)
 8000502:	4be6      	ldr	r3, [pc, #920]	; (800089c <BtcRxVal+0x3b8>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2ba9      	cmp	r3, #169	; 0xa9
 8000508:	d907      	bls.n	800051a <BtcRxVal+0x36>
 800050a:	4be4      	ldr	r3, [pc, #912]	; (800089c <BtcRxVal+0x3b8>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2bb1      	cmp	r3, #177	; 0xb1
 8000510:	d803      	bhi.n	800051a <BtcRxVal+0x36>
	{

		Btc_FanValue = BtcReceivedDataOnBluetooth;
 8000512:	4be2      	ldr	r3, [pc, #904]	; (800089c <BtcRxVal+0x3b8>)
 8000514:	781a      	ldrb	r2, [r3, #0]
 8000516:	4be3      	ldr	r3, [pc, #908]	; (80008a4 <BtcRxVal+0x3c0>)
 8000518:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	switch(BtcReceivedDataOnBluetooth)
 800051a:	4be0      	ldr	r3, [pc, #896]	; (800089c <BtcRxVal+0x3b8>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	3b01      	subs	r3, #1
 8000520:	2bd5      	cmp	r3, #213	; 0xd5
 8000522:	f200 8268 	bhi.w	80009f6 <BtcRxVal+0x512>
 8000526:	a201      	add	r2, pc, #4	; (adr r2, 800052c <BtcRxVal+0x48>)
 8000528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052c:	080008b5 	.word	0x080008b5
 8000530:	080008bd 	.word	0x080008bd
 8000534:	080008c5 	.word	0x080008c5
 8000538:	080008cd 	.word	0x080008cd
 800053c:	080008d5 	.word	0x080008d5
 8000540:	080008dd 	.word	0x080008dd
 8000544:	080008e5 	.word	0x080008e5
 8000548:	080008ed 	.word	0x080008ed
 800054c:	080008f5 	.word	0x080008f5
 8000550:	080008fd 	.word	0x080008fd
 8000554:	08000905 	.word	0x08000905
 8000558:	0800090d 	.word	0x0800090d
 800055c:	08000915 	.word	0x08000915
 8000560:	0800091d 	.word	0x0800091d
 8000564:	08000925 	.word	0x08000925
 8000568:	0800092d 	.word	0x0800092d
 800056c:	08000935 	.word	0x08000935
 8000570:	0800093d 	.word	0x0800093d
 8000574:	08000945 	.word	0x08000945
 8000578:	0800094d 	.word	0x0800094d
 800057c:	080009f7 	.word	0x080009f7
 8000580:	080009f7 	.word	0x080009f7
 8000584:	080009f7 	.word	0x080009f7
 8000588:	080009f7 	.word	0x080009f7
 800058c:	080009f7 	.word	0x080009f7
 8000590:	080009f7 	.word	0x080009f7
 8000594:	080009f7 	.word	0x080009f7
 8000598:	080009f7 	.word	0x080009f7
 800059c:	080009f7 	.word	0x080009f7
 80005a0:	080009f7 	.word	0x080009f7
 80005a4:	080009f7 	.word	0x080009f7
 80005a8:	080009f7 	.word	0x080009f7
 80005ac:	080009f7 	.word	0x080009f7
 80005b0:	080009f7 	.word	0x080009f7
 80005b4:	080009f7 	.word	0x080009f7
 80005b8:	080009f7 	.word	0x080009f7
 80005bc:	080009f7 	.word	0x080009f7
 80005c0:	080009f7 	.word	0x080009f7
 80005c4:	080009f7 	.word	0x080009f7
 80005c8:	080009f7 	.word	0x080009f7
 80005cc:	080009f7 	.word	0x080009f7
 80005d0:	080009f7 	.word	0x080009f7
 80005d4:	080009f7 	.word	0x080009f7
 80005d8:	080009f7 	.word	0x080009f7
 80005dc:	080009f7 	.word	0x080009f7
 80005e0:	080009f7 	.word	0x080009f7
 80005e4:	080009f7 	.word	0x080009f7
 80005e8:	080009f7 	.word	0x080009f7
 80005ec:	080009f7 	.word	0x080009f7
 80005f0:	080009f7 	.word	0x080009f7
 80005f4:	080009f7 	.word	0x080009f7
 80005f8:	080009f7 	.word	0x080009f7
 80005fc:	080009f7 	.word	0x080009f7
 8000600:	080009f7 	.word	0x080009f7
 8000604:	080009f7 	.word	0x080009f7
 8000608:	080009f7 	.word	0x080009f7
 800060c:	080009f7 	.word	0x080009f7
 8000610:	080009f7 	.word	0x080009f7
 8000614:	080009f7 	.word	0x080009f7
 8000618:	080009f7 	.word	0x080009f7
 800061c:	080009f7 	.word	0x080009f7
 8000620:	080009f7 	.word	0x080009f7
 8000624:	080009f7 	.word	0x080009f7
 8000628:	080009f7 	.word	0x080009f7
 800062c:	080009f7 	.word	0x080009f7
 8000630:	080009f7 	.word	0x080009f7
 8000634:	080009f7 	.word	0x080009f7
 8000638:	080009f7 	.word	0x080009f7
 800063c:	080009f7 	.word	0x080009f7
 8000640:	080009f7 	.word	0x080009f7
 8000644:	080009f7 	.word	0x080009f7
 8000648:	080009f7 	.word	0x080009f7
 800064c:	080009f7 	.word	0x080009f7
 8000650:	080009f7 	.word	0x080009f7
 8000654:	080009f7 	.word	0x080009f7
 8000658:	080009f7 	.word	0x080009f7
 800065c:	080009f7 	.word	0x080009f7
 8000660:	080009f7 	.word	0x080009f7
 8000664:	080009f7 	.word	0x080009f7
 8000668:	080009f7 	.word	0x080009f7
 800066c:	080009f7 	.word	0x080009f7
 8000670:	080009f7 	.word	0x080009f7
 8000674:	080009f7 	.word	0x080009f7
 8000678:	080009f7 	.word	0x080009f7
 800067c:	080009f7 	.word	0x080009f7
 8000680:	080009f7 	.word	0x080009f7
 8000684:	080009f7 	.word	0x080009f7
 8000688:	080009f7 	.word	0x080009f7
 800068c:	080009f7 	.word	0x080009f7
 8000690:	080009f7 	.word	0x080009f7
 8000694:	080009f7 	.word	0x080009f7
 8000698:	080009f7 	.word	0x080009f7
 800069c:	080009f7 	.word	0x080009f7
 80006a0:	080009f7 	.word	0x080009f7
 80006a4:	080009f7 	.word	0x080009f7
 80006a8:	080009f7 	.word	0x080009f7
 80006ac:	080009f7 	.word	0x080009f7
 80006b0:	080009f7 	.word	0x080009f7
 80006b4:	080009f7 	.word	0x080009f7
 80006b8:	08000885 	.word	0x08000885
 80006bc:	0800088d 	.word	0x0800088d
 80006c0:	08000895 	.word	0x08000895
 80006c4:	080008ad 	.word	0x080008ad
 80006c8:	080009f7 	.word	0x080009f7
 80006cc:	080009f7 	.word	0x080009f7
 80006d0:	080009f7 	.word	0x080009f7
 80006d4:	080009f7 	.word	0x080009f7
 80006d8:	080009f7 	.word	0x080009f7
 80006dc:	080009f7 	.word	0x080009f7
 80006e0:	080009f7 	.word	0x080009f7
 80006e4:	080009f7 	.word	0x080009f7
 80006e8:	080009f7 	.word	0x080009f7
 80006ec:	080009f7 	.word	0x080009f7
 80006f0:	080009f7 	.word	0x080009f7
 80006f4:	080009f7 	.word	0x080009f7
 80006f8:	080009f7 	.word	0x080009f7
 80006fc:	080009f7 	.word	0x080009f7
 8000700:	080009f7 	.word	0x080009f7
 8000704:	080009f7 	.word	0x080009f7
 8000708:	080009f7 	.word	0x080009f7
 800070c:	080009f7 	.word	0x080009f7
 8000710:	080009f7 	.word	0x080009f7
 8000714:	080009f7 	.word	0x080009f7
 8000718:	080009f7 	.word	0x080009f7
 800071c:	080009f7 	.word	0x080009f7
 8000720:	080009f7 	.word	0x080009f7
 8000724:	080009f7 	.word	0x080009f7
 8000728:	080009f7 	.word	0x080009f7
 800072c:	080009f7 	.word	0x080009f7
 8000730:	080009f7 	.word	0x080009f7
 8000734:	080009f7 	.word	0x080009f7
 8000738:	080009f7 	.word	0x080009f7
 800073c:	080009f7 	.word	0x080009f7
 8000740:	080009f7 	.word	0x080009f7
 8000744:	080009f7 	.word	0x080009f7
 8000748:	080009f7 	.word	0x080009f7
 800074c:	080009f7 	.word	0x080009f7
 8000750:	080009f7 	.word	0x080009f7
 8000754:	080009f7 	.word	0x080009f7
 8000758:	080009f7 	.word	0x080009f7
 800075c:	080009f7 	.word	0x080009f7
 8000760:	080009f7 	.word	0x080009f7
 8000764:	080009f7 	.word	0x080009f7
 8000768:	080009f7 	.word	0x080009f7
 800076c:	080009f7 	.word	0x080009f7
 8000770:	080009f7 	.word	0x080009f7
 8000774:	080009f7 	.word	0x080009f7
 8000778:	080009f7 	.word	0x080009f7
 800077c:	080009f7 	.word	0x080009f7
 8000780:	080009f7 	.word	0x080009f7
 8000784:	080009f7 	.word	0x080009f7
 8000788:	080009f7 	.word	0x080009f7
 800078c:	080009f7 	.word	0x080009f7
 8000790:	080009f7 	.word	0x080009f7
 8000794:	080009f7 	.word	0x080009f7
 8000798:	080009f7 	.word	0x080009f7
 800079c:	080009f7 	.word	0x080009f7
 80007a0:	080009f7 	.word	0x080009f7
 80007a4:	080009f7 	.word	0x080009f7
 80007a8:	080009f7 	.word	0x080009f7
 80007ac:	080009f7 	.word	0x080009f7
 80007b0:	080009f7 	.word	0x080009f7
 80007b4:	080009f7 	.word	0x080009f7
 80007b8:	080009f7 	.word	0x080009f7
 80007bc:	080009f7 	.word	0x080009f7
 80007c0:	080009f7 	.word	0x080009f7
 80007c4:	080009f7 	.word	0x080009f7
 80007c8:	080009f7 	.word	0x080009f7
 80007cc:	080009f7 	.word	0x080009f7
 80007d0:	080009f7 	.word	0x080009f7
 80007d4:	080009f7 	.word	0x080009f7
 80007d8:	080009f7 	.word	0x080009f7
 80007dc:	080009f7 	.word	0x080009f7
 80007e0:	080009f7 	.word	0x080009f7
 80007e4:	080009f7 	.word	0x080009f7
 80007e8:	080009f7 	.word	0x080009f7
 80007ec:	080009f7 	.word	0x080009f7
 80007f0:	080009f7 	.word	0x080009f7
 80007f4:	080009f7 	.word	0x080009f7
 80007f8:	080009f7 	.word	0x080009f7
 80007fc:	080009f7 	.word	0x080009f7
 8000800:	080009f7 	.word	0x080009f7
 8000804:	080009f7 	.word	0x080009f7
 8000808:	080009f7 	.word	0x080009f7
 800080c:	080009f7 	.word	0x080009f7
 8000810:	080009f7 	.word	0x080009f7
 8000814:	080009f7 	.word	0x080009f7
 8000818:	080009f7 	.word	0x080009f7
 800081c:	080009f7 	.word	0x080009f7
 8000820:	080009f7 	.word	0x080009f7
 8000824:	080009f7 	.word	0x080009f7
 8000828:	080009f7 	.word	0x080009f7
 800082c:	080009f7 	.word	0x080009f7
 8000830:	080009f7 	.word	0x080009f7
 8000834:	080009f7 	.word	0x080009f7
 8000838:	080009f7 	.word	0x080009f7
 800083c:	080009f7 	.word	0x080009f7
 8000840:	080009f7 	.word	0x080009f7
 8000844:	080009f7 	.word	0x080009f7
 8000848:	08000955 	.word	0x08000955
 800084c:	0800095d 	.word	0x0800095d
 8000850:	0800096b 	.word	0x0800096b
 8000854:	0800097f 	.word	0x0800097f
 8000858:	08000987 	.word	0x08000987
 800085c:	080009e1 	.word	0x080009e1
 8000860:	080009ef 	.word	0x080009ef
 8000864:	0800098f 	.word	0x0800098f
 8000868:	08000997 	.word	0x08000997
 800086c:	0800099f 	.word	0x0800099f
 8000870:	080009ad 	.word	0x080009ad
 8000874:	080009b5 	.word	0x080009b5
 8000878:	080009c3 	.word	0x080009c3
 800087c:	080009cb 	.word	0x080009cb
 8000880:	080009d9 	.word	0x080009d9
	{
		case BTC_RX_EXTLIGHTS_POSITIONZERO:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <BtcRxVal+0x3c4>)
 8000886:	2264      	movs	r2, #100	; 0x64
 8000888:	701a      	strb	r2, [r3, #0]

			break;
 800088a:	e0b5      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <BtcRxVal+0x3c4>)
 800088e:	2265      	movs	r2, #101	; 0x65
 8000890:	701a      	strb	r2, [r3, #0]

			break;
 8000892:	e0b1      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <BtcRxVal+0x3c4>)
 8000896:	2266      	movs	r2, #102	; 0x66
 8000898:	701a      	strb	r2, [r3, #0]

			break;
 800089a:	e0ad      	b.n	80009f8 <BtcRxVal+0x514>
 800089c:	20000090 	.word	0x20000090
 80008a0:	200000b9 	.word	0x200000b9
 80008a4:	200000ba 	.word	0x200000ba
 80008a8:	200000a5 	.word	0x200000a5

		case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 80008ac:	4b55      	ldr	r3, [pc, #340]	; (8000a04 <BtcRxVal+0x520>)
 80008ae:	2267      	movs	r2, #103	; 0x67
 80008b0:	701a      	strb	r2, [r3, #0]

			break;
 80008b2:	e0a1      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_CENLOC_ON:

			Btc_CenLoc = STD_HIGH;
 80008b4:	4b54      	ldr	r3, [pc, #336]	; (8000a08 <BtcRxVal+0x524>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]

			break;
 80008ba:	e09d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_CENLOC_OFF:

			Btc_CenLoc = STD_LOW;
 80008bc:	4b52      	ldr	r3, [pc, #328]	; (8000a08 <BtcRxVal+0x524>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]

			break;
 80008c2:	e099      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_HIGBEAM_ON:

			Btc_HighBeam = STD_HIGH;
 80008c4:	4b51      	ldr	r3, [pc, #324]	; (8000a0c <BtcRxVal+0x528>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	701a      	strb	r2, [r3, #0]

			break;
 80008ca:	e095      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_HIGBEAM_OFF:

			Btc_HighBeam = STD_LOW;
 80008cc:	4b4f      	ldr	r3, [pc, #316]	; (8000a0c <BtcRxVal+0x528>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]

			break;
 80008d2:	e091      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

			Btc_FlashHighBeam = STD_HIGH;
 80008d4:	4b4e      	ldr	r3, [pc, #312]	; (8000a10 <BtcRxVal+0x52c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]

			break;
 80008da:	e08d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

			Btc_FlashHighBeam = STD_LOW;
 80008dc:	4b4c      	ldr	r3, [pc, #304]	; (8000a10 <BtcRxVal+0x52c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]

			break;
 80008e2:	e089      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

			Btc_TurnSignalLeft = STD_HIGH;
 80008e4:	4b4b      	ldr	r3, [pc, #300]	; (8000a14 <BtcRxVal+0x530>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]

			break;
 80008ea:	e085      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

			Btc_TurnSignalLeft = STD_LOW;
 80008ec:	4b49      	ldr	r3, [pc, #292]	; (8000a14 <BtcRxVal+0x530>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]

			break;
 80008f2:	e081      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_ON:

			Btc_TurnSignalRight = STD_HIGH;
 80008f4:	4b48      	ldr	r3, [pc, #288]	; (8000a18 <BtcRxVal+0x534>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]

			break;
 80008fa:	e07d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_ESTLIGHTS_TURNSIGNALRIGHT_OFF:

			Btc_TurnSignalRight = STD_LOW;
 80008fc:	4b46      	ldr	r3, [pc, #280]	; (8000a18 <BtcRxVal+0x534>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]

			break;
 8000902:	e079      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

			Btc_HazardLight = STD_HIGH;
 8000904:	4b45      	ldr	r3, [pc, #276]	; (8000a1c <BtcRxVal+0x538>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]

			break;
 800090a:	e075      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

			Btc_HazardLight = STD_LOW;
 800090c:	4b43      	ldr	r3, [pc, #268]	; (8000a1c <BtcRxVal+0x538>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]

			break;
 8000912:	e071      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

			Btc_FrontFogLight = STD_HIGH;
 8000914:	4b42      	ldr	r3, [pc, #264]	; (8000a20 <BtcRxVal+0x53c>)
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]

			break;
 800091a:	e06d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

			Btc_FrontFogLight = STD_LOW;
 800091c:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <BtcRxVal+0x53c>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]

			break;
 8000922:	e069      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

			Btc_RearFogLight = STD_HIGH;
 8000924:	4b3f      	ldr	r3, [pc, #252]	; (8000a24 <BtcRxVal+0x540>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]

			break;
 800092a:	e065      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

			Btc_RearFogLight = STD_LOW;
 800092c:	4b3d      	ldr	r3, [pc, #244]	; (8000a24 <BtcRxVal+0x540>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]

			break;
 8000932:	e061      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTON:

			Btc_BrakeLight = STD_HIGH;
 8000934:	4b3c      	ldr	r3, [pc, #240]	; (8000a28 <BtcRxVal+0x544>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]

			break;
 800093a:	e05d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

			Btc_BrakeLight = STD_LOW;
 800093c:	4b3a      	ldr	r3, [pc, #232]	; (8000a28 <BtcRxVal+0x544>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]

			break;
 8000942:	e059      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

			Btc_IntLights = STD_HIGH;
 8000944:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <BtcRxVal+0x548>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]

			break;
 800094a:	e055      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

			Btc_IntLights = STD_LOW;
 800094c:	4b37      	ldr	r3, [pc, #220]	; (8000a2c <BtcRxVal+0x548>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]

			break;
 8000952:	e051      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_NORMALMODE_ON:

			Btc_NormalMode = STD_HIGH;
 8000954:	4b36      	ldr	r3, [pc, #216]	; (8000a30 <BtcRxVal+0x54c>)
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]

			break;
 800095a:	e04d      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_RECIRCULATIONMODE_ON:

			Btc_NormalMode = STD_LOW;
 800095c:	4b34      	ldr	r3, [pc, #208]	; (8000a30 <BtcRxVal+0x54c>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode = STD_HIGH;
 8000962:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <BtcRxVal+0x550>)
 8000964:	2201      	movs	r2, #1
 8000966:	701a      	strb	r2, [r3, #0]

			break;
 8000968:	e046      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_AUTOMATICMODE_ON:

			Btc_NormalMode = STD_LOW;
 800096a:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <BtcRxVal+0x54c>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
			Btc_RecirculationMode = STD_LOW;
 8000970:	4b30      	ldr	r3, [pc, #192]	; (8000a34 <BtcRxVal+0x550>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_HIGH;
 8000976:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <BtcRxVal+0x554>)
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]

			break;
 800097c:	e03c      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTON:

			Btc_BackwindowDefrost = STD_HIGH;
 800097e:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <BtcRxVal+0x558>)
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]

			break;
 8000984:	e038      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_BACKWINDOWDEFROSTOFF:

			Btc_BackwindowDefrost = STD_LOW;
 8000986:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <BtcRxVal+0x558>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]

			break;
 800098c:	e034      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_AC_ON:

			Btc_AC = STD_HIGH;
 800098e:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <BtcRxVal+0x55c>)
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]

			break;
 8000994:	e030      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_AC_OFF:

			Btc_AC = STD_LOW;
 8000996:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <BtcRxVal+0x55c>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]

			break;
 800099c:	e02c      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_LEGVENT_ON:

			Btc_LegVents = STD_HIGH;
 800099e:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <BtcRxVal+0x560>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <BtcRxVal+0x554>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]

			break;
 80009aa:	e025      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_LEGVENT_OFF:

			Btc_LegVents = STD_LOW;
 80009ac:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <BtcRxVal+0x560>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]

			break;
 80009b2:	e021      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_MIDVENT_ON:

			Btc_MidVents = STD_HIGH;
 80009b4:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <BtcRxVal+0x564>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <BtcRxVal+0x554>)
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]

			break;
 80009c0:	e01a      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_MIDVENT_OFF:

			Btc_MidVents = STD_LOW;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <BtcRxVal+0x564>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]

			break;
 80009c8:	e016      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_WINDSHIELDVENT_ON:

			Btc_WindshieldVents = STD_HIGH;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <BtcRxVal+0x568>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <BtcRxVal+0x554>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]

			break;
 80009d6:	e00f      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_WINDSHIELDVENT_OFF:

			Btc_WindshieldVents = STD_LOW;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <BtcRxVal+0x568>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]

			break;
 80009de:	e00b      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_ON:

			Btc_WindshieldDefrost = STD_HIGH;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <BtcRxVal+0x56c>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
			Btc_AutomaticMode = STD_LOW;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <BtcRxVal+0x554>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]

			break;
 80009ec:	e004      	b.n	80009f8 <BtcRxVal+0x514>

		case BTC_RX_HVAC_WINDSHIELDDEFROST_OFF:

			Btc_WindshieldDefrost = STD_LOW;
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <BtcRxVal+0x56c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]

			break;
 80009f4:	e000      	b.n	80009f8 <BtcRxVal+0x514>

		default:

			break;
 80009f6:	bf00      	nop

	}

	return 1;
 80009f8:	2301      	movs	r3, #1

}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	200000a5 	.word	0x200000a5
 8000a08:	2000009a 	.word	0x2000009a
 8000a0c:	200000a6 	.word	0x200000a6
 8000a10:	200000a7 	.word	0x200000a7
 8000a14:	200000a9 	.word	0x200000a9
 8000a18:	200000aa 	.word	0x200000aa
 8000a1c:	200000ab 	.word	0x200000ab
 8000a20:	200000a8 	.word	0x200000a8
 8000a24:	200000ad 	.word	0x200000ad
 8000a28:	200000ac 	.word	0x200000ac
 8000a2c:	200000e1 	.word	0x200000e1
 8000a30:	200000c3 	.word	0x200000c3
 8000a34:	200000c2 	.word	0x200000c2
 8000a38:	200000c1 	.word	0x200000c1
 8000a3c:	200000bf 	.word	0x200000bf
 8000a40:	200000c0 	.word	0x200000c0
 8000a44:	200000bb 	.word	0x200000bb
 8000a48:	200000bc 	.word	0x200000bc
 8000a4c:	200000bd 	.word	0x200000bd
 8000a50:	200000be 	.word	0x200000be

08000a54 <BtcEnableUart>:

StdReturnType BtcEnableUart()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

	uint8 status = STD_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	71fb      	strb	r3, [r7, #7]

	if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) != E_NOT_OK)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	490e      	ldr	r1, [pc, #56]	; (8000a9c <BtcEnableUart+0x48>)
 8000a62:	480f      	ldr	r0, [pc, #60]	; (8000aa0 <BtcEnableUart+0x4c>)
 8000a64:	f00a fac2 	bl	800afec <HAL_UART_Receive_IT>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d007      	beq.n	8000a7e <BtcEnableUart+0x2a>
	{
		HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	490a      	ldr	r1, [pc, #40]	; (8000a9c <BtcEnableUart+0x48>)
 8000a72:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <BtcEnableUart+0x4c>)
 8000a74:	f00a faba 	bl	800afec <HAL_UART_Receive_IT>
		status = E_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	71fb      	strb	r3, [r7, #7]
 8000a7c:	e009      	b.n	8000a92 <BtcEnableUart+0x3e>
	}
	else if(HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1) == E_NOT_OK)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4906      	ldr	r1, [pc, #24]	; (8000a9c <BtcEnableUart+0x48>)
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <BtcEnableUart+0x4c>)
 8000a84:	f00a fab2 	bl	800afec <HAL_UART_Receive_IT>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d101      	bne.n	8000a92 <BtcEnableUart+0x3e>
	{
		status = E_NOT_OK;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	71fb      	strb	r3, [r7, #7]
	else
	{
		/* do nothing */
	}

	return status;
 8000a92:	79fb      	ldrb	r3, [r7, #7]

}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000090 	.word	0x20000090
 8000aa0:	20000870 	.word	0x20000870

08000aa4 <BtcMainFunction>:

void BtcMainFunction()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

	BtcEnableUart();
 8000aa8:	f7ff ffd4 	bl	8000a54 <BtcEnableUart>
	BtcRxVal();
 8000aac:	f7ff fd1a 	bl	80004e4 <BtcRxVal>

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <CenLocState>:

	return E_OK;
}

StdReturnType CenLocState()
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

	uint8 status = E_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_PreviousState != CenLoc_CurrentState)
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <CenLocState+0x70>)
 8000ac0:	781a      	ldrb	r2, [r3, #0]
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <CenLocState+0x74>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d027      	beq.n	8000b1a <CenLocState+0x66>
	{

		CenLoc_ExtLights_LockedState 	= CenLoc_PreviousState;
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <CenLocState+0x70>)
 8000acc:	781a      	ldrb	r2, [r3, #0]
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <CenLocState+0x78>)
 8000ad0:	701a      	strb	r2, [r3, #0]
		CenLoc_ExtLights_UnlockedState 	= CenLoc_CurrentState;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <CenLocState+0x74>)
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <CenLocState+0x7c>)
 8000ad8:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 			= CenLoc_CurrentState;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <CenLocState+0x74>)
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <CenLocState+0x70>)
 8000ae0:	701a      	strb	r2, [r3, #0]
		CenLoc_LockUnlockFlag 			= !CenLoc_CurrentState;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <CenLocState+0x74>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf0c      	ite	eq
 8000aea:	2301      	moveq	r3, #1
 8000aec:	2300      	movne	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <CenLocState+0x80>)
 8000af4:	701a      	strb	r2, [r3, #0]
		CenLoc_LockCounter 				= STD_LOW;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <CenLocState+0x84>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
		CenLoc_UnlockCounter 			= STD_LOW;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <CenLocState+0x88>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
		SecAlm_Counter 					= STD_LOW;
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <CenLocState+0x8c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Init(&htim2);
 8000b08:	480e      	ldr	r0, [pc, #56]	; (8000b44 <CenLocState+0x90>)
 8000b0a:	f009 f87b 	bl	8009c04 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim3);
 8000b0e:	480e      	ldr	r0, [pc, #56]	; (8000b48 <CenLocState+0x94>)
 8000b10:	f009 f878 	bl	8009c04 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Init(&htim5);
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <CenLocState+0x98>)
 8000b16:	f009 f875 	bl	8009c04 <HAL_TIM_Base_Init>

		/* do nothing */

	}

	return status;
 8000b1a:	79fb      	ldrb	r3, [r7, #7]

}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000092 	.word	0x20000092
 8000b28:	20000091 	.word	0x20000091
 8000b2c:	20000095 	.word	0x20000095
 8000b30:	20000094 	.word	0x20000094
 8000b34:	20000093 	.word	0x20000093
 8000b38:	20000098 	.word	0x20000098
 8000b3c:	20000099 	.word	0x20000099
 8000b40:	200000e3 	.word	0x200000e3
 8000b44:	20000438 	.word	0x20000438
 8000b48:	200004ec 	.word	0x200004ec
 8000b4c:	20000654 	.word	0x20000654

08000b50 <CenLocSecAlmStateToOff>:

void CenLocSecAlmStateToOff()
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <CenLocSecAlmStateToOff+0x1c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d102      	bne.n	8000b62 <CenLocSecAlmStateToOff+0x12>
	{

		SecAlm_Trigger = STD_LOW;
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <CenLocSecAlmStateToOff+0x20>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	20000091 	.word	0x20000091
 8000b70:	200000e2 	.word	0x200000e2

08000b74 <CenLocRxBtcState>:

void CenLocRxBtcState()
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

	if(Btc_CenLoc == STD_HIGH)
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <CenLocRxBtcState+0x30>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d104      	bne.n	8000b8a <CenLocRxBtcState+0x16>
	{

		CenLoc_CurrentState = Btc_CenLoc;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <CenLocRxBtcState+0x30>)
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <CenLocRxBtcState+0x34>)
 8000b86:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8000b88:	e007      	b.n	8000b9a <CenLocRxBtcState+0x26>
	else if(Btc_CenLoc == STD_LOW)
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <CenLocRxBtcState+0x30>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d103      	bne.n	8000b9a <CenLocRxBtcState+0x26>
		CenLoc_CurrentState = Btc_CenLoc;
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <CenLocRxBtcState+0x30>)
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <CenLocRxBtcState+0x34>)
 8000b98:	701a      	strb	r2, [r3, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	2000009a 	.word	0x2000009a
 8000ba8:	20000091 	.word	0x20000091

08000bac <CenLocToggleDoorLED>:

void CenLocToggleDoorLED(uint8 PinState)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CENLOC_DOOR_LED_PORT, CENLOC_DOOR_LED_PIN, PinState);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	2140      	movs	r1, #64	; 0x40
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <CenLocToggleDoorLED+0x20>)
 8000bbe:	f004 fd83 	bl	80056c8 <HAL_GPIO_WritePin>

}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40020400 	.word	0x40020400

08000bd0 <CenLocFollowMeHome>:

void CenLocFollowMeHome()
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

	ExtLightsFrontFogLight(CenLoc_FollowMeHomeState);
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <CenLocFollowMeHome+0x28>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fcd3 	bl	8001584 <ExtLightsFrontFogLight>
	ExtLightsLowBeam(CenLoc_FollowMeHomeState);
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <CenLocFollowMeHome+0x28>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fc98 	bl	8001518 <ExtLightsLowBeam>
	ExtLightsRearPositionLight(CenLoc_FollowMeHomeState);
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <CenLocFollowMeHome+0x28>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fcff 	bl	80015f0 <ExtLightsRearPositionLight>

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000096 	.word	0x20000096

08000bfc <CenLocBlinkSignals>:

void CenLocBlinkSignals()
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

	ExtLightsTurnSignalLeft(CenLoc_BlinkState);
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <CenLocBlinkSignals+0x1c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fccf 	bl	80015a8 <ExtLightsTurnSignalLeft>
	ExtLightsTurnSignalRight(CenLoc_BlinkState);
 8000c0a:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <CenLocBlinkSignals+0x1c>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fcdc 	bl	80015cc <ExtLightsTurnSignalRight>

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000097 	.word	0x20000097

08000c1c <CenLocLockUnlockStates>:

StdReturnType CenLocLockUnlockStates()
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0

	uint8 status = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_CurrentState == STD_HIGH && SecAlm_Trigger == STD_LOW)
 8000c26:	4b9b      	ldr	r3, [pc, #620]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	f040 80a6 	bne.w	8000d7c <CenLocLockUnlockStates+0x160>
 8000c30:	4b99      	ldr	r3, [pc, #612]	; (8000e98 <CenLocLockUnlockStates+0x27c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f040 80a1 	bne.w	8000d7c <CenLocLockUnlockStates+0x160>
	{

		HAL_TIM_Base_Stop(&htim3);
 8000c3a:	4898      	ldr	r0, [pc, #608]	; (8000e9c <CenLocLockUnlockStates+0x280>)
 8000c3c:	f009 f93e 	bl	8009ebc <HAL_TIM_Base_Stop>
		Btc_CenLoc = STD_HIGH;
 8000c40:	4b97      	ldr	r3, [pc, #604]	; (8000ea0 <CenLocLockUnlockStates+0x284>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
		IntLightsToggleIntLights(CenLoc_CurrentState);
 8000c46:	4b93      	ldr	r3, [pc, #588]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 ff54 	bl	8001af8 <IntLightsToggleIntLights>
		CenLocToggleDoorLED(CenLoc_CurrentState);
 8000c50:	4b90      	ldr	r3, [pc, #576]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ffa9 	bl	8000bac <CenLocToggleDoorLED>
		SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 8000c5a:	4b8e      	ldr	r3, [pc, #568]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	bf0c      	ite	eq
 8000c62:	2301      	moveq	r3, #1
 8000c64:	2300      	movne	r3, #0
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 f833 	bl	8001cd4 <SecAlmToggleAlarmLed>

		if(CenLoc_ExtLights_UnlockedState == STD_HIGH && CenLoc_ExtLights_LockedState == STD_LOW)
 8000c6e:	4b8d      	ldr	r3, [pc, #564]	; (8000ea4 <CenLocLockUnlockStates+0x288>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d120      	bne.n	8000cb8 <CenLocLockUnlockStates+0x9c>
 8000c76:	4b8c      	ldr	r3, [pc, #560]	; (8000ea8 <CenLocLockUnlockStates+0x28c>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d11c      	bne.n	8000cb8 <CenLocLockUnlockStates+0x9c>
		{

			HAL_TIM_Base_Start(&htim5);
 8000c7e:	488b      	ldr	r0, [pc, #556]	; (8000eac <CenLocLockUnlockStates+0x290>)
 8000c80:	f009 f892 	bl	8009da8 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 8000c84:	4b89      	ldr	r3, [pc, #548]	; (8000eac <CenLocLockUnlockStates+0x290>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8a:	4a89      	ldr	r2, [pc, #548]	; (8000eb0 <CenLocLockUnlockStates+0x294>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d805      	bhi.n	8000c9c <CenLocLockUnlockStates+0x80>
			{

				CenLoc_FollowMeHomeState = STD_HIGH;
 8000c90:	4b88      	ldr	r3, [pc, #544]	; (8000eb4 <CenLocLockUnlockStates+0x298>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
				CenLocFollowMeHome();
 8000c96:	f7ff ff9b 	bl	8000bd0 <CenLocFollowMeHome>
 8000c9a:	e00d      	b.n	8000cb8 <CenLocLockUnlockStates+0x9c>

			}
			else
			{

				CenLoc_FollowMeHomeState 		= STD_LOW;
 8000c9c:	4b85      	ldr	r3, [pc, #532]	; (8000eb4 <CenLocLockUnlockStates+0x298>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
				CenLoc_ExtLights_UnlockedState 	= STD_LOW;
 8000ca2:	4b80      	ldr	r3, [pc, #512]	; (8000ea4 <CenLocLockUnlockStates+0x288>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
				CenLoc_ExtLights_LockedState 	= STD_HIGH;
 8000ca8:	4b7f      	ldr	r3, [pc, #508]	; (8000ea8 <CenLocLockUnlockStates+0x28c>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]
				CenLocFollowMeHome();
 8000cae:	f7ff ff8f 	bl	8000bd0 <CenLocFollowMeHome>
				HAL_TIM_Base_Stop(&htim5);
 8000cb2:	487e      	ldr	r0, [pc, #504]	; (8000eac <CenLocLockUnlockStates+0x290>)
 8000cb4:	f009 f902 	bl	8009ebc <HAL_TIM_Base_Stop>

			/* do nothing */

		}

		if(CenLoc_LockCounter < 4)
 8000cb8:	4b7f      	ldr	r3, [pc, #508]	; (8000eb8 <CenLocLockUnlockStates+0x29c>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d853      	bhi.n	8000d68 <CenLocLockUnlockStates+0x14c>
		{

			HAL_TIM_Base_Start(&htim2);
 8000cc0:	487e      	ldr	r0, [pc, #504]	; (8000ebc <CenLocLockUnlockStates+0x2a0>)
 8000cc2:	f009 f871 	bl	8009da8 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000cc6:	4b7d      	ldr	r3, [pc, #500]	; (8000ebc <CenLocLockUnlockStates+0x2a0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ccc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d805      	bhi.n	8000ce0 <CenLocLockUnlockStates+0xc4>
			{

				CenLoc_BlinkState = STD_HIGH;
 8000cd4:	4b7a      	ldr	r3, [pc, #488]	; (8000ec0 <CenLocLockUnlockStates+0x2a4>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000cda:	f7ff ff8f 	bl	8000bfc <CenLocBlinkSignals>
		if(CenLoc_LockCounter < 4)
 8000cde:	e140      	b.n	8000f62 <CenLocLockUnlockStates+0x346>

			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000ce0:	4b76      	ldr	r3, [pc, #472]	; (8000ebc <CenLocLockUnlockStates+0x2a0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d90c      	bls.n	8000d08 <CenLocLockUnlockStates+0xec>
 8000cee:	4b73      	ldr	r3, [pc, #460]	; (8000ebc <CenLocLockUnlockStates+0x2a0>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf4:	f241 3287 	movw	r2, #4999	; 0x1387
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d805      	bhi.n	8000d08 <CenLocLockUnlockStates+0xec>
			{

				CenLoc_BlinkState = STD_LOW;
 8000cfc:	4b70      	ldr	r3, [pc, #448]	; (8000ec0 <CenLocLockUnlockStates+0x2a4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000d02:	f7ff ff7b 	bl	8000bfc <CenLocBlinkSignals>
 8000d06:	e038      	b.n	8000d7a <CenLocLockUnlockStates+0x15e>

			}
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 8000d08:	4b6c      	ldr	r3, [pc, #432]	; (8000ebc <CenLocLockUnlockStates+0x2a0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d90c      	bls.n	8000d30 <CenLocLockUnlockStates+0x114>
 8000d16:	4b69      	ldr	r3, [pc, #420]	; (8000ebc <CenLocLockUnlockStates+0x2a0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d805      	bhi.n	8000d30 <CenLocLockUnlockStates+0x114>
			{

				CenLoc_BlinkState = STD_HIGH;
 8000d24:	4b66      	ldr	r3, [pc, #408]	; (8000ec0 <CenLocLockUnlockStates+0x2a4>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000d2a:	f7ff ff67 	bl	8000bfc <CenLocBlinkSignals>
 8000d2e:	e024      	b.n	8000d7a <CenLocLockUnlockStates+0x15e>

			}
			else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8000d30:	4b62      	ldr	r3, [pc, #392]	; (8000ebc <CenLocLockUnlockStates+0x2a0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d36:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	f240 8111 	bls.w	8000f62 <CenLocLockUnlockStates+0x346>
 8000d40:	4b5e      	ldr	r3, [pc, #376]	; (8000ebc <CenLocLockUnlockStates+0x2a0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d46:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	f200 8109 	bhi.w	8000f62 <CenLocLockUnlockStates+0x346>
			{

				CenLoc_BlinkState = STD_LOW;
 8000d50:	4b5b      	ldr	r3, [pc, #364]	; (8000ec0 <CenLocLockUnlockStates+0x2a4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000d56:	f7ff ff51 	bl	8000bfc <CenLocBlinkSignals>
				CenLoc_LockCounter = CenLoc_LockCounter + 1;
 8000d5a:	4b57      	ldr	r3, [pc, #348]	; (8000eb8 <CenLocLockUnlockStates+0x29c>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b55      	ldr	r3, [pc, #340]	; (8000eb8 <CenLocLockUnlockStates+0x29c>)
 8000d64:	701a      	strb	r2, [r3, #0]
		if(CenLoc_LockCounter < 4)
 8000d66:	e0fc      	b.n	8000f62 <CenLocLockUnlockStates+0x346>

				/* do nothing */

			}
		}
		else if(CenLoc_LockCounter >= 4)
 8000d68:	4b53      	ldr	r3, [pc, #332]	; (8000eb8 <CenLocLockUnlockStates+0x29c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	f240 80f8 	bls.w	8000f62 <CenLocLockUnlockStates+0x346>
		{

			HAL_TIM_Base_Stop(&htim5);
 8000d72:	484e      	ldr	r0, [pc, #312]	; (8000eac <CenLocLockUnlockStates+0x290>)
 8000d74:	f009 f8a2 	bl	8009ebc <HAL_TIM_Base_Stop>
		if(CenLoc_LockCounter < 4)
 8000d78:	e0f3      	b.n	8000f62 <CenLocLockUnlockStates+0x346>
 8000d7a:	e0f2      	b.n	8000f62 <CenLocLockUnlockStates+0x346>
			/* do nothing */

		}

	}
	else if(CenLoc_CurrentState == STD_LOW && SecAlm_Trigger == STD_LOW)
 8000d7c:	4b45      	ldr	r3, [pc, #276]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f040 80f1 	bne.w	8000f68 <CenLocLockUnlockStates+0x34c>
 8000d86:	4b44      	ldr	r3, [pc, #272]	; (8000e98 <CenLocLockUnlockStates+0x27c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 80ec 	bne.w	8000f68 <CenLocLockUnlockStates+0x34c>
	{

		Btc_CenLoc = STD_LOW;
 8000d90:	4b43      	ldr	r3, [pc, #268]	; (8000ea0 <CenLocLockUnlockStates+0x284>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
		IntLightsToggleIntLights(CenLoc_CurrentState);
 8000d96:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 feac 	bl	8001af8 <IntLightsToggleIntLights>
		CenLocToggleDoorLED(CenLoc_CurrentState);
 8000da0:	4b3c      	ldr	r3, [pc, #240]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff01 	bl	8000bac <CenLocToggleDoorLED>

		HAL_TIM_Base_Start(&htim3);
 8000daa:	483c      	ldr	r0, [pc, #240]	; (8000e9c <CenLocLockUnlockStates+0x280>)
 8000dac:	f008 fffc 	bl	8009da8 <HAL_TIM_Base_Start>

		if(CenLoc_ExtLights_UnlockedState == STD_LOW && CenLoc_ExtLights_LockedState == STD_HIGH)
 8000db0:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <CenLocLockUnlockStates+0x288>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d126      	bne.n	8000e06 <CenLocLockUnlockStates+0x1ea>
 8000db8:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <CenLocLockUnlockStates+0x28c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d122      	bne.n	8000e06 <CenLocLockUnlockStates+0x1ea>
		{

			HAL_TIM_Base_Start(&htim5);
 8000dc0:	483a      	ldr	r0, [pc, #232]	; (8000eac <CenLocLockUnlockStates+0x290>)
 8000dc2:	f008 fff1 	bl	8009da8 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 8000dc6:	4b39      	ldr	r3, [pc, #228]	; (8000eac <CenLocLockUnlockStates+0x290>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dcc:	4a38      	ldr	r2, [pc, #224]	; (8000eb0 <CenLocLockUnlockStates+0x294>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d805      	bhi.n	8000dde <CenLocLockUnlockStates+0x1c2>
			{

				CenLoc_FollowMeHomeState = STD_HIGH;
 8000dd2:	4b38      	ldr	r3, [pc, #224]	; (8000eb4 <CenLocLockUnlockStates+0x298>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
				CenLocFollowMeHome();
 8000dd8:	f7ff fefa 	bl	8000bd0 <CenLocFollowMeHome>
 8000ddc:	e013      	b.n	8000e06 <CenLocLockUnlockStates+0x1ea>

			}
			else if(__HAL_TIM_GET_COUNTER(&htim5) > 100000)
 8000dde:	4b33      	ldr	r3, [pc, #204]	; (8000eac <CenLocLockUnlockStates+0x290>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de4:	4a37      	ldr	r2, [pc, #220]	; (8000ec4 <CenLocLockUnlockStates+0x2a8>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d90d      	bls.n	8000e06 <CenLocLockUnlockStates+0x1ea>
			{

				CenLoc_FollowMeHomeState 		= STD_LOW;
 8000dea:	4b32      	ldr	r3, [pc, #200]	; (8000eb4 <CenLocLockUnlockStates+0x298>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
				CenLoc_ExtLights_UnlockedState 	= STD_HIGH;
 8000df0:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <CenLocLockUnlockStates+0x288>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
				CenLoc_ExtLights_LockedState 	= STD_LOW;
 8000df6:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <CenLocLockUnlockStates+0x28c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
				CenLocFollowMeHome();
 8000dfc:	f7ff fee8 	bl	8000bd0 <CenLocFollowMeHome>
				HAL_TIM_Base_Stop(&htim5);
 8000e00:	482a      	ldr	r0, [pc, #168]	; (8000eac <CenLocLockUnlockStates+0x290>)
 8000e02:	f009 f85b 	bl	8009ebc <HAL_TIM_Base_Stop>

			/* do nothing */

		}

		if(40000 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 41250)
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <CenLocLockUnlockStates+0x280>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d911      	bls.n	8000e38 <CenLocLockUnlockStates+0x21c>
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <CenLocLockUnlockStates+0x280>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1a:	f24a 1221 	movw	r2, #41249	; 0xa121
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d80a      	bhi.n	8000e38 <CenLocLockUnlockStates+0x21c>
		{

			SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bf0c      	ite	eq
 8000e2a:	2301      	moveq	r3, #1
 8000e2c:	2300      	movne	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 ff4f 	bl	8001cd4 <SecAlmToggleAlarmLed>
 8000e36:	e05a      	b.n	8000eee <CenLocLockUnlockStates+0x2d2>

		}
		else if(41250 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 42500)
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <CenLocLockUnlockStates+0x280>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3e:	f24a 1222 	movw	r2, #41250	; 0xa122
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d90c      	bls.n	8000e60 <CenLocLockUnlockStates+0x244>
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <CenLocLockUnlockStates+0x280>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4c:	f24a 6203 	movw	r2, #42499	; 0xa603
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d805      	bhi.n	8000e60 <CenLocLockUnlockStates+0x244>
		{

			SecAlmToggleAlarmLed(CenLoc_CurrentState);
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 ff3b 	bl	8001cd4 <SecAlmToggleAlarmLed>
 8000e5e:	e046      	b.n	8000eee <CenLocLockUnlockStates+0x2d2>

		}
		else if(42500 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 43750)
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <CenLocLockUnlockStates+0x280>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	f24a 6204 	movw	r2, #42500	; 0xa604
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d92c      	bls.n	8000ec8 <CenLocLockUnlockStates+0x2ac>
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <CenLocLockUnlockStates+0x280>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	f64a 22e5 	movw	r2, #43749	; 0xaae5
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d825      	bhi.n	8000ec8 <CenLocLockUnlockStates+0x2ac>
		{

			SecAlmToggleAlarmLed(!CenLoc_CurrentState);
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <CenLocLockUnlockStates+0x278>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bf0c      	ite	eq
 8000e84:	2301      	moveq	r3, #1
 8000e86:	2300      	movne	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 ff22 	bl	8001cd4 <SecAlmToggleAlarmLed>
 8000e90:	e02d      	b.n	8000eee <CenLocLockUnlockStates+0x2d2>
 8000e92:	bf00      	nop
 8000e94:	20000091 	.word	0x20000091
 8000e98:	200000e2 	.word	0x200000e2
 8000e9c:	200004ec 	.word	0x200004ec
 8000ea0:	2000009a 	.word	0x2000009a
 8000ea4:	20000094 	.word	0x20000094
 8000ea8:	20000095 	.word	0x20000095
 8000eac:	20000654 	.word	0x20000654
 8000eb0:	0001869f 	.word	0x0001869f
 8000eb4:	20000096 	.word	0x20000096
 8000eb8:	20000098 	.word	0x20000098
 8000ebc:	20000438 	.word	0x20000438
 8000ec0:	20000097 	.word	0x20000097
 8000ec4:	000186a0 	.word	0x000186a0

		}
		else if(43750 < __HAL_TIM_GET_COUNTER(&htim3) && __HAL_TIM_GET_COUNTER(&htim3) < 45000)
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <CenLocLockUnlockStates+0x358>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	f64a 22e6 	movw	r2, #43750	; 0xaae6
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d90b      	bls.n	8000eee <CenLocLockUnlockStates+0x2d2>
 8000ed6:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <CenLocLockUnlockStates+0x358>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d804      	bhi.n	8000eee <CenLocLockUnlockStates+0x2d2>
		{

			SecAlmToggleAlarmLed(CenLoc_CurrentState);
 8000ee4:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <CenLocLockUnlockStates+0x35c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fef3 	bl	8001cd4 <SecAlmToggleAlarmLed>

			/* do nothing */

		}

		if(CenLoc_UnlockCounter < 2 && CenLoc_LockUnlockFlag == STD_HIGH)
 8000eee:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <CenLocLockUnlockStates+0x360>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d82d      	bhi.n	8000f52 <CenLocLockUnlockStates+0x336>
 8000ef6:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <CenLocLockUnlockStates+0x364>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d129      	bne.n	8000f52 <CenLocLockUnlockStates+0x336>
		{

			HAL_TIM_Base_Start(&htim2);
 8000efe:	4821      	ldr	r0, [pc, #132]	; (8000f84 <CenLocLockUnlockStates+0x368>)
 8000f00:	f008 ff52 	bl	8009da8 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000f04:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <CenLocLockUnlockStates+0x368>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d805      	bhi.n	8000f1e <CenLocLockUnlockStates+0x302>
			{

				CenLoc_BlinkState = STD_HIGH;
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <CenLocLockUnlockStates+0x36c>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000f18:	f7ff fe70 	bl	8000bfc <CenLocBlinkSignals>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000f1c:	e023      	b.n	8000f66 <CenLocLockUnlockStates+0x34a>

			}
			else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <CenLocLockUnlockStates+0x368>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d91c      	bls.n	8000f66 <CenLocLockUnlockStates+0x34a>
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <CenLocLockUnlockStates+0x368>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	f241 3287 	movw	r2, #4999	; 0x1387
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d815      	bhi.n	8000f66 <CenLocLockUnlockStates+0x34a>
			{

				CenLoc_BlinkState = STD_LOW;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <CenLocLockUnlockStates+0x36c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
				CenLocBlinkSignals();
 8000f40:	f7ff fe5c 	bl	8000bfc <CenLocBlinkSignals>
				CenLoc_UnlockCounter = CenLoc_UnlockCounter + 1;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <CenLocLockUnlockStates+0x360>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <CenLocLockUnlockStates+0x360>)
 8000f4e:	701a      	strb	r2, [r3, #0]
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000f50:	e009      	b.n	8000f66 <CenLocLockUnlockStates+0x34a>
				/* do nothing */

			}

		}
		else if(CenLoc_UnlockCounter >= 2)
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <CenLocLockUnlockStates+0x360>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d906      	bls.n	8000f68 <CenLocLockUnlockStates+0x34c>
		{

			HAL_TIM_Base_Stop(&htim2);
 8000f5a:	480a      	ldr	r0, [pc, #40]	; (8000f84 <CenLocLockUnlockStates+0x368>)
 8000f5c:	f008 ffae 	bl	8009ebc <HAL_TIM_Base_Stop>
 8000f60:	e002      	b.n	8000f68 <CenLocLockUnlockStates+0x34c>
		if(CenLoc_LockCounter < 4)
 8000f62:	bf00      	nop
 8000f64:	e000      	b.n	8000f68 <CenLocLockUnlockStates+0x34c>
			if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 8000f66:	bf00      	nop

		/* do nothing */

	}

	return status;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200004ec 	.word	0x200004ec
 8000f78:	20000091 	.word	0x20000091
 8000f7c:	20000099 	.word	0x20000099
 8000f80:	20000093 	.word	0x20000093
 8000f84:	20000438 	.word	0x20000438
 8000f88:	20000097 	.word	0x20000097

08000f8c <CenLocMainFunction>:

void CenLocMainFunction()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

	CenLocRxBtcState();
 8000f90:	f7ff fdf0 	bl	8000b74 <CenLocRxBtcState>
	CenLocSecAlmStateToOff();
 8000f94:	f7ff fddc 	bl	8000b50 <CenLocSecAlmStateToOff>
	CenLocState();
 8000f98:	f7ff fd8c 	bl	8000ab4 <CenLocState>
	CenLocLockUnlockStates();
 8000f9c:	f7ff fe3e 	bl	8000c1c <CenLocLockUnlockStates>

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <ExtLightsMainFunction>:
void ExtLightsLightState();
StdReturnType ExtLightsInit();
uint32 ExtLightsLightReadSensorValue();

void ExtLightsMainFunction()
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0

	ExtLightsRxBtcState();
 8000fa8:	f000 f9e6 	bl	8001378 <ExtLightsRxBtcState>
	ExtLightsLightState();
 8000fac:	f000 f802 	bl	8000fb4 <ExtLightsLightState>

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <ExtLightsLightState>:
	return E_OK;

}

void ExtLightsLightState()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0

	uint8 lightSensorState = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	71fb      	strb	r3, [r7, #7]

	ExtLightsHighBeam(ExtLights_HighBeam_CurrentState);
 8000fbe:	4b98      	ldr	r3, [pc, #608]	; (8001220 <ExtLightsLightState+0x26c>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 faba 	bl	800153c <ExtLightsHighBeam>
	ExtLightsHighBeam(ExtLights_FlashHighBeam_CurrentState);
 8000fc8:	4b96      	ldr	r3, [pc, #600]	; (8001224 <ExtLightsLightState+0x270>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fab5 	bl	800153c <ExtLightsHighBeam>
	ExtLightsFrontFogLight(ExtLights_FrontFogLight_CurrentState);
 8000fd2:	4b95      	ldr	r3, [pc, #596]	; (8001228 <ExtLightsLightState+0x274>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fad4 	bl	8001584 <ExtLightsFrontFogLight>
	ExtLightsRearFogLight(ExtLights_RearFogLight_CurrentState);
 8000fdc:	4b93      	ldr	r3, [pc, #588]	; (800122c <ExtLightsLightState+0x278>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fb17 	bl	8001614 <ExtLightsRearFogLight>
	ExtLightsReverseLight(ExtLights_ReverseLight_CurrentState);
 8000fe6:	4b92      	ldr	r3, [pc, #584]	; (8001230 <ExtLightsLightState+0x27c>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fb24 	bl	8001638 <ExtLightsReverseLight>


	if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATEZERO)
 8000ff0:	4b90      	ldr	r3, [pc, #576]	; (8001234 <ExtLightsLightState+0x280>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b64      	cmp	r3, #100	; 0x64
 8000ff6:	d10c      	bne.n	8001012 <ExtLightsLightState+0x5e>
	{

		ExtLightsLowBeam(STD_LOW);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f000 fa8d 	bl	8001518 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_LOW);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 faae 	bl	8001560 <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_LOW);
 8001004:	2000      	movs	r0, #0
 8001006:	f000 faf3 	bl	80015f0 <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_LOW);
 800100a:	2000      	movs	r0, #0
 800100c:	f000 fb26 	bl	800165c <ExtLightsLicensePlateLight>
 8001010:	e048      	b.n	80010a4 <ExtLightsLightState+0xf0>

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATEONE)
 8001012:	4b88      	ldr	r3, [pc, #544]	; (8001234 <ExtLightsLightState+0x280>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b65      	cmp	r3, #101	; 0x65
 8001018:	d123      	bne.n	8001062 <ExtLightsLightState+0xae>
	{

		lightSensorState = ExtLightsLightReadSensorValue();
 800101a:	f000 fa6b 	bl	80014f4 <ExtLightsLightReadSensorValue>
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]

		if(lightSensorState < EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b95      	cmp	r3, #149	; 0x95
 8001026:	d80c      	bhi.n	8001042 <ExtLightsLightState+0x8e>
		{

			ExtLightsLowBeam(STD_HIGH);
 8001028:	2001      	movs	r0, #1
 800102a:	f000 fa75 	bl	8001518 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 800102e:	2001      	movs	r0, #1
 8001030:	f000 fa96 	bl	8001560 <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_HIGH);
 8001034:	2001      	movs	r0, #1
 8001036:	f000 fadb 	bl	80015f0 <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_HIGH);
 800103a:	2001      	movs	r0, #1
 800103c:	f000 fb0e 	bl	800165c <ExtLightsLicensePlateLight>
 8001040:	e030      	b.n	80010a4 <ExtLightsLightState+0xf0>

		}
		else if(lightSensorState > EXTLIGHTS_LIGHTSENSOR_DAYNIGHTVALUE)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b96      	cmp	r3, #150	; 0x96
 8001046:	d92d      	bls.n	80010a4 <ExtLightsLightState+0xf0>
		{

			ExtLightsLowBeam(STD_LOW);
 8001048:	2000      	movs	r0, #0
 800104a:	f000 fa65 	bl	8001518 <ExtLightsLowBeam>
			ExtLightsDayTimeRunningLight(STD_HIGH);
 800104e:	2001      	movs	r0, #1
 8001050:	f000 fa86 	bl	8001560 <ExtLightsDayTimeRunningLight>
			ExtLightsRearPositionLight(STD_LOW);
 8001054:	2000      	movs	r0, #0
 8001056:	f000 facb 	bl	80015f0 <ExtLightsRearPositionLight>
			ExtLightsLicensePlateLight(STD_LOW);
 800105a:	2000      	movs	r0, #0
 800105c:	f000 fafe 	bl	800165c <ExtLightsLicensePlateLight>
 8001060:	e020      	b.n	80010a4 <ExtLightsLightState+0xf0>

		}

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATETWO)
 8001062:	4b74      	ldr	r3, [pc, #464]	; (8001234 <ExtLightsLightState+0x280>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b66      	cmp	r3, #102	; 0x66
 8001068:	d10c      	bne.n	8001084 <ExtLightsLightState+0xd0>
	{

		ExtLightsLowBeam(STD_LOW);
 800106a:	2000      	movs	r0, #0
 800106c:	f000 fa54 	bl	8001518 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_HIGH);
 8001070:	2001      	movs	r0, #1
 8001072:	f000 fa75 	bl	8001560 <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_HIGH);
 8001076:	2001      	movs	r0, #1
 8001078:	f000 faba 	bl	80015f0 <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_HIGH);
 800107c:	2001      	movs	r0, #1
 800107e:	f000 faed 	bl	800165c <ExtLightsLicensePlateLight>
 8001082:	e00f      	b.n	80010a4 <ExtLightsLightState+0xf0>

	}
	else if(ExtLights_LightsSwitch_CurrentState == EXTLIGHTS_LIGHTSWITCH_STATETHREE)
 8001084:	4b6b      	ldr	r3, [pc, #428]	; (8001234 <ExtLightsLightState+0x280>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b67      	cmp	r3, #103	; 0x67
 800108a:	d10b      	bne.n	80010a4 <ExtLightsLightState+0xf0>
	{

		ExtLightsLowBeam(STD_HIGH);
 800108c:	2001      	movs	r0, #1
 800108e:	f000 fa43 	bl	8001518 <ExtLightsLowBeam>
		ExtLightsDayTimeRunningLight(STD_HIGH);
 8001092:	2001      	movs	r0, #1
 8001094:	f000 fa64 	bl	8001560 <ExtLightsDayTimeRunningLight>
		ExtLightsRearPositionLight(STD_HIGH);
 8001098:	2001      	movs	r0, #1
 800109a:	f000 faa9 	bl	80015f0 <ExtLightsRearPositionLight>
		ExtLightsLicensePlateLight(STD_HIGH);
 800109e:	2001      	movs	r0, #1
 80010a0:	f000 fadc 	bl	800165c <ExtLightsLicensePlateLight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 80010a4:	4b64      	ldr	r3, [pc, #400]	; (8001238 <ExtLightsLightState+0x284>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d155      	bne.n	8001158 <ExtLightsLightState+0x1a4>
	{

		HAL_TIM_Base_Start(&htim2);
 80010ac:	4863      	ldr	r0, [pc, #396]	; (800123c <ExtLightsLightState+0x288>)
 80010ae:	f008 fe7b 	bl	8009da8 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2) < 2500)
 80010b2:	4b62      	ldr	r3, [pc, #392]	; (800123c <ExtLightsLightState+0x288>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80010bc:	4293      	cmp	r3, r2
 80010be:	d805      	bhi.n	80010cc <ExtLightsLightState+0x118>
		{

			ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 80010c0:	4b5d      	ldr	r3, [pc, #372]	; (8001238 <ExtLightsLightState+0x284>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fa6f 	bl	80015a8 <ExtLightsTurnSignalLeft>
 80010ca:	e04e      	b.n	800116a <ExtLightsLightState+0x1b6>

		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2)  && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 80010cc:	4b5b      	ldr	r3, [pc, #364]	; (800123c <ExtLightsLightState+0x288>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d911      	bls.n	80010fe <ExtLightsLightState+0x14a>
 80010da:	4b58      	ldr	r3, [pc, #352]	; (800123c <ExtLightsLightState+0x288>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	f241 3287 	movw	r2, #4999	; 0x1387
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d80a      	bhi.n	80010fe <ExtLightsLightState+0x14a>
		{

			ExtLightsTurnSignalLeft(!ExtLights_TurnSignalLeft_CurrentState);
 80010e8:	4b53      	ldr	r3, [pc, #332]	; (8001238 <ExtLightsLightState+0x284>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	bf0c      	ite	eq
 80010f0:	2301      	moveq	r3, #1
 80010f2:	2300      	movne	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fa56 	bl	80015a8 <ExtLightsTurnSignalLeft>
 80010fc:	e035      	b.n	800116a <ExtLightsLightState+0x1b6>

		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80010fe:	4b4f      	ldr	r3, [pc, #316]	; (800123c <ExtLightsLightState+0x288>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	f241 3288 	movw	r2, #5000	; 0x1388
 8001108:	4293      	cmp	r3, r2
 800110a:	d90c      	bls.n	8001126 <ExtLightsLightState+0x172>
 800110c:	4b4b      	ldr	r3, [pc, #300]	; (800123c <ExtLightsLightState+0x288>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8001116:	4293      	cmp	r3, r2
 8001118:	d805      	bhi.n	8001126 <ExtLightsLightState+0x172>
		{

			ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 800111a:	4b47      	ldr	r3, [pc, #284]	; (8001238 <ExtLightsLightState+0x284>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fa42 	bl	80015a8 <ExtLightsTurnSignalLeft>
 8001124:	e021      	b.n	800116a <ExtLightsLightState+0x1b6>

		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8001126:	4b45      	ldr	r3, [pc, #276]	; (800123c <ExtLightsLightState+0x288>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112c:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001130:	4293      	cmp	r3, r2
 8001132:	d91a      	bls.n	800116a <ExtLightsLightState+0x1b6>
 8001134:	4b41      	ldr	r3, [pc, #260]	; (800123c <ExtLightsLightState+0x288>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	f242 720f 	movw	r2, #9999	; 0x270f
 800113e:	4293      	cmp	r3, r2
 8001140:	d813      	bhi.n	800116a <ExtLightsLightState+0x1b6>
		{

			ExtLightsTurnSignalLeft(!ExtLights_TurnSignalLeft_CurrentState);
 8001142:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <ExtLightsLightState+0x284>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf0c      	ite	eq
 800114a:	2301      	moveq	r3, #1
 800114c:	2300      	movne	r3, #0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fa29 	bl	80015a8 <ExtLightsTurnSignalLeft>
 8001156:	e008      	b.n	800116a <ExtLightsLightState+0x1b6>
			/* do nothing */

		}

	}
	else if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW)
 8001158:	4b37      	ldr	r3, [pc, #220]	; (8001238 <ExtLightsLightState+0x284>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d104      	bne.n	800116a <ExtLightsLightState+0x1b6>
	{

		ExtLightsTurnSignalLeft(ExtLights_TurnSignalLeft_CurrentState);
 8001160:	4b35      	ldr	r3, [pc, #212]	; (8001238 <ExtLightsLightState+0x284>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fa1f 	bl	80015a8 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 800116a:	4b35      	ldr	r3, [pc, #212]	; (8001240 <ExtLightsLightState+0x28c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d168      	bne.n	8001244 <ExtLightsLightState+0x290>
	{

		HAL_TIM_Base_Start(&htim2);
 8001172:	4832      	ldr	r0, [pc, #200]	; (800123c <ExtLightsLightState+0x288>)
 8001174:	f008 fe18 	bl	8009da8 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8001178:	4b30      	ldr	r3, [pc, #192]	; (800123c <ExtLightsLightState+0x288>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001182:	4293      	cmp	r3, r2
 8001184:	d805      	bhi.n	8001192 <ExtLightsLightState+0x1de>
		{

			ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <ExtLightsLightState+0x28c>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fa1e 	bl	80015cc <ExtLightsTurnSignalRight>
 8001190:	e061      	b.n	8001256 <ExtLightsLightState+0x2a2>

		}
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <ExtLightsLightState+0x288>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800119c:	4293      	cmp	r3, r2
 800119e:	d911      	bls.n	80011c4 <ExtLightsLightState+0x210>
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <ExtLightsLightState+0x288>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	f241 3287 	movw	r2, #4999	; 0x1387
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d80a      	bhi.n	80011c4 <ExtLightsLightState+0x210>
		{

			ExtLightsTurnSignalRight(!ExtLights_TurnSignalRight_CurrentState);
 80011ae:	4b24      	ldr	r3, [pc, #144]	; (8001240 <ExtLightsLightState+0x28c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	bf0c      	ite	eq
 80011b6:	2301      	moveq	r3, #1
 80011b8:	2300      	movne	r3, #0
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 fa05 	bl	80015cc <ExtLightsTurnSignalRight>
 80011c2:	e048      	b.n	8001256 <ExtLightsLightState+0x2a2>

		}
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <ExtLightsLightState+0x288>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d90c      	bls.n	80011ec <ExtLightsLightState+0x238>
 80011d2:	4b1a      	ldr	r3, [pc, #104]	; (800123c <ExtLightsLightState+0x288>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80011dc:	4293      	cmp	r3, r2
 80011de:	d805      	bhi.n	80011ec <ExtLightsLightState+0x238>
		{

			ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <ExtLightsLightState+0x28c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f9f1 	bl	80015cc <ExtLightsTurnSignalRight>
 80011ea:	e034      	b.n	8001256 <ExtLightsLightState+0x2a2>

		}
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <ExtLightsLightState+0x288>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d92d      	bls.n	8001256 <ExtLightsLightState+0x2a2>
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <ExtLightsLightState+0x288>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	f242 720f 	movw	r2, #9999	; 0x270f
 8001204:	4293      	cmp	r3, r2
 8001206:	d826      	bhi.n	8001256 <ExtLightsLightState+0x2a2>
		{

			ExtLightsTurnSignalRight(!ExtLights_TurnSignalRight_CurrentState);
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <ExtLightsLightState+0x28c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	bf0c      	ite	eq
 8001210:	2301      	moveq	r3, #1
 8001212:	2300      	movne	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f9d8 	bl	80015cc <ExtLightsTurnSignalRight>
 800121c:	e01b      	b.n	8001256 <ExtLightsLightState+0x2a2>
 800121e:	bf00      	nop
 8001220:	2000009f 	.word	0x2000009f
 8001224:	2000009d 	.word	0x2000009d
 8001228:	200000a0 	.word	0x200000a0
 800122c:	200000a4 	.word	0x200000a4
 8001230:	2000009b 	.word	0x2000009b
 8001234:	2000009e 	.word	0x2000009e
 8001238:	200000a1 	.word	0x200000a1
 800123c:	20000438 	.word	0x20000438
 8001240:	200000a2 	.word	0x200000a2

			/* do nothing */

		}
	}
	else if(ExtLights_TurnSignalRight_CurrentState == STD_LOW)
 8001244:	4b49      	ldr	r3, [pc, #292]	; (800136c <ExtLightsLightState+0x3b8>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d104      	bne.n	8001256 <ExtLightsLightState+0x2a2>
	{

		ExtLightsTurnSignalRight(ExtLights_TurnSignalRight_CurrentState);
 800124c:	4b47      	ldr	r3, [pc, #284]	; (800136c <ExtLightsLightState+0x3b8>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f000 f9bb 	bl	80015cc <ExtLightsTurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001256:	4b46      	ldr	r3, [pc, #280]	; (8001370 <ExtLightsLightState+0x3bc>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d173      	bne.n	8001346 <ExtLightsLightState+0x392>
	{

		HAL_TIM_Base_Start(&htim2);
 800125e:	4845      	ldr	r0, [pc, #276]	; (8001374 <ExtLightsLightState+0x3c0>)
 8001260:	f008 fda2 	bl	8009da8 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim2)< 2500)
 8001264:	4b43      	ldr	r3, [pc, #268]	; (8001374 <ExtLightsLightState+0x3c0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800126e:	4293      	cmp	r3, r2
 8001270:	d80a      	bhi.n	8001288 <ExtLightsLightState+0x2d4>
		{

			ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 8001272:	4b3f      	ldr	r3, [pc, #252]	; (8001370 <ExtLightsLightState+0x3bc>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f9a8 	bl	80015cc <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 800127c:	4b3c      	ldr	r3, [pc, #240]	; (8001370 <ExtLightsLightState+0x3bc>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f991 	bl	80015a8 <ExtLightsTurnSignalLeft>

		/* do nothing */

	}

}
 8001286:	e06d      	b.n	8001364 <ExtLightsLightState+0x3b0>
		else if(2500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 5000)
 8001288:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <ExtLightsLightState+0x3c0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001292:	4293      	cmp	r3, r2
 8001294:	d91b      	bls.n	80012ce <ExtLightsLightState+0x31a>
 8001296:	4b37      	ldr	r3, [pc, #220]	; (8001374 <ExtLightsLightState+0x3c0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	f241 3287 	movw	r2, #4999	; 0x1387
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d814      	bhi.n	80012ce <ExtLightsLightState+0x31a>
			ExtLightsTurnSignalRight(!ExtLights_HazardLight_CurrentState);
 80012a4:	4b32      	ldr	r3, [pc, #200]	; (8001370 <ExtLightsLightState+0x3bc>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f98a 	bl	80015cc <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(!ExtLights_HazardLight_CurrentState);
 80012b8:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <ExtLightsLightState+0x3bc>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bf0c      	ite	eq
 80012c0:	2301      	moveq	r3, #1
 80012c2:	2300      	movne	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f96e 	bl	80015a8 <ExtLightsTurnSignalLeft>
 80012cc:	e04a      	b.n	8001364 <ExtLightsLightState+0x3b0>
		else if(5000 < __HAL_TIM_GET_COUNTER(&htim2)&& __HAL_TIM_GET_COUNTER(&htim2) < 7500)
 80012ce:	4b29      	ldr	r3, [pc, #164]	; (8001374 <ExtLightsLightState+0x3c0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d8:	4293      	cmp	r3, r2
 80012da:	d911      	bls.n	8001300 <ExtLightsLightState+0x34c>
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <ExtLightsLightState+0x3c0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d80a      	bhi.n	8001300 <ExtLightsLightState+0x34c>
			ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <ExtLightsLightState+0x3bc>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f96c 	bl	80015cc <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <ExtLightsLightState+0x3bc>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f955 	bl	80015a8 <ExtLightsTurnSignalLeft>
 80012fe:	e031      	b.n	8001364 <ExtLightsLightState+0x3b0>
		else if(7500 < __HAL_TIM_GET_COUNTER(&htim2) && __HAL_TIM_GET_COUNTER(&htim2) < 10000)
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <ExtLightsLightState+0x3c0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800130a:	4293      	cmp	r3, r2
 800130c:	d92a      	bls.n	8001364 <ExtLightsLightState+0x3b0>
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <ExtLightsLightState+0x3c0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	f242 720f 	movw	r2, #9999	; 0x270f
 8001318:	4293      	cmp	r3, r2
 800131a:	d823      	bhi.n	8001364 <ExtLightsLightState+0x3b0>
			ExtLightsTurnSignalRight(!ExtLights_HazardLight_CurrentState);
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <ExtLightsLightState+0x3bc>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf0c      	ite	eq
 8001324:	2301      	moveq	r3, #1
 8001326:	2300      	movne	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f94e 	bl	80015cc <ExtLightsTurnSignalRight>
			ExtLightsTurnSignalLeft(!ExtLights_HazardLight_CurrentState);
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <ExtLightsLightState+0x3bc>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf0c      	ite	eq
 8001338:	2301      	moveq	r3, #1
 800133a:	2300      	movne	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f932 	bl	80015a8 <ExtLightsTurnSignalLeft>
}
 8001344:	e00e      	b.n	8001364 <ExtLightsLightState+0x3b0>
	else if(ExtLights_HazardLight_CurrentState == STD_LOW)
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <ExtLightsLightState+0x3bc>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10a      	bne.n	8001364 <ExtLightsLightState+0x3b0>
		ExtLightsTurnSignalRight(ExtLights_HazardLight_CurrentState);
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <ExtLightsLightState+0x3bc>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f93a 	bl	80015cc <ExtLightsTurnSignalRight>
		ExtLightsTurnSignalLeft(ExtLights_HazardLight_CurrentState);
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <ExtLightsLightState+0x3bc>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f923 	bl	80015a8 <ExtLightsTurnSignalLeft>
}
 8001362:	e7ff      	b.n	8001364 <ExtLightsLightState+0x3b0>
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200000a2 	.word	0x200000a2
 8001370:	200000a3 	.word	0x200000a3
 8001374:	20000438 	.word	0x20000438

08001378 <ExtLightsRxBtcState>:

void ExtLightsRxBtcState()
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

	if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATEZERO)
 800137c:	4b4d      	ldr	r3, [pc, #308]	; (80014b4 <ExtLightsRxBtcState+0x13c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b64      	cmp	r3, #100	; 0x64
 8001382:	d103      	bne.n	800138c <ExtLightsRxBtcState+0x14>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEZERO;
 8001384:	4b4c      	ldr	r3, [pc, #304]	; (80014b8 <ExtLightsRxBtcState+0x140>)
 8001386:	2264      	movs	r2, #100	; 0x64
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	e016      	b.n	80013ba <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATEONE)
 800138c:	4b49      	ldr	r3, [pc, #292]	; (80014b4 <ExtLightsRxBtcState+0x13c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b65      	cmp	r3, #101	; 0x65
 8001392:	d103      	bne.n	800139c <ExtLightsRxBtcState+0x24>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATEONE;
 8001394:	4b48      	ldr	r3, [pc, #288]	; (80014b8 <ExtLightsRxBtcState+0x140>)
 8001396:	2265      	movs	r2, #101	; 0x65
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	e00e      	b.n	80013ba <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATETWO)
 800139c:	4b45      	ldr	r3, [pc, #276]	; (80014b4 <ExtLightsRxBtcState+0x13c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b66      	cmp	r3, #102	; 0x66
 80013a2:	d103      	bne.n	80013ac <ExtLightsRxBtcState+0x34>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATETWO;
 80013a4:	4b44      	ldr	r3, [pc, #272]	; (80014b8 <ExtLightsRxBtcState+0x140>)
 80013a6:	2266      	movs	r2, #102	; 0x66
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	e006      	b.n	80013ba <ExtLightsRxBtcState+0x42>

	}
	else if(Btc_LightSwitch == EXTLIGHTS_LIGHTSWITCH_STATETHREE)
 80013ac:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <ExtLightsRxBtcState+0x13c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b67      	cmp	r3, #103	; 0x67
 80013b2:	d102      	bne.n	80013ba <ExtLightsRxBtcState+0x42>
	{

		ExtLights_LightsSwitch_CurrentState = EXTLIGHTS_LIGHTSWITCH_STATETHREE;
 80013b4:	4b40      	ldr	r3, [pc, #256]	; (80014b8 <ExtLightsRxBtcState+0x140>)
 80013b6:	2267      	movs	r2, #103	; 0x67
 80013b8:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_HighBeam == STD_HIGH)
 80013ba:	4b40      	ldr	r3, [pc, #256]	; (80014bc <ExtLightsRxBtcState+0x144>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d104      	bne.n	80013cc <ExtLightsRxBtcState+0x54>
	{

		ExtLights_HighBeam_CurrentState = Btc_HighBeam;
 80013c2:	4b3e      	ldr	r3, [pc, #248]	; (80014bc <ExtLightsRxBtcState+0x144>)
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	4b3e      	ldr	r3, [pc, #248]	; (80014c0 <ExtLightsRxBtcState+0x148>)
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	e007      	b.n	80013dc <ExtLightsRxBtcState+0x64>

	}
	else if(Btc_HighBeam == STD_LOW)
 80013cc:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <ExtLightsRxBtcState+0x144>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d103      	bne.n	80013dc <ExtLightsRxBtcState+0x64>
	{

		ExtLights_HighBeam_CurrentState = Btc_HighBeam;
 80013d4:	4b39      	ldr	r3, [pc, #228]	; (80014bc <ExtLightsRxBtcState+0x144>)
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	4b39      	ldr	r3, [pc, #228]	; (80014c0 <ExtLightsRxBtcState+0x148>)
 80013da:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_FrontFogLight == STD_HIGH)
 80013dc:	4b39      	ldr	r3, [pc, #228]	; (80014c4 <ExtLightsRxBtcState+0x14c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d104      	bne.n	80013ee <ExtLightsRxBtcState+0x76>
	{

		ExtLights_FrontFogLight_CurrentState = Btc_FrontFogLight;
 80013e4:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <ExtLightsRxBtcState+0x14c>)
 80013e6:	781a      	ldrb	r2, [r3, #0]
 80013e8:	4b37      	ldr	r3, [pc, #220]	; (80014c8 <ExtLightsRxBtcState+0x150>)
 80013ea:	701a      	strb	r2, [r3, #0]
 80013ec:	e007      	b.n	80013fe <ExtLightsRxBtcState+0x86>

	}
	else if(Btc_FrontFogLight == STD_LOW)
 80013ee:	4b35      	ldr	r3, [pc, #212]	; (80014c4 <ExtLightsRxBtcState+0x14c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d103      	bne.n	80013fe <ExtLightsRxBtcState+0x86>
	{

		ExtLights_FrontFogLight_CurrentState = Btc_FrontFogLight;
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <ExtLightsRxBtcState+0x14c>)
 80013f8:	781a      	ldrb	r2, [r3, #0]
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <ExtLightsRxBtcState+0x150>)
 80013fc:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_RearFogLight == STD_HIGH)
 80013fe:	4b33      	ldr	r3, [pc, #204]	; (80014cc <ExtLightsRxBtcState+0x154>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d104      	bne.n	8001410 <ExtLightsRxBtcState+0x98>
	{

		ExtLights_RearFogLight_CurrentState = Btc_RearFogLight;
 8001406:	4b31      	ldr	r3, [pc, #196]	; (80014cc <ExtLightsRxBtcState+0x154>)
 8001408:	781a      	ldrb	r2, [r3, #0]
 800140a:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <ExtLightsRxBtcState+0x158>)
 800140c:	701a      	strb	r2, [r3, #0]
 800140e:	e007      	b.n	8001420 <ExtLightsRxBtcState+0xa8>

	}
	else if(Btc_RearFogLight == STD_LOW)
 8001410:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <ExtLightsRxBtcState+0x154>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d103      	bne.n	8001420 <ExtLightsRxBtcState+0xa8>
	{

		ExtLights_RearFogLight_CurrentState = Btc_RearFogLight;
 8001418:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <ExtLightsRxBtcState+0x154>)
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <ExtLightsRxBtcState+0x158>)
 800141e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_BrakeLight == STD_HIGH)
 8001420:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <ExtLightsRxBtcState+0x15c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d104      	bne.n	8001432 <ExtLightsRxBtcState+0xba>
	{

		ExtLights_BrakeLight_CurrentState = Btc_BrakeLight;
 8001428:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <ExtLightsRxBtcState+0x15c>)
 800142a:	781a      	ldrb	r2, [r3, #0]
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <ExtLightsRxBtcState+0x160>)
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	e007      	b.n	8001442 <ExtLightsRxBtcState+0xca>

	}
	else if(Btc_BrakeLight == STD_LOW)
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <ExtLightsRxBtcState+0x15c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <ExtLightsRxBtcState+0xca>
	{

		ExtLights_BrakeLight_CurrentState = Btc_BrakeLight;
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <ExtLightsRxBtcState+0x15c>)
 800143c:	781a      	ldrb	r2, [r3, #0]
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <ExtLightsRxBtcState+0x160>)
 8001440:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_TurnSignalLeft == STD_HIGH)
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <ExtLightsRxBtcState+0x164>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d104      	bne.n	8001454 <ExtLightsRxBtcState+0xdc>
	{

		ExtLights_TurnSignalLeft_CurrentState = Btc_TurnSignalLeft;
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <ExtLightsRxBtcState+0x164>)
 800144c:	781a      	ldrb	r2, [r3, #0]
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <ExtLightsRxBtcState+0x168>)
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	e007      	b.n	8001464 <ExtLightsRxBtcState+0xec>

	}
	else if(Btc_TurnSignalLeft == STD_LOW)
 8001454:	4b21      	ldr	r3, [pc, #132]	; (80014dc <ExtLightsRxBtcState+0x164>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d103      	bne.n	8001464 <ExtLightsRxBtcState+0xec>
	{

		ExtLights_TurnSignalLeft_CurrentState = Btc_TurnSignalLeft;
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <ExtLightsRxBtcState+0x164>)
 800145e:	781a      	ldrb	r2, [r3, #0]
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <ExtLightsRxBtcState+0x168>)
 8001462:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_TurnSignalRight == STD_HIGH)
 8001464:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <ExtLightsRxBtcState+0x16c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d104      	bne.n	8001476 <ExtLightsRxBtcState+0xfe>
	{

		ExtLights_TurnSignalRight_CurrentState = Btc_TurnSignalRight;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <ExtLightsRxBtcState+0x16c>)
 800146e:	781a      	ldrb	r2, [r3, #0]
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <ExtLightsRxBtcState+0x170>)
 8001472:	701a      	strb	r2, [r3, #0]
 8001474:	e007      	b.n	8001486 <ExtLightsRxBtcState+0x10e>

	}
	else if(Btc_TurnSignalRight == STD_LOW)
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <ExtLightsRxBtcState+0x16c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d103      	bne.n	8001486 <ExtLightsRxBtcState+0x10e>
	{

		ExtLights_TurnSignalRight_CurrentState = Btc_TurnSignalRight;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <ExtLightsRxBtcState+0x16c>)
 8001480:	781a      	ldrb	r2, [r3, #0]
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <ExtLightsRxBtcState+0x170>)
 8001484:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_HazardLight == STD_HIGH)
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <ExtLightsRxBtcState+0x174>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d104      	bne.n	8001498 <ExtLightsRxBtcState+0x120>
	{

		ExtLights_HazardLight_CurrentState = Btc_HazardLight;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <ExtLightsRxBtcState+0x174>)
 8001490:	781a      	ldrb	r2, [r3, #0]
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <ExtLightsRxBtcState+0x178>)
 8001494:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001496:	e007      	b.n	80014a8 <ExtLightsRxBtcState+0x130>
	else if(Btc_HazardLight == STD_LOW)
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <ExtLightsRxBtcState+0x174>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d103      	bne.n	80014a8 <ExtLightsRxBtcState+0x130>
		ExtLights_HazardLight_CurrentState = Btc_HazardLight;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <ExtLightsRxBtcState+0x174>)
 80014a2:	781a      	ldrb	r2, [r3, #0]
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <ExtLightsRxBtcState+0x178>)
 80014a6:	701a      	strb	r2, [r3, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	200000a5 	.word	0x200000a5
 80014b8:	2000009e 	.word	0x2000009e
 80014bc:	200000a6 	.word	0x200000a6
 80014c0:	2000009f 	.word	0x2000009f
 80014c4:	200000a8 	.word	0x200000a8
 80014c8:	200000a0 	.word	0x200000a0
 80014cc:	200000ad 	.word	0x200000ad
 80014d0:	200000a4 	.word	0x200000a4
 80014d4:	200000ac 	.word	0x200000ac
 80014d8:	2000009c 	.word	0x2000009c
 80014dc:	200000a9 	.word	0x200000a9
 80014e0:	200000a1 	.word	0x200000a1
 80014e4:	200000aa 	.word	0x200000aa
 80014e8:	200000a2 	.word	0x200000a2
 80014ec:	200000ab 	.word	0x200000ab
 80014f0:	200000a3 	.word	0x200000a3

080014f4 <ExtLightsLightReadSensorValue>:

uint32 ExtLightsLightReadSensorValue()
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0

	uint8 sensorValue = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	71fb      	strb	r3, [r7, #7]

	sensorValue = ADC_BUFFER[2];
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <ExtLightsLightReadSensorValue+0x20>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	71fb      	strb	r3, [r7, #7]

	return sensorValue;
 8001504:	79fb      	ldrb	r3, [r7, #7]

}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200000c8 	.word	0x200000c8

08001518 <ExtLightsLowBeam>:

void ExtLightsLowBeam(uint8 PinState)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LOWBEAM_PORT, EXTLIGHTS_LOWBEAM_PIN, PinState);
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	461a      	mov	r2, r3
 8001526:	2120      	movs	r1, #32
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <ExtLightsLowBeam+0x20>)
 800152a:	f004 f8cd 	bl	80056c8 <HAL_GPIO_WritePin>

}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40020000 	.word	0x40020000

0800153c <ExtLightsHighBeam>:

void ExtLightsHighBeam(uint8 PinState)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	461a      	mov	r2, r3
 800154a:	2120      	movs	r1, #32
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <ExtLightsHighBeam+0x20>)
 800154e:	f004 f8bb 	bl	80056c8 <HAL_GPIO_WritePin>

}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40020000 	.word	0x40020000

08001560 <ExtLightsDayTimeRunningLight>:

void ExtLightsDayTimeRunningLight(uint8 PinState)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_DAYTIMERUNNINGLIGHT_PORT, EXTLIGHTS_DAYTIMERUNNINGLIGHT_PIN, PinState);
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	461a      	mov	r2, r3
 800156e:	2120      	movs	r1, #32
 8001570:	4803      	ldr	r0, [pc, #12]	; (8001580 <ExtLightsDayTimeRunningLight+0x20>)
 8001572:	f004 f8a9 	bl	80056c8 <HAL_GPIO_WritePin>

}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40020000 	.word	0x40020000

08001584 <ExtLightsFrontFogLight>:

void ExtLightsFrontFogLight(uint8 PinState)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_FRONTFOGLIGHT_PORT, EXTLIGHTS_FRONTFOGLIGHT_PIN, PinState);
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	461a      	mov	r2, r3
 8001592:	2120      	movs	r1, #32
 8001594:	4803      	ldr	r0, [pc, #12]	; (80015a4 <ExtLightsFrontFogLight+0x20>)
 8001596:	f004 f897 	bl	80056c8 <HAL_GPIO_WritePin>

}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40020000 	.word	0x40020000

080015a8 <ExtLightsTurnSignalLeft>:

void ExtLightsTurnSignalLeft(uint8 PinState)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALLEFT_PORT, EXTLIGHTS_TURNSIGNALLEFT_PIN, PinState);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	461a      	mov	r2, r3
 80015b6:	2120      	movs	r1, #32
 80015b8:	4803      	ldr	r0, [pc, #12]	; (80015c8 <ExtLightsTurnSignalLeft+0x20>)
 80015ba:	f004 f885 	bl	80056c8 <HAL_GPIO_WritePin>

}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40020000 	.word	0x40020000

080015cc <ExtLightsTurnSignalRight>:

void ExtLightsTurnSignalRight(uint8 PinState)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALRIGHT_PORT, EXTLIGHTS_TURNSIGNALRIGHT_PIN, PinState);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	461a      	mov	r2, r3
 80015da:	2120      	movs	r1, #32
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <ExtLightsTurnSignalRight+0x20>)
 80015de:	f004 f873 	bl	80056c8 <HAL_GPIO_WritePin>

}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40020000 	.word	0x40020000

080015f0 <ExtLightsRearPositionLight>:

void ExtLightsRearPositionLight(uint8 PinState)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARPOSITIONLIGHT_PORT, EXTLIGHTS_REARPOSITIONLIGHT_PIN, PinState);
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	461a      	mov	r2, r3
 80015fe:	2120      	movs	r1, #32
 8001600:	4803      	ldr	r0, [pc, #12]	; (8001610 <ExtLightsRearPositionLight+0x20>)
 8001602:	f004 f861 	bl	80056c8 <HAL_GPIO_WritePin>

}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40020000 	.word	0x40020000

08001614 <ExtLightsRearFogLight>:

void ExtLightsRearFogLight(uint8 PinState)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REARFOGLIGHT_PORT, EXTLIGHTS_REARFOGLIGHT_PIN, PinState);
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	461a      	mov	r2, r3
 8001622:	2120      	movs	r1, #32
 8001624:	4803      	ldr	r0, [pc, #12]	; (8001634 <ExtLightsRearFogLight+0x20>)
 8001626:	f004 f84f 	bl	80056c8 <HAL_GPIO_WritePin>

}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40020000 	.word	0x40020000

08001638 <ExtLightsReverseLight>:
	HAL_GPIO_WritePin(EXTLIGHTS_BRAKELIGHT_PORT, EXTLIGHTS_BRAKELIGHT_PIN, PinState);

}

void ExtLightsReverseLight(uint8 PinState)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	461a      	mov	r2, r3
 8001646:	2120      	movs	r1, #32
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <ExtLightsReverseLight+0x20>)
 800164a:	f004 f83d 	bl	80056c8 <HAL_GPIO_WritePin>

}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40020000 	.word	0x40020000

0800165c <ExtLightsLicensePlateLight>:

void ExtLightsLicensePlateLight(uint8 PinState)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(EXTLIGHTS_LICENSEPLATELIGHT_PORT, EXTLIGHTS_LICENSEPLATELIGHT_PIN, PinState);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	461a      	mov	r2, r3
 800166a:	2120      	movs	r1, #32
 800166c:	4803      	ldr	r0, [pc, #12]	; (800167c <ExtLightsLicensePlateLight+0x20>)
 800166e:	f004 f82b 	bl	80056c8 <HAL_GPIO_WritePin>

}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40020000 	.word	0x40020000

08001680 <HVACTemSenReturnTemperatureValue>:
	}

}

float HVACTemSenReturnTemperatureValue(float TemSenVal)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	ed87 0a01 	vstr	s0, [r7, #4]

	/* redo */

	return 1;
 800168a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800168e:	ee07 3a90 	vmov	s15, r3

}
 8001692:	eeb0 0a67 	vmov.f32	s0, s15
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HVACTemSenAdcReceivedValues>:

float HVACTemSenAdcReceivedValues()
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0

	uint32 RxTem = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, 6);
 80016aa:	2206      	movs	r2, #6
 80016ac:	490f      	ldr	r1, [pc, #60]	; (80016ec <HVACTemSenAdcReceivedValues+0x4c>)
 80016ae:	4810      	ldr	r0, [pc, #64]	; (80016f0 <HVACTemSenAdcReceivedValues+0x50>)
 80016b0:	f002 f884 	bl	80037bc <HAL_ADC_Start_DMA>
	RxTem = HVACTemSenReturnTemperatureValue(ADC_BUFFER[0]);
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <HVACTemSenAdcReceivedValues+0x4c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	ee07 3a90 	vmov	s15, r3
 80016bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016c0:	eeb0 0a67 	vmov.f32	s0, s15
 80016c4:	f7ff ffdc 	bl	8001680 <HVACTemSenReturnTemperatureValue>
 80016c8:	eef0 7a40 	vmov.f32	s15, s0
 80016cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016d0:	ee17 3a90 	vmov	r3, s15
 80016d4:	607b      	str	r3, [r7, #4]

	return RxTem;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	ee07 3a90 	vmov	s15, r3
 80016dc:	eef8 7a67 	vcvt.f32.u32	s15, s15

}
 80016e0:	eeb0 0a67 	vmov.f32	s0, s15
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200000c8 	.word	0x200000c8
 80016f0:	200000e8 	.word	0x200000e8

080016f4 <HVACMainFunction>:


}

void HVACMainFunction()
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

	//HVACI2cTxToLcd();
	HVAC_TemSenRxTemperature = HVACTemSenAdcReceivedValues();
 80016f8:	f7ff ffd2 	bl	80016a0 <HVACTemSenAdcReceivedValues>
 80016fc:	eef0 7a40 	vmov.f32	s15, s0
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HVACMainFunction+0x1c>)
 8001702:	edc3 7a00 	vstr	s15, [r3]
	HVACState();
 8001706:	f000 f805 	bl	8001714 <HVACState>

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200000c4 	.word	0x200000c4

08001714 <HVACState>:

void HVACState()
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0

	HVAC_BackwindowDefrost_CurrentState 	= Btc_BackwindowDefrost;
 800171a:	4ba4      	ldr	r3, [pc, #656]	; (80019ac <HVACState+0x298>)
 800171c:	781a      	ldrb	r2, [r3, #0]
 800171e:	4ba4      	ldr	r3, [pc, #656]	; (80019b0 <HVACState+0x29c>)
 8001720:	701a      	strb	r2, [r3, #0]
	HVAC_AC_CurrentState 					= Btc_AC;
 8001722:	4ba4      	ldr	r3, [pc, #656]	; (80019b4 <HVACState+0x2a0>)
 8001724:	781a      	ldrb	r2, [r3, #0]
 8001726:	4ba4      	ldr	r3, [pc, #656]	; (80019b8 <HVACState+0x2a4>)
 8001728:	701a      	strb	r2, [r3, #0]
	HVAC_RecirculationMode_CurrentState 	= Btc_RecirculationMode;
 800172a:	4ba4      	ldr	r3, [pc, #656]	; (80019bc <HVACState+0x2a8>)
 800172c:	781a      	ldrb	r2, [r3, #0]
 800172e:	4ba4      	ldr	r3, [pc, #656]	; (80019c0 <HVACState+0x2ac>)
 8001730:	701a      	strb	r2, [r3, #0]

	if(Btc_TemperatureValue != STD_LOW)
 8001732:	4ba4      	ldr	r3, [pc, #656]	; (80019c4 <HVACState+0x2b0>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d004      	beq.n	8001744 <HVACState+0x30>
	{

		HVAC_TemperatureValue = Btc_TemperatureValue;
 800173a:	4ba2      	ldr	r3, [pc, #648]	; (80019c4 <HVACState+0x2b0>)
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	4ba2      	ldr	r3, [pc, #648]	; (80019c8 <HVACState+0x2b4>)
 8001740:	701a      	strb	r2, [r3, #0]
 8001742:	e009      	b.n	8001758 <HVACState+0x44>

	}
	else if(Btc_TemperatureValue == STD_LOW)
 8001744:	4b9f      	ldr	r3, [pc, #636]	; (80019c4 <HVACState+0x2b0>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d105      	bne.n	8001758 <HVACState+0x44>
	{

		Btc_TemperatureValue 	= 22;
 800174c:	4b9d      	ldr	r3, [pc, #628]	; (80019c4 <HVACState+0x2b0>)
 800174e:	2216      	movs	r2, #22
 8001750:	701a      	strb	r2, [r3, #0]
		Btc_FanValue 		= 1;
 8001752:	4b9e      	ldr	r3, [pc, #632]	; (80019cc <HVACState+0x2b8>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_FanValue == STD_LOW)
 8001758:	4b9c      	ldr	r3, [pc, #624]	; (80019cc <HVACState+0x2b8>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d103      	bne.n	8001768 <HVACState+0x54>
	{

		HVAC_CurrentState = STD_LOW;
 8001760:	4b9b      	ldr	r3, [pc, #620]	; (80019d0 <HVACState+0x2bc>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
 8001766:	e00a      	b.n	800177e <HVACState+0x6a>

	}
	else if(Btc_FanValue != STD_LOW)
 8001768:	4b98      	ldr	r3, [pc, #608]	; (80019cc <HVACState+0x2b8>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HVACState+0x6a>
	{

		HVAC_CurrentState 	= STD_HIGH;
 8001770:	4b97      	ldr	r3, [pc, #604]	; (80019d0 <HVACState+0x2bc>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
		HVAC_FanValue 		= Btc_FanValue;
 8001776:	4b95      	ldr	r3, [pc, #596]	; (80019cc <HVACState+0x2b8>)
 8001778:	781a      	ldrb	r2, [r3, #0]
 800177a:	4b96      	ldr	r3, [pc, #600]	; (80019d4 <HVACState+0x2c0>)
 800177c:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_LegVents == STD_HIGH)
 800177e:	4b96      	ldr	r3, [pc, #600]	; (80019d8 <HVACState+0x2c4>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d107      	bne.n	8001796 <HVACState+0x82>
	{

		Btc_AutomaticMode 			= STD_LOW;
 8001786:	4b95      	ldr	r3, [pc, #596]	; (80019dc <HVACState+0x2c8>)
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 	= Btc_LegVents;
 800178c:	4b92      	ldr	r3, [pc, #584]	; (80019d8 <HVACState+0x2c4>)
 800178e:	781a      	ldrb	r2, [r3, #0]
 8001790:	4b93      	ldr	r3, [pc, #588]	; (80019e0 <HVACState+0x2cc>)
 8001792:	701a      	strb	r2, [r3, #0]
 8001794:	e00a      	b.n	80017ac <HVACState+0x98>

	}
	else if(Btc_LegVents == STD_LOW)
 8001796:	4b90      	ldr	r3, [pc, #576]	; (80019d8 <HVACState+0x2c4>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d106      	bne.n	80017ac <HVACState+0x98>
	{

		Btc_AutomaticMode 			= STD_LOW;
 800179e:	4b8f      	ldr	r3, [pc, #572]	; (80019dc <HVACState+0x2c8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 	= Btc_LegVents;
 80017a4:	4b8c      	ldr	r3, [pc, #560]	; (80019d8 <HVACState+0x2c4>)
 80017a6:	781a      	ldrb	r2, [r3, #0]
 80017a8:	4b8d      	ldr	r3, [pc, #564]	; (80019e0 <HVACState+0x2cc>)
 80017aa:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_MidVents == STD_HIGH)
 80017ac:	4b8d      	ldr	r3, [pc, #564]	; (80019e4 <HVACState+0x2d0>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d107      	bne.n	80017c4 <HVACState+0xb0>
	{

		Btc_AutomaticMode 			= STD_LOW;
 80017b4:	4b89      	ldr	r3, [pc, #548]	; (80019dc <HVACState+0x2c8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 	= Btc_MidVents;
 80017ba:	4b8a      	ldr	r3, [pc, #552]	; (80019e4 <HVACState+0x2d0>)
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	4b8a      	ldr	r3, [pc, #552]	; (80019e8 <HVACState+0x2d4>)
 80017c0:	701a      	strb	r2, [r3, #0]
 80017c2:	e00a      	b.n	80017da <HVACState+0xc6>

	}
	else if(Btc_MidVents == STD_LOW)
 80017c4:	4b87      	ldr	r3, [pc, #540]	; (80019e4 <HVACState+0x2d0>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d106      	bne.n	80017da <HVACState+0xc6>
	{

		Btc_AutomaticMode 			= STD_LOW;
 80017cc:	4b83      	ldr	r3, [pc, #524]	; (80019dc <HVACState+0x2c8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 	= Btc_MidVents;
 80017d2:	4b84      	ldr	r3, [pc, #528]	; (80019e4 <HVACState+0x2d0>)
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	4b84      	ldr	r3, [pc, #528]	; (80019e8 <HVACState+0x2d4>)
 80017d8:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_WindshieldVents == STD_HIGH)
 80017da:	4b84      	ldr	r3, [pc, #528]	; (80019ec <HVACState+0x2d8>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <HVACState+0xde>
	{

		Btc_AutomaticMode 					= STD_LOW;
 80017e2:	4b7e      	ldr	r3, [pc, #504]	; (80019dc <HVACState+0x2c8>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 	= Btc_WindshieldVents;
 80017e8:	4b80      	ldr	r3, [pc, #512]	; (80019ec <HVACState+0x2d8>)
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	4b80      	ldr	r3, [pc, #512]	; (80019f0 <HVACState+0x2dc>)
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	e00a      	b.n	8001808 <HVACState+0xf4>

	}
	else if(Btc_WindshieldVents == STD_LOW)
 80017f2:	4b7e      	ldr	r3, [pc, #504]	; (80019ec <HVACState+0x2d8>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d106      	bne.n	8001808 <HVACState+0xf4>
	{

		Btc_AutomaticMode 					= STD_LOW;
 80017fa:	4b78      	ldr	r3, [pc, #480]	; (80019dc <HVACState+0x2c8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 	= Btc_WindshieldVents;
 8001800:	4b7a      	ldr	r3, [pc, #488]	; (80019ec <HVACState+0x2d8>)
 8001802:	781a      	ldrb	r2, [r3, #0]
 8001804:	4b7a      	ldr	r3, [pc, #488]	; (80019f0 <HVACState+0x2dc>)
 8001806:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_WindshieldDefrost == STD_HIGH)
 8001808:	4b7a      	ldr	r3, [pc, #488]	; (80019f4 <HVACState+0x2e0>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d110      	bne.n	8001832 <HVACState+0x11e>
	{

		Btc_AutomaticMode				 		= STD_LOW;
 8001810:	4b72      	ldr	r3, [pc, #456]	; (80019dc <HVACState+0x2c8>)
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 8001816:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <HVACState+0x2e0>)
 8001818:	781a      	ldrb	r2, [r3, #0]
 800181a:	4b77      	ldr	r3, [pc, #476]	; (80019f8 <HVACState+0x2e4>)
 800181c:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= STD_LOW;
 800181e:	4b70      	ldr	r3, [pc, #448]	; (80019e0 <HVACState+0x2cc>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= STD_LOW;
 8001824:	4b70      	ldr	r3, [pc, #448]	; (80019e8 <HVACState+0x2d4>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= STD_LOW;
 800182a:	4b71      	ldr	r3, [pc, #452]	; (80019f0 <HVACState+0x2dc>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	e016      	b.n	8001860 <HVACState+0x14c>

	}
	else if(Btc_WindshieldDefrost == STD_LOW)
 8001832:	4b70      	ldr	r3, [pc, #448]	; (80019f4 <HVACState+0x2e0>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d112      	bne.n	8001860 <HVACState+0x14c>
	{

		Btc_AutomaticMode				 		= STD_LOW;
 800183a:	4b68      	ldr	r3, [pc, #416]	; (80019dc <HVACState+0x2c8>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 8001840:	4b6c      	ldr	r3, [pc, #432]	; (80019f4 <HVACState+0x2e0>)
 8001842:	781a      	ldrb	r2, [r3, #0]
 8001844:	4b6c      	ldr	r3, [pc, #432]	; (80019f8 <HVACState+0x2e4>)
 8001846:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= Btc_LegVents;
 8001848:	4b63      	ldr	r3, [pc, #396]	; (80019d8 <HVACState+0x2c4>)
 800184a:	781a      	ldrb	r2, [r3, #0]
 800184c:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <HVACState+0x2cc>)
 800184e:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= Btc_MidVents;
 8001850:	4b64      	ldr	r3, [pc, #400]	; (80019e4 <HVACState+0x2d0>)
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	4b64      	ldr	r3, [pc, #400]	; (80019e8 <HVACState+0x2d4>)
 8001856:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= Btc_WindshieldVents;
 8001858:	4b64      	ldr	r3, [pc, #400]	; (80019ec <HVACState+0x2d8>)
 800185a:	781a      	ldrb	r2, [r3, #0]
 800185c:	4b64      	ldr	r3, [pc, #400]	; (80019f0 <HVACState+0x2dc>)
 800185e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Btc_AutomaticMode == STD_HIGH)
 8001860:	4b5e      	ldr	r3, [pc, #376]	; (80019dc <HVACState+0x2c8>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	f040 80e5 	bne.w	8001a34 <HVACState+0x320>
	{

		HVAC_AutomaticMode_CurrentState 		= STD_HIGH;
 800186a:	4b64      	ldr	r3, [pc, #400]	; (80019fc <HVACState+0x2e8>)
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= STD_LOW;
 8001870:	4b61      	ldr	r3, [pc, #388]	; (80019f8 <HVACState+0x2e4>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= STD_LOW;
 8001876:	4b5e      	ldr	r3, [pc, #376]	; (80019f0 <HVACState+0x2dc>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= STD_LOW;
 800187c:	4b5a      	ldr	r3, [pc, #360]	; (80019e8 <HVACState+0x2d4>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= STD_LOW;
 8001882:	4b57      	ldr	r3, [pc, #348]	; (80019e0 <HVACState+0x2cc>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]

		if(HVAC_TemperatureValue < HVAC_TemSenRxTemperature)
 8001888:	4b4f      	ldr	r3, [pc, #316]	; (80019c8 <HVACState+0x2b4>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001894:	4b5a      	ldr	r3, [pc, #360]	; (8001a00 <HVACState+0x2ec>)
 8001896:	edd3 7a00 	vldr	s15, [r3]
 800189a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800189e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a2:	d542      	bpl.n	800192a <HVACState+0x216>
		{

			if((HVAC_TemSenRxTemperature - HVAC_TemperatureValue) * 2 > 7)
 80018a4:	4b56      	ldr	r3, [pc, #344]	; (8001a00 <HVACState+0x2ec>)
 80018a6:	ed93 7a00 	vldr	s14, [r3]
 80018aa:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HVACState+0x2b4>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018be:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80018c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	dd03      	ble.n	80018d4 <HVACState+0x1c0>
			{

				HVAC_FanValue = 7;
 80018cc:	4b41      	ldr	r3, [pc, #260]	; (80019d4 <HVACState+0x2c0>)
 80018ce:	2207      	movs	r2, #7
 80018d0:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 80018d2:	e0c6      	b.n	8001a62 <HVACState+0x34e>
			else if((HVAC_TemSenRxTemperature - HVAC_TemperatureValue) * 2 <= 7)
 80018d4:	4b4a      	ldr	r3, [pc, #296]	; (8001a00 <HVACState+0x2ec>)
 80018d6:	ed93 7a00 	vldr	s14, [r3]
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HVACState+0x2b4>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	ee07 3a90 	vmov	s15, r3
 80018e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018ee:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80018f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fa:	d900      	bls.n	80018fe <HVACState+0x1ea>
}
 80018fc:	e0b1      	b.n	8001a62 <HVACState+0x34e>
				HVAC_FanValue = (HVAC_TemSenRxTemperature - HVAC_TemperatureValue) * 2;
 80018fe:	4b40      	ldr	r3, [pc, #256]	; (8001a00 <HVACState+0x2ec>)
 8001900:	ed93 7a00 	vldr	s14, [r3]
 8001904:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <HVACState+0x2b4>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	ee07 3a90 	vmov	s15, r3
 800190c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001910:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001914:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800191c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001920:	793b      	ldrb	r3, [r7, #4]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HVACState+0x2c0>)
 8001926:	701a      	strb	r2, [r3, #0]
}
 8001928:	e09b      	b.n	8001a62 <HVACState+0x34e>
		else if(HVAC_TemperatureValue >= HVAC_TemSenRxTemperature)
 800192a:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HVACState+0x2b4>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001936:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <HVACState+0x2ec>)
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001944:	da00      	bge.n	8001948 <HVACState+0x234>
}
 8001946:	e08c      	b.n	8001a62 <HVACState+0x34e>
			if((HVAC_TemSenRxTemperature - HVAC_TemperatureValue) / 2 < 1)
 8001948:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <HVACState+0x2ec>)
 800194a:	ed93 7a00 	vldr	s14, [r3]
 800194e:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <HVACState+0x2b4>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800195e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001962:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800196a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800196e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001972:	d503      	bpl.n	800197c <HVACState+0x268>
				HVAC_FanValue = 1;
 8001974:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <HVACState+0x2c0>)
 8001976:	2201      	movs	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
}
 800197a:	e072      	b.n	8001a62 <HVACState+0x34e>
			else if((HVAC_TemSenRxTemperature - HVAC_TemperatureValue) / 2 > 1)
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HVACState+0x2ec>)
 800197e:	ed93 7a00 	vldr	s14, [r3]
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HVACState+0x2b4>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001992:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001996:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800199e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a6:	dc2d      	bgt.n	8001a04 <HVACState+0x2f0>
}
 80019a8:	e05b      	b.n	8001a62 <HVACState+0x34e>
 80019aa:	bf00      	nop
 80019ac:	200000bf 	.word	0x200000bf
 80019b0:	200000b8 	.word	0x200000b8
 80019b4:	200000c0 	.word	0x200000c0
 80019b8:	200000b5 	.word	0x200000b5
 80019bc:	200000c2 	.word	0x200000c2
 80019c0:	200000b7 	.word	0x200000b7
 80019c4:	200000b9 	.word	0x200000b9
 80019c8:	200000af 	.word	0x200000af
 80019cc:	200000ba 	.word	0x200000ba
 80019d0:	200000ae 	.word	0x200000ae
 80019d4:	200000b0 	.word	0x200000b0
 80019d8:	200000bb 	.word	0x200000bb
 80019dc:	200000c1 	.word	0x200000c1
 80019e0:	200000b1 	.word	0x200000b1
 80019e4:	200000bc 	.word	0x200000bc
 80019e8:	200000b2 	.word	0x200000b2
 80019ec:	200000bd 	.word	0x200000bd
 80019f0:	200000b3 	.word	0x200000b3
 80019f4:	200000be 	.word	0x200000be
 80019f8:	200000b4 	.word	0x200000b4
 80019fc:	200000b6 	.word	0x200000b6
 8001a00:	200000c4 	.word	0x200000c4
				HVAC_FanValue = (HVAC_TemSenRxTemperature - HVAC_TemperatureValue) / 2;
 8001a04:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <HVACState+0x35c>)
 8001a06:	ed93 7a00 	vldr	s14, [r3]
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <HVACState+0x360>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	ee07 3a90 	vmov	s15, r3
 8001a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a1a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a26:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a2a:	793b      	ldrb	r3, [r7, #4]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HVACState+0x364>)
 8001a30:	701a      	strb	r2, [r3, #0]
}
 8001a32:	e016      	b.n	8001a62 <HVACState+0x34e>
	else if(Btc_NormalMode == STD_HIGH)
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HVACState+0x368>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d112      	bne.n	8001a62 <HVACState+0x34e>
		HVAC_AutomaticMode_CurrentState 		= STD_LOW;
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <HVACState+0x36c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldDefrost_CurrentState 	= Btc_WindshieldDefrost;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HVACState+0x370>)
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <HVACState+0x374>)
 8001a48:	701a      	strb	r2, [r3, #0]
		HVAC_WindshieldVents_CurrentState 		= Btc_WindshieldVents;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HVACState+0x378>)
 8001a4c:	781a      	ldrb	r2, [r3, #0]
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HVACState+0x37c>)
 8001a50:	701a      	strb	r2, [r3, #0]
		HVAC_MidVents_CurrentState 				= Btc_MidVents;
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HVACState+0x380>)
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HVACState+0x384>)
 8001a58:	701a      	strb	r2, [r3, #0]
		HVAC_LegVents_CurrentState 				= Btc_LegVents;
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <HVACState+0x388>)
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HVACState+0x38c>)
 8001a60:	701a      	strb	r2, [r3, #0]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	200000c4 	.word	0x200000c4
 8001a74:	200000af 	.word	0x200000af
 8001a78:	200000b0 	.word	0x200000b0
 8001a7c:	200000c3 	.word	0x200000c3
 8001a80:	200000b6 	.word	0x200000b6
 8001a84:	200000be 	.word	0x200000be
 8001a88:	200000b4 	.word	0x200000b4
 8001a8c:	200000bd 	.word	0x200000bd
 8001a90:	200000b3 	.word	0x200000b3
 8001a94:	200000bc 	.word	0x200000bc
 8001a98:	200000b2 	.word	0x200000b2
 8001a9c:	200000bb 	.word	0x200000bb
 8001aa0:	200000b1 	.word	0x200000b1

08001aa4 <IntLightsRxBtcState>:
void IntLightsMainFunction();
void IntLightsToggleIntLights(uint8 PinState);
void IntLightsRxBtcState();

void IntLightsRxBtcState()
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

	if(Btc_IntLights == STD_HIGH)
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <IntLightsRxBtcState+0x30>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d104      	bne.n	8001aba <IntLightsRxBtcState+0x16>
	{
		IntLights_CurrentState = Btc_IntLights;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <IntLightsRxBtcState+0x30>)
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <IntLightsRxBtcState+0x34>)
 8001ab6:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

}
 8001ab8:	e007      	b.n	8001aca <IntLightsRxBtcState+0x26>
	else if(Btc_IntLights == STD_LOW)
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <IntLightsRxBtcState+0x30>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d103      	bne.n	8001aca <IntLightsRxBtcState+0x26>
		IntLights_CurrentState = Btc_IntLights;
 8001ac2:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <IntLightsRxBtcState+0x30>)
 8001ac4:	781a      	ldrb	r2, [r3, #0]
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <IntLightsRxBtcState+0x34>)
 8001ac8:	701a      	strb	r2, [r3, #0]
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	200000e1 	.word	0x200000e1
 8001ad8:	200000e0 	.word	0x200000e0

08001adc <IntLightsMainFunction>:

void IntLightsMainFunction()
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	IntLightsRxBtcState();
 8001ae0:	f7ff ffe0 	bl	8001aa4 <IntLightsRxBtcState>
	IntLightsToggleIntLights(IntLights_CurrentState);
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <IntLightsMainFunction+0x18>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 f805 	bl	8001af8 <IntLightsToggleIntLights>

}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200000e0 	.word	0x200000e0

08001af8 <IntLightsToggleIntLights>:
	return E_OK;

}

void IntLightsToggleIntLights(uint8 PinState)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	461a      	mov	r2, r3
 8001b06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b0a:	4803      	ldr	r0, [pc, #12]	; (8001b18 <IntLightsToggleIntLights+0x20>)
 8001b0c:	f003 fddc 	bl	80056c8 <HAL_GPIO_WritePin>

}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40020400 	.word	0x40020400

08001b1c <SecAlmVibSenStatus>:
	return PinState;

}

StdReturnType SecAlmVibSenStatus()
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

	//SecAlm_VibSenStatusFlag = SecAlmVibeSenReadPin();

	if(CenLoc_CurrentState == STD_HIGH)
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <SecAlmVibSenStatus+0x44>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d103      	bne.n	8001b30 <SecAlmVibSenStatus+0x14>
	{

		SecAlm_VibSenStateSetToOff = STD_HIGH;
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <SecAlmVibSenStatus+0x48>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	701a      	strb	r2, [r3, #0]
 8001b2e:	e006      	b.n	8001b3e <SecAlmVibSenStatus+0x22>

	}
	else if(CenLoc_CurrentState == STD_LOW)
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <SecAlmVibSenStatus+0x44>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <SecAlmVibSenStatus+0x22>
	{

		SecAlm_VibSenStateSetToOff = STD_LOW;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <SecAlmVibSenStatus+0x48>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(SecAlm_VibSenStateSetToOff == STD_LOW && SecAlm_VibSenStatusFlag == STD_LOW)
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <SecAlmVibSenStatus+0x48>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d105      	bne.n	8001b52 <SecAlmVibSenStatus+0x36>
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <SecAlmVibSenStatus+0x4c>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <SecAlmVibSenStatus+0x36>
	{

		return STD_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <SecAlmVibSenStatus+0x38>

		/* do nothing */

	}

	return STD_HIGH;
 8001b52:	2301      	movs	r3, #1

}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000091 	.word	0x20000091
 8001b64:	200000e6 	.word	0x200000e6
 8001b68:	200000e5 	.word	0x200000e5

08001b6c <SecAlmState>:

void SecAlmState()
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0

	if(SecAlm_PreviousState != SecAlm_Trigger)
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <SecAlmState+0x50>)
 8001b72:	781a      	ldrb	r2, [r3, #0]
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <SecAlmState+0x54>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d006      	beq.n	8001b8a <SecAlmState+0x1e>
	{

		HAL_TIM_Base_Init(&htim5);
 8001b7c:	4811      	ldr	r0, [pc, #68]	; (8001bc4 <SecAlmState+0x58>)
 8001b7e:	f008 f841 	bl	8009c04 <HAL_TIM_Base_Init>
		SecAlm_PreviousState = SecAlm_Trigger;
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <SecAlmState+0x54>)
 8001b84:	781a      	ldrb	r2, [r3, #0]
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <SecAlmState+0x50>)
 8001b88:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(SecAlmVibSenStatus() == STD_HIGH)
 8001b8a:	f7ff ffc7 	bl	8001b1c <SecAlmVibSenStatus>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d106      	bne.n	8001ba2 <SecAlmState+0x36>
	{

		SecAlm_Trigger = SecAlmVibSenStatus();
 8001b94:	f7ff ffc2 	bl	8001b1c <SecAlmVibSenStatus>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <SecAlmState+0x54>)
 8001b9e:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 8001ba0:	e00a      	b.n	8001bb8 <SecAlmState+0x4c>
	else if(SecAlmVibSenStatus() == STD_LOW)
 8001ba2:	f7ff ffbb 	bl	8001b1c <SecAlmVibSenStatus>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d105      	bne.n	8001bb8 <SecAlmState+0x4c>
		SecAlm_Trigger = SecAlmVibSenStatus();
 8001bac:	f7ff ffb6 	bl	8001b1c <SecAlmVibSenStatus>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b02      	ldr	r3, [pc, #8]	; (8001bc0 <SecAlmState+0x54>)
 8001bb6:	701a      	strb	r2, [r3, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	200000e4 	.word	0x200000e4
 8001bc0:	200000e2 	.word	0x200000e2
 8001bc4:	20000654 	.word	0x20000654

08001bc8 <SecAlmTurnOnExtLights>:

void SecAlmTurnOnExtLights()
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0

	ExtLightsLowBeam(SecAlm_PinStateChange);
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <SecAlmTurnOnExtLights+0x44>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fca1 	bl	8001518 <ExtLightsLowBeam>
	ExtLightsRearPositionLight(SecAlm_PinStateChange);
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <SecAlmTurnOnExtLights+0x44>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fd08 	bl	80015f0 <ExtLightsRearPositionLight>
	ExtLightsFrontFogLight(SecAlm_PinStateChange);
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <SecAlmTurnOnExtLights+0x44>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fccd 	bl	8001584 <ExtLightsFrontFogLight>
	ExtLightsRearFogLight(SecAlm_PinStateChange);
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <SecAlmTurnOnExtLights+0x44>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fd10 	bl	8001614 <ExtLightsRearFogLight>
	ExtLightsTurnSignalRight(SecAlm_PinStateChange);
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <SecAlmTurnOnExtLights+0x44>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fce7 	bl	80015cc <ExtLightsTurnSignalRight>
	ExtLightsTurnSignalLeft(SecAlm_PinStateChange);
 8001bfe:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <SecAlmTurnOnExtLights+0x44>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fcd0 	bl	80015a8 <ExtLightsTurnSignalLeft>

}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200000e7 	.word	0x200000e7

08001c10 <SecAlmLightsBuzzerControl>:

void SecAlmLightsBuzzerControl()
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0

	SecAlmState();
 8001c14:	f7ff ffaa 	bl	8001b6c <SecAlmState>

	if(SecAlm_Trigger == STD_HIGH)
 8001c18:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <SecAlmLightsBuzzerControl+0xa0>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d139      	bne.n	8001c94 <SecAlmLightsBuzzerControl+0x84>
	{

		HAL_TIM_Base_Start(&htim5);
 8001c20:	4824      	ldr	r0, [pc, #144]	; (8001cb4 <SecAlmLightsBuzzerControl+0xa4>)
 8001c22:	f008 f8c1 	bl	8009da8 <HAL_TIM_Base_Start>

		if(__HAL_TIM_GET_COUNTER(&htim5) < 100000)
 8001c26:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <SecAlmLightsBuzzerControl+0xa4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	4a22      	ldr	r2, [pc, #136]	; (8001cb8 <SecAlmLightsBuzzerControl+0xa8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d823      	bhi.n	8001c7a <SecAlmLightsBuzzerControl+0x6a>
		{

			HAL_TIM_Base_Start(&htim4);
 8001c32:	4822      	ldr	r0, [pc, #136]	; (8001cbc <SecAlmLightsBuzzerControl+0xac>)
 8001c34:	f008 f8b8 	bl	8009da8 <HAL_TIM_Base_Start>

			if(__HAL_TIM_GET_COUNTER(&htim4) < 5000)
 8001c38:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <SecAlmLightsBuzzerControl+0xac>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d805      	bhi.n	8001c52 <SecAlmLightsBuzzerControl+0x42>
			{

				SecAlm_PinStateChange = STD_HIGH;
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <SecAlmLightsBuzzerControl+0xb0>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
				SecAlmTurnOnExtLights();
 8001c4c:	f7ff ffbc 	bl	8001bc8 <SecAlmTurnOnExtLights>

		/* do nothing */

	}

}
 8001c50:	e02c      	b.n	8001cac <SecAlmLightsBuzzerControl+0x9c>
			else if(5000 < __HAL_TIM_GET_COUNTER(&htim4) && __HAL_TIM_GET_COUNTER(&htim4) < 10000)
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <SecAlmLightsBuzzerControl+0xac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d925      	bls.n	8001cac <SecAlmLightsBuzzerControl+0x9c>
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <SecAlmLightsBuzzerControl+0xac>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d81e      	bhi.n	8001cac <SecAlmLightsBuzzerControl+0x9c>
				SecAlm_PinStateChange = STD_LOW;
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <SecAlmLightsBuzzerControl+0xb0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
				SecAlmTurnOnExtLights();
 8001c74:	f7ff ffa8 	bl	8001bc8 <SecAlmTurnOnExtLights>
}
 8001c78:	e018      	b.n	8001cac <SecAlmLightsBuzzerControl+0x9c>
		else if(__HAL_TIM_GET_COUNTER(&htim5) > 100000)
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <SecAlmLightsBuzzerControl+0xa4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	4a10      	ldr	r2, [pc, #64]	; (8001cc4 <SecAlmLightsBuzzerControl+0xb4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d912      	bls.n	8001cac <SecAlmLightsBuzzerControl+0x9c>
			SecAlm_Trigger = STD_LOW;
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <SecAlmLightsBuzzerControl+0xa0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim5);
 8001c8c:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <SecAlmLightsBuzzerControl+0xa4>)
 8001c8e:	f008 f915 	bl	8009ebc <HAL_TIM_Base_Stop>
}
 8001c92:	e00b      	b.n	8001cac <SecAlmLightsBuzzerControl+0x9c>
	else if(SecAlm_Trigger == STD_LOW)
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <SecAlmLightsBuzzerControl+0xa0>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d107      	bne.n	8001cac <SecAlmLightsBuzzerControl+0x9c>
		HAL_TIM_Base_Stop(&htim4);
 8001c9c:	4807      	ldr	r0, [pc, #28]	; (8001cbc <SecAlmLightsBuzzerControl+0xac>)
 8001c9e:	f008 f90d 	bl	8009ebc <HAL_TIM_Base_Stop>
		SecAlm_PinStateChange = STD_LOW;
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <SecAlmLightsBuzzerControl+0xb0>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
		SecAlmTurnOnExtLights();
 8001ca8:	f7ff ff8e 	bl	8001bc8 <SecAlmTurnOnExtLights>
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	200000e2 	.word	0x200000e2
 8001cb4:	20000654 	.word	0x20000654
 8001cb8:	0001869f 	.word	0x0001869f
 8001cbc:	200005a0 	.word	0x200005a0
 8001cc0:	200000e7 	.word	0x200000e7
 8001cc4:	000186a0 	.word	0x000186a0

08001cc8 <SecAlmMainFunction>:

void SecAlmMainFunction()
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0

	SecAlmLightsBuzzerControl();
 8001ccc:	f7ff ffa0 	bl	8001c10 <SecAlmLightsBuzzerControl>

}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <SecAlmToggleAlarmLed>:
	HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);

}

void SecAlmToggleAlarmLed(uint8 PinState)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2180      	movs	r1, #128	; 0x80
 8001ce4:	4803      	ldr	r0, [pc, #12]	; (8001cf4 <SecAlmToggleAlarmLed+0x20>)
 8001ce6:	f003 fcef 	bl	80056c8 <HAL_GPIO_WritePin>

}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40020000 	.word	0x40020000

08001cf8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cfe:	463b      	mov	r3, r7
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d0a:	4b3e      	ldr	r3, [pc, #248]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001d0c:	4a3e      	ldr	r2, [pc, #248]	; (8001e08 <MX_ADC1_Init+0x110>)
 8001d0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d10:	4b3c      	ldr	r3, [pc, #240]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001d12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d18:	4b3a      	ldr	r3, [pc, #232]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d1e:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d24:	4b37      	ldr	r3, [pc, #220]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d2a:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d32:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d38:	4b32      	ldr	r3, [pc, #200]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001d3a:	4a34      	ldr	r2, [pc, #208]	; (8001e0c <MX_ADC1_Init+0x114>)
 8001d3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d3e:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001d44:	4b2f      	ldr	r3, [pc, #188]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001d46:	2205      	movs	r2, #5
 8001d48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d4a:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d52:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d58:	482a      	ldr	r0, [pc, #168]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001d5a:	f001 fa6b 	bl	8003234 <HAL_ADC_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d64:	f000 fbca 	bl	80024fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d74:	463b      	mov	r3, r7
 8001d76:	4619      	mov	r1, r3
 8001d78:	4822      	ldr	r0, [pc, #136]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001d7a:	f001 fe5f 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d84:	f000 fbba 	bl	80024fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d90:	463b      	mov	r3, r7
 8001d92:	4619      	mov	r1, r3
 8001d94:	481b      	ldr	r0, [pc, #108]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001d96:	f001 fe51 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001da0:	f000 fbac 	bl	80024fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001da4:	2303      	movs	r3, #3
 8001da6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001da8:	2303      	movs	r3, #3
 8001daa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dac:	463b      	mov	r3, r7
 8001dae:	4619      	mov	r1, r3
 8001db0:	4814      	ldr	r0, [pc, #80]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001db2:	f001 fe43 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001dbc:	f000 fb9e 	bl	80024fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001dc0:	2309      	movs	r3, #9
 8001dc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dc8:	463b      	mov	r3, r7
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480d      	ldr	r0, [pc, #52]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001dce:	f001 fe35 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001dd8:	f000 fb90 	bl	80024fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <MX_ADC1_Init+0x118>)
 8001dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001de0:	2305      	movs	r3, #5
 8001de2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001de4:	2307      	movs	r3, #7
 8001de6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de8:	463b      	mov	r3, r7
 8001dea:	4619      	mov	r1, r3
 8001dec:	4805      	ldr	r0, [pc, #20]	; (8001e04 <MX_ADC1_Init+0x10c>)
 8001dee:	f001 fe25 	bl	8003a3c <HAL_ADC_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8001df8:	f000 fb80 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200000e8 	.word	0x200000e8
 8001e08:	40012000 	.word	0x40012000
 8001e0c:	0f000001 	.word	0x0f000001
 8001e10:	10000012 	.word	0x10000012

08001e14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	; 0x30
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a4d      	ldr	r2, [pc, #308]	; (8001f68 <HAL_ADC_MspInit+0x154>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	f040 8094 	bne.w	8001f60 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	4b4b      	ldr	r3, [pc, #300]	; (8001f6c <HAL_ADC_MspInit+0x158>)
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e40:	4a4a      	ldr	r2, [pc, #296]	; (8001f6c <HAL_ADC_MspInit+0x158>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6453      	str	r3, [r2, #68]	; 0x44
 8001e48:	4b48      	ldr	r3, [pc, #288]	; (8001f6c <HAL_ADC_MspInit+0x158>)
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	4b44      	ldr	r3, [pc, #272]	; (8001f6c <HAL_ADC_MspInit+0x158>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	4a43      	ldr	r2, [pc, #268]	; (8001f6c <HAL_ADC_MspInit+0x158>)
 8001e5e:	f043 0304 	orr.w	r3, r3, #4
 8001e62:	6313      	str	r3, [r2, #48]	; 0x30
 8001e64:	4b41      	ldr	r3, [pc, #260]	; (8001f6c <HAL_ADC_MspInit+0x158>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e70:	2300      	movs	r3, #0
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <HAL_ADC_MspInit+0x158>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	4a3c      	ldr	r2, [pc, #240]	; (8001f6c <HAL_ADC_MspInit+0x158>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e80:	4b3a      	ldr	r3, [pc, #232]	; (8001f6c <HAL_ADC_MspInit+0x158>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	4b36      	ldr	r3, [pc, #216]	; (8001f6c <HAL_ADC_MspInit+0x158>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	4a35      	ldr	r2, [pc, #212]	; (8001f6c <HAL_ADC_MspInit+0x158>)
 8001e96:	f043 0302 	orr.w	r3, r3, #2
 8001e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9c:	4b33      	ldr	r3, [pc, #204]	; (8001f6c <HAL_ADC_MspInit+0x158>)
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001ea8:	2307      	movs	r3, #7
 8001eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eac:	2303      	movs	r3, #3
 8001eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	4619      	mov	r1, r3
 8001eba:	482d      	ldr	r0, [pc, #180]	; (8001f70 <HAL_ADC_MspInit+0x15c>)
 8001ebc:	f003 f96a 	bl	8005194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001ec0:	230e      	movs	r3, #14
 8001ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4828      	ldr	r0, [pc, #160]	; (8001f74 <HAL_ADC_MspInit+0x160>)
 8001ed4:	f003 f95e 	bl	8005194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001edc:	2303      	movs	r3, #3
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4823      	ldr	r0, [pc, #140]	; (8001f78 <HAL_ADC_MspInit+0x164>)
 8001eec:	f003 f952 	bl	8005194 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ef0:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <HAL_ADC_MspInit+0x168>)
 8001ef2:	4a23      	ldr	r2, [pc, #140]	; (8001f80 <HAL_ADC_MspInit+0x16c>)
 8001ef4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ef6:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <HAL_ADC_MspInit+0x168>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001efc:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <HAL_ADC_MspInit+0x168>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f02:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <HAL_ADC_MspInit+0x168>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f08:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <HAL_ADC_MspInit+0x168>)
 8001f0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f0e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f10:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <HAL_ADC_MspInit+0x168>)
 8001f12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f16:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f18:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_ADC_MspInit+0x168>)
 8001f1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f1e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_ADC_MspInit+0x168>)
 8001f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f26:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <HAL_ADC_MspInit+0x168>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <HAL_ADC_MspInit+0x168>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f34:	4811      	ldr	r0, [pc, #68]	; (8001f7c <HAL_ADC_MspInit+0x168>)
 8001f36:	f002 f9cd 	bl	80042d4 <HAL_DMA_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001f40:	f000 fadc 	bl	80024fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <HAL_ADC_MspInit+0x168>)
 8001f48:	639a      	str	r2, [r3, #56]	; 0x38
 8001f4a:	4a0c      	ldr	r2, [pc, #48]	; (8001f7c <HAL_ADC_MspInit+0x168>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2105      	movs	r1, #5
 8001f54:	2012      	movs	r0, #18
 8001f56:	f002 f94f 	bl	80041f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f5a:	2012      	movs	r0, #18
 8001f5c:	f002 f978 	bl	8004250 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001f60:	bf00      	nop
 8001f62:	3730      	adds	r7, #48	; 0x30
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40012000 	.word	0x40012000
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020800 	.word	0x40020800
 8001f74:	40020000 	.word	0x40020000
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	2000014c 	.word	0x2000014c
 8001f80:	40026410 	.word	0x40026410

08001f84 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <MX_CRC_Init+0x20>)
 8001f8a:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <MX_CRC_Init+0x24>)
 8001f8c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001f8e:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <MX_CRC_Init+0x20>)
 8001f90:	f002 f976 	bl	8004280 <HAL_CRC_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001f9a:	f000 faaf 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200001ac 	.word	0x200001ac
 8001fa8:	40023000 	.word	0x40023000

08001fac <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <HAL_CRC_MspInit+0x3c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d10d      	bne.n	8001fda <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_CRC_MspInit+0x40>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a09      	ldr	r2, [pc, #36]	; (8001fec <HAL_CRC_MspInit+0x40>)
 8001fc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b07      	ldr	r3, [pc, #28]	; (8001fec <HAL_CRC_MspInit+0x40>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40023000 	.word	0x40023000
 8001fec:	40023800 	.word	0x40023800

08001ff0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <MX_DMA_Init+0x3c>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a0b      	ldr	r2, [pc, #44]	; (800202c <MX_DMA_Init+0x3c>)
 8002000:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <MX_DMA_Init+0x3c>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	2105      	movs	r1, #5
 8002016:	2038      	movs	r0, #56	; 0x38
 8002018:	f002 f8ee 	bl	80041f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800201c:	2038      	movs	r0, #56	; 0x38
 800201e:	f002 f917 	bl	8004250 <HAL_NVIC_EnableIRQ>

}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800

08002030 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002034:	4a08      	ldr	r2, [pc, #32]	; (8002058 <MX_FREERTOS_Init+0x28>)
 8002036:	2100      	movs	r1, #0
 8002038:	4808      	ldr	r0, [pc, #32]	; (800205c <MX_FREERTOS_Init+0x2c>)
 800203a:	f00a f84f 	bl	800c0dc <osThreadNew>
 800203e:	4603      	mov	r3, r0
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <MX_FREERTOS_Init+0x30>)
 8002042:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8002044:	4a07      	ldr	r2, [pc, #28]	; (8002064 <MX_FREERTOS_Init+0x34>)
 8002046:	2100      	movs	r1, #0
 8002048:	4807      	ldr	r0, [pc, #28]	; (8002068 <MX_FREERTOS_Init+0x38>)
 800204a:	f00a f847 	bl	800c0dc <osThreadNew>
 800204e:	4603      	mov	r3, r0
 8002050:	4a06      	ldr	r2, [pc, #24]	; (800206c <MX_FREERTOS_Init+0x3c>)
 8002052:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	0800f45c 	.word	0x0800f45c
 800205c:	08002071 	.word	0x08002071
 8002060:	200001b8 	.word	0x200001b8
 8002064:	0800f480 	.word	0x0800f480
 8002068:	08002099 	.word	0x08002099
 800206c:	200001bc 	.word	0x200001bc

08002070 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  CenLocMainFunction();
 8002078:	f7fe ff88 	bl	8000f8c <CenLocMainFunction>
	  BtcMainFunction();
 800207c:	f7fe fd12 	bl	8000aa4 <BtcMainFunction>
	  ExtLightsMainFunction();
 8002080:	f7fe ff90 	bl	8000fa4 <ExtLightsMainFunction>
	  IntLightsMainFunction();
 8002084:	f7ff fd2a 	bl	8001adc <IntLightsMainFunction>
	  SecAlmMainFunction();
 8002088:	f7ff fe1e 	bl	8001cc8 <SecAlmMainFunction>
	  HVACMainFunction();
 800208c:	f7ff fb32 	bl	80016f4 <HVACMainFunction>
    osDelay(1);
 8002090:	2001      	movs	r0, #1
 8002092:	f00a f8b5 	bl	800c200 <osDelay>
	  CenLocMainFunction();
 8002096:	e7ef      	b.n	8002078 <StartDefaultTask+0x8>

08002098 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  OS_Counter++;
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <StartTask02+0x1c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a03      	ldr	r2, [pc, #12]	; (80020b4 <StartTask02+0x1c>)
 80020a8:	6013      	str	r3, [r2, #0]
    osDelay(1);
 80020aa:	2001      	movs	r0, #1
 80020ac:	f00a f8a8 	bl	800c200 <osDelay>
	  OS_Counter++;
 80020b0:	e7f6      	b.n	80020a0 <StartTask02+0x8>
 80020b2:	bf00      	nop
 80020b4:	200001b4 	.word	0x200001b4

080020b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	4b1e      	ldr	r3, [pc, #120]	; (800213c <MX_GPIO_Init+0x84>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a1d      	ldr	r2, [pc, #116]	; (800213c <MX_GPIO_Init+0x84>)
 80020c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b1b      	ldr	r3, [pc, #108]	; (800213c <MX_GPIO_Init+0x84>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <MX_GPIO_Init+0x84>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a16      	ldr	r2, [pc, #88]	; (800213c <MX_GPIO_Init+0x84>)
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <MX_GPIO_Init+0x84>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <MX_GPIO_Init+0x84>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a0f      	ldr	r2, [pc, #60]	; (800213c <MX_GPIO_Init+0x84>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b0d      	ldr	r3, [pc, #52]	; (800213c <MX_GPIO_Init+0x84>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <MX_GPIO_Init+0x84>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a08      	ldr	r2, [pc, #32]	; (800213c <MX_GPIO_Init+0x84>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <MX_GPIO_Init+0x84>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	683b      	ldr	r3, [r7, #0]

}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800

08002140 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <MX_I2C1_Init+0x50>)
 8002146:	4a13      	ldr	r2, [pc, #76]	; (8002194 <MX_I2C1_Init+0x54>)
 8002148:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800214a:	4b11      	ldr	r3, [pc, #68]	; (8002190 <MX_I2C1_Init+0x50>)
 800214c:	4a12      	ldr	r2, [pc, #72]	; (8002198 <MX_I2C1_Init+0x58>)
 800214e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002150:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <MX_I2C1_Init+0x50>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002156:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <MX_I2C1_Init+0x50>)
 8002158:	2200      	movs	r2, #0
 800215a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <MX_I2C1_Init+0x50>)
 800215e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002162:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002164:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <MX_I2C1_Init+0x50>)
 8002166:	2200      	movs	r2, #0
 8002168:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <MX_I2C1_Init+0x50>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002170:	4b07      	ldr	r3, [pc, #28]	; (8002190 <MX_I2C1_Init+0x50>)
 8002172:	2200      	movs	r2, #0
 8002174:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <MX_I2C1_Init+0x50>)
 8002178:	2200      	movs	r2, #0
 800217a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800217c:	4804      	ldr	r0, [pc, #16]	; (8002190 <MX_I2C1_Init+0x50>)
 800217e:	f003 fad5 	bl	800572c <HAL_I2C_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002188:	f000 f9b8 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200001c0 	.word	0x200001c0
 8002194:	40005400 	.word	0x40005400
 8002198:	000186a0 	.word	0x000186a0

0800219c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <MX_I2C3_Init+0x50>)
 80021a2:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <MX_I2C3_Init+0x54>)
 80021a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <MX_I2C3_Init+0x50>)
 80021a8:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <MX_I2C3_Init+0x58>)
 80021aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <MX_I2C3_Init+0x50>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <MX_I2C3_Init+0x50>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <MX_I2C3_Init+0x50>)
 80021ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021be:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <MX_I2C3_Init+0x50>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80021c6:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_I2C3_Init+0x50>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <MX_I2C3_Init+0x50>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_I2C3_Init+0x50>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80021d8:	4804      	ldr	r0, [pc, #16]	; (80021ec <MX_I2C3_Init+0x50>)
 80021da:	f003 faa7 	bl	800572c <HAL_I2C_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80021e4:	f000 f98a 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000244 	.word	0x20000244
 80021f0:	40005c00 	.word	0x40005c00
 80021f4:	000186a0 	.word	0x000186a0

080021f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08c      	sub	sp, #48	; 0x30
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 031c 	add.w	r3, r7, #28
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a4a      	ldr	r2, [pc, #296]	; (8002340 <HAL_I2C_MspInit+0x148>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d13d      	bne.n	8002296 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	4b49      	ldr	r3, [pc, #292]	; (8002344 <HAL_I2C_MspInit+0x14c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a48      	ldr	r2, [pc, #288]	; (8002344 <HAL_I2C_MspInit+0x14c>)
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b46      	ldr	r3, [pc, #280]	; (8002344 <HAL_I2C_MspInit+0x14c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	61bb      	str	r3, [r7, #24]
 8002234:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002236:	f44f 7310 	mov.w	r3, #576	; 0x240
 800223a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800223c:	2312      	movs	r3, #18
 800223e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002244:	2303      	movs	r3, #3
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002248:	2304      	movs	r3, #4
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	4619      	mov	r1, r3
 8002252:	483d      	ldr	r0, [pc, #244]	; (8002348 <HAL_I2C_MspInit+0x150>)
 8002254:	f002 ff9e 	bl	8005194 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	4b39      	ldr	r3, [pc, #228]	; (8002344 <HAL_I2C_MspInit+0x14c>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	4a38      	ldr	r2, [pc, #224]	; (8002344 <HAL_I2C_MspInit+0x14c>)
 8002262:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002266:	6413      	str	r3, [r2, #64]	; 0x40
 8002268:	4b36      	ldr	r3, [pc, #216]	; (8002344 <HAL_I2C_MspInit+0x14c>)
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002274:	2200      	movs	r2, #0
 8002276:	2105      	movs	r1, #5
 8002278:	201f      	movs	r0, #31
 800227a:	f001 ffbd 	bl	80041f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800227e:	201f      	movs	r0, #31
 8002280:	f001 ffe6 	bl	8004250 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002284:	2200      	movs	r2, #0
 8002286:	2105      	movs	r1, #5
 8002288:	2020      	movs	r0, #32
 800228a:	f001 ffb5 	bl	80041f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800228e:	2020      	movs	r0, #32
 8002290:	f001 ffde 	bl	8004250 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002294:	e050      	b.n	8002338 <HAL_I2C_MspInit+0x140>
  else if(i2cHandle->Instance==I2C3)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a2c      	ldr	r2, [pc, #176]	; (800234c <HAL_I2C_MspInit+0x154>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d14b      	bne.n	8002338 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	4b27      	ldr	r3, [pc, #156]	; (8002344 <HAL_I2C_MspInit+0x14c>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	4a26      	ldr	r2, [pc, #152]	; (8002344 <HAL_I2C_MspInit+0x14c>)
 80022aa:	f043 0304 	orr.w	r3, r3, #4
 80022ae:	6313      	str	r3, [r2, #48]	; 0x30
 80022b0:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_I2C_MspInit+0x14c>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_I2C_MspInit+0x14c>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	4a1f      	ldr	r2, [pc, #124]	; (8002344 <HAL_I2C_MspInit+0x14c>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6313      	str	r3, [r2, #48]	; 0x30
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_I2C_MspInit+0x14c>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022de:	2312      	movs	r3, #18
 80022e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e6:	2303      	movs	r3, #3
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022ea:	2304      	movs	r3, #4
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ee:	f107 031c 	add.w	r3, r7, #28
 80022f2:	4619      	mov	r1, r3
 80022f4:	4816      	ldr	r0, [pc, #88]	; (8002350 <HAL_I2C_MspInit+0x158>)
 80022f6:	f002 ff4d 	bl	8005194 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002300:	2312      	movs	r3, #18
 8002302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800230c:	2304      	movs	r3, #4
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002310:	f107 031c 	add.w	r3, r7, #28
 8002314:	4619      	mov	r1, r3
 8002316:	480f      	ldr	r0, [pc, #60]	; (8002354 <HAL_I2C_MspInit+0x15c>)
 8002318:	f002 ff3c 	bl	8005194 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_I2C_MspInit+0x14c>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	4a07      	ldr	r2, [pc, #28]	; (8002344 <HAL_I2C_MspInit+0x14c>)
 8002326:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800232a:	6413      	str	r3, [r2, #64]	; 0x40
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_I2C_MspInit+0x14c>)
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	68bb      	ldr	r3, [r7, #8]
}
 8002338:	bf00      	nop
 800233a:	3730      	adds	r7, #48	; 0x30
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40005400 	.word	0x40005400
 8002344:	40023800 	.word	0x40023800
 8002348:	40020400 	.word	0x40020400
 800234c:	40005c00 	.word	0x40005c00
 8002350:	40020800 	.word	0x40020800
 8002354:	40020000 	.word	0x40020000

08002358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800235c:	f000 ff28 	bl	80031b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002360:	f000 f82c 	bl	80023bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002364:	f7ff fea8 	bl	80020b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002368:	f7ff fe42 	bl	8001ff0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800236c:	f000 fdc2 	bl	8002ef4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002370:	f000 fb96 	bl	8002aa0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002374:	f000 fbe2 	bl	8002b3c <MX_TIM3_Init>
  MX_TIM5_Init();
 8002378:	f000 fc7c 	bl	8002c74 <MX_TIM5_Init>
  MX_TIM4_Init();
 800237c:	f000 fc2c 	bl	8002bd8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8002380:	f7ff fcba 	bl	8001cf8 <MX_ADC1_Init>
  MX_CRC_Init();
 8002384:	f7ff fdfe 	bl	8001f84 <MX_CRC_Init>
  MX_RTC_Init();
 8002388:	f000 f8c8 	bl	800251c <MX_RTC_Init>
  MX_I2C1_Init();
 800238c:	f7ff fed8 	bl	8002140 <MX_I2C1_Init>
  MX_TIM9_Init();
 8002390:	f000 fcbe 	bl	8002d10 <MX_TIM9_Init>
  MX_I2C3_Init();
 8002394:	f7ff ff02 	bl	800219c <MX_I2C3_Init>
  MX_SPI1_Init();
 8002398:	f000 f9a6 	bl	80026e8 <MX_SPI1_Init>
  MX_MBEDTLS_Init();
 800239c:	f009 fe08 	bl	800bfb0 <MX_MBEDTLS_Init>
  MX_TIM11_Init();
 80023a0:	f000 fcf0 	bl	8002d84 <MX_TIM11_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 80023a4:	f009 fe04 	bl	800bfb0 <MX_MBEDTLS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80023a8:	f000 f872 	bl	8002490 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80023ac:	f009 fe4c 	bl	800c048 <osKernelInitialize>
  MX_FREERTOS_Init();
 80023b0:	f7ff fe3e 	bl	8002030 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80023b4:	f009 fe6c 	bl	800c090 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <main+0x60>
	...

080023bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b094      	sub	sp, #80	; 0x50
 80023c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023c2:	f107 0320 	add.w	r3, r7, #32
 80023c6:	2230      	movs	r2, #48	; 0x30
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f00c fbe8 	bl	800eba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	4b28      	ldr	r3, [pc, #160]	; (8002488 <SystemClock_Config+0xcc>)
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	4a27      	ldr	r2, [pc, #156]	; (8002488 <SystemClock_Config+0xcc>)
 80023ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ee:	6413      	str	r3, [r2, #64]	; 0x40
 80023f0:	4b25      	ldr	r3, [pc, #148]	; (8002488 <SystemClock_Config+0xcc>)
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023fc:	2300      	movs	r3, #0
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	4b22      	ldr	r3, [pc, #136]	; (800248c <SystemClock_Config+0xd0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a21      	ldr	r2, [pc, #132]	; (800248c <SystemClock_Config+0xd0>)
 8002406:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <SystemClock_Config+0xd0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002418:	2309      	movs	r3, #9
 800241a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800241c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002422:	2301      	movs	r3, #1
 8002424:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002426:	2302      	movs	r3, #2
 8002428:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800242a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002430:	2304      	movs	r3, #4
 8002432:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002434:	2364      	movs	r3, #100	; 0x64
 8002436:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002438:	2302      	movs	r3, #2
 800243a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800243c:	2304      	movs	r3, #4
 800243e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002440:	f107 0320 	add.w	r3, r7, #32
 8002444:	4618      	mov	r0, r3
 8002446:	f005 f88b 	bl	8007560 <HAL_RCC_OscConfig>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002450:	f000 f854 	bl	80024fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002454:	230f      	movs	r3, #15
 8002456:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002458:	2302      	movs	r3, #2
 800245a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002464:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800246a:	f107 030c 	add.w	r3, r7, #12
 800246e:	2103      	movs	r1, #3
 8002470:	4618      	mov	r0, r3
 8002472:	f005 fb9d 	bl	8007bb0 <HAL_RCC_ClockConfig>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800247c:	f000 f83e 	bl	80024fc <Error_Handler>
  }
}
 8002480:	bf00      	nop
 8002482:	3750      	adds	r7, #80	; 0x50
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	40007000 	.word	0x40007000

08002490 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8002494:	2200      	movs	r2, #0
 8002496:	2105      	movs	r1, #5
 8002498:	2004      	movs	r0, #4
 800249a:	f001 fead 	bl	80041f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800249e:	2004      	movs	r0, #4
 80024a0:	f001 fed6 	bl	8004250 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2105      	movs	r1, #5
 80024a8:	201c      	movs	r0, #28
 80024aa:	f001 fea5 	bl	80041f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024ae:	201c      	movs	r0, #28
 80024b0:	f001 fece 	bl	8004250 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2105      	movs	r1, #5
 80024b8:	201d      	movs	r0, #29
 80024ba:	f001 fe9d 	bl	80041f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024be:	201d      	movs	r0, #29
 80024c0:	f001 fec6 	bl	8004250 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 80024c4:	2200      	movs	r2, #0
 80024c6:	2105      	movs	r1, #5
 80024c8:	2051      	movs	r0, #81	; 0x51
 80024ca:	f001 fe95 	bl	80041f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80024ce:	2051      	movs	r0, #81	; 0x51
 80024d0:	f001 febe 	bl	8004250 <HAL_NVIC_EnableIRQ>
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d101      	bne.n	80024ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80024ea:	f000 fe83 	bl	80031f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40010000 	.word	0x40010000

080024fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002500:	b672      	cpsid	i
}
 8002502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002504:	e7fe      	b.n	8002504 <Error_Handler+0x8>

08002506 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b090      	sub	sp, #64	; 0x40
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]
 8002530:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002532:	2300      	movs	r3, #0
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002536:	463b      	mov	r3, r7
 8002538:	2228      	movs	r2, #40	; 0x28
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f00c fb2f 	bl	800eba0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002542:	4b46      	ldr	r3, [pc, #280]	; (800265c <MX_RTC_Init+0x140>)
 8002544:	4a46      	ldr	r2, [pc, #280]	; (8002660 <MX_RTC_Init+0x144>)
 8002546:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002548:	4b44      	ldr	r3, [pc, #272]	; (800265c <MX_RTC_Init+0x140>)
 800254a:	2200      	movs	r2, #0
 800254c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800254e:	4b43      	ldr	r3, [pc, #268]	; (800265c <MX_RTC_Init+0x140>)
 8002550:	227f      	movs	r2, #127	; 0x7f
 8002552:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002554:	4b41      	ldr	r3, [pc, #260]	; (800265c <MX_RTC_Init+0x140>)
 8002556:	22ff      	movs	r2, #255	; 0xff
 8002558:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800255a:	4b40      	ldr	r3, [pc, #256]	; (800265c <MX_RTC_Init+0x140>)
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002560:	4b3e      	ldr	r3, [pc, #248]	; (800265c <MX_RTC_Init+0x140>)
 8002562:	2200      	movs	r2, #0
 8002564:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002566:	4b3d      	ldr	r3, [pc, #244]	; (800265c <MX_RTC_Init+0x140>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800256c:	483b      	ldr	r0, [pc, #236]	; (800265c <MX_RTC_Init+0x140>)
 800256e:	f006 f82f 	bl	80085d0 <HAL_RTC_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002578:	f7ff ffc0 	bl	80024fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800257c:	2300      	movs	r3, #0
 800257e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8002582:	2300      	movs	r3, #0
 8002584:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8002588:	2300      	movs	r3, #0
 800258a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800258e:	2300      	movs	r3, #0
 8002590:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800259a:	2201      	movs	r2, #1
 800259c:	4619      	mov	r1, r3
 800259e:	482f      	ldr	r0, [pc, #188]	; (800265c <MX_RTC_Init+0x140>)
 80025a0:	f006 f91a 	bl	80087d8 <HAL_RTC_SetTime>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80025aa:	f7ff ffa7 	bl	80024fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80025b4:	2301      	movs	r3, #1
 80025b6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80025c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025ca:	2201      	movs	r2, #1
 80025cc:	4619      	mov	r1, r3
 80025ce:	4823      	ldr	r0, [pc, #140]	; (800265c <MX_RTC_Init+0x140>)
 80025d0:	f006 fa4a 	bl	8008a68 <HAL_RTC_SetDate>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80025da:	f7ff ff8f 	bl	80024fc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80025de:	2300      	movs	r3, #0
 80025e0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002602:	2301      	movs	r3, #1
 8002604:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800260e:	463b      	mov	r3, r7
 8002610:	2201      	movs	r2, #1
 8002612:	4619      	mov	r1, r3
 8002614:	4811      	ldr	r0, [pc, #68]	; (800265c <MX_RTC_Init+0x140>)
 8002616:	f006 fb33 	bl	8008c80 <HAL_RTC_SetAlarm>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002620:	f7ff ff6c 	bl	80024fc <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800262a:	463b      	mov	r3, r7
 800262c:	2201      	movs	r2, #1
 800262e:	4619      	mov	r1, r3
 8002630:	480a      	ldr	r0, [pc, #40]	; (800265c <MX_RTC_Init+0x140>)
 8002632:	f006 fb25 	bl	8008c80 <HAL_RTC_SetAlarm>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 800263c:	f7ff ff5e 	bl	80024fc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002640:	2200      	movs	r2, #0
 8002642:	2100      	movs	r1, #0
 8002644:	4805      	ldr	r0, [pc, #20]	; (800265c <MX_RTC_Init+0x140>)
 8002646:	f006 fed5 	bl	80093f4 <HAL_RTCEx_SetWakeUpTimer>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002650:	f7ff ff54 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002654:	bf00      	nop
 8002656:	3740      	adds	r7, #64	; 0x40
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	200002c8 	.word	0x200002c8
 8002660:	40002800 	.word	0x40002800

08002664 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800266c:	f107 0308 	add.w	r3, r7, #8
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
 800267c:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a0c      	ldr	r2, [pc, #48]	; (80026b4 <HAL_RTC_MspInit+0x50>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d111      	bne.n	80026ac <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002688:	2302      	movs	r3, #2
 800268a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800268c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002690:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002692:	f107 0308 	add.w	r3, r7, #8
 8002696:	4618      	mov	r0, r3
 8002698:	f005 fd84 	bl	80081a4 <HAL_RCCEx_PeriphCLKConfig>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80026a2:	f7ff ff2b 	bl	80024fc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026a6:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <HAL_RTC_MspInit+0x54>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80026ac:	bf00      	nop
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40002800 	.word	0x40002800
 80026b8:	42470e3c 	.word	0x42470e3c

080026bc <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <HAL_RTC_MspDeInit+0x24>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d102      	bne.n	80026d4 <HAL_RTC_MspDeInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 80026ce:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_RTC_MspDeInit+0x28>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40002800 	.word	0x40002800
 80026e4:	42470e3c 	.word	0x42470e3c

080026e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <MX_SPI1_Init+0x64>)
 80026ee:	4a18      	ldr	r2, [pc, #96]	; (8002750 <MX_SPI1_Init+0x68>)
 80026f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <MX_SPI1_Init+0x64>)
 80026f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026fa:	4b14      	ldr	r3, [pc, #80]	; (800274c <MX_SPI1_Init+0x64>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <MX_SPI1_Init+0x64>)
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <MX_SPI1_Init+0x64>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <MX_SPI1_Init+0x64>)
 800270e:	2200      	movs	r2, #0
 8002710:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <MX_SPI1_Init+0x64>)
 8002714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002718:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <MX_SPI1_Init+0x64>)
 800271c:	2200      	movs	r2, #0
 800271e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002720:	4b0a      	ldr	r3, [pc, #40]	; (800274c <MX_SPI1_Init+0x64>)
 8002722:	2200      	movs	r2, #0
 8002724:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <MX_SPI1_Init+0x64>)
 8002728:	2200      	movs	r2, #0
 800272a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <MX_SPI1_Init+0x64>)
 800272e:	2200      	movs	r2, #0
 8002730:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <MX_SPI1_Init+0x64>)
 8002734:	220a      	movs	r2, #10
 8002736:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002738:	4804      	ldr	r0, [pc, #16]	; (800274c <MX_SPI1_Init+0x64>)
 800273a:	f006 ff2f 	bl	800959c <HAL_SPI_Init>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002744:	f7ff feda 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000304 	.word	0x20000304
 8002750:	40013000 	.word	0x40013000

08002754 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	; 0x28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <HAL_SPI_MspInit+0x94>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d133      	bne.n	80027de <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <HAL_SPI_MspInit+0x98>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	4a1b      	ldr	r2, [pc, #108]	; (80027ec <HAL_SPI_MspInit+0x98>)
 8002780:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002784:	6453      	str	r3, [r2, #68]	; 0x44
 8002786:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_SPI_MspInit+0x98>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_SPI_MspInit+0x98>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a14      	ldr	r2, [pc, #80]	; (80027ec <HAL_SPI_MspInit+0x98>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_SPI_MspInit+0x98>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027ae:	23e0      	movs	r3, #224	; 0xe0
 80027b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ba:	2303      	movs	r3, #3
 80027bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027be:	2305      	movs	r3, #5
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	4809      	ldr	r0, [pc, #36]	; (80027f0 <HAL_SPI_MspInit+0x9c>)
 80027ca:	f002 fce3 	bl	8005194 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2105      	movs	r1, #5
 80027d2:	2023      	movs	r0, #35	; 0x23
 80027d4:	f001 fd10 	bl	80041f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80027d8:	2023      	movs	r0, #35	; 0x23
 80027da:	f001 fd39 	bl	8004250 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80027de:	bf00      	nop
 80027e0:	3728      	adds	r7, #40	; 0x28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40013000 	.word	0x40013000
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40020000 	.word	0x40020000

080027f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <HAL_MspInit+0x74>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	4a19      	ldr	r2, [pc, #100]	; (8002868 <HAL_MspInit+0x74>)
 8002804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002808:	6453      	str	r3, [r2, #68]	; 0x44
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_MspInit+0x74>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	4b13      	ldr	r3, [pc, #76]	; (8002868 <HAL_MspInit+0x74>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	4a12      	ldr	r2, [pc, #72]	; (8002868 <HAL_MspInit+0x74>)
 8002820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002824:	6413      	str	r3, [r2, #64]	; 0x40
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <HAL_MspInit+0x74>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002832:	2200      	movs	r2, #0
 8002834:	210f      	movs	r1, #15
 8002836:	f06f 0001 	mvn.w	r0, #1
 800283a:	f001 fcdd 	bl	80041f8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2105      	movs	r1, #5
 8002842:	2001      	movs	r0, #1
 8002844:	f001 fcd8 	bl	80041f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8002848:	2001      	movs	r0, #1
 800284a:	f001 fd01 	bl	8004250 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2105      	movs	r1, #5
 8002852:	2005      	movs	r0, #5
 8002854:	f001 fcd0 	bl	80041f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002858:	2005      	movs	r0, #5
 800285a:	f001 fcf9 	bl	8004250 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800

0800286c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08c      	sub	sp, #48	; 0x30
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800287c:	2300      	movs	r3, #0
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	4b2e      	ldr	r3, [pc, #184]	; (800293c <HAL_InitTick+0xd0>)
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	4a2d      	ldr	r2, [pc, #180]	; (800293c <HAL_InitTick+0xd0>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6453      	str	r3, [r2, #68]	; 0x44
 800288c:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_InitTick+0xd0>)
 800288e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002898:	f107 020c 	add.w	r2, r7, #12
 800289c:	f107 0310 	add.w	r3, r7, #16
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f005 fc4c 	bl	8008140 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80028a8:	f005 fc36 	bl	8008118 <HAL_RCC_GetPCLK2Freq>
 80028ac:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	4a23      	ldr	r2, [pc, #140]	; (8002940 <HAL_InitTick+0xd4>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	0c9b      	lsrs	r3, r3, #18
 80028b8:	3b01      	subs	r3, #1
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80028bc:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_InitTick+0xd8>)
 80028be:	4a22      	ldr	r2, [pc, #136]	; (8002948 <HAL_InitTick+0xdc>)
 80028c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_InitTick+0xd8>)
 80028c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80028ca:	4a1e      	ldr	r2, [pc, #120]	; (8002944 <HAL_InitTick+0xd8>)
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80028d0:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <HAL_InitTick+0xd8>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d6:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_InitTick+0xd8>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028dc:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_InitTick+0xd8>)
 80028de:	2200      	movs	r2, #0
 80028e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80028e2:	4818      	ldr	r0, [pc, #96]	; (8002944 <HAL_InitTick+0xd8>)
 80028e4:	f007 f98e 	bl	8009c04 <HAL_TIM_Base_Init>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80028ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d11b      	bne.n	800292e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80028f6:	4813      	ldr	r0, [pc, #76]	; (8002944 <HAL_InitTick+0xd8>)
 80028f8:	f007 fb42 	bl	8009f80 <HAL_TIM_Base_Start_IT>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002902:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002906:	2b00      	cmp	r3, #0
 8002908:	d111      	bne.n	800292e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800290a:	2019      	movs	r0, #25
 800290c:	f001 fca0 	bl	8004250 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b0f      	cmp	r3, #15
 8002914:	d808      	bhi.n	8002928 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002916:	2200      	movs	r2, #0
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	2019      	movs	r0, #25
 800291c:	f001 fc6c 	bl	80041f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002920:	4a0a      	ldr	r2, [pc, #40]	; (800294c <HAL_InitTick+0xe0>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e002      	b.n	800292e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800292e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002932:	4618      	mov	r0, r3
 8002934:	3730      	adds	r7, #48	; 0x30
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	431bde83 	.word	0x431bde83
 8002944:	20000384 	.word	0x20000384
 8002948:	40010000 	.word	0x40010000
 800294c:	20000004 	.word	0x20000004

08002950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <NMI_Handler+0x4>

08002956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800295a:	e7fe      	b.n	800295a <HardFault_Handler+0x4>

0800295c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002960:	e7fe      	b.n	8002960 <MemManage_Handler+0x4>

08002962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002966:	e7fe      	b.n	8002966 <BusFault_Handler+0x4>

08002968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800296c:	e7fe      	b.n	800296c <UsageFault_Handler+0x4>

0800296e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002980:	f004 fdd4 	bl	800752c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}

08002988 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800298c:	f002 fa2c 	bl	8004de8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}

08002994 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <ADC_IRQHandler+0x10>)
 80029aa:	f000 fdc5 	bl	8003538 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200000e8 	.word	0x200000e8

080029b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80029be:	f007 fb71 	bl	800a0a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000384 	.word	0x20000384

080029cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <TIM2_IRQHandler+0x10>)
 80029d2:	f007 fb67 	bl	800a0a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000438 	.word	0x20000438

080029e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <TIM3_IRQHandler+0x10>)
 80029e6:	f007 fb5d 	bl	800a0a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	200004ec 	.word	0x200004ec

080029f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029f8:	4802      	ldr	r0, [pc, #8]	; (8002a04 <TIM4_IRQHandler+0x10>)
 80029fa:	f007 fb53 	bl	800a0a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200005a0 	.word	0x200005a0

08002a08 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002a0c:	4802      	ldr	r0, [pc, #8]	; (8002a18 <I2C1_EV_IRQHandler+0x10>)
 8002a0e:	f003 f897 	bl	8005b40 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	200001c0 	.word	0x200001c0

08002a1c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002a20:	4802      	ldr	r0, [pc, #8]	; (8002a2c <I2C1_ER_IRQHandler+0x10>)
 8002a22:	f003 f9fe 	bl	8005e22 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200001c0 	.word	0x200001c0

08002a30 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002a34:	4802      	ldr	r0, [pc, #8]	; (8002a40 <SPI1_IRQHandler+0x10>)
 8002a36:	f006 ff7f 	bl	8009938 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000304 	.word	0x20000304

08002a44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <USART1_IRQHandler+0x10>)
 8002a4a:	f008 faff 	bl	800b04c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000870 	.word	0x20000870

08002a58 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <DMA2_Stream0_IRQHandler+0x10>)
 8002a5e:	f001 ff4b 	bl	80048f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	2000014c 	.word	0x2000014c

08002a6c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <SystemInit+0x20>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	4a05      	ldr	r2, [pc, #20]	; (8002a9c <SystemInit+0x20>)
 8002a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aa6:	f107 0308 	add.w	r3, r7, #8
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab4:	463b      	mov	r3, r7
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002abc:	4b1e      	ldr	r3, [pc, #120]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002abe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ac2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8002ac4:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002ac6:	f242 720f 	movw	r2, #9999	; 0x270f
 8002aca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002acc:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002ad2:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002ad4:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ad8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ada:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae0:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ae6:	4814      	ldr	r0, [pc, #80]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002ae8:	f007 f88c 	bl	8009c04 <HAL_TIM_Base_Init>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002af2:	f7ff fd03 	bl	80024fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002afa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002afc:	f107 0308 	add.w	r3, r7, #8
 8002b00:	4619      	mov	r1, r3
 8002b02:	480d      	ldr	r0, [pc, #52]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002b04:	f007 fbf6 	bl	800a2f4 <HAL_TIM_ConfigClockSource>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002b0e:	f7ff fcf5 	bl	80024fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b1a:	463b      	mov	r3, r7
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4806      	ldr	r0, [pc, #24]	; (8002b38 <MX_TIM2_Init+0x98>)
 8002b20:	f008 f8c4 	bl	800acac <HAL_TIMEx_MasterConfigSynchronization>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002b2a:	f7ff fce7 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b2e:	bf00      	nop
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000438 	.word	0x20000438

08002b3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b42:	f107 0308 	add.w	r3, r7, #8
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b50:	463b      	mov	r3, r7
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b58:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <MX_TIM3_Init+0x94>)
 8002b5a:	4a1e      	ldr	r2, [pc, #120]	; (8002bd4 <MX_TIM3_Init+0x98>)
 8002b5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <MX_TIM3_Init+0x94>)
 8002b60:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b66:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <MX_TIM3_Init+0x94>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8002b6c:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <MX_TIM3_Init+0x94>)
 8002b6e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002b72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b74:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <MX_TIM3_Init+0x94>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <MX_TIM3_Init+0x94>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b80:	4813      	ldr	r0, [pc, #76]	; (8002bd0 <MX_TIM3_Init+0x94>)
 8002b82:	f007 f83f 	bl	8009c04 <HAL_TIM_Base_Init>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002b8c:	f7ff fcb6 	bl	80024fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b96:	f107 0308 	add.w	r3, r7, #8
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	480c      	ldr	r0, [pc, #48]	; (8002bd0 <MX_TIM3_Init+0x94>)
 8002b9e:	f007 fba9 	bl	800a2f4 <HAL_TIM_ConfigClockSource>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002ba8:	f7ff fca8 	bl	80024fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bac:	2300      	movs	r3, #0
 8002bae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bb4:	463b      	mov	r3, r7
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4805      	ldr	r0, [pc, #20]	; (8002bd0 <MX_TIM3_Init+0x94>)
 8002bba:	f008 f877 	bl	800acac <HAL_TIMEx_MasterConfigSynchronization>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002bc4:	f7ff fc9a 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bc8:	bf00      	nop
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	200004ec 	.word	0x200004ec
 8002bd4:	40000400 	.word	0x40000400

08002bd8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bde:	f107 0308 	add.w	r3, r7, #8
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bec:	463b      	mov	r3, r7
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002bf4:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <MX_TIM4_Init+0x94>)
 8002bf6:	4a1e      	ldr	r2, [pc, #120]	; (8002c70 <MX_TIM4_Init+0x98>)
 8002bf8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8002bfa:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <MX_TIM4_Init+0x94>)
 8002bfc:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c02:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <MX_TIM4_Init+0x94>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8002c08:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <MX_TIM4_Init+0x94>)
 8002c0a:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <MX_TIM4_Init+0x94>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <MX_TIM4_Init+0x94>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c1c:	4813      	ldr	r0, [pc, #76]	; (8002c6c <MX_TIM4_Init+0x94>)
 8002c1e:	f006 fff1 	bl	8009c04 <HAL_TIM_Base_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002c28:	f7ff fc68 	bl	80024fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c32:	f107 0308 	add.w	r3, r7, #8
 8002c36:	4619      	mov	r1, r3
 8002c38:	480c      	ldr	r0, [pc, #48]	; (8002c6c <MX_TIM4_Init+0x94>)
 8002c3a:	f007 fb5b 	bl	800a2f4 <HAL_TIM_ConfigClockSource>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002c44:	f7ff fc5a 	bl	80024fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c50:	463b      	mov	r3, r7
 8002c52:	4619      	mov	r1, r3
 8002c54:	4805      	ldr	r0, [pc, #20]	; (8002c6c <MX_TIM4_Init+0x94>)
 8002c56:	f008 f829 	bl	800acac <HAL_TIMEx_MasterConfigSynchronization>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002c60:	f7ff fc4c 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c64:	bf00      	nop
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	200005a0 	.word	0x200005a0
 8002c70:	40000800 	.word	0x40000800

08002c74 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c7a:	f107 0308 	add.w	r3, r7, #8
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c88:	463b      	mov	r3, r7
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002c90:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002c92:	4a1e      	ldr	r2, [pc, #120]	; (8002d0c <MX_TIM5_Init+0x98>)
 8002c94:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002ca2:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002caa:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb0:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002cb6:	4814      	ldr	r0, [pc, #80]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002cb8:	f006 ffa4 	bl	8009c04 <HAL_TIM_Base_Init>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002cc2:	f7ff fc1b 	bl	80024fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002ccc:	f107 0308 	add.w	r3, r7, #8
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	480d      	ldr	r0, [pc, #52]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002cd4:	f007 fb0e 	bl	800a2f4 <HAL_TIM_ConfigClockSource>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002cde:	f7ff fc0d 	bl	80024fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002cea:	463b      	mov	r3, r7
 8002cec:	4619      	mov	r1, r3
 8002cee:	4806      	ldr	r0, [pc, #24]	; (8002d08 <MX_TIM5_Init+0x94>)
 8002cf0:	f007 ffdc 	bl	800acac <HAL_TIMEx_MasterConfigSynchronization>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002cfa:	f7ff fbff 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002cfe:	bf00      	nop
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000654 	.word	0x20000654
 8002d0c:	40000c00 	.word	0x40000c00

08002d10 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d16:	463b      	mov	r3, r7
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002d22:	4b16      	ldr	r3, [pc, #88]	; (8002d7c <MX_TIM9_Init+0x6c>)
 8002d24:	4a16      	ldr	r2, [pc, #88]	; (8002d80 <MX_TIM9_Init+0x70>)
 8002d26:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 8002d28:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <MX_TIM9_Init+0x6c>)
 8002d2a:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d2e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d30:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <MX_TIM9_Init+0x6c>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 8002d36:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <MX_TIM9_Init+0x6c>)
 8002d38:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d3c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <MX_TIM9_Init+0x6c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d44:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <MX_TIM9_Init+0x6c>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002d4a:	480c      	ldr	r0, [pc, #48]	; (8002d7c <MX_TIM9_Init+0x6c>)
 8002d4c:	f006 ff5a 	bl	8009c04 <HAL_TIM_Base_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8002d56:	f7ff fbd1 	bl	80024fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d5e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002d60:	463b      	mov	r3, r7
 8002d62:	4619      	mov	r1, r3
 8002d64:	4805      	ldr	r0, [pc, #20]	; (8002d7c <MX_TIM9_Init+0x6c>)
 8002d66:	f007 fac5 	bl	800a2f4 <HAL_TIM_ConfigClockSource>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8002d70:	f7ff fbc4 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002d74:	bf00      	nop
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000708 	.word	0x20000708
 8002d80:	40014000 	.word	0x40014000

08002d84 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002d88:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <MX_TIM11_Init+0x40>)
 8002d8a:	4a0f      	ldr	r2, [pc, #60]	; (8002dc8 <MX_TIM11_Init+0x44>)
 8002d8c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <MX_TIM11_Init+0x40>)
 8002d90:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d94:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <MX_TIM11_Init+0x40>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <MX_TIM11_Init+0x40>)
 8002d9e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002da2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <MX_TIM11_Init+0x40>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <MX_TIM11_Init+0x40>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002db0:	4804      	ldr	r0, [pc, #16]	; (8002dc4 <MX_TIM11_Init+0x40>)
 8002db2:	f006 ff27 	bl	8009c04 <HAL_TIM_Base_Init>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8002dbc:	f7ff fb9e 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	200007bc 	.word	0x200007bc
 8002dc8:	40014800 	.word	0x40014800

08002dcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ddc:	d10e      	bne.n	8002dfc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	4b3e      	ldr	r3, [pc, #248]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	4a3d      	ldr	r2, [pc, #244]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6413      	str	r3, [r2, #64]	; 0x40
 8002dee:	4b3b      	ldr	r3, [pc, #236]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	61fb      	str	r3, [r7, #28]
 8002df8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002dfa:	e06a      	b.n	8002ed2 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM3)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a37      	ldr	r2, [pc, #220]	; (8002ee0 <HAL_TIM_Base_MspInit+0x114>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10e      	bne.n	8002e24 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	4b34      	ldr	r3, [pc, #208]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	4a33      	ldr	r2, [pc, #204]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002e10:	f043 0302 	orr.w	r3, r3, #2
 8002e14:	6413      	str	r3, [r2, #64]	; 0x40
 8002e16:	4b31      	ldr	r3, [pc, #196]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	69bb      	ldr	r3, [r7, #24]
}
 8002e22:	e056      	b.n	8002ed2 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM4)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a2e      	ldr	r2, [pc, #184]	; (8002ee4 <HAL_TIM_Base_MspInit+0x118>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d116      	bne.n	8002e5c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	4b2a      	ldr	r3, [pc, #168]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	4a29      	ldr	r2, [pc, #164]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3e:	4b27      	ldr	r3, [pc, #156]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2105      	movs	r1, #5
 8002e4e:	201e      	movs	r0, #30
 8002e50:	f001 f9d2 	bl	80041f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e54:	201e      	movs	r0, #30
 8002e56:	f001 f9fb 	bl	8004250 <HAL_NVIC_EnableIRQ>
}
 8002e5a:	e03a      	b.n	8002ed2 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM5)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a21      	ldr	r2, [pc, #132]	; (8002ee8 <HAL_TIM_Base_MspInit+0x11c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d10e      	bne.n	8002e84 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	4a1b      	ldr	r2, [pc, #108]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002e70:	f043 0308 	orr.w	r3, r3, #8
 8002e74:	6413      	str	r3, [r2, #64]	; 0x40
 8002e76:	4b19      	ldr	r3, [pc, #100]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	693b      	ldr	r3, [r7, #16]
}
 8002e82:	e026      	b.n	8002ed2 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM9)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a18      	ldr	r2, [pc, #96]	; (8002eec <HAL_TIM_Base_MspInit+0x120>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d10e      	bne.n	8002eac <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	4b12      	ldr	r3, [pc, #72]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	4a11      	ldr	r2, [pc, #68]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
}
 8002eaa:	e012      	b.n	8002ed2 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM11)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ef0 <HAL_TIM_Base_MspInit+0x124>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10d      	bne.n	8002ed2 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	4a07      	ldr	r2, [pc, #28]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_TIM_Base_MspInit+0x110>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
}
 8002ed2:	bf00      	nop
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	40000c00 	.word	0x40000c00
 8002eec:	40014000 	.word	0x40014000
 8002ef0:	40014800 	.word	0x40014800

08002ef4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002efa:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <MX_USART1_UART_Init+0x50>)
 8002efc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002f00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f06:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f2a:	4805      	ldr	r0, [pc, #20]	; (8002f40 <MX_USART1_UART_Init+0x4c>)
 8002f2c:	f007 ff9a 	bl	800ae64 <HAL_UART_Init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f36:	f7ff fae1 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000870 	.word	0x20000870
 8002f44:	40011000 	.word	0x40011000

08002f48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	; 0x28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a2c      	ldr	r2, [pc, #176]	; (8003018 <HAL_UART_MspInit+0xd0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d152      	bne.n	8003010 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	4b2b      	ldr	r3, [pc, #172]	; (800301c <HAL_UART_MspInit+0xd4>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	4a2a      	ldr	r2, [pc, #168]	; (800301c <HAL_UART_MspInit+0xd4>)
 8002f74:	f043 0310 	orr.w	r3, r3, #16
 8002f78:	6453      	str	r3, [r2, #68]	; 0x44
 8002f7a:	4b28      	ldr	r3, [pc, #160]	; (800301c <HAL_UART_MspInit+0xd4>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	4b24      	ldr	r3, [pc, #144]	; (800301c <HAL_UART_MspInit+0xd4>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a23      	ldr	r2, [pc, #140]	; (800301c <HAL_UART_MspInit+0xd4>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b21      	ldr	r3, [pc, #132]	; (800301c <HAL_UART_MspInit+0xd4>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_UART_MspInit+0xd4>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a1c      	ldr	r2, [pc, #112]	; (800301c <HAL_UART_MspInit+0xd4>)
 8002fac:	f043 0302 	orr.w	r3, r3, #2
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b1a      	ldr	r3, [pc, #104]	; (800301c <HAL_UART_MspInit+0xd4>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fd0:	2307      	movs	r3, #7
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd4:	f107 0314 	add.w	r3, r7, #20
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4811      	ldr	r0, [pc, #68]	; (8003020 <HAL_UART_MspInit+0xd8>)
 8002fdc:	f002 f8da 	bl	8005194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002fe0:	2380      	movs	r3, #128	; 0x80
 8002fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fec:	2303      	movs	r3, #3
 8002fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ff0:	2307      	movs	r3, #7
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	480a      	ldr	r0, [pc, #40]	; (8003024 <HAL_UART_MspInit+0xdc>)
 8002ffc:	f002 f8ca 	bl	8005194 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003000:	2200      	movs	r2, #0
 8003002:	2105      	movs	r1, #5
 8003004:	2025      	movs	r0, #37	; 0x25
 8003006:	f001 f8f7 	bl	80041f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800300a:	2025      	movs	r0, #37	; 0x25
 800300c:	f001 f920 	bl	8004250 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003010:	bf00      	nop
 8003012:	3728      	adds	r7, #40	; 0x28
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40011000 	.word	0x40011000
 800301c:	40023800 	.word	0x40023800
 8003020:	40020000 	.word	0x40020000
 8003024:	40020400 	.word	0x40020400

08003028 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a05      	ldr	r2, [pc, #20]	; (800304c <HAL_UART_RxCpltCallback+0x24>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d104      	bne.n	8003044 <HAL_UART_RxCpltCallback+0x1c>
  {

	//BtcReceivedDataIRQ = STD_HIGH;
    HAL_UART_Receive_IT(&huart1, &BtcReceivedDataOnBluetooth, 1);
 800303a:	2201      	movs	r2, #1
 800303c:	4904      	ldr	r1, [pc, #16]	; (8003050 <HAL_UART_RxCpltCallback+0x28>)
 800303e:	4805      	ldr	r0, [pc, #20]	; (8003054 <HAL_UART_RxCpltCallback+0x2c>)
 8003040:	f007 ffd4 	bl	800afec <HAL_UART_Receive_IT>

	  /* do nothing */

  }

}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40011000 	.word	0x40011000
 8003050:	20000090 	.word	0x20000090
 8003054:	20000870 	.word	0x20000870

08003058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003090 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800305c:	480d      	ldr	r0, [pc, #52]	; (8003094 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800305e:	490e      	ldr	r1, [pc, #56]	; (8003098 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003060:	4a0e      	ldr	r2, [pc, #56]	; (800309c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003064:	e002      	b.n	800306c <LoopCopyDataInit>

08003066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800306a:	3304      	adds	r3, #4

0800306c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800306c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800306e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003070:	d3f9      	bcc.n	8003066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003072:	4a0b      	ldr	r2, [pc, #44]	; (80030a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003074:	4c0b      	ldr	r4, [pc, #44]	; (80030a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003078:	e001      	b.n	800307e <LoopFillZerobss>

0800307a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800307a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800307c:	3204      	adds	r2, #4

0800307e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800307e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003080:	d3fb      	bcc.n	800307a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003082:	f7ff fcfb 	bl	8002a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003086:	f00b fd59 	bl	800eb3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800308a:	f7ff f965 	bl	8002358 <main>
  bx  lr    
 800308e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003090:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003098:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800309c:	0800f534 	.word	0x0800f534
  ldr r2, =_sbss
 80030a0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80030a4:	20005328 	.word	0x20005328

080030a8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030a8:	e7fe      	b.n	80030a8 <DMA1_Stream0_IRQHandler>

080030aa <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d104      	bne.n	80030c2 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80030b8:	b672      	cpsid	i
}
 80030ba:	bf00      	nop
 80030bc:	f7ff fa1e 	bl	80024fc <Error_Handler>
 80030c0:	e7fe      	b.n	80030c0 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7a1b      	ldrb	r3, [r3, #8]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d904      	bls.n	80030d4 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80030ca:	b672      	cpsid	i
}
 80030cc:	bf00      	nop
 80030ce:	f7ff fa15 	bl	80024fc <Error_Handler>
 80030d2:	e7fe      	b.n	80030d2 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	7a1b      	ldrb	r3, [r3, #8]
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	b2d1      	uxtb	r1, r2
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	7211      	strb	r1, [r2, #8]
 80030e0:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030e2:	f3ef 8211 	mrs	r2, BASEPRI
 80030e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	60fa      	str	r2, [r7, #12]
 80030f8:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d104      	bne.n	8003122 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003118:	b672      	cpsid	i
}
 800311a:	bf00      	nop
 800311c:	f7ff f9ee 	bl	80024fc <Error_Handler>
 8003120:	e7fe      	b.n	8003120 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	7a1b      	ldrb	r3, [r3, #8]
 8003126:	3b01      	subs	r3, #1
 8003128:	b2da      	uxtb	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	7a1b      	ldrb	r3, [r3, #8]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d904      	bls.n	8003140 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8003136:	b672      	cpsid	i
}
 8003138:	bf00      	nop
 800313a:	f7ff f9df 	bl	80024fc <Error_Handler>
 800313e:	e7fe      	b.n	800313e <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	7a1b      	ldrb	r3, [r3, #8]
 8003144:	461a      	mov	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800314c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003154:	bf00      	nop
}
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d104      	bne.n	8003176 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800316c:	b672      	cpsid	i
}
 800316e:	bf00      	nop
 8003170:	f7ff f9c4 	bl	80024fc <Error_Handler>
 8003174:	e7fe      	b.n	8003174 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff96 	bl	80030aa <stm32_lock_acquire>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d104      	bne.n	800319e <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003194:	b672      	cpsid	i
}
 8003196:	bf00      	nop
 8003198:	f7ff f9b0 	bl	80024fc <Error_Handler>
 800319c:	e7fe      	b.n	800319c <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ffb2 	bl	800310a <stm32_lock_release>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031b4:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <HAL_Init+0x40>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0d      	ldr	r2, [pc, #52]	; (80031f0 <HAL_Init+0x40>)
 80031ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_Init+0x40>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <HAL_Init+0x40>)
 80031c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031cc:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <HAL_Init+0x40>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a07      	ldr	r2, [pc, #28]	; (80031f0 <HAL_Init+0x40>)
 80031d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031d8:	2003      	movs	r0, #3
 80031da:	f000 ffed 	bl	80041b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031de:	200f      	movs	r0, #15
 80031e0:	f7ff fb44 	bl	800286c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031e4:	f7ff fb06 	bl	80027f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40023c00 	.word	0x40023c00

080031f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <HAL_IncTick+0x20>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	4b06      	ldr	r3, [pc, #24]	; (8003218 <HAL_IncTick+0x24>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4413      	add	r3, r2
 8003204:	4a04      	ldr	r2, [pc, #16]	; (8003218 <HAL_IncTick+0x24>)
 8003206:	6013      	str	r3, [r2, #0]
}
 8003208:	bf00      	nop
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000008 	.word	0x20000008
 8003218:	200008f0 	.word	0x200008f0

0800321c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  return uwTick;
 8003220:	4b03      	ldr	r3, [pc, #12]	; (8003230 <HAL_GetTick+0x14>)
 8003222:	681b      	ldr	r3, [r3, #0]
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	200008f0 	.word	0x200008f0

08003234 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e16f      	b.n	800352a <HAL_ADC_Init+0x2f6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a93      	ldr	r2, [pc, #588]	; (800349c <HAL_ADC_Init+0x268>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d004      	beq.n	800325e <HAL_ADC_Init+0x2a>
 8003254:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003258:	4891      	ldr	r0, [pc, #580]	; (80034a0 <HAL_ADC_Init+0x26c>)
 800325a:	f7ff f954 	bl	8002506 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d013      	beq.n	800328e <HAL_ADC_Init+0x5a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326e:	d00e      	beq.n	800328e <HAL_ADC_Init+0x5a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003278:	d009      	beq.n	800328e <HAL_ADC_Init+0x5a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003282:	d004      	beq.n	800328e <HAL_ADC_Init+0x5a>
 8003284:	f240 1143 	movw	r1, #323	; 0x143
 8003288:	4885      	ldr	r0, [pc, #532]	; (80034a0 <HAL_ADC_Init+0x26c>)
 800328a:	f7ff f93c 	bl	8002506 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d013      	beq.n	80032be <HAL_ADC_Init+0x8a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800329e:	d00e      	beq.n	80032be <HAL_ADC_Init+0x8a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032a8:	d009      	beq.n	80032be <HAL_ADC_Init+0x8a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032b2:	d004      	beq.n	80032be <HAL_ADC_Init+0x8a>
 80032b4:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80032b8:	4879      	ldr	r0, [pc, #484]	; (80034a0 <HAL_ADC_Init+0x26c>)
 80032ba:	f7ff f924 	bl	8002506 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <HAL_ADC_Init+0xa4>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d004      	beq.n	80032d8 <HAL_ADC_Init+0xa4>
 80032ce:	f240 1145 	movw	r1, #325	; 0x145
 80032d2:	4873      	ldr	r0, [pc, #460]	; (80034a0 <HAL_ADC_Init+0x26c>)
 80032d4:	f7ff f917 	bl	8002506 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	7e1b      	ldrb	r3, [r3, #24]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_ADC_Init+0xbe>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	7e1b      	ldrb	r3, [r3, #24]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d004      	beq.n	80032f2 <HAL_ADC_Init+0xbe>
 80032e8:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80032ec:	486c      	ldr	r0, [pc, #432]	; (80034a0 <HAL_ADC_Init+0x26c>)
 80032ee:	f7ff f90a 	bl	8002506 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d054      	beq.n	80033a4 <HAL_ADC_Init+0x170>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003302:	d04f      	beq.n	80033a4 <HAL_ADC_Init+0x170>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800330c:	d04a      	beq.n	80033a4 <HAL_ADC_Init+0x170>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003316:	d045      	beq.n	80033a4 <HAL_ADC_Init+0x170>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003320:	d040      	beq.n	80033a4 <HAL_ADC_Init+0x170>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800332a:	d03b      	beq.n	80033a4 <HAL_ADC_Init+0x170>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003334:	d036      	beq.n	80033a4 <HAL_ADC_Init+0x170>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800333e:	d031      	beq.n	80033a4 <HAL_ADC_Init+0x170>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003348:	d02c      	beq.n	80033a4 <HAL_ADC_Init+0x170>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8003352:	d027      	beq.n	80033a4 <HAL_ADC_Init+0x170>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800335c:	d022      	beq.n	80033a4 <HAL_ADC_Init+0x170>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8003366:	d01d      	beq.n	80033a4 <HAL_ADC_Init+0x170>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003370:	d018      	beq.n	80033a4 <HAL_ADC_Init+0x170>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 800337a:	d013      	beq.n	80033a4 <HAL_ADC_Init+0x170>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003384:	d00e      	beq.n	80033a4 <HAL_ADC_Init+0x170>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800338e:	d009      	beq.n	80033a4 <HAL_ADC_Init+0x170>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	4a43      	ldr	r2, [pc, #268]	; (80034a4 <HAL_ADC_Init+0x270>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d004      	beq.n	80033a4 <HAL_ADC_Init+0x170>
 800339a:	f240 1147 	movw	r1, #327	; 0x147
 800339e:	4840      	ldr	r0, [pc, #256]	; (80034a0 <HAL_ADC_Init+0x26c>)
 80033a0:	f7ff f8b1 	bl	8002506 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d009      	beq.n	80033c0 <HAL_ADC_Init+0x18c>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b4:	d004      	beq.n	80033c0 <HAL_ADC_Init+0x18c>
 80033b6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80033ba:	4839      	ldr	r0, [pc, #228]	; (80034a0 <HAL_ADC_Init+0x26c>)
 80033bc:	f7ff f8a3 	bl	8002506 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_ADC_Init+0x19c>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	2b10      	cmp	r3, #16
 80033ce:	d904      	bls.n	80033da <HAL_ADC_Init+0x1a6>
 80033d0:	f240 1149 	movw	r1, #329	; 0x149
 80033d4:	4832      	ldr	r0, [pc, #200]	; (80034a0 <HAL_ADC_Init+0x26c>)
 80033d6:	f7ff f896 	bl	8002506 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d009      	beq.n	80033f8 <HAL_ADC_Init+0x1c4>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d004      	beq.n	80033f8 <HAL_ADC_Init+0x1c4>
 80033ee:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80033f2:	482b      	ldr	r0, [pc, #172]	; (80034a0 <HAL_ADC_Init+0x26c>)
 80033f4:	f7ff f887 	bl	8002506 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d00c      	beq.n	800341a <HAL_ADC_Init+0x1e6>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_ADC_Init+0x1e6>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d004      	beq.n	800341a <HAL_ADC_Init+0x1e6>
 8003410:	f240 114b 	movw	r1, #331	; 0x14b
 8003414:	4822      	ldr	r0, [pc, #136]	; (80034a0 <HAL_ADC_Init+0x26c>)
 8003416:	f7ff f876 	bl	8002506 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d009      	beq.n	8003438 <HAL_ADC_Init+0x204>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d004      	beq.n	8003438 <HAL_ADC_Init+0x204>
 800342e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8003432:	481b      	ldr	r0, [pc, #108]	; (80034a0 <HAL_ADC_Init+0x26c>)
 8003434:	f7ff f867 	bl	8002506 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	4a19      	ldr	r2, [pc, #100]	; (80034a4 <HAL_ADC_Init+0x270>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d017      	beq.n	8003472 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d013      	beq.n	8003472 <HAL_ADC_Init+0x23e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003452:	d00e      	beq.n	8003472 <HAL_ADC_Init+0x23e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800345c:	d009      	beq.n	8003472 <HAL_ADC_Init+0x23e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003466:	d004      	beq.n	8003472 <HAL_ADC_Init+0x23e>
 8003468:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800346c:	480c      	ldr	r0, [pc, #48]	; (80034a0 <HAL_ADC_Init+0x26c>)
 800346e:	f7ff f84a 	bl	8002506 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d131      	bne.n	80034de <HAL_ADC_Init+0x2aa>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <HAL_ADC_Init+0x274>)
 800347e:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <HAL_ADC_Init+0x278>)
 8003484:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a09      	ldr	r2, [pc, #36]	; (80034b0 <HAL_ADC_Init+0x27c>)
 800348a:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a09      	ldr	r2, [pc, #36]	; (80034b4 <HAL_ADC_Init+0x280>)
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a08      	ldr	r2, [pc, #32]	; (80034b8 <HAL_ADC_Init+0x284>)
 8003496:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	e00f      	b.n	80034bc <HAL_ADC_Init+0x288>
 800349c:	40012000 	.word	0x40012000
 80034a0:	0800ed64 	.word	0x0800ed64
 80034a4:	0f000001 	.word	0x0f000001
 80034a8:	080039ed 	.word	0x080039ed
 80034ac:	08003a01 	.word	0x08003a01
 80034b0:	08003a15 	.word	0x08003a15
 80034b4:	08003a29 	.word	0x08003a29
 80034b8:	08004049 	.word	0x08004049
 80034bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <HAL_ADC_Init+0x294>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <HAL_ADC_Init+0x300>)
 80034c6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d118      	bne.n	800351c <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034f2:	f023 0302 	bic.w	r3, r3, #2
 80034f6:	f043 0202 	orr.w	r2, r3, #2
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fc12 	bl	8003d28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f023 0303 	bic.w	r3, r3, #3
 8003512:	f043 0201 	orr.w	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
 800351a:	e001      	b.n	8003520 <HAL_ADC_Init+0x2ec>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	08001e15 	.word	0x08001e15

08003538 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	2300      	movs	r3, #0
 8003546:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	7e1b      	ldrb	r3, [r3, #24]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_ADC_IRQHandler+0x3a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7e1b      	ldrb	r3, [r3, #24]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d004      	beq.n	8003572 <HAL_ADC_IRQHandler+0x3a>
 8003568:	f240 41b7 	movw	r1, #1207	; 0x4b7
 800356c:	4892      	ldr	r0, [pc, #584]	; (80037b8 <HAL_ADC_IRQHandler+0x280>)
 800356e:	f7fe ffca 	bl	8002506 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_ADC_IRQHandler+0x4a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	2b10      	cmp	r3, #16
 8003580:	d904      	bls.n	800358c <HAL_ADC_IRQHandler+0x54>
 8003582:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 8003586:	488c      	ldr	r0, [pc, #560]	; (80037b8 <HAL_ADC_IRQHandler+0x280>)
 8003588:	f7fe ffbd 	bl	8002506 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d00c      	beq.n	80035ae <HAL_ADC_IRQHandler+0x76>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_ADC_IRQHandler+0x76>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d004      	beq.n	80035ae <HAL_ADC_IRQHandler+0x76>
 80035a4:	f240 41b9 	movw	r1, #1209	; 0x4b9
 80035a8:	4883      	ldr	r0, [pc, #524]	; (80037b8 <HAL_ADC_IRQHandler+0x280>)
 80035aa:	f7fe ffac 	bl	8002506 <assert_failed>
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d04a      	beq.n	800365a <HAL_ADC_IRQHandler+0x122>
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d047      	beq.n	800365a <HAL_ADC_IRQHandler+0x122>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d105      	bne.n	80035e2 <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d12b      	bne.n	8003648 <HAL_ADC_IRQHandler+0x110>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d127      	bne.n	8003648 <HAL_ADC_IRQHandler+0x110>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <HAL_ADC_IRQHandler+0xdc>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003610:	2b00      	cmp	r3, #0
 8003612:	d119      	bne.n	8003648 <HAL_ADC_IRQHandler+0x110>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0220 	bic.w	r2, r2, #32
 8003622:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d105      	bne.n	8003648 <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f043 0201 	orr.w	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0212 	mvn.w	r2, #18
 8003658:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003668:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d058      	beq.n	8003722 <HAL_ADC_IRQHandler+0x1ea>
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d055      	beq.n	8003722 <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b00      	cmp	r3, #0
 8003680:	d105      	bne.n	800368e <HAL_ADC_IRQHandler+0x156>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d139      	bne.n	8003710 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <HAL_ADC_IRQHandler+0x180>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d12b      	bne.n	8003710 <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d124      	bne.n	8003710 <HAL_ADC_IRQHandler+0x1d8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d11d      	bne.n	8003710 <HAL_ADC_IRQHandler+0x1d8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d119      	bne.n	8003710 <HAL_ADC_IRQHandler+0x1d8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d105      	bne.n	8003710 <HAL_ADC_IRQHandler+0x1d8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f043 0201 	orr.w	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 020c 	mvn.w	r2, #12
 8003720:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003730:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d018      	beq.n	800376a <HAL_ADC_IRQHandler+0x232>
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d015      	beq.n	800376a <HAL_ADC_IRQHandler+0x232>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b01      	cmp	r3, #1
 800374a:	d10e      	bne.n	800376a <HAL_ADC_IRQHandler+0x232>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0201 	mvn.w	r2, #1
 8003768:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003778:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d016      	beq.n	80037ae <HAL_ADC_IRQHandler+0x276>
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d013      	beq.n	80037ae <HAL_ADC_IRQHandler+0x276>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	f043 0202 	orr.w	r2, r3, #2
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f06f 0220 	mvn.w	r2, #32
 800379a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0220 	mvn.w	r2, #32
 80037ac:	601a      	str	r2, [r3, #0]
  }
}
 80037ae:	bf00      	nop
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	0800ed64 	.word	0x0800ed64

080037bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	7e1b      	ldrb	r3, [r3, #24]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_ADC_Start_DMA+0x2a>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	7e1b      	ldrb	r3, [r3, #24]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d004      	beq.n	80037e6 <HAL_ADC_Start_DMA+0x2a>
 80037dc:	f240 515a 	movw	r1, #1370	; 0x55a
 80037e0:	487a      	ldr	r0, [pc, #488]	; (80039cc <HAL_ADC_Start_DMA+0x210>)
 80037e2:	f7fe fe90 	bl	8002506 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d013      	beq.n	8003816 <HAL_ADC_Start_DMA+0x5a>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037f6:	d00e      	beq.n	8003816 <HAL_ADC_Start_DMA+0x5a>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003800:	d009      	beq.n	8003816 <HAL_ADC_Start_DMA+0x5a>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800380a:	d004      	beq.n	8003816 <HAL_ADC_Start_DMA+0x5a>
 800380c:	f240 515b 	movw	r1, #1371	; 0x55b
 8003810:	486e      	ldr	r0, [pc, #440]	; (80039cc <HAL_ADC_Start_DMA+0x210>)
 8003812:	f7fe fe78 	bl	8002506 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_ADC_Start_DMA+0x68>
 8003820:	2302      	movs	r3, #2
 8003822:	e0ce      	b.n	80039c2 <HAL_ADC_Start_DMA+0x206>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b01      	cmp	r3, #1
 8003838:	d018      	beq.n	800386c <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800384a:	4b61      	ldr	r3, [pc, #388]	; (80039d0 <HAL_ADC_Start_DMA+0x214>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a61      	ldr	r2, [pc, #388]	; (80039d4 <HAL_ADC_Start_DMA+0x218>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	0c9a      	lsrs	r2, r3, #18
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800385e:	e002      	b.n	8003866 <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	3b01      	subs	r3, #1
 8003864:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f9      	bne.n	8003860 <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387a:	d107      	bne.n	800388c <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800388a:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b01      	cmp	r3, #1
 8003898:	f040 8086 	bne.w	80039a8 <HAL_ADC_Start_DMA+0x1ec>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038da:	d106      	bne.n	80038ea <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e0:	f023 0206 	bic.w	r2, r3, #6
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	645a      	str	r2, [r3, #68]	; 0x44
 80038e8:	e002      	b.n	80038f0 <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038f8:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <HAL_ADC_Start_DMA+0x21c>)
 80038fa:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	4a36      	ldr	r2, [pc, #216]	; (80039dc <HAL_ADC_Start_DMA+0x220>)
 8003902:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	4a35      	ldr	r2, [pc, #212]	; (80039e0 <HAL_ADC_Start_DMA+0x224>)
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	4a34      	ldr	r2, [pc, #208]	; (80039e4 <HAL_ADC_Start_DMA+0x228>)
 8003912:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800391c:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800392c:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800393c:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	334c      	adds	r3, #76	; 0x4c
 8003948:	4619      	mov	r1, r3
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f000 fedb 	bl	8004708 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10f      	bne.n	800397e <HAL_ADC_Start_DMA+0x1c2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d129      	bne.n	80039c0 <HAL_ADC_Start_DMA+0x204>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	e020      	b.n	80039c0 <HAL_ADC_Start_DMA+0x204>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a19      	ldr	r2, [pc, #100]	; (80039e8 <HAL_ADC_Start_DMA+0x22c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d11b      	bne.n	80039c0 <HAL_ADC_Start_DMA+0x204>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d114      	bne.n	80039c0 <HAL_ADC_Start_DMA+0x204>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039a4:	609a      	str	r2, [r3, #8]
 80039a6:	e00b      	b.n	80039c0 <HAL_ADC_Start_DMA+0x204>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	f043 0210 	orr.w	r2, r3, #16
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b8:	f043 0201 	orr.w	r2, r3, #1
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	0800ed64 	.word	0x0800ed64
 80039d0:	20000000 	.word	0x20000000
 80039d4:	431bde83 	.word	0x431bde83
 80039d8:	40012300 	.word	0x40012300
 80039dc:	08003f3d 	.word	0x08003f3d
 80039e0:	08003ffb 	.word	0x08003ffb
 80039e4:	08004019 	.word	0x08004019
 80039e8:	40012000 	.word	0x40012000

080039ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b12      	cmp	r3, #18
 8003a50:	d909      	bls.n	8003a66 <HAL_ADC_ConfigChannel+0x2a>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a72      	ldr	r2, [pc, #456]	; (8003c20 <HAL_ADC_ConfigChannel+0x1e4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_ADC_ConfigChannel+0x2a>
 8003a5c:	f240 618b 	movw	r1, #1675	; 0x68b
 8003a60:	4870      	ldr	r0, [pc, #448]	; (8003c24 <HAL_ADC_ConfigChannel+0x1e8>)
 8003a62:	f7fe fd50 	bl	8002506 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_ADC_ConfigChannel+0x3a>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b10      	cmp	r3, #16
 8003a74:	d904      	bls.n	8003a80 <HAL_ADC_ConfigChannel+0x44>
 8003a76:	f240 618c 	movw	r1, #1676	; 0x68c
 8003a7a:	486a      	ldr	r0, [pc, #424]	; (8003c24 <HAL_ADC_ConfigChannel+0x1e8>)
 8003a7c:	f7fe fd43 	bl	8002506 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_ADC_ConfigChannel+0x8e>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d01c      	beq.n	8003aca <HAL_ADC_ConfigChannel+0x8e>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d018      	beq.n	8003aca <HAL_ADC_ConfigChannel+0x8e>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d014      	beq.n	8003aca <HAL_ADC_ConfigChannel+0x8e>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d010      	beq.n	8003aca <HAL_ADC_ConfigChannel+0x8e>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b05      	cmp	r3, #5
 8003aae:	d00c      	beq.n	8003aca <HAL_ADC_ConfigChannel+0x8e>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b06      	cmp	r3, #6
 8003ab6:	d008      	beq.n	8003aca <HAL_ADC_ConfigChannel+0x8e>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b07      	cmp	r3, #7
 8003abe:	d004      	beq.n	8003aca <HAL_ADC_ConfigChannel+0x8e>
 8003ac0:	f240 618d 	movw	r1, #1677	; 0x68d
 8003ac4:	4857      	ldr	r0, [pc, #348]	; (8003c24 <HAL_ADC_ConfigChannel+0x1e8>)
 8003ac6:	f7fe fd1e 	bl	8002506 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x9c>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e118      	b.n	8003d0a <HAL_ADC_ConfigChannel+0x2ce>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b09      	cmp	r3, #9
 8003ae6:	d925      	bls.n	8003b34 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68d9      	ldr	r1, [r3, #12]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	461a      	mov	r2, r3
 8003af6:	4613      	mov	r3, r2
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	4413      	add	r3, r2
 8003afc:	3b1e      	subs	r3, #30
 8003afe:	2207      	movs	r2, #7
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43da      	mvns	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	400a      	ands	r2, r1
 8003b0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68d9      	ldr	r1, [r3, #12]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	4618      	mov	r0, r3
 8003b20:	4603      	mov	r3, r0
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4403      	add	r3, r0
 8003b26:	3b1e      	subs	r3, #30
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	60da      	str	r2, [r3, #12]
 8003b32:	e022      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6919      	ldr	r1, [r3, #16]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	4613      	mov	r3, r2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4413      	add	r3, r2
 8003b48:	2207      	movs	r2, #7
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43da      	mvns	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	400a      	ands	r2, r1
 8003b56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6919      	ldr	r1, [r3, #16]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	4618      	mov	r0, r3
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	4403      	add	r3, r0
 8003b70:	409a      	lsls	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d824      	bhi.n	8003bcc <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	3b05      	subs	r3, #5
 8003b94:	221f      	movs	r2, #31
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43da      	mvns	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	400a      	ands	r2, r1
 8003ba2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	3b05      	subs	r3, #5
 8003bbe:	fa00 f203 	lsl.w	r2, r0, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	635a      	str	r2, [r3, #52]	; 0x34
 8003bca:	e051      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b0c      	cmp	r3, #12
 8003bd2:	d829      	bhi.n	8003c28 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	3b23      	subs	r3, #35	; 0x23
 8003be6:	221f      	movs	r2, #31
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43da      	mvns	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	400a      	ands	r2, r1
 8003bf4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	4618      	mov	r0, r3
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3b23      	subs	r3, #35	; 0x23
 8003c10:	fa00 f203 	lsl.w	r2, r0, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8003c1c:	e028      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x234>
 8003c1e:	bf00      	nop
 8003c20:	10000012 	.word	0x10000012
 8003c24:	0800ed64 	.word	0x0800ed64
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	3b41      	subs	r3, #65	; 0x41
 8003c3a:	221f      	movs	r2, #31
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43da      	mvns	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	400a      	ands	r2, r1
 8003c48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	4618      	mov	r0, r3
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	3b41      	subs	r3, #65	; 0x41
 8003c64:	fa00 f203 	lsl.w	r2, r0, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c70:	4b28      	ldr	r3, [pc, #160]	; (8003d14 <HAL_ADC_ConfigChannel+0x2d8>)
 8003c72:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a27      	ldr	r2, [pc, #156]	; (8003d18 <HAL_ADC_ConfigChannel+0x2dc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d10f      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x262>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b12      	cmp	r3, #18
 8003c84:	d10b      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1d      	ldr	r2, [pc, #116]	; (8003d18 <HAL_ADC_ConfigChannel+0x2dc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d12b      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x2c4>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1b      	ldr	r2, [pc, #108]	; (8003d1c <HAL_ADC_ConfigChannel+0x2e0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d003      	beq.n	8003cba <HAL_ADC_ConfigChannel+0x27e>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b11      	cmp	r3, #17
 8003cb8:	d122      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a11      	ldr	r2, [pc, #68]	; (8003d1c <HAL_ADC_ConfigChannel+0x2e0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d111      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003cdc:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <HAL_ADC_ConfigChannel+0x2e4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a10      	ldr	r2, [pc, #64]	; (8003d24 <HAL_ADC_ConfigChannel+0x2e8>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	0c9a      	lsrs	r2, r3, #18
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003cf2:	e002      	b.n	8003cfa <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1f9      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40012300 	.word	0x40012300
 8003d18:	40012000 	.word	0x40012000
 8003d1c:	10000012 	.word	0x10000012
 8003d20:	20000000 	.word	0x20000000
 8003d24:	431bde83 	.word	0x431bde83

08003d28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d30:	4b7f      	ldr	r3, [pc, #508]	; (8003f30 <ADC_Init+0x208>)
 8003d32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	021a      	lsls	r2, r3, #8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6859      	ldr	r1, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6899      	ldr	r1, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	4a5e      	ldr	r2, [pc, #376]	; (8003f34 <ADC_Init+0x20c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d022      	beq.n	8003e06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6899      	ldr	r1, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003df0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6899      	ldr	r1, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	e00f      	b.n	8003e26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0202 	bic.w	r2, r2, #2
 8003e34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6899      	ldr	r1, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	7e1b      	ldrb	r3, [r3, #24]
 8003e40:	005a      	lsls	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d028      	beq.n	8003ea6 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <ADC_Init+0x13c>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d904      	bls.n	8003e6e <ADC_Init+0x146>
 8003e64:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8003e68:	4833      	ldr	r0, [pc, #204]	; (8003f38 <ADC_Init+0x210>)
 8003e6a:	f7fe fb4c 	bl	8002506 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e7c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e8c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6859      	ldr	r1, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	035a      	lsls	r2, r3, #13
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	e007      	b.n	8003eb6 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	051a      	lsls	r2, r3, #20
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003eea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6899      	ldr	r1, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ef8:	025a      	lsls	r2, r3, #9
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6899      	ldr	r1, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	029a      	lsls	r2, r3, #10
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	609a      	str	r2, [r3, #8]
}
 8003f26:	bf00      	nop
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40012300 	.word	0x40012300
 8003f34:	0f000001 	.word	0x0f000001
 8003f38:	0800ed64 	.word	0x0800ed64

08003f3c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d13d      	bne.n	8003fd2 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d12b      	bne.n	8003fc8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d127      	bne.n	8003fc8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d006      	beq.n	8003f94 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d119      	bne.n	8003fc8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0220 	bic.w	r2, r2, #32
 8003fa2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d105      	bne.n	8003fc8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	f043 0201 	orr.w	r2, r3, #1
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003fd0:	e00f      	b.n	8003ff2 <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d004      	beq.n	8003fe8 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	4798      	blx	r3
}
 8003fe6:	e004      	b.n	8003ff2 <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	4798      	blx	r3
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004024:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2240      	movs	r2, #64	; 0x40
 800402a:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004030:	f043 0204 	orr.w	r2, r3, #4
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <__NVIC_SetPriorityGrouping+0x44>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004078:	4013      	ands	r3, r2
 800407a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800408c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800408e:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	60d3      	str	r3, [r2, #12]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <__NVIC_GetPriorityGrouping+0x18>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	0a1b      	lsrs	r3, r3, #8
 80040ae:	f003 0307 	and.w	r3, r3, #7
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	db0b      	blt.n	80040ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	f003 021f 	and.w	r2, r3, #31
 80040d8:	4907      	ldr	r1, [pc, #28]	; (80040f8 <__NVIC_EnableIRQ+0x38>)
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2001      	movs	r0, #1
 80040e2:	fa00 f202 	lsl.w	r2, r0, r2
 80040e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	e000e100 	.word	0xe000e100

080040fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	6039      	str	r1, [r7, #0]
 8004106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410c:	2b00      	cmp	r3, #0
 800410e:	db0a      	blt.n	8004126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	b2da      	uxtb	r2, r3
 8004114:	490c      	ldr	r1, [pc, #48]	; (8004148 <__NVIC_SetPriority+0x4c>)
 8004116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411a:	0112      	lsls	r2, r2, #4
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	440b      	add	r3, r1
 8004120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004124:	e00a      	b.n	800413c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	4908      	ldr	r1, [pc, #32]	; (800414c <__NVIC_SetPriority+0x50>)
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	3b04      	subs	r3, #4
 8004134:	0112      	lsls	r2, r2, #4
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	440b      	add	r3, r1
 800413a:	761a      	strb	r2, [r3, #24]
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	e000e100 	.word	0xe000e100
 800414c:	e000ed00 	.word	0xe000ed00

08004150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004150:	b480      	push	{r7}
 8004152:	b089      	sub	sp, #36	; 0x24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f1c3 0307 	rsb	r3, r3, #7
 800416a:	2b04      	cmp	r3, #4
 800416c:	bf28      	it	cs
 800416e:	2304      	movcs	r3, #4
 8004170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	3304      	adds	r3, #4
 8004176:	2b06      	cmp	r3, #6
 8004178:	d902      	bls.n	8004180 <NVIC_EncodePriority+0x30>
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3b03      	subs	r3, #3
 800417e:	e000      	b.n	8004182 <NVIC_EncodePriority+0x32>
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004184:	f04f 32ff 	mov.w	r2, #4294967295
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43da      	mvns	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	401a      	ands	r2, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004198:	f04f 31ff 	mov.w	r1, #4294967295
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	fa01 f303 	lsl.w	r3, r1, r3
 80041a2:	43d9      	mvns	r1, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a8:	4313      	orrs	r3, r2
         );
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3724      	adds	r7, #36	; 0x24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b07      	cmp	r3, #7
 80041c4:	d00f      	beq.n	80041e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b06      	cmp	r3, #6
 80041ca:	d00c      	beq.n	80041e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b05      	cmp	r3, #5
 80041d0:	d009      	beq.n	80041e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d006      	beq.n	80041e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d003      	beq.n	80041e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80041de:	2190      	movs	r1, #144	; 0x90
 80041e0:	4804      	ldr	r0, [pc, #16]	; (80041f4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80041e2:	f7fe f990 	bl	8002506 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff ff38 	bl	800405c <__NVIC_SetPriorityGrouping>
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	0800edd8 	.word	0x0800edd8

080041f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004206:	2300      	movs	r3, #0
 8004208:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b0f      	cmp	r3, #15
 800420e:	d903      	bls.n	8004218 <HAL_NVIC_SetPriority+0x20>
 8004210:	21a8      	movs	r1, #168	; 0xa8
 8004212:	480e      	ldr	r0, [pc, #56]	; (800424c <HAL_NVIC_SetPriority+0x54>)
 8004214:	f7fe f977 	bl	8002506 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b0f      	cmp	r3, #15
 800421c:	d903      	bls.n	8004226 <HAL_NVIC_SetPriority+0x2e>
 800421e:	21a9      	movs	r1, #169	; 0xa9
 8004220:	480a      	ldr	r0, [pc, #40]	; (800424c <HAL_NVIC_SetPriority+0x54>)
 8004222:	f7fe f970 	bl	8002506 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004226:	f7ff ff3d 	bl	80040a4 <__NVIC_GetPriorityGrouping>
 800422a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	68b9      	ldr	r1, [r7, #8]
 8004230:	6978      	ldr	r0, [r7, #20]
 8004232:	f7ff ff8d 	bl	8004150 <NVIC_EncodePriority>
 8004236:	4602      	mov	r2, r0
 8004238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800423c:	4611      	mov	r1, r2
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff ff5c 	bl	80040fc <__NVIC_SetPriority>
}
 8004244:	bf00      	nop
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	0800edd8 	.word	0x0800edd8

08004250 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	2b00      	cmp	r3, #0
 8004260:	da03      	bge.n	800426a <HAL_NVIC_EnableIRQ+0x1a>
 8004262:	21bc      	movs	r1, #188	; 0xbc
 8004264:	4805      	ldr	r0, [pc, #20]	; (800427c <HAL_NVIC_EnableIRQ+0x2c>)
 8004266:	f7fe f94e 	bl	8002506 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ff26 	bl	80040c0 <__NVIC_EnableIRQ>
}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	0800edd8 	.word	0x0800edd8

08004280 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e017      	b.n	80042c2 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a0d      	ldr	r2, [pc, #52]	; (80042cc <HAL_CRC_Init+0x4c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <HAL_CRC_Init+0x24>
 800429c:	2168      	movs	r1, #104	; 0x68
 800429e:	480c      	ldr	r0, [pc, #48]	; (80042d0 <HAL_CRC_Init+0x50>)
 80042a0:	f7fe f931 	bl	8002506 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	795b      	ldrb	r3, [r3, #5]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d105      	bne.n	80042ba <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7fd fe79 	bl	8001fac <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40023000 	.word	0x40023000
 80042d0:	0800ee50 	.word	0x0800ee50

080042d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042e0:	f7fe ff9c 	bl	800321c <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e203      	b.n	80046f8 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a8b      	ldr	r2, [pc, #556]	; (8004524 <HAL_DMA_Init+0x250>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d04e      	beq.n	8004398 <HAL_DMA_Init+0xc4>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a8a      	ldr	r2, [pc, #552]	; (8004528 <HAL_DMA_Init+0x254>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d049      	beq.n	8004398 <HAL_DMA_Init+0xc4>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a88      	ldr	r2, [pc, #544]	; (800452c <HAL_DMA_Init+0x258>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d044      	beq.n	8004398 <HAL_DMA_Init+0xc4>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a87      	ldr	r2, [pc, #540]	; (8004530 <HAL_DMA_Init+0x25c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d03f      	beq.n	8004398 <HAL_DMA_Init+0xc4>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a85      	ldr	r2, [pc, #532]	; (8004534 <HAL_DMA_Init+0x260>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d03a      	beq.n	8004398 <HAL_DMA_Init+0xc4>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a84      	ldr	r2, [pc, #528]	; (8004538 <HAL_DMA_Init+0x264>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d035      	beq.n	8004398 <HAL_DMA_Init+0xc4>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a82      	ldr	r2, [pc, #520]	; (800453c <HAL_DMA_Init+0x268>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d030      	beq.n	8004398 <HAL_DMA_Init+0xc4>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a81      	ldr	r2, [pc, #516]	; (8004540 <HAL_DMA_Init+0x26c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d02b      	beq.n	8004398 <HAL_DMA_Init+0xc4>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a7f      	ldr	r2, [pc, #508]	; (8004544 <HAL_DMA_Init+0x270>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d026      	beq.n	8004398 <HAL_DMA_Init+0xc4>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a7e      	ldr	r2, [pc, #504]	; (8004548 <HAL_DMA_Init+0x274>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d021      	beq.n	8004398 <HAL_DMA_Init+0xc4>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a7c      	ldr	r2, [pc, #496]	; (800454c <HAL_DMA_Init+0x278>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d01c      	beq.n	8004398 <HAL_DMA_Init+0xc4>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a7b      	ldr	r2, [pc, #492]	; (8004550 <HAL_DMA_Init+0x27c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d017      	beq.n	8004398 <HAL_DMA_Init+0xc4>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a79      	ldr	r2, [pc, #484]	; (8004554 <HAL_DMA_Init+0x280>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d012      	beq.n	8004398 <HAL_DMA_Init+0xc4>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a78      	ldr	r2, [pc, #480]	; (8004558 <HAL_DMA_Init+0x284>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00d      	beq.n	8004398 <HAL_DMA_Init+0xc4>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a76      	ldr	r2, [pc, #472]	; (800455c <HAL_DMA_Init+0x288>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d008      	beq.n	8004398 <HAL_DMA_Init+0xc4>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a75      	ldr	r2, [pc, #468]	; (8004560 <HAL_DMA_Init+0x28c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d003      	beq.n	8004398 <HAL_DMA_Init+0xc4>
 8004390:	21b7      	movs	r1, #183	; 0xb7
 8004392:	4874      	ldr	r0, [pc, #464]	; (8004564 <HAL_DMA_Init+0x290>)
 8004394:	f7fe f8b7 	bl	8002506 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d026      	beq.n	80043ee <HAL_DMA_Init+0x11a>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043a8:	d021      	beq.n	80043ee <HAL_DMA_Init+0x11a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043b2:	d01c      	beq.n	80043ee <HAL_DMA_Init+0x11a>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80043bc:	d017      	beq.n	80043ee <HAL_DMA_Init+0x11a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043c6:	d012      	beq.n	80043ee <HAL_DMA_Init+0x11a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80043d0:	d00d      	beq.n	80043ee <HAL_DMA_Init+0x11a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80043da:	d008      	beq.n	80043ee <HAL_DMA_Init+0x11a>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80043e4:	d003      	beq.n	80043ee <HAL_DMA_Init+0x11a>
 80043e6:	21b8      	movs	r1, #184	; 0xb8
 80043e8:	485e      	ldr	r0, [pc, #376]	; (8004564 <HAL_DMA_Init+0x290>)
 80043ea:	f7fe f88c 	bl	8002506 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00b      	beq.n	800440e <HAL_DMA_Init+0x13a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b40      	cmp	r3, #64	; 0x40
 80043fc:	d007      	beq.n	800440e <HAL_DMA_Init+0x13a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b80      	cmp	r3, #128	; 0x80
 8004404:	d003      	beq.n	800440e <HAL_DMA_Init+0x13a>
 8004406:	21b9      	movs	r1, #185	; 0xb9
 8004408:	4856      	ldr	r0, [pc, #344]	; (8004564 <HAL_DMA_Init+0x290>)
 800440a:	f7fe f87c 	bl	8002506 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004416:	d007      	beq.n	8004428 <HAL_DMA_Init+0x154>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_DMA_Init+0x154>
 8004420:	21ba      	movs	r1, #186	; 0xba
 8004422:	4850      	ldr	r0, [pc, #320]	; (8004564 <HAL_DMA_Init+0x290>)
 8004424:	f7fe f86f 	bl	8002506 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004430:	d007      	beq.n	8004442 <HAL_DMA_Init+0x16e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_DMA_Init+0x16e>
 800443a:	21bb      	movs	r1, #187	; 0xbb
 800443c:	4849      	ldr	r0, [pc, #292]	; (8004564 <HAL_DMA_Init+0x290>)
 800443e:	f7fe f862 	bl	8002506 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00d      	beq.n	8004466 <HAL_DMA_Init+0x192>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004452:	d008      	beq.n	8004466 <HAL_DMA_Init+0x192>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800445c:	d003      	beq.n	8004466 <HAL_DMA_Init+0x192>
 800445e:	21bc      	movs	r1, #188	; 0xbc
 8004460:	4840      	ldr	r0, [pc, #256]	; (8004564 <HAL_DMA_Init+0x290>)
 8004462:	f7fe f850 	bl	8002506 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00d      	beq.n	800448a <HAL_DMA_Init+0x1b6>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004476:	d008      	beq.n	800448a <HAL_DMA_Init+0x1b6>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004480:	d003      	beq.n	800448a <HAL_DMA_Init+0x1b6>
 8004482:	21bd      	movs	r1, #189	; 0xbd
 8004484:	4837      	ldr	r0, [pc, #220]	; (8004564 <HAL_DMA_Init+0x290>)
 8004486:	f7fe f83e 	bl	8002506 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00c      	beq.n	80044ac <HAL_DMA_Init+0x1d8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800449a:	d007      	beq.n	80044ac <HAL_DMA_Init+0x1d8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d003      	beq.n	80044ac <HAL_DMA_Init+0x1d8>
 80044a4:	21be      	movs	r1, #190	; 0xbe
 80044a6:	482f      	ldr	r0, [pc, #188]	; (8004564 <HAL_DMA_Init+0x290>)
 80044a8:	f7fe f82d 	bl	8002506 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d012      	beq.n	80044da <HAL_DMA_Init+0x206>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044bc:	d00d      	beq.n	80044da <HAL_DMA_Init+0x206>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044c6:	d008      	beq.n	80044da <HAL_DMA_Init+0x206>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044d0:	d003      	beq.n	80044da <HAL_DMA_Init+0x206>
 80044d2:	21bf      	movs	r1, #191	; 0xbf
 80044d4:	4823      	ldr	r0, [pc, #140]	; (8004564 <HAL_DMA_Init+0x290>)
 80044d6:	f7fe f816 	bl	8002506 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <HAL_DMA_Init+0x21e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d003      	beq.n	80044f2 <HAL_DMA_Init+0x21e>
 80044ea:	21c0      	movs	r1, #192	; 0xc0
 80044ec:	481d      	ldr	r0, [pc, #116]	; (8004564 <HAL_DMA_Init+0x290>)
 80044ee:	f7fe f80a 	bl	8002506 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d064      	beq.n	80045c4 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d032      	beq.n	8004568 <HAL_DMA_Init+0x294>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004506:	2b01      	cmp	r3, #1
 8004508:	d02e      	beq.n	8004568 <HAL_DMA_Init+0x294>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450e:	2b02      	cmp	r3, #2
 8004510:	d02a      	beq.n	8004568 <HAL_DMA_Init+0x294>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004516:	2b03      	cmp	r3, #3
 8004518:	d026      	beq.n	8004568 <HAL_DMA_Init+0x294>
 800451a:	21c5      	movs	r1, #197	; 0xc5
 800451c:	4811      	ldr	r0, [pc, #68]	; (8004564 <HAL_DMA_Init+0x290>)
 800451e:	f7fd fff2 	bl	8002506 <assert_failed>
 8004522:	e021      	b.n	8004568 <HAL_DMA_Init+0x294>
 8004524:	40026010 	.word	0x40026010
 8004528:	40026028 	.word	0x40026028
 800452c:	40026040 	.word	0x40026040
 8004530:	40026058 	.word	0x40026058
 8004534:	40026070 	.word	0x40026070
 8004538:	40026088 	.word	0x40026088
 800453c:	400260a0 	.word	0x400260a0
 8004540:	400260b8 	.word	0x400260b8
 8004544:	40026410 	.word	0x40026410
 8004548:	40026428 	.word	0x40026428
 800454c:	40026440 	.word	0x40026440
 8004550:	40026458 	.word	0x40026458
 8004554:	40026470 	.word	0x40026470
 8004558:	40026488 	.word	0x40026488
 800455c:	400264a0 	.word	0x400264a0
 8004560:	400264b8 	.word	0x400264b8
 8004564:	0800eec4 	.word	0x0800eec4
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	2b00      	cmp	r3, #0
 800456e:	d012      	beq.n	8004596 <HAL_DMA_Init+0x2c2>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004578:	d00d      	beq.n	8004596 <HAL_DMA_Init+0x2c2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004582:	d008      	beq.n	8004596 <HAL_DMA_Init+0x2c2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800458c:	d003      	beq.n	8004596 <HAL_DMA_Init+0x2c2>
 800458e:	21c6      	movs	r1, #198	; 0xc6
 8004590:	485b      	ldr	r0, [pc, #364]	; (8004700 <HAL_DMA_Init+0x42c>)
 8004592:	f7fd ffb8 	bl	8002506 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	2b00      	cmp	r3, #0
 800459c:	d012      	beq.n	80045c4 <HAL_DMA_Init+0x2f0>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045a6:	d00d      	beq.n	80045c4 <HAL_DMA_Init+0x2f0>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b0:	d008      	beq.n	80045c4 <HAL_DMA_Init+0x2f0>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045ba:	d003      	beq.n	80045c4 <HAL_DMA_Init+0x2f0>
 80045bc:	21c7      	movs	r1, #199	; 0xc7
 80045be:	4850      	ldr	r0, [pc, #320]	; (8004700 <HAL_DMA_Init+0x42c>)
 80045c0:	f7fd ffa1 	bl	8002506 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0201 	bic.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045e4:	e00f      	b.n	8004606 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045e6:	f7fe fe19 	bl	800321c <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b05      	cmp	r3, #5
 80045f2:	d908      	bls.n	8004606 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2203      	movs	r2, #3
 80045fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e078      	b.n	80046f8 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e8      	bne.n	80045e6 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4b39      	ldr	r3, [pc, #228]	; (8004704 <HAL_DMA_Init+0x430>)
 8004620:	4013      	ands	r3, r2
 8004622:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004632:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800463e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800464a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	2b04      	cmp	r3, #4
 800465e:	d107      	bne.n	8004670 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	4313      	orrs	r3, r2
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	4313      	orrs	r3, r2
 800466e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f023 0307 	bic.w	r3, r3, #7
 8004686:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	2b04      	cmp	r3, #4
 8004698:	d117      	bne.n	80046ca <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00e      	beq.n	80046ca <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 fb1f 	bl	8004cf0 <DMA_CheckFifoParam>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2240      	movs	r2, #64	; 0x40
 80046bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80046c6:	2301      	movs	r3, #1
 80046c8:	e016      	b.n	80046f8 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fad6 	bl	8004c84 <DMA_CalcBaseAndBitshift>
 80046d8:	4603      	mov	r3, r0
 80046da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e0:	223f      	movs	r2, #63	; 0x3f
 80046e2:	409a      	lsls	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	0800eec4 	.word	0x0800eec4
 8004704:	f010803f 	.word	0xf010803f

08004708 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_DMA_Start_IT+0x26>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472c:	d304      	bcc.n	8004738 <HAL_DMA_Start_IT+0x30>
 800472e:	f240 11cb 	movw	r1, #459	; 0x1cb
 8004732:	4827      	ldr	r0, [pc, #156]	; (80047d0 <HAL_DMA_Start_IT+0xc8>)
 8004734:	f7fd fee7 	bl	8002506 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_DMA_Start_IT+0x3e>
 8004742:	2302      	movs	r3, #2
 8004744:	e040      	b.n	80047c8 <HAL_DMA_Start_IT+0xc0>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b01      	cmp	r3, #1
 8004758:	d12f      	bne.n	80047ba <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2202      	movs	r2, #2
 800475e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fa5a 	bl	8004c28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004778:	223f      	movs	r2, #63	; 0x3f
 800477a:	409a      	lsls	r2, r3
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0216 	orr.w	r2, r2, #22
 800478e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d007      	beq.n	80047a8 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0208 	orr.w	r2, r2, #8
 80047a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	e005      	b.n	80047c6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80047c2:	2302      	movs	r3, #2
 80047c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	0800eec4 	.word	0x0800eec4

080047d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047e2:	f7fe fd1b 	bl	800321c <HAL_GetTick>
 80047e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d008      	beq.n	8004806 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2280      	movs	r2, #128	; 0x80
 80047f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e052      	b.n	80048ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0216 	bic.w	r2, r2, #22
 8004814:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695a      	ldr	r2, [r3, #20]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004824:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d103      	bne.n	8004836 <HAL_DMA_Abort+0x62>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0208 	bic.w	r2, r2, #8
 8004844:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0201 	bic.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004856:	e013      	b.n	8004880 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004858:	f7fe fce0 	bl	800321c <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b05      	cmp	r3, #5
 8004864:	d90c      	bls.n	8004880 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2203      	movs	r2, #3
 8004870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e015      	b.n	80048ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e4      	bne.n	8004858 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004892:	223f      	movs	r2, #63	; 0x3f
 8004894:	409a      	lsls	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d004      	beq.n	80048d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2280      	movs	r2, #128	; 0x80
 80048cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e00c      	b.n	80048ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2205      	movs	r2, #5
 80048d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004904:	4b8e      	ldr	r3, [pc, #568]	; (8004b40 <HAL_DMA_IRQHandler+0x248>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a8e      	ldr	r2, [pc, #568]	; (8004b44 <HAL_DMA_IRQHandler+0x24c>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	0a9b      	lsrs	r3, r3, #10
 8004910:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004916:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004922:	2208      	movs	r2, #8
 8004924:	409a      	lsls	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d01a      	beq.n	8004964 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b00      	cmp	r3, #0
 800493a:	d013      	beq.n	8004964 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0204 	bic.w	r2, r2, #4
 800494a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004950:	2208      	movs	r2, #8
 8004952:	409a      	lsls	r2, r3
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495c:	f043 0201 	orr.w	r2, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004968:	2201      	movs	r2, #1
 800496a:	409a      	lsls	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4013      	ands	r3, r2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d012      	beq.n	800499a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004986:	2201      	movs	r2, #1
 8004988:	409a      	lsls	r2, r3
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	f043 0202 	orr.w	r2, r3, #2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499e:	2204      	movs	r2, #4
 80049a0:	409a      	lsls	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d012      	beq.n	80049d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00b      	beq.n	80049d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049bc:	2204      	movs	r2, #4
 80049be:	409a      	lsls	r2, r3
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c8:	f043 0204 	orr.w	r2, r3, #4
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d4:	2210      	movs	r2, #16
 80049d6:	409a      	lsls	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d043      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d03c      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f2:	2210      	movs	r2, #16
 80049f4:	409a      	lsls	r2, r3
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d018      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d108      	bne.n	8004a28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d024      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
 8004a26:	e01f      	b.n	8004a68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01b      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	4798      	blx	r3
 8004a38:	e016      	b.n	8004a68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d107      	bne.n	8004a58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0208 	bic.w	r2, r2, #8
 8004a56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4013      	ands	r3, r2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 808f 	beq.w	8004b98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8087 	beq.w	8004b98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8e:	2220      	movs	r2, #32
 8004a90:	409a      	lsls	r2, r3
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d136      	bne.n	8004b10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0216 	bic.w	r2, r2, #22
 8004ab0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695a      	ldr	r2, [r3, #20]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ac0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <HAL_DMA_IRQHandler+0x1da>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d007      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0208 	bic.w	r2, r2, #8
 8004ae0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae6:	223f      	movs	r2, #63	; 0x3f
 8004ae8:	409a      	lsls	r2, r3
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d07e      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	4798      	blx	r3
        }
        return;
 8004b0e:	e079      	b.n	8004c04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d01d      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10d      	bne.n	8004b48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d031      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	4798      	blx	r3
 8004b3c:	e02c      	b.n	8004b98 <HAL_DMA_IRQHandler+0x2a0>
 8004b3e:	bf00      	nop
 8004b40:	20000000 	.word	0x20000000
 8004b44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d023      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
 8004b58:	e01e      	b.n	8004b98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10f      	bne.n	8004b88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0210 	bic.w	r2, r2, #16
 8004b76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d032      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d022      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2205      	movs	r2, #5
 8004bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d307      	bcc.n	8004be0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f2      	bne.n	8004bc4 <HAL_DMA_IRQHandler+0x2cc>
 8004bde:	e000      	b.n	8004be2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004be0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	4798      	blx	r3
 8004c02:	e000      	b.n	8004c06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c04:	bf00      	nop
    }
  }
}
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c1a:	b2db      	uxtb	r3, r3
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	2b40      	cmp	r3, #64	; 0x40
 8004c54:	d108      	bne.n	8004c68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c66:	e007      	b.n	8004c78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	60da      	str	r2, [r3, #12]
}
 8004c78:	bf00      	nop
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	3b10      	subs	r3, #16
 8004c94:	4a14      	ldr	r2, [pc, #80]	; (8004ce8 <DMA_CalcBaseAndBitshift+0x64>)
 8004c96:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9a:	091b      	lsrs	r3, r3, #4
 8004c9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c9e:	4a13      	ldr	r2, [pc, #76]	; (8004cec <DMA_CalcBaseAndBitshift+0x68>)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d909      	bls.n	8004cc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	1d1a      	adds	r2, r3, #4
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	659a      	str	r2, [r3, #88]	; 0x58
 8004cc4:	e007      	b.n	8004cd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cce:	f023 0303 	bic.w	r3, r3, #3
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	aaaaaaab 	.word	0xaaaaaaab
 8004cec:	0800f4bc 	.word	0x0800f4bc

08004cf0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d11f      	bne.n	8004d4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d856      	bhi.n	8004dbe <DMA_CheckFifoParam+0xce>
 8004d10:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <DMA_CheckFifoParam+0x28>)
 8004d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d16:	bf00      	nop
 8004d18:	08004d29 	.word	0x08004d29
 8004d1c:	08004d3b 	.word	0x08004d3b
 8004d20:	08004d29 	.word	0x08004d29
 8004d24:	08004dbf 	.word	0x08004dbf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d046      	beq.n	8004dc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d38:	e043      	b.n	8004dc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d42:	d140      	bne.n	8004dc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d48:	e03d      	b.n	8004dc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d52:	d121      	bne.n	8004d98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d837      	bhi.n	8004dca <DMA_CheckFifoParam+0xda>
 8004d5a:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <DMA_CheckFifoParam+0x70>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d71 	.word	0x08004d71
 8004d64:	08004d77 	.word	0x08004d77
 8004d68:	08004d71 	.word	0x08004d71
 8004d6c:	08004d89 	.word	0x08004d89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
      break;
 8004d74:	e030      	b.n	8004dd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d025      	beq.n	8004dce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d86:	e022      	b.n	8004dce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d90:	d11f      	bne.n	8004dd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d96:	e01c      	b.n	8004dd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d903      	bls.n	8004da6 <DMA_CheckFifoParam+0xb6>
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d003      	beq.n	8004dac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004da4:	e018      	b.n	8004dd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	73fb      	strb	r3, [r7, #15]
      break;
 8004daa:	e015      	b.n	8004dd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00e      	beq.n	8004dd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
      break;
 8004dbc:	e00b      	b.n	8004dd6 <DMA_CheckFifoParam+0xe6>
      break;
 8004dbe:	bf00      	nop
 8004dc0:	e00a      	b.n	8004dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8004dc2:	bf00      	nop
 8004dc4:	e008      	b.n	8004dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8004dc6:	bf00      	nop
 8004dc8:	e006      	b.n	8004dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8004dca:	bf00      	nop
 8004dcc:	e004      	b.n	8004dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8004dce:	bf00      	nop
 8004dd0:	e002      	b.n	8004dd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004dd2:	bf00      	nop
 8004dd4:	e000      	b.n	8004dd8 <DMA_CheckFifoParam+0xe8>
      break;
 8004dd6:	bf00      	nop
    }
  } 
  
  return status; 
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop

08004de8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004df2:	4b4b      	ldr	r3, [pc, #300]	; (8004f20 <HAL_FLASH_IRQHandler+0x138>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d020      	beq.n	8004e40 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8004dfe:	4b49      	ldr	r3, [pc, #292]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d107      	bne.n	8004e18 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8004e08:	4b46      	ldr	r3, [pc, #280]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8004e0e:	4b45      	ldr	r3, [pc, #276]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004e10:	f04f 32ff 	mov.w	r2, #4294967295
 8004e14:	60da      	str	r2, [r3, #12]
 8004e16:	e00b      	b.n	8004e30 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8004e18:	4b42      	ldr	r3, [pc, #264]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d103      	bne.n	8004e2a <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8004e22:	4b40      	ldr	r3, [pc, #256]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	607b      	str	r3, [r7, #4]
 8004e28:	e002      	b.n	8004e30 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8004e2a:	4b3e      	ldr	r3, [pc, #248]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8004e30:	f000 f88e 	bl	8004f50 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f881 	bl	8004f3c <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004e3a:	4b3a      	ldr	r3, [pc, #232]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004e40:	4b37      	ldr	r3, [pc, #220]	; (8004f20 <HAL_FLASH_IRQHandler+0x138>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d04a      	beq.n	8004ee2 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004e4c:	4b34      	ldr	r3, [pc, #208]	; (8004f20 <HAL_FLASH_IRQHandler+0x138>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8004e52:	4b34      	ldr	r3, [pc, #208]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d12d      	bne.n	8004eb8 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8004e5c:	4b31      	ldr	r3, [pc, #196]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	4a30      	ldr	r2, [pc, #192]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004e64:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8004e66:	4b2f      	ldr	r3, [pc, #188]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d015      	beq.n	8004e9a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8004e6e:	4b2d      	ldr	r3, [pc, #180]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f857 	bl	8004f28 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8004e7a:	4b2a      	ldr	r3, [pc, #168]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	4a28      	ldr	r2, [pc, #160]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004e82:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8004e84:	4b27      	ldr	r3, [pc, #156]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8004e8a:	4b26      	ldr	r3, [pc, #152]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004e8c:	7a1b      	ldrb	r3, [r3, #8]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	4619      	mov	r1, r3
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f8c2 	bl	800501c <FLASH_Erase_Sector>
 8004e98:	e023      	b.n	8004ee2 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8004e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9e:	607b      	str	r3, [r7, #4]
 8004ea0:	4a20      	ldr	r2, [pc, #128]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004ea6:	4b1f      	ldr	r3, [pc, #124]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8004eac:	f000 f92c 	bl	8005108 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f839 	bl	8004f28 <HAL_FLASH_EndOfOperationCallback>
 8004eb6:	e014      	b.n	8004ee2 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8004eb8:	4b1a      	ldr	r3, [pc, #104]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d107      	bne.n	8004ed2 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8004ec2:	f000 f921 	bl	8005108 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8004ec6:	4b17      	ldr	r3, [pc, #92]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 f82c 	bl	8004f28 <HAL_FLASH_EndOfOperationCallback>
 8004ed0:	e004      	b.n	8004edc <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8004ed2:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f826 	bl	8004f28 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004edc:	4b11      	ldr	r3, [pc, #68]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8004ee2:	4b10      	ldr	r3, [pc, #64]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d114      	bne.n	8004f16 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8004eec:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <HAL_FLASH_IRQHandler+0x138>)
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	4a0b      	ldr	r2, [pc, #44]	; (8004f20 <HAL_FLASH_IRQHandler+0x138>)
 8004ef2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ef6:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8004ef8:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <HAL_FLASH_IRQHandler+0x138>)
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	4a08      	ldr	r2, [pc, #32]	; (8004f20 <HAL_FLASH_IRQHandler+0x138>)
 8004efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f02:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8004f04:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <HAL_FLASH_IRQHandler+0x138>)
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	4a05      	ldr	r2, [pc, #20]	; (8004f20 <HAL_FLASH_IRQHandler+0x138>)
 8004f0a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004f10:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <HAL_FLASH_IRQHandler+0x13c>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	761a      	strb	r2, [r3, #24]
  }
}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40023c00 	.word	0x40023c00
 8004f24:	200008f4 	.word	0x200008f4

08004f28 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004f54:	4b2f      	ldr	r3, [pc, #188]	; (8005014 <FLASH_SetErrorCode+0xc4>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d008      	beq.n	8004f72 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004f60:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <FLASH_SetErrorCode+0xc8>)
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	f043 0310 	orr.w	r3, r3, #16
 8004f68:	4a2b      	ldr	r2, [pc, #172]	; (8005018 <FLASH_SetErrorCode+0xc8>)
 8004f6a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004f6c:	4b29      	ldr	r3, [pc, #164]	; (8005014 <FLASH_SetErrorCode+0xc4>)
 8004f6e:	2210      	movs	r2, #16
 8004f70:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004f72:	4b28      	ldr	r3, [pc, #160]	; (8005014 <FLASH_SetErrorCode+0xc4>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d008      	beq.n	8004f90 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004f7e:	4b26      	ldr	r3, [pc, #152]	; (8005018 <FLASH_SetErrorCode+0xc8>)
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f043 0308 	orr.w	r3, r3, #8
 8004f86:	4a24      	ldr	r2, [pc, #144]	; (8005018 <FLASH_SetErrorCode+0xc8>)
 8004f88:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004f8a:	4b22      	ldr	r3, [pc, #136]	; (8005014 <FLASH_SetErrorCode+0xc4>)
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004f90:	4b20      	ldr	r3, [pc, #128]	; (8005014 <FLASH_SetErrorCode+0xc4>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d008      	beq.n	8004fae <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004f9c:	4b1e      	ldr	r3, [pc, #120]	; (8005018 <FLASH_SetErrorCode+0xc8>)
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	f043 0304 	orr.w	r3, r3, #4
 8004fa4:	4a1c      	ldr	r2, [pc, #112]	; (8005018 <FLASH_SetErrorCode+0xc8>)
 8004fa6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004fa8:	4b1a      	ldr	r3, [pc, #104]	; (8005014 <FLASH_SetErrorCode+0xc4>)
 8004faa:	2240      	movs	r2, #64	; 0x40
 8004fac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004fae:	4b19      	ldr	r3, [pc, #100]	; (8005014 <FLASH_SetErrorCode+0xc4>)
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d008      	beq.n	8004fcc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004fba:	4b17      	ldr	r3, [pc, #92]	; (8005018 <FLASH_SetErrorCode+0xc8>)
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f043 0302 	orr.w	r3, r3, #2
 8004fc2:	4a15      	ldr	r2, [pc, #84]	; (8005018 <FLASH_SetErrorCode+0xc8>)
 8004fc4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004fc6:	4b13      	ldr	r3, [pc, #76]	; (8005014 <FLASH_SetErrorCode+0xc4>)
 8004fc8:	2280      	movs	r2, #128	; 0x80
 8004fca:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004fcc:	4b11      	ldr	r3, [pc, #68]	; (8005014 <FLASH_SetErrorCode+0xc4>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d009      	beq.n	8004fec <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004fd8:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <FLASH_SetErrorCode+0xc8>)
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	4a0d      	ldr	r2, [pc, #52]	; (8005018 <FLASH_SetErrorCode+0xc8>)
 8004fe2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <FLASH_SetErrorCode+0xc4>)
 8004fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fea:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004fec:	4b09      	ldr	r3, [pc, #36]	; (8005014 <FLASH_SetErrorCode+0xc4>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d008      	beq.n	800500a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004ff8:	4b07      	ldr	r3, [pc, #28]	; (8005018 <FLASH_SetErrorCode+0xc8>)
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	f043 0320 	orr.w	r3, r3, #32
 8005000:	4a05      	ldr	r2, [pc, #20]	; (8005018 <FLASH_SetErrorCode+0xc8>)
 8005002:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005004:	4b03      	ldr	r3, [pc, #12]	; (8005014 <FLASH_SetErrorCode+0xc4>)
 8005006:	2202      	movs	r2, #2
 8005008:	60da      	str	r2, [r3, #12]
  }
}
 800500a:	bf00      	nop
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40023c00 	.word	0x40023c00
 8005018:	200008f4 	.word	0x200008f4

0800501c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d019      	beq.n	8005066 <FLASH_Erase_Sector+0x4a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d016      	beq.n	8005066 <FLASH_Erase_Sector+0x4a>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d013      	beq.n	8005066 <FLASH_Erase_Sector+0x4a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b03      	cmp	r3, #3
 8005042:	d010      	beq.n	8005066 <FLASH_Erase_Sector+0x4a>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b04      	cmp	r3, #4
 8005048:	d00d      	beq.n	8005066 <FLASH_Erase_Sector+0x4a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b05      	cmp	r3, #5
 800504e:	d00a      	beq.n	8005066 <FLASH_Erase_Sector+0x4a>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b06      	cmp	r3, #6
 8005054:	d007      	beq.n	8005066 <FLASH_Erase_Sector+0x4a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b07      	cmp	r3, #7
 800505a:	d004      	beq.n	8005066 <FLASH_Erase_Sector+0x4a>
 800505c:	f240 31d9 	movw	r1, #985	; 0x3d9
 8005060:	4827      	ldr	r0, [pc, #156]	; (8005100 <FLASH_Erase_Sector+0xe4>)
 8005062:	f7fd fa50 	bl	8002506 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8005066:	78fb      	ldrb	r3, [r7, #3]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00d      	beq.n	8005088 <FLASH_Erase_Sector+0x6c>
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d00a      	beq.n	8005088 <FLASH_Erase_Sector+0x6c>
 8005072:	78fb      	ldrb	r3, [r7, #3]
 8005074:	2b02      	cmp	r3, #2
 8005076:	d007      	beq.n	8005088 <FLASH_Erase_Sector+0x6c>
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d004      	beq.n	8005088 <FLASH_Erase_Sector+0x6c>
 800507e:	f240 31da 	movw	r1, #986	; 0x3da
 8005082:	481f      	ldr	r0, [pc, #124]	; (8005100 <FLASH_Erase_Sector+0xe4>)
 8005084:	f7fd fa3f 	bl	8002506 <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d102      	bne.n	8005094 <FLASH_Erase_Sector+0x78>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	e010      	b.n	80050b6 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d103      	bne.n	80050a2 <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800509a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	e009      	b.n	80050b6 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d103      	bne.n	80050b0 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80050a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	e002      	b.n	80050b6 <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80050b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80050b4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80050b6:	4b13      	ldr	r3, [pc, #76]	; (8005104 <FLASH_Erase_Sector+0xe8>)
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	4a12      	ldr	r2, [pc, #72]	; (8005104 <FLASH_Erase_Sector+0xe8>)
 80050bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80050c2:	4b10      	ldr	r3, [pc, #64]	; (8005104 <FLASH_Erase_Sector+0xe8>)
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	490f      	ldr	r1, [pc, #60]	; (8005104 <FLASH_Erase_Sector+0xe8>)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80050ce:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <FLASH_Erase_Sector+0xe8>)
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	4a0c      	ldr	r2, [pc, #48]	; (8005104 <FLASH_Erase_Sector+0xe8>)
 80050d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80050d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80050da:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <FLASH_Erase_Sector+0xe8>)
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	4313      	orrs	r3, r2
 80050e4:	4a07      	ldr	r2, [pc, #28]	; (8005104 <FLASH_Erase_Sector+0xe8>)
 80050e6:	f043 0302 	orr.w	r3, r3, #2
 80050ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80050ec:	4b05      	ldr	r3, [pc, #20]	; (8005104 <FLASH_Erase_Sector+0xe8>)
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	4a04      	ldr	r2, [pc, #16]	; (8005104 <FLASH_Erase_Sector+0xe8>)
 80050f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f6:	6113      	str	r3, [r2, #16]
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	0800ef38 	.word	0x0800ef38
 8005104:	40023c00 	.word	0x40023c00

08005108 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800510c:	4b20      	ldr	r3, [pc, #128]	; (8005190 <FLASH_FlushCaches+0x88>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005114:	2b00      	cmp	r3, #0
 8005116:	d017      	beq.n	8005148 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005118:	4b1d      	ldr	r3, [pc, #116]	; (8005190 <FLASH_FlushCaches+0x88>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a1c      	ldr	r2, [pc, #112]	; (8005190 <FLASH_FlushCaches+0x88>)
 800511e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005122:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005124:	4b1a      	ldr	r3, [pc, #104]	; (8005190 <FLASH_FlushCaches+0x88>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a19      	ldr	r2, [pc, #100]	; (8005190 <FLASH_FlushCaches+0x88>)
 800512a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	4b17      	ldr	r3, [pc, #92]	; (8005190 <FLASH_FlushCaches+0x88>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a16      	ldr	r2, [pc, #88]	; (8005190 <FLASH_FlushCaches+0x88>)
 8005136:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800513a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800513c:	4b14      	ldr	r3, [pc, #80]	; (8005190 <FLASH_FlushCaches+0x88>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a13      	ldr	r2, [pc, #76]	; (8005190 <FLASH_FlushCaches+0x88>)
 8005142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005146:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005148:	4b11      	ldr	r3, [pc, #68]	; (8005190 <FLASH_FlushCaches+0x88>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005150:	2b00      	cmp	r3, #0
 8005152:	d017      	beq.n	8005184 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005154:	4b0e      	ldr	r3, [pc, #56]	; (8005190 <FLASH_FlushCaches+0x88>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a0d      	ldr	r2, [pc, #52]	; (8005190 <FLASH_FlushCaches+0x88>)
 800515a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800515e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005160:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <FLASH_FlushCaches+0x88>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a0a      	ldr	r2, [pc, #40]	; (8005190 <FLASH_FlushCaches+0x88>)
 8005166:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	4b08      	ldr	r3, [pc, #32]	; (8005190 <FLASH_FlushCaches+0x88>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a07      	ldr	r2, [pc, #28]	; (8005190 <FLASH_FlushCaches+0x88>)
 8005172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005176:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005178:	4b05      	ldr	r3, [pc, #20]	; (8005190 <FLASH_FlushCaches+0x88>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a04      	ldr	r2, [pc, #16]	; (8005190 <FLASH_FlushCaches+0x88>)
 800517e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005182:	6013      	str	r3, [r2, #0]
  }
}
 8005184:	bf00      	nop
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40023c00 	.word	0x40023c00

08005194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a33      	ldr	r2, [pc, #204]	; (800527c <HAL_GPIO_Init+0xe8>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d017      	beq.n	80051e2 <HAL_GPIO_Init+0x4e>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a32      	ldr	r2, [pc, #200]	; (8005280 <HAL_GPIO_Init+0xec>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <HAL_GPIO_Init+0x4e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a31      	ldr	r2, [pc, #196]	; (8005284 <HAL_GPIO_Init+0xf0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00f      	beq.n	80051e2 <HAL_GPIO_Init+0x4e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a30      	ldr	r2, [pc, #192]	; (8005288 <HAL_GPIO_Init+0xf4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00b      	beq.n	80051e2 <HAL_GPIO_Init+0x4e>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a2f      	ldr	r2, [pc, #188]	; (800528c <HAL_GPIO_Init+0xf8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d007      	beq.n	80051e2 <HAL_GPIO_Init+0x4e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a2e      	ldr	r2, [pc, #184]	; (8005290 <HAL_GPIO_Init+0xfc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d003      	beq.n	80051e2 <HAL_GPIO_Init+0x4e>
 80051da:	21ac      	movs	r1, #172	; 0xac
 80051dc:	482d      	ldr	r0, [pc, #180]	; (8005294 <HAL_GPIO_Init+0x100>)
 80051de:	f7fd f992 	bl	8002506 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_GPIO_Init+0x64>
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	0c1b      	lsrs	r3, r3, #16
 80051f2:	041b      	lsls	r3, r3, #16
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_GPIO_Init+0x6c>
 80051f8:	21ad      	movs	r1, #173	; 0xad
 80051fa:	4826      	ldr	r0, [pc, #152]	; (8005294 <HAL_GPIO_Init+0x100>)
 80051fc:	f7fd f983 	bl	8002506 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d035      	beq.n	8005274 <HAL_GPIO_Init+0xe0>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d031      	beq.n	8005274 <HAL_GPIO_Init+0xe0>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b11      	cmp	r3, #17
 8005216:	d02d      	beq.n	8005274 <HAL_GPIO_Init+0xe0>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d029      	beq.n	8005274 <HAL_GPIO_Init+0xe0>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b12      	cmp	r3, #18
 8005226:	d025      	beq.n	8005274 <HAL_GPIO_Init+0xe0>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005230:	d020      	beq.n	8005274 <HAL_GPIO_Init+0xe0>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800523a:	d01b      	beq.n	8005274 <HAL_GPIO_Init+0xe0>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8005244:	d016      	beq.n	8005274 <HAL_GPIO_Init+0xe0>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800524e:	d011      	beq.n	8005274 <HAL_GPIO_Init+0xe0>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005258:	d00c      	beq.n	8005274 <HAL_GPIO_Init+0xe0>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8005262:	d007      	beq.n	8005274 <HAL_GPIO_Init+0xe0>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	2b03      	cmp	r3, #3
 800526a:	d003      	beq.n	8005274 <HAL_GPIO_Init+0xe0>
 800526c:	21ae      	movs	r1, #174	; 0xae
 800526e:	4809      	ldr	r0, [pc, #36]	; (8005294 <HAL_GPIO_Init+0x100>)
 8005270:	f7fd f949 	bl	8002506 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005274:	2300      	movs	r3, #0
 8005276:	61fb      	str	r3, [r7, #28]
 8005278:	e20c      	b.n	8005694 <HAL_GPIO_Init+0x500>
 800527a:	bf00      	nop
 800527c:	40020000 	.word	0x40020000
 8005280:	40020400 	.word	0x40020400
 8005284:	40020800 	.word	0x40020800
 8005288:	40020c00 	.word	0x40020c00
 800528c:	40021000 	.word	0x40021000
 8005290:	40021c00 	.word	0x40021c00
 8005294:	0800efb0 	.word	0x0800efb0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005298:	2201      	movs	r2, #1
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4013      	ands	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	f040 81ec 	bne.w	800568e <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d005      	beq.n	80052ce <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d144      	bne.n	8005358 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00f      	beq.n	80052f6 <HAL_GPIO_Init+0x162>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d00b      	beq.n	80052f6 <HAL_GPIO_Init+0x162>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d007      	beq.n	80052f6 <HAL_GPIO_Init+0x162>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d003      	beq.n	80052f6 <HAL_GPIO_Init+0x162>
 80052ee:	21c0      	movs	r1, #192	; 0xc0
 80052f0:	4884      	ldr	r0, [pc, #528]	; (8005504 <HAL_GPIO_Init+0x370>)
 80052f2:	f7fd f908 	bl	8002506 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	2203      	movs	r2, #3
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	4013      	ands	r3, r2
 800530c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4313      	orrs	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800532c:	2201      	movs	r2, #1
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	43db      	mvns	r3, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4013      	ands	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	091b      	lsrs	r3, r3, #4
 8005342:	f003 0201 	and.w	r2, r3, #1
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4313      	orrs	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f003 0303 	and.w	r3, r3, #3
 8005360:	2b03      	cmp	r3, #3
 8005362:	d027      	beq.n	80053b4 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00b      	beq.n	8005384 <HAL_GPIO_Init+0x1f0>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d007      	beq.n	8005384 <HAL_GPIO_Init+0x1f0>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d003      	beq.n	8005384 <HAL_GPIO_Init+0x1f0>
 800537c:	21d1      	movs	r1, #209	; 0xd1
 800537e:	4861      	ldr	r0, [pc, #388]	; (8005504 <HAL_GPIO_Init+0x370>)
 8005380:	f7fd f8c1 	bl	8002506 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	2203      	movs	r2, #3
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	43db      	mvns	r3, r3
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	4013      	ands	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	fa02 f303 	lsl.w	r3, r2, r3
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	f040 80a3 	bne.w	8005508 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d077      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b09      	cmp	r3, #9
 80053d0:	d073      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d06f      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d06b      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d067      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d063      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d05f      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d05b      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d057      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d053      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d04f      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b04      	cmp	r3, #4
 8005420:	d04b      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b04      	cmp	r3, #4
 8005428:	d047      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2b04      	cmp	r3, #4
 8005430:	d043      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b05      	cmp	r3, #5
 8005438:	d03f      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b05      	cmp	r3, #5
 8005440:	d03b      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b05      	cmp	r3, #5
 8005448:	d037      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b06      	cmp	r3, #6
 8005450:	d033      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b06      	cmp	r3, #6
 8005458:	d02f      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b05      	cmp	r3, #5
 8005460:	d02b      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b06      	cmp	r3, #6
 8005468:	d027      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	2b07      	cmp	r3, #7
 8005470:	d023      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b07      	cmp	r3, #7
 8005478:	d01f      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b07      	cmp	r3, #7
 8005480:	d01b      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b08      	cmp	r3, #8
 8005488:	d017      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b0a      	cmp	r3, #10
 8005490:	d013      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b09      	cmp	r3, #9
 8005498:	d00f      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b09      	cmp	r3, #9
 80054a0:	d00b      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b0c      	cmp	r3, #12
 80054a8:	d007      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b0f      	cmp	r3, #15
 80054b0:	d003      	beq.n	80054ba <HAL_GPIO_Init+0x326>
 80054b2:	21de      	movs	r1, #222	; 0xde
 80054b4:	4813      	ldr	r0, [pc, #76]	; (8005504 <HAL_GPIO_Init+0x370>)
 80054b6:	f7fd f826 	bl	8002506 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	08da      	lsrs	r2, r3, #3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3208      	adds	r2, #8
 80054c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	220f      	movs	r2, #15
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	43db      	mvns	r3, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4013      	ands	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	691a      	ldr	r2, [r3, #16]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	08da      	lsrs	r2, r3, #3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3208      	adds	r2, #8
 80054fc:	69b9      	ldr	r1, [r7, #24]
 80054fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005502:	e001      	b.n	8005508 <HAL_GPIO_Init+0x374>
 8005504:	0800efb0 	.word	0x0800efb0
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	2203      	movs	r2, #3
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	43db      	mvns	r3, r3
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	4013      	ands	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f003 0203 	and.w	r2, r3, #3
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	4313      	orrs	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80a2 	beq.w	800568e <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	4b56      	ldr	r3, [pc, #344]	; (80056a8 <HAL_GPIO_Init+0x514>)
 8005550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005552:	4a55      	ldr	r2, [pc, #340]	; (80056a8 <HAL_GPIO_Init+0x514>)
 8005554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005558:	6453      	str	r3, [r2, #68]	; 0x44
 800555a:	4b53      	ldr	r3, [pc, #332]	; (80056a8 <HAL_GPIO_Init+0x514>)
 800555c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005566:	4a51      	ldr	r2, [pc, #324]	; (80056ac <HAL_GPIO_Init+0x518>)
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	089b      	lsrs	r3, r3, #2
 800556c:	3302      	adds	r3, #2
 800556e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	220f      	movs	r2, #15
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	43db      	mvns	r3, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4013      	ands	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a48      	ldr	r2, [pc, #288]	; (80056b0 <HAL_GPIO_Init+0x51c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d019      	beq.n	80055c6 <HAL_GPIO_Init+0x432>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a47      	ldr	r2, [pc, #284]	; (80056b4 <HAL_GPIO_Init+0x520>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d013      	beq.n	80055c2 <HAL_GPIO_Init+0x42e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a46      	ldr	r2, [pc, #280]	; (80056b8 <HAL_GPIO_Init+0x524>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00d      	beq.n	80055be <HAL_GPIO_Init+0x42a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a45      	ldr	r2, [pc, #276]	; (80056bc <HAL_GPIO_Init+0x528>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d007      	beq.n	80055ba <HAL_GPIO_Init+0x426>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a44      	ldr	r2, [pc, #272]	; (80056c0 <HAL_GPIO_Init+0x52c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d101      	bne.n	80055b6 <HAL_GPIO_Init+0x422>
 80055b2:	2304      	movs	r3, #4
 80055b4:	e008      	b.n	80055c8 <HAL_GPIO_Init+0x434>
 80055b6:	2307      	movs	r3, #7
 80055b8:	e006      	b.n	80055c8 <HAL_GPIO_Init+0x434>
 80055ba:	2303      	movs	r3, #3
 80055bc:	e004      	b.n	80055c8 <HAL_GPIO_Init+0x434>
 80055be:	2302      	movs	r3, #2
 80055c0:	e002      	b.n	80055c8 <HAL_GPIO_Init+0x434>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <HAL_GPIO_Init+0x434>
 80055c6:	2300      	movs	r3, #0
 80055c8:	69fa      	ldr	r2, [r7, #28]
 80055ca:	f002 0203 	and.w	r2, r2, #3
 80055ce:	0092      	lsls	r2, r2, #2
 80055d0:	4093      	lsls	r3, r2
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055d8:	4934      	ldr	r1, [pc, #208]	; (80056ac <HAL_GPIO_Init+0x518>)
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	089b      	lsrs	r3, r3, #2
 80055de:	3302      	adds	r3, #2
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055e6:	4b37      	ldr	r3, [pc, #220]	; (80056c4 <HAL_GPIO_Init+0x530>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	43db      	mvns	r3, r3
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	4013      	ands	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800560a:	4a2e      	ldr	r2, [pc, #184]	; (80056c4 <HAL_GPIO_Init+0x530>)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005610:	4b2c      	ldr	r3, [pc, #176]	; (80056c4 <HAL_GPIO_Init+0x530>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	43db      	mvns	r3, r3
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	4013      	ands	r3, r2
 800561e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005634:	4a23      	ldr	r2, [pc, #140]	; (80056c4 <HAL_GPIO_Init+0x530>)
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800563a:	4b22      	ldr	r3, [pc, #136]	; (80056c4 <HAL_GPIO_Init+0x530>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	43db      	mvns	r3, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4013      	ands	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800565e:	4a19      	ldr	r2, [pc, #100]	; (80056c4 <HAL_GPIO_Init+0x530>)
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005664:	4b17      	ldr	r3, [pc, #92]	; (80056c4 <HAL_GPIO_Init+0x530>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	43db      	mvns	r3, r3
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4013      	ands	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005688:	4a0e      	ldr	r2, [pc, #56]	; (80056c4 <HAL_GPIO_Init+0x530>)
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	3301      	adds	r3, #1
 8005692:	61fb      	str	r3, [r7, #28]
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	2b0f      	cmp	r3, #15
 8005698:	f67f adfe 	bls.w	8005298 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 800569c:	bf00      	nop
 800569e:	bf00      	nop
 80056a0:	3720      	adds	r7, #32
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40023800 	.word	0x40023800
 80056ac:	40013800 	.word	0x40013800
 80056b0:	40020000 	.word	0x40020000
 80056b4:	40020400 	.word	0x40020400
 80056b8:	40020800 	.word	0x40020800
 80056bc:	40020c00 	.word	0x40020c00
 80056c0:	40021000 	.word	0x40021000
 80056c4:	40013c00 	.word	0x40013c00

080056c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	807b      	strh	r3, [r7, #2]
 80056d4:	4613      	mov	r3, r2
 80056d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80056d8:	887b      	ldrh	r3, [r7, #2]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d004      	beq.n	80056e8 <HAL_GPIO_WritePin+0x20>
 80056de:	887b      	ldrh	r3, [r7, #2]
 80056e0:	0c1b      	lsrs	r3, r3, #16
 80056e2:	041b      	lsls	r3, r3, #16
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <HAL_GPIO_WritePin+0x2a>
 80056e8:	f240 119d 	movw	r1, #413	; 0x19d
 80056ec:	480e      	ldr	r0, [pc, #56]	; (8005728 <HAL_GPIO_WritePin+0x60>)
 80056ee:	f7fc ff0a 	bl	8002506 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80056f2:	787b      	ldrb	r3, [r7, #1]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d007      	beq.n	8005708 <HAL_GPIO_WritePin+0x40>
 80056f8:	787b      	ldrb	r3, [r7, #1]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d004      	beq.n	8005708 <HAL_GPIO_WritePin+0x40>
 80056fe:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8005702:	4809      	ldr	r0, [pc, #36]	; (8005728 <HAL_GPIO_WritePin+0x60>)
 8005704:	f7fc feff 	bl	8002506 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005708:	787b      	ldrb	r3, [r7, #1]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800570e:	887a      	ldrh	r2, [r7, #2]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005714:	e003      	b.n	800571e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005716:	887b      	ldrh	r3, [r7, #2]
 8005718:	041a      	lsls	r2, r3, #16
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	619a      	str	r2, [r3, #24]
}
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	0800efb0 	.word	0x0800efb0

0800572c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e1f7      	b.n	8005b2e <HAL_I2C_Init+0x402>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a81      	ldr	r2, [pc, #516]	; (8005948 <HAL_I2C_Init+0x21c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00e      	beq.n	8005766 <HAL_I2C_Init+0x3a>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a7f      	ldr	r2, [pc, #508]	; (800594c <HAL_I2C_Init+0x220>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d009      	beq.n	8005766 <HAL_I2C_Init+0x3a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a7e      	ldr	r2, [pc, #504]	; (8005950 <HAL_I2C_Init+0x224>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d004      	beq.n	8005766 <HAL_I2C_Init+0x3a>
 800575c:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8005760:	487c      	ldr	r0, [pc, #496]	; (8005954 <HAL_I2C_Init+0x228>)
 8005762:	f7fc fed0 	bl	8002506 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d004      	beq.n	8005778 <HAL_I2C_Init+0x4c>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	4a79      	ldr	r2, [pc, #484]	; (8005958 <HAL_I2C_Init+0x22c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d904      	bls.n	8005782 <HAL_I2C_Init+0x56>
 8005778:	f240 11bf 	movw	r1, #447	; 0x1bf
 800577c:	4875      	ldr	r0, [pc, #468]	; (8005954 <HAL_I2C_Init+0x228>)
 800577e:	f7fc fec2 	bl	8002506 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <HAL_I2C_Init+0x72>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005792:	d004      	beq.n	800579e <HAL_I2C_Init+0x72>
 8005794:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005798:	486e      	ldr	r0, [pc, #440]	; (8005954 <HAL_I2C_Init+0x228>)
 800579a:	f7fc feb4 	bl	8002506 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80057a6:	f023 0303 	bic.w	r3, r3, #3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d004      	beq.n	80057b8 <HAL_I2C_Init+0x8c>
 80057ae:	f240 11c1 	movw	r1, #449	; 0x1c1
 80057b2:	4868      	ldr	r0, [pc, #416]	; (8005954 <HAL_I2C_Init+0x228>)
 80057b4:	f7fc fea7 	bl	8002506 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057c0:	d009      	beq.n	80057d6 <HAL_I2C_Init+0xaa>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057ca:	d004      	beq.n	80057d6 <HAL_I2C_Init+0xaa>
 80057cc:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80057d0:	4860      	ldr	r0, [pc, #384]	; (8005954 <HAL_I2C_Init+0x228>)
 80057d2:	f7fc fe98 	bl	8002506 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d008      	beq.n	80057f0 <HAL_I2C_Init+0xc4>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d004      	beq.n	80057f0 <HAL_I2C_Init+0xc4>
 80057e6:	f240 11c3 	movw	r1, #451	; 0x1c3
 80057ea:	485a      	ldr	r0, [pc, #360]	; (8005954 <HAL_I2C_Init+0x228>)
 80057ec:	f7fc fe8b 	bl	8002506 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d004      	beq.n	8005806 <HAL_I2C_Init+0xda>
 80057fc:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8005800:	4854      	ldr	r0, [pc, #336]	; (8005954 <HAL_I2C_Init+0x228>)
 8005802:	f7fc fe80 	bl	8002506 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d008      	beq.n	8005820 <HAL_I2C_Init+0xf4>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	2b40      	cmp	r3, #64	; 0x40
 8005814:	d004      	beq.n	8005820 <HAL_I2C_Init+0xf4>
 8005816:	f240 11c5 	movw	r1, #453	; 0x1c5
 800581a:	484e      	ldr	r0, [pc, #312]	; (8005954 <HAL_I2C_Init+0x228>)
 800581c:	f7fc fe73 	bl	8002506 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d008      	beq.n	800583a <HAL_I2C_Init+0x10e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	2b80      	cmp	r3, #128	; 0x80
 800582e:	d004      	beq.n	800583a <HAL_I2C_Init+0x10e>
 8005830:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8005834:	4847      	ldr	r0, [pc, #284]	; (8005954 <HAL_I2C_Init+0x228>)
 8005836:	f7fc fe66 	bl	8002506 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d12c      	bne.n	80058a0 <HAL_I2C_Init+0x174>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a42      	ldr	r2, [pc, #264]	; (800595c <HAL_I2C_Init+0x230>)
 8005852:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a42      	ldr	r2, [pc, #264]	; (8005960 <HAL_I2C_Init+0x234>)
 8005858:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a41      	ldr	r2, [pc, #260]	; (8005964 <HAL_I2C_Init+0x238>)
 800585e:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a41      	ldr	r2, [pc, #260]	; (8005968 <HAL_I2C_Init+0x23c>)
 8005864:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a40      	ldr	r2, [pc, #256]	; (800596c <HAL_I2C_Init+0x240>)
 800586a:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a40      	ldr	r2, [pc, #256]	; (8005970 <HAL_I2C_Init+0x244>)
 8005870:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a3f      	ldr	r2, [pc, #252]	; (8005974 <HAL_I2C_Init+0x248>)
 8005876:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a3f      	ldr	r2, [pc, #252]	; (8005978 <HAL_I2C_Init+0x24c>)
 800587c:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a3e      	ldr	r2, [pc, #248]	; (800597c <HAL_I2C_Init+0x250>)
 8005882:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a3e      	ldr	r2, [pc, #248]	; (8005980 <HAL_I2C_Init+0x254>)
 8005888:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800588e:	2b00      	cmp	r3, #0
 8005890:	d102      	bne.n	8005898 <HAL_I2C_Init+0x16c>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a3b      	ldr	r2, [pc, #236]	; (8005984 <HAL_I2C_Init+0x258>)
 8005896:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2224      	movs	r2, #36	; 0x24
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0201 	bic.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058d8:	f002 fc0a 	bl	80080f0 <HAL_RCC_GetPCLK1Freq>
 80058dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	4a29      	ldr	r2, [pc, #164]	; (8005988 <HAL_I2C_Init+0x25c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d807      	bhi.n	80058f8 <HAL_I2C_Init+0x1cc>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4a28      	ldr	r2, [pc, #160]	; (800598c <HAL_I2C_Init+0x260>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	bf94      	ite	ls
 80058f0:	2301      	movls	r3, #1
 80058f2:	2300      	movhi	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	e006      	b.n	8005906 <HAL_I2C_Init+0x1da>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4a25      	ldr	r2, [pc, #148]	; (8005990 <HAL_I2C_Init+0x264>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	bf94      	ite	ls
 8005900:	2301      	movls	r3, #1
 8005902:	2300      	movhi	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <HAL_I2C_Init+0x1e2>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e10f      	b.n	8005b2e <HAL_I2C_Init+0x402>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4a20      	ldr	r2, [pc, #128]	; (8005994 <HAL_I2C_Init+0x268>)
 8005912:	fba2 2303 	umull	r2, r3, r2, r3
 8005916:	0c9b      	lsrs	r3, r3, #18
 8005918:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	430a      	orrs	r2, r1
 800592c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	4a12      	ldr	r2, [pc, #72]	; (8005988 <HAL_I2C_Init+0x25c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d82a      	bhi.n	8005998 <HAL_I2C_Init+0x26c>
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	3301      	adds	r3, #1
 8005946:	e031      	b.n	80059ac <HAL_I2C_Init+0x280>
 8005948:	40005400 	.word	0x40005400
 800594c:	40005800 	.word	0x40005800
 8005950:	40005c00 	.word	0x40005c00
 8005954:	0800f024 	.word	0x0800f024
 8005958:	00061a80 	.word	0x00061a80
 800595c:	08005f71 	.word	0x08005f71
 8005960:	08005f85 	.word	0x08005f85
 8005964:	08005f99 	.word	0x08005f99
 8005968:	08005fad 	.word	0x08005fad
 800596c:	08005fdd 	.word	0x08005fdd
 8005970:	08005ff1 	.word	0x08005ff1
 8005974:	08006005 	.word	0x08006005
 8005978:	08006019 	.word	0x08006019
 800597c:	0800602d 	.word	0x0800602d
 8005980:	08005fc1 	.word	0x08005fc1
 8005984:	080021f9 	.word	0x080021f9
 8005988:	000186a0 	.word	0x000186a0
 800598c:	001e847f 	.word	0x001e847f
 8005990:	003d08ff 	.word	0x003d08ff
 8005994:	431bde83 	.word	0x431bde83
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800599e:	fb02 f303 	mul.w	r3, r2, r3
 80059a2:	4a65      	ldr	r2, [pc, #404]	; (8005b38 <HAL_I2C_Init+0x40c>)
 80059a4:	fba2 2303 	umull	r2, r3, r2, r3
 80059a8:	099b      	lsrs	r3, r3, #6
 80059aa:	3301      	adds	r3, #1
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	430b      	orrs	r3, r1
 80059b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	495d      	ldr	r1, [pc, #372]	; (8005b3c <HAL_I2C_Init+0x410>)
 80059c8:	428b      	cmp	r3, r1
 80059ca:	d819      	bhi.n	8005a00 <HAL_I2C_Init+0x2d4>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	1e59      	subs	r1, r3, #1
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80059da:	1c59      	adds	r1, r3, #1
 80059dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059e0:	400b      	ands	r3, r1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <HAL_I2C_Init+0x2d0>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	1e59      	subs	r1, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80059f4:	3301      	adds	r3, #1
 80059f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059fa:	e051      	b.n	8005aa0 <HAL_I2C_Init+0x374>
 80059fc:	2304      	movs	r3, #4
 80059fe:	e04f      	b.n	8005aa0 <HAL_I2C_Init+0x374>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d111      	bne.n	8005a2c <HAL_I2C_Init+0x300>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	1e58      	subs	r0, r3, #1
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6859      	ldr	r1, [r3, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	440b      	add	r3, r1
 8005a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bf0c      	ite	eq
 8005a24:	2301      	moveq	r3, #1
 8005a26:	2300      	movne	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	e012      	b.n	8005a52 <HAL_I2C_Init+0x326>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	1e58      	subs	r0, r3, #1
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6859      	ldr	r1, [r3, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	440b      	add	r3, r1
 8005a3a:	0099      	lsls	r1, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a42:	3301      	adds	r3, #1
 8005a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	bf0c      	ite	eq
 8005a4c:	2301      	moveq	r3, #1
 8005a4e:	2300      	movne	r3, #0
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_I2C_Init+0x32e>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e022      	b.n	8005aa0 <HAL_I2C_Init+0x374>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10e      	bne.n	8005a80 <HAL_I2C_Init+0x354>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1e58      	subs	r0, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6859      	ldr	r1, [r3, #4]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	440b      	add	r3, r1
 8005a70:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a74:	3301      	adds	r3, #1
 8005a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a7e:	e00f      	b.n	8005aa0 <HAL_I2C_Init+0x374>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	1e58      	subs	r0, r3, #1
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6859      	ldr	r1, [r3, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	0099      	lsls	r1, r3, #2
 8005a90:	440b      	add	r3, r1
 8005a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a96:	3301      	adds	r3, #1
 8005a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aa0:	6879      	ldr	r1, [r7, #4]
 8005aa2:	6809      	ldr	r1, [r1, #0]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69da      	ldr	r2, [r3, #28]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ace:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6911      	ldr	r1, [r2, #16]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	68d2      	ldr	r2, [r2, #12]
 8005ada:	4311      	orrs	r1, r2
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6812      	ldr	r2, [r2, #0]
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695a      	ldr	r2, [r3, #20]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0201 	orr.w	r2, r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	10624dd3 	.word	0x10624dd3
 8005b3c:	000186a0 	.word	0x000186a0

08005b40 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b60:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b68:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
 8005b6c:	2b10      	cmp	r3, #16
 8005b6e:	d003      	beq.n	8005b78 <HAL_I2C_EV_IRQHandler+0x38>
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
 8005b72:	2b40      	cmp	r3, #64	; 0x40
 8005b74:	f040 80c1 	bne.w	8005cfa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10d      	bne.n	8005bae <HAL_I2C_EV_IRQHandler+0x6e>
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005b98:	d003      	beq.n	8005ba2 <HAL_I2C_EV_IRQHandler+0x62>
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005ba0:	d101      	bne.n	8005ba6 <HAL_I2C_EV_IRQHandler+0x66>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <HAL_I2C_EV_IRQHandler+0x68>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	f000 8132 	beq.w	8005e12 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00c      	beq.n	8005bd2 <HAL_I2C_EV_IRQHandler+0x92>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	0a5b      	lsrs	r3, r3, #9
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d006      	beq.n	8005bd2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f001 fc95 	bl	80074f4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fd8f 	bl	80066ee <I2C_Master_SB>
 8005bd0:	e092      	b.n	8005cf8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	08db      	lsrs	r3, r3, #3
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d009      	beq.n	8005bf2 <HAL_I2C_EV_IRQHandler+0xb2>
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	0a5b      	lsrs	r3, r3, #9
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fe05 	bl	80067fa <I2C_Master_ADD10>
 8005bf0:	e082      	b.n	8005cf8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	085b      	lsrs	r3, r3, #1
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d009      	beq.n	8005c12 <HAL_I2C_EV_IRQHandler+0xd2>
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	0a5b      	lsrs	r3, r3, #9
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fe1f 	bl	800684e <I2C_Master_ADDR>
 8005c10:	e072      	b.n	8005cf8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	089b      	lsrs	r3, r3, #2
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d03b      	beq.n	8005c96 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c2c:	f000 80f3 	beq.w	8005e16 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	09db      	lsrs	r3, r3, #7
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00f      	beq.n	8005c5c <HAL_I2C_EV_IRQHandler+0x11c>
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	0a9b      	lsrs	r3, r3, #10
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <HAL_I2C_EV_IRQHandler+0x11c>
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	089b      	lsrs	r3, r3, #2
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d103      	bne.n	8005c5c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f9f3 	bl	8006040 <I2C_MasterTransmit_TXE>
 8005c5a:	e04d      	b.n	8005cf8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	089b      	lsrs	r3, r3, #2
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 80d6 	beq.w	8005e16 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	0a5b      	lsrs	r3, r3, #9
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 80cf 	beq.w	8005e16 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005c78:	7bbb      	ldrb	r3, [r7, #14]
 8005c7a:	2b21      	cmp	r3, #33	; 0x21
 8005c7c:	d103      	bne.n	8005c86 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fa7d 	bl	800617e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c84:	e0c7      	b.n	8005e16 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	2b40      	cmp	r3, #64	; 0x40
 8005c8a:	f040 80c4 	bne.w	8005e16 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 faee 	bl	8006270 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c94:	e0bf      	b.n	8005e16 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca4:	f000 80b7 	beq.w	8005e16 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	099b      	lsrs	r3, r3, #6
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00f      	beq.n	8005cd4 <HAL_I2C_EV_IRQHandler+0x194>
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	0a9b      	lsrs	r3, r3, #10
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d009      	beq.n	8005cd4 <HAL_I2C_EV_IRQHandler+0x194>
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	089b      	lsrs	r3, r3, #2
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d103      	bne.n	8005cd4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fb64 	bl	800639a <I2C_MasterReceive_RXNE>
 8005cd2:	e011      	b.n	8005cf8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	089b      	lsrs	r3, r3, #2
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 809a 	beq.w	8005e16 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	0a5b      	lsrs	r3, r3, #9
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 8093 	beq.w	8005e16 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fc10 	bl	8006516 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cf6:	e08e      	b.n	8005e16 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005cf8:	e08d      	b.n	8005e16 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d004      	beq.n	8005d0c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	61fb      	str	r3, [r7, #28]
 8005d0a:	e007      	b.n	8005d1c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	085b      	lsrs	r3, r3, #1
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d012      	beq.n	8005d4e <HAL_I2C_EV_IRQHandler+0x20e>
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	0a5b      	lsrs	r3, r3, #9
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00c      	beq.n	8005d4e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005d44:	69b9      	ldr	r1, [r7, #24]
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 ffd2 	bl	8006cf0 <I2C_Slave_ADDR>
 8005d4c:	e066      	b.n	8005e1c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d009      	beq.n	8005d6e <HAL_I2C_EV_IRQHandler+0x22e>
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	0a5b      	lsrs	r3, r3, #9
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f001 f80c 	bl	8006d84 <I2C_Slave_STOPF>
 8005d6c:	e056      	b.n	8005e1c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005d6e:	7bbb      	ldrb	r3, [r7, #14]
 8005d70:	2b21      	cmp	r3, #33	; 0x21
 8005d72:	d002      	beq.n	8005d7a <HAL_I2C_EV_IRQHandler+0x23a>
 8005d74:	7bbb      	ldrb	r3, [r7, #14]
 8005d76:	2b29      	cmp	r3, #41	; 0x29
 8005d78:	d125      	bne.n	8005dc6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	09db      	lsrs	r3, r3, #7
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00f      	beq.n	8005da6 <HAL_I2C_EV_IRQHandler+0x266>
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	0a9b      	lsrs	r3, r3, #10
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <HAL_I2C_EV_IRQHandler+0x266>
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	089b      	lsrs	r3, r3, #2
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d103      	bne.n	8005da6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fee6 	bl	8006b70 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005da4:	e039      	b.n	8005e1a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	089b      	lsrs	r3, r3, #2
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d033      	beq.n	8005e1a <HAL_I2C_EV_IRQHandler+0x2da>
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	0a5b      	lsrs	r3, r3, #9
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d02d      	beq.n	8005e1a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 ff14 	bl	8006bec <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005dc4:	e029      	b.n	8005e1a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	099b      	lsrs	r3, r3, #6
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00f      	beq.n	8005df2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	0a9b      	lsrs	r3, r3, #10
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d009      	beq.n	8005df2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	089b      	lsrs	r3, r3, #2
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d103      	bne.n	8005df2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 ff1f 	bl	8006c2e <I2C_SlaveReceive_RXNE>
 8005df0:	e014      	b.n	8005e1c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	089b      	lsrs	r3, r3, #2
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00e      	beq.n	8005e1c <HAL_I2C_EV_IRQHandler+0x2dc>
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	0a5b      	lsrs	r3, r3, #9
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d008      	beq.n	8005e1c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 ff4e 	bl	8006cac <I2C_SlaveReceive_BTF>
 8005e10:	e004      	b.n	8005e1c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005e12:	bf00      	nop
 8005e14:	e002      	b.n	8005e1c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e16:	bf00      	nop
 8005e18:	e000      	b.n	8005e1c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e1a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b08a      	sub	sp, #40	; 0x28
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e44:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	0a1b      	lsrs	r3, r3, #8
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00e      	beq.n	8005e70 <HAL_I2C_ER_IRQHandler+0x4e>
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	0a1b      	lsrs	r3, r3, #8
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d008      	beq.n	8005e70 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	f043 0301 	orr.w	r3, r3, #1
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e6e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	0a5b      	lsrs	r3, r3, #9
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00e      	beq.n	8005e9a <HAL_I2C_ER_IRQHandler+0x78>
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	0a1b      	lsrs	r3, r3, #8
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d008      	beq.n	8005e9a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	f043 0302 	orr.w	r3, r3, #2
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005e98:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	0a9b      	lsrs	r3, r3, #10
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d03f      	beq.n	8005f26 <HAL_I2C_ER_IRQHandler+0x104>
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	0a1b      	lsrs	r3, r3, #8
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d039      	beq.n	8005f26 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005eb2:	7efb      	ldrb	r3, [r7, #27]
 8005eb4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005ecc:	7ebb      	ldrb	r3, [r7, #26]
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d112      	bne.n	8005ef8 <HAL_I2C_ER_IRQHandler+0xd6>
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10f      	bne.n	8005ef8 <HAL_I2C_ER_IRQHandler+0xd6>
 8005ed8:	7cfb      	ldrb	r3, [r7, #19]
 8005eda:	2b21      	cmp	r3, #33	; 0x21
 8005edc:	d008      	beq.n	8005ef0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005ede:	7cfb      	ldrb	r3, [r7, #19]
 8005ee0:	2b29      	cmp	r3, #41	; 0x29
 8005ee2:	d005      	beq.n	8005ef0 <HAL_I2C_ER_IRQHandler+0xce>
 8005ee4:	7cfb      	ldrb	r3, [r7, #19]
 8005ee6:	2b28      	cmp	r3, #40	; 0x28
 8005ee8:	d106      	bne.n	8005ef8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b21      	cmp	r3, #33	; 0x21
 8005eee:	d103      	bne.n	8005ef8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f001 f87b 	bl	8006fec <I2C_Slave_AF>
 8005ef6:	e016      	b.n	8005f26 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f00:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	f043 0304 	orr.w	r3, r3, #4
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005f0a:	7efb      	ldrb	r3, [r7, #27]
 8005f0c:	2b10      	cmp	r3, #16
 8005f0e:	d002      	beq.n	8005f16 <HAL_I2C_ER_IRQHandler+0xf4>
 8005f10:	7efb      	ldrb	r3, [r7, #27]
 8005f12:	2b40      	cmp	r3, #64	; 0x40
 8005f14:	d107      	bne.n	8005f26 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f24:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	0adb      	lsrs	r3, r3, #11
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00e      	beq.n	8005f50 <HAL_I2C_ER_IRQHandler+0x12e>
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	0a1b      	lsrs	r3, r3, #8
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d008      	beq.n	8005f50 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	f043 0308 	orr.w	r3, r3, #8
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005f4e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d008      	beq.n	8005f68 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f001 f8b4 	bl	80070d0 <I2C_ITError>
  }
}
 8005f68:	bf00      	nop
 8005f6a:	3728      	adds	r7, #40	; 0x28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	70fb      	strb	r3, [r7, #3]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800604e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006056:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006062:	2b00      	cmp	r3, #0
 8006064:	d153      	bne.n	800610e <I2C_MasterTransmit_TXE+0xce>
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	2b21      	cmp	r3, #33	; 0x21
 800606a:	d150      	bne.n	800610e <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b08      	cmp	r3, #8
 8006070:	d01e      	beq.n	80060b0 <I2C_MasterTransmit_TXE+0x70>
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b20      	cmp	r3, #32
 8006076:	d01b      	beq.n	80060b0 <I2C_MasterTransmit_TXE+0x70>
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800607e:	d017      	beq.n	80060b0 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800608e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2211      	movs	r2, #17
 8006094:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80060ae:	e062      	b.n	8006176 <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060be:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ce:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2220      	movs	r2, #32
 80060da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b40      	cmp	r3, #64	; 0x40
 80060e8:	d108      	bne.n	80060fc <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80060fa:	e03c      	b.n	8006176 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800610c:	e033      	b.n	8006176 <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	2b21      	cmp	r3, #33	; 0x21
 8006112:	d005      	beq.n	8006120 <I2C_MasterTransmit_TXE+0xe0>
 8006114:	7bbb      	ldrb	r3, [r7, #14]
 8006116:	2b40      	cmp	r3, #64	; 0x40
 8006118:	d12d      	bne.n	8006176 <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	2b22      	cmp	r3, #34	; 0x22
 800611e:	d12a      	bne.n	8006176 <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d108      	bne.n	800613c <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006138:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800613a:	e01c      	b.n	8006176 <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b40      	cmp	r3, #64	; 0x40
 8006146:	d103      	bne.n	8006150 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f891 	bl	8006270 <I2C_MemoryTransmit_TXE_BTF>
}
 800614e:	e012      	b.n	8006176 <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	781a      	ldrb	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006174:	e7ff      	b.n	8006176 <I2C_MasterTransmit_TXE+0x136>
 8006176:	bf00      	nop
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b21      	cmp	r3, #33	; 0x21
 8006196:	d167      	bne.n	8006268 <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d012      	beq.n	80061c8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	781a      	ldrb	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061bc:	b29b      	uxth	r3, r3
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80061c6:	e04f      	b.n	8006268 <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	d01e      	beq.n	800620c <I2C_MasterTransmit_BTF+0x8e>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	d01b      	beq.n	800620c <I2C_MasterTransmit_BTF+0x8e>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061da:	d017      	beq.n	800620c <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061ea:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2211      	movs	r2, #17
 80061f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	4798      	blx	r3
}
 800620a:	e02d      	b.n	8006268 <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800621a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800622a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b40      	cmp	r3, #64	; 0x40
 8006244:	d108      	bne.n	8006258 <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	4798      	blx	r3
}
 8006256:	e007      	b.n	8006268 <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	4798      	blx	r3
}
 8006268:	bf00      	nop
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006284:	2b00      	cmp	r3, #0
 8006286:	d11d      	bne.n	80062c4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800628c:	2b01      	cmp	r3, #1
 800628e:	d10b      	bne.n	80062a8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006294:	b2da      	uxtb	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a0:	1c9a      	adds	r2, r3, #2
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80062a6:	e074      	b.n	8006392 <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	121b      	asrs	r3, r3, #8
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062bc:	1c5a      	adds	r2, r3, #1
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80062c2:	e066      	b.n	8006392 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d10b      	bne.n	80062e4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80062e2:	e056      	b.n	8006392 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d152      	bne.n	8006392 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	2b22      	cmp	r3, #34	; 0x22
 80062f0:	d10d      	bne.n	800630e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006300:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006306:	1c5a      	adds	r2, r3, #1
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800630c:	e041      	b.n	8006392 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006312:	b29b      	uxth	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d015      	beq.n	8006344 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	2b21      	cmp	r3, #33	; 0x21
 800631c:	d112      	bne.n	8006344 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	781a      	ldrb	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006342:	e026      	b.n	8006392 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006348:	b29b      	uxth	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d121      	bne.n	8006392 <I2C_MemoryTransmit_TXE_BTF+0x122>
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	2b21      	cmp	r3, #33	; 0x21
 8006352:	d11e      	bne.n	8006392 <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006362:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006372:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2220      	movs	r2, #32
 800637e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	4798      	blx	r3
}
 8006392:	bf00      	nop
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b22      	cmp	r3, #34	; 0x22
 80063ac:	f040 80af 	bne.w	800650e <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d921      	bls.n	8006402 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063da:	b29b      	uxth	r3, r3
 80063dc:	3b01      	subs	r3, #1
 80063de:	b29a      	uxth	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	f040 808f 	bne.w	800650e <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063fe:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006400:	e085      	b.n	800650e <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	2b02      	cmp	r3, #2
 8006408:	d078      	beq.n	80064fc <I2C_MasterReceive_RXNE+0x162>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d002      	beq.n	8006416 <I2C_MasterReceive_RXNE+0x7c>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d172      	bne.n	80064fc <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f001 f83a 	bl	8007490 <I2C_WaitOnSTOPRequestThroughIT>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d144      	bne.n	80064ac <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006430:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006440:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2220      	movs	r2, #32
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b40      	cmp	r3, #64	; 0x40
 800647a:	d10b      	bne.n	8006494 <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006492:	e03c      	b.n	800650e <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2212      	movs	r2, #18
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80064aa:	e030      	b.n	800650e <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80064fa:	e008      	b.n	800650e <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800650a:	605a      	str	r2, [r3, #4]
}
 800650c:	e7ff      	b.n	800650e <I2C_MasterReceive_RXNE+0x174>
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006522:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b04      	cmp	r3, #4
 800652c:	d11b      	bne.n	8006566 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691a      	ldr	r2, [r3, #16]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655a:	b29b      	uxth	r3, r3
 800655c:	3b01      	subs	r3, #1
 800655e:	b29a      	uxth	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006564:	e0bf      	b.n	80066e6 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656a:	b29b      	uxth	r3, r3
 800656c:	2b03      	cmp	r3, #3
 800656e:	d129      	bne.n	80065c4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800657e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b04      	cmp	r3, #4
 8006584:	d00a      	beq.n	800659c <I2C_MasterReceive_BTF+0x86>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b02      	cmp	r3, #2
 800658a:	d007      	beq.n	800659c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800659a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691a      	ldr	r2, [r3, #16]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	3b01      	subs	r3, #1
 80065bc:	b29a      	uxth	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80065c2:	e090      	b.n	80066e6 <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d178      	bne.n	80066c0 <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d002      	beq.n	80065da <I2C_MasterReceive_BTF+0xc4>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b10      	cmp	r3, #16
 80065d8:	d108      	bne.n	80065ec <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	e019      	b.n	8006620 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d002      	beq.n	80065f8 <I2C_MasterReceive_BTF+0xe2>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d108      	bne.n	800660a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	e00a      	b.n	8006620 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b10      	cmp	r3, #16
 800660e:	d007      	beq.n	8006620 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800661e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691a      	ldr	r2, [r3, #16]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006662:	b29b      	uxth	r3, r3
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800667a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	d10b      	bne.n	80066a8 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	4798      	blx	r3
}
 80066a6:	e01e      	b.n	80066e6 <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2212      	movs	r2, #18
 80066b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	4798      	blx	r3
}
 80066be:	e012      	b.n	80066e6 <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	691a      	ldr	r2, [r3, #16]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066dc:	b29b      	uxth	r3, r3
 80066de:	3b01      	subs	r3, #1
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80066e6:	bf00      	nop
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b40      	cmp	r3, #64	; 0x40
 8006700:	d117      	bne.n	8006732 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670e:	b2db      	uxtb	r3, r3
 8006710:	461a      	mov	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800671a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800671c:	e067      	b.n	80067ee <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006722:	b2db      	uxtb	r3, r3
 8006724:	f043 0301 	orr.w	r3, r3, #1
 8006728:	b2da      	uxtb	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	611a      	str	r2, [r3, #16]
}
 8006730:	e05d      	b.n	80067ee <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800673a:	d133      	bne.n	80067a4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b21      	cmp	r3, #33	; 0x21
 8006746:	d109      	bne.n	800675c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674c:	b2db      	uxtb	r3, r3
 800674e:	461a      	mov	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006758:	611a      	str	r2, [r3, #16]
 800675a:	e008      	b.n	800676e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006760:	b2db      	uxtb	r3, r3
 8006762:	f043 0301 	orr.w	r3, r3, #1
 8006766:	b2da      	uxtb	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006772:	2b00      	cmp	r3, #0
 8006774:	d004      	beq.n	8006780 <I2C_Master_SB+0x92>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677c:	2b00      	cmp	r3, #0
 800677e:	d108      	bne.n	8006792 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006784:	2b00      	cmp	r3, #0
 8006786:	d032      	beq.n	80067ee <I2C_Master_SB+0x100>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678e:	2b00      	cmp	r3, #0
 8006790:	d02d      	beq.n	80067ee <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067a0:	605a      	str	r2, [r3, #4]
}
 80067a2:	e024      	b.n	80067ee <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10e      	bne.n	80067ca <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	11db      	asrs	r3, r3, #7
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	f003 0306 	and.w	r3, r3, #6
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	f063 030f 	orn	r3, r3, #15
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	611a      	str	r2, [r3, #16]
}
 80067c8:	e011      	b.n	80067ee <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d10d      	bne.n	80067ee <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	11db      	asrs	r3, r3, #7
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	f003 0306 	and.w	r3, r3, #6
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	f063 030e 	orn	r3, r3, #14
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	611a      	str	r2, [r3, #16]
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006806:	b2da      	uxtb	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006812:	2b00      	cmp	r3, #0
 8006814:	d004      	beq.n	8006820 <I2C_Master_ADD10+0x26>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681c:	2b00      	cmp	r3, #0
 800681e:	d108      	bne.n	8006832 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00c      	beq.n	8006842 <I2C_Master_ADD10+0x48>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682e:	2b00      	cmp	r3, #0
 8006830:	d007      	beq.n	8006842 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006840:	605a      	str	r2, [r3, #4]
  }
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800684e:	b480      	push	{r7}
 8006850:	b091      	sub	sp, #68	; 0x44
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800685c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b22      	cmp	r3, #34	; 0x22
 8006876:	f040 8169 	bne.w	8006b4c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10f      	bne.n	80068a2 <I2C_Master_ADDR+0x54>
 8006882:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	d10b      	bne.n	80068a2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800688a:	2300      	movs	r3, #0
 800688c:	633b      	str	r3, [r7, #48]	; 0x30
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	633b      	str	r3, [r7, #48]	; 0x30
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	633b      	str	r3, [r7, #48]	; 0x30
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	e160      	b.n	8006b64 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d11d      	bne.n	80068e6 <I2C_Master_ADDR+0x98>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068b2:	d118      	bne.n	80068e6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068b4:	2300      	movs	r3, #0
 80068b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068d8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	651a      	str	r2, [r3, #80]	; 0x50
 80068e4:	e13e      	b.n	8006b64 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d113      	bne.n	8006918 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068f0:	2300      	movs	r3, #0
 80068f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	62bb      	str	r3, [r7, #40]	; 0x28
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	e115      	b.n	8006b44 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b01      	cmp	r3, #1
 8006920:	f040 808a 	bne.w	8006a38 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006926:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800692a:	d137      	bne.n	800699c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800693a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800694a:	d113      	bne.n	8006974 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800695a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800695c:	2300      	movs	r3, #0
 800695e:	627b      	str	r3, [r7, #36]	; 0x24
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	e0e7      	b.n	8006b44 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006974:	2300      	movs	r3, #0
 8006976:	623b      	str	r3, [r7, #32]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	623b      	str	r3, [r7, #32]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	623b      	str	r3, [r7, #32]
 8006988:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	e0d3      	b.n	8006b44 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699e:	2b08      	cmp	r3, #8
 80069a0:	d02e      	beq.n	8006a00 <I2C_Master_ADDR+0x1b2>
 80069a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a4:	2b20      	cmp	r3, #32
 80069a6:	d02b      	beq.n	8006a00 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80069a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069aa:	2b12      	cmp	r3, #18
 80069ac:	d102      	bne.n	80069b4 <I2C_Master_ADDR+0x166>
 80069ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d125      	bne.n	8006a00 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d00e      	beq.n	80069d8 <I2C_Master_ADDR+0x18a>
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d00b      	beq.n	80069d8 <I2C_Master_ADDR+0x18a>
 80069c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c2:	2b10      	cmp	r3, #16
 80069c4:	d008      	beq.n	80069d8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	e007      	b.n	80069e8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069e6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069e8:	2300      	movs	r3, #0
 80069ea:	61fb      	str	r3, [r7, #28]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	61fb      	str	r3, [r7, #28]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	61fb      	str	r3, [r7, #28]
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	e0a1      	b.n	8006b44 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a0e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a10:	2300      	movs	r3, #0
 8006a12:	61bb      	str	r3, [r7, #24]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	61bb      	str	r3, [r7, #24]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	61bb      	str	r3, [r7, #24]
 8006a24:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	e085      	b.n	8006b44 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d14d      	bne.n	8006ade <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d016      	beq.n	8006a76 <I2C_Master_ADDR+0x228>
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d013      	beq.n	8006a76 <I2C_Master_ADDR+0x228>
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a50:	2b10      	cmp	r3, #16
 8006a52:	d010      	beq.n	8006a76 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a62:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e007      	b.n	8006a86 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a84:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a94:	d117      	bne.n	8006ac6 <I2C_Master_ADDR+0x278>
 8006a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a9c:	d00b      	beq.n	8006ab6 <I2C_Master_ADDR+0x268>
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d008      	beq.n	8006ab6 <I2C_Master_ADDR+0x268>
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	2b08      	cmp	r3, #8
 8006aa8:	d005      	beq.n	8006ab6 <I2C_Master_ADDR+0x268>
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aac:	2b10      	cmp	r3, #16
 8006aae:	d002      	beq.n	8006ab6 <I2C_Master_ADDR+0x268>
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	2b20      	cmp	r3, #32
 8006ab4:	d107      	bne.n	8006ac6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ac4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	e032      	b.n	8006b44 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006aec:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006afc:	d117      	bne.n	8006b2e <I2C_Master_ADDR+0x2e0>
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b04:	d00b      	beq.n	8006b1e <I2C_Master_ADDR+0x2d0>
 8006b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d008      	beq.n	8006b1e <I2C_Master_ADDR+0x2d0>
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0e:	2b08      	cmp	r3, #8
 8006b10:	d005      	beq.n	8006b1e <I2C_Master_ADDR+0x2d0>
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b14:	2b10      	cmp	r3, #16
 8006b16:	d002      	beq.n	8006b1e <I2C_Master_ADDR+0x2d0>
 8006b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1a:	2b20      	cmp	r3, #32
 8006b1c:	d107      	bne.n	8006b2e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b2c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b2e:	2300      	movs	r3, #0
 8006b30:	613b      	str	r3, [r7, #16]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006b4a:	e00b      	b.n	8006b64 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	60fb      	str	r3, [r7, #12]
 8006b60:	68fb      	ldr	r3, [r7, #12]
}
 8006b62:	e7ff      	b.n	8006b64 <I2C_Master_ADDR+0x316>
 8006b64:	bf00      	nop
 8006b66:	3744      	adds	r7, #68	; 0x44
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b7e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d02c      	beq.n	8006be4 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	781a      	ldrb	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d115      	bne.n	8006be4 <I2C_SlaveTransmit_TXE+0x74>
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
 8006bba:	2b29      	cmp	r3, #41	; 0x29
 8006bbc:	d112      	bne.n	8006be4 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bcc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2221      	movs	r2, #33	; 0x21
 8006bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2228      	movs	r2, #40	; 0x28
 8006bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006be4:	bf00      	nop
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d011      	beq.n	8006c22 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	781a      	ldrb	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	1c5a      	adds	r2, r3, #1
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006c22:	bf00      	nop
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d02d      	beq.n	8006ca4 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691a      	ldr	r2, [r3, #16]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	3b01      	subs	r3, #1
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d115      	bne.n	8006ca4 <I2C_SlaveReceive_RXNE+0x76>
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c7c:	d112      	bne.n	8006ca4 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c8c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2222      	movs	r2, #34	; 0x22
 8006c92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2228      	movs	r2, #40	; 0x28
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006ca4:	bf00      	nop
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d012      	beq.n	8006ce4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	691a      	ldr	r2, [r3, #16]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d0a:	2b28      	cmp	r3, #40	; 0x28
 8006d0c:	d127      	bne.n	8006d5e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d1c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	089b      	lsrs	r3, r3, #2
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	09db      	lsrs	r3, r3, #7
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d103      	bne.n	8006d42 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	81bb      	strh	r3, [r7, #12]
 8006d40:	e002      	b.n	8006d48 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d54:	89ba      	ldrh	r2, [r7, #12]
 8006d56:	7bf9      	ldrb	r1, [r7, #15]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006d5c:	e00e      	b.n	8006d7c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60bb      	str	r3, [r7, #8]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	60bb      	str	r3, [r7, #8]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	60bb      	str	r3, [r7, #8]
 8006d72:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006d7c:	bf00      	nop
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d92:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006da2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006da4:	2300      	movs	r3, #0
 8006da6:	60bb      	str	r3, [r7, #8]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	60bb      	str	r3, [r7, #8]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0201 	orr.w	r2, r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de0:	d172      	bne.n	8006ec8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006de2:	7bfb      	ldrb	r3, [r7, #15]
 8006de4:	2b22      	cmp	r3, #34	; 0x22
 8006de6:	d002      	beq.n	8006dee <I2C_Slave_STOPF+0x6a>
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	2b2a      	cmp	r3, #42	; 0x2a
 8006dec:	d135      	bne.n	8006e5a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d005      	beq.n	8006e12 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	f043 0204 	orr.w	r2, r3, #4
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fd fef0 	bl	8004c0c <HAL_DMA_GetState>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d049      	beq.n	8006ec6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e36:	4a6b      	ldr	r2, [pc, #428]	; (8006fe4 <I2C_Slave_STOPF+0x260>)
 8006e38:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7fd fd38 	bl	80048b4 <HAL_DMA_Abort_IT>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d03d      	beq.n	8006ec6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e54:	4610      	mov	r0, r2
 8006e56:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e58:	e035      	b.n	8006ec6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d005      	beq.n	8006e7e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	f043 0204 	orr.w	r2, r3, #4
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fd feba 	bl	8004c0c <HAL_DMA_GetState>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d014      	beq.n	8006ec8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea2:	4a50      	ldr	r2, [pc, #320]	; (8006fe4 <I2C_Slave_STOPF+0x260>)
 8006ea4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fd fd02 	bl	80048b4 <HAL_DMA_Abort_IT>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d008      	beq.n	8006ec8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4798      	blx	r3
 8006ec4:	e000      	b.n	8006ec8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ec6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d03e      	beq.n	8006f50 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d112      	bne.n	8006f06 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	691a      	ldr	r2, [r3, #16]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	3b01      	subs	r3, #1
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f10:	2b40      	cmp	r3, #64	; 0x40
 8006f12:	d112      	bne.n	8006f3a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	691a      	ldr	r2, [r3, #16]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	3b01      	subs	r3, #1
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d005      	beq.n	8006f50 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f48:	f043 0204 	orr.w	r2, r3, #4
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f8b9 	bl	80070d0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006f5e:	e03c      	b.n	8006fda <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
 8006f62:	2b2a      	cmp	r3, #42	; 0x2a
 8006f64:	d10a      	bne.n	8006f7c <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2228      	movs	r2, #40	; 0x28
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b28      	cmp	r3, #40	; 0x28
 8006f86:	d112      	bne.n	8006fae <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a17      	ldr	r2, [pc, #92]	; (8006fe8 <I2C_Slave_STOPF+0x264>)
 8006f8c:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2220      	movs	r2, #32
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	4798      	blx	r3
}
 8006fac:	e015      	b.n	8006fda <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb2:	2b22      	cmp	r3, #34	; 0x22
 8006fb4:	d002      	beq.n	8006fbc <I2C_Slave_STOPF+0x238>
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	2b22      	cmp	r3, #34	; 0x22
 8006fba:	d10e      	bne.n	8006fda <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	4798      	blx	r3
}
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	0800733d 	.word	0x0800733d
 8006fe8:	ffff0000 	.word	0xffff0000

08006fec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b08      	cmp	r3, #8
 8007006:	d002      	beq.n	800700e <I2C_Slave_AF+0x22>
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b20      	cmp	r3, #32
 800700c:	d12a      	bne.n	8007064 <I2C_Slave_AF+0x78>
 800700e:	7bfb      	ldrb	r3, [r7, #15]
 8007010:	2b28      	cmp	r3, #40	; 0x28
 8007012:	d127      	bne.n	8007064 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a2d      	ldr	r2, [pc, #180]	; (80070cc <I2C_Slave_AF+0xe0>)
 8007018:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007028:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007032:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007042:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2220      	movs	r2, #32
 800704e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007062:	e02f      	b.n	80070c4 <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	2b21      	cmp	r3, #33	; 0x21
 8007068:	d127      	bne.n	80070ba <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a17      	ldr	r2, [pc, #92]	; (80070cc <I2C_Slave_AF+0xe0>)
 800706e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2221      	movs	r2, #33	; 0x21
 8007074:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2220      	movs	r2, #32
 800707a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007094:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800709e:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070ae:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	4798      	blx	r3
}
 80070b8:	e004      	b.n	80070c4 <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070c2:	615a      	str	r2, [r3, #20]
}
 80070c4:	bf00      	nop
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	ffff0000 	.word	0xffff0000

080070d0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80070e8:	7bbb      	ldrb	r3, [r7, #14]
 80070ea:	2b10      	cmp	r3, #16
 80070ec:	d002      	beq.n	80070f4 <I2C_ITError+0x24>
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
 80070f0:	2b40      	cmp	r3, #64	; 0x40
 80070f2:	d10a      	bne.n	800710a <I2C_ITError+0x3a>
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	2b22      	cmp	r3, #34	; 0x22
 80070f8:	d107      	bne.n	800710a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007108:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007110:	2b28      	cmp	r3, #40	; 0x28
 8007112:	d107      	bne.n	8007124 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2228      	movs	r2, #40	; 0x28
 800711e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007122:	e015      	b.n	8007150 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800712e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007132:	d00a      	beq.n	800714a <I2C_ITError+0x7a>
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	2b60      	cmp	r3, #96	; 0x60
 8007138:	d007      	beq.n	800714a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2220      	movs	r2, #32
 800713e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800715a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800715e:	d162      	bne.n	8007226 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800716e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b01      	cmp	r3, #1
 800717c:	d020      	beq.n	80071c0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007182:	4a6c      	ldr	r2, [pc, #432]	; (8007334 <I2C_ITError+0x264>)
 8007184:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718a:	4618      	mov	r0, r3
 800718c:	f7fd fb92 	bl	80048b4 <HAL_DMA_Abort_IT>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 808b 	beq.w	80072ae <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0201 	bic.w	r2, r2, #1
 80071a6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071ba:	4610      	mov	r0, r2
 80071bc:	4798      	blx	r3
 80071be:	e076      	b.n	80072ae <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c4:	4a5b      	ldr	r2, [pc, #364]	; (8007334 <I2C_ITError+0x264>)
 80071c6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fd fb71 	bl	80048b4 <HAL_DMA_Abort_IT>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d06a      	beq.n	80072ae <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e2:	2b40      	cmp	r3, #64	; 0x40
 80071e4:	d10b      	bne.n	80071fe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	691a      	ldr	r2, [r3, #16]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	b2d2      	uxtb	r2, r2
 80071f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0201 	bic.w	r2, r2, #1
 800720c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2220      	movs	r2, #32
 8007212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007220:	4610      	mov	r0, r2
 8007222:	4798      	blx	r3
 8007224:	e043      	b.n	80072ae <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b60      	cmp	r3, #96	; 0x60
 8007230:	d126      	bne.n	8007280 <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2220      	movs	r2, #32
 8007236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724a:	2b40      	cmp	r3, #64	; 0x40
 800724c:	d10b      	bne.n	8007266 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	691a      	ldr	r2, [r3, #16]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	b2d2      	uxtb	r2, r2
 800725a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0201 	bic.w	r2, r2, #1
 8007274:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	4798      	blx	r3
 800727e:	e016      	b.n	80072ae <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728a:	2b40      	cmp	r3, #64	; 0x40
 800728c:	d10b      	bne.n	80072a6 <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	691a      	ldr	r2, [r3, #16]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	b2d2      	uxtb	r2, r2
 800729a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10e      	bne.n	80072dc <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d109      	bne.n	80072dc <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d104      	bne.n	80072dc <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d007      	beq.n	80072ec <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072ea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b04      	cmp	r3, #4
 80072fe:	d114      	bne.n	800732a <I2C_ITError+0x25a>
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	2b28      	cmp	r3, #40	; 0x28
 8007304:	d111      	bne.n	800732a <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a0b      	ldr	r2, [pc, #44]	; (8007338 <I2C_ITError+0x268>)
 800730a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2220      	movs	r2, #32
 8007316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800732a:	bf00      	nop
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	0800733d 	.word	0x0800733d
 8007338:	ffff0000 	.word	0xffff0000

0800733c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007354:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007356:	4b4c      	ldr	r3, [pc, #304]	; (8007488 <I2C_DMAAbort+0x14c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	08db      	lsrs	r3, r3, #3
 800735c:	4a4b      	ldr	r2, [pc, #300]	; (800748c <I2C_DMAAbort+0x150>)
 800735e:	fba2 2303 	umull	r2, r3, r2, r3
 8007362:	0a1a      	lsrs	r2, r3, #8
 8007364:	4613      	mov	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	00da      	lsls	r2, r3, #3
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d106      	bne.n	8007384 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	f043 0220 	orr.w	r2, r3, #32
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007382:	e00a      	b.n	800739a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3b01      	subs	r3, #1
 8007388:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007398:	d0ea      	beq.n	8007370 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a6:	2200      	movs	r2, #0
 80073a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b6:	2200      	movs	r2, #0
 80073b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073c8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2200      	movs	r2, #0
 80073ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073dc:	2200      	movs	r2, #0
 80073de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d003      	beq.n	80073f0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	2200      	movs	r2, #0
 80073ee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0201 	bic.w	r2, r2, #1
 80073fe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b60      	cmp	r3, #96	; 0x60
 800740a:	d10f      	bne.n	800742c <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2220      	movs	r2, #32
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2200      	movs	r2, #0
 8007420:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007426:	6978      	ldr	r0, [r7, #20]
 8007428:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800742a:	e028      	b.n	800747e <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800742c:	7cfb      	ldrb	r3, [r7, #19]
 800742e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007432:	2b28      	cmp	r3, #40	; 0x28
 8007434:	d117      	bne.n	8007466 <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f042 0201 	orr.w	r2, r2, #1
 8007444:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007454:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2200      	movs	r2, #0
 800745a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	2228      	movs	r2, #40	; 0x28
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007464:	e007      	b.n	8007476 <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2220      	movs	r2, #32
 800746a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747a:	6978      	ldr	r0, [r7, #20]
 800747c:	4798      	blx	r3
}
 800747e:	bf00      	nop
 8007480:	3718      	adds	r7, #24
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	20000000 	.word	0x20000000
 800748c:	14f8b589 	.word	0x14f8b589

08007490 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800749c:	4b13      	ldr	r3, [pc, #76]	; (80074ec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	08db      	lsrs	r3, r3, #3
 80074a2:	4a13      	ldr	r2, [pc, #76]	; (80074f0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80074a4:	fba2 2303 	umull	r2, r3, r2, r3
 80074a8:	0a1a      	lsrs	r2, r3, #8
 80074aa:	4613      	mov	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d107      	bne.n	80074ce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	f043 0220 	orr.w	r2, r3, #32
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e008      	b.n	80074e0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074dc:	d0e9      	beq.n	80074b2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	20000000 	.word	0x20000000
 80074f0:	14f8b589 	.word	0x14f8b589

080074f4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007504:	d103      	bne.n	800750e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800750c:	e007      	b.n	800751e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007512:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007516:	d102      	bne.n	800751e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2208      	movs	r2, #8
 800751c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
	...

0800752c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8007530:	4b06      	ldr	r3, [pc, #24]	; (800754c <HAL_PWR_PVD_IRQHandler+0x20>)
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d005      	beq.n	8007548 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800753c:	f000 f808 	bl	8007550 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8007540:	4b02      	ldr	r3, [pc, #8]	; (800754c <HAL_PWR_PVD_IRQHandler+0x20>)
 8007542:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007546:	615a      	str	r2, [r3, #20]
  }
}
 8007548:	bf00      	nop
 800754a:	bd80      	pop	{r7, pc}
 800754c:	40013c00 	.word	0x40013c00

08007550 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8007550:	b480      	push	{r7}
 8007552:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8007554:	bf00      	nop
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
	...

08007560 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e314      	b.n	8007b9c <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b0f      	cmp	r3, #15
 8007578:	d903      	bls.n	8007582 <HAL_RCC_OscConfig+0x22>
 800757a:	21e6      	movs	r1, #230	; 0xe6
 800757c:	4897      	ldr	r0, [pc, #604]	; (80077dc <HAL_RCC_OscConfig+0x27c>)
 800757e:	f7fa ffc2 	bl	8002506 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 8088 	beq.w	80076a0 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00d      	beq.n	80075b4 <HAL_RCC_OscConfig+0x54>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075a0:	d008      	beq.n	80075b4 <HAL_RCC_OscConfig+0x54>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075aa:	d003      	beq.n	80075b4 <HAL_RCC_OscConfig+0x54>
 80075ac:	21eb      	movs	r1, #235	; 0xeb
 80075ae:	488b      	ldr	r0, [pc, #556]	; (80077dc <HAL_RCC_OscConfig+0x27c>)
 80075b0:	f7fa ffa9 	bl	8002506 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075b4:	4b8a      	ldr	r3, [pc, #552]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f003 030c 	and.w	r3, r3, #12
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d00c      	beq.n	80075da <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075c0:	4b87      	ldr	r3, [pc, #540]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d112      	bne.n	80075f2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075cc:	4b84      	ldr	r3, [pc, #528]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075d8:	d10b      	bne.n	80075f2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075da:	4b81      	ldr	r3, [pc, #516]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d05b      	beq.n	800769e <HAL_RCC_OscConfig+0x13e>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d157      	bne.n	800769e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e2d4      	b.n	8007b9c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075fa:	d106      	bne.n	800760a <HAL_RCC_OscConfig+0xaa>
 80075fc:	4b78      	ldr	r3, [pc, #480]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a77      	ldr	r2, [pc, #476]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 8007602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	e01d      	b.n	8007646 <HAL_RCC_OscConfig+0xe6>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007612:	d10c      	bne.n	800762e <HAL_RCC_OscConfig+0xce>
 8007614:	4b72      	ldr	r3, [pc, #456]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a71      	ldr	r2, [pc, #452]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 800761a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	4b6f      	ldr	r3, [pc, #444]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a6e      	ldr	r2, [pc, #440]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 8007626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800762a:	6013      	str	r3, [r2, #0]
 800762c:	e00b      	b.n	8007646 <HAL_RCC_OscConfig+0xe6>
 800762e:	4b6c      	ldr	r3, [pc, #432]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a6b      	ldr	r2, [pc, #428]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 8007634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	4b69      	ldr	r3, [pc, #420]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a68      	ldr	r2, [pc, #416]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 8007640:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007644:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d013      	beq.n	8007676 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800764e:	f7fb fde5 	bl	800321c <HAL_GetTick>
 8007652:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007654:	e008      	b.n	8007668 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007656:	f7fb fde1 	bl	800321c <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b64      	cmp	r3, #100	; 0x64
 8007662:	d901      	bls.n	8007668 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e299      	b.n	8007b9c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007668:	4b5d      	ldr	r3, [pc, #372]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d0f0      	beq.n	8007656 <HAL_RCC_OscConfig+0xf6>
 8007674:	e014      	b.n	80076a0 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007676:	f7fb fdd1 	bl	800321c <HAL_GetTick>
 800767a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800767c:	e008      	b.n	8007690 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800767e:	f7fb fdcd 	bl	800321c <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	2b64      	cmp	r3, #100	; 0x64
 800768a:	d901      	bls.n	8007690 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e285      	b.n	8007b9c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007690:	4b53      	ldr	r3, [pc, #332]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f0      	bne.n	800767e <HAL_RCC_OscConfig+0x11e>
 800769c:	e000      	b.n	80076a0 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800769e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0302 	and.w	r3, r3, #2
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d079      	beq.n	80077a0 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d008      	beq.n	80076c6 <HAL_RCC_OscConfig+0x166>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d004      	beq.n	80076c6 <HAL_RCC_OscConfig+0x166>
 80076bc:	f240 111d 	movw	r1, #285	; 0x11d
 80076c0:	4846      	ldr	r0, [pc, #280]	; (80077dc <HAL_RCC_OscConfig+0x27c>)
 80076c2:	f7fa ff20 	bl	8002506 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	2b1f      	cmp	r3, #31
 80076cc:	d904      	bls.n	80076d8 <HAL_RCC_OscConfig+0x178>
 80076ce:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80076d2:	4842      	ldr	r0, [pc, #264]	; (80077dc <HAL_RCC_OscConfig+0x27c>)
 80076d4:	f7fa ff17 	bl	8002506 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076d8:	4b41      	ldr	r3, [pc, #260]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f003 030c 	and.w	r3, r3, #12
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00b      	beq.n	80076fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076e4:	4b3e      	ldr	r3, [pc, #248]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d11c      	bne.n	800772a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076f0:	4b3b      	ldr	r3, [pc, #236]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d116      	bne.n	800772a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076fc:	4b38      	ldr	r3, [pc, #224]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <HAL_RCC_OscConfig+0x1b4>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d001      	beq.n	8007714 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e243      	b.n	8007b9c <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007714:	4b32      	ldr	r3, [pc, #200]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	492f      	ldr	r1, [pc, #188]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 8007724:	4313      	orrs	r3, r2
 8007726:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007728:	e03a      	b.n	80077a0 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d020      	beq.n	8007774 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007732:	4b2c      	ldr	r3, [pc, #176]	; (80077e4 <HAL_RCC_OscConfig+0x284>)
 8007734:	2201      	movs	r2, #1
 8007736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007738:	f7fb fd70 	bl	800321c <HAL_GetTick>
 800773c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800773e:	e008      	b.n	8007752 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007740:	f7fb fd6c 	bl	800321c <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2b02      	cmp	r3, #2
 800774c:	d901      	bls.n	8007752 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e224      	b.n	8007b9c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007752:	4b23      	ldr	r3, [pc, #140]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0f0      	beq.n	8007740 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800775e:	4b20      	ldr	r3, [pc, #128]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	491c      	ldr	r1, [pc, #112]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 800776e:	4313      	orrs	r3, r2
 8007770:	600b      	str	r3, [r1, #0]
 8007772:	e015      	b.n	80077a0 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007774:	4b1b      	ldr	r3, [pc, #108]	; (80077e4 <HAL_RCC_OscConfig+0x284>)
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800777a:	f7fb fd4f 	bl	800321c <HAL_GetTick>
 800777e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007780:	e008      	b.n	8007794 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007782:	f7fb fd4b 	bl	800321c <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	2b02      	cmp	r3, #2
 800778e:	d901      	bls.n	8007794 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e203      	b.n	8007b9c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007794:	4b12      	ldr	r3, [pc, #72]	; (80077e0 <HAL_RCC_OscConfig+0x280>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1f0      	bne.n	8007782 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0308 	and.w	r3, r3, #8
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d045      	beq.n	8007838 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d008      	beq.n	80077c6 <HAL_RCC_OscConfig+0x266>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d004      	beq.n	80077c6 <HAL_RCC_OscConfig+0x266>
 80077bc:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80077c0:	4806      	ldr	r0, [pc, #24]	; (80077dc <HAL_RCC_OscConfig+0x27c>)
 80077c2:	f7fa fea0 	bl	8002506 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d01e      	beq.n	800780c <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077ce:	4b06      	ldr	r3, [pc, #24]	; (80077e8 <HAL_RCC_OscConfig+0x288>)
 80077d0:	2201      	movs	r2, #1
 80077d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077d4:	f7fb fd22 	bl	800321c <HAL_GetTick>
 80077d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077da:	e010      	b.n	80077fe <HAL_RCC_OscConfig+0x29e>
 80077dc:	0800f098 	.word	0x0800f098
 80077e0:	40023800 	.word	0x40023800
 80077e4:	42470000 	.word	0x42470000
 80077e8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077ec:	f7fb fd16 	bl	800321c <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d901      	bls.n	80077fe <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e1ce      	b.n	8007b9c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077fe:	4b5e      	ldr	r3, [pc, #376]	; (8007978 <HAL_RCC_OscConfig+0x418>)
 8007800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d0f0      	beq.n	80077ec <HAL_RCC_OscConfig+0x28c>
 800780a:	e015      	b.n	8007838 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800780c:	4b5b      	ldr	r3, [pc, #364]	; (800797c <HAL_RCC_OscConfig+0x41c>)
 800780e:	2200      	movs	r2, #0
 8007810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007812:	f7fb fd03 	bl	800321c <HAL_GetTick>
 8007816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007818:	e008      	b.n	800782c <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800781a:	f7fb fcff 	bl	800321c <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	2b02      	cmp	r3, #2
 8007826:	d901      	bls.n	800782c <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e1b7      	b.n	8007b9c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800782c:	4b52      	ldr	r3, [pc, #328]	; (8007978 <HAL_RCC_OscConfig+0x418>)
 800782e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007830:	f003 0302 	and.w	r3, r3, #2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1f0      	bne.n	800781a <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 80b0 	beq.w	80079a6 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007846:	2300      	movs	r3, #0
 8007848:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00c      	beq.n	800786c <HAL_RCC_OscConfig+0x30c>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d008      	beq.n	800786c <HAL_RCC_OscConfig+0x30c>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	2b05      	cmp	r3, #5
 8007860:	d004      	beq.n	800786c <HAL_RCC_OscConfig+0x30c>
 8007862:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8007866:	4846      	ldr	r0, [pc, #280]	; (8007980 <HAL_RCC_OscConfig+0x420>)
 8007868:	f7fa fe4d 	bl	8002506 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800786c:	4b42      	ldr	r3, [pc, #264]	; (8007978 <HAL_RCC_OscConfig+0x418>)
 800786e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10f      	bne.n	8007898 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007878:	2300      	movs	r3, #0
 800787a:	60bb      	str	r3, [r7, #8]
 800787c:	4b3e      	ldr	r3, [pc, #248]	; (8007978 <HAL_RCC_OscConfig+0x418>)
 800787e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007880:	4a3d      	ldr	r2, [pc, #244]	; (8007978 <HAL_RCC_OscConfig+0x418>)
 8007882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007886:	6413      	str	r3, [r2, #64]	; 0x40
 8007888:	4b3b      	ldr	r3, [pc, #236]	; (8007978 <HAL_RCC_OscConfig+0x418>)
 800788a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007890:	60bb      	str	r3, [r7, #8]
 8007892:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007894:	2301      	movs	r3, #1
 8007896:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007898:	4b3a      	ldr	r3, [pc, #232]	; (8007984 <HAL_RCC_OscConfig+0x424>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d118      	bne.n	80078d6 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078a4:	4b37      	ldr	r3, [pc, #220]	; (8007984 <HAL_RCC_OscConfig+0x424>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a36      	ldr	r2, [pc, #216]	; (8007984 <HAL_RCC_OscConfig+0x424>)
 80078aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078b0:	f7fb fcb4 	bl	800321c <HAL_GetTick>
 80078b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078b6:	e008      	b.n	80078ca <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078b8:	f7fb fcb0 	bl	800321c <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d901      	bls.n	80078ca <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e168      	b.n	8007b9c <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ca:	4b2e      	ldr	r3, [pc, #184]	; (8007984 <HAL_RCC_OscConfig+0x424>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d0f0      	beq.n	80078b8 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d106      	bne.n	80078ec <HAL_RCC_OscConfig+0x38c>
 80078de:	4b26      	ldr	r3, [pc, #152]	; (8007978 <HAL_RCC_OscConfig+0x418>)
 80078e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e2:	4a25      	ldr	r2, [pc, #148]	; (8007978 <HAL_RCC_OscConfig+0x418>)
 80078e4:	f043 0301 	orr.w	r3, r3, #1
 80078e8:	6713      	str	r3, [r2, #112]	; 0x70
 80078ea:	e01c      	b.n	8007926 <HAL_RCC_OscConfig+0x3c6>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	2b05      	cmp	r3, #5
 80078f2:	d10c      	bne.n	800790e <HAL_RCC_OscConfig+0x3ae>
 80078f4:	4b20      	ldr	r3, [pc, #128]	; (8007978 <HAL_RCC_OscConfig+0x418>)
 80078f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f8:	4a1f      	ldr	r2, [pc, #124]	; (8007978 <HAL_RCC_OscConfig+0x418>)
 80078fa:	f043 0304 	orr.w	r3, r3, #4
 80078fe:	6713      	str	r3, [r2, #112]	; 0x70
 8007900:	4b1d      	ldr	r3, [pc, #116]	; (8007978 <HAL_RCC_OscConfig+0x418>)
 8007902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007904:	4a1c      	ldr	r2, [pc, #112]	; (8007978 <HAL_RCC_OscConfig+0x418>)
 8007906:	f043 0301 	orr.w	r3, r3, #1
 800790a:	6713      	str	r3, [r2, #112]	; 0x70
 800790c:	e00b      	b.n	8007926 <HAL_RCC_OscConfig+0x3c6>
 800790e:	4b1a      	ldr	r3, [pc, #104]	; (8007978 <HAL_RCC_OscConfig+0x418>)
 8007910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007912:	4a19      	ldr	r2, [pc, #100]	; (8007978 <HAL_RCC_OscConfig+0x418>)
 8007914:	f023 0301 	bic.w	r3, r3, #1
 8007918:	6713      	str	r3, [r2, #112]	; 0x70
 800791a:	4b17      	ldr	r3, [pc, #92]	; (8007978 <HAL_RCC_OscConfig+0x418>)
 800791c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800791e:	4a16      	ldr	r2, [pc, #88]	; (8007978 <HAL_RCC_OscConfig+0x418>)
 8007920:	f023 0304 	bic.w	r3, r3, #4
 8007924:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d015      	beq.n	800795a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800792e:	f7fb fc75 	bl	800321c <HAL_GetTick>
 8007932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007934:	e00a      	b.n	800794c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007936:	f7fb fc71 	bl	800321c <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	f241 3288 	movw	r2, #5000	; 0x1388
 8007944:	4293      	cmp	r3, r2
 8007946:	d901      	bls.n	800794c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	e127      	b.n	8007b9c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800794c:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <HAL_RCC_OscConfig+0x418>)
 800794e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d0ee      	beq.n	8007936 <HAL_RCC_OscConfig+0x3d6>
 8007958:	e01c      	b.n	8007994 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800795a:	f7fb fc5f 	bl	800321c <HAL_GetTick>
 800795e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007960:	e012      	b.n	8007988 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007962:	f7fb fc5b 	bl	800321c <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007970:	4293      	cmp	r3, r2
 8007972:	d909      	bls.n	8007988 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e111      	b.n	8007b9c <HAL_RCC_OscConfig+0x63c>
 8007978:	40023800 	.word	0x40023800
 800797c:	42470e80 	.word	0x42470e80
 8007980:	0800f098 	.word	0x0800f098
 8007984:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007988:	4b86      	ldr	r3, [pc, #536]	; (8007ba4 <HAL_RCC_OscConfig+0x644>)
 800798a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e6      	bne.n	8007962 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007994:	7dfb      	ldrb	r3, [r7, #23]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d105      	bne.n	80079a6 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800799a:	4b82      	ldr	r3, [pc, #520]	; (8007ba4 <HAL_RCC_OscConfig+0x644>)
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	4a81      	ldr	r2, [pc, #516]	; (8007ba4 <HAL_RCC_OscConfig+0x644>)
 80079a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00c      	beq.n	80079c8 <HAL_RCC_OscConfig+0x468>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d008      	beq.n	80079c8 <HAL_RCC_OscConfig+0x468>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d004      	beq.n	80079c8 <HAL_RCC_OscConfig+0x468>
 80079be:	f240 11cd 	movw	r1, #461	; 0x1cd
 80079c2:	4879      	ldr	r0, [pc, #484]	; (8007ba8 <HAL_RCC_OscConfig+0x648>)
 80079c4:	f7fa fd9f 	bl	8002506 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80e4 	beq.w	8007b9a <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079d2:	4b74      	ldr	r3, [pc, #464]	; (8007ba4 <HAL_RCC_OscConfig+0x644>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f003 030c 	and.w	r3, r3, #12
 80079da:	2b08      	cmp	r3, #8
 80079dc:	f000 80a5 	beq.w	8007b2a <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	f040 8089 	bne.w	8007afc <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d009      	beq.n	8007a06 <HAL_RCC_OscConfig+0x4a6>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079fa:	d004      	beq.n	8007a06 <HAL_RCC_OscConfig+0x4a6>
 80079fc:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8007a00:	4869      	ldr	r0, [pc, #420]	; (8007ba8 <HAL_RCC_OscConfig+0x648>)
 8007a02:	f7fa fd80 	bl	8002506 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	2b3f      	cmp	r3, #63	; 0x3f
 8007a0c:	d904      	bls.n	8007a18 <HAL_RCC_OscConfig+0x4b8>
 8007a0e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8007a12:	4865      	ldr	r0, [pc, #404]	; (8007ba8 <HAL_RCC_OscConfig+0x648>)
 8007a14:	f7fa fd77 	bl	8002506 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1c:	2b31      	cmp	r3, #49	; 0x31
 8007a1e:	d904      	bls.n	8007a2a <HAL_RCC_OscConfig+0x4ca>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007a28:	d904      	bls.n	8007a34 <HAL_RCC_OscConfig+0x4d4>
 8007a2a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8007a2e:	485e      	ldr	r0, [pc, #376]	; (8007ba8 <HAL_RCC_OscConfig+0x648>)
 8007a30:	f7fa fd69 	bl	8002506 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d010      	beq.n	8007a5e <HAL_RCC_OscConfig+0x4fe>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a40:	2b04      	cmp	r3, #4
 8007a42:	d00c      	beq.n	8007a5e <HAL_RCC_OscConfig+0x4fe>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a48:	2b06      	cmp	r3, #6
 8007a4a:	d008      	beq.n	8007a5e <HAL_RCC_OscConfig+0x4fe>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d004      	beq.n	8007a5e <HAL_RCC_OscConfig+0x4fe>
 8007a54:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007a58:	4853      	ldr	r0, [pc, #332]	; (8007ba8 <HAL_RCC_OscConfig+0x648>)
 8007a5a:	f7fa fd54 	bl	8002506 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d903      	bls.n	8007a6e <HAL_RCC_OscConfig+0x50e>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6a:	2b0f      	cmp	r3, #15
 8007a6c:	d904      	bls.n	8007a78 <HAL_RCC_OscConfig+0x518>
 8007a6e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8007a72:	484d      	ldr	r0, [pc, #308]	; (8007ba8 <HAL_RCC_OscConfig+0x648>)
 8007a74:	f7fa fd47 	bl	8002506 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a78:	4b4c      	ldr	r3, [pc, #304]	; (8007bac <HAL_RCC_OscConfig+0x64c>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a7e:	f7fb fbcd 	bl	800321c <HAL_GetTick>
 8007a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a84:	e008      	b.n	8007a98 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a86:	f7fb fbc9 	bl	800321c <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d901      	bls.n	8007a98 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e081      	b.n	8007b9c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a98:	4b42      	ldr	r3, [pc, #264]	; (8007ba4 <HAL_RCC_OscConfig+0x644>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1f0      	bne.n	8007a86 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	69da      	ldr	r2, [r3, #28]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a1b      	ldr	r3, [r3, #32]
 8007aac:	431a      	orrs	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab2:	019b      	lsls	r3, r3, #6
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aba:	085b      	lsrs	r3, r3, #1
 8007abc:	3b01      	subs	r3, #1
 8007abe:	041b      	lsls	r3, r3, #16
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac6:	061b      	lsls	r3, r3, #24
 8007ac8:	4936      	ldr	r1, [pc, #216]	; (8007ba4 <HAL_RCC_OscConfig+0x644>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ace:	4b37      	ldr	r3, [pc, #220]	; (8007bac <HAL_RCC_OscConfig+0x64c>)
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ad4:	f7fb fba2 	bl	800321c <HAL_GetTick>
 8007ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ada:	e008      	b.n	8007aee <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007adc:	f7fb fb9e 	bl	800321c <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e056      	b.n	8007b9c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aee:	4b2d      	ldr	r3, [pc, #180]	; (8007ba4 <HAL_RCC_OscConfig+0x644>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d0f0      	beq.n	8007adc <HAL_RCC_OscConfig+0x57c>
 8007afa:	e04e      	b.n	8007b9a <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007afc:	4b2b      	ldr	r3, [pc, #172]	; (8007bac <HAL_RCC_OscConfig+0x64c>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b02:	f7fb fb8b 	bl	800321c <HAL_GetTick>
 8007b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b08:	e008      	b.n	8007b1c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b0a:	f7fb fb87 	bl	800321c <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d901      	bls.n	8007b1c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e03f      	b.n	8007b9c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b1c:	4b21      	ldr	r3, [pc, #132]	; (8007ba4 <HAL_RCC_OscConfig+0x644>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1f0      	bne.n	8007b0a <HAL_RCC_OscConfig+0x5aa>
 8007b28:	e037      	b.n	8007b9a <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d101      	bne.n	8007b36 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e032      	b.n	8007b9c <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b36:	4b1b      	ldr	r3, [pc, #108]	; (8007ba4 <HAL_RCC_OscConfig+0x644>)
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d028      	beq.n	8007b96 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d121      	bne.n	8007b96 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d11a      	bne.n	8007b96 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b66:	4013      	ands	r3, r2
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b6c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d111      	bne.n	8007b96 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7c:	085b      	lsrs	r3, r3, #1
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d107      	bne.n	8007b96 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d001      	beq.n	8007b9a <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e000      	b.n	8007b9c <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3718      	adds	r7, #24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	40023800 	.word	0x40023800
 8007ba8:	0800f098 	.word	0x0800f098
 8007bac:	42470060 	.word	0x42470060

08007bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e174      	b.n	8007eae <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <HAL_RCC_ClockConfig+0x24>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b0f      	cmp	r3, #15
 8007bd2:	d904      	bls.n	8007bde <HAL_RCC_ClockConfig+0x2e>
 8007bd4:	f240 215a 	movw	r1, #602	; 0x25a
 8007bd8:	487b      	ldr	r0, [pc, #492]	; (8007dc8 <HAL_RCC_ClockConfig+0x218>)
 8007bda:	f7fa fc94 	bl	8002506 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d019      	beq.n	8007c18 <HAL_RCC_ClockConfig+0x68>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d016      	beq.n	8007c18 <HAL_RCC_ClockConfig+0x68>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d013      	beq.n	8007c18 <HAL_RCC_ClockConfig+0x68>
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d010      	beq.n	8007c18 <HAL_RCC_ClockConfig+0x68>
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d00d      	beq.n	8007c18 <HAL_RCC_ClockConfig+0x68>
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2b05      	cmp	r3, #5
 8007c00:	d00a      	beq.n	8007c18 <HAL_RCC_ClockConfig+0x68>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b06      	cmp	r3, #6
 8007c06:	d007      	beq.n	8007c18 <HAL_RCC_ClockConfig+0x68>
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b07      	cmp	r3, #7
 8007c0c:	d004      	beq.n	8007c18 <HAL_RCC_ClockConfig+0x68>
 8007c0e:	f240 215b 	movw	r1, #603	; 0x25b
 8007c12:	486d      	ldr	r0, [pc, #436]	; (8007dc8 <HAL_RCC_ClockConfig+0x218>)
 8007c14:	f7fa fc77 	bl	8002506 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c18:	4b6c      	ldr	r3, [pc, #432]	; (8007dcc <HAL_RCC_ClockConfig+0x21c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0307 	and.w	r3, r3, #7
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d90c      	bls.n	8007c40 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c26:	4b69      	ldr	r3, [pc, #420]	; (8007dcc <HAL_RCC_ClockConfig+0x21c>)
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	b2d2      	uxtb	r2, r2
 8007c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c2e:	4b67      	ldr	r3, [pc, #412]	; (8007dcc <HAL_RCC_ClockConfig+0x21c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d001      	beq.n	8007c40 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e136      	b.n	8007eae <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d049      	beq.n	8007ce0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d005      	beq.n	8007c64 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c58:	4b5d      	ldr	r3, [pc, #372]	; (8007dd0 <HAL_RCC_ClockConfig+0x220>)
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	4a5c      	ldr	r2, [pc, #368]	; (8007dd0 <HAL_RCC_ClockConfig+0x220>)
 8007c5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0308 	and.w	r3, r3, #8
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d005      	beq.n	8007c7c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c70:	4b57      	ldr	r3, [pc, #348]	; (8007dd0 <HAL_RCC_ClockConfig+0x220>)
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	4a56      	ldr	r2, [pc, #344]	; (8007dd0 <HAL_RCC_ClockConfig+0x220>)
 8007c76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d024      	beq.n	8007cce <HAL_RCC_ClockConfig+0x11e>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	2b80      	cmp	r3, #128	; 0x80
 8007c8a:	d020      	beq.n	8007cce <HAL_RCC_ClockConfig+0x11e>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	2b90      	cmp	r3, #144	; 0x90
 8007c92:	d01c      	beq.n	8007cce <HAL_RCC_ClockConfig+0x11e>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	2ba0      	cmp	r3, #160	; 0xa0
 8007c9a:	d018      	beq.n	8007cce <HAL_RCC_ClockConfig+0x11e>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	2bb0      	cmp	r3, #176	; 0xb0
 8007ca2:	d014      	beq.n	8007cce <HAL_RCC_ClockConfig+0x11e>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	2bc0      	cmp	r3, #192	; 0xc0
 8007caa:	d010      	beq.n	8007cce <HAL_RCC_ClockConfig+0x11e>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	2bd0      	cmp	r3, #208	; 0xd0
 8007cb2:	d00c      	beq.n	8007cce <HAL_RCC_ClockConfig+0x11e>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	2be0      	cmp	r3, #224	; 0xe0
 8007cba:	d008      	beq.n	8007cce <HAL_RCC_ClockConfig+0x11e>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2bf0      	cmp	r3, #240	; 0xf0
 8007cc2:	d004      	beq.n	8007cce <HAL_RCC_ClockConfig+0x11e>
 8007cc4:	f240 217e 	movw	r1, #638	; 0x27e
 8007cc8:	483f      	ldr	r0, [pc, #252]	; (8007dc8 <HAL_RCC_ClockConfig+0x218>)
 8007cca:	f7fa fc1c 	bl	8002506 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cce:	4b40      	ldr	r3, [pc, #256]	; (8007dd0 <HAL_RCC_ClockConfig+0x220>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	493d      	ldr	r1, [pc, #244]	; (8007dd0 <HAL_RCC_ClockConfig+0x220>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d059      	beq.n	8007da0 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d010      	beq.n	8007d16 <HAL_RCC_ClockConfig+0x166>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d00c      	beq.n	8007d16 <HAL_RCC_ClockConfig+0x166>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d008      	beq.n	8007d16 <HAL_RCC_ClockConfig+0x166>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	2b03      	cmp	r3, #3
 8007d0a:	d004      	beq.n	8007d16 <HAL_RCC_ClockConfig+0x166>
 8007d0c:	f240 2185 	movw	r1, #645	; 0x285
 8007d10:	482d      	ldr	r0, [pc, #180]	; (8007dc8 <HAL_RCC_ClockConfig+0x218>)
 8007d12:	f7fa fbf8 	bl	8002506 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d107      	bne.n	8007d2e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d1e:	4b2c      	ldr	r3, [pc, #176]	; (8007dd0 <HAL_RCC_ClockConfig+0x220>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d119      	bne.n	8007d5e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e0bf      	b.n	8007eae <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d003      	beq.n	8007d3e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d107      	bne.n	8007d4e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d3e:	4b24      	ldr	r3, [pc, #144]	; (8007dd0 <HAL_RCC_ClockConfig+0x220>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d109      	bne.n	8007d5e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e0af      	b.n	8007eae <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d4e:	4b20      	ldr	r3, [pc, #128]	; (8007dd0 <HAL_RCC_ClockConfig+0x220>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e0a7      	b.n	8007eae <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d5e:	4b1c      	ldr	r3, [pc, #112]	; (8007dd0 <HAL_RCC_ClockConfig+0x220>)
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f023 0203 	bic.w	r2, r3, #3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	4919      	ldr	r1, [pc, #100]	; (8007dd0 <HAL_RCC_ClockConfig+0x220>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d70:	f7fb fa54 	bl	800321c <HAL_GetTick>
 8007d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d76:	e00a      	b.n	8007d8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d78:	f7fb fa50 	bl	800321c <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e08f      	b.n	8007eae <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d8e:	4b10      	ldr	r3, [pc, #64]	; (8007dd0 <HAL_RCC_ClockConfig+0x220>)
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 020c 	and.w	r2, r3, #12
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d1eb      	bne.n	8007d78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007da0:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <HAL_RCC_ClockConfig+0x21c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0307 	and.w	r3, r3, #7
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d212      	bcs.n	8007dd4 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dae:	4b07      	ldr	r3, [pc, #28]	; (8007dcc <HAL_RCC_ClockConfig+0x21c>)
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	b2d2      	uxtb	r2, r2
 8007db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007db6:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <HAL_RCC_ClockConfig+0x21c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0307 	and.w	r3, r3, #7
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d007      	beq.n	8007dd4 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e072      	b.n	8007eae <HAL_RCC_ClockConfig+0x2fe>
 8007dc8:	0800f098 	.word	0x0800f098
 8007dcc:	40023c00 	.word	0x40023c00
 8007dd0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d025      	beq.n	8007e2c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d018      	beq.n	8007e1a <HAL_RCC_ClockConfig+0x26a>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df0:	d013      	beq.n	8007e1a <HAL_RCC_ClockConfig+0x26a>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007dfa:	d00e      	beq.n	8007e1a <HAL_RCC_ClockConfig+0x26a>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007e04:	d009      	beq.n	8007e1a <HAL_RCC_ClockConfig+0x26a>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007e0e:	d004      	beq.n	8007e1a <HAL_RCC_ClockConfig+0x26a>
 8007e10:	f240 21c3 	movw	r1, #707	; 0x2c3
 8007e14:	4828      	ldr	r0, [pc, #160]	; (8007eb8 <HAL_RCC_ClockConfig+0x308>)
 8007e16:	f7fa fb76 	bl	8002506 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e1a:	4b28      	ldr	r3, [pc, #160]	; (8007ebc <HAL_RCC_ClockConfig+0x30c>)
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	4925      	ldr	r1, [pc, #148]	; (8007ebc <HAL_RCC_ClockConfig+0x30c>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0308 	and.w	r3, r3, #8
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d026      	beq.n	8007e86 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d018      	beq.n	8007e72 <HAL_RCC_ClockConfig+0x2c2>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e48:	d013      	beq.n	8007e72 <HAL_RCC_ClockConfig+0x2c2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e52:	d00e      	beq.n	8007e72 <HAL_RCC_ClockConfig+0x2c2>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007e5c:	d009      	beq.n	8007e72 <HAL_RCC_ClockConfig+0x2c2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007e66:	d004      	beq.n	8007e72 <HAL_RCC_ClockConfig+0x2c2>
 8007e68:	f240 21ca 	movw	r1, #714	; 0x2ca
 8007e6c:	4812      	ldr	r0, [pc, #72]	; (8007eb8 <HAL_RCC_ClockConfig+0x308>)
 8007e6e:	f7fa fb4a 	bl	8002506 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e72:	4b12      	ldr	r3, [pc, #72]	; (8007ebc <HAL_RCC_ClockConfig+0x30c>)
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	00db      	lsls	r3, r3, #3
 8007e80:	490e      	ldr	r1, [pc, #56]	; (8007ebc <HAL_RCC_ClockConfig+0x30c>)
 8007e82:	4313      	orrs	r3, r2
 8007e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e86:	f000 f821 	bl	8007ecc <HAL_RCC_GetSysClockFreq>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	4b0b      	ldr	r3, [pc, #44]	; (8007ebc <HAL_RCC_ClockConfig+0x30c>)
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	091b      	lsrs	r3, r3, #4
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	490a      	ldr	r1, [pc, #40]	; (8007ec0 <HAL_RCC_ClockConfig+0x310>)
 8007e98:	5ccb      	ldrb	r3, [r1, r3]
 8007e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e9e:	4a09      	ldr	r2, [pc, #36]	; (8007ec4 <HAL_RCC_ClockConfig+0x314>)
 8007ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007ea2:	4b09      	ldr	r3, [pc, #36]	; (8007ec8 <HAL_RCC_ClockConfig+0x318>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fa fce0 	bl	800286c <HAL_InitTick>

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	0800f098 	.word	0x0800f098
 8007ebc:	40023800 	.word	0x40023800
 8007ec0:	0800f4a4 	.word	0x0800f4a4
 8007ec4:	20000000 	.word	0x20000000
 8007ec8:	20000004 	.word	0x20000004

08007ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ed0:	b094      	sub	sp, #80	; 0x50
 8007ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8007ed8:	2300      	movs	r3, #0
 8007eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007edc:	2300      	movs	r3, #0
 8007ede:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ee4:	4b79      	ldr	r3, [pc, #484]	; (80080cc <HAL_RCC_GetSysClockFreq+0x200>)
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f003 030c 	and.w	r3, r3, #12
 8007eec:	2b08      	cmp	r3, #8
 8007eee:	d00d      	beq.n	8007f0c <HAL_RCC_GetSysClockFreq+0x40>
 8007ef0:	2b08      	cmp	r3, #8
 8007ef2:	f200 80e1 	bhi.w	80080b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <HAL_RCC_GetSysClockFreq+0x34>
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d003      	beq.n	8007f06 <HAL_RCC_GetSysClockFreq+0x3a>
 8007efe:	e0db      	b.n	80080b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f00:	4b73      	ldr	r3, [pc, #460]	; (80080d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007f04:	e0db      	b.n	80080be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f06:	4b73      	ldr	r3, [pc, #460]	; (80080d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f0a:	e0d8      	b.n	80080be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f0c:	4b6f      	ldr	r3, [pc, #444]	; (80080cc <HAL_RCC_GetSysClockFreq+0x200>)
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f16:	4b6d      	ldr	r3, [pc, #436]	; (80080cc <HAL_RCC_GetSysClockFreq+0x200>)
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d063      	beq.n	8007fea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f22:	4b6a      	ldr	r3, [pc, #424]	; (80080cc <HAL_RCC_GetSysClockFreq+0x200>)
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	099b      	lsrs	r3, r3, #6
 8007f28:	2200      	movs	r2, #0
 8007f2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f34:	633b      	str	r3, [r7, #48]	; 0x30
 8007f36:	2300      	movs	r3, #0
 8007f38:	637b      	str	r3, [r7, #52]	; 0x34
 8007f3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007f3e:	4622      	mov	r2, r4
 8007f40:	462b      	mov	r3, r5
 8007f42:	f04f 0000 	mov.w	r0, #0
 8007f46:	f04f 0100 	mov.w	r1, #0
 8007f4a:	0159      	lsls	r1, r3, #5
 8007f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f50:	0150      	lsls	r0, r2, #5
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	4621      	mov	r1, r4
 8007f58:	1a51      	subs	r1, r2, r1
 8007f5a:	6139      	str	r1, [r7, #16]
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8007f62:	617b      	str	r3, [r7, #20]
 8007f64:	f04f 0200 	mov.w	r2, #0
 8007f68:	f04f 0300 	mov.w	r3, #0
 8007f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f70:	4659      	mov	r1, fp
 8007f72:	018b      	lsls	r3, r1, #6
 8007f74:	4651      	mov	r1, sl
 8007f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f7a:	4651      	mov	r1, sl
 8007f7c:	018a      	lsls	r2, r1, #6
 8007f7e:	4651      	mov	r1, sl
 8007f80:	ebb2 0801 	subs.w	r8, r2, r1
 8007f84:	4659      	mov	r1, fp
 8007f86:	eb63 0901 	sbc.w	r9, r3, r1
 8007f8a:	f04f 0200 	mov.w	r2, #0
 8007f8e:	f04f 0300 	mov.w	r3, #0
 8007f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f9e:	4690      	mov	r8, r2
 8007fa0:	4699      	mov	r9, r3
 8007fa2:	4623      	mov	r3, r4
 8007fa4:	eb18 0303 	adds.w	r3, r8, r3
 8007fa8:	60bb      	str	r3, [r7, #8]
 8007faa:	462b      	mov	r3, r5
 8007fac:	eb49 0303 	adc.w	r3, r9, r3
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	f04f 0200 	mov.w	r2, #0
 8007fb6:	f04f 0300 	mov.w	r3, #0
 8007fba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	024b      	lsls	r3, r1, #9
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007fc8:	4621      	mov	r1, r4
 8007fca:	024a      	lsls	r2, r1, #9
 8007fcc:	4610      	mov	r0, r2
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fdc:	f7f8 f900 	bl	80001e0 <__aeabi_uldivmod>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fe8:	e058      	b.n	800809c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fea:	4b38      	ldr	r3, [pc, #224]	; (80080cc <HAL_RCC_GetSysClockFreq+0x200>)
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	099b      	lsrs	r3, r3, #6
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ffa:	623b      	str	r3, [r7, #32]
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8008000:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008004:	4642      	mov	r2, r8
 8008006:	464b      	mov	r3, r9
 8008008:	f04f 0000 	mov.w	r0, #0
 800800c:	f04f 0100 	mov.w	r1, #0
 8008010:	0159      	lsls	r1, r3, #5
 8008012:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008016:	0150      	lsls	r0, r2, #5
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	4641      	mov	r1, r8
 800801e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008022:	4649      	mov	r1, r9
 8008024:	eb63 0b01 	sbc.w	fp, r3, r1
 8008028:	f04f 0200 	mov.w	r2, #0
 800802c:	f04f 0300 	mov.w	r3, #0
 8008030:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008034:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008038:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800803c:	ebb2 040a 	subs.w	r4, r2, sl
 8008040:	eb63 050b 	sbc.w	r5, r3, fp
 8008044:	f04f 0200 	mov.w	r2, #0
 8008048:	f04f 0300 	mov.w	r3, #0
 800804c:	00eb      	lsls	r3, r5, #3
 800804e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008052:	00e2      	lsls	r2, r4, #3
 8008054:	4614      	mov	r4, r2
 8008056:	461d      	mov	r5, r3
 8008058:	4643      	mov	r3, r8
 800805a:	18e3      	adds	r3, r4, r3
 800805c:	603b      	str	r3, [r7, #0]
 800805e:	464b      	mov	r3, r9
 8008060:	eb45 0303 	adc.w	r3, r5, r3
 8008064:	607b      	str	r3, [r7, #4]
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	f04f 0300 	mov.w	r3, #0
 800806e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008072:	4629      	mov	r1, r5
 8008074:	028b      	lsls	r3, r1, #10
 8008076:	4621      	mov	r1, r4
 8008078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800807c:	4621      	mov	r1, r4
 800807e:	028a      	lsls	r2, r1, #10
 8008080:	4610      	mov	r0, r2
 8008082:	4619      	mov	r1, r3
 8008084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008086:	2200      	movs	r2, #0
 8008088:	61bb      	str	r3, [r7, #24]
 800808a:	61fa      	str	r2, [r7, #28]
 800808c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008090:	f7f8 f8a6 	bl	80001e0 <__aeabi_uldivmod>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	4613      	mov	r3, r2
 800809a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800809c:	4b0b      	ldr	r3, [pc, #44]	; (80080cc <HAL_RCC_GetSysClockFreq+0x200>)
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	0c1b      	lsrs	r3, r3, #16
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	3301      	adds	r3, #1
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80080ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80080b6:	e002      	b.n	80080be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080b8:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80080ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80080bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3750      	adds	r7, #80	; 0x50
 80080c4:	46bd      	mov	sp, r7
 80080c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080ca:	bf00      	nop
 80080cc:	40023800 	.word	0x40023800
 80080d0:	00f42400 	.word	0x00f42400
 80080d4:	007a1200 	.word	0x007a1200

080080d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080d8:	b480      	push	{r7}
 80080da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080dc:	4b03      	ldr	r3, [pc, #12]	; (80080ec <HAL_RCC_GetHCLKFreq+0x14>)
 80080de:	681b      	ldr	r3, [r3, #0]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	20000000 	.word	0x20000000

080080f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80080f4:	f7ff fff0 	bl	80080d8 <HAL_RCC_GetHCLKFreq>
 80080f8:	4602      	mov	r2, r0
 80080fa:	4b05      	ldr	r3, [pc, #20]	; (8008110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	0a9b      	lsrs	r3, r3, #10
 8008100:	f003 0307 	and.w	r3, r3, #7
 8008104:	4903      	ldr	r1, [pc, #12]	; (8008114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008106:	5ccb      	ldrb	r3, [r1, r3]
 8008108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800810c:	4618      	mov	r0, r3
 800810e:	bd80      	pop	{r7, pc}
 8008110:	40023800 	.word	0x40023800
 8008114:	0800f4b4 	.word	0x0800f4b4

08008118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800811c:	f7ff ffdc 	bl	80080d8 <HAL_RCC_GetHCLKFreq>
 8008120:	4602      	mov	r2, r0
 8008122:	4b05      	ldr	r3, [pc, #20]	; (8008138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	0b5b      	lsrs	r3, r3, #13
 8008128:	f003 0307 	and.w	r3, r3, #7
 800812c:	4903      	ldr	r1, [pc, #12]	; (800813c <HAL_RCC_GetPCLK2Freq+0x24>)
 800812e:	5ccb      	ldrb	r3, [r1, r3]
 8008130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008134:	4618      	mov	r0, r3
 8008136:	bd80      	pop	{r7, pc}
 8008138:	40023800 	.word	0x40023800
 800813c:	0800f4b4 	.word	0x0800f4b4

08008140 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	220f      	movs	r2, #15
 800814e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008150:	4b12      	ldr	r3, [pc, #72]	; (800819c <HAL_RCC_GetClockConfig+0x5c>)
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f003 0203 	and.w	r2, r3, #3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800815c:	4b0f      	ldr	r3, [pc, #60]	; (800819c <HAL_RCC_GetClockConfig+0x5c>)
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008168:	4b0c      	ldr	r3, [pc, #48]	; (800819c <HAL_RCC_GetClockConfig+0x5c>)
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008174:	4b09      	ldr	r3, [pc, #36]	; (800819c <HAL_RCC_GetClockConfig+0x5c>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	08db      	lsrs	r3, r3, #3
 800817a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008182:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <HAL_RCC_GetClockConfig+0x60>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0207 	and.w	r2, r3, #7
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	601a      	str	r2, [r3, #0]
}
 800818e:	bf00      	nop
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	40023800 	.word	0x40023800
 80081a0:	40023c00 	.word	0x40023c00

080081a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d003      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b0f      	cmp	r3, #15
 80081c2:	d904      	bls.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80081c4:	f640 11d7 	movw	r1, #2519	; 0x9d7
 80081c8:	4834      	ldr	r0, [pc, #208]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80081ca:	f7fa f99c 	bl	8002506 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d105      	bne.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d066      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d903      	bls.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	2b07      	cmp	r3, #7
 80081f4:	d904      	bls.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80081f6:	f640 11de 	movw	r1, #2526	; 0x9de
 80081fa:	4828      	ldr	r0, [pc, #160]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80081fc:	f7fa f983 	bl	8002506 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	2b31      	cmp	r3, #49	; 0x31
 8008206:	d904      	bls.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8008210:	d904      	bls.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8008212:	f640 11df 	movw	r1, #2527	; 0x9df
 8008216:	4821      	ldr	r0, [pc, #132]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8008218:	f7fa f975 	bl	8002506 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d903      	bls.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	2b3f      	cmp	r3, #63	; 0x3f
 800822a:	d904      	bls.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x92>
 800822c:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8008230:	481a      	ldr	r0, [pc, #104]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8008232:	f7fa f968 	bl	8002506 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008236:	4b1a      	ldr	r3, [pc, #104]	; (80082a0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800823c:	f7fa ffee 	bl	800321c <HAL_GetTick>
 8008240:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008242:	e008      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008244:	f7fa ffea 	bl	800321c <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	2b02      	cmp	r3, #2
 8008250:	d901      	bls.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e1b3      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008256:	4b13      	ldr	r3, [pc, #76]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1f0      	bne.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	019b      	lsls	r3, r3, #6
 800826c:	431a      	orrs	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	071b      	lsls	r3, r3, #28
 8008274:	490b      	ldr	r1, [pc, #44]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8008276:	4313      	orrs	r3, r2
 8008278:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800827c:	4b08      	ldr	r3, [pc, #32]	; (80082a0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800827e:	2201      	movs	r2, #1
 8008280:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008282:	f7fa ffcb 	bl	800321c <HAL_GetTick>
 8008286:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008288:	e00e      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800828a:	f7fa ffc7 	bl	800321c <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	2b02      	cmp	r3, #2
 8008296:	d907      	bls.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e190      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800829c:	0800f10c 	.word	0x0800f10c
 80082a0:	42470068 	.word	0x42470068
 80082a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082a8:	4b88      	ldr	r3, [pc, #544]	; (80084cc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d0ea      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0302 	and.w	r3, r3, #2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 8173 	beq.w	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ca:	f000 80a6 	beq.w	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082d6:	f000 80a0 	beq.w	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	4a7c      	ldr	r2, [pc, #496]	; (80084d0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	f000 809a 	beq.w	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	4a7a      	ldr	r2, [pc, #488]	; (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	f000 8094 	beq.w	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	4a78      	ldr	r2, [pc, #480]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	f000 808e 	beq.w	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	4a76      	ldr	r2, [pc, #472]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008304:	4293      	cmp	r3, r2
 8008306:	f000 8088 	beq.w	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	4a74      	ldr	r2, [pc, #464]	; (80084e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	f000 8082 	beq.w	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	4a72      	ldr	r2, [pc, #456]	; (80084e4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d07c      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	4a70      	ldr	r2, [pc, #448]	; (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d077      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	4a6f      	ldr	r2, [pc, #444]	; (80084ec <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d072      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	4a6d      	ldr	r2, [pc, #436]	; (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d06d      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	4a6c      	ldr	r2, [pc, #432]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d068      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	4a6a      	ldr	r2, [pc, #424]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d063      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	4a69      	ldr	r2, [pc, #420]	; (80084fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d05e      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	4a67      	ldr	r2, [pc, #412]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d059      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	4a66      	ldr	r2, [pc, #408]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d054      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	4a64      	ldr	r2, [pc, #400]	; (8008508 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d04f      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	4a63      	ldr	r2, [pc, #396]	; (800850c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d04a      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	4a61      	ldr	r2, [pc, #388]	; (8008510 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d045      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	4a60      	ldr	r2, [pc, #384]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d040      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	4a5e      	ldr	r2, [pc, #376]	; (8008518 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d03b      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	4a5d      	ldr	r2, [pc, #372]	; (800851c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d036      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	4a5b      	ldr	r2, [pc, #364]	; (8008520 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d031      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	4a5a      	ldr	r2, [pc, #360]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d02c      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	4a58      	ldr	r2, [pc, #352]	; (8008528 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d027      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	4a57      	ldr	r2, [pc, #348]	; (800852c <HAL_RCCEx_PeriphCLKConfig+0x388>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d022      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	4a55      	ldr	r2, [pc, #340]	; (8008530 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d01d      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	4a54      	ldr	r2, [pc, #336]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d018      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	4a52      	ldr	r2, [pc, #328]	; (8008538 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d013      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	4a51      	ldr	r2, [pc, #324]	; (800853c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d00e      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	4a4f      	ldr	r2, [pc, #316]	; (8008540 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d009      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	4a4e      	ldr	r2, [pc, #312]	; (8008544 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d004      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008410:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8008414:	484c      	ldr	r0, [pc, #304]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8008416:	f7fa f876 	bl	8002506 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800841a:	2300      	movs	r3, #0
 800841c:	60fb      	str	r3, [r7, #12]
 800841e:	4b2b      	ldr	r3, [pc, #172]	; (80084cc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008422:	4a2a      	ldr	r2, [pc, #168]	; (80084cc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008428:	6413      	str	r3, [r2, #64]	; 0x40
 800842a:	4b28      	ldr	r3, [pc, #160]	; (80084cc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800842c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008436:	4b45      	ldr	r3, [pc, #276]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a44      	ldr	r2, [pc, #272]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800843c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008440:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008442:	f7fa feeb 	bl	800321c <HAL_GetTick>
 8008446:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008448:	e008      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800844a:	f7fa fee7 	bl	800321c <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	2b02      	cmp	r3, #2
 8008456:	d901      	bls.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8008458:	2303      	movs	r3, #3
 800845a:	e0b0      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800845c:	4b3b      	ldr	r3, [pc, #236]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008464:	2b00      	cmp	r3, #0
 8008466:	d0f0      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008468:	4b18      	ldr	r3, [pc, #96]	; (80084cc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800846a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008470:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d073      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	429a      	cmp	r2, r3
 8008484:	d06c      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008486:	4b11      	ldr	r3, [pc, #68]	; (80084cc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800848e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008490:	4b2f      	ldr	r3, [pc, #188]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8008492:	2201      	movs	r2, #1
 8008494:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008496:	4b2e      	ldr	r3, [pc, #184]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8008498:	2200      	movs	r2, #0
 800849a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800849c:	4a0b      	ldr	r2, [pc, #44]	; (80084cc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80084a2:	4b0a      	ldr	r3, [pc, #40]	; (80084cc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80084a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d158      	bne.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80084ae:	f7fa feb5 	bl	800321c <HAL_GetTick>
 80084b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084b4:	e04e      	b.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084b6:	f7fa feb1 	bl	800321c <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d945      	bls.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 80084c8:	2303      	movs	r3, #3
 80084ca:	e078      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80084cc:	40023800 	.word	0x40023800
 80084d0:	00020300 	.word	0x00020300
 80084d4:	00030300 	.word	0x00030300
 80084d8:	00040300 	.word	0x00040300
 80084dc:	00050300 	.word	0x00050300
 80084e0:	00060300 	.word	0x00060300
 80084e4:	00070300 	.word	0x00070300
 80084e8:	00080300 	.word	0x00080300
 80084ec:	00090300 	.word	0x00090300
 80084f0:	000a0300 	.word	0x000a0300
 80084f4:	000b0300 	.word	0x000b0300
 80084f8:	000c0300 	.word	0x000c0300
 80084fc:	000d0300 	.word	0x000d0300
 8008500:	000e0300 	.word	0x000e0300
 8008504:	000f0300 	.word	0x000f0300
 8008508:	00100300 	.word	0x00100300
 800850c:	00110300 	.word	0x00110300
 8008510:	00120300 	.word	0x00120300
 8008514:	00130300 	.word	0x00130300
 8008518:	00140300 	.word	0x00140300
 800851c:	00150300 	.word	0x00150300
 8008520:	00160300 	.word	0x00160300
 8008524:	00170300 	.word	0x00170300
 8008528:	00180300 	.word	0x00180300
 800852c:	00190300 	.word	0x00190300
 8008530:	001a0300 	.word	0x001a0300
 8008534:	001b0300 	.word	0x001b0300
 8008538:	001c0300 	.word	0x001c0300
 800853c:	001d0300 	.word	0x001d0300
 8008540:	001e0300 	.word	0x001e0300
 8008544:	001f0300 	.word	0x001f0300
 8008548:	0800f10c 	.word	0x0800f10c
 800854c:	40007000 	.word	0x40007000
 8008550:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008554:	4b1c      	ldr	r3, [pc, #112]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008558:	f003 0302 	and.w	r3, r3, #2
 800855c:	2b00      	cmp	r3, #0
 800855e:	d0aa      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800856c:	d10d      	bne.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800856e:	4b16      	ldr	r3, [pc, #88]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800857e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008582:	4911      	ldr	r1, [pc, #68]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008584:	4313      	orrs	r3, r2
 8008586:	608b      	str	r3, [r1, #8]
 8008588:	e005      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800858a:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	4a0e      	ldr	r2, [pc, #56]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008590:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008594:	6093      	str	r3, [r2, #8]
 8008596:	4b0c      	ldr	r3, [pc, #48]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008598:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085a2:	4909      	ldr	r1, [pc, #36]	; (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0308 	and.w	r3, r3, #8
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d003      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	7d1a      	ldrb	r2, [r3, #20]
 80085b8:	4b04      	ldr	r3, [pc, #16]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80085ba:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	40023800 	.word	0x40023800
 80085cc:	424711e0 	.word	0x424711e0

080085d0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e0e2      	b.n	80087ac <HAL_RTC_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a72      	ldr	r2, [pc, #456]	; (80087b4 <HAL_RTC_Init+0x1e4>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d004      	beq.n	80085fa <HAL_RTC_Init+0x2a>
 80085f0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80085f4:	4870      	ldr	r0, [pc, #448]	; (80087b8 <HAL_RTC_Init+0x1e8>)
 80085f6:	f7f9 ff86 	bl	8002506 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	2b40      	cmp	r3, #64	; 0x40
 8008600:	d008      	beq.n	8008614 <HAL_RTC_Init+0x44>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d004      	beq.n	8008614 <HAL_RTC_Init+0x44>
 800860a:	f240 1105 	movw	r1, #261	; 0x105
 800860e:	486a      	ldr	r0, [pc, #424]	; (80087b8 <HAL_RTC_Init+0x1e8>)
 8008610:	f7f9 ff79 	bl	8002506 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	2b7f      	cmp	r3, #127	; 0x7f
 800861a:	d904      	bls.n	8008626 <HAL_RTC_Init+0x56>
 800861c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008620:	4865      	ldr	r0, [pc, #404]	; (80087b8 <HAL_RTC_Init+0x1e8>)
 8008622:	f7f9 ff70 	bl	8002506 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800862e:	d304      	bcc.n	800863a <HAL_RTC_Init+0x6a>
 8008630:	f240 1107 	movw	r1, #263	; 0x107
 8008634:	4860      	ldr	r0, [pc, #384]	; (80087b8 <HAL_RTC_Init+0x1e8>)
 8008636:	f7f9 ff66 	bl	8002506 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d013      	beq.n	800866a <HAL_RTC_Init+0x9a>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800864a:	d00e      	beq.n	800866a <HAL_RTC_Init+0x9a>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008654:	d009      	beq.n	800866a <HAL_RTC_Init+0x9a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800865e:	d004      	beq.n	800866a <HAL_RTC_Init+0x9a>
 8008660:	f44f 7184 	mov.w	r1, #264	; 0x108
 8008664:	4854      	ldr	r0, [pc, #336]	; (80087b8 <HAL_RTC_Init+0x1e8>)
 8008666:	f7f9 ff4e 	bl	8002506 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d009      	beq.n	8008686 <HAL_RTC_Init+0xb6>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800867a:	d004      	beq.n	8008686 <HAL_RTC_Init+0xb6>
 800867c:	f240 1109 	movw	r1, #265	; 0x109
 8008680:	484d      	ldr	r0, [pc, #308]	; (80087b8 <HAL_RTC_Init+0x1e8>)
 8008682:	f7f9 ff40 	bl	8002506 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <HAL_RTC_Init+0xd2>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008696:	d004      	beq.n	80086a2 <HAL_RTC_Init+0xd2>
 8008698:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800869c:	4846      	ldr	r0, [pc, #280]	; (80087b8 <HAL_RTC_Init+0x1e8>)
 800869e:	f7f9 ff32 	bl	8002506 <assert_failed>

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	7f5b      	ldrb	r3, [r3, #29]
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d123      	bne.n	80086f4 <HAL_RTC_Init+0x124>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a41      	ldr	r2, [pc, #260]	; (80087bc <HAL_RTC_Init+0x1ec>)
 80086b6:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a41      	ldr	r2, [pc, #260]	; (80087c0 <HAL_RTC_Init+0x1f0>)
 80086bc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a40      	ldr	r2, [pc, #256]	; (80087c4 <HAL_RTC_Init+0x1f4>)
 80086c2:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a40      	ldr	r2, [pc, #256]	; (80087c8 <HAL_RTC_Init+0x1f8>)
 80086c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a3f      	ldr	r2, [pc, #252]	; (80087cc <HAL_RTC_Init+0x1fc>)
 80086ce:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER2_SUPPORT)
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
#endif /* RTC_TAMPER2_SUPPORT */

    if (hrtc->MspInitCallback == NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d102      	bne.n	80086de <HAL_RTC_Init+0x10e>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a3d      	ldr	r2, [pc, #244]	; (80087d0 <HAL_RTC_Init+0x200>)
 80086dc:	635a      	str	r2, [r3, #52]	; 0x34
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3

    if (hrtc->MspDeInitCallback == NULL)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d102      	bne.n	80086f4 <HAL_RTC_Init+0x124>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a38      	ldr	r2, [pc, #224]	; (80087d4 <HAL_RTC_Init+0x204>)
 80086f2:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	22ca      	movs	r2, #202	; 0xca
 8008700:	625a      	str	r2, [r3, #36]	; 0x24
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2253      	movs	r2, #83	; 0x53
 8008708:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fdc8 	bl	80092a0 <RTC_EnterInitMode>
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d12c      	bne.n	8008774 <HAL_RTC_Init+0x1a4>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	6812      	ldr	r2, [r2, #0]
 8008724:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800872c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6899      	ldr	r1, [r3, #8]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	431a      	orrs	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	431a      	orrs	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	430a      	orrs	r2, r1
 800874a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	68d2      	ldr	r2, [r2, #12]
 8008754:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6919      	ldr	r1, [r3, #16]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	041a      	lsls	r2, r3, #16
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fdcf 	bl	800930e <RTC_ExitInitMode>
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d113      	bne.n	80087a2 <HAL_RTC_Init+0x1d2>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008788:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	699a      	ldr	r2, [r3, #24]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	430a      	orrs	r2, r1
 800879a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	22ff      	movs	r2, #255	; 0xff
 80087a8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	40002800 	.word	0x40002800
 80087b8:	0800f184 	.word	0x0800f184
 80087bc:	0800923d 	.word	0x0800923d
 80087c0:	08009589 	.word	0x08009589
 80087c4:	080093cb 	.word	0x080093cb
 80087c8:	08009575 	.word	0x08009575
 80087cc:	080093df 	.word	0x080093df
 80087d0:	08002665 	.word	0x08002665
 80087d4:	080026bd 	.word	0x080026bd

080087d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80087d8:	b590      	push	{r4, r7, lr}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d007      	beq.n	80087fe <HAL_RTC_SetTime+0x26>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d004      	beq.n	80087fe <HAL_RTC_SetTime+0x26>
 80087f4:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 80087f8:	489a      	ldr	r0, [pc, #616]	; (8008a64 <HAL_RTC_SetTime+0x28c>)
 80087fa:	f7f9 fe84 	bl	8002506 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008806:	d00d      	beq.n	8008824 <HAL_RTC_SetTime+0x4c>
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008810:	d008      	beq.n	8008824 <HAL_RTC_SetTime+0x4c>
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d004      	beq.n	8008824 <HAL_RTC_SetTime+0x4c>
 800881a:	f240 21b5 	movw	r1, #693	; 0x2b5
 800881e:	4891      	ldr	r0, [pc, #580]	; (8008a64 <HAL_RTC_SetTime+0x28c>)
 8008820:	f7f9 fe71 	bl	8002506 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d009      	beq.n	8008840 <HAL_RTC_SetTime+0x68>
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008834:	d004      	beq.n	8008840 <HAL_RTC_SetTime+0x68>
 8008836:	f240 21b6 	movw	r1, #694	; 0x2b6
 800883a:	488a      	ldr	r0, [pc, #552]	; (8008a64 <HAL_RTC_SetTime+0x28c>)
 800883c:	f7f9 fe63 	bl	8002506 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	7f1b      	ldrb	r3, [r3, #28]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d101      	bne.n	800884c <HAL_RTC_SetTime+0x74>
 8008848:	2302      	movs	r3, #2
 800884a:	e107      	b.n	8008a5c <HAL_RTC_SetTime+0x284>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2201      	movs	r2, #1
 8008850:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2202      	movs	r2, #2
 8008856:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d15c      	bne.n	8008918 <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008868:	2b00      	cmp	r3, #0
 800886a:	d01a      	beq.n	80088a2 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <HAL_RTC_SetTime+0xa4>
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	2b0c      	cmp	r3, #12
 800887a:	d904      	bls.n	8008886 <HAL_RTC_SetTime+0xae>
 800887c:	f240 21c1 	movw	r1, #705	; 0x2c1
 8008880:	4878      	ldr	r0, [pc, #480]	; (8008a64 <HAL_RTC_SetTime+0x28c>)
 8008882:	f7f9 fe40 	bl	8002506 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	78db      	ldrb	r3, [r3, #3]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d015      	beq.n	80088ba <HAL_RTC_SetTime+0xe2>
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	78db      	ldrb	r3, [r3, #3]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d011      	beq.n	80088ba <HAL_RTC_SetTime+0xe2>
 8008896:	f240 21c2 	movw	r1, #706	; 0x2c2
 800889a:	4872      	ldr	r0, [pc, #456]	; (8008a64 <HAL_RTC_SetTime+0x28c>)
 800889c:	f7f9 fe33 	bl	8002506 <assert_failed>
 80088a0:	e00b      	b.n	80088ba <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2200      	movs	r2, #0
 80088a6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	2b17      	cmp	r3, #23
 80088ae:	d904      	bls.n	80088ba <HAL_RTC_SetTime+0xe2>
 80088b0:	f240 21c7 	movw	r1, #711	; 0x2c7
 80088b4:	486b      	ldr	r0, [pc, #428]	; (8008a64 <HAL_RTC_SetTime+0x28c>)
 80088b6:	f7f9 fe26 	bl	8002506 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	785b      	ldrb	r3, [r3, #1]
 80088be:	2b3b      	cmp	r3, #59	; 0x3b
 80088c0:	d904      	bls.n	80088cc <HAL_RTC_SetTime+0xf4>
 80088c2:	f240 21c9 	movw	r1, #713	; 0x2c9
 80088c6:	4867      	ldr	r0, [pc, #412]	; (8008a64 <HAL_RTC_SetTime+0x28c>)
 80088c8:	f7f9 fe1d 	bl	8002506 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	789b      	ldrb	r3, [r3, #2]
 80088d0:	2b3b      	cmp	r3, #59	; 0x3b
 80088d2:	d904      	bls.n	80088de <HAL_RTC_SetTime+0x106>
 80088d4:	f240 21ca 	movw	r1, #714	; 0x2ca
 80088d8:	4862      	ldr	r0, [pc, #392]	; (8008a64 <HAL_RTC_SetTime+0x28c>)
 80088da:	f7f9 fe14 	bl	8002506 <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 fd38 	bl	8009358 <RTC_ByteToBcd2>
 80088e8:	4603      	mov	r3, r0
 80088ea:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	785b      	ldrb	r3, [r3, #1]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 fd31 	bl	8009358 <RTC_ByteToBcd2>
 80088f6:	4603      	mov	r3, r0
 80088f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80088fa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	789b      	ldrb	r3, [r3, #2]
 8008900:	4618      	mov	r0, r3
 8008902:	f000 fd29 	bl	8009358 <RTC_ByteToBcd2>
 8008906:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008908:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	78db      	ldrb	r3, [r3, #3]
 8008910:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008912:	4313      	orrs	r3, r2
 8008914:	617b      	str	r3, [r7, #20]
 8008916:	e062      	b.n	80089de <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008922:	2b00      	cmp	r3, #0
 8008924:	d022      	beq.n	800896c <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	4618      	mov	r0, r3
 800892c:	f000 fd31 	bl	8009392 <RTC_Bcd2ToByte>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d007      	beq.n	8008946 <HAL_RTC_SetTime+0x16e>
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	4618      	mov	r0, r3
 800893c:	f000 fd29 	bl	8009392 <RTC_Bcd2ToByte>
 8008940:	4603      	mov	r3, r0
 8008942:	2b0c      	cmp	r3, #12
 8008944:	d904      	bls.n	8008950 <HAL_RTC_SetTime+0x178>
 8008946:	f240 21d5 	movw	r1, #725	; 0x2d5
 800894a:	4846      	ldr	r0, [pc, #280]	; (8008a64 <HAL_RTC_SetTime+0x28c>)
 800894c:	f7f9 fddb 	bl	8002506 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	78db      	ldrb	r3, [r3, #3]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d019      	beq.n	800898c <HAL_RTC_SetTime+0x1b4>
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	78db      	ldrb	r3, [r3, #3]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d015      	beq.n	800898c <HAL_RTC_SetTime+0x1b4>
 8008960:	f240 21d6 	movw	r1, #726	; 0x2d6
 8008964:	483f      	ldr	r0, [pc, #252]	; (8008a64 <HAL_RTC_SetTime+0x28c>)
 8008966:	f7f9 fdce 	bl	8002506 <assert_failed>
 800896a:	e00f      	b.n	800898c <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2200      	movs	r2, #0
 8008970:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	4618      	mov	r0, r3
 8008978:	f000 fd0b 	bl	8009392 <RTC_Bcd2ToByte>
 800897c:	4603      	mov	r3, r0
 800897e:	2b17      	cmp	r3, #23
 8008980:	d904      	bls.n	800898c <HAL_RTC_SetTime+0x1b4>
 8008982:	f240 21db 	movw	r1, #731	; 0x2db
 8008986:	4837      	ldr	r0, [pc, #220]	; (8008a64 <HAL_RTC_SetTime+0x28c>)
 8008988:	f7f9 fdbd 	bl	8002506 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	785b      	ldrb	r3, [r3, #1]
 8008990:	4618      	mov	r0, r3
 8008992:	f000 fcfe 	bl	8009392 <RTC_Bcd2ToByte>
 8008996:	4603      	mov	r3, r0
 8008998:	2b3b      	cmp	r3, #59	; 0x3b
 800899a:	d904      	bls.n	80089a6 <HAL_RTC_SetTime+0x1ce>
 800899c:	f240 21dd 	movw	r1, #733	; 0x2dd
 80089a0:	4830      	ldr	r0, [pc, #192]	; (8008a64 <HAL_RTC_SetTime+0x28c>)
 80089a2:	f7f9 fdb0 	bl	8002506 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	789b      	ldrb	r3, [r3, #2]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 fcf1 	bl	8009392 <RTC_Bcd2ToByte>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b3b      	cmp	r3, #59	; 0x3b
 80089b4:	d904      	bls.n	80089c0 <HAL_RTC_SetTime+0x1e8>
 80089b6:	f240 21de 	movw	r1, #734	; 0x2de
 80089ba:	482a      	ldr	r0, [pc, #168]	; (8008a64 <HAL_RTC_SetTime+0x28c>)
 80089bc:	f7f9 fda3 	bl	8002506 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	785b      	ldrb	r3, [r3, #1]
 80089ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80089cc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80089d2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	78db      	ldrb	r3, [r3, #3]
 80089d8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80089da:	4313      	orrs	r3, r2
 80089dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	22ca      	movs	r2, #202	; 0xca
 80089e4:	625a      	str	r2, [r3, #36]	; 0x24
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2253      	movs	r2, #83	; 0x53
 80089ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 fc56 	bl	80092a0 <RTC_EnterInitMode>
 80089f4:	4603      	mov	r3, r0
 80089f6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80089f8:	7cfb      	ldrb	r3, [r7, #19]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d120      	bne.n	8008a40 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008a08:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008a0c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	689a      	ldr	r2, [r3, #8]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6899      	ldr	r1, [r3, #8]
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	68da      	ldr	r2, [r3, #12]
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f000 fc69 	bl	800930e <RTC_ExitInitMode>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008a40:	7cfb      	ldrb	r3, [r7, #19]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d102      	bne.n	8008a4c <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	22ff      	movs	r2, #255	; 0xff
 8008a52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	771a      	strb	r2, [r3, #28]

  return status;
 8008a5a:	7cfb      	ldrb	r3, [r7, #19]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	371c      	adds	r7, #28
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd90      	pop	{r4, r7, pc}
 8008a64:	0800f184 	.word	0x0800f184

08008a68 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008a68:	b590      	push	{r4, r7, lr}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d007      	beq.n	8008a8e <HAL_RTC_SetDate+0x26>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d004      	beq.n	8008a8e <HAL_RTC_SetDate+0x26>
 8008a84:	f240 3153 	movw	r1, #851	; 0x353
 8008a88:	487c      	ldr	r0, [pc, #496]	; (8008c7c <HAL_RTC_SetDate+0x214>)
 8008a8a:	f7f9 fd3c 	bl	8002506 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	7f1b      	ldrb	r3, [r3, #28]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d101      	bne.n	8008a9a <HAL_RTC_SetDate+0x32>
 8008a96:	2302      	movs	r3, #2
 8008a98:	e0ec      	b.n	8008c74 <HAL_RTC_SetDate+0x20c>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10e      	bne.n	8008aca <HAL_RTC_SetDate+0x62>
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	785b      	ldrb	r3, [r3, #1]
 8008ab0:	f003 0310 	and.w	r3, r3, #16
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d008      	beq.n	8008aca <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	785b      	ldrb	r3, [r3, #1]
 8008abc:	f023 0310 	bic.w	r3, r3, #16
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	330a      	adds	r3, #10
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d01c      	beq.n	8008b0c <HAL_RTC_SetDate+0xa4>
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d018      	beq.n	8008b0c <HAL_RTC_SetDate+0xa4>
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	2b03      	cmp	r3, #3
 8008ae0:	d014      	beq.n	8008b0c <HAL_RTC_SetDate+0xa4>
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	2b04      	cmp	r3, #4
 8008ae8:	d010      	beq.n	8008b0c <HAL_RTC_SetDate+0xa4>
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	2b05      	cmp	r3, #5
 8008af0:	d00c      	beq.n	8008b0c <HAL_RTC_SetDate+0xa4>
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	2b06      	cmp	r3, #6
 8008af8:	d008      	beq.n	8008b0c <HAL_RTC_SetDate+0xa4>
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	2b07      	cmp	r3, #7
 8008b00:	d004      	beq.n	8008b0c <HAL_RTC_SetDate+0xa4>
 8008b02:	f240 315f 	movw	r1, #863	; 0x35f
 8008b06:	485d      	ldr	r0, [pc, #372]	; (8008c7c <HAL_RTC_SetDate+0x214>)
 8008b08:	f7f9 fcfd 	bl	8002506 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d13f      	bne.n	8008b92 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	78db      	ldrb	r3, [r3, #3]
 8008b16:	2b63      	cmp	r3, #99	; 0x63
 8008b18:	d904      	bls.n	8008b24 <HAL_RTC_SetDate+0xbc>
 8008b1a:	f240 3163 	movw	r1, #867	; 0x363
 8008b1e:	4857      	ldr	r0, [pc, #348]	; (8008c7c <HAL_RTC_SetDate+0x214>)
 8008b20:	f7f9 fcf1 	bl	8002506 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	785b      	ldrb	r3, [r3, #1]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <HAL_RTC_SetDate+0xcc>
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	785b      	ldrb	r3, [r3, #1]
 8008b30:	2b0c      	cmp	r3, #12
 8008b32:	d904      	bls.n	8008b3e <HAL_RTC_SetDate+0xd6>
 8008b34:	f44f 7159 	mov.w	r1, #868	; 0x364
 8008b38:	4850      	ldr	r0, [pc, #320]	; (8008c7c <HAL_RTC_SetDate+0x214>)
 8008b3a:	f7f9 fce4 	bl	8002506 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	789b      	ldrb	r3, [r3, #2]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d003      	beq.n	8008b4e <HAL_RTC_SetDate+0xe6>
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	789b      	ldrb	r3, [r3, #2]
 8008b4a:	2b1f      	cmp	r3, #31
 8008b4c:	d904      	bls.n	8008b58 <HAL_RTC_SetDate+0xf0>
 8008b4e:	f240 3165 	movw	r1, #869	; 0x365
 8008b52:	484a      	ldr	r0, [pc, #296]	; (8008c7c <HAL_RTC_SetDate+0x214>)
 8008b54:	f7f9 fcd7 	bl	8002506 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	78db      	ldrb	r3, [r3, #3]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 fbfb 	bl	8009358 <RTC_ByteToBcd2>
 8008b62:	4603      	mov	r3, r0
 8008b64:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	785b      	ldrb	r3, [r3, #1]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 fbf4 	bl	8009358 <RTC_ByteToBcd2>
 8008b70:	4603      	mov	r3, r0
 8008b72:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008b74:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	789b      	ldrb	r3, [r3, #2]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fbec 	bl	8009358 <RTC_ByteToBcd2>
 8008b80:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008b82:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]
 8008b90:	e045      	b.n	8008c1e <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	78db      	ldrb	r3, [r3, #3]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fbfb 	bl	8009392 <RTC_Bcd2ToByte>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b63      	cmp	r3, #99	; 0x63
 8008ba0:	d904      	bls.n	8008bac <HAL_RTC_SetDate+0x144>
 8008ba2:	f240 316e 	movw	r1, #878	; 0x36e
 8008ba6:	4835      	ldr	r0, [pc, #212]	; (8008c7c <HAL_RTC_SetDate+0x214>)
 8008ba8:	f7f9 fcad 	bl	8002506 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	785b      	ldrb	r3, [r3, #1]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 fbee 	bl	8009392 <RTC_Bcd2ToByte>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d007      	beq.n	8008bcc <HAL_RTC_SetDate+0x164>
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	785b      	ldrb	r3, [r3, #1]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 fbe6 	bl	8009392 <RTC_Bcd2ToByte>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b0c      	cmp	r3, #12
 8008bca:	d904      	bls.n	8008bd6 <HAL_RTC_SetDate+0x16e>
 8008bcc:	f240 316f 	movw	r1, #879	; 0x36f
 8008bd0:	482a      	ldr	r0, [pc, #168]	; (8008c7c <HAL_RTC_SetDate+0x214>)
 8008bd2:	f7f9 fc98 	bl	8002506 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	789b      	ldrb	r3, [r3, #2]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 fbd9 	bl	8009392 <RTC_Bcd2ToByte>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d007      	beq.n	8008bf6 <HAL_RTC_SetDate+0x18e>
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	789b      	ldrb	r3, [r3, #2]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 fbd1 	bl	8009392 <RTC_Bcd2ToByte>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b1f      	cmp	r3, #31
 8008bf4:	d904      	bls.n	8008c00 <HAL_RTC_SetDate+0x198>
 8008bf6:	f44f 715c 	mov.w	r1, #880	; 0x370
 8008bfa:	4820      	ldr	r0, [pc, #128]	; (8008c7c <HAL_RTC_SetDate+0x214>)
 8008bfc:	f7f9 fc83 	bl	8002506 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	78db      	ldrb	r3, [r3, #3]
 8008c04:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	785b      	ldrb	r3, [r3, #1]
 8008c0a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c0c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008c12:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	22ca      	movs	r2, #202	; 0xca
 8008c24:	625a      	str	r2, [r3, #36]	; 0x24
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2253      	movs	r2, #83	; 0x53
 8008c2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 fb36 	bl	80092a0 <RTC_EnterInitMode>
 8008c34:	4603      	mov	r3, r0
 8008c36:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008c38:	7cfb      	ldrb	r3, [r7, #19]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10c      	bne.n	8008c58 <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008c48:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c4c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 fb5d 	bl	800930e <RTC_ExitInitMode>
 8008c54:	4603      	mov	r3, r0
 8008c56:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008c58:	7cfb      	ldrb	r3, [r7, #19]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d102      	bne.n	8008c64 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2201      	movs	r2, #1
 8008c62:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	22ff      	movs	r2, #255	; 0xff
 8008c6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	771a      	strb	r2, [r3, #28]

  return status;
 8008c72:	7cfb      	ldrb	r3, [r7, #19]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	371c      	adds	r7, #28
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd90      	pop	{r4, r7, pc}
 8008c7c:	0800f184 	.word	0x0800f184

08008c80 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008c80:	b590      	push	{r4, r7, lr}
 8008c82:	b089      	sub	sp, #36	; 0x24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008c90:	2300      	movs	r3, #0
 8008c92:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d007      	beq.n	8008cae <HAL_RTC_SetAlarm+0x2e>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d004      	beq.n	8008cae <HAL_RTC_SetAlarm+0x2e>
 8008ca4:	f240 31e7 	movw	r1, #999	; 0x3e7
 8008ca8:	4876      	ldr	r0, [pc, #472]	; (8008e84 <HAL_RTC_SetAlarm+0x204>)
 8008caa:	f7f9 fc2c 	bl	8002506 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cb6:	d009      	beq.n	8008ccc <HAL_RTC_SetAlarm+0x4c>
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cc0:	d004      	beq.n	8008ccc <HAL_RTC_SetAlarm+0x4c>
 8008cc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008cc6:	486f      	ldr	r0, [pc, #444]	; (8008e84 <HAL_RTC_SetAlarm+0x204>)
 8008cc8:	f7f9 fc1d 	bl	8002506 <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	695b      	ldr	r3, [r3, #20]
 8008cd0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d004      	beq.n	8008ce2 <HAL_RTC_SetAlarm+0x62>
 8008cd8:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8008cdc:	4869      	ldr	r0, [pc, #420]	; (8008e84 <HAL_RTC_SetAlarm+0x204>)
 8008cde:	f7f9 fc12 	bl	8002506 <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d009      	beq.n	8008cfe <HAL_RTC_SetAlarm+0x7e>
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cf2:	d004      	beq.n	8008cfe <HAL_RTC_SetAlarm+0x7e>
 8008cf4:	f240 31ea 	movw	r1, #1002	; 0x3ea
 8008cf8:	4862      	ldr	r0, [pc, #392]	; (8008e84 <HAL_RTC_SetAlarm+0x204>)
 8008cfa:	f7f9 fc04 	bl	8002506 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d06:	d304      	bcc.n	8008d12 <HAL_RTC_SetAlarm+0x92>
 8008d08:	f240 31eb 	movw	r1, #1003	; 0x3eb
 8008d0c:	485d      	ldr	r0, [pc, #372]	; (8008e84 <HAL_RTC_SetAlarm+0x204>)
 8008d0e:	f7f9 fbfa 	bl	8002506 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	699b      	ldr	r3, [r3, #24]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d04f      	beq.n	8008dba <HAL_RTC_SetAlarm+0x13a>
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d22:	d04a      	beq.n	8008dba <HAL_RTC_SetAlarm+0x13a>
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d2c:	d045      	beq.n	8008dba <HAL_RTC_SetAlarm+0x13a>
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d36:	d040      	beq.n	8008dba <HAL_RTC_SetAlarm+0x13a>
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d40:	d03b      	beq.n	8008dba <HAL_RTC_SetAlarm+0x13a>
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008d4a:	d036      	beq.n	8008dba <HAL_RTC_SetAlarm+0x13a>
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8008d54:	d031      	beq.n	8008dba <HAL_RTC_SetAlarm+0x13a>
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8008d5e:	d02c      	beq.n	8008dba <HAL_RTC_SetAlarm+0x13a>
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d68:	d027      	beq.n	8008dba <HAL_RTC_SetAlarm+0x13a>
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8008d72:	d022      	beq.n	8008dba <HAL_RTC_SetAlarm+0x13a>
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8008d7c:	d01d      	beq.n	8008dba <HAL_RTC_SetAlarm+0x13a>
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8008d86:	d018      	beq.n	8008dba <HAL_RTC_SetAlarm+0x13a>
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008d90:	d013      	beq.n	8008dba <HAL_RTC_SetAlarm+0x13a>
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8008d9a:	d00e      	beq.n	8008dba <HAL_RTC_SetAlarm+0x13a>
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8008da4:	d009      	beq.n	8008dba <HAL_RTC_SetAlarm+0x13a>
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008dae:	d004      	beq.n	8008dba <HAL_RTC_SetAlarm+0x13a>
 8008db0:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
 8008db4:	4833      	ldr	r0, [pc, #204]	; (8008e84 <HAL_RTC_SetAlarm+0x204>)
 8008db6:	f7f9 fba6 	bl	8002506 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	7f1b      	ldrb	r3, [r3, #28]
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d101      	bne.n	8008dc6 <HAL_RTC_SetAlarm+0x146>
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	e235      	b.n	8009232 <HAL_RTC_SetAlarm+0x5b2>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2202      	movs	r2, #2
 8008dd0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f040 80ad 	bne.w	8008f34 <HAL_RTC_SetAlarm+0x2b4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d01a      	beq.n	8008e1e <HAL_RTC_SetAlarm+0x19e>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d003      	beq.n	8008df8 <HAL_RTC_SetAlarm+0x178>
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	2b0c      	cmp	r3, #12
 8008df6:	d904      	bls.n	8008e02 <HAL_RTC_SetAlarm+0x182>
 8008df8:	f240 31fa 	movw	r1, #1018	; 0x3fa
 8008dfc:	4821      	ldr	r0, [pc, #132]	; (8008e84 <HAL_RTC_SetAlarm+0x204>)
 8008dfe:	f7f9 fb82 	bl	8002506 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	78db      	ldrb	r3, [r3, #3]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d015      	beq.n	8008e36 <HAL_RTC_SetAlarm+0x1b6>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	78db      	ldrb	r3, [r3, #3]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d011      	beq.n	8008e36 <HAL_RTC_SetAlarm+0x1b6>
 8008e12:	f240 31fb 	movw	r1, #1019	; 0x3fb
 8008e16:	481b      	ldr	r0, [pc, #108]	; (8008e84 <HAL_RTC_SetAlarm+0x204>)
 8008e18:	f7f9 fb75 	bl	8002506 <assert_failed>
 8008e1c:	e00b      	b.n	8008e36 <HAL_RTC_SetAlarm+0x1b6>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2200      	movs	r2, #0
 8008e22:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	2b17      	cmp	r3, #23
 8008e2a:	d904      	bls.n	8008e36 <HAL_RTC_SetAlarm+0x1b6>
 8008e2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008e30:	4814      	ldr	r0, [pc, #80]	; (8008e84 <HAL_RTC_SetAlarm+0x204>)
 8008e32:	f7f9 fb68 	bl	8002506 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	785b      	ldrb	r3, [r3, #1]
 8008e3a:	2b3b      	cmp	r3, #59	; 0x3b
 8008e3c:	d904      	bls.n	8008e48 <HAL_RTC_SetAlarm+0x1c8>
 8008e3e:	f240 4102 	movw	r1, #1026	; 0x402
 8008e42:	4810      	ldr	r0, [pc, #64]	; (8008e84 <HAL_RTC_SetAlarm+0x204>)
 8008e44:	f7f9 fb5f 	bl	8002506 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	789b      	ldrb	r3, [r3, #2]
 8008e4c:	2b3b      	cmp	r3, #59	; 0x3b
 8008e4e:	d904      	bls.n	8008e5a <HAL_RTC_SetAlarm+0x1da>
 8008e50:	f240 4103 	movw	r1, #1027	; 0x403
 8008e54:	480b      	ldr	r0, [pc, #44]	; (8008e84 <HAL_RTC_SetAlarm+0x204>)
 8008e56:	f7f9 fb56 	bl	8002506 <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d112      	bne.n	8008e88 <HAL_RTC_SetAlarm+0x208>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d004      	beq.n	8008e76 <HAL_RTC_SetAlarm+0x1f6>
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e72:	2b1f      	cmp	r3, #31
 8008e74:	d930      	bls.n	8008ed8 <HAL_RTC_SetAlarm+0x258>
 8008e76:	f240 4107 	movw	r1, #1031	; 0x407
 8008e7a:	4802      	ldr	r0, [pc, #8]	; (8008e84 <HAL_RTC_SetAlarm+0x204>)
 8008e7c:	f7f9 fb43 	bl	8002506 <assert_failed>
 8008e80:	e02a      	b.n	8008ed8 <HAL_RTC_SetAlarm+0x258>
 8008e82:	bf00      	nop
 8008e84:	0800f184 	.word	0x0800f184
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d022      	beq.n	8008ed8 <HAL_RTC_SetAlarm+0x258>
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d01d      	beq.n	8008ed8 <HAL_RTC_SetAlarm+0x258>
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d018      	beq.n	8008ed8 <HAL_RTC_SetAlarm+0x258>
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	d013      	beq.n	8008ed8 <HAL_RTC_SetAlarm+0x258>
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008eb6:	2b05      	cmp	r3, #5
 8008eb8:	d00e      	beq.n	8008ed8 <HAL_RTC_SetAlarm+0x258>
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ec0:	2b06      	cmp	r3, #6
 8008ec2:	d009      	beq.n	8008ed8 <HAL_RTC_SetAlarm+0x258>
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008eca:	2b07      	cmp	r3, #7
 8008ecc:	d004      	beq.n	8008ed8 <HAL_RTC_SetAlarm+0x258>
 8008ece:	f240 410b 	movw	r1, #1035	; 0x40b
 8008ed2:	48a1      	ldr	r0, [pc, #644]	; (8009158 <HAL_RTC_SetAlarm+0x4d8>)
 8008ed4:	f7f9 fb17 	bl	8002506 <assert_failed>
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 fa3b 	bl	8009358 <RTC_ByteToBcd2>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	785b      	ldrb	r3, [r3, #1]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 fa34 	bl	8009358 <RTC_ByteToBcd2>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008ef4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	789b      	ldrb	r3, [r3, #2]
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 fa2c 	bl	8009358 <RTC_ByteToBcd2>
 8008f00:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008f02:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	78db      	ldrb	r3, [r3, #3]
 8008f0a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008f0c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 fa1e 	bl	8009358 <RTC_ByteToBcd2>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008f20:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008f28:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	61fb      	str	r3, [r7, #28]
 8008f32:	e0cd      	b.n	80090d0 <HAL_RTC_SetAlarm+0x450>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d022      	beq.n	8008f88 <HAL_RTC_SetAlarm+0x308>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	4618      	mov	r0, r3
 8008f48:	f000 fa23 	bl	8009392 <RTC_Bcd2ToByte>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d007      	beq.n	8008f62 <HAL_RTC_SetAlarm+0x2e2>
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 fa1b 	bl	8009392 <RTC_Bcd2ToByte>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b0c      	cmp	r3, #12
 8008f60:	d904      	bls.n	8008f6c <HAL_RTC_SetAlarm+0x2ec>
 8008f62:	f240 411a 	movw	r1, #1050	; 0x41a
 8008f66:	487c      	ldr	r0, [pc, #496]	; (8009158 <HAL_RTC_SetAlarm+0x4d8>)
 8008f68:	f7f9 facd 	bl	8002506 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	78db      	ldrb	r3, [r3, #3]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d019      	beq.n	8008fa8 <HAL_RTC_SetAlarm+0x328>
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	78db      	ldrb	r3, [r3, #3]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d015      	beq.n	8008fa8 <HAL_RTC_SetAlarm+0x328>
 8008f7c:	f240 411b 	movw	r1, #1051	; 0x41b
 8008f80:	4875      	ldr	r0, [pc, #468]	; (8009158 <HAL_RTC_SetAlarm+0x4d8>)
 8008f82:	f7f9 fac0 	bl	8002506 <assert_failed>
 8008f86:	e00f      	b.n	8008fa8 <HAL_RTC_SetAlarm+0x328>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 f9fd 	bl	8009392 <RTC_Bcd2ToByte>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b17      	cmp	r3, #23
 8008f9c:	d904      	bls.n	8008fa8 <HAL_RTC_SetAlarm+0x328>
 8008f9e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8008fa2:	486d      	ldr	r0, [pc, #436]	; (8009158 <HAL_RTC_SetAlarm+0x4d8>)
 8008fa4:	f7f9 faaf 	bl	8002506 <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	785b      	ldrb	r3, [r3, #1]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f000 f9f0 	bl	8009392 <RTC_Bcd2ToByte>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b3b      	cmp	r3, #59	; 0x3b
 8008fb6:	d904      	bls.n	8008fc2 <HAL_RTC_SetAlarm+0x342>
 8008fb8:	f240 4123 	movw	r1, #1059	; 0x423
 8008fbc:	4866      	ldr	r0, [pc, #408]	; (8009158 <HAL_RTC_SetAlarm+0x4d8>)
 8008fbe:	f7f9 faa2 	bl	8002506 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	789b      	ldrb	r3, [r3, #2]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 f9e3 	bl	8009392 <RTC_Bcd2ToByte>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b3b      	cmp	r3, #59	; 0x3b
 8008fd0:	d904      	bls.n	8008fdc <HAL_RTC_SetAlarm+0x35c>
 8008fd2:	f240 4124 	movw	r1, #1060	; 0x424
 8008fd6:	4860      	ldr	r0, [pc, #384]	; (8009158 <HAL_RTC_SetAlarm+0x4d8>)
 8008fd8:	f7f9 fa95 	bl	8002506 <assert_failed>

    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d117      	bne.n	8009014 <HAL_RTC_SetAlarm+0x394>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 f9d1 	bl	8009392 <RTC_Bcd2ToByte>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d008      	beq.n	8009008 <HAL_RTC_SetAlarm+0x388>
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f000 f9c8 	bl	8009392 <RTC_Bcd2ToByte>
 8009002:	4603      	mov	r3, r0
 8009004:	2b1f      	cmp	r3, #31
 8009006:	d949      	bls.n	800909c <HAL_RTC_SetAlarm+0x41c>
 8009008:	f44f 6185 	mov.w	r1, #1064	; 0x428
 800900c:	4852      	ldr	r0, [pc, #328]	; (8009158 <HAL_RTC_SetAlarm+0x4d8>)
 800900e:	f7f9 fa7a 	bl	8002506 <assert_failed>
 8009012:	e043      	b.n	800909c <HAL_RTC_SetAlarm+0x41c>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800901a:	4618      	mov	r0, r3
 800901c:	f000 f9b9 	bl	8009392 <RTC_Bcd2ToByte>
 8009020:	4603      	mov	r3, r0
 8009022:	2b01      	cmp	r3, #1
 8009024:	d03a      	beq.n	800909c <HAL_RTC_SetAlarm+0x41c>
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	f893 3020 	ldrb.w	r3, [r3, #32]
 800902c:	4618      	mov	r0, r3
 800902e:	f000 f9b0 	bl	8009392 <RTC_Bcd2ToByte>
 8009032:	4603      	mov	r3, r0
 8009034:	2b02      	cmp	r3, #2
 8009036:	d031      	beq.n	800909c <HAL_RTC_SetAlarm+0x41c>
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800903e:	4618      	mov	r0, r3
 8009040:	f000 f9a7 	bl	8009392 <RTC_Bcd2ToByte>
 8009044:	4603      	mov	r3, r0
 8009046:	2b03      	cmp	r3, #3
 8009048:	d028      	beq.n	800909c <HAL_RTC_SetAlarm+0x41c>
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009050:	4618      	mov	r0, r3
 8009052:	f000 f99e 	bl	8009392 <RTC_Bcd2ToByte>
 8009056:	4603      	mov	r3, r0
 8009058:	2b04      	cmp	r3, #4
 800905a:	d01f      	beq.n	800909c <HAL_RTC_SetAlarm+0x41c>
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009062:	4618      	mov	r0, r3
 8009064:	f000 f995 	bl	8009392 <RTC_Bcd2ToByte>
 8009068:	4603      	mov	r3, r0
 800906a:	2b05      	cmp	r3, #5
 800906c:	d016      	beq.n	800909c <HAL_RTC_SetAlarm+0x41c>
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009074:	4618      	mov	r0, r3
 8009076:	f000 f98c 	bl	8009392 <RTC_Bcd2ToByte>
 800907a:	4603      	mov	r3, r0
 800907c:	2b06      	cmp	r3, #6
 800907e:	d00d      	beq.n	800909c <HAL_RTC_SetAlarm+0x41c>
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009086:	4618      	mov	r0, r3
 8009088:	f000 f983 	bl	8009392 <RTC_Bcd2ToByte>
 800908c:	4603      	mov	r3, r0
 800908e:	2b07      	cmp	r3, #7
 8009090:	d004      	beq.n	800909c <HAL_RTC_SetAlarm+0x41c>
 8009092:	f240 412c 	movw	r1, #1068	; 0x42c
 8009096:	4830      	ldr	r0, [pc, #192]	; (8009158 <HAL_RTC_SetAlarm+0x4d8>)
 8009098:	f7f9 fa35 	bl	8002506 <assert_failed>
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	785b      	ldrb	r3, [r3, #1]
 80090a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80090a8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80090ae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	78db      	ldrb	r3, [r3, #3]
 80090b4:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80090b6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090be:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80090c0:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80090c6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80090cc:	4313      	orrs	r3, r2
 80090ce:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80090d8:	4313      	orrs	r3, r2
 80090da:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	22ca      	movs	r2, #202	; 0xca
 80090e2:	625a      	str	r2, [r3, #36]	; 0x24
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2253      	movs	r2, #83	; 0x53
 80090ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090f4:	d14a      	bne.n	800918c <HAL_RTC_SetAlarm+0x50c>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	689a      	ldr	r2, [r3, #8]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009104:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	689a      	ldr	r2, [r3, #8]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009114:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	b2da      	uxtb	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8009126:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009128:	f7fa f878 	bl	800321c <HAL_GetTick>
 800912c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800912e:	e015      	b.n	800915c <HAL_RTC_SetAlarm+0x4dc>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009130:	f7fa f874 	bl	800321c <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800913e:	d90d      	bls.n	800915c <HAL_RTC_SetAlarm+0x4dc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	22ff      	movs	r2, #255	; 0xff
 8009146:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2203      	movs	r2, #3
 800914c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009154:	2303      	movs	r3, #3
 8009156:	e06c      	b.n	8009232 <HAL_RTC_SetAlarm+0x5b2>
 8009158:	0800f184 	.word	0x0800f184
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	d0e2      	beq.n	8009130 <HAL_RTC_SetAlarm+0x4b0>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	69fa      	ldr	r2, [r7, #28]
 8009170:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689a      	ldr	r2, [r3, #8]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009188:	609a      	str	r2, [r3, #8]
 800918a:	e047      	b.n	800921c <HAL_RTC_SetAlarm+0x59c>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689a      	ldr	r2, [r3, #8]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800919a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689a      	ldr	r2, [r3, #8]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091aa:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f462 7220 	orn	r2, r2, #640	; 0x280
 80091bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091be:	f7fa f82d 	bl	800321c <HAL_GetTick>
 80091c2:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80091c4:	e013      	b.n	80091ee <HAL_RTC_SetAlarm+0x56e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80091c6:	f7fa f829 	bl	800321c <HAL_GetTick>
 80091ca:	4602      	mov	r2, r0
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091d4:	d90b      	bls.n	80091ee <HAL_RTC_SetAlarm+0x56e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	22ff      	movs	r2, #255	; 0xff
 80091dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2203      	movs	r2, #3
 80091e2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e021      	b.n	8009232 <HAL_RTC_SetAlarm+0x5b2>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	f003 0302 	and.w	r3, r3, #2
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d0e4      	beq.n	80091c6 <HAL_RTC_SetAlarm+0x546>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	69fa      	ldr	r2, [r7, #28]
 8009202:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689a      	ldr	r2, [r3, #8]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800921a:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	22ff      	movs	r2, #255	; 0xff
 8009222:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2201      	movs	r2, #1
 8009228:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3724      	adds	r7, #36	; 0x24
 8009236:	46bd      	mov	sp, r7
 8009238:	bd90      	pop	{r4, r7, pc}
 800923a:	bf00      	nop

0800923c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009258:	2300      	movs	r3, #0
 800925a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68da      	ldr	r2, [r3, #12]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800926a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800926c:	f7f9 ffd6 	bl	800321c <HAL_GetTick>
 8009270:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009272:	e009      	b.n	8009288 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009274:	f7f9 ffd2 	bl	800321c <HAL_GetTick>
 8009278:	4602      	mov	r2, r0
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009282:	d901      	bls.n	8009288 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e007      	b.n	8009298 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	f003 0320 	and.w	r3, r3, #32
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0ee      	beq.n	8009274 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80092a8:	2300      	movs	r3, #0
 80092aa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d122      	bne.n	8009304 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68da      	ldr	r2, [r3, #12]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80092cc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80092ce:	f7f9 ffa5 	bl	800321c <HAL_GetTick>
 80092d2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80092d4:	e00c      	b.n	80092f0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80092d6:	f7f9 ffa1 	bl	800321c <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092e4:	d904      	bls.n	80092f0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2204      	movs	r2, #4
 80092ea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d102      	bne.n	8009304 <RTC_EnterInitMode+0x64>
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d1e8      	bne.n	80092d6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009304:	7bfb      	ldrb	r3, [r7, #15]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b084      	sub	sp, #16
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68da      	ldr	r2, [r3, #12]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009328:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f003 0320 	and.w	r3, r3, #32
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10a      	bne.n	800934e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7ff ff89 	bl	8009250 <HAL_RTC_WaitForSynchro>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d004      	beq.n	800934e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2204      	movs	r2, #4
 8009348:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800934e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	4603      	mov	r3, r0
 8009360:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8009362:	2300      	movs	r3, #0
 8009364:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8009366:	e005      	b.n	8009374 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009368:	7bfb      	ldrb	r3, [r7, #15]
 800936a:	3301      	adds	r3, #1
 800936c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800936e:	79fb      	ldrb	r3, [r7, #7]
 8009370:	3b0a      	subs	r3, #10
 8009372:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009374:	79fb      	ldrb	r3, [r7, #7]
 8009376:	2b09      	cmp	r3, #9
 8009378:	d8f6      	bhi.n	8009368 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800937a:	7bfb      	ldrb	r3, [r7, #15]
 800937c:	011b      	lsls	r3, r3, #4
 800937e:	b2da      	uxtb	r2, r3
 8009380:	79fb      	ldrb	r3, [r7, #7]
 8009382:	4313      	orrs	r3, r2
 8009384:	b2db      	uxtb	r3, r3
}
 8009386:	4618      	mov	r0, r3
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009392:	b480      	push	{r7}
 8009394:	b085      	sub	sp, #20
 8009396:	af00      	add	r7, sp, #0
 8009398:	4603      	mov	r3, r0
 800939a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80093a0:	79fb      	ldrb	r3, [r7, #7]
 80093a2:	091b      	lsrs	r3, r3, #4
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	461a      	mov	r2, r3
 80093a8:	0092      	lsls	r2, r2, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	005b      	lsls	r3, r3, #1
 80093ae:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80093b0:	79fb      	ldrb	r3, [r7, #7]
 80093b2:	f003 030f 	and.w	r3, r3, #15
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
 80093ba:	4413      	add	r3, r2
 80093bc:	b2db      	uxtb	r3, r3
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b083      	sub	sp, #12
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 80093d2:	bf00      	nop
 80093d4:	370c      	adds	r7, #12
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80093de:	b480      	push	{r7}
 80093e0:	b083      	sub	sp, #12
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 80093e6:	bf00      	nop
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
	...

080093f4 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009400:	2300      	movs	r3, #0
 8009402:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d013      	beq.n	8009432 <HAL_RTCEx_SetWakeUpTimer+0x3e>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d010      	beq.n	8009432 <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b02      	cmp	r3, #2
 8009414:	d00d      	beq.n	8009432 <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b03      	cmp	r3, #3
 800941a:	d00a      	beq.n	8009432 <HAL_RTCEx_SetWakeUpTimer+0x3e>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b04      	cmp	r3, #4
 8009420:	d007      	beq.n	8009432 <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2b06      	cmp	r3, #6
 8009426:	d004      	beq.n	8009432 <HAL_RTCEx_SetWakeUpTimer+0x3e>
 8009428:	f240 3165 	movw	r1, #869	; 0x365
 800942c:	4850      	ldr	r0, [pc, #320]	; (8009570 <HAL_RTCEx_SetWakeUpTimer+0x17c>)
 800942e:	f7f9 f86a 	bl	8002506 <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009438:	d304      	bcc.n	8009444 <HAL_RTCEx_SetWakeUpTimer+0x50>
 800943a:	f240 3166 	movw	r1, #870	; 0x366
 800943e:	484c      	ldr	r0, [pc, #304]	; (8009570 <HAL_RTCEx_SetWakeUpTimer+0x17c>)
 8009440:	f7f9 f861 	bl	8002506 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	7f1b      	ldrb	r3, [r3, #28]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d101      	bne.n	8009450 <HAL_RTCEx_SetWakeUpTimer+0x5c>
 800944c:	2302      	movs	r3, #2
 800944e:	e08a      	b.n	8009566 <HAL_RTCEx_SetWakeUpTimer+0x172>
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2201      	movs	r2, #1
 8009454:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2202      	movs	r2, #2
 800945a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	22ca      	movs	r2, #202	; 0xca
 8009462:	625a      	str	r2, [r3, #36]	; 0x24
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2253      	movs	r2, #83	; 0x53
 800946a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009476:	2b00      	cmp	r3, #0
 8009478:	d01e      	beq.n	80094b8 <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    tickstart = HAL_GetTick();
 800947a:	f7f9 fecf 	bl	800321c <HAL_GetTick>
 800947e:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8009480:	e013      	b.n	80094aa <HAL_RTCEx_SetWakeUpTimer+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009482:	f7f9 fecb 	bl	800321c <HAL_GetTick>
 8009486:	4602      	mov	r2, r0
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009490:	d90b      	bls.n	80094aa <HAL_RTCEx_SetWakeUpTimer+0xb6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	22ff      	movs	r2, #255	; 0xff
 8009498:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2203      	movs	r2, #3
 800949e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	e05d      	b.n	8009566 <HAL_RTCEx_SetWakeUpTimer+0x172>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	f003 0304 	and.w	r3, r3, #4
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1e4      	bne.n	8009482 <HAL_RTCEx_SetWakeUpTimer+0x8e>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	689a      	ldr	r2, [r3, #8]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094c6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	b2da      	uxtb	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80094d8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80094da:	f7f9 fe9f 	bl	800321c <HAL_GetTick>
 80094de:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80094e0:	e013      	b.n	800950a <HAL_RTCEx_SetWakeUpTimer+0x116>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80094e2:	f7f9 fe9b 	bl	800321c <HAL_GetTick>
 80094e6:	4602      	mov	r2, r0
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094f0:	d90b      	bls.n	800950a <HAL_RTCEx_SetWakeUpTimer+0x116>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	22ff      	movs	r2, #255	; 0xff
 80094f8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2203      	movs	r2, #3
 80094fe:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e02d      	b.n	8009566 <HAL_RTCEx_SetWakeUpTimer+0x172>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b00      	cmp	r3, #0
 8009516:	d0e4      	beq.n	80094e2 <HAL_RTCEx_SetWakeUpTimer+0xee>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689a      	ldr	r2, [r3, #8]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f022 0207 	bic.w	r2, r2, #7
 8009526:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6899      	ldr	r1, [r3, #8]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	430a      	orrs	r2, r1
 8009536:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689a      	ldr	r2, [r3, #8]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800954e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	22ff      	movs	r2, #255	; 0xff
 8009556:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2201      	movs	r2, #1
 800955c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3718      	adds	r7, #24
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	0800f1f8 	.word	0x0800f1f8

08009574 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e1ac      	b.n	8009908 <HAL_SPI_Init+0x36c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a75      	ldr	r2, [pc, #468]	; (8009788 <HAL_SPI_Init+0x1ec>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d018      	beq.n	80095ea <HAL_SPI_Init+0x4e>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a73      	ldr	r2, [pc, #460]	; (800978c <HAL_SPI_Init+0x1f0>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d013      	beq.n	80095ea <HAL_SPI_Init+0x4e>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a72      	ldr	r2, [pc, #456]	; (8009790 <HAL_SPI_Init+0x1f4>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d00e      	beq.n	80095ea <HAL_SPI_Init+0x4e>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a70      	ldr	r2, [pc, #448]	; (8009794 <HAL_SPI_Init+0x1f8>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d009      	beq.n	80095ea <HAL_SPI_Init+0x4e>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a6f      	ldr	r2, [pc, #444]	; (8009798 <HAL_SPI_Init+0x1fc>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d004      	beq.n	80095ea <HAL_SPI_Init+0x4e>
 80095e0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80095e4:	486d      	ldr	r0, [pc, #436]	; (800979c <HAL_SPI_Init+0x200>)
 80095e6:	f7f8 ff8e 	bl	8002506 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d009      	beq.n	8009606 <HAL_SPI_Init+0x6a>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095fa:	d004      	beq.n	8009606 <HAL_SPI_Init+0x6a>
 80095fc:	f240 1141 	movw	r1, #321	; 0x141
 8009600:	4866      	ldr	r0, [pc, #408]	; (800979c <HAL_SPI_Init+0x200>)
 8009602:	f7f8 ff80 	bl	8002506 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00e      	beq.n	800962c <HAL_SPI_Init+0x90>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009616:	d009      	beq.n	800962c <HAL_SPI_Init+0x90>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009620:	d004      	beq.n	800962c <HAL_SPI_Init+0x90>
 8009622:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8009626:	485d      	ldr	r0, [pc, #372]	; (800979c <HAL_SPI_Init+0x200>)
 8009628:	f7f8 ff6d 	bl	8002506 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009634:	d008      	beq.n	8009648 <HAL_SPI_Init+0xac>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d004      	beq.n	8009648 <HAL_SPI_Init+0xac>
 800963e:	f240 1143 	movw	r1, #323	; 0x143
 8009642:	4856      	ldr	r0, [pc, #344]	; (800979c <HAL_SPI_Init+0x200>)
 8009644:	f7f8 ff5f 	bl	8002506 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009650:	d00d      	beq.n	800966e <HAL_SPI_Init+0xd2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d009      	beq.n	800966e <HAL_SPI_Init+0xd2>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009662:	d004      	beq.n	800966e <HAL_SPI_Init+0xd2>
 8009664:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8009668:	484c      	ldr	r0, [pc, #304]	; (800979c <HAL_SPI_Init+0x200>)
 800966a:	f7f8 ff4c 	bl	8002506 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d020      	beq.n	80096b8 <HAL_SPI_Init+0x11c>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	2b08      	cmp	r3, #8
 800967c:	d01c      	beq.n	80096b8 <HAL_SPI_Init+0x11c>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	2b10      	cmp	r3, #16
 8009684:	d018      	beq.n	80096b8 <HAL_SPI_Init+0x11c>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	2b18      	cmp	r3, #24
 800968c:	d014      	beq.n	80096b8 <HAL_SPI_Init+0x11c>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	69db      	ldr	r3, [r3, #28]
 8009692:	2b20      	cmp	r3, #32
 8009694:	d010      	beq.n	80096b8 <HAL_SPI_Init+0x11c>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	69db      	ldr	r3, [r3, #28]
 800969a:	2b28      	cmp	r3, #40	; 0x28
 800969c:	d00c      	beq.n	80096b8 <HAL_SPI_Init+0x11c>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	2b30      	cmp	r3, #48	; 0x30
 80096a4:	d008      	beq.n	80096b8 <HAL_SPI_Init+0x11c>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	69db      	ldr	r3, [r3, #28]
 80096aa:	2b38      	cmp	r3, #56	; 0x38
 80096ac:	d004      	beq.n	80096b8 <HAL_SPI_Init+0x11c>
 80096ae:	f240 1145 	movw	r1, #325	; 0x145
 80096b2:	483a      	ldr	r0, [pc, #232]	; (800979c <HAL_SPI_Init+0x200>)
 80096b4:	f7f8 ff27 	bl	8002506 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a1b      	ldr	r3, [r3, #32]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d008      	beq.n	80096d2 <HAL_SPI_Init+0x136>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	2b80      	cmp	r3, #128	; 0x80
 80096c6:	d004      	beq.n	80096d2 <HAL_SPI_Init+0x136>
 80096c8:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80096cc:	4833      	ldr	r0, [pc, #204]	; (800979c <HAL_SPI_Init+0x200>)
 80096ce:	f7f8 ff1a 	bl	8002506 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d008      	beq.n	80096ec <HAL_SPI_Init+0x150>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096de:	2b10      	cmp	r3, #16
 80096e0:	d004      	beq.n	80096ec <HAL_SPI_Init+0x150>
 80096e2:	f240 1147 	movw	r1, #327	; 0x147
 80096e6:	482d      	ldr	r0, [pc, #180]	; (800979c <HAL_SPI_Init+0x200>)
 80096e8:	f7f8 ff0d 	bl	8002506 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d155      	bne.n	80097a0 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d008      	beq.n	800970e <HAL_SPI_Init+0x172>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	2b02      	cmp	r3, #2
 8009702:	d004      	beq.n	800970e <HAL_SPI_Init+0x172>
 8009704:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8009708:	4824      	ldr	r0, [pc, #144]	; (800979c <HAL_SPI_Init+0x200>)
 800970a:	f7f8 fefc 	bl	8002506 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d008      	beq.n	8009728 <HAL_SPI_Init+0x18c>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d004      	beq.n	8009728 <HAL_SPI_Init+0x18c>
 800971e:	f240 114b 	movw	r1, #331	; 0x14b
 8009722:	481e      	ldr	r0, [pc, #120]	; (800979c <HAL_SPI_Init+0x200>)
 8009724:	f7f8 feef 	bl	8002506 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009730:	d125      	bne.n	800977e <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d05d      	beq.n	80097f6 <HAL_SPI_Init+0x25a>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	69db      	ldr	r3, [r3, #28]
 800973e:	2b08      	cmp	r3, #8
 8009740:	d059      	beq.n	80097f6 <HAL_SPI_Init+0x25a>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	69db      	ldr	r3, [r3, #28]
 8009746:	2b10      	cmp	r3, #16
 8009748:	d055      	beq.n	80097f6 <HAL_SPI_Init+0x25a>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	2b18      	cmp	r3, #24
 8009750:	d051      	beq.n	80097f6 <HAL_SPI_Init+0x25a>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	2b20      	cmp	r3, #32
 8009758:	d04d      	beq.n	80097f6 <HAL_SPI_Init+0x25a>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	69db      	ldr	r3, [r3, #28]
 800975e:	2b28      	cmp	r3, #40	; 0x28
 8009760:	d049      	beq.n	80097f6 <HAL_SPI_Init+0x25a>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	2b30      	cmp	r3, #48	; 0x30
 8009768:	d045      	beq.n	80097f6 <HAL_SPI_Init+0x25a>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	2b38      	cmp	r3, #56	; 0x38
 8009770:	d041      	beq.n	80097f6 <HAL_SPI_Init+0x25a>
 8009772:	f240 114f 	movw	r1, #335	; 0x14f
 8009776:	4809      	ldr	r0, [pc, #36]	; (800979c <HAL_SPI_Init+0x200>)
 8009778:	f7f8 fec5 	bl	8002506 <assert_failed>
 800977c:	e03b      	b.n	80097f6 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	61da      	str	r2, [r3, #28]
 8009784:	e037      	b.n	80097f6 <HAL_SPI_Init+0x25a>
 8009786:	bf00      	nop
 8009788:	40013000 	.word	0x40013000
 800978c:	40003800 	.word	0x40003800
 8009790:	40003c00 	.word	0x40003c00
 8009794:	40013400 	.word	0x40013400
 8009798:	40015000 	.word	0x40015000
 800979c:	0800f270 	.word	0x0800f270
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	69db      	ldr	r3, [r3, #28]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d020      	beq.n	80097ea <HAL_SPI_Init+0x24e>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	69db      	ldr	r3, [r3, #28]
 80097ac:	2b08      	cmp	r3, #8
 80097ae:	d01c      	beq.n	80097ea <HAL_SPI_Init+0x24e>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	69db      	ldr	r3, [r3, #28]
 80097b4:	2b10      	cmp	r3, #16
 80097b6:	d018      	beq.n	80097ea <HAL_SPI_Init+0x24e>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	69db      	ldr	r3, [r3, #28]
 80097bc:	2b18      	cmp	r3, #24
 80097be:	d014      	beq.n	80097ea <HAL_SPI_Init+0x24e>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	2b20      	cmp	r3, #32
 80097c6:	d010      	beq.n	80097ea <HAL_SPI_Init+0x24e>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	69db      	ldr	r3, [r3, #28]
 80097cc:	2b28      	cmp	r3, #40	; 0x28
 80097ce:	d00c      	beq.n	80097ea <HAL_SPI_Init+0x24e>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	69db      	ldr	r3, [r3, #28]
 80097d4:	2b30      	cmp	r3, #48	; 0x30
 80097d6:	d008      	beq.n	80097ea <HAL_SPI_Init+0x24e>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	69db      	ldr	r3, [r3, #28]
 80097dc:	2b38      	cmp	r3, #56	; 0x38
 80097de:	d004      	beq.n	80097ea <HAL_SPI_Init+0x24e>
 80097e0:	f240 1159 	movw	r1, #345	; 0x159
 80097e4:	484a      	ldr	r0, [pc, #296]	; (8009910 <HAL_SPI_Init+0x374>)
 80097e6:	f7f8 fe8e 	bl	8002506 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	d126      	bne.n	8009856 <HAL_SPI_Init+0x2ba>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a40      	ldr	r2, [pc, #256]	; (8009914 <HAL_SPI_Init+0x378>)
 8009814:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a3f      	ldr	r2, [pc, #252]	; (8009918 <HAL_SPI_Init+0x37c>)
 800981a:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a3f      	ldr	r2, [pc, #252]	; (800991c <HAL_SPI_Init+0x380>)
 8009820:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a3e      	ldr	r2, [pc, #248]	; (8009920 <HAL_SPI_Init+0x384>)
 8009826:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a3e      	ldr	r2, [pc, #248]	; (8009924 <HAL_SPI_Init+0x388>)
 800982c:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a3d      	ldr	r2, [pc, #244]	; (8009928 <HAL_SPI_Init+0x38c>)
 8009832:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a3d      	ldr	r2, [pc, #244]	; (800992c <HAL_SPI_Init+0x390>)
 8009838:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a3c      	ldr	r2, [pc, #240]	; (8009930 <HAL_SPI_Init+0x394>)
 800983e:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009844:	2b00      	cmp	r3, #0
 8009846:	d102      	bne.n	800984e <HAL_SPI_Init+0x2b2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a3a      	ldr	r2, [pc, #232]	; (8009934 <HAL_SPI_Init+0x398>)
 800984c:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2202      	movs	r2, #2
 800985a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800986c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800987e:	431a      	orrs	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009888:	431a      	orrs	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	431a      	orrs	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	f003 0301 	and.w	r3, r3, #1
 800989c:	431a      	orrs	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098a6:	431a      	orrs	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	69db      	ldr	r3, [r3, #28]
 80098ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098b0:	431a      	orrs	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ba:	ea42 0103 	orr.w	r1, r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	430a      	orrs	r2, r1
 80098cc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	0c1b      	lsrs	r3, r3, #16
 80098d4:	f003 0104 	and.w	r1, r3, #4
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098dc:	f003 0210 	and.w	r2, r3, #16
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	430a      	orrs	r2, r1
 80098e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	69da      	ldr	r2, [r3, #28]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	0800f270 	.word	0x0800f270
 8009914:	08009b39 	.word	0x08009b39
 8009918:	08009b4d 	.word	0x08009b4d
 800991c:	08009b61 	.word	0x08009b61
 8009920:	08009b75 	.word	0x08009b75
 8009924:	08009b89 	.word	0x08009b89
 8009928:	08009b9d 	.word	0x08009b9d
 800992c:	08009bb1 	.word	0x08009bb1
 8009930:	08009bc5 	.word	0x08009bc5
 8009934:	08002755 	.word	0x08002755

08009938 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b088      	sub	sp, #32
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	099b      	lsrs	r3, r3, #6
 8009954:	f003 0301 	and.w	r3, r3, #1
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10f      	bne.n	800997c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00a      	beq.n	800997c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	099b      	lsrs	r3, r3, #6
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	2b00      	cmp	r3, #0
 8009970:	d004      	beq.n	800997c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	4798      	blx	r3
    return;
 800997a:	e0d8      	b.n	8009b2e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	085b      	lsrs	r3, r3, #1
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00a      	beq.n	800999e <HAL_SPI_IRQHandler+0x66>
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	09db      	lsrs	r3, r3, #7
 800998c:	f003 0301 	and.w	r3, r3, #1
 8009990:	2b00      	cmp	r3, #0
 8009992:	d004      	beq.n	800999e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	4798      	blx	r3
    return;
 800999c:	e0c7      	b.n	8009b2e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	095b      	lsrs	r3, r3, #5
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10c      	bne.n	80099c4 <HAL_SPI_IRQHandler+0x8c>
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	099b      	lsrs	r3, r3, #6
 80099ae:	f003 0301 	and.w	r3, r3, #1
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d106      	bne.n	80099c4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	0a1b      	lsrs	r3, r3, #8
 80099ba:	f003 0301 	and.w	r3, r3, #1
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f000 80b5 	beq.w	8009b2e <HAL_SPI_IRQHandler+0x1f6>
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	095b      	lsrs	r3, r3, #5
 80099c8:	f003 0301 	and.w	r3, r3, #1
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f000 80ae 	beq.w	8009b2e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	099b      	lsrs	r3, r3, #6
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d023      	beq.n	8009a26 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d011      	beq.n	8009a0e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ee:	f043 0204 	orr.w	r2, r3, #4
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099f6:	2300      	movs	r3, #0
 80099f8:	617b      	str	r3, [r7, #20]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	617b      	str	r3, [r7, #20]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	617b      	str	r3, [r7, #20]
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	e00b      	b.n	8009a26 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a0e:	2300      	movs	r3, #0
 8009a10:	613b      	str	r3, [r7, #16]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	613b      	str	r3, [r7, #16]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	613b      	str	r3, [r7, #16]
 8009a22:	693b      	ldr	r3, [r7, #16]
        return;
 8009a24:	e083      	b.n	8009b2e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	095b      	lsrs	r3, r3, #5
 8009a2a:	f003 0301 	and.w	r3, r3, #1
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d014      	beq.n	8009a5c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a36:	f043 0201 	orr.w	r2, r3, #1
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009a3e:	2300      	movs	r3, #0
 8009a40:	60fb      	str	r3, [r7, #12]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	60fb      	str	r3, [r7, #12]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a58:	601a      	str	r2, [r3, #0]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	0a1b      	lsrs	r3, r3, #8
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00c      	beq.n	8009a82 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a6c:	f043 0208 	orr.w	r2, r3, #8
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009a74:	2300      	movs	r3, #0
 8009a76:	60bb      	str	r3, [r7, #8]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	60bb      	str	r3, [r7, #8]
 8009a80:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d050      	beq.n	8009b2c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	685a      	ldr	r2, [r3, #4]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a98:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	f003 0302 	and.w	r3, r3, #2
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d104      	bne.n	8009ab6 <HAL_SPI_IRQHandler+0x17e>
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	f003 0301 	and.w	r3, r3, #1
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d034      	beq.n	8009b20 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f022 0203 	bic.w	r2, r2, #3
 8009ac4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d011      	beq.n	8009af2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ad2:	4a18      	ldr	r2, [pc, #96]	; (8009b34 <HAL_SPI_IRQHandler+0x1fc>)
 8009ad4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fa feea 	bl	80048b4 <HAL_DMA_Abort_IT>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d005      	beq.n	8009af2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d017      	beq.n	8009b2a <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009afe:	4a0d      	ldr	r2, [pc, #52]	; (8009b34 <HAL_SPI_IRQHandler+0x1fc>)
 8009b00:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fa fed4 	bl	80048b4 <HAL_DMA_Abort_IT>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00b      	beq.n	8009b2a <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009b1e:	e004      	b.n	8009b2a <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009b28:	e000      	b.n	8009b2c <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8009b2a:	bf00      	nop
    return;
 8009b2c:	bf00      	nop
  }
}
 8009b2e:	3720      	adds	r7, #32
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	08009bd9 	.word	0x08009bd9

08009b38 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009ba4:	bf00      	nop
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009bfa:	bf00      	nop
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e0b2      	b.n	8009d7c <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a5a      	ldr	r2, [pc, #360]	; (8009d84 <HAL_TIM_Base_Init+0x180>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d027      	beq.n	8009c70 <HAL_TIM_Base_Init+0x6c>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c28:	d022      	beq.n	8009c70 <HAL_TIM_Base_Init+0x6c>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a56      	ldr	r2, [pc, #344]	; (8009d88 <HAL_TIM_Base_Init+0x184>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d01d      	beq.n	8009c70 <HAL_TIM_Base_Init+0x6c>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a54      	ldr	r2, [pc, #336]	; (8009d8c <HAL_TIM_Base_Init+0x188>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d018      	beq.n	8009c70 <HAL_TIM_Base_Init+0x6c>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a53      	ldr	r2, [pc, #332]	; (8009d90 <HAL_TIM_Base_Init+0x18c>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d013      	beq.n	8009c70 <HAL_TIM_Base_Init+0x6c>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a51      	ldr	r2, [pc, #324]	; (8009d94 <HAL_TIM_Base_Init+0x190>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d00e      	beq.n	8009c70 <HAL_TIM_Base_Init+0x6c>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a50      	ldr	r2, [pc, #320]	; (8009d98 <HAL_TIM_Base_Init+0x194>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d009      	beq.n	8009c70 <HAL_TIM_Base_Init+0x6c>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a4e      	ldr	r2, [pc, #312]	; (8009d9c <HAL_TIM_Base_Init+0x198>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d004      	beq.n	8009c70 <HAL_TIM_Base_Init+0x6c>
 8009c66:	f240 1113 	movw	r1, #275	; 0x113
 8009c6a:	484d      	ldr	r0, [pc, #308]	; (8009da0 <HAL_TIM_Base_Init+0x19c>)
 8009c6c:	f7f8 fc4b 	bl	8002506 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d014      	beq.n	8009ca2 <HAL_TIM_Base_Init+0x9e>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	2b10      	cmp	r3, #16
 8009c7e:	d010      	beq.n	8009ca2 <HAL_TIM_Base_Init+0x9e>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	2b20      	cmp	r3, #32
 8009c86:	d00c      	beq.n	8009ca2 <HAL_TIM_Base_Init+0x9e>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	2b40      	cmp	r3, #64	; 0x40
 8009c8e:	d008      	beq.n	8009ca2 <HAL_TIM_Base_Init+0x9e>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	2b60      	cmp	r3, #96	; 0x60
 8009c96:	d004      	beq.n	8009ca2 <HAL_TIM_Base_Init+0x9e>
 8009c98:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009c9c:	4840      	ldr	r0, [pc, #256]	; (8009da0 <HAL_TIM_Base_Init+0x19c>)
 8009c9e:	f7f8 fc32 	bl	8002506 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00e      	beq.n	8009cc8 <HAL_TIM_Base_Init+0xc4>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cb2:	d009      	beq.n	8009cc8 <HAL_TIM_Base_Init+0xc4>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cbc:	d004      	beq.n	8009cc8 <HAL_TIM_Base_Init+0xc4>
 8009cbe:	f240 1115 	movw	r1, #277	; 0x115
 8009cc2:	4837      	ldr	r0, [pc, #220]	; (8009da0 <HAL_TIM_Base_Init+0x19c>)
 8009cc4:	f7f8 fc1f 	bl	8002506 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d008      	beq.n	8009ce2 <HAL_TIM_Base_Init+0xde>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	2b80      	cmp	r3, #128	; 0x80
 8009cd6:	d004      	beq.n	8009ce2 <HAL_TIM_Base_Init+0xde>
 8009cd8:	f44f 718b 	mov.w	r1, #278	; 0x116
 8009cdc:	4830      	ldr	r0, [pc, #192]	; (8009da0 <HAL_TIM_Base_Init+0x19c>)
 8009cde:	f7f8 fc12 	bl	8002506 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d111      	bne.n	8009d12 <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 ff80 	bl	800abfc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d102      	bne.n	8009d0a <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a27      	ldr	r2, [pc, #156]	; (8009da4 <HAL_TIM_Base_Init+0x1a0>)
 8009d08:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2202      	movs	r2, #2
 8009d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	3304      	adds	r3, #4
 8009d22:	4619      	mov	r1, r3
 8009d24:	4610      	mov	r0, r2
 8009d26:	f000 fe4f 	bl	800a9c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2201      	movs	r2, #1
 8009d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	40010000 	.word	0x40010000
 8009d88:	40000400 	.word	0x40000400
 8009d8c:	40000800 	.word	0x40000800
 8009d90:	40000c00 	.word	0x40000c00
 8009d94:	40014000 	.word	0x40014000
 8009d98:	40014400 	.word	0x40014400
 8009d9c:	40014800 	.word	0x40014800
 8009da0:	0800f2e4 	.word	0x0800f2e4
 8009da4:	08002dcd 	.word	0x08002dcd

08009da8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a39      	ldr	r2, [pc, #228]	; (8009e9c <HAL_TIM_Base_Start+0xf4>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d027      	beq.n	8009e0a <HAL_TIM_Base_Start+0x62>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dc2:	d022      	beq.n	8009e0a <HAL_TIM_Base_Start+0x62>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a35      	ldr	r2, [pc, #212]	; (8009ea0 <HAL_TIM_Base_Start+0xf8>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d01d      	beq.n	8009e0a <HAL_TIM_Base_Start+0x62>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a34      	ldr	r2, [pc, #208]	; (8009ea4 <HAL_TIM_Base_Start+0xfc>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d018      	beq.n	8009e0a <HAL_TIM_Base_Start+0x62>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a32      	ldr	r2, [pc, #200]	; (8009ea8 <HAL_TIM_Base_Start+0x100>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d013      	beq.n	8009e0a <HAL_TIM_Base_Start+0x62>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a31      	ldr	r2, [pc, #196]	; (8009eac <HAL_TIM_Base_Start+0x104>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d00e      	beq.n	8009e0a <HAL_TIM_Base_Start+0x62>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a2f      	ldr	r2, [pc, #188]	; (8009eb0 <HAL_TIM_Base_Start+0x108>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d009      	beq.n	8009e0a <HAL_TIM_Base_Start+0x62>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a2e      	ldr	r2, [pc, #184]	; (8009eb4 <HAL_TIM_Base_Start+0x10c>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d004      	beq.n	8009e0a <HAL_TIM_Base_Start+0x62>
 8009e00:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8009e04:	482c      	ldr	r0, [pc, #176]	; (8009eb8 <HAL_TIM_Base_Start+0x110>)
 8009e06:	f7f8 fb7e 	bl	8002506 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d001      	beq.n	8009e1a <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e03c      	b.n	8009e94 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2202      	movs	r2, #2
 8009e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a1d      	ldr	r2, [pc, #116]	; (8009e9c <HAL_TIM_Base_Start+0xf4>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d018      	beq.n	8009e5e <HAL_TIM_Base_Start+0xb6>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e34:	d013      	beq.n	8009e5e <HAL_TIM_Base_Start+0xb6>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a19      	ldr	r2, [pc, #100]	; (8009ea0 <HAL_TIM_Base_Start+0xf8>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d00e      	beq.n	8009e5e <HAL_TIM_Base_Start+0xb6>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a17      	ldr	r2, [pc, #92]	; (8009ea4 <HAL_TIM_Base_Start+0xfc>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d009      	beq.n	8009e5e <HAL_TIM_Base_Start+0xb6>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a16      	ldr	r2, [pc, #88]	; (8009ea8 <HAL_TIM_Base_Start+0x100>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d004      	beq.n	8009e5e <HAL_TIM_Base_Start+0xb6>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a14      	ldr	r2, [pc, #80]	; (8009eac <HAL_TIM_Base_Start+0x104>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d111      	bne.n	8009e82 <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	f003 0307 	and.w	r3, r3, #7
 8009e68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2b06      	cmp	r3, #6
 8009e6e:	d010      	beq.n	8009e92 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f042 0201 	orr.w	r2, r2, #1
 8009e7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e80:	e007      	b.n	8009e92 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f042 0201 	orr.w	r2, r2, #1
 8009e90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	40010000 	.word	0x40010000
 8009ea0:	40000400 	.word	0x40000400
 8009ea4:	40000800 	.word	0x40000800
 8009ea8:	40000c00 	.word	0x40000c00
 8009eac:	40014000 	.word	0x40014000
 8009eb0:	40014400 	.word	0x40014400
 8009eb4:	40014800 	.word	0x40014800
 8009eb8:	0800f2e4 	.word	0x0800f2e4

08009ebc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a25      	ldr	r2, [pc, #148]	; (8009f60 <HAL_TIM_Base_Stop+0xa4>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d027      	beq.n	8009f1e <HAL_TIM_Base_Stop+0x62>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ed6:	d022      	beq.n	8009f1e <HAL_TIM_Base_Stop+0x62>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a21      	ldr	r2, [pc, #132]	; (8009f64 <HAL_TIM_Base_Stop+0xa8>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d01d      	beq.n	8009f1e <HAL_TIM_Base_Stop+0x62>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a20      	ldr	r2, [pc, #128]	; (8009f68 <HAL_TIM_Base_Stop+0xac>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d018      	beq.n	8009f1e <HAL_TIM_Base_Stop+0x62>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a1e      	ldr	r2, [pc, #120]	; (8009f6c <HAL_TIM_Base_Stop+0xb0>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d013      	beq.n	8009f1e <HAL_TIM_Base_Stop+0x62>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a1d      	ldr	r2, [pc, #116]	; (8009f70 <HAL_TIM_Base_Stop+0xb4>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d00e      	beq.n	8009f1e <HAL_TIM_Base_Stop+0x62>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a1b      	ldr	r2, [pc, #108]	; (8009f74 <HAL_TIM_Base_Stop+0xb8>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d009      	beq.n	8009f1e <HAL_TIM_Base_Stop+0x62>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a1a      	ldr	r2, [pc, #104]	; (8009f78 <HAL_TIM_Base_Stop+0xbc>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d004      	beq.n	8009f1e <HAL_TIM_Base_Stop+0x62>
 8009f14:	f240 11b9 	movw	r1, #441	; 0x1b9
 8009f18:	4818      	ldr	r0, [pc, #96]	; (8009f7c <HAL_TIM_Base_Stop+0xc0>)
 8009f1a:	f7f8 faf4 	bl	8002506 <assert_failed>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	6a1a      	ldr	r2, [r3, #32]
 8009f24:	f241 1311 	movw	r3, #4369	; 0x1111
 8009f28:	4013      	ands	r3, r2
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10f      	bne.n	8009f4e <HAL_TIM_Base_Stop+0x92>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6a1a      	ldr	r2, [r3, #32]
 8009f34:	f240 4344 	movw	r3, #1092	; 0x444
 8009f38:	4013      	ands	r3, r2
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d107      	bne.n	8009f4e <HAL_TIM_Base_Stop+0x92>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f022 0201 	bic.w	r2, r2, #1
 8009f4c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	40010000 	.word	0x40010000
 8009f64:	40000400 	.word	0x40000400
 8009f68:	40000800 	.word	0x40000800
 8009f6c:	40000c00 	.word	0x40000c00
 8009f70:	40014000 	.word	0x40014000
 8009f74:	40014400 	.word	0x40014400
 8009f78:	40014800 	.word	0x40014800
 8009f7c:	0800f2e4 	.word	0x0800f2e4

08009f80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a3d      	ldr	r2, [pc, #244]	; (800a084 <HAL_TIM_Base_Start_IT+0x104>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d027      	beq.n	8009fe2 <HAL_TIM_Base_Start_IT+0x62>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f9a:	d022      	beq.n	8009fe2 <HAL_TIM_Base_Start_IT+0x62>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a39      	ldr	r2, [pc, #228]	; (800a088 <HAL_TIM_Base_Start_IT+0x108>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d01d      	beq.n	8009fe2 <HAL_TIM_Base_Start_IT+0x62>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a38      	ldr	r2, [pc, #224]	; (800a08c <HAL_TIM_Base_Start_IT+0x10c>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d018      	beq.n	8009fe2 <HAL_TIM_Base_Start_IT+0x62>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a36      	ldr	r2, [pc, #216]	; (800a090 <HAL_TIM_Base_Start_IT+0x110>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d013      	beq.n	8009fe2 <HAL_TIM_Base_Start_IT+0x62>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a35      	ldr	r2, [pc, #212]	; (800a094 <HAL_TIM_Base_Start_IT+0x114>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d00e      	beq.n	8009fe2 <HAL_TIM_Base_Start_IT+0x62>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a33      	ldr	r2, [pc, #204]	; (800a098 <HAL_TIM_Base_Start_IT+0x118>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d009      	beq.n	8009fe2 <HAL_TIM_Base_Start_IT+0x62>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a32      	ldr	r2, [pc, #200]	; (800a09c <HAL_TIM_Base_Start_IT+0x11c>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d004      	beq.n	8009fe2 <HAL_TIM_Base_Start_IT+0x62>
 8009fd8:	f240 11cf 	movw	r1, #463	; 0x1cf
 8009fdc:	4830      	ldr	r0, [pc, #192]	; (800a0a0 <HAL_TIM_Base_Start_IT+0x120>)
 8009fde:	f7f8 fa92 	bl	8002506 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d001      	beq.n	8009ff2 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e044      	b.n	800a07c <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2202      	movs	r2, #2
 8009ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	68da      	ldr	r2, [r3, #12]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f042 0201 	orr.w	r2, r2, #1
 800a008:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a1d      	ldr	r2, [pc, #116]	; (800a084 <HAL_TIM_Base_Start_IT+0x104>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d018      	beq.n	800a046 <HAL_TIM_Base_Start_IT+0xc6>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a01c:	d013      	beq.n	800a046 <HAL_TIM_Base_Start_IT+0xc6>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a19      	ldr	r2, [pc, #100]	; (800a088 <HAL_TIM_Base_Start_IT+0x108>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d00e      	beq.n	800a046 <HAL_TIM_Base_Start_IT+0xc6>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a17      	ldr	r2, [pc, #92]	; (800a08c <HAL_TIM_Base_Start_IT+0x10c>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d009      	beq.n	800a046 <HAL_TIM_Base_Start_IT+0xc6>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a16      	ldr	r2, [pc, #88]	; (800a090 <HAL_TIM_Base_Start_IT+0x110>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d004      	beq.n	800a046 <HAL_TIM_Base_Start_IT+0xc6>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a14      	ldr	r2, [pc, #80]	; (800a094 <HAL_TIM_Base_Start_IT+0x114>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d111      	bne.n	800a06a <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	f003 0307 	and.w	r3, r3, #7
 800a050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2b06      	cmp	r3, #6
 800a056:	d010      	beq.n	800a07a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f042 0201 	orr.w	r2, r2, #1
 800a066:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a068:	e007      	b.n	800a07a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f042 0201 	orr.w	r2, r2, #1
 800a078:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	40010000 	.word	0x40010000
 800a088:	40000400 	.word	0x40000400
 800a08c:	40000800 	.word	0x40000800
 800a090:	40000c00 	.word	0x40000c00
 800a094:	40014000 	.word	0x40014000
 800a098:	40014400 	.word	0x40014400
 800a09c:	40014800 	.word	0x40014800
 800a0a0:	0800f2e4 	.word	0x0800f2e4

0800a0a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	f003 0302 	and.w	r3, r3, #2
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d128      	bne.n	800a10c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	f003 0302 	and.w	r3, r3, #2
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d121      	bne.n	800a10c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f06f 0202 	mvn.w	r2, #2
 800a0d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	699b      	ldr	r3, [r3, #24]
 800a0de:	f003 0303 	and.w	r3, r3, #3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d005      	beq.n	800a0f2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	4798      	blx	r3
 800a0f0:	e009      	b.n	800a106 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	f003 0304 	and.w	r3, r3, #4
 800a116:	2b04      	cmp	r3, #4
 800a118:	d128      	bne.n	800a16c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	f003 0304 	and.w	r3, r3, #4
 800a124:	2b04      	cmp	r3, #4
 800a126:	d121      	bne.n	800a16c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f06f 0204 	mvn.w	r2, #4
 800a130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2202      	movs	r2, #2
 800a136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a142:	2b00      	cmp	r3, #0
 800a144:	d005      	beq.n	800a152 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	4798      	blx	r3
 800a150:	e009      	b.n	800a166 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	f003 0308 	and.w	r3, r3, #8
 800a176:	2b08      	cmp	r3, #8
 800a178:	d128      	bne.n	800a1cc <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	f003 0308 	and.w	r3, r3, #8
 800a184:	2b08      	cmp	r3, #8
 800a186:	d121      	bne.n	800a1cc <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f06f 0208 	mvn.w	r2, #8
 800a190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2204      	movs	r2, #4
 800a196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	f003 0303 	and.w	r3, r3, #3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d005      	beq.n	800a1b2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	4798      	blx	r3
 800a1b0:	e009      	b.n	800a1c6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	f003 0310 	and.w	r3, r3, #16
 800a1d6:	2b10      	cmp	r3, #16
 800a1d8:	d128      	bne.n	800a22c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	f003 0310 	and.w	r3, r3, #16
 800a1e4:	2b10      	cmp	r3, #16
 800a1e6:	d121      	bne.n	800a22c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f06f 0210 	mvn.w	r2, #16
 800a1f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2208      	movs	r2, #8
 800a1f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	69db      	ldr	r3, [r3, #28]
 800a1fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a202:	2b00      	cmp	r3, #0
 800a204:	d005      	beq.n	800a212 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	4798      	blx	r3
 800a210:	e009      	b.n	800a226 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	2b01      	cmp	r3, #1
 800a238:	d110      	bne.n	800a25c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	f003 0301 	and.w	r3, r3, #1
 800a244:	2b01      	cmp	r3, #1
 800a246:	d109      	bne.n	800a25c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f06f 0201 	mvn.w	r2, #1
 800a250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a266:	2b80      	cmp	r3, #128	; 0x80
 800a268:	d110      	bne.n	800a28c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a274:	2b80      	cmp	r3, #128	; 0x80
 800a276:	d109      	bne.n	800a28c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a296:	2b40      	cmp	r3, #64	; 0x40
 800a298:	d110      	bne.n	800a2bc <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a4:	2b40      	cmp	r3, #64	; 0x40
 800a2a6:	d109      	bne.n	800a2bc <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	f003 0320 	and.w	r3, r3, #32
 800a2c6:	2b20      	cmp	r3, #32
 800a2c8:	d110      	bne.n	800a2ec <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	f003 0320 	and.w	r3, r3, #32
 800a2d4:	2b20      	cmp	r3, #32
 800a2d6:	d109      	bne.n	800a2ec <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f06f 0220 	mvn.w	r2, #32
 800a2e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2ec:	bf00      	nop
 800a2ee:	3708      	adds	r7, #8
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d101      	bne.n	800a310 <HAL_TIM_ConfigClockSource+0x1c>
 800a30c:	2302      	movs	r3, #2
 800a30e:	e2f0      	b.n	800a8f2 <HAL_TIM_ConfigClockSource+0x5fe>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2202      	movs	r2, #2
 800a31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a328:	d029      	beq.n	800a37e <HAL_TIM_ConfigClockSource+0x8a>
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b70      	cmp	r3, #112	; 0x70
 800a330:	d025      	beq.n	800a37e <HAL_TIM_ConfigClockSource+0x8a>
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a33a:	d020      	beq.n	800a37e <HAL_TIM_ConfigClockSource+0x8a>
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b40      	cmp	r3, #64	; 0x40
 800a342:	d01c      	beq.n	800a37e <HAL_TIM_ConfigClockSource+0x8a>
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b50      	cmp	r3, #80	; 0x50
 800a34a:	d018      	beq.n	800a37e <HAL_TIM_ConfigClockSource+0x8a>
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b60      	cmp	r3, #96	; 0x60
 800a352:	d014      	beq.n	800a37e <HAL_TIM_ConfigClockSource+0x8a>
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d010      	beq.n	800a37e <HAL_TIM_ConfigClockSource+0x8a>
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b10      	cmp	r3, #16
 800a362:	d00c      	beq.n	800a37e <HAL_TIM_ConfigClockSource+0x8a>
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b20      	cmp	r3, #32
 800a36a:	d008      	beq.n	800a37e <HAL_TIM_ConfigClockSource+0x8a>
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b30      	cmp	r3, #48	; 0x30
 800a372:	d004      	beq.n	800a37e <HAL_TIM_ConfigClockSource+0x8a>
 800a374:	f241 41b7 	movw	r1, #5303	; 0x14b7
 800a378:	487c      	ldr	r0, [pc, #496]	; (800a56c <HAL_TIM_ConfigClockSource+0x278>)
 800a37a:	f7f8 f8c4 	bl	8002506 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a38c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a394:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3a6:	f000 80f1 	beq.w	800a58c <HAL_TIM_ConfigClockSource+0x298>
 800a3aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3ae:	f200 8293 	bhi.w	800a8d8 <HAL_TIM_ConfigClockSource+0x5e4>
 800a3b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3b6:	d02d      	beq.n	800a414 <HAL_TIM_ConfigClockSource+0x120>
 800a3b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3bc:	f200 828c 	bhi.w	800a8d8 <HAL_TIM_ConfigClockSource+0x5e4>
 800a3c0:	2b70      	cmp	r3, #112	; 0x70
 800a3c2:	d05d      	beq.n	800a480 <HAL_TIM_ConfigClockSource+0x18c>
 800a3c4:	2b70      	cmp	r3, #112	; 0x70
 800a3c6:	f200 8287 	bhi.w	800a8d8 <HAL_TIM_ConfigClockSource+0x5e4>
 800a3ca:	2b60      	cmp	r3, #96	; 0x60
 800a3cc:	f000 81a0 	beq.w	800a710 <HAL_TIM_ConfigClockSource+0x41c>
 800a3d0:	2b60      	cmp	r3, #96	; 0x60
 800a3d2:	f200 8281 	bhi.w	800a8d8 <HAL_TIM_ConfigClockSource+0x5e4>
 800a3d6:	2b50      	cmp	r3, #80	; 0x50
 800a3d8:	f000 8144 	beq.w	800a664 <HAL_TIM_ConfigClockSource+0x370>
 800a3dc:	2b50      	cmp	r3, #80	; 0x50
 800a3de:	f200 827b 	bhi.w	800a8d8 <HAL_TIM_ConfigClockSource+0x5e4>
 800a3e2:	2b40      	cmp	r3, #64	; 0x40
 800a3e4:	f000 81f6 	beq.w	800a7d4 <HAL_TIM_ConfigClockSource+0x4e0>
 800a3e8:	2b40      	cmp	r3, #64	; 0x40
 800a3ea:	f200 8275 	bhi.w	800a8d8 <HAL_TIM_ConfigClockSource+0x5e4>
 800a3ee:	2b30      	cmp	r3, #48	; 0x30
 800a3f0:	f000 8246 	beq.w	800a880 <HAL_TIM_ConfigClockSource+0x58c>
 800a3f4:	2b30      	cmp	r3, #48	; 0x30
 800a3f6:	f200 826f 	bhi.w	800a8d8 <HAL_TIM_ConfigClockSource+0x5e4>
 800a3fa:	2b20      	cmp	r3, #32
 800a3fc:	f000 8240 	beq.w	800a880 <HAL_TIM_ConfigClockSource+0x58c>
 800a400:	2b20      	cmp	r3, #32
 800a402:	f200 8269 	bhi.w	800a8d8 <HAL_TIM_ConfigClockSource+0x5e4>
 800a406:	2b00      	cmp	r3, #0
 800a408:	f000 823a 	beq.w	800a880 <HAL_TIM_ConfigClockSource+0x58c>
 800a40c:	2b10      	cmp	r3, #16
 800a40e:	f000 8237 	beq.w	800a880 <HAL_TIM_ConfigClockSource+0x58c>
 800a412:	e261      	b.n	800a8d8 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a55      	ldr	r2, [pc, #340]	; (800a570 <HAL_TIM_ConfigClockSource+0x27c>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	f000 825f 	beq.w	800a8de <HAL_TIM_ConfigClockSource+0x5ea>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a428:	f000 8259 	beq.w	800a8de <HAL_TIM_ConfigClockSource+0x5ea>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a50      	ldr	r2, [pc, #320]	; (800a574 <HAL_TIM_ConfigClockSource+0x280>)
 800a432:	4293      	cmp	r3, r2
 800a434:	f000 8253 	beq.w	800a8de <HAL_TIM_ConfigClockSource+0x5ea>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a4e      	ldr	r2, [pc, #312]	; (800a578 <HAL_TIM_ConfigClockSource+0x284>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	f000 824d 	beq.w	800a8de <HAL_TIM_ConfigClockSource+0x5ea>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a4c      	ldr	r2, [pc, #304]	; (800a57c <HAL_TIM_ConfigClockSource+0x288>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	f000 8247 	beq.w	800a8de <HAL_TIM_ConfigClockSource+0x5ea>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a4a      	ldr	r2, [pc, #296]	; (800a580 <HAL_TIM_ConfigClockSource+0x28c>)
 800a456:	4293      	cmp	r3, r2
 800a458:	f000 8241 	beq.w	800a8de <HAL_TIM_ConfigClockSource+0x5ea>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a48      	ldr	r2, [pc, #288]	; (800a584 <HAL_TIM_ConfigClockSource+0x290>)
 800a462:	4293      	cmp	r3, r2
 800a464:	f000 823b 	beq.w	800a8de <HAL_TIM_ConfigClockSource+0x5ea>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a46      	ldr	r2, [pc, #280]	; (800a588 <HAL_TIM_ConfigClockSource+0x294>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	f000 8235 	beq.w	800a8de <HAL_TIM_ConfigClockSource+0x5ea>
 800a474:	f241 41c3 	movw	r1, #5315	; 0x14c3
 800a478:	483c      	ldr	r0, [pc, #240]	; (800a56c <HAL_TIM_ConfigClockSource+0x278>)
 800a47a:	f7f8 f844 	bl	8002506 <assert_failed>
      break;
 800a47e:	e22e      	b.n	800a8de <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a3a      	ldr	r2, [pc, #232]	; (800a570 <HAL_TIM_ConfigClockSource+0x27c>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d01d      	beq.n	800a4c6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a492:	d018      	beq.n	800a4c6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a36      	ldr	r2, [pc, #216]	; (800a574 <HAL_TIM_ConfigClockSource+0x280>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d013      	beq.n	800a4c6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a35      	ldr	r2, [pc, #212]	; (800a578 <HAL_TIM_ConfigClockSource+0x284>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d00e      	beq.n	800a4c6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a33      	ldr	r2, [pc, #204]	; (800a57c <HAL_TIM_ConfigClockSource+0x288>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d009      	beq.n	800a4c6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a32      	ldr	r2, [pc, #200]	; (800a580 <HAL_TIM_ConfigClockSource+0x28c>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d004      	beq.n	800a4c6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a4bc:	f241 41ca 	movw	r1, #5322	; 0x14ca
 800a4c0:	482a      	ldr	r0, [pc, #168]	; (800a56c <HAL_TIM_ConfigClockSource+0x278>)
 800a4c2:	f7f8 f820 	bl	8002506 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d013      	beq.n	800a4f6 <HAL_TIM_ConfigClockSource+0x202>
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4d6:	d00e      	beq.n	800a4f6 <HAL_TIM_ConfigClockSource+0x202>
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4e0:	d009      	beq.n	800a4f6 <HAL_TIM_ConfigClockSource+0x202>
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a4ea:	d004      	beq.n	800a4f6 <HAL_TIM_ConfigClockSource+0x202>
 800a4ec:	f241 41cd 	movw	r1, #5325	; 0x14cd
 800a4f0:	481e      	ldr	r0, [pc, #120]	; (800a56c <HAL_TIM_ConfigClockSource+0x278>)
 800a4f2:	f7f8 f808 	bl	8002506 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4fe:	d014      	beq.n	800a52a <HAL_TIM_ConfigClockSource+0x236>
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d010      	beq.n	800a52a <HAL_TIM_ConfigClockSource+0x236>
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00c      	beq.n	800a52a <HAL_TIM_ConfigClockSource+0x236>
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	2b02      	cmp	r3, #2
 800a516:	d008      	beq.n	800a52a <HAL_TIM_ConfigClockSource+0x236>
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	2b0a      	cmp	r3, #10
 800a51e:	d004      	beq.n	800a52a <HAL_TIM_ConfigClockSource+0x236>
 800a520:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800a524:	4811      	ldr	r0, [pc, #68]	; (800a56c <HAL_TIM_ConfigClockSource+0x278>)
 800a526:	f7f7 ffee 	bl	8002506 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	2b0f      	cmp	r3, #15
 800a530:	d904      	bls.n	800a53c <HAL_TIM_ConfigClockSource+0x248>
 800a532:	f241 41cf 	movw	r1, #5327	; 0x14cf
 800a536:	480d      	ldr	r0, [pc, #52]	; (800a56c <HAL_TIM_ConfigClockSource+0x278>)
 800a538:	f7f7 ffe5 	bl	8002506 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6818      	ldr	r0, [r3, #0]
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	6899      	ldr	r1, [r3, #8]
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685a      	ldr	r2, [r3, #4]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	f000 fb36 	bl	800abbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a55e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	609a      	str	r2, [r3, #8]
      break;
 800a568:	e1ba      	b.n	800a8e0 <HAL_TIM_ConfigClockSource+0x5ec>
 800a56a:	bf00      	nop
 800a56c:	0800f2e4 	.word	0x0800f2e4
 800a570:	40010000 	.word	0x40010000
 800a574:	40000400 	.word	0x40000400
 800a578:	40000800 	.word	0x40000800
 800a57c:	40000c00 	.word	0x40000c00
 800a580:	40014000 	.word	0x40014000
 800a584:	40014400 	.word	0x40014400
 800a588:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a8a      	ldr	r2, [pc, #552]	; (800a7bc <HAL_TIM_ConfigClockSource+0x4c8>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d018      	beq.n	800a5c8 <HAL_TIM_ConfigClockSource+0x2d4>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a59e:	d013      	beq.n	800a5c8 <HAL_TIM_ConfigClockSource+0x2d4>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a86      	ldr	r2, [pc, #536]	; (800a7c0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d00e      	beq.n	800a5c8 <HAL_TIM_ConfigClockSource+0x2d4>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a85      	ldr	r2, [pc, #532]	; (800a7c4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d009      	beq.n	800a5c8 <HAL_TIM_ConfigClockSource+0x2d4>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a83      	ldr	r2, [pc, #524]	; (800a7c8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d004      	beq.n	800a5c8 <HAL_TIM_ConfigClockSource+0x2d4>
 800a5be:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800a5c2:	4882      	ldr	r0, [pc, #520]	; (800a7cc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a5c4:	f7f7 ff9f 	bl	8002506 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d013      	beq.n	800a5f8 <HAL_TIM_ConfigClockSource+0x304>
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5d8:	d00e      	beq.n	800a5f8 <HAL_TIM_ConfigClockSource+0x304>
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5e2:	d009      	beq.n	800a5f8 <HAL_TIM_ConfigClockSource+0x304>
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a5ec:	d004      	beq.n	800a5f8 <HAL_TIM_ConfigClockSource+0x304>
 800a5ee:	f241 41e5 	movw	r1, #5349	; 0x14e5
 800a5f2:	4876      	ldr	r0, [pc, #472]	; (800a7cc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a5f4:	f7f7 ff87 	bl	8002506 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a600:	d014      	beq.n	800a62c <HAL_TIM_ConfigClockSource+0x338>
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d010      	beq.n	800a62c <HAL_TIM_ConfigClockSource+0x338>
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00c      	beq.n	800a62c <HAL_TIM_ConfigClockSource+0x338>
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	2b02      	cmp	r3, #2
 800a618:	d008      	beq.n	800a62c <HAL_TIM_ConfigClockSource+0x338>
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	2b0a      	cmp	r3, #10
 800a620:	d004      	beq.n	800a62c <HAL_TIM_ConfigClockSource+0x338>
 800a622:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800a626:	4869      	ldr	r0, [pc, #420]	; (800a7cc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a628:	f7f7 ff6d 	bl	8002506 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	2b0f      	cmp	r3, #15
 800a632:	d904      	bls.n	800a63e <HAL_TIM_ConfigClockSource+0x34a>
 800a634:	f241 41e7 	movw	r1, #5351	; 0x14e7
 800a638:	4864      	ldr	r0, [pc, #400]	; (800a7cc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a63a:	f7f7 ff64 	bl	8002506 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6818      	ldr	r0, [r3, #0]
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	6899      	ldr	r1, [r3, #8]
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	f000 fab5 	bl	800abbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	689a      	ldr	r2, [r3, #8]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a660:	609a      	str	r2, [r3, #8]
      break;
 800a662:	e13d      	b.n	800a8e0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a54      	ldr	r2, [pc, #336]	; (800a7bc <HAL_TIM_ConfigClockSource+0x4c8>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d01d      	beq.n	800a6aa <HAL_TIM_ConfigClockSource+0x3b6>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a676:	d018      	beq.n	800a6aa <HAL_TIM_ConfigClockSource+0x3b6>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a50      	ldr	r2, [pc, #320]	; (800a7c0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d013      	beq.n	800a6aa <HAL_TIM_ConfigClockSource+0x3b6>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a4f      	ldr	r2, [pc, #316]	; (800a7c4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d00e      	beq.n	800a6aa <HAL_TIM_ConfigClockSource+0x3b6>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a4d      	ldr	r2, [pc, #308]	; (800a7c8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d009      	beq.n	800a6aa <HAL_TIM_ConfigClockSource+0x3b6>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a4d      	ldr	r2, [pc, #308]	; (800a7d0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d004      	beq.n	800a6aa <HAL_TIM_ConfigClockSource+0x3b6>
 800a6a0:	f241 41f6 	movw	r1, #5366	; 0x14f6
 800a6a4:	4849      	ldr	r0, [pc, #292]	; (800a7cc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a6a6:	f7f7 ff2e 	bl	8002506 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6b2:	d014      	beq.n	800a6de <HAL_TIM_ConfigClockSource+0x3ea>
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d010      	beq.n	800a6de <HAL_TIM_ConfigClockSource+0x3ea>
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00c      	beq.n	800a6de <HAL_TIM_ConfigClockSource+0x3ea>
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	2b02      	cmp	r3, #2
 800a6ca:	d008      	beq.n	800a6de <HAL_TIM_ConfigClockSource+0x3ea>
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	2b0a      	cmp	r3, #10
 800a6d2:	d004      	beq.n	800a6de <HAL_TIM_ConfigClockSource+0x3ea>
 800a6d4:	f241 41f9 	movw	r1, #5369	; 0x14f9
 800a6d8:	483c      	ldr	r0, [pc, #240]	; (800a7cc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a6da:	f7f7 ff14 	bl	8002506 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	2b0f      	cmp	r3, #15
 800a6e4:	d904      	bls.n	800a6f0 <HAL_TIM_ConfigClockSource+0x3fc>
 800a6e6:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800a6ea:	4838      	ldr	r0, [pc, #224]	; (800a7cc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a6ec:	f7f7 ff0b 	bl	8002506 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6818      	ldr	r0, [r3, #0]
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	6859      	ldr	r1, [r3, #4]
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	f000 f9e3 	bl	800aac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2150      	movs	r1, #80	; 0x50
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 fa3c 	bl	800ab86 <TIM_ITRx_SetConfig>
      break;
 800a70e:	e0e7      	b.n	800a8e0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a29      	ldr	r2, [pc, #164]	; (800a7bc <HAL_TIM_ConfigClockSource+0x4c8>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d01d      	beq.n	800a756 <HAL_TIM_ConfigClockSource+0x462>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a722:	d018      	beq.n	800a756 <HAL_TIM_ConfigClockSource+0x462>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a25      	ldr	r2, [pc, #148]	; (800a7c0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d013      	beq.n	800a756 <HAL_TIM_ConfigClockSource+0x462>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a24      	ldr	r2, [pc, #144]	; (800a7c4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d00e      	beq.n	800a756 <HAL_TIM_ConfigClockSource+0x462>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a22      	ldr	r2, [pc, #136]	; (800a7c8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d009      	beq.n	800a756 <HAL_TIM_ConfigClockSource+0x462>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a22      	ldr	r2, [pc, #136]	; (800a7d0 <HAL_TIM_ConfigClockSource+0x4dc>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d004      	beq.n	800a756 <HAL_TIM_ConfigClockSource+0x462>
 800a74c:	f241 5106 	movw	r1, #5382	; 0x1506
 800a750:	481e      	ldr	r0, [pc, #120]	; (800a7cc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a752:	f7f7 fed8 	bl	8002506 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a75e:	d014      	beq.n	800a78a <HAL_TIM_ConfigClockSource+0x496>
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d010      	beq.n	800a78a <HAL_TIM_ConfigClockSource+0x496>
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00c      	beq.n	800a78a <HAL_TIM_ConfigClockSource+0x496>
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	2b02      	cmp	r3, #2
 800a776:	d008      	beq.n	800a78a <HAL_TIM_ConfigClockSource+0x496>
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	2b0a      	cmp	r3, #10
 800a77e:	d004      	beq.n	800a78a <HAL_TIM_ConfigClockSource+0x496>
 800a780:	f241 5109 	movw	r1, #5385	; 0x1509
 800a784:	4811      	ldr	r0, [pc, #68]	; (800a7cc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a786:	f7f7 febe 	bl	8002506 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	2b0f      	cmp	r3, #15
 800a790:	d904      	bls.n	800a79c <HAL_TIM_ConfigClockSource+0x4a8>
 800a792:	f241 510a 	movw	r1, #5386	; 0x150a
 800a796:	480d      	ldr	r0, [pc, #52]	; (800a7cc <HAL_TIM_ConfigClockSource+0x4d8>)
 800a798:	f7f7 feb5 	bl	8002506 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6818      	ldr	r0, [r3, #0]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	6859      	ldr	r1, [r3, #4]
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	f000 f9bc 	bl	800ab26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2160      	movs	r1, #96	; 0x60
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f000 f9e6 	bl	800ab86 <TIM_ITRx_SetConfig>
      break;
 800a7ba:	e091      	b.n	800a8e0 <HAL_TIM_ConfigClockSource+0x5ec>
 800a7bc:	40010000 	.word	0x40010000
 800a7c0:	40000400 	.word	0x40000400
 800a7c4:	40000800 	.word	0x40000800
 800a7c8:	40000c00 	.word	0x40000c00
 800a7cc:	0800f2e4 	.word	0x0800f2e4
 800a7d0:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a48      	ldr	r2, [pc, #288]	; (800a8fc <HAL_TIM_ConfigClockSource+0x608>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d01d      	beq.n	800a81a <HAL_TIM_ConfigClockSource+0x526>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7e6:	d018      	beq.n	800a81a <HAL_TIM_ConfigClockSource+0x526>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a44      	ldr	r2, [pc, #272]	; (800a900 <HAL_TIM_ConfigClockSource+0x60c>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d013      	beq.n	800a81a <HAL_TIM_ConfigClockSource+0x526>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a43      	ldr	r2, [pc, #268]	; (800a904 <HAL_TIM_ConfigClockSource+0x610>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d00e      	beq.n	800a81a <HAL_TIM_ConfigClockSource+0x526>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a41      	ldr	r2, [pc, #260]	; (800a908 <HAL_TIM_ConfigClockSource+0x614>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d009      	beq.n	800a81a <HAL_TIM_ConfigClockSource+0x526>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a40      	ldr	r2, [pc, #256]	; (800a90c <HAL_TIM_ConfigClockSource+0x618>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d004      	beq.n	800a81a <HAL_TIM_ConfigClockSource+0x526>
 800a810:	f241 5116 	movw	r1, #5398	; 0x1516
 800a814:	483e      	ldr	r0, [pc, #248]	; (800a910 <HAL_TIM_ConfigClockSource+0x61c>)
 800a816:	f7f7 fe76 	bl	8002506 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a822:	d014      	beq.n	800a84e <HAL_TIM_ConfigClockSource+0x55a>
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d010      	beq.n	800a84e <HAL_TIM_ConfigClockSource+0x55a>
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00c      	beq.n	800a84e <HAL_TIM_ConfigClockSource+0x55a>
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	2b02      	cmp	r3, #2
 800a83a:	d008      	beq.n	800a84e <HAL_TIM_ConfigClockSource+0x55a>
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	2b0a      	cmp	r3, #10
 800a842:	d004      	beq.n	800a84e <HAL_TIM_ConfigClockSource+0x55a>
 800a844:	f241 5119 	movw	r1, #5401	; 0x1519
 800a848:	4831      	ldr	r0, [pc, #196]	; (800a910 <HAL_TIM_ConfigClockSource+0x61c>)
 800a84a:	f7f7 fe5c 	bl	8002506 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	2b0f      	cmp	r3, #15
 800a854:	d904      	bls.n	800a860 <HAL_TIM_ConfigClockSource+0x56c>
 800a856:	f241 511a 	movw	r1, #5402	; 0x151a
 800a85a:	482d      	ldr	r0, [pc, #180]	; (800a910 <HAL_TIM_ConfigClockSource+0x61c>)
 800a85c:	f7f7 fe53 	bl	8002506 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6818      	ldr	r0, [r3, #0]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	6859      	ldr	r1, [r3, #4]
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	461a      	mov	r2, r3
 800a86e:	f000 f92b 	bl	800aac8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2140      	movs	r1, #64	; 0x40
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 f984 	bl	800ab86 <TIM_ITRx_SetConfig>
      break;
 800a87e:	e02f      	b.n	800a8e0 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a1d      	ldr	r2, [pc, #116]	; (800a8fc <HAL_TIM_ConfigClockSource+0x608>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d01d      	beq.n	800a8c6 <HAL_TIM_ConfigClockSource+0x5d2>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a892:	d018      	beq.n	800a8c6 <HAL_TIM_ConfigClockSource+0x5d2>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a19      	ldr	r2, [pc, #100]	; (800a900 <HAL_TIM_ConfigClockSource+0x60c>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d013      	beq.n	800a8c6 <HAL_TIM_ConfigClockSource+0x5d2>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a18      	ldr	r2, [pc, #96]	; (800a904 <HAL_TIM_ConfigClockSource+0x610>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d00e      	beq.n	800a8c6 <HAL_TIM_ConfigClockSource+0x5d2>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a16      	ldr	r2, [pc, #88]	; (800a908 <HAL_TIM_ConfigClockSource+0x614>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d009      	beq.n	800a8c6 <HAL_TIM_ConfigClockSource+0x5d2>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a15      	ldr	r2, [pc, #84]	; (800a90c <HAL_TIM_ConfigClockSource+0x618>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d004      	beq.n	800a8c6 <HAL_TIM_ConfigClockSource+0x5d2>
 800a8bc:	f241 5129 	movw	r1, #5417	; 0x1529
 800a8c0:	4813      	ldr	r0, [pc, #76]	; (800a910 <HAL_TIM_ConfigClockSource+0x61c>)
 800a8c2:	f7f7 fe20 	bl	8002506 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	4610      	mov	r0, r2
 800a8d2:	f000 f958 	bl	800ab86 <TIM_ITRx_SetConfig>
      break;
 800a8d6:	e003      	b.n	800a8e0 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	73fb      	strb	r3, [r7, #15]
      break;
 800a8dc:	e000      	b.n	800a8e0 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800a8de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	40010000 	.word	0x40010000
 800a900:	40000400 	.word	0x40000400
 800a904:	40000800 	.word	0x40000800
 800a908:	40000c00 	.word	0x40000c00
 800a90c:	40014000 	.word	0x40014000
 800a910:	0800f2e4 	.word	0x0800f2e4

0800a914 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a91c:	bf00      	nop
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a958:	bf00      	nop
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a96c:	bf00      	nop
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a994:	bf00      	nop
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4a34      	ldr	r2, [pc, #208]	; (800aaac <TIM_Base_SetConfig+0xe4>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d00f      	beq.n	800aa00 <TIM_Base_SetConfig+0x38>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9e6:	d00b      	beq.n	800aa00 <TIM_Base_SetConfig+0x38>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4a31      	ldr	r2, [pc, #196]	; (800aab0 <TIM_Base_SetConfig+0xe8>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d007      	beq.n	800aa00 <TIM_Base_SetConfig+0x38>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a30      	ldr	r2, [pc, #192]	; (800aab4 <TIM_Base_SetConfig+0xec>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d003      	beq.n	800aa00 <TIM_Base_SetConfig+0x38>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4a2f      	ldr	r2, [pc, #188]	; (800aab8 <TIM_Base_SetConfig+0xf0>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d108      	bne.n	800aa12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4a25      	ldr	r2, [pc, #148]	; (800aaac <TIM_Base_SetConfig+0xe4>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d01b      	beq.n	800aa52 <TIM_Base_SetConfig+0x8a>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa20:	d017      	beq.n	800aa52 <TIM_Base_SetConfig+0x8a>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4a22      	ldr	r2, [pc, #136]	; (800aab0 <TIM_Base_SetConfig+0xe8>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d013      	beq.n	800aa52 <TIM_Base_SetConfig+0x8a>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	4a21      	ldr	r2, [pc, #132]	; (800aab4 <TIM_Base_SetConfig+0xec>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d00f      	beq.n	800aa52 <TIM_Base_SetConfig+0x8a>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a20      	ldr	r2, [pc, #128]	; (800aab8 <TIM_Base_SetConfig+0xf0>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d00b      	beq.n	800aa52 <TIM_Base_SetConfig+0x8a>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	4a1f      	ldr	r2, [pc, #124]	; (800aabc <TIM_Base_SetConfig+0xf4>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d007      	beq.n	800aa52 <TIM_Base_SetConfig+0x8a>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4a1e      	ldr	r2, [pc, #120]	; (800aac0 <TIM_Base_SetConfig+0xf8>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d003      	beq.n	800aa52 <TIM_Base_SetConfig+0x8a>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a1d      	ldr	r2, [pc, #116]	; (800aac4 <TIM_Base_SetConfig+0xfc>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d108      	bne.n	800aa64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	689a      	ldr	r2, [r3, #8]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a08      	ldr	r2, [pc, #32]	; (800aaac <TIM_Base_SetConfig+0xe4>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d103      	bne.n	800aa98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	691a      	ldr	r2, [r3, #16]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	615a      	str	r2, [r3, #20]
}
 800aa9e:	bf00      	nop
 800aaa0:	3714      	adds	r7, #20
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	40010000 	.word	0x40010000
 800aab0:	40000400 	.word	0x40000400
 800aab4:	40000800 	.word	0x40000800
 800aab8:	40000c00 	.word	0x40000c00
 800aabc:	40014000 	.word	0x40014000
 800aac0:	40014400 	.word	0x40014400
 800aac4:	40014800 	.word	0x40014800

0800aac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b087      	sub	sp, #28
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6a1b      	ldr	r3, [r3, #32]
 800aad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6a1b      	ldr	r3, [r3, #32]
 800aade:	f023 0201 	bic.w	r2, r3, #1
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	699b      	ldr	r3, [r3, #24]
 800aaea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aaf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	011b      	lsls	r3, r3, #4
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	f023 030a 	bic.w	r3, r3, #10
 800ab04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ab06:	697a      	ldr	r2, [r7, #20]
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	693a      	ldr	r2, [r7, #16]
 800ab12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	697a      	ldr	r2, [r7, #20]
 800ab18:	621a      	str	r2, [r3, #32]
}
 800ab1a:	bf00      	nop
 800ab1c:	371c      	adds	r7, #28
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr

0800ab26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab26:	b480      	push	{r7}
 800ab28:	b087      	sub	sp, #28
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	60f8      	str	r0, [r7, #12]
 800ab2e:	60b9      	str	r1, [r7, #8]
 800ab30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	f023 0210 	bic.w	r2, r3, #16
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6a1b      	ldr	r3, [r3, #32]
 800ab48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	031b      	lsls	r3, r3, #12
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ab62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	011b      	lsls	r3, r3, #4
 800ab68:	693a      	ldr	r2, [r7, #16]
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	693a      	ldr	r2, [r7, #16]
 800ab78:	621a      	str	r2, [r3, #32]
}
 800ab7a:	bf00      	nop
 800ab7c:	371c      	adds	r7, #28
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr

0800ab86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b085      	sub	sp, #20
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
 800ab8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	f043 0307 	orr.w	r3, r3, #7
 800aba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	609a      	str	r2, [r3, #8]
}
 800abb0:	bf00      	nop
 800abb2:	3714      	adds	r7, #20
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b087      	sub	sp, #28
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
 800abc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800abd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	021a      	lsls	r2, r3, #8
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	431a      	orrs	r2, r3
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	697a      	ldr	r2, [r7, #20]
 800abee:	609a      	str	r2, [r3, #8]
}
 800abf0:	bf00      	nop
 800abf2:	371c      	adds	r7, #28
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4a1c      	ldr	r2, [pc, #112]	; (800ac78 <TIM_ResetCallback+0x7c>)
 800ac08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a1b      	ldr	r2, [pc, #108]	; (800ac7c <TIM_ResetCallback+0x80>)
 800ac10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4a1a      	ldr	r2, [pc, #104]	; (800ac80 <TIM_ResetCallback+0x84>)
 800ac18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4a19      	ldr	r2, [pc, #100]	; (800ac84 <TIM_ResetCallback+0x88>)
 800ac20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a18      	ldr	r2, [pc, #96]	; (800ac88 <TIM_ResetCallback+0x8c>)
 800ac28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a17      	ldr	r2, [pc, #92]	; (800ac8c <TIM_ResetCallback+0x90>)
 800ac30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4a16      	ldr	r2, [pc, #88]	; (800ac90 <TIM_ResetCallback+0x94>)
 800ac38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a15      	ldr	r2, [pc, #84]	; (800ac94 <TIM_ResetCallback+0x98>)
 800ac40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a14      	ldr	r2, [pc, #80]	; (800ac98 <TIM_ResetCallback+0x9c>)
 800ac48:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4a13      	ldr	r2, [pc, #76]	; (800ac9c <TIM_ResetCallback+0xa0>)
 800ac50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a12      	ldr	r2, [pc, #72]	; (800aca0 <TIM_ResetCallback+0xa4>)
 800ac58:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a11      	ldr	r2, [pc, #68]	; (800aca4 <TIM_ResetCallback+0xa8>)
 800ac60:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a10      	ldr	r2, [pc, #64]	; (800aca8 <TIM_ResetCallback+0xac>)
 800ac68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr
 800ac78:	080024d9 	.word	0x080024d9
 800ac7c:	0800a915 	.word	0x0800a915
 800ac80:	0800a98d 	.word	0x0800a98d
 800ac84:	0800a9a1 	.word	0x0800a9a1
 800ac88:	0800a93d 	.word	0x0800a93d
 800ac8c:	0800a951 	.word	0x0800a951
 800ac90:	0800a929 	.word	0x0800a929
 800ac94:	0800a965 	.word	0x0800a965
 800ac98:	0800a979 	.word	0x0800a979
 800ac9c:	0800a9b5 	.word	0x0800a9b5
 800aca0:	0800ae29 	.word	0x0800ae29
 800aca4:	0800ae3d 	.word	0x0800ae3d
 800aca8:	0800ae51 	.word	0x0800ae51

0800acac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a55      	ldr	r2, [pc, #340]	; (800ae10 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d018      	beq.n	800acf2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acc8:	d013      	beq.n	800acf2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a51      	ldr	r2, [pc, #324]	; (800ae14 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d00e      	beq.n	800acf2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a4f      	ldr	r2, [pc, #316]	; (800ae18 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d009      	beq.n	800acf2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a4e      	ldr	r2, [pc, #312]	; (800ae1c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d004      	beq.n	800acf2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800ace8:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800acec:	484c      	ldr	r0, [pc, #304]	; (800ae20 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800acee:	f7f7 fc0a 	bl	8002506 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d020      	beq.n	800ad3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2b10      	cmp	r3, #16
 800ad00:	d01c      	beq.n	800ad3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2b20      	cmp	r3, #32
 800ad08:	d018      	beq.n	800ad3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b30      	cmp	r3, #48	; 0x30
 800ad10:	d014      	beq.n	800ad3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2b40      	cmp	r3, #64	; 0x40
 800ad18:	d010      	beq.n	800ad3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b50      	cmp	r3, #80	; 0x50
 800ad20:	d00c      	beq.n	800ad3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2b60      	cmp	r3, #96	; 0x60
 800ad28:	d008      	beq.n	800ad3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b70      	cmp	r3, #112	; 0x70
 800ad30:	d004      	beq.n	800ad3c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ad32:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800ad36:	483a      	ldr	r0, [pc, #232]	; (800ae20 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ad38:	f7f7 fbe5 	bl	8002506 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	2b80      	cmp	r3, #128	; 0x80
 800ad42:	d008      	beq.n	800ad56 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d004      	beq.n	800ad56 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800ad4c:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800ad50:	4833      	ldr	r0, [pc, #204]	; (800ae20 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ad52:	f7f7 fbd8 	bl	8002506 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d101      	bne.n	800ad64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ad60:	2302      	movs	r3, #2
 800ad62:	e050      	b.n	800ae06 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2202      	movs	r2, #2
 800ad70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a1b      	ldr	r2, [pc, #108]	; (800ae10 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d018      	beq.n	800adda <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adb0:	d013      	beq.n	800adda <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a17      	ldr	r2, [pc, #92]	; (800ae14 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d00e      	beq.n	800adda <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a15      	ldr	r2, [pc, #84]	; (800ae18 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d009      	beq.n	800adda <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a14      	ldr	r2, [pc, #80]	; (800ae1c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d004      	beq.n	800adda <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a13      	ldr	r2, [pc, #76]	; (800ae24 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d10c      	bne.n	800adf4 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ade0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	4313      	orrs	r3, r2
 800adea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68ba      	ldr	r2, [r7, #8]
 800adf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	40010000 	.word	0x40010000
 800ae14:	40000400 	.word	0x40000400
 800ae18:	40000800 	.word	0x40000800
 800ae1c:	40000c00 	.word	0x40000c00
 800ae20:	0800f358 	.word	0x0800f358
 800ae24:	40014000 	.word	0x40014000

0800ae28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800ae44:	bf00      	nop
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae58:	bf00      	nop
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e0ab      	b.n	800afce <HAL_UART_Init+0x16a>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	699b      	ldr	r3, [r3, #24]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d02c      	beq.n	800aed8 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a55      	ldr	r2, [pc, #340]	; (800afd8 <HAL_UART_Init+0x174>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d00e      	beq.n	800aea6 <HAL_UART_Init+0x42>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a53      	ldr	r2, [pc, #332]	; (800afdc <HAL_UART_Init+0x178>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d009      	beq.n	800aea6 <HAL_UART_Init+0x42>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a52      	ldr	r2, [pc, #328]	; (800afe0 <HAL_UART_Init+0x17c>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d004      	beq.n	800aea6 <HAL_UART_Init+0x42>
 800ae9c:	f240 1173 	movw	r1, #371	; 0x173
 800aea0:	4850      	ldr	r0, [pc, #320]	; (800afe4 <HAL_UART_Init+0x180>)
 800aea2:	f7f7 fb30 	bl	8002506 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	699b      	ldr	r3, [r3, #24]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d028      	beq.n	800af00 <HAL_UART_Init+0x9c>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	699b      	ldr	r3, [r3, #24]
 800aeb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeb6:	d023      	beq.n	800af00 <HAL_UART_Init+0x9c>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aec0:	d01e      	beq.n	800af00 <HAL_UART_Init+0x9c>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aeca:	d019      	beq.n	800af00 <HAL_UART_Init+0x9c>
 800aecc:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800aed0:	4844      	ldr	r0, [pc, #272]	; (800afe4 <HAL_UART_Init+0x180>)
 800aed2:	f7f7 fb18 	bl	8002506 <assert_failed>
 800aed6:	e013      	b.n	800af00 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a3e      	ldr	r2, [pc, #248]	; (800afd8 <HAL_UART_Init+0x174>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d00e      	beq.n	800af00 <HAL_UART_Init+0x9c>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a3d      	ldr	r2, [pc, #244]	; (800afdc <HAL_UART_Init+0x178>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d009      	beq.n	800af00 <HAL_UART_Init+0x9c>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a3b      	ldr	r2, [pc, #236]	; (800afe0 <HAL_UART_Init+0x17c>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d004      	beq.n	800af00 <HAL_UART_Init+0x9c>
 800aef6:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800aefa:	483a      	ldr	r0, [pc, #232]	; (800afe4 <HAL_UART_Init+0x180>)
 800aefc:	f7f7 fb03 	bl	8002506 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d009      	beq.n	800af1c <HAL_UART_Init+0xb8>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af10:	d004      	beq.n	800af1c <HAL_UART_Init+0xb8>
 800af12:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800af16:	4833      	ldr	r0, [pc, #204]	; (800afe4 <HAL_UART_Init+0x180>)
 800af18:	f7f7 faf5 	bl	8002506 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	69db      	ldr	r3, [r3, #28]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d009      	beq.n	800af38 <HAL_UART_Init+0xd4>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	69db      	ldr	r3, [r3, #28]
 800af28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af2c:	d004      	beq.n	800af38 <HAL_UART_Init+0xd4>
 800af2e:	f240 117b 	movw	r1, #379	; 0x17b
 800af32:	482c      	ldr	r0, [pc, #176]	; (800afe4 <HAL_UART_Init+0x180>)
 800af34:	f7f7 fae7 	bl	8002506 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	2b00      	cmp	r3, #0
 800af42:	d111      	bne.n	800af68 <HAL_UART_Init+0x104>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 fb61 	bl	800b614 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af56:	2b00      	cmp	r3, #0
 800af58:	d102      	bne.n	800af60 <HAL_UART_Init+0xfc>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4a22      	ldr	r2, [pc, #136]	; (800afe8 <HAL_UART_Init+0x184>)
 800af5e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2224      	movs	r2, #36	; 0x24
 800af6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68da      	ldr	r2, [r3, #12]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 fd5b 	bl	800ba3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	691a      	ldr	r2, [r3, #16]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	695a      	ldr	r2, [r3, #20]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800afa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68da      	ldr	r2, [r3, #12]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800afb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2220      	movs	r2, #32
 800afc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2220      	movs	r2, #32
 800afc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3708      	adds	r7, #8
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	40011000 	.word	0x40011000
 800afdc:	40004400 	.word	0x40004400
 800afe0:	40011400 	.word	0x40011400
 800afe4:	0800f3d0 	.word	0x0800f3d0
 800afe8:	08002f49 	.word	0x08002f49

0800afec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	4613      	mov	r3, r2
 800aff8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b20      	cmp	r3, #32
 800b004:	d11d      	bne.n	800b042 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d002      	beq.n	800b012 <HAL_UART_Receive_IT+0x26>
 800b00c:	88fb      	ldrh	r3, [r7, #6]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	e016      	b.n	800b044 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d101      	bne.n	800b024 <HAL_UART_Receive_IT+0x38>
 800b020:	2302      	movs	r3, #2
 800b022:	e00f      	b.n	800b044 <HAL_UART_Receive_IT+0x58>
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b032:	88fb      	ldrh	r3, [r7, #6]
 800b034:	461a      	mov	r2, r3
 800b036:	68b9      	ldr	r1, [r7, #8]
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f000 fb23 	bl	800b684 <UART_Start_Receive_IT>
 800b03e:	4603      	mov	r3, r0
 800b040:	e000      	b.n	800b044 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b042:	2302      	movs	r3, #2
  }
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b0ba      	sub	sp, #232	; 0xe8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	695b      	ldr	r3, [r3, #20]
 800b06e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b072:	2300      	movs	r3, #0
 800b074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b078:	2300      	movs	r3, #0
 800b07a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b07e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b082:	f003 030f 	and.w	r3, r3, #15
 800b086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b08a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10f      	bne.n	800b0b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b096:	f003 0320 	and.w	r3, r3, #32
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d009      	beq.n	800b0b2 <HAL_UART_IRQHandler+0x66>
 800b09e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0a2:	f003 0320 	and.w	r3, r3, #32
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d003      	beq.n	800b0b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 fc09 	bl	800b8c2 <UART_Receive_IT>
      return;
 800b0b0:	e25b      	b.n	800b56a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b0b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f000 80e1 	beq.w	800b27e <HAL_UART_IRQHandler+0x232>
 800b0bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0c0:	f003 0301 	and.w	r3, r3, #1
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d106      	bne.n	800b0d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b0c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f000 80d4 	beq.w	800b27e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b0d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0da:	f003 0301 	and.w	r3, r3, #1
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00b      	beq.n	800b0fa <HAL_UART_IRQHandler+0xae>
 800b0e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d005      	beq.n	800b0fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f2:	f043 0201 	orr.w	r2, r3, #1
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b0fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0fe:	f003 0304 	and.w	r3, r3, #4
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00b      	beq.n	800b11e <HAL_UART_IRQHandler+0xd2>
 800b106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b10a:	f003 0301 	and.w	r3, r3, #1
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d005      	beq.n	800b11e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b116:	f043 0202 	orr.w	r2, r3, #2
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b11e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b122:	f003 0302 	and.w	r3, r3, #2
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00b      	beq.n	800b142 <HAL_UART_IRQHandler+0xf6>
 800b12a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b12e:	f003 0301 	and.w	r3, r3, #1
 800b132:	2b00      	cmp	r3, #0
 800b134:	d005      	beq.n	800b142 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13a:	f043 0204 	orr.w	r2, r3, #4
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b146:	f003 0308 	and.w	r3, r3, #8
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d011      	beq.n	800b172 <HAL_UART_IRQHandler+0x126>
 800b14e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b152:	f003 0320 	and.w	r3, r3, #32
 800b156:	2b00      	cmp	r3, #0
 800b158:	d105      	bne.n	800b166 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b15a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b15e:	f003 0301 	and.w	r3, r3, #1
 800b162:	2b00      	cmp	r3, #0
 800b164:	d005      	beq.n	800b172 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16a:	f043 0208 	orr.w	r2, r3, #8
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b176:	2b00      	cmp	r3, #0
 800b178:	f000 81f2 	beq.w	800b560 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b17c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b180:	f003 0320 	and.w	r3, r3, #32
 800b184:	2b00      	cmp	r3, #0
 800b186:	d008      	beq.n	800b19a <HAL_UART_IRQHandler+0x14e>
 800b188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b18c:	f003 0320 	and.w	r3, r3, #32
 800b190:	2b00      	cmp	r3, #0
 800b192:	d002      	beq.n	800b19a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 fb94 	bl	800b8c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	695b      	ldr	r3, [r3, #20]
 800b1a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1a4:	2b40      	cmp	r3, #64	; 0x40
 800b1a6:	bf0c      	ite	eq
 800b1a8:	2301      	moveq	r3, #1
 800b1aa:	2300      	movne	r3, #0
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b6:	f003 0308 	and.w	r3, r3, #8
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d103      	bne.n	800b1c6 <HAL_UART_IRQHandler+0x17a>
 800b1be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d051      	beq.n	800b26a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 fa9a 	bl	800b700 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1d6:	2b40      	cmp	r3, #64	; 0x40
 800b1d8:	d142      	bne.n	800b260 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	3314      	adds	r3, #20
 800b1e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1e8:	e853 3f00 	ldrex	r3, [r3]
 800b1ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b1f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b1f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	3314      	adds	r3, #20
 800b202:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b206:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b20a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b20e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b212:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b216:	e841 2300 	strex	r3, r2, [r1]
 800b21a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b21e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d1d9      	bne.n	800b1da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d013      	beq.n	800b256 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b232:	4a7f      	ldr	r2, [pc, #508]	; (800b430 <HAL_UART_IRQHandler+0x3e4>)
 800b234:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7f9 fb3a 	bl	80048b4 <HAL_DMA_Abort_IT>
 800b240:	4603      	mov	r3, r0
 800b242:	2b00      	cmp	r3, #0
 800b244:	d019      	beq.n	800b27a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b24a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b250:	4610      	mov	r0, r2
 800b252:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b254:	e011      	b.n	800b27a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b25e:	e00c      	b.n	800b27a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b268:	e007      	b.n	800b27a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b278:	e172      	b.n	800b560 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b27a:	bf00      	nop
    return;
 800b27c:	e170      	b.n	800b560 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b282:	2b01      	cmp	r3, #1
 800b284:	f040 814c 	bne.w	800b520 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b28c:	f003 0310 	and.w	r3, r3, #16
 800b290:	2b00      	cmp	r3, #0
 800b292:	f000 8145 	beq.w	800b520 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b29a:	f003 0310 	and.w	r3, r3, #16
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	f000 813e 	beq.w	800b520 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	60bb      	str	r3, [r7, #8]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	60bb      	str	r3, [r7, #8]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	60bb      	str	r3, [r7, #8]
 800b2b8:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	695b      	ldr	r3, [r3, #20]
 800b2c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2c4:	2b40      	cmp	r3, #64	; 0x40
 800b2c6:	f040 80b5 	bne.w	800b434 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b2d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f000 8142 	beq.w	800b564 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b2e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	f080 813b 	bcs.w	800b564 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2f4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2fa:	69db      	ldr	r3, [r3, #28]
 800b2fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b300:	f000 8088 	beq.w	800b414 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	330c      	adds	r3, #12
 800b30a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b312:	e853 3f00 	ldrex	r3, [r3]
 800b316:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b31a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b31e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b322:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	330c      	adds	r3, #12
 800b32c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b330:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b334:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b338:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b33c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b340:	e841 2300 	strex	r3, r2, [r1]
 800b344:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b348:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1d9      	bne.n	800b304 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	3314      	adds	r3, #20
 800b356:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b35a:	e853 3f00 	ldrex	r3, [r3]
 800b35e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b362:	f023 0301 	bic.w	r3, r3, #1
 800b366:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	3314      	adds	r3, #20
 800b370:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b374:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b378:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b37c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b380:	e841 2300 	strex	r3, r2, [r1]
 800b384:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1e1      	bne.n	800b350 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	3314      	adds	r3, #20
 800b392:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b394:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b396:	e853 3f00 	ldrex	r3, [r3]
 800b39a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b39c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b39e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	3314      	adds	r3, #20
 800b3ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b3b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b3b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b3b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b3b8:	e841 2300 	strex	r3, r2, [r1]
 800b3bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b3be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d1e3      	bne.n	800b38c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2220      	movs	r2, #32
 800b3c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	330c      	adds	r3, #12
 800b3d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3dc:	e853 3f00 	ldrex	r3, [r3]
 800b3e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b3e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3e4:	f023 0310 	bic.w	r3, r3, #16
 800b3e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	330c      	adds	r3, #12
 800b3f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b3f6:	65ba      	str	r2, [r7, #88]	; 0x58
 800b3f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b3fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3fe:	e841 2300 	strex	r3, r2, [r1]
 800b402:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1e3      	bne.n	800b3d2 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b40e:	4618      	mov	r0, r3
 800b410:	f7f9 f9e0 	bl	80047d4 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b420:	b292      	uxth	r2, r2
 800b422:	1a8a      	subs	r2, r1, r2
 800b424:	b292      	uxth	r2, r2
 800b426:	4611      	mov	r1, r2
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b42c:	e09a      	b.n	800b564 <HAL_UART_IRQHandler+0x518>
 800b42e:	bf00      	nop
 800b430:	0800b7c7 	.word	0x0800b7c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b448:	b29b      	uxth	r3, r3
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f000 808c 	beq.w	800b568 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b450:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b454:	2b00      	cmp	r3, #0
 800b456:	f000 8087 	beq.w	800b568 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	330c      	adds	r3, #12
 800b460:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b464:	e853 3f00 	ldrex	r3, [r3]
 800b468:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b470:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	330c      	adds	r3, #12
 800b47a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b47e:	647a      	str	r2, [r7, #68]	; 0x44
 800b480:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b482:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b484:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b486:	e841 2300 	strex	r3, r2, [r1]
 800b48a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1e3      	bne.n	800b45a <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3314      	adds	r3, #20
 800b498:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49c:	e853 3f00 	ldrex	r3, [r3]
 800b4a0:	623b      	str	r3, [r7, #32]
   return(result);
 800b4a2:	6a3b      	ldr	r3, [r7, #32]
 800b4a4:	f023 0301 	bic.w	r3, r3, #1
 800b4a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	3314      	adds	r3, #20
 800b4b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b4b6:	633a      	str	r2, [r7, #48]	; 0x30
 800b4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4be:	e841 2300 	strex	r3, r2, [r1]
 800b4c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d1e3      	bne.n	800b492 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2220      	movs	r2, #32
 800b4ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	330c      	adds	r3, #12
 800b4de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	e853 3f00 	ldrex	r3, [r3]
 800b4e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f023 0310 	bic.w	r3, r3, #16
 800b4ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	330c      	adds	r3, #12
 800b4f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b4fc:	61fa      	str	r2, [r7, #28]
 800b4fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b500:	69b9      	ldr	r1, [r7, #24]
 800b502:	69fa      	ldr	r2, [r7, #28]
 800b504:	e841 2300 	strex	r3, r2, [r1]
 800b508:	617b      	str	r3, [r7, #20]
   return(result);
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d1e3      	bne.n	800b4d8 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b514:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b518:	4611      	mov	r1, r2
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b51e:	e023      	b.n	800b568 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d009      	beq.n	800b540 <HAL_UART_IRQHandler+0x4f4>
 800b52c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b534:	2b00      	cmp	r3, #0
 800b536:	d003      	beq.n	800b540 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 f959 	bl	800b7f0 <UART_Transmit_IT>
    return;
 800b53e:	e014      	b.n	800b56a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00e      	beq.n	800b56a <HAL_UART_IRQHandler+0x51e>
 800b54c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b554:	2b00      	cmp	r3, #0
 800b556:	d008      	beq.n	800b56a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f999 	bl	800b890 <UART_EndTransmit_IT>
    return;
 800b55e:	e004      	b.n	800b56a <HAL_UART_IRQHandler+0x51e>
    return;
 800b560:	bf00      	nop
 800b562:	e002      	b.n	800b56a <HAL_UART_IRQHandler+0x51e>
      return;
 800b564:	bf00      	nop
 800b566:	e000      	b.n	800b56a <HAL_UART_IRQHandler+0x51e>
      return;
 800b568:	bf00      	nop
  }
}
 800b56a:	37e8      	adds	r7, #232	; 0xe8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b578:	bf00      	nop
 800b57a:	370c      	adds	r7, #12
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b58c:	bf00      	nop
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b5b4:	bf00      	nop
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b5dc:	bf00      	nop
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b5f0:	bf00      	nop
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	460b      	mov	r3, r1
 800b606:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a10      	ldr	r2, [pc, #64]	; (800b660 <UART_InitCallbacksToDefault+0x4c>)
 800b620:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a0f      	ldr	r2, [pc, #60]	; (800b664 <UART_InitCallbacksToDefault+0x50>)
 800b626:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4a0f      	ldr	r2, [pc, #60]	; (800b668 <UART_InitCallbacksToDefault+0x54>)
 800b62c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4a0e      	ldr	r2, [pc, #56]	; (800b66c <UART_InitCallbacksToDefault+0x58>)
 800b632:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4a0e      	ldr	r2, [pc, #56]	; (800b670 <UART_InitCallbacksToDefault+0x5c>)
 800b638:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a0d      	ldr	r2, [pc, #52]	; (800b674 <UART_InitCallbacksToDefault+0x60>)
 800b63e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4a0d      	ldr	r2, [pc, #52]	; (800b678 <UART_InitCallbacksToDefault+0x64>)
 800b644:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4a0c      	ldr	r2, [pc, #48]	; (800b67c <UART_InitCallbacksToDefault+0x68>)
 800b64a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4a0c      	ldr	r2, [pc, #48]	; (800b680 <UART_InitCallbacksToDefault+0x6c>)
 800b650:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b652:	bf00      	nop
 800b654:	370c      	adds	r7, #12
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	0800b585 	.word	0x0800b585
 800b664:	0800b571 	.word	0x0800b571
 800b668:	0800b599 	.word	0x0800b599
 800b66c:	08003029 	.word	0x08003029
 800b670:	0800b5ad 	.word	0x0800b5ad
 800b674:	0800b5c1 	.word	0x0800b5c1
 800b678:	0800b5d5 	.word	0x0800b5d5
 800b67c:	0800b5e9 	.word	0x0800b5e9
 800b680:	0800b5fd 	.word	0x0800b5fd

0800b684 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	4613      	mov	r3, r2
 800b690:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	88fa      	ldrh	r2, [r7, #6]
 800b69c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	88fa      	ldrh	r2, [r7, #6]
 800b6a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2222      	movs	r2, #34	; 0x22
 800b6ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d007      	beq.n	800b6d2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	68da      	ldr	r2, [r3, #12]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	695a      	ldr	r2, [r3, #20]
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f042 0201 	orr.w	r2, r2, #1
 800b6e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68da      	ldr	r2, [r3, #12]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f042 0220 	orr.w	r2, r2, #32
 800b6f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3714      	adds	r7, #20
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr

0800b700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b700:	b480      	push	{r7}
 800b702:	b095      	sub	sp, #84	; 0x54
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	330c      	adds	r3, #12
 800b70e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b712:	e853 3f00 	ldrex	r3, [r3]
 800b716:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b71e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	330c      	adds	r3, #12
 800b726:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b728:	643a      	str	r2, [r7, #64]	; 0x40
 800b72a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b72e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b730:	e841 2300 	strex	r3, r2, [r1]
 800b734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1e5      	bne.n	800b708 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3314      	adds	r3, #20
 800b742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b744:	6a3b      	ldr	r3, [r7, #32]
 800b746:	e853 3f00 	ldrex	r3, [r3]
 800b74a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b74c:	69fb      	ldr	r3, [r7, #28]
 800b74e:	f023 0301 	bic.w	r3, r3, #1
 800b752:	64bb      	str	r3, [r7, #72]	; 0x48
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	3314      	adds	r3, #20
 800b75a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b75c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b75e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b764:	e841 2300 	strex	r3, r2, [r1]
 800b768:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1e5      	bne.n	800b73c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b774:	2b01      	cmp	r3, #1
 800b776:	d119      	bne.n	800b7ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	330c      	adds	r3, #12
 800b77e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	e853 3f00 	ldrex	r3, [r3]
 800b786:	60bb      	str	r3, [r7, #8]
   return(result);
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	f023 0310 	bic.w	r3, r3, #16
 800b78e:	647b      	str	r3, [r7, #68]	; 0x44
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	330c      	adds	r3, #12
 800b796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b798:	61ba      	str	r2, [r7, #24]
 800b79a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79c:	6979      	ldr	r1, [r7, #20]
 800b79e:	69ba      	ldr	r2, [r7, #24]
 800b7a0:	e841 2300 	strex	r3, r2, [r1]
 800b7a4:	613b      	str	r3, [r7, #16]
   return(result);
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d1e5      	bne.n	800b778 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2220      	movs	r2, #32
 800b7b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b7ba:	bf00      	nop
 800b7bc:	3754      	adds	r7, #84	; 0x54
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr

0800b7c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b084      	sub	sp, #16
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7e8:	bf00      	nop
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	2b21      	cmp	r3, #33	; 0x21
 800b802:	d13e      	bne.n	800b882 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b80c:	d114      	bne.n	800b838 <UART_Transmit_IT+0x48>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	691b      	ldr	r3, [r3, #16]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d110      	bne.n	800b838 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6a1b      	ldr	r3, [r3, #32]
 800b81a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	881b      	ldrh	r3, [r3, #0]
 800b820:	461a      	mov	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b82a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a1b      	ldr	r3, [r3, #32]
 800b830:	1c9a      	adds	r2, r3, #2
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	621a      	str	r2, [r3, #32]
 800b836:	e008      	b.n	800b84a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6a1b      	ldr	r3, [r3, #32]
 800b83c:	1c59      	adds	r1, r3, #1
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	6211      	str	r1, [r2, #32]
 800b842:	781a      	ldrb	r2, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b84e:	b29b      	uxth	r3, r3
 800b850:	3b01      	subs	r3, #1
 800b852:	b29b      	uxth	r3, r3
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	4619      	mov	r1, r3
 800b858:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d10f      	bne.n	800b87e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	68da      	ldr	r2, [r3, #12]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b86c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	68da      	ldr	r2, [r3, #12]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b87c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b87e:	2300      	movs	r3, #0
 800b880:	e000      	b.n	800b884 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b882:	2302      	movs	r3, #2
  }
}
 800b884:	4618      	mov	r0, r3
 800b886:	3714      	adds	r7, #20
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68da      	ldr	r2, [r3, #12]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2220      	movs	r2, #32
 800b8ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3708      	adds	r7, #8
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b08c      	sub	sp, #48	; 0x30
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b22      	cmp	r3, #34	; 0x22
 800b8d4:	f040 80ad 	bne.w	800ba32 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	689b      	ldr	r3, [r3, #8]
 800b8dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8e0:	d117      	bne.n	800b912 <UART_Receive_IT+0x50>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d113      	bne.n	800b912 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b900:	b29a      	uxth	r2, r3
 800b902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b904:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b90a:	1c9a      	adds	r2, r3, #2
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	629a      	str	r2, [r3, #40]	; 0x28
 800b910:	e026      	b.n	800b960 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b916:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b918:	2300      	movs	r3, #0
 800b91a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b924:	d007      	beq.n	800b936 <UART_Receive_IT+0x74>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d10a      	bne.n	800b944 <UART_Receive_IT+0x82>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d106      	bne.n	800b944 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	b2da      	uxtb	r2, r3
 800b93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b940:	701a      	strb	r2, [r3, #0]
 800b942:	e008      	b.n	800b956 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b950:	b2da      	uxtb	r2, r3
 800b952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b954:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b95a:	1c5a      	adds	r2, r3, #1
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b964:	b29b      	uxth	r3, r3
 800b966:	3b01      	subs	r3, #1
 800b968:	b29b      	uxth	r3, r3
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	4619      	mov	r1, r3
 800b96e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b970:	2b00      	cmp	r3, #0
 800b972:	d15c      	bne.n	800ba2e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	68da      	ldr	r2, [r3, #12]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f022 0220 	bic.w	r2, r2, #32
 800b982:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	68da      	ldr	r2, [r3, #12]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b992:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	695a      	ldr	r2, [r3, #20]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f022 0201 	bic.w	r2, r2, #1
 800b9a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2220      	movs	r2, #32
 800b9a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d136      	bne.n	800ba22 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	330c      	adds	r3, #12
 800b9c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	e853 3f00 	ldrex	r3, [r3]
 800b9c8:	613b      	str	r3, [r7, #16]
   return(result);
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	f023 0310 	bic.w	r3, r3, #16
 800b9d0:	627b      	str	r3, [r7, #36]	; 0x24
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	330c      	adds	r3, #12
 800b9d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9da:	623a      	str	r2, [r7, #32]
 800b9dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9de:	69f9      	ldr	r1, [r7, #28]
 800b9e0:	6a3a      	ldr	r2, [r7, #32]
 800b9e2:	e841 2300 	strex	r3, r2, [r1]
 800b9e6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1e5      	bne.n	800b9ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f003 0310 	and.w	r3, r3, #16
 800b9f8:	2b10      	cmp	r3, #16
 800b9fa:	d10a      	bne.n	800ba12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	60fb      	str	r3, [r7, #12]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	60fb      	str	r3, [r7, #12]
 800ba10:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	4798      	blx	r3
 800ba20:	e003      	b.n	800ba2a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	e002      	b.n	800ba34 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	e000      	b.n	800ba34 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800ba32:	2302      	movs	r3, #2
  }
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3730      	adds	r7, #48	; 0x30
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba40:	b0c0      	sub	sp, #256	; 0x100
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800ba48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba4c:	685a      	ldr	r2, [r3, #4]
 800ba4e:	4bcf      	ldr	r3, [pc, #828]	; (800bd8c <UART_SetConfig+0x350>)
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d904      	bls.n	800ba5e <UART_SetConfig+0x22>
 800ba54:	f640 6161 	movw	r1, #3681	; 0xe61
 800ba58:	48cd      	ldr	r0, [pc, #820]	; (800bd90 <UART_SetConfig+0x354>)
 800ba5a:	f7f6 fd54 	bl	8002506 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800ba5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d00a      	beq.n	800ba7e <UART_SetConfig+0x42>
 800ba68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba72:	d004      	beq.n	800ba7e <UART_SetConfig+0x42>
 800ba74:	f640 6162 	movw	r1, #3682	; 0xe62
 800ba78:	48c5      	ldr	r0, [pc, #788]	; (800bd90 <UART_SetConfig+0x354>)
 800ba7a:	f7f6 fd44 	bl	8002506 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800ba7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba82:	691b      	ldr	r3, [r3, #16]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d010      	beq.n	800baaa <UART_SetConfig+0x6e>
 800ba88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba8c:	691b      	ldr	r3, [r3, #16]
 800ba8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba92:	d00a      	beq.n	800baaa <UART_SetConfig+0x6e>
 800ba94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba98:	691b      	ldr	r3, [r3, #16]
 800ba9a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ba9e:	d004      	beq.n	800baaa <UART_SetConfig+0x6e>
 800baa0:	f640 6163 	movw	r1, #3683	; 0xe63
 800baa4:	48ba      	ldr	r0, [pc, #744]	; (800bd90 <UART_SetConfig+0x354>)
 800baa6:	f7f6 fd2e 	bl	8002506 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800baaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baae:	695a      	ldr	r2, [r3, #20]
 800bab0:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800bab4:	4013      	ands	r3, r2
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d104      	bne.n	800bac4 <UART_SetConfig+0x88>
 800baba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800babe:	695b      	ldr	r3, [r3, #20]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d104      	bne.n	800bace <UART_SetConfig+0x92>
 800bac4:	f640 6164 	movw	r1, #3684	; 0xe64
 800bac8:	48b1      	ldr	r0, [pc, #708]	; (800bd90 <UART_SetConfig+0x354>)
 800baca:	f7f6 fd1c 	bl	8002506 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bade:	68d9      	ldr	r1, [r3, #12]
 800bae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	ea40 0301 	orr.w	r3, r0, r1
 800baea:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800baec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baf0:	689a      	ldr	r2, [r3, #8]
 800baf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	431a      	orrs	r2, r3
 800bafa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bafe:	695b      	ldr	r3, [r3, #20]
 800bb00:	431a      	orrs	r2, r3
 800bb02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb06:	69db      	ldr	r3, [r3, #28]
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bb0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bb1a:	f021 010c 	bic.w	r1, r1, #12
 800bb1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bb28:	430b      	orrs	r3, r1
 800bb2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bb2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	695b      	ldr	r3, [r3, #20]
 800bb34:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bb38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb3c:	6999      	ldr	r1, [r3, #24]
 800bb3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	ea40 0301 	orr.w	r3, r0, r1
 800bb48:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bb4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	4b90      	ldr	r3, [pc, #576]	; (800bd94 <UART_SetConfig+0x358>)
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d005      	beq.n	800bb62 <UART_SetConfig+0x126>
 800bb56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	4b8e      	ldr	r3, [pc, #568]	; (800bd98 <UART_SetConfig+0x35c>)
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d104      	bne.n	800bb6c <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bb62:	f7fc fad9 	bl	8008118 <HAL_RCC_GetPCLK2Freq>
 800bb66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bb6a:	e003      	b.n	800bb74 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bb6c:	f7fc fac0 	bl	80080f0 <HAL_RCC_GetPCLK1Freq>
 800bb70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb78:	69db      	ldr	r3, [r3, #28]
 800bb7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb7e:	f040 810f 	bne.w	800bda0 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bb82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb86:	2200      	movs	r2, #0
 800bb88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bb8c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bb90:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bb94:	4622      	mov	r2, r4
 800bb96:	462b      	mov	r3, r5
 800bb98:	1891      	adds	r1, r2, r2
 800bb9a:	65b9      	str	r1, [r7, #88]	; 0x58
 800bb9c:	415b      	adcs	r3, r3
 800bb9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bba0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bba4:	4621      	mov	r1, r4
 800bba6:	eb12 0801 	adds.w	r8, r2, r1
 800bbaa:	4629      	mov	r1, r5
 800bbac:	eb43 0901 	adc.w	r9, r3, r1
 800bbb0:	f04f 0200 	mov.w	r2, #0
 800bbb4:	f04f 0300 	mov.w	r3, #0
 800bbb8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bbbc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bbc0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bbc4:	4690      	mov	r8, r2
 800bbc6:	4699      	mov	r9, r3
 800bbc8:	4623      	mov	r3, r4
 800bbca:	eb18 0303 	adds.w	r3, r8, r3
 800bbce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bbd2:	462b      	mov	r3, r5
 800bbd4:	eb49 0303 	adc.w	r3, r9, r3
 800bbd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bbdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bbe8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bbec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	18db      	adds	r3, r3, r3
 800bbf4:	653b      	str	r3, [r7, #80]	; 0x50
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	eb42 0303 	adc.w	r3, r2, r3
 800bbfc:	657b      	str	r3, [r7, #84]	; 0x54
 800bbfe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bc02:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bc06:	f7f4 faeb 	bl	80001e0 <__aeabi_uldivmod>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	4b63      	ldr	r3, [pc, #396]	; (800bd9c <UART_SetConfig+0x360>)
 800bc10:	fba3 2302 	umull	r2, r3, r3, r2
 800bc14:	095b      	lsrs	r3, r3, #5
 800bc16:	011c      	lsls	r4, r3, #4
 800bc18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc22:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bc26:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bc2a:	4642      	mov	r2, r8
 800bc2c:	464b      	mov	r3, r9
 800bc2e:	1891      	adds	r1, r2, r2
 800bc30:	64b9      	str	r1, [r7, #72]	; 0x48
 800bc32:	415b      	adcs	r3, r3
 800bc34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bc3a:	4641      	mov	r1, r8
 800bc3c:	eb12 0a01 	adds.w	sl, r2, r1
 800bc40:	4649      	mov	r1, r9
 800bc42:	eb43 0b01 	adc.w	fp, r3, r1
 800bc46:	f04f 0200 	mov.w	r2, #0
 800bc4a:	f04f 0300 	mov.w	r3, #0
 800bc4e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bc52:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bc56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bc5a:	4692      	mov	sl, r2
 800bc5c:	469b      	mov	fp, r3
 800bc5e:	4643      	mov	r3, r8
 800bc60:	eb1a 0303 	adds.w	r3, sl, r3
 800bc64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc68:	464b      	mov	r3, r9
 800bc6a:	eb4b 0303 	adc.w	r3, fp, r3
 800bc6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bc72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc7e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bc82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bc86:	460b      	mov	r3, r1
 800bc88:	18db      	adds	r3, r3, r3
 800bc8a:	643b      	str	r3, [r7, #64]	; 0x40
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	eb42 0303 	adc.w	r3, r2, r3
 800bc92:	647b      	str	r3, [r7, #68]	; 0x44
 800bc94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bc98:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bc9c:	f7f4 faa0 	bl	80001e0 <__aeabi_uldivmod>
 800bca0:	4602      	mov	r2, r0
 800bca2:	460b      	mov	r3, r1
 800bca4:	4611      	mov	r1, r2
 800bca6:	4b3d      	ldr	r3, [pc, #244]	; (800bd9c <UART_SetConfig+0x360>)
 800bca8:	fba3 2301 	umull	r2, r3, r3, r1
 800bcac:	095b      	lsrs	r3, r3, #5
 800bcae:	2264      	movs	r2, #100	; 0x64
 800bcb0:	fb02 f303 	mul.w	r3, r2, r3
 800bcb4:	1acb      	subs	r3, r1, r3
 800bcb6:	00db      	lsls	r3, r3, #3
 800bcb8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bcbc:	4b37      	ldr	r3, [pc, #220]	; (800bd9c <UART_SetConfig+0x360>)
 800bcbe:	fba3 2302 	umull	r2, r3, r3, r2
 800bcc2:	095b      	lsrs	r3, r3, #5
 800bcc4:	005b      	lsls	r3, r3, #1
 800bcc6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bcca:	441c      	add	r4, r3
 800bccc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bcd6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bcda:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bcde:	4642      	mov	r2, r8
 800bce0:	464b      	mov	r3, r9
 800bce2:	1891      	adds	r1, r2, r2
 800bce4:	63b9      	str	r1, [r7, #56]	; 0x38
 800bce6:	415b      	adcs	r3, r3
 800bce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bcee:	4641      	mov	r1, r8
 800bcf0:	1851      	adds	r1, r2, r1
 800bcf2:	6339      	str	r1, [r7, #48]	; 0x30
 800bcf4:	4649      	mov	r1, r9
 800bcf6:	414b      	adcs	r3, r1
 800bcf8:	637b      	str	r3, [r7, #52]	; 0x34
 800bcfa:	f04f 0200 	mov.w	r2, #0
 800bcfe:	f04f 0300 	mov.w	r3, #0
 800bd02:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bd06:	4659      	mov	r1, fp
 800bd08:	00cb      	lsls	r3, r1, #3
 800bd0a:	4651      	mov	r1, sl
 800bd0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd10:	4651      	mov	r1, sl
 800bd12:	00ca      	lsls	r2, r1, #3
 800bd14:	4610      	mov	r0, r2
 800bd16:	4619      	mov	r1, r3
 800bd18:	4603      	mov	r3, r0
 800bd1a:	4642      	mov	r2, r8
 800bd1c:	189b      	adds	r3, r3, r2
 800bd1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd22:	464b      	mov	r3, r9
 800bd24:	460a      	mov	r2, r1
 800bd26:	eb42 0303 	adc.w	r3, r2, r3
 800bd2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bd3a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bd3e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bd42:	460b      	mov	r3, r1
 800bd44:	18db      	adds	r3, r3, r3
 800bd46:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd48:	4613      	mov	r3, r2
 800bd4a:	eb42 0303 	adc.w	r3, r2, r3
 800bd4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bd54:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bd58:	f7f4 fa42 	bl	80001e0 <__aeabi_uldivmod>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	4b0e      	ldr	r3, [pc, #56]	; (800bd9c <UART_SetConfig+0x360>)
 800bd62:	fba3 1302 	umull	r1, r3, r3, r2
 800bd66:	095b      	lsrs	r3, r3, #5
 800bd68:	2164      	movs	r1, #100	; 0x64
 800bd6a:	fb01 f303 	mul.w	r3, r1, r3
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	00db      	lsls	r3, r3, #3
 800bd72:	3332      	adds	r3, #50	; 0x32
 800bd74:	4a09      	ldr	r2, [pc, #36]	; (800bd9c <UART_SetConfig+0x360>)
 800bd76:	fba2 2303 	umull	r2, r3, r2, r3
 800bd7a:	095b      	lsrs	r3, r3, #5
 800bd7c:	f003 0207 	and.w	r2, r3, #7
 800bd80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4422      	add	r2, r4
 800bd88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bd8a:	e108      	b.n	800bf9e <UART_SetConfig+0x562>
 800bd8c:	00a037a0 	.word	0x00a037a0
 800bd90:	0800f3d0 	.word	0x0800f3d0
 800bd94:	40011000 	.word	0x40011000
 800bd98:	40011400 	.word	0x40011400
 800bd9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bda0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bda4:	2200      	movs	r2, #0
 800bda6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bdaa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bdae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bdb2:	4642      	mov	r2, r8
 800bdb4:	464b      	mov	r3, r9
 800bdb6:	1891      	adds	r1, r2, r2
 800bdb8:	6239      	str	r1, [r7, #32]
 800bdba:	415b      	adcs	r3, r3
 800bdbc:	627b      	str	r3, [r7, #36]	; 0x24
 800bdbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bdc2:	4641      	mov	r1, r8
 800bdc4:	1854      	adds	r4, r2, r1
 800bdc6:	4649      	mov	r1, r9
 800bdc8:	eb43 0501 	adc.w	r5, r3, r1
 800bdcc:	f04f 0200 	mov.w	r2, #0
 800bdd0:	f04f 0300 	mov.w	r3, #0
 800bdd4:	00eb      	lsls	r3, r5, #3
 800bdd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bdda:	00e2      	lsls	r2, r4, #3
 800bddc:	4614      	mov	r4, r2
 800bdde:	461d      	mov	r5, r3
 800bde0:	4643      	mov	r3, r8
 800bde2:	18e3      	adds	r3, r4, r3
 800bde4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bde8:	464b      	mov	r3, r9
 800bdea:	eb45 0303 	adc.w	r3, r5, r3
 800bdee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bdf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bdfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800be02:	f04f 0200 	mov.w	r2, #0
 800be06:	f04f 0300 	mov.w	r3, #0
 800be0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800be0e:	4629      	mov	r1, r5
 800be10:	008b      	lsls	r3, r1, #2
 800be12:	4621      	mov	r1, r4
 800be14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be18:	4621      	mov	r1, r4
 800be1a:	008a      	lsls	r2, r1, #2
 800be1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800be20:	f7f4 f9de 	bl	80001e0 <__aeabi_uldivmod>
 800be24:	4602      	mov	r2, r0
 800be26:	460b      	mov	r3, r1
 800be28:	4b60      	ldr	r3, [pc, #384]	; (800bfac <UART_SetConfig+0x570>)
 800be2a:	fba3 2302 	umull	r2, r3, r3, r2
 800be2e:	095b      	lsrs	r3, r3, #5
 800be30:	011c      	lsls	r4, r3, #4
 800be32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be36:	2200      	movs	r2, #0
 800be38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800be40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800be44:	4642      	mov	r2, r8
 800be46:	464b      	mov	r3, r9
 800be48:	1891      	adds	r1, r2, r2
 800be4a:	61b9      	str	r1, [r7, #24]
 800be4c:	415b      	adcs	r3, r3
 800be4e:	61fb      	str	r3, [r7, #28]
 800be50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800be54:	4641      	mov	r1, r8
 800be56:	1851      	adds	r1, r2, r1
 800be58:	6139      	str	r1, [r7, #16]
 800be5a:	4649      	mov	r1, r9
 800be5c:	414b      	adcs	r3, r1
 800be5e:	617b      	str	r3, [r7, #20]
 800be60:	f04f 0200 	mov.w	r2, #0
 800be64:	f04f 0300 	mov.w	r3, #0
 800be68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800be6c:	4659      	mov	r1, fp
 800be6e:	00cb      	lsls	r3, r1, #3
 800be70:	4651      	mov	r1, sl
 800be72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be76:	4651      	mov	r1, sl
 800be78:	00ca      	lsls	r2, r1, #3
 800be7a:	4610      	mov	r0, r2
 800be7c:	4619      	mov	r1, r3
 800be7e:	4603      	mov	r3, r0
 800be80:	4642      	mov	r2, r8
 800be82:	189b      	adds	r3, r3, r2
 800be84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be88:	464b      	mov	r3, r9
 800be8a:	460a      	mov	r2, r1
 800be8c:	eb42 0303 	adc.w	r3, r2, r3
 800be90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	67bb      	str	r3, [r7, #120]	; 0x78
 800be9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bea0:	f04f 0200 	mov.w	r2, #0
 800bea4:	f04f 0300 	mov.w	r3, #0
 800bea8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800beac:	4649      	mov	r1, r9
 800beae:	008b      	lsls	r3, r1, #2
 800beb0:	4641      	mov	r1, r8
 800beb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800beb6:	4641      	mov	r1, r8
 800beb8:	008a      	lsls	r2, r1, #2
 800beba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bebe:	f7f4 f98f 	bl	80001e0 <__aeabi_uldivmod>
 800bec2:	4602      	mov	r2, r0
 800bec4:	460b      	mov	r3, r1
 800bec6:	4b39      	ldr	r3, [pc, #228]	; (800bfac <UART_SetConfig+0x570>)
 800bec8:	fba3 1302 	umull	r1, r3, r3, r2
 800becc:	095b      	lsrs	r3, r3, #5
 800bece:	2164      	movs	r1, #100	; 0x64
 800bed0:	fb01 f303 	mul.w	r3, r1, r3
 800bed4:	1ad3      	subs	r3, r2, r3
 800bed6:	011b      	lsls	r3, r3, #4
 800bed8:	3332      	adds	r3, #50	; 0x32
 800beda:	4a34      	ldr	r2, [pc, #208]	; (800bfac <UART_SetConfig+0x570>)
 800bedc:	fba2 2303 	umull	r2, r3, r2, r3
 800bee0:	095b      	lsrs	r3, r3, #5
 800bee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bee6:	441c      	add	r4, r3
 800bee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800beec:	2200      	movs	r2, #0
 800beee:	673b      	str	r3, [r7, #112]	; 0x70
 800bef0:	677a      	str	r2, [r7, #116]	; 0x74
 800bef2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bef6:	4642      	mov	r2, r8
 800bef8:	464b      	mov	r3, r9
 800befa:	1891      	adds	r1, r2, r2
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	415b      	adcs	r3, r3
 800bf00:	60fb      	str	r3, [r7, #12]
 800bf02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bf06:	4641      	mov	r1, r8
 800bf08:	1851      	adds	r1, r2, r1
 800bf0a:	6039      	str	r1, [r7, #0]
 800bf0c:	4649      	mov	r1, r9
 800bf0e:	414b      	adcs	r3, r1
 800bf10:	607b      	str	r3, [r7, #4]
 800bf12:	f04f 0200 	mov.w	r2, #0
 800bf16:	f04f 0300 	mov.w	r3, #0
 800bf1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bf1e:	4659      	mov	r1, fp
 800bf20:	00cb      	lsls	r3, r1, #3
 800bf22:	4651      	mov	r1, sl
 800bf24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf28:	4651      	mov	r1, sl
 800bf2a:	00ca      	lsls	r2, r1, #3
 800bf2c:	4610      	mov	r0, r2
 800bf2e:	4619      	mov	r1, r3
 800bf30:	4603      	mov	r3, r0
 800bf32:	4642      	mov	r2, r8
 800bf34:	189b      	adds	r3, r3, r2
 800bf36:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf38:	464b      	mov	r3, r9
 800bf3a:	460a      	mov	r2, r1
 800bf3c:	eb42 0303 	adc.w	r3, r2, r3
 800bf40:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	663b      	str	r3, [r7, #96]	; 0x60
 800bf4c:	667a      	str	r2, [r7, #100]	; 0x64
 800bf4e:	f04f 0200 	mov.w	r2, #0
 800bf52:	f04f 0300 	mov.w	r3, #0
 800bf56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bf5a:	4649      	mov	r1, r9
 800bf5c:	008b      	lsls	r3, r1, #2
 800bf5e:	4641      	mov	r1, r8
 800bf60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf64:	4641      	mov	r1, r8
 800bf66:	008a      	lsls	r2, r1, #2
 800bf68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bf6c:	f7f4 f938 	bl	80001e0 <__aeabi_uldivmod>
 800bf70:	4602      	mov	r2, r0
 800bf72:	460b      	mov	r3, r1
 800bf74:	4b0d      	ldr	r3, [pc, #52]	; (800bfac <UART_SetConfig+0x570>)
 800bf76:	fba3 1302 	umull	r1, r3, r3, r2
 800bf7a:	095b      	lsrs	r3, r3, #5
 800bf7c:	2164      	movs	r1, #100	; 0x64
 800bf7e:	fb01 f303 	mul.w	r3, r1, r3
 800bf82:	1ad3      	subs	r3, r2, r3
 800bf84:	011b      	lsls	r3, r3, #4
 800bf86:	3332      	adds	r3, #50	; 0x32
 800bf88:	4a08      	ldr	r2, [pc, #32]	; (800bfac <UART_SetConfig+0x570>)
 800bf8a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf8e:	095b      	lsrs	r3, r3, #5
 800bf90:	f003 020f 	and.w	r2, r3, #15
 800bf94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4422      	add	r2, r4
 800bf9c:	609a      	str	r2, [r3, #8]
}
 800bf9e:	bf00      	nop
 800bfa0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bfaa:	bf00      	nop
 800bfac:	51eb851f 	.word	0x51eb851f

0800bfb0 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 800bfb4:	bf00      	nop
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
	...

0800bfc0 <__NVIC_SetPriority>:
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	6039      	str	r1, [r7, #0]
 800bfca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bfcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	db0a      	blt.n	800bfea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	b2da      	uxtb	r2, r3
 800bfd8:	490c      	ldr	r1, [pc, #48]	; (800c00c <__NVIC_SetPriority+0x4c>)
 800bfda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfde:	0112      	lsls	r2, r2, #4
 800bfe0:	b2d2      	uxtb	r2, r2
 800bfe2:	440b      	add	r3, r1
 800bfe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bfe8:	e00a      	b.n	800c000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	b2da      	uxtb	r2, r3
 800bfee:	4908      	ldr	r1, [pc, #32]	; (800c010 <__NVIC_SetPriority+0x50>)
 800bff0:	79fb      	ldrb	r3, [r7, #7]
 800bff2:	f003 030f 	and.w	r3, r3, #15
 800bff6:	3b04      	subs	r3, #4
 800bff8:	0112      	lsls	r2, r2, #4
 800bffa:	b2d2      	uxtb	r2, r2
 800bffc:	440b      	add	r3, r1
 800bffe:	761a      	strb	r2, [r3, #24]
}
 800c000:	bf00      	nop
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	e000e100 	.word	0xe000e100
 800c010:	e000ed00 	.word	0xe000ed00

0800c014 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c014:	b580      	push	{r7, lr}
 800c016:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c018:	4b05      	ldr	r3, [pc, #20]	; (800c030 <SysTick_Handler+0x1c>)
 800c01a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c01c:	f002 f960 	bl	800e2e0 <xTaskGetSchedulerState>
 800c020:	4603      	mov	r3, r0
 800c022:	2b01      	cmp	r3, #1
 800c024:	d001      	beq.n	800c02a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c026:	f000 fd97 	bl	800cb58 <xPortSysTickHandler>
  }
}
 800c02a:	bf00      	nop
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	e000e010 	.word	0xe000e010

0800c034 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c034:	b580      	push	{r7, lr}
 800c036:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c038:	2100      	movs	r1, #0
 800c03a:	f06f 0004 	mvn.w	r0, #4
 800c03e:	f7ff ffbf 	bl	800bfc0 <__NVIC_SetPriority>
#endif
}
 800c042:	bf00      	nop
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c04e:	f3ef 8305 	mrs	r3, IPSR
 800c052:	603b      	str	r3, [r7, #0]
  return(result);
 800c054:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c056:	2b00      	cmp	r3, #0
 800c058:	d003      	beq.n	800c062 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c05a:	f06f 0305 	mvn.w	r3, #5
 800c05e:	607b      	str	r3, [r7, #4]
 800c060:	e00c      	b.n	800c07c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c062:	4b0a      	ldr	r3, [pc, #40]	; (800c08c <osKernelInitialize+0x44>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d105      	bne.n	800c076 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c06a:	4b08      	ldr	r3, [pc, #32]	; (800c08c <osKernelInitialize+0x44>)
 800c06c:	2201      	movs	r2, #1
 800c06e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c070:	2300      	movs	r3, #0
 800c072:	607b      	str	r3, [r7, #4]
 800c074:	e002      	b.n	800c07c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c076:	f04f 33ff 	mov.w	r3, #4294967295
 800c07a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c07c:	687b      	ldr	r3, [r7, #4]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	370c      	adds	r7, #12
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	20000914 	.word	0x20000914

0800c090 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c096:	f3ef 8305 	mrs	r3, IPSR
 800c09a:	603b      	str	r3, [r7, #0]
  return(result);
 800c09c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d003      	beq.n	800c0aa <osKernelStart+0x1a>
    stat = osErrorISR;
 800c0a2:	f06f 0305 	mvn.w	r3, #5
 800c0a6:	607b      	str	r3, [r7, #4]
 800c0a8:	e010      	b.n	800c0cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c0aa:	4b0b      	ldr	r3, [pc, #44]	; (800c0d8 <osKernelStart+0x48>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d109      	bne.n	800c0c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c0b2:	f7ff ffbf 	bl	800c034 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c0b6:	4b08      	ldr	r3, [pc, #32]	; (800c0d8 <osKernelStart+0x48>)
 800c0b8:	2202      	movs	r2, #2
 800c0ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c0bc:	f001 fcb4 	bl	800da28 <vTaskStartScheduler>
      stat = osOK;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	607b      	str	r3, [r7, #4]
 800c0c4:	e002      	b.n	800c0cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c0c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c0cc:	687b      	ldr	r3, [r7, #4]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3708      	adds	r7, #8
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	20000914 	.word	0x20000914

0800c0dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b08e      	sub	sp, #56	; 0x38
 800c0e0:	af04      	add	r7, sp, #16
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0ec:	f3ef 8305 	mrs	r3, IPSR
 800c0f0:	617b      	str	r3, [r7, #20]
  return(result);
 800c0f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d17e      	bne.n	800c1f6 <osThreadNew+0x11a>
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d07b      	beq.n	800c1f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c0fe:	2380      	movs	r3, #128	; 0x80
 800c100:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c102:	2318      	movs	r3, #24
 800c104:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c106:	2300      	movs	r3, #0
 800c108:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c10a:	f04f 33ff 	mov.w	r3, #4294967295
 800c10e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d045      	beq.n	800c1a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d002      	beq.n	800c124 <osThreadNew+0x48>
        name = attr->name;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	699b      	ldr	r3, [r3, #24]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d002      	beq.n	800c132 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	699b      	ldr	r3, [r3, #24]
 800c130:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d008      	beq.n	800c14a <osThreadNew+0x6e>
 800c138:	69fb      	ldr	r3, [r7, #28]
 800c13a:	2b38      	cmp	r3, #56	; 0x38
 800c13c:	d805      	bhi.n	800c14a <osThreadNew+0x6e>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	f003 0301 	and.w	r3, r3, #1
 800c146:	2b00      	cmp	r3, #0
 800c148:	d001      	beq.n	800c14e <osThreadNew+0x72>
        return (NULL);
 800c14a:	2300      	movs	r3, #0
 800c14c:	e054      	b.n	800c1f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	695b      	ldr	r3, [r3, #20]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d003      	beq.n	800c15e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	695b      	ldr	r3, [r3, #20]
 800c15a:	089b      	lsrs	r3, r3, #2
 800c15c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d00e      	beq.n	800c184 <osThreadNew+0xa8>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	2bbb      	cmp	r3, #187	; 0xbb
 800c16c:	d90a      	bls.n	800c184 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c172:	2b00      	cmp	r3, #0
 800c174:	d006      	beq.n	800c184 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	695b      	ldr	r3, [r3, #20]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d002      	beq.n	800c184 <osThreadNew+0xa8>
        mem = 1;
 800c17e:	2301      	movs	r3, #1
 800c180:	61bb      	str	r3, [r7, #24]
 800c182:	e010      	b.n	800c1a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d10c      	bne.n	800c1a6 <osThreadNew+0xca>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d108      	bne.n	800c1a6 <osThreadNew+0xca>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	691b      	ldr	r3, [r3, #16]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d104      	bne.n	800c1a6 <osThreadNew+0xca>
          mem = 0;
 800c19c:	2300      	movs	r3, #0
 800c19e:	61bb      	str	r3, [r7, #24]
 800c1a0:	e001      	b.n	800c1a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d110      	bne.n	800c1ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c1b4:	9202      	str	r2, [sp, #8]
 800c1b6:	9301      	str	r3, [sp, #4]
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	6a3a      	ldr	r2, [r7, #32]
 800c1c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	f001 fa44 	bl	800d650 <xTaskCreateStatic>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	613b      	str	r3, [r7, #16]
 800c1cc:	e013      	b.n	800c1f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d110      	bne.n	800c1f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c1d4:	6a3b      	ldr	r3, [r7, #32]
 800c1d6:	b29a      	uxth	r2, r3
 800c1d8:	f107 0310 	add.w	r3, r7, #16
 800c1dc:	9301      	str	r3, [sp, #4]
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f001 fa8f 	bl	800d70a <xTaskCreate>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d001      	beq.n	800c1f6 <osThreadNew+0x11a>
            hTask = NULL;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c1f6:	693b      	ldr	r3, [r7, #16]
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3728      	adds	r7, #40	; 0x28
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c208:	f3ef 8305 	mrs	r3, IPSR
 800c20c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c20e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c210:	2b00      	cmp	r3, #0
 800c212:	d003      	beq.n	800c21c <osDelay+0x1c>
    stat = osErrorISR;
 800c214:	f06f 0305 	mvn.w	r3, #5
 800c218:	60fb      	str	r3, [r7, #12]
 800c21a:	e007      	b.n	800c22c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c21c:	2300      	movs	r3, #0
 800c21e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d002      	beq.n	800c22c <osDelay+0x2c>
      vTaskDelay(ticks);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f001 fbca 	bl	800d9c0 <vTaskDelay>
    }
  }

  return (stat);
 800c22c:	68fb      	ldr	r3, [r7, #12]
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
	...

0800c238 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	4a07      	ldr	r2, [pc, #28]	; (800c264 <vApplicationGetIdleTaskMemory+0x2c>)
 800c248:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	4a06      	ldr	r2, [pc, #24]	; (800c268 <vApplicationGetIdleTaskMemory+0x30>)
 800c24e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2280      	movs	r2, #128	; 0x80
 800c254:	601a      	str	r2, [r3, #0]
}
 800c256:	bf00      	nop
 800c258:	3714      	adds	r7, #20
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr
 800c262:	bf00      	nop
 800c264:	20000918 	.word	0x20000918
 800c268:	200009d4 	.word	0x200009d4

0800c26c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c26c:	b480      	push	{r7}
 800c26e:	b085      	sub	sp, #20
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	4a07      	ldr	r2, [pc, #28]	; (800c298 <vApplicationGetTimerTaskMemory+0x2c>)
 800c27c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	4a06      	ldr	r2, [pc, #24]	; (800c29c <vApplicationGetTimerTaskMemory+0x30>)
 800c282:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c28a:	601a      	str	r2, [r3, #0]
}
 800c28c:	bf00      	nop
 800c28e:	3714      	adds	r7, #20
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr
 800c298:	20000bd4 	.word	0x20000bd4
 800c29c:	20000c90 	.word	0x20000c90

0800c2a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b08a      	sub	sp, #40	; 0x28
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c2ac:	f001 fc2c 	bl	800db08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c2b0:	4b5b      	ldr	r3, [pc, #364]	; (800c420 <pvPortMalloc+0x180>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d101      	bne.n	800c2bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c2b8:	f000 f920 	bl	800c4fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c2bc:	4b59      	ldr	r3, [pc, #356]	; (800c424 <pvPortMalloc+0x184>)
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4013      	ands	r3, r2
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f040 8093 	bne.w	800c3f0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d01d      	beq.n	800c30c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c2d0:	2208      	movs	r2, #8
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f003 0307 	and.w	r3, r3, #7
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d014      	beq.n	800c30c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f023 0307 	bic.w	r3, r3, #7
 800c2e8:	3308      	adds	r3, #8
 800c2ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f003 0307 	and.w	r3, r3, #7
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00a      	beq.n	800c30c <pvPortMalloc+0x6c>
	__asm volatile
 800c2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fa:	f383 8811 	msr	BASEPRI, r3
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	617b      	str	r3, [r7, #20]
}
 800c308:	bf00      	nop
 800c30a:	e7fe      	b.n	800c30a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d06e      	beq.n	800c3f0 <pvPortMalloc+0x150>
 800c312:	4b45      	ldr	r3, [pc, #276]	; (800c428 <pvPortMalloc+0x188>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d869      	bhi.n	800c3f0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c31c:	4b43      	ldr	r3, [pc, #268]	; (800c42c <pvPortMalloc+0x18c>)
 800c31e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c320:	4b42      	ldr	r3, [pc, #264]	; (800c42c <pvPortMalloc+0x18c>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c326:	e004      	b.n	800c332 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d903      	bls.n	800c344 <pvPortMalloc+0xa4>
 800c33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1f1      	bne.n	800c328 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c344:	4b36      	ldr	r3, [pc, #216]	; (800c420 <pvPortMalloc+0x180>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d050      	beq.n	800c3f0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c34e:	6a3b      	ldr	r3, [r7, #32]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2208      	movs	r2, #8
 800c354:	4413      	add	r3, r2
 800c356:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	6a3b      	ldr	r3, [r7, #32]
 800c35e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c362:	685a      	ldr	r2, [r3, #4]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	1ad2      	subs	r2, r2, r3
 800c368:	2308      	movs	r3, #8
 800c36a:	005b      	lsls	r3, r3, #1
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d91f      	bls.n	800c3b0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	4413      	add	r3, r2
 800c376:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	f003 0307 	and.w	r3, r3, #7
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00a      	beq.n	800c398 <pvPortMalloc+0xf8>
	__asm volatile
 800c382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c386:	f383 8811 	msr	BASEPRI, r3
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	613b      	str	r3, [r7, #16]
}
 800c394:	bf00      	nop
 800c396:	e7fe      	b.n	800c396 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	1ad2      	subs	r2, r2, r3
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c3aa:	69b8      	ldr	r0, [r7, #24]
 800c3ac:	f000 f908 	bl	800c5c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c3b0:	4b1d      	ldr	r3, [pc, #116]	; (800c428 <pvPortMalloc+0x188>)
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	4a1b      	ldr	r2, [pc, #108]	; (800c428 <pvPortMalloc+0x188>)
 800c3bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c3be:	4b1a      	ldr	r3, [pc, #104]	; (800c428 <pvPortMalloc+0x188>)
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	4b1b      	ldr	r3, [pc, #108]	; (800c430 <pvPortMalloc+0x190>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d203      	bcs.n	800c3d2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c3ca:	4b17      	ldr	r3, [pc, #92]	; (800c428 <pvPortMalloc+0x188>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a18      	ldr	r2, [pc, #96]	; (800c430 <pvPortMalloc+0x190>)
 800c3d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d4:	685a      	ldr	r2, [r3, #4]
 800c3d6:	4b13      	ldr	r3, [pc, #76]	; (800c424 <pvPortMalloc+0x184>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	431a      	orrs	r2, r3
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c3e6:	4b13      	ldr	r3, [pc, #76]	; (800c434 <pvPortMalloc+0x194>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	4a11      	ldr	r2, [pc, #68]	; (800c434 <pvPortMalloc+0x194>)
 800c3ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c3f0:	f001 fb98 	bl	800db24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	f003 0307 	and.w	r3, r3, #7
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00a      	beq.n	800c414 <pvPortMalloc+0x174>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	60fb      	str	r3, [r7, #12]
}
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <pvPortMalloc+0x172>
	return pvReturn;
 800c414:	69fb      	ldr	r3, [r7, #28]
}
 800c416:	4618      	mov	r0, r3
 800c418:	3728      	adds	r7, #40	; 0x28
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	20004c98 	.word	0x20004c98
 800c424:	20004cac 	.word	0x20004cac
 800c428:	20004c9c 	.word	0x20004c9c
 800c42c:	20004c90 	.word	0x20004c90
 800c430:	20004ca0 	.word	0x20004ca0
 800c434:	20004ca4 	.word	0x20004ca4

0800c438 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b086      	sub	sp, #24
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d04d      	beq.n	800c4e6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c44a:	2308      	movs	r3, #8
 800c44c:	425b      	negs	r3, r3
 800c44e:	697a      	ldr	r2, [r7, #20]
 800c450:	4413      	add	r3, r2
 800c452:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	685a      	ldr	r2, [r3, #4]
 800c45c:	4b24      	ldr	r3, [pc, #144]	; (800c4f0 <vPortFree+0xb8>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4013      	ands	r3, r2
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10a      	bne.n	800c47c <vPortFree+0x44>
	__asm volatile
 800c466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46a:	f383 8811 	msr	BASEPRI, r3
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f3bf 8f4f 	dsb	sy
 800c476:	60fb      	str	r3, [r7, #12]
}
 800c478:	bf00      	nop
 800c47a:	e7fe      	b.n	800c47a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00a      	beq.n	800c49a <vPortFree+0x62>
	__asm volatile
 800c484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c488:	f383 8811 	msr	BASEPRI, r3
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	60bb      	str	r3, [r7, #8]
}
 800c496:	bf00      	nop
 800c498:	e7fe      	b.n	800c498 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	685a      	ldr	r2, [r3, #4]
 800c49e:	4b14      	ldr	r3, [pc, #80]	; (800c4f0 <vPortFree+0xb8>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4013      	ands	r3, r2
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d01e      	beq.n	800c4e6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d11a      	bne.n	800c4e6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	685a      	ldr	r2, [r3, #4]
 800c4b4:	4b0e      	ldr	r3, [pc, #56]	; (800c4f0 <vPortFree+0xb8>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	43db      	mvns	r3, r3
 800c4ba:	401a      	ands	r2, r3
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c4c0:	f001 fb22 	bl	800db08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	685a      	ldr	r2, [r3, #4]
 800c4c8:	4b0a      	ldr	r3, [pc, #40]	; (800c4f4 <vPortFree+0xbc>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	4a09      	ldr	r2, [pc, #36]	; (800c4f4 <vPortFree+0xbc>)
 800c4d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c4d2:	6938      	ldr	r0, [r7, #16]
 800c4d4:	f000 f874 	bl	800c5c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c4d8:	4b07      	ldr	r3, [pc, #28]	; (800c4f8 <vPortFree+0xc0>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	3301      	adds	r3, #1
 800c4de:	4a06      	ldr	r2, [pc, #24]	; (800c4f8 <vPortFree+0xc0>)
 800c4e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c4e2:	f001 fb1f 	bl	800db24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c4e6:	bf00      	nop
 800c4e8:	3718      	adds	r7, #24
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	20004cac 	.word	0x20004cac
 800c4f4:	20004c9c 	.word	0x20004c9c
 800c4f8:	20004ca8 	.word	0x20004ca8

0800c4fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c502:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c506:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c508:	4b27      	ldr	r3, [pc, #156]	; (800c5a8 <prvHeapInit+0xac>)
 800c50a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f003 0307 	and.w	r3, r3, #7
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00c      	beq.n	800c530 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	3307      	adds	r3, #7
 800c51a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f023 0307 	bic.w	r3, r3, #7
 800c522:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c524:	68ba      	ldr	r2, [r7, #8]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	1ad3      	subs	r3, r2, r3
 800c52a:	4a1f      	ldr	r2, [pc, #124]	; (800c5a8 <prvHeapInit+0xac>)
 800c52c:	4413      	add	r3, r2
 800c52e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c534:	4a1d      	ldr	r2, [pc, #116]	; (800c5ac <prvHeapInit+0xb0>)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c53a:	4b1c      	ldr	r3, [pc, #112]	; (800c5ac <prvHeapInit+0xb0>)
 800c53c:	2200      	movs	r2, #0
 800c53e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	68ba      	ldr	r2, [r7, #8]
 800c544:	4413      	add	r3, r2
 800c546:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c548:	2208      	movs	r2, #8
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	1a9b      	subs	r3, r3, r2
 800c54e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f023 0307 	bic.w	r3, r3, #7
 800c556:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	4a15      	ldr	r2, [pc, #84]	; (800c5b0 <prvHeapInit+0xb4>)
 800c55c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c55e:	4b14      	ldr	r3, [pc, #80]	; (800c5b0 <prvHeapInit+0xb4>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2200      	movs	r2, #0
 800c564:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c566:	4b12      	ldr	r3, [pc, #72]	; (800c5b0 <prvHeapInit+0xb4>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2200      	movs	r2, #0
 800c56c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	1ad2      	subs	r2, r2, r3
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c57c:	4b0c      	ldr	r3, [pc, #48]	; (800c5b0 <prvHeapInit+0xb4>)
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	4a0a      	ldr	r2, [pc, #40]	; (800c5b4 <prvHeapInit+0xb8>)
 800c58a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	4a09      	ldr	r2, [pc, #36]	; (800c5b8 <prvHeapInit+0xbc>)
 800c592:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c594:	4b09      	ldr	r3, [pc, #36]	; (800c5bc <prvHeapInit+0xc0>)
 800c596:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c59a:	601a      	str	r2, [r3, #0]
}
 800c59c:	bf00      	nop
 800c59e:	3714      	adds	r7, #20
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr
 800c5a8:	20001090 	.word	0x20001090
 800c5ac:	20004c90 	.word	0x20004c90
 800c5b0:	20004c98 	.word	0x20004c98
 800c5b4:	20004ca0 	.word	0x20004ca0
 800c5b8:	20004c9c 	.word	0x20004c9c
 800c5bc:	20004cac 	.word	0x20004cac

0800c5c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b085      	sub	sp, #20
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c5c8:	4b28      	ldr	r3, [pc, #160]	; (800c66c <prvInsertBlockIntoFreeList+0xac>)
 800c5ca:	60fb      	str	r3, [r7, #12]
 800c5cc:	e002      	b.n	800c5d4 <prvInsertBlockIntoFreeList+0x14>
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	60fb      	str	r3, [r7, #12]
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d8f7      	bhi.n	800c5ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	68ba      	ldr	r2, [r7, #8]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d108      	bne.n	800c602 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	441a      	add	r2, r3
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	441a      	add	r2, r3
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	429a      	cmp	r2, r3
 800c614:	d118      	bne.n	800c648 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	4b15      	ldr	r3, [pc, #84]	; (800c670 <prvInsertBlockIntoFreeList+0xb0>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d00d      	beq.n	800c63e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	685a      	ldr	r2, [r3, #4]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	441a      	add	r2, r3
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	601a      	str	r2, [r3, #0]
 800c63c:	e008      	b.n	800c650 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c63e:	4b0c      	ldr	r3, [pc, #48]	; (800c670 <prvInsertBlockIntoFreeList+0xb0>)
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	601a      	str	r2, [r3, #0]
 800c646:	e003      	b.n	800c650 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c650:	68fa      	ldr	r2, [r7, #12]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	429a      	cmp	r2, r3
 800c656:	d002      	beq.n	800c65e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c65e:	bf00      	nop
 800c660:	3714      	adds	r7, #20
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	20004c90 	.word	0x20004c90
 800c670:	20004c98 	.word	0x20004c98

0800c674 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f103 0208 	add.w	r2, r3, #8
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f04f 32ff 	mov.w	r2, #4294967295
 800c68c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f103 0208 	add.w	r2, r3, #8
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f103 0208 	add.w	r2, r3, #8
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c6a8:	bf00      	nop
 800c6aa:	370c      	adds	r7, #12
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr

0800c6b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b083      	sub	sp, #12
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c6c2:	bf00      	nop
 800c6c4:	370c      	adds	r7, #12
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr

0800c6ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6ce:	b480      	push	{r7}
 800c6d0:	b085      	sub	sp, #20
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
 800c6d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	689a      	ldr	r2, [r3, #8]
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	683a      	ldr	r2, [r7, #0]
 800c6f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	1c5a      	adds	r2, r3, #1
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	601a      	str	r2, [r3, #0]
}
 800c70a:	bf00      	nop
 800c70c:	3714      	adds	r7, #20
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr

0800c716 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c716:	b480      	push	{r7}
 800c718:	b085      	sub	sp, #20
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
 800c71e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c72c:	d103      	bne.n	800c736 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	691b      	ldr	r3, [r3, #16]
 800c732:	60fb      	str	r3, [r7, #12]
 800c734:	e00c      	b.n	800c750 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	3308      	adds	r3, #8
 800c73a:	60fb      	str	r3, [r7, #12]
 800c73c:	e002      	b.n	800c744 <vListInsert+0x2e>
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	60fb      	str	r3, [r7, #12]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	68ba      	ldr	r2, [r7, #8]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d2f6      	bcs.n	800c73e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	685a      	ldr	r2, [r3, #4]
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	683a      	ldr	r2, [r7, #0]
 800c75e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	68fa      	ldr	r2, [r7, #12]
 800c764:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	683a      	ldr	r2, [r7, #0]
 800c76a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	1c5a      	adds	r2, r3, #1
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	601a      	str	r2, [r3, #0]
}
 800c77c:	bf00      	nop
 800c77e:	3714      	adds	r7, #20
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	691b      	ldr	r3, [r3, #16]
 800c794:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	6892      	ldr	r2, [r2, #8]
 800c79e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	6852      	ldr	r2, [r2, #4]
 800c7a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d103      	bne.n	800c7bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	689a      	ldr	r2, [r3, #8]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	1e5a      	subs	r2, r3, #1
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3714      	adds	r7, #20
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	3b04      	subs	r3, #4
 800c7ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c7f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	3b04      	subs	r3, #4
 800c7fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	f023 0201 	bic.w	r2, r3, #1
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	3b04      	subs	r3, #4
 800c80a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c80c:	4a0c      	ldr	r2, [pc, #48]	; (800c840 <pxPortInitialiseStack+0x64>)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	3b14      	subs	r3, #20
 800c816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	3b04      	subs	r3, #4
 800c822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f06f 0202 	mvn.w	r2, #2
 800c82a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	3b20      	subs	r3, #32
 800c830:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c832:	68fb      	ldr	r3, [r7, #12]
}
 800c834:	4618      	mov	r0, r3
 800c836:	3714      	adds	r7, #20
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr
 800c840:	0800c845 	.word	0x0800c845

0800c844 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c844:	b480      	push	{r7}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c84e:	4b12      	ldr	r3, [pc, #72]	; (800c898 <prvTaskExitError+0x54>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c856:	d00a      	beq.n	800c86e <prvTaskExitError+0x2a>
	__asm volatile
 800c858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	60fb      	str	r3, [r7, #12]
}
 800c86a:	bf00      	nop
 800c86c:	e7fe      	b.n	800c86c <prvTaskExitError+0x28>
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	60bb      	str	r3, [r7, #8]
}
 800c880:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c882:	bf00      	nop
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d0fc      	beq.n	800c884 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c88a:	bf00      	nop
 800c88c:	bf00      	nop
 800c88e:	3714      	adds	r7, #20
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr
 800c898:	2000000c 	.word	0x2000000c
 800c89c:	00000000 	.word	0x00000000

0800c8a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c8a0:	4b07      	ldr	r3, [pc, #28]	; (800c8c0 <pxCurrentTCBConst2>)
 800c8a2:	6819      	ldr	r1, [r3, #0]
 800c8a4:	6808      	ldr	r0, [r1, #0]
 800c8a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8aa:	f380 8809 	msr	PSP, r0
 800c8ae:	f3bf 8f6f 	isb	sy
 800c8b2:	f04f 0000 	mov.w	r0, #0
 800c8b6:	f380 8811 	msr	BASEPRI, r0
 800c8ba:	4770      	bx	lr
 800c8bc:	f3af 8000 	nop.w

0800c8c0 <pxCurrentTCBConst2>:
 800c8c0:	20004cf8 	.word	0x20004cf8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c8c4:	bf00      	nop
 800c8c6:	bf00      	nop

0800c8c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c8c8:	4808      	ldr	r0, [pc, #32]	; (800c8ec <prvPortStartFirstTask+0x24>)
 800c8ca:	6800      	ldr	r0, [r0, #0]
 800c8cc:	6800      	ldr	r0, [r0, #0]
 800c8ce:	f380 8808 	msr	MSP, r0
 800c8d2:	f04f 0000 	mov.w	r0, #0
 800c8d6:	f380 8814 	msr	CONTROL, r0
 800c8da:	b662      	cpsie	i
 800c8dc:	b661      	cpsie	f
 800c8de:	f3bf 8f4f 	dsb	sy
 800c8e2:	f3bf 8f6f 	isb	sy
 800c8e6:	df00      	svc	0
 800c8e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c8ea:	bf00      	nop
 800c8ec:	e000ed08 	.word	0xe000ed08

0800c8f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c8f6:	4b46      	ldr	r3, [pc, #280]	; (800ca10 <xPortStartScheduler+0x120>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a46      	ldr	r2, [pc, #280]	; (800ca14 <xPortStartScheduler+0x124>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d10a      	bne.n	800c916 <xPortStartScheduler+0x26>
	__asm volatile
 800c900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c904:	f383 8811 	msr	BASEPRI, r3
 800c908:	f3bf 8f6f 	isb	sy
 800c90c:	f3bf 8f4f 	dsb	sy
 800c910:	613b      	str	r3, [r7, #16]
}
 800c912:	bf00      	nop
 800c914:	e7fe      	b.n	800c914 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c916:	4b3e      	ldr	r3, [pc, #248]	; (800ca10 <xPortStartScheduler+0x120>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a3f      	ldr	r2, [pc, #252]	; (800ca18 <xPortStartScheduler+0x128>)
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d10a      	bne.n	800c936 <xPortStartScheduler+0x46>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	60fb      	str	r3, [r7, #12]
}
 800c932:	bf00      	nop
 800c934:	e7fe      	b.n	800c934 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c936:	4b39      	ldr	r3, [pc, #228]	; (800ca1c <xPortStartScheduler+0x12c>)
 800c938:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	22ff      	movs	r2, #255	; 0xff
 800c946:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c950:	78fb      	ldrb	r3, [r7, #3]
 800c952:	b2db      	uxtb	r3, r3
 800c954:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c958:	b2da      	uxtb	r2, r3
 800c95a:	4b31      	ldr	r3, [pc, #196]	; (800ca20 <xPortStartScheduler+0x130>)
 800c95c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c95e:	4b31      	ldr	r3, [pc, #196]	; (800ca24 <xPortStartScheduler+0x134>)
 800c960:	2207      	movs	r2, #7
 800c962:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c964:	e009      	b.n	800c97a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c966:	4b2f      	ldr	r3, [pc, #188]	; (800ca24 <xPortStartScheduler+0x134>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	3b01      	subs	r3, #1
 800c96c:	4a2d      	ldr	r2, [pc, #180]	; (800ca24 <xPortStartScheduler+0x134>)
 800c96e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c970:	78fb      	ldrb	r3, [r7, #3]
 800c972:	b2db      	uxtb	r3, r3
 800c974:	005b      	lsls	r3, r3, #1
 800c976:	b2db      	uxtb	r3, r3
 800c978:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c97a:	78fb      	ldrb	r3, [r7, #3]
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c982:	2b80      	cmp	r3, #128	; 0x80
 800c984:	d0ef      	beq.n	800c966 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c986:	4b27      	ldr	r3, [pc, #156]	; (800ca24 <xPortStartScheduler+0x134>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f1c3 0307 	rsb	r3, r3, #7
 800c98e:	2b04      	cmp	r3, #4
 800c990:	d00a      	beq.n	800c9a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c996:	f383 8811 	msr	BASEPRI, r3
 800c99a:	f3bf 8f6f 	isb	sy
 800c99e:	f3bf 8f4f 	dsb	sy
 800c9a2:	60bb      	str	r3, [r7, #8]
}
 800c9a4:	bf00      	nop
 800c9a6:	e7fe      	b.n	800c9a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c9a8:	4b1e      	ldr	r3, [pc, #120]	; (800ca24 <xPortStartScheduler+0x134>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	021b      	lsls	r3, r3, #8
 800c9ae:	4a1d      	ldr	r2, [pc, #116]	; (800ca24 <xPortStartScheduler+0x134>)
 800c9b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c9b2:	4b1c      	ldr	r3, [pc, #112]	; (800ca24 <xPortStartScheduler+0x134>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c9ba:	4a1a      	ldr	r2, [pc, #104]	; (800ca24 <xPortStartScheduler+0x134>)
 800c9bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	b2da      	uxtb	r2, r3
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c9c6:	4b18      	ldr	r3, [pc, #96]	; (800ca28 <xPortStartScheduler+0x138>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a17      	ldr	r2, [pc, #92]	; (800ca28 <xPortStartScheduler+0x138>)
 800c9cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c9d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c9d2:	4b15      	ldr	r3, [pc, #84]	; (800ca28 <xPortStartScheduler+0x138>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a14      	ldr	r2, [pc, #80]	; (800ca28 <xPortStartScheduler+0x138>)
 800c9d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c9dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c9de:	f000 f8dd 	bl	800cb9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c9e2:	4b12      	ldr	r3, [pc, #72]	; (800ca2c <xPortStartScheduler+0x13c>)
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c9e8:	f000 f8fc 	bl	800cbe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c9ec:	4b10      	ldr	r3, [pc, #64]	; (800ca30 <xPortStartScheduler+0x140>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a0f      	ldr	r2, [pc, #60]	; (800ca30 <xPortStartScheduler+0x140>)
 800c9f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c9f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c9f8:	f7ff ff66 	bl	800c8c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c9fc:	f001 f9fa 	bl	800ddf4 <vTaskSwitchContext>
	prvTaskExitError();
 800ca00:	f7ff ff20 	bl	800c844 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3718      	adds	r7, #24
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	e000ed00 	.word	0xe000ed00
 800ca14:	410fc271 	.word	0x410fc271
 800ca18:	410fc270 	.word	0x410fc270
 800ca1c:	e000e400 	.word	0xe000e400
 800ca20:	20004cb0 	.word	0x20004cb0
 800ca24:	20004cb4 	.word	0x20004cb4
 800ca28:	e000ed20 	.word	0xe000ed20
 800ca2c:	2000000c 	.word	0x2000000c
 800ca30:	e000ef34 	.word	0xe000ef34

0800ca34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca34:	b480      	push	{r7}
 800ca36:	b083      	sub	sp, #12
 800ca38:	af00      	add	r7, sp, #0
	__asm volatile
 800ca3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3e:	f383 8811 	msr	BASEPRI, r3
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	607b      	str	r3, [r7, #4]
}
 800ca4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca4e:	4b0f      	ldr	r3, [pc, #60]	; (800ca8c <vPortEnterCritical+0x58>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	3301      	adds	r3, #1
 800ca54:	4a0d      	ldr	r2, [pc, #52]	; (800ca8c <vPortEnterCritical+0x58>)
 800ca56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca58:	4b0c      	ldr	r3, [pc, #48]	; (800ca8c <vPortEnterCritical+0x58>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d10f      	bne.n	800ca80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca60:	4b0b      	ldr	r3, [pc, #44]	; (800ca90 <vPortEnterCritical+0x5c>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00a      	beq.n	800ca80 <vPortEnterCritical+0x4c>
	__asm volatile
 800ca6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6e:	f383 8811 	msr	BASEPRI, r3
 800ca72:	f3bf 8f6f 	isb	sy
 800ca76:	f3bf 8f4f 	dsb	sy
 800ca7a:	603b      	str	r3, [r7, #0]
}
 800ca7c:	bf00      	nop
 800ca7e:	e7fe      	b.n	800ca7e <vPortEnterCritical+0x4a>
	}
}
 800ca80:	bf00      	nop
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr
 800ca8c:	2000000c 	.word	0x2000000c
 800ca90:	e000ed04 	.word	0xe000ed04

0800ca94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca94:	b480      	push	{r7}
 800ca96:	b083      	sub	sp, #12
 800ca98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca9a:	4b12      	ldr	r3, [pc, #72]	; (800cae4 <vPortExitCritical+0x50>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d10a      	bne.n	800cab8 <vPortExitCritical+0x24>
	__asm volatile
 800caa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa6:	f383 8811 	msr	BASEPRI, r3
 800caaa:	f3bf 8f6f 	isb	sy
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	607b      	str	r3, [r7, #4]
}
 800cab4:	bf00      	nop
 800cab6:	e7fe      	b.n	800cab6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cab8:	4b0a      	ldr	r3, [pc, #40]	; (800cae4 <vPortExitCritical+0x50>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	3b01      	subs	r3, #1
 800cabe:	4a09      	ldr	r2, [pc, #36]	; (800cae4 <vPortExitCritical+0x50>)
 800cac0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cac2:	4b08      	ldr	r3, [pc, #32]	; (800cae4 <vPortExitCritical+0x50>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d105      	bne.n	800cad6 <vPortExitCritical+0x42>
 800caca:	2300      	movs	r3, #0
 800cacc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	f383 8811 	msr	BASEPRI, r3
}
 800cad4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cad6:	bf00      	nop
 800cad8:	370c      	adds	r7, #12
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	2000000c 	.word	0x2000000c
	...

0800caf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800caf0:	f3ef 8009 	mrs	r0, PSP
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	4b15      	ldr	r3, [pc, #84]	; (800cb50 <pxCurrentTCBConst>)
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	f01e 0f10 	tst.w	lr, #16
 800cb00:	bf08      	it	eq
 800cb02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb0a:	6010      	str	r0, [r2, #0]
 800cb0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cb10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cb14:	f380 8811 	msr	BASEPRI, r0
 800cb18:	f3bf 8f4f 	dsb	sy
 800cb1c:	f3bf 8f6f 	isb	sy
 800cb20:	f001 f968 	bl	800ddf4 <vTaskSwitchContext>
 800cb24:	f04f 0000 	mov.w	r0, #0
 800cb28:	f380 8811 	msr	BASEPRI, r0
 800cb2c:	bc09      	pop	{r0, r3}
 800cb2e:	6819      	ldr	r1, [r3, #0]
 800cb30:	6808      	ldr	r0, [r1, #0]
 800cb32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb36:	f01e 0f10 	tst.w	lr, #16
 800cb3a:	bf08      	it	eq
 800cb3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb40:	f380 8809 	msr	PSP, r0
 800cb44:	f3bf 8f6f 	isb	sy
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop
 800cb4c:	f3af 8000 	nop.w

0800cb50 <pxCurrentTCBConst>:
 800cb50:	20004cf8 	.word	0x20004cf8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb54:	bf00      	nop
 800cb56:	bf00      	nop

0800cb58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb62:	f383 8811 	msr	BASEPRI, r3
 800cb66:	f3bf 8f6f 	isb	sy
 800cb6a:	f3bf 8f4f 	dsb	sy
 800cb6e:	607b      	str	r3, [r7, #4]
}
 800cb70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb72:	f001 f885 	bl	800dc80 <xTaskIncrementTick>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d003      	beq.n	800cb84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb7c:	4b06      	ldr	r3, [pc, #24]	; (800cb98 <xPortSysTickHandler+0x40>)
 800cb7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb82:	601a      	str	r2, [r3, #0]
 800cb84:	2300      	movs	r3, #0
 800cb86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	f383 8811 	msr	BASEPRI, r3
}
 800cb8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb90:	bf00      	nop
 800cb92:	3708      	adds	r7, #8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	e000ed04 	.word	0xe000ed04

0800cb9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cba0:	4b0b      	ldr	r3, [pc, #44]	; (800cbd0 <vPortSetupTimerInterrupt+0x34>)
 800cba2:	2200      	movs	r2, #0
 800cba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cba6:	4b0b      	ldr	r3, [pc, #44]	; (800cbd4 <vPortSetupTimerInterrupt+0x38>)
 800cba8:	2200      	movs	r2, #0
 800cbaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cbac:	4b0a      	ldr	r3, [pc, #40]	; (800cbd8 <vPortSetupTimerInterrupt+0x3c>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a0a      	ldr	r2, [pc, #40]	; (800cbdc <vPortSetupTimerInterrupt+0x40>)
 800cbb2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb6:	099b      	lsrs	r3, r3, #6
 800cbb8:	4a09      	ldr	r2, [pc, #36]	; (800cbe0 <vPortSetupTimerInterrupt+0x44>)
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cbbe:	4b04      	ldr	r3, [pc, #16]	; (800cbd0 <vPortSetupTimerInterrupt+0x34>)
 800cbc0:	2207      	movs	r2, #7
 800cbc2:	601a      	str	r2, [r3, #0]
}
 800cbc4:	bf00      	nop
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr
 800cbce:	bf00      	nop
 800cbd0:	e000e010 	.word	0xe000e010
 800cbd4:	e000e018 	.word	0xe000e018
 800cbd8:	20000000 	.word	0x20000000
 800cbdc:	10624dd3 	.word	0x10624dd3
 800cbe0:	e000e014 	.word	0xe000e014

0800cbe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cbe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cbf4 <vPortEnableVFP+0x10>
 800cbe8:	6801      	ldr	r1, [r0, #0]
 800cbea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cbee:	6001      	str	r1, [r0, #0]
 800cbf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cbf2:	bf00      	nop
 800cbf4:	e000ed88 	.word	0xe000ed88

0800cbf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cbfe:	f3ef 8305 	mrs	r3, IPSR
 800cc02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2b0f      	cmp	r3, #15
 800cc08:	d914      	bls.n	800cc34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cc0a:	4a17      	ldr	r2, [pc, #92]	; (800cc68 <vPortValidateInterruptPriority+0x70>)
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	4413      	add	r3, r2
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cc14:	4b15      	ldr	r3, [pc, #84]	; (800cc6c <vPortValidateInterruptPriority+0x74>)
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	7afa      	ldrb	r2, [r7, #11]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d20a      	bcs.n	800cc34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc22:	f383 8811 	msr	BASEPRI, r3
 800cc26:	f3bf 8f6f 	isb	sy
 800cc2a:	f3bf 8f4f 	dsb	sy
 800cc2e:	607b      	str	r3, [r7, #4]
}
 800cc30:	bf00      	nop
 800cc32:	e7fe      	b.n	800cc32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cc34:	4b0e      	ldr	r3, [pc, #56]	; (800cc70 <vPortValidateInterruptPriority+0x78>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cc3c:	4b0d      	ldr	r3, [pc, #52]	; (800cc74 <vPortValidateInterruptPriority+0x7c>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d90a      	bls.n	800cc5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc48:	f383 8811 	msr	BASEPRI, r3
 800cc4c:	f3bf 8f6f 	isb	sy
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	603b      	str	r3, [r7, #0]
}
 800cc56:	bf00      	nop
 800cc58:	e7fe      	b.n	800cc58 <vPortValidateInterruptPriority+0x60>
	}
 800cc5a:	bf00      	nop
 800cc5c:	3714      	adds	r7, #20
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop
 800cc68:	e000e3f0 	.word	0xe000e3f0
 800cc6c:	20004cb0 	.word	0x20004cb0
 800cc70:	e000ed0c 	.word	0xe000ed0c
 800cc74:	20004cb4 	.word	0x20004cb4

0800cc78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d10a      	bne.n	800cca2 <xQueueGenericReset+0x2a>
	__asm volatile
 800cc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc90:	f383 8811 	msr	BASEPRI, r3
 800cc94:	f3bf 8f6f 	isb	sy
 800cc98:	f3bf 8f4f 	dsb	sy
 800cc9c:	60bb      	str	r3, [r7, #8]
}
 800cc9e:	bf00      	nop
 800cca0:	e7fe      	b.n	800cca0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cca2:	f7ff fec7 	bl	800ca34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccae:	68f9      	ldr	r1, [r7, #12]
 800ccb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ccb2:	fb01 f303 	mul.w	r3, r1, r3
 800ccb6:	441a      	add	r2, r3
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681a      	ldr	r2, [r3, #0]
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccd2:	3b01      	subs	r3, #1
 800ccd4:	68f9      	ldr	r1, [r7, #12]
 800ccd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ccd8:	fb01 f303 	mul.w	r3, r1, r3
 800ccdc:	441a      	add	r2, r3
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	22ff      	movs	r2, #255	; 0xff
 800cce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	22ff      	movs	r2, #255	; 0xff
 800ccee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d114      	bne.n	800cd22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	691b      	ldr	r3, [r3, #16]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d01a      	beq.n	800cd36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	3310      	adds	r3, #16
 800cd04:	4618      	mov	r0, r3
 800cd06:	f001 f929 	bl	800df5c <xTaskRemoveFromEventList>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d012      	beq.n	800cd36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cd10:	4b0c      	ldr	r3, [pc, #48]	; (800cd44 <xQueueGenericReset+0xcc>)
 800cd12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd16:	601a      	str	r2, [r3, #0]
 800cd18:	f3bf 8f4f 	dsb	sy
 800cd1c:	f3bf 8f6f 	isb	sy
 800cd20:	e009      	b.n	800cd36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	3310      	adds	r3, #16
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7ff fca4 	bl	800c674 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	3324      	adds	r3, #36	; 0x24
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7ff fc9f 	bl	800c674 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cd36:	f7ff fead 	bl	800ca94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cd3a:	2301      	movs	r3, #1
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3710      	adds	r7, #16
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}
 800cd44:	e000ed04 	.word	0xe000ed04

0800cd48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b08e      	sub	sp, #56	; 0x38
 800cd4c:	af02      	add	r7, sp, #8
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	607a      	str	r2, [r7, #4]
 800cd54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d10a      	bne.n	800cd72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd60:	f383 8811 	msr	BASEPRI, r3
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd6e:	bf00      	nop
 800cd70:	e7fe      	b.n	800cd70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d10a      	bne.n	800cd8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7c:	f383 8811 	msr	BASEPRI, r3
 800cd80:	f3bf 8f6f 	isb	sy
 800cd84:	f3bf 8f4f 	dsb	sy
 800cd88:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd8a:	bf00      	nop
 800cd8c:	e7fe      	b.n	800cd8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d002      	beq.n	800cd9a <xQueueGenericCreateStatic+0x52>
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d001      	beq.n	800cd9e <xQueueGenericCreateStatic+0x56>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e000      	b.n	800cda0 <xQueueGenericCreateStatic+0x58>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d10a      	bne.n	800cdba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda8:	f383 8811 	msr	BASEPRI, r3
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	623b      	str	r3, [r7, #32]
}
 800cdb6:	bf00      	nop
 800cdb8:	e7fe      	b.n	800cdb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d102      	bne.n	800cdc6 <xQueueGenericCreateStatic+0x7e>
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d101      	bne.n	800cdca <xQueueGenericCreateStatic+0x82>
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	e000      	b.n	800cdcc <xQueueGenericCreateStatic+0x84>
 800cdca:	2300      	movs	r3, #0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d10a      	bne.n	800cde6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd4:	f383 8811 	msr	BASEPRI, r3
 800cdd8:	f3bf 8f6f 	isb	sy
 800cddc:	f3bf 8f4f 	dsb	sy
 800cde0:	61fb      	str	r3, [r7, #28]
}
 800cde2:	bf00      	nop
 800cde4:	e7fe      	b.n	800cde4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cde6:	2350      	movs	r3, #80	; 0x50
 800cde8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	2b50      	cmp	r3, #80	; 0x50
 800cdee:	d00a      	beq.n	800ce06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf4:	f383 8811 	msr	BASEPRI, r3
 800cdf8:	f3bf 8f6f 	isb	sy
 800cdfc:	f3bf 8f4f 	dsb	sy
 800ce00:	61bb      	str	r3, [r7, #24]
}
 800ce02:	bf00      	nop
 800ce04:	e7fe      	b.n	800ce04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ce06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ce0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00d      	beq.n	800ce2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ce12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce14:	2201      	movs	r2, #1
 800ce16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ce1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	4613      	mov	r3, r2
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	68b9      	ldr	r1, [r7, #8]
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f000 f805 	bl	800ce38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3730      	adds	r7, #48	; 0x30
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
 800ce44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d103      	bne.n	800ce54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	69ba      	ldr	r2, [r7, #24]
 800ce50:	601a      	str	r2, [r3, #0]
 800ce52:	e002      	b.n	800ce5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	68fa      	ldr	r2, [r7, #12]
 800ce5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	68ba      	ldr	r2, [r7, #8]
 800ce64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ce66:	2101      	movs	r1, #1
 800ce68:	69b8      	ldr	r0, [r7, #24]
 800ce6a:	f7ff ff05 	bl	800cc78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ce6e:	69bb      	ldr	r3, [r7, #24]
 800ce70:	78fa      	ldrb	r2, [r7, #3]
 800ce72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ce76:	bf00      	nop
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
	...

0800ce80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b08e      	sub	sp, #56	; 0x38
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
 800ce8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ce96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d10a      	bne.n	800ceb2 <xQueueGenericSend+0x32>
	__asm volatile
 800ce9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea0:	f383 8811 	msr	BASEPRI, r3
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ceae:	bf00      	nop
 800ceb0:	e7fe      	b.n	800ceb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d103      	bne.n	800cec0 <xQueueGenericSend+0x40>
 800ceb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d101      	bne.n	800cec4 <xQueueGenericSend+0x44>
 800cec0:	2301      	movs	r3, #1
 800cec2:	e000      	b.n	800cec6 <xQueueGenericSend+0x46>
 800cec4:	2300      	movs	r3, #0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d10a      	bne.n	800cee0 <xQueueGenericSend+0x60>
	__asm volatile
 800ceca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cece:	f383 8811 	msr	BASEPRI, r3
 800ced2:	f3bf 8f6f 	isb	sy
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cedc:	bf00      	nop
 800cede:	e7fe      	b.n	800cede <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	2b02      	cmp	r3, #2
 800cee4:	d103      	bne.n	800ceee <xQueueGenericSend+0x6e>
 800cee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d101      	bne.n	800cef2 <xQueueGenericSend+0x72>
 800ceee:	2301      	movs	r3, #1
 800cef0:	e000      	b.n	800cef4 <xQueueGenericSend+0x74>
 800cef2:	2300      	movs	r3, #0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d10a      	bne.n	800cf0e <xQueueGenericSend+0x8e>
	__asm volatile
 800cef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefc:	f383 8811 	msr	BASEPRI, r3
 800cf00:	f3bf 8f6f 	isb	sy
 800cf04:	f3bf 8f4f 	dsb	sy
 800cf08:	623b      	str	r3, [r7, #32]
}
 800cf0a:	bf00      	nop
 800cf0c:	e7fe      	b.n	800cf0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf0e:	f001 f9e7 	bl	800e2e0 <xTaskGetSchedulerState>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d102      	bne.n	800cf1e <xQueueGenericSend+0x9e>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d101      	bne.n	800cf22 <xQueueGenericSend+0xa2>
 800cf1e:	2301      	movs	r3, #1
 800cf20:	e000      	b.n	800cf24 <xQueueGenericSend+0xa4>
 800cf22:	2300      	movs	r3, #0
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d10a      	bne.n	800cf3e <xQueueGenericSend+0xbe>
	__asm volatile
 800cf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2c:	f383 8811 	msr	BASEPRI, r3
 800cf30:	f3bf 8f6f 	isb	sy
 800cf34:	f3bf 8f4f 	dsb	sy
 800cf38:	61fb      	str	r3, [r7, #28]
}
 800cf3a:	bf00      	nop
 800cf3c:	e7fe      	b.n	800cf3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf3e:	f7ff fd79 	bl	800ca34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d302      	bcc.n	800cf54 <xQueueGenericSend+0xd4>
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	2b02      	cmp	r3, #2
 800cf52:	d129      	bne.n	800cfa8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf54:	683a      	ldr	r2, [r7, #0]
 800cf56:	68b9      	ldr	r1, [r7, #8]
 800cf58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf5a:	f000 fa0b 	bl	800d374 <prvCopyDataToQueue>
 800cf5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d010      	beq.n	800cf8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6a:	3324      	adds	r3, #36	; 0x24
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f000 fff5 	bl	800df5c <xTaskRemoveFromEventList>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d013      	beq.n	800cfa0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cf78:	4b3f      	ldr	r3, [pc, #252]	; (800d078 <xQueueGenericSend+0x1f8>)
 800cf7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf7e:	601a      	str	r2, [r3, #0]
 800cf80:	f3bf 8f4f 	dsb	sy
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	e00a      	b.n	800cfa0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d007      	beq.n	800cfa0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cf90:	4b39      	ldr	r3, [pc, #228]	; (800d078 <xQueueGenericSend+0x1f8>)
 800cf92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf96:	601a      	str	r2, [r3, #0]
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cfa0:	f7ff fd78 	bl	800ca94 <vPortExitCritical>
				return pdPASS;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e063      	b.n	800d070 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d103      	bne.n	800cfb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cfae:	f7ff fd71 	bl	800ca94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	e05c      	b.n	800d070 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cfb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d106      	bne.n	800cfca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cfbc:	f107 0314 	add.w	r3, r7, #20
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f001 f82f 	bl	800e024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cfca:	f7ff fd63 	bl	800ca94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cfce:	f000 fd9b 	bl	800db08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cfd2:	f7ff fd2f 	bl	800ca34 <vPortEnterCritical>
 800cfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfdc:	b25b      	sxtb	r3, r3
 800cfde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfe2:	d103      	bne.n	800cfec <xQueueGenericSend+0x16c>
 800cfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cff2:	b25b      	sxtb	r3, r3
 800cff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cff8:	d103      	bne.n	800d002 <xQueueGenericSend+0x182>
 800cffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffc:	2200      	movs	r2, #0
 800cffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d002:	f7ff fd47 	bl	800ca94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d006:	1d3a      	adds	r2, r7, #4
 800d008:	f107 0314 	add.w	r3, r7, #20
 800d00c:	4611      	mov	r1, r2
 800d00e:	4618      	mov	r0, r3
 800d010:	f001 f81e 	bl	800e050 <xTaskCheckForTimeOut>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d124      	bne.n	800d064 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d01a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d01c:	f000 faa2 	bl	800d564 <prvIsQueueFull>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d018      	beq.n	800d058 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d028:	3310      	adds	r3, #16
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	4611      	mov	r1, r2
 800d02e:	4618      	mov	r0, r3
 800d030:	f000 ff44 	bl	800debc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d036:	f000 fa2d 	bl	800d494 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d03a:	f000 fd73 	bl	800db24 <xTaskResumeAll>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	f47f af7c 	bne.w	800cf3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d046:	4b0c      	ldr	r3, [pc, #48]	; (800d078 <xQueueGenericSend+0x1f8>)
 800d048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d04c:	601a      	str	r2, [r3, #0]
 800d04e:	f3bf 8f4f 	dsb	sy
 800d052:	f3bf 8f6f 	isb	sy
 800d056:	e772      	b.n	800cf3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d05a:	f000 fa1b 	bl	800d494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d05e:	f000 fd61 	bl	800db24 <xTaskResumeAll>
 800d062:	e76c      	b.n	800cf3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d066:	f000 fa15 	bl	800d494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d06a:	f000 fd5b 	bl	800db24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d06e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d070:	4618      	mov	r0, r3
 800d072:	3738      	adds	r7, #56	; 0x38
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	e000ed04 	.word	0xe000ed04

0800d07c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b090      	sub	sp, #64	; 0x40
 800d080:	af00      	add	r7, sp, #0
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
 800d088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d090:	2b00      	cmp	r3, #0
 800d092:	d10a      	bne.n	800d0aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d098:	f383 8811 	msr	BASEPRI, r3
 800d09c:	f3bf 8f6f 	isb	sy
 800d0a0:	f3bf 8f4f 	dsb	sy
 800d0a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d0a6:	bf00      	nop
 800d0a8:	e7fe      	b.n	800d0a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d103      	bne.n	800d0b8 <xQueueGenericSendFromISR+0x3c>
 800d0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d101      	bne.n	800d0bc <xQueueGenericSendFromISR+0x40>
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	e000      	b.n	800d0be <xQueueGenericSendFromISR+0x42>
 800d0bc:	2300      	movs	r3, #0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d10a      	bne.n	800d0d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c6:	f383 8811 	msr	BASEPRI, r3
 800d0ca:	f3bf 8f6f 	isb	sy
 800d0ce:	f3bf 8f4f 	dsb	sy
 800d0d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d0d4:	bf00      	nop
 800d0d6:	e7fe      	b.n	800d0d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	2b02      	cmp	r3, #2
 800d0dc:	d103      	bne.n	800d0e6 <xQueueGenericSendFromISR+0x6a>
 800d0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d101      	bne.n	800d0ea <xQueueGenericSendFromISR+0x6e>
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	e000      	b.n	800d0ec <xQueueGenericSendFromISR+0x70>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10a      	bne.n	800d106 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f4:	f383 8811 	msr	BASEPRI, r3
 800d0f8:	f3bf 8f6f 	isb	sy
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	623b      	str	r3, [r7, #32]
}
 800d102:	bf00      	nop
 800d104:	e7fe      	b.n	800d104 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d106:	f7ff fd77 	bl	800cbf8 <vPortValidateInterruptPriority>
	__asm volatile
 800d10a:	f3ef 8211 	mrs	r2, BASEPRI
 800d10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d112:	f383 8811 	msr	BASEPRI, r3
 800d116:	f3bf 8f6f 	isb	sy
 800d11a:	f3bf 8f4f 	dsb	sy
 800d11e:	61fa      	str	r2, [r7, #28]
 800d120:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d122:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d124:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d12e:	429a      	cmp	r2, r3
 800d130:	d302      	bcc.n	800d138 <xQueueGenericSendFromISR+0xbc>
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	2b02      	cmp	r3, #2
 800d136:	d12f      	bne.n	800d198 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d146:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d148:	683a      	ldr	r2, [r7, #0]
 800d14a:	68b9      	ldr	r1, [r7, #8]
 800d14c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d14e:	f000 f911 	bl	800d374 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d152:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d15a:	d112      	bne.n	800d182 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d160:	2b00      	cmp	r3, #0
 800d162:	d016      	beq.n	800d192 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d166:	3324      	adds	r3, #36	; 0x24
 800d168:	4618      	mov	r0, r3
 800d16a:	f000 fef7 	bl	800df5c <xTaskRemoveFromEventList>
 800d16e:	4603      	mov	r3, r0
 800d170:	2b00      	cmp	r3, #0
 800d172:	d00e      	beq.n	800d192 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00b      	beq.n	800d192 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2201      	movs	r2, #1
 800d17e:	601a      	str	r2, [r3, #0]
 800d180:	e007      	b.n	800d192 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d182:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d186:	3301      	adds	r3, #1
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	b25a      	sxtb	r2, r3
 800d18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d192:	2301      	movs	r3, #1
 800d194:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d196:	e001      	b.n	800d19c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d198:	2300      	movs	r3, #0
 800d19a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d19e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	f383 8811 	msr	BASEPRI, r3
}
 800d1a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3740      	adds	r7, #64	; 0x40
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
	...

0800d1b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b08c      	sub	sp, #48	; 0x30
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d10a      	bne.n	800d1e4 <xQueueReceive+0x30>
	__asm volatile
 800d1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d2:	f383 8811 	msr	BASEPRI, r3
 800d1d6:	f3bf 8f6f 	isb	sy
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	623b      	str	r3, [r7, #32]
}
 800d1e0:	bf00      	nop
 800d1e2:	e7fe      	b.n	800d1e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d103      	bne.n	800d1f2 <xQueueReceive+0x3e>
 800d1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d101      	bne.n	800d1f6 <xQueueReceive+0x42>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	e000      	b.n	800d1f8 <xQueueReceive+0x44>
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d10a      	bne.n	800d212 <xQueueReceive+0x5e>
	__asm volatile
 800d1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d200:	f383 8811 	msr	BASEPRI, r3
 800d204:	f3bf 8f6f 	isb	sy
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	61fb      	str	r3, [r7, #28]
}
 800d20e:	bf00      	nop
 800d210:	e7fe      	b.n	800d210 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d212:	f001 f865 	bl	800e2e0 <xTaskGetSchedulerState>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d102      	bne.n	800d222 <xQueueReceive+0x6e>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d101      	bne.n	800d226 <xQueueReceive+0x72>
 800d222:	2301      	movs	r3, #1
 800d224:	e000      	b.n	800d228 <xQueueReceive+0x74>
 800d226:	2300      	movs	r3, #0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d10a      	bne.n	800d242 <xQueueReceive+0x8e>
	__asm volatile
 800d22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d230:	f383 8811 	msr	BASEPRI, r3
 800d234:	f3bf 8f6f 	isb	sy
 800d238:	f3bf 8f4f 	dsb	sy
 800d23c:	61bb      	str	r3, [r7, #24]
}
 800d23e:	bf00      	nop
 800d240:	e7fe      	b.n	800d240 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d242:	f7ff fbf7 	bl	800ca34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d24a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d01f      	beq.n	800d292 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d252:	68b9      	ldr	r1, [r7, #8]
 800d254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d256:	f000 f8f7 	bl	800d448 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25c:	1e5a      	subs	r2, r3, #1
 800d25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d260:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d264:	691b      	ldr	r3, [r3, #16]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d00f      	beq.n	800d28a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26c:	3310      	adds	r3, #16
 800d26e:	4618      	mov	r0, r3
 800d270:	f000 fe74 	bl	800df5c <xTaskRemoveFromEventList>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d007      	beq.n	800d28a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d27a:	4b3d      	ldr	r3, [pc, #244]	; (800d370 <xQueueReceive+0x1bc>)
 800d27c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d280:	601a      	str	r2, [r3, #0]
 800d282:	f3bf 8f4f 	dsb	sy
 800d286:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d28a:	f7ff fc03 	bl	800ca94 <vPortExitCritical>
				return pdPASS;
 800d28e:	2301      	movs	r3, #1
 800d290:	e069      	b.n	800d366 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d103      	bne.n	800d2a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d298:	f7ff fbfc 	bl	800ca94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d29c:	2300      	movs	r3, #0
 800d29e:	e062      	b.n	800d366 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d106      	bne.n	800d2b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2a6:	f107 0310 	add.w	r3, r7, #16
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f000 feba 	bl	800e024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d2b4:	f7ff fbee 	bl	800ca94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d2b8:	f000 fc26 	bl	800db08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d2bc:	f7ff fbba 	bl	800ca34 <vPortEnterCritical>
 800d2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2c6:	b25b      	sxtb	r3, r3
 800d2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2cc:	d103      	bne.n	800d2d6 <xQueueReceive+0x122>
 800d2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2dc:	b25b      	sxtb	r3, r3
 800d2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2e2:	d103      	bne.n	800d2ec <xQueueReceive+0x138>
 800d2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2ec:	f7ff fbd2 	bl	800ca94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2f0:	1d3a      	adds	r2, r7, #4
 800d2f2:	f107 0310 	add.w	r3, r7, #16
 800d2f6:	4611      	mov	r1, r2
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f000 fea9 	bl	800e050 <xTaskCheckForTimeOut>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d123      	bne.n	800d34c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d306:	f000 f917 	bl	800d538 <prvIsQueueEmpty>
 800d30a:	4603      	mov	r3, r0
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d017      	beq.n	800d340 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d312:	3324      	adds	r3, #36	; 0x24
 800d314:	687a      	ldr	r2, [r7, #4]
 800d316:	4611      	mov	r1, r2
 800d318:	4618      	mov	r0, r3
 800d31a:	f000 fdcf 	bl	800debc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d31e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d320:	f000 f8b8 	bl	800d494 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d324:	f000 fbfe 	bl	800db24 <xTaskResumeAll>
 800d328:	4603      	mov	r3, r0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d189      	bne.n	800d242 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d32e:	4b10      	ldr	r3, [pc, #64]	; (800d370 <xQueueReceive+0x1bc>)
 800d330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d334:	601a      	str	r2, [r3, #0]
 800d336:	f3bf 8f4f 	dsb	sy
 800d33a:	f3bf 8f6f 	isb	sy
 800d33e:	e780      	b.n	800d242 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d342:	f000 f8a7 	bl	800d494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d346:	f000 fbed 	bl	800db24 <xTaskResumeAll>
 800d34a:	e77a      	b.n	800d242 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d34c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d34e:	f000 f8a1 	bl	800d494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d352:	f000 fbe7 	bl	800db24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d358:	f000 f8ee 	bl	800d538 <prvIsQueueEmpty>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	f43f af6f 	beq.w	800d242 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d364:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d366:	4618      	mov	r0, r3
 800d368:	3730      	adds	r7, #48	; 0x30
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	e000ed04 	.word	0xe000ed04

0800d374 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b086      	sub	sp, #24
 800d378:	af00      	add	r7, sp, #0
 800d37a:	60f8      	str	r0, [r7, #12]
 800d37c:	60b9      	str	r1, [r7, #8]
 800d37e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d380:	2300      	movs	r3, #0
 800d382:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d388:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d10d      	bne.n	800d3ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d14d      	bne.n	800d436 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	689b      	ldr	r3, [r3, #8]
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f000 ffbc 	bl	800e31c <xTaskPriorityDisinherit>
 800d3a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	609a      	str	r2, [r3, #8]
 800d3ac:	e043      	b.n	800d436 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d119      	bne.n	800d3e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	6858      	ldr	r0, [r3, #4]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3bc:	461a      	mov	r2, r3
 800d3be:	68b9      	ldr	r1, [r7, #8]
 800d3c0:	f001 fbe0 	bl	800eb84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	685a      	ldr	r2, [r3, #4]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3cc:	441a      	add	r2, r3
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	685a      	ldr	r2, [r3, #4]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d32b      	bcc.n	800d436 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	605a      	str	r2, [r3, #4]
 800d3e6:	e026      	b.n	800d436 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	68d8      	ldr	r0, [r3, #12]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	68b9      	ldr	r1, [r7, #8]
 800d3f4:	f001 fbc6 	bl	800eb84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	68da      	ldr	r2, [r3, #12]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d400:	425b      	negs	r3, r3
 800d402:	441a      	add	r2, r3
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	68da      	ldr	r2, [r3, #12]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	429a      	cmp	r2, r3
 800d412:	d207      	bcs.n	800d424 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	689a      	ldr	r2, [r3, #8]
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d41c:	425b      	negs	r3, r3
 800d41e:	441a      	add	r2, r3
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2b02      	cmp	r3, #2
 800d428:	d105      	bne.n	800d436 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d002      	beq.n	800d436 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	3b01      	subs	r3, #1
 800d434:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	1c5a      	adds	r2, r3, #1
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d43e:	697b      	ldr	r3, [r7, #20]
}
 800d440:	4618      	mov	r0, r3
 800d442:	3718      	adds	r7, #24
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d456:	2b00      	cmp	r3, #0
 800d458:	d018      	beq.n	800d48c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	68da      	ldr	r2, [r3, #12]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d462:	441a      	add	r2, r3
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	68da      	ldr	r2, [r3, #12]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	689b      	ldr	r3, [r3, #8]
 800d470:	429a      	cmp	r2, r3
 800d472:	d303      	bcc.n	800d47c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	68d9      	ldr	r1, [r3, #12]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d484:	461a      	mov	r2, r3
 800d486:	6838      	ldr	r0, [r7, #0]
 800d488:	f001 fb7c 	bl	800eb84 <memcpy>
	}
}
 800d48c:	bf00      	nop
 800d48e:	3708      	adds	r7, #8
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d49c:	f7ff faca 	bl	800ca34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4a8:	e011      	b.n	800d4ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d012      	beq.n	800d4d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	3324      	adds	r3, #36	; 0x24
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f000 fd50 	bl	800df5c <xTaskRemoveFromEventList>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d001      	beq.n	800d4c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d4c2:	f000 fe27 	bl	800e114 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d4c6:	7bfb      	ldrb	r3, [r7, #15]
 800d4c8:	3b01      	subs	r3, #1
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	dce9      	bgt.n	800d4aa <prvUnlockQueue+0x16>
 800d4d6:	e000      	b.n	800d4da <prvUnlockQueue+0x46>
					break;
 800d4d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	22ff      	movs	r2, #255	; 0xff
 800d4de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d4e2:	f7ff fad7 	bl	800ca94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d4e6:	f7ff faa5 	bl	800ca34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d4f2:	e011      	b.n	800d518 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	691b      	ldr	r3, [r3, #16]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d012      	beq.n	800d522 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	3310      	adds	r3, #16
 800d500:	4618      	mov	r0, r3
 800d502:	f000 fd2b 	bl	800df5c <xTaskRemoveFromEventList>
 800d506:	4603      	mov	r3, r0
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d001      	beq.n	800d510 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d50c:	f000 fe02 	bl	800e114 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d510:	7bbb      	ldrb	r3, [r7, #14]
 800d512:	3b01      	subs	r3, #1
 800d514:	b2db      	uxtb	r3, r3
 800d516:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	dce9      	bgt.n	800d4f4 <prvUnlockQueue+0x60>
 800d520:	e000      	b.n	800d524 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d522:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	22ff      	movs	r2, #255	; 0xff
 800d528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d52c:	f7ff fab2 	bl	800ca94 <vPortExitCritical>
}
 800d530:	bf00      	nop
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d540:	f7ff fa78 	bl	800ca34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d102      	bne.n	800d552 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d54c:	2301      	movs	r3, #1
 800d54e:	60fb      	str	r3, [r7, #12]
 800d550:	e001      	b.n	800d556 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d552:	2300      	movs	r3, #0
 800d554:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d556:	f7ff fa9d 	bl	800ca94 <vPortExitCritical>

	return xReturn;
 800d55a:	68fb      	ldr	r3, [r7, #12]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3710      	adds	r7, #16
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d56c:	f7ff fa62 	bl	800ca34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d578:	429a      	cmp	r2, r3
 800d57a:	d102      	bne.n	800d582 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d57c:	2301      	movs	r3, #1
 800d57e:	60fb      	str	r3, [r7, #12]
 800d580:	e001      	b.n	800d586 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d582:	2300      	movs	r3, #0
 800d584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d586:	f7ff fa85 	bl	800ca94 <vPortExitCritical>

	return xReturn;
 800d58a:	68fb      	ldr	r3, [r7, #12]
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3710      	adds	r7, #16
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d594:	b480      	push	{r7}
 800d596:	b085      	sub	sp, #20
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d59e:	2300      	movs	r3, #0
 800d5a0:	60fb      	str	r3, [r7, #12]
 800d5a2:	e014      	b.n	800d5ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d5a4:	4a0f      	ldr	r2, [pc, #60]	; (800d5e4 <vQueueAddToRegistry+0x50>)
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d10b      	bne.n	800d5c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d5b0:	490c      	ldr	r1, [pc, #48]	; (800d5e4 <vQueueAddToRegistry+0x50>)
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	683a      	ldr	r2, [r7, #0]
 800d5b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d5ba:	4a0a      	ldr	r2, [pc, #40]	; (800d5e4 <vQueueAddToRegistry+0x50>)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	00db      	lsls	r3, r3, #3
 800d5c0:	4413      	add	r3, r2
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d5c6:	e006      	b.n	800d5d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	60fb      	str	r3, [r7, #12]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2b07      	cmp	r3, #7
 800d5d2:	d9e7      	bls.n	800d5a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d5d4:	bf00      	nop
 800d5d6:	bf00      	nop
 800d5d8:	3714      	adds	r7, #20
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr
 800d5e2:	bf00      	nop
 800d5e4:	20004cb8 	.word	0x20004cb8

0800d5e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b086      	sub	sp, #24
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d5f8:	f7ff fa1c 	bl	800ca34 <vPortEnterCritical>
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d602:	b25b      	sxtb	r3, r3
 800d604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d608:	d103      	bne.n	800d612 <vQueueWaitForMessageRestricted+0x2a>
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	2200      	movs	r2, #0
 800d60e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d618:	b25b      	sxtb	r3, r3
 800d61a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d61e:	d103      	bne.n	800d628 <vQueueWaitForMessageRestricted+0x40>
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	2200      	movs	r2, #0
 800d624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d628:	f7ff fa34 	bl	800ca94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d630:	2b00      	cmp	r3, #0
 800d632:	d106      	bne.n	800d642 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	3324      	adds	r3, #36	; 0x24
 800d638:	687a      	ldr	r2, [r7, #4]
 800d63a:	68b9      	ldr	r1, [r7, #8]
 800d63c:	4618      	mov	r0, r3
 800d63e:	f000 fc61 	bl	800df04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d642:	6978      	ldr	r0, [r7, #20]
 800d644:	f7ff ff26 	bl	800d494 <prvUnlockQueue>
	}
 800d648:	bf00      	nop
 800d64a:	3718      	adds	r7, #24
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d650:	b580      	push	{r7, lr}
 800d652:	b08e      	sub	sp, #56	; 0x38
 800d654:	af04      	add	r7, sp, #16
 800d656:	60f8      	str	r0, [r7, #12]
 800d658:	60b9      	str	r1, [r7, #8]
 800d65a:	607a      	str	r2, [r7, #4]
 800d65c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d660:	2b00      	cmp	r3, #0
 800d662:	d10a      	bne.n	800d67a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d668:	f383 8811 	msr	BASEPRI, r3
 800d66c:	f3bf 8f6f 	isb	sy
 800d670:	f3bf 8f4f 	dsb	sy
 800d674:	623b      	str	r3, [r7, #32]
}
 800d676:	bf00      	nop
 800d678:	e7fe      	b.n	800d678 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d10a      	bne.n	800d696 <xTaskCreateStatic+0x46>
	__asm volatile
 800d680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	61fb      	str	r3, [r7, #28]
}
 800d692:	bf00      	nop
 800d694:	e7fe      	b.n	800d694 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d696:	23bc      	movs	r3, #188	; 0xbc
 800d698:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	2bbc      	cmp	r3, #188	; 0xbc
 800d69e:	d00a      	beq.n	800d6b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a4:	f383 8811 	msr	BASEPRI, r3
 800d6a8:	f3bf 8f6f 	isb	sy
 800d6ac:	f3bf 8f4f 	dsb	sy
 800d6b0:	61bb      	str	r3, [r7, #24]
}
 800d6b2:	bf00      	nop
 800d6b4:	e7fe      	b.n	800d6b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d6b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d01e      	beq.n	800d6fc <xTaskCreateStatic+0xac>
 800d6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d01b      	beq.n	800d6fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d0:	2202      	movs	r2, #2
 800d6d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	9303      	str	r3, [sp, #12]
 800d6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6dc:	9302      	str	r3, [sp, #8]
 800d6de:	f107 0314 	add.w	r3, r7, #20
 800d6e2:	9301      	str	r3, [sp, #4]
 800d6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e6:	9300      	str	r3, [sp, #0]
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	68b9      	ldr	r1, [r7, #8]
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	f000 f850 	bl	800d794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d6f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6f6:	f000 f8f3 	bl	800d8e0 <prvAddNewTaskToReadyList>
 800d6fa:	e001      	b.n	800d700 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d700:	697b      	ldr	r3, [r7, #20]
	}
 800d702:	4618      	mov	r0, r3
 800d704:	3728      	adds	r7, #40	; 0x28
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}

0800d70a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b08c      	sub	sp, #48	; 0x30
 800d70e:	af04      	add	r7, sp, #16
 800d710:	60f8      	str	r0, [r7, #12]
 800d712:	60b9      	str	r1, [r7, #8]
 800d714:	603b      	str	r3, [r7, #0]
 800d716:	4613      	mov	r3, r2
 800d718:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d71a:	88fb      	ldrh	r3, [r7, #6]
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	4618      	mov	r0, r3
 800d720:	f7fe fdbe 	bl	800c2a0 <pvPortMalloc>
 800d724:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00e      	beq.n	800d74a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d72c:	20bc      	movs	r0, #188	; 0xbc
 800d72e:	f7fe fdb7 	bl	800c2a0 <pvPortMalloc>
 800d732:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d734:	69fb      	ldr	r3, [r7, #28]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d003      	beq.n	800d742 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	697a      	ldr	r2, [r7, #20]
 800d73e:	631a      	str	r2, [r3, #48]	; 0x30
 800d740:	e005      	b.n	800d74e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d742:	6978      	ldr	r0, [r7, #20]
 800d744:	f7fe fe78 	bl	800c438 <vPortFree>
 800d748:	e001      	b.n	800d74e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d74a:	2300      	movs	r3, #0
 800d74c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d74e:	69fb      	ldr	r3, [r7, #28]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d017      	beq.n	800d784 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	2200      	movs	r2, #0
 800d758:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d75c:	88fa      	ldrh	r2, [r7, #6]
 800d75e:	2300      	movs	r3, #0
 800d760:	9303      	str	r3, [sp, #12]
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	9302      	str	r3, [sp, #8]
 800d766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d768:	9301      	str	r3, [sp, #4]
 800d76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76c:	9300      	str	r3, [sp, #0]
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	68b9      	ldr	r1, [r7, #8]
 800d772:	68f8      	ldr	r0, [r7, #12]
 800d774:	f000 f80e 	bl	800d794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d778:	69f8      	ldr	r0, [r7, #28]
 800d77a:	f000 f8b1 	bl	800d8e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d77e:	2301      	movs	r3, #1
 800d780:	61bb      	str	r3, [r7, #24]
 800d782:	e002      	b.n	800d78a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d784:	f04f 33ff 	mov.w	r3, #4294967295
 800d788:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d78a:	69bb      	ldr	r3, [r7, #24]
	}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3720      	adds	r7, #32
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b088      	sub	sp, #32
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
 800d7a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	21a5      	movs	r1, #165	; 0xa5
 800d7ae:	f001 f9f7 	bl	800eba0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d7bc:	3b01      	subs	r3, #1
 800d7be:	009b      	lsls	r3, r3, #2
 800d7c0:	4413      	add	r3, r2
 800d7c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d7c4:	69bb      	ldr	r3, [r7, #24]
 800d7c6:	f023 0307 	bic.w	r3, r3, #7
 800d7ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d7cc:	69bb      	ldr	r3, [r7, #24]
 800d7ce:	f003 0307 	and.w	r3, r3, #7
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d00a      	beq.n	800d7ec <prvInitialiseNewTask+0x58>
	__asm volatile
 800d7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7da:	f383 8811 	msr	BASEPRI, r3
 800d7de:	f3bf 8f6f 	isb	sy
 800d7e2:	f3bf 8f4f 	dsb	sy
 800d7e6:	617b      	str	r3, [r7, #20]
}
 800d7e8:	bf00      	nop
 800d7ea:	e7fe      	b.n	800d7ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d01f      	beq.n	800d832 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	61fb      	str	r3, [r7, #28]
 800d7f6:	e012      	b.n	800d81e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7f8:	68ba      	ldr	r2, [r7, #8]
 800d7fa:	69fb      	ldr	r3, [r7, #28]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	7819      	ldrb	r1, [r3, #0]
 800d800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d802:	69fb      	ldr	r3, [r7, #28]
 800d804:	4413      	add	r3, r2
 800d806:	3334      	adds	r3, #52	; 0x34
 800d808:	460a      	mov	r2, r1
 800d80a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d80c:	68ba      	ldr	r2, [r7, #8]
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	4413      	add	r3, r2
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d006      	beq.n	800d826 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	3301      	adds	r3, #1
 800d81c:	61fb      	str	r3, [r7, #28]
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	2b0f      	cmp	r3, #15
 800d822:	d9e9      	bls.n	800d7f8 <prvInitialiseNewTask+0x64>
 800d824:	e000      	b.n	800d828 <prvInitialiseNewTask+0x94>
			{
				break;
 800d826:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82a:	2200      	movs	r2, #0
 800d82c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d830:	e003      	b.n	800d83a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	2200      	movs	r2, #0
 800d836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83c:	2b37      	cmp	r3, #55	; 0x37
 800d83e:	d901      	bls.n	800d844 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d840:	2337      	movs	r3, #55	; 0x37
 800d842:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d848:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d84e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d852:	2200      	movs	r2, #0
 800d854:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d858:	3304      	adds	r3, #4
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7fe ff2a 	bl	800c6b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d862:	3318      	adds	r3, #24
 800d864:	4618      	mov	r0, r3
 800d866:	f7fe ff25 	bl	800c6b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d86e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d872:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d878:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d87e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d882:	2200      	movs	r2, #0
 800d884:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88a:	2200      	movs	r2, #0
 800d88c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d892:	3354      	adds	r3, #84	; 0x54
 800d894:	2260      	movs	r2, #96	; 0x60
 800d896:	2100      	movs	r1, #0
 800d898:	4618      	mov	r0, r3
 800d89a:	f001 f981 	bl	800eba0 <memset>
 800d89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a0:	4a0c      	ldr	r2, [pc, #48]	; (800d8d4 <prvInitialiseNewTask+0x140>)
 800d8a2:	659a      	str	r2, [r3, #88]	; 0x58
 800d8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a6:	4a0c      	ldr	r2, [pc, #48]	; (800d8d8 <prvInitialiseNewTask+0x144>)
 800d8a8:	65da      	str	r2, [r3, #92]	; 0x5c
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ac:	4a0b      	ldr	r2, [pc, #44]	; (800d8dc <prvInitialiseNewTask+0x148>)
 800d8ae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d8b0:	683a      	ldr	r2, [r7, #0]
 800d8b2:	68f9      	ldr	r1, [r7, #12]
 800d8b4:	69b8      	ldr	r0, [r7, #24]
 800d8b6:	f7fe ff91 	bl	800c7dc <pxPortInitialiseStack>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d002      	beq.n	800d8cc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8cc:	bf00      	nop
 800d8ce:	3720      	adds	r7, #32
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	0800f4e4 	.word	0x0800f4e4
 800d8d8:	0800f504 	.word	0x0800f504
 800d8dc:	0800f4c4 	.word	0x0800f4c4

0800d8e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d8e8:	f7ff f8a4 	bl	800ca34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d8ec:	4b2d      	ldr	r3, [pc, #180]	; (800d9a4 <prvAddNewTaskToReadyList+0xc4>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	4a2c      	ldr	r2, [pc, #176]	; (800d9a4 <prvAddNewTaskToReadyList+0xc4>)
 800d8f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d8f6:	4b2c      	ldr	r3, [pc, #176]	; (800d9a8 <prvAddNewTaskToReadyList+0xc8>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d109      	bne.n	800d912 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d8fe:	4a2a      	ldr	r2, [pc, #168]	; (800d9a8 <prvAddNewTaskToReadyList+0xc8>)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d904:	4b27      	ldr	r3, [pc, #156]	; (800d9a4 <prvAddNewTaskToReadyList+0xc4>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d110      	bne.n	800d92e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d90c:	f000 fc26 	bl	800e15c <prvInitialiseTaskLists>
 800d910:	e00d      	b.n	800d92e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d912:	4b26      	ldr	r3, [pc, #152]	; (800d9ac <prvAddNewTaskToReadyList+0xcc>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d109      	bne.n	800d92e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d91a:	4b23      	ldr	r3, [pc, #140]	; (800d9a8 <prvAddNewTaskToReadyList+0xc8>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d924:	429a      	cmp	r2, r3
 800d926:	d802      	bhi.n	800d92e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d928:	4a1f      	ldr	r2, [pc, #124]	; (800d9a8 <prvAddNewTaskToReadyList+0xc8>)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d92e:	4b20      	ldr	r3, [pc, #128]	; (800d9b0 <prvAddNewTaskToReadyList+0xd0>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	3301      	adds	r3, #1
 800d934:	4a1e      	ldr	r2, [pc, #120]	; (800d9b0 <prvAddNewTaskToReadyList+0xd0>)
 800d936:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d938:	4b1d      	ldr	r3, [pc, #116]	; (800d9b0 <prvAddNewTaskToReadyList+0xd0>)
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d944:	4b1b      	ldr	r3, [pc, #108]	; (800d9b4 <prvAddNewTaskToReadyList+0xd4>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	429a      	cmp	r2, r3
 800d94a:	d903      	bls.n	800d954 <prvAddNewTaskToReadyList+0x74>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d950:	4a18      	ldr	r2, [pc, #96]	; (800d9b4 <prvAddNewTaskToReadyList+0xd4>)
 800d952:	6013      	str	r3, [r2, #0]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d958:	4613      	mov	r3, r2
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	4413      	add	r3, r2
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	4a15      	ldr	r2, [pc, #84]	; (800d9b8 <prvAddNewTaskToReadyList+0xd8>)
 800d962:	441a      	add	r2, r3
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	3304      	adds	r3, #4
 800d968:	4619      	mov	r1, r3
 800d96a:	4610      	mov	r0, r2
 800d96c:	f7fe feaf 	bl	800c6ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d970:	f7ff f890 	bl	800ca94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d974:	4b0d      	ldr	r3, [pc, #52]	; (800d9ac <prvAddNewTaskToReadyList+0xcc>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00e      	beq.n	800d99a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d97c:	4b0a      	ldr	r3, [pc, #40]	; (800d9a8 <prvAddNewTaskToReadyList+0xc8>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d986:	429a      	cmp	r2, r3
 800d988:	d207      	bcs.n	800d99a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d98a:	4b0c      	ldr	r3, [pc, #48]	; (800d9bc <prvAddNewTaskToReadyList+0xdc>)
 800d98c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d990:	601a      	str	r2, [r3, #0]
 800d992:	f3bf 8f4f 	dsb	sy
 800d996:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d99a:	bf00      	nop
 800d99c:	3708      	adds	r7, #8
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	200051cc 	.word	0x200051cc
 800d9a8:	20004cf8 	.word	0x20004cf8
 800d9ac:	200051d8 	.word	0x200051d8
 800d9b0:	200051e8 	.word	0x200051e8
 800d9b4:	200051d4 	.word	0x200051d4
 800d9b8:	20004cfc 	.word	0x20004cfc
 800d9bc:	e000ed04 	.word	0xe000ed04

0800d9c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d017      	beq.n	800da02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d9d2:	4b13      	ldr	r3, [pc, #76]	; (800da20 <vTaskDelay+0x60>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00a      	beq.n	800d9f0 <vTaskDelay+0x30>
	__asm volatile
 800d9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9de:	f383 8811 	msr	BASEPRI, r3
 800d9e2:	f3bf 8f6f 	isb	sy
 800d9e6:	f3bf 8f4f 	dsb	sy
 800d9ea:	60bb      	str	r3, [r7, #8]
}
 800d9ec:	bf00      	nop
 800d9ee:	e7fe      	b.n	800d9ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d9f0:	f000 f88a 	bl	800db08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 fcfe 	bl	800e3f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d9fc:	f000 f892 	bl	800db24 <xTaskResumeAll>
 800da00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d107      	bne.n	800da18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800da08:	4b06      	ldr	r3, [pc, #24]	; (800da24 <vTaskDelay+0x64>)
 800da0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da0e:	601a      	str	r2, [r3, #0]
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da18:	bf00      	nop
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	200051f4 	.word	0x200051f4
 800da24:	e000ed04 	.word	0xe000ed04

0800da28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b08a      	sub	sp, #40	; 0x28
 800da2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800da2e:	2300      	movs	r3, #0
 800da30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800da32:	2300      	movs	r3, #0
 800da34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800da36:	463a      	mov	r2, r7
 800da38:	1d39      	adds	r1, r7, #4
 800da3a:	f107 0308 	add.w	r3, r7, #8
 800da3e:	4618      	mov	r0, r3
 800da40:	f7fe fbfa 	bl	800c238 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800da44:	6839      	ldr	r1, [r7, #0]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	68ba      	ldr	r2, [r7, #8]
 800da4a:	9202      	str	r2, [sp, #8]
 800da4c:	9301      	str	r3, [sp, #4]
 800da4e:	2300      	movs	r3, #0
 800da50:	9300      	str	r3, [sp, #0]
 800da52:	2300      	movs	r3, #0
 800da54:	460a      	mov	r2, r1
 800da56:	4924      	ldr	r1, [pc, #144]	; (800dae8 <vTaskStartScheduler+0xc0>)
 800da58:	4824      	ldr	r0, [pc, #144]	; (800daec <vTaskStartScheduler+0xc4>)
 800da5a:	f7ff fdf9 	bl	800d650 <xTaskCreateStatic>
 800da5e:	4603      	mov	r3, r0
 800da60:	4a23      	ldr	r2, [pc, #140]	; (800daf0 <vTaskStartScheduler+0xc8>)
 800da62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800da64:	4b22      	ldr	r3, [pc, #136]	; (800daf0 <vTaskStartScheduler+0xc8>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d002      	beq.n	800da72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800da6c:	2301      	movs	r3, #1
 800da6e:	617b      	str	r3, [r7, #20]
 800da70:	e001      	b.n	800da76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800da72:	2300      	movs	r3, #0
 800da74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d102      	bne.n	800da82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800da7c:	f000 fd10 	bl	800e4a0 <xTimerCreateTimerTask>
 800da80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	2b01      	cmp	r3, #1
 800da86:	d11b      	bne.n	800dac0 <vTaskStartScheduler+0x98>
	__asm volatile
 800da88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8c:	f383 8811 	msr	BASEPRI, r3
 800da90:	f3bf 8f6f 	isb	sy
 800da94:	f3bf 8f4f 	dsb	sy
 800da98:	613b      	str	r3, [r7, #16]
}
 800da9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800da9c:	4b15      	ldr	r3, [pc, #84]	; (800daf4 <vTaskStartScheduler+0xcc>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	3354      	adds	r3, #84	; 0x54
 800daa2:	4a15      	ldr	r2, [pc, #84]	; (800daf8 <vTaskStartScheduler+0xd0>)
 800daa4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800daa6:	4b15      	ldr	r3, [pc, #84]	; (800dafc <vTaskStartScheduler+0xd4>)
 800daa8:	f04f 32ff 	mov.w	r2, #4294967295
 800daac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800daae:	4b14      	ldr	r3, [pc, #80]	; (800db00 <vTaskStartScheduler+0xd8>)
 800dab0:	2201      	movs	r2, #1
 800dab2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dab4:	4b13      	ldr	r3, [pc, #76]	; (800db04 <vTaskStartScheduler+0xdc>)
 800dab6:	2200      	movs	r2, #0
 800dab8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800daba:	f7fe ff19 	bl	800c8f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dabe:	e00e      	b.n	800dade <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dac6:	d10a      	bne.n	800dade <vTaskStartScheduler+0xb6>
	__asm volatile
 800dac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dacc:	f383 8811 	msr	BASEPRI, r3
 800dad0:	f3bf 8f6f 	isb	sy
 800dad4:	f3bf 8f4f 	dsb	sy
 800dad8:	60fb      	str	r3, [r7, #12]
}
 800dada:	bf00      	nop
 800dadc:	e7fe      	b.n	800dadc <vTaskStartScheduler+0xb4>
}
 800dade:	bf00      	nop
 800dae0:	3718      	adds	r7, #24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	0800f444 	.word	0x0800f444
 800daec:	0800e12d 	.word	0x0800e12d
 800daf0:	200051f0 	.word	0x200051f0
 800daf4:	20004cf8 	.word	0x20004cf8
 800daf8:	20000010 	.word	0x20000010
 800dafc:	200051ec 	.word	0x200051ec
 800db00:	200051d8 	.word	0x200051d8
 800db04:	200051d0 	.word	0x200051d0

0800db08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800db08:	b480      	push	{r7}
 800db0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800db0c:	4b04      	ldr	r3, [pc, #16]	; (800db20 <vTaskSuspendAll+0x18>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	3301      	adds	r3, #1
 800db12:	4a03      	ldr	r2, [pc, #12]	; (800db20 <vTaskSuspendAll+0x18>)
 800db14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800db16:	bf00      	nop
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr
 800db20:	200051f4 	.word	0x200051f4

0800db24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800db2a:	2300      	movs	r3, #0
 800db2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800db2e:	2300      	movs	r3, #0
 800db30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800db32:	4b42      	ldr	r3, [pc, #264]	; (800dc3c <xTaskResumeAll+0x118>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d10a      	bne.n	800db50 <xTaskResumeAll+0x2c>
	__asm volatile
 800db3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3e:	f383 8811 	msr	BASEPRI, r3
 800db42:	f3bf 8f6f 	isb	sy
 800db46:	f3bf 8f4f 	dsb	sy
 800db4a:	603b      	str	r3, [r7, #0]
}
 800db4c:	bf00      	nop
 800db4e:	e7fe      	b.n	800db4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800db50:	f7fe ff70 	bl	800ca34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800db54:	4b39      	ldr	r3, [pc, #228]	; (800dc3c <xTaskResumeAll+0x118>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	3b01      	subs	r3, #1
 800db5a:	4a38      	ldr	r2, [pc, #224]	; (800dc3c <xTaskResumeAll+0x118>)
 800db5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db5e:	4b37      	ldr	r3, [pc, #220]	; (800dc3c <xTaskResumeAll+0x118>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d162      	bne.n	800dc2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800db66:	4b36      	ldr	r3, [pc, #216]	; (800dc40 <xTaskResumeAll+0x11c>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d05e      	beq.n	800dc2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db6e:	e02f      	b.n	800dbd0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db70:	4b34      	ldr	r3, [pc, #208]	; (800dc44 <xTaskResumeAll+0x120>)
 800db72:	68db      	ldr	r3, [r3, #12]
 800db74:	68db      	ldr	r3, [r3, #12]
 800db76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	3318      	adds	r3, #24
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7fe fe03 	bl	800c788 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	3304      	adds	r3, #4
 800db86:	4618      	mov	r0, r3
 800db88:	f7fe fdfe 	bl	800c788 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db90:	4b2d      	ldr	r3, [pc, #180]	; (800dc48 <xTaskResumeAll+0x124>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	429a      	cmp	r2, r3
 800db96:	d903      	bls.n	800dba0 <xTaskResumeAll+0x7c>
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db9c:	4a2a      	ldr	r2, [pc, #168]	; (800dc48 <xTaskResumeAll+0x124>)
 800db9e:	6013      	str	r3, [r2, #0]
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba4:	4613      	mov	r3, r2
 800dba6:	009b      	lsls	r3, r3, #2
 800dba8:	4413      	add	r3, r2
 800dbaa:	009b      	lsls	r3, r3, #2
 800dbac:	4a27      	ldr	r2, [pc, #156]	; (800dc4c <xTaskResumeAll+0x128>)
 800dbae:	441a      	add	r2, r3
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	3304      	adds	r3, #4
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	4610      	mov	r0, r2
 800dbb8:	f7fe fd89 	bl	800c6ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbc0:	4b23      	ldr	r3, [pc, #140]	; (800dc50 <xTaskResumeAll+0x12c>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d302      	bcc.n	800dbd0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dbca:	4b22      	ldr	r3, [pc, #136]	; (800dc54 <xTaskResumeAll+0x130>)
 800dbcc:	2201      	movs	r2, #1
 800dbce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dbd0:	4b1c      	ldr	r3, [pc, #112]	; (800dc44 <xTaskResumeAll+0x120>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d1cb      	bne.n	800db70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d001      	beq.n	800dbe2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dbde:	f000 fb5f 	bl	800e2a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dbe2:	4b1d      	ldr	r3, [pc, #116]	; (800dc58 <xTaskResumeAll+0x134>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d010      	beq.n	800dc10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dbee:	f000 f847 	bl	800dc80 <xTaskIncrementTick>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d002      	beq.n	800dbfe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dbf8:	4b16      	ldr	r3, [pc, #88]	; (800dc54 <xTaskResumeAll+0x130>)
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	3b01      	subs	r3, #1
 800dc02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d1f1      	bne.n	800dbee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dc0a:	4b13      	ldr	r3, [pc, #76]	; (800dc58 <xTaskResumeAll+0x134>)
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dc10:	4b10      	ldr	r3, [pc, #64]	; (800dc54 <xTaskResumeAll+0x130>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d009      	beq.n	800dc2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dc1c:	4b0f      	ldr	r3, [pc, #60]	; (800dc5c <xTaskResumeAll+0x138>)
 800dc1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc22:	601a      	str	r2, [r3, #0]
 800dc24:	f3bf 8f4f 	dsb	sy
 800dc28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc2c:	f7fe ff32 	bl	800ca94 <vPortExitCritical>

	return xAlreadyYielded;
 800dc30:	68bb      	ldr	r3, [r7, #8]
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	200051f4 	.word	0x200051f4
 800dc40:	200051cc 	.word	0x200051cc
 800dc44:	2000518c 	.word	0x2000518c
 800dc48:	200051d4 	.word	0x200051d4
 800dc4c:	20004cfc 	.word	0x20004cfc
 800dc50:	20004cf8 	.word	0x20004cf8
 800dc54:	200051e0 	.word	0x200051e0
 800dc58:	200051dc 	.word	0x200051dc
 800dc5c:	e000ed04 	.word	0xe000ed04

0800dc60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dc60:	b480      	push	{r7}
 800dc62:	b083      	sub	sp, #12
 800dc64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dc66:	4b05      	ldr	r3, [pc, #20]	; (800dc7c <xTaskGetTickCount+0x1c>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dc6c:	687b      	ldr	r3, [r7, #4]
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	370c      	adds	r7, #12
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	200051d0 	.word	0x200051d0

0800dc80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b086      	sub	sp, #24
 800dc84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dc86:	2300      	movs	r3, #0
 800dc88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc8a:	4b4f      	ldr	r3, [pc, #316]	; (800ddc8 <xTaskIncrementTick+0x148>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	f040 808f 	bne.w	800ddb2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dc94:	4b4d      	ldr	r3, [pc, #308]	; (800ddcc <xTaskIncrementTick+0x14c>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	3301      	adds	r3, #1
 800dc9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dc9c:	4a4b      	ldr	r2, [pc, #300]	; (800ddcc <xTaskIncrementTick+0x14c>)
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d120      	bne.n	800dcea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dca8:	4b49      	ldr	r3, [pc, #292]	; (800ddd0 <xTaskIncrementTick+0x150>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d00a      	beq.n	800dcc8 <xTaskIncrementTick+0x48>
	__asm volatile
 800dcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb6:	f383 8811 	msr	BASEPRI, r3
 800dcba:	f3bf 8f6f 	isb	sy
 800dcbe:	f3bf 8f4f 	dsb	sy
 800dcc2:	603b      	str	r3, [r7, #0]
}
 800dcc4:	bf00      	nop
 800dcc6:	e7fe      	b.n	800dcc6 <xTaskIncrementTick+0x46>
 800dcc8:	4b41      	ldr	r3, [pc, #260]	; (800ddd0 <xTaskIncrementTick+0x150>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	60fb      	str	r3, [r7, #12]
 800dcce:	4b41      	ldr	r3, [pc, #260]	; (800ddd4 <xTaskIncrementTick+0x154>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4a3f      	ldr	r2, [pc, #252]	; (800ddd0 <xTaskIncrementTick+0x150>)
 800dcd4:	6013      	str	r3, [r2, #0]
 800dcd6:	4a3f      	ldr	r2, [pc, #252]	; (800ddd4 <xTaskIncrementTick+0x154>)
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	6013      	str	r3, [r2, #0]
 800dcdc:	4b3e      	ldr	r3, [pc, #248]	; (800ddd8 <xTaskIncrementTick+0x158>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	3301      	adds	r3, #1
 800dce2:	4a3d      	ldr	r2, [pc, #244]	; (800ddd8 <xTaskIncrementTick+0x158>)
 800dce4:	6013      	str	r3, [r2, #0]
 800dce6:	f000 fadb 	bl	800e2a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dcea:	4b3c      	ldr	r3, [pc, #240]	; (800dddc <xTaskIncrementTick+0x15c>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	693a      	ldr	r2, [r7, #16]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d349      	bcc.n	800dd88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dcf4:	4b36      	ldr	r3, [pc, #216]	; (800ddd0 <xTaskIncrementTick+0x150>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d104      	bne.n	800dd08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcfe:	4b37      	ldr	r3, [pc, #220]	; (800dddc <xTaskIncrementTick+0x15c>)
 800dd00:	f04f 32ff 	mov.w	r2, #4294967295
 800dd04:	601a      	str	r2, [r3, #0]
					break;
 800dd06:	e03f      	b.n	800dd88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd08:	4b31      	ldr	r3, [pc, #196]	; (800ddd0 <xTaskIncrementTick+0x150>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	68db      	ldr	r3, [r3, #12]
 800dd0e:	68db      	ldr	r3, [r3, #12]
 800dd10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dd18:	693a      	ldr	r2, [r7, #16]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d203      	bcs.n	800dd28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dd20:	4a2e      	ldr	r2, [pc, #184]	; (800dddc <xTaskIncrementTick+0x15c>)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dd26:	e02f      	b.n	800dd88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	3304      	adds	r3, #4
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7fe fd2b 	bl	800c788 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d004      	beq.n	800dd44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	3318      	adds	r3, #24
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7fe fd22 	bl	800c788 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd48:	4b25      	ldr	r3, [pc, #148]	; (800dde0 <xTaskIncrementTick+0x160>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d903      	bls.n	800dd58 <xTaskIncrementTick+0xd8>
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd54:	4a22      	ldr	r2, [pc, #136]	; (800dde0 <xTaskIncrementTick+0x160>)
 800dd56:	6013      	str	r3, [r2, #0]
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd5c:	4613      	mov	r3, r2
 800dd5e:	009b      	lsls	r3, r3, #2
 800dd60:	4413      	add	r3, r2
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	4a1f      	ldr	r2, [pc, #124]	; (800dde4 <xTaskIncrementTick+0x164>)
 800dd66:	441a      	add	r2, r3
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	3304      	adds	r3, #4
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	4610      	mov	r0, r2
 800dd70:	f7fe fcad 	bl	800c6ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd78:	4b1b      	ldr	r3, [pc, #108]	; (800dde8 <xTaskIncrementTick+0x168>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd7e:	429a      	cmp	r2, r3
 800dd80:	d3b8      	bcc.n	800dcf4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dd82:	2301      	movs	r3, #1
 800dd84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd86:	e7b5      	b.n	800dcf4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dd88:	4b17      	ldr	r3, [pc, #92]	; (800dde8 <xTaskIncrementTick+0x168>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd8e:	4915      	ldr	r1, [pc, #84]	; (800dde4 <xTaskIncrementTick+0x164>)
 800dd90:	4613      	mov	r3, r2
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	4413      	add	r3, r2
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	440b      	add	r3, r1
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d901      	bls.n	800dda4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dda0:	2301      	movs	r3, #1
 800dda2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dda4:	4b11      	ldr	r3, [pc, #68]	; (800ddec <xTaskIncrementTick+0x16c>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d007      	beq.n	800ddbc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ddac:	2301      	movs	r3, #1
 800ddae:	617b      	str	r3, [r7, #20]
 800ddb0:	e004      	b.n	800ddbc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ddb2:	4b0f      	ldr	r3, [pc, #60]	; (800ddf0 <xTaskIncrementTick+0x170>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	4a0d      	ldr	r2, [pc, #52]	; (800ddf0 <xTaskIncrementTick+0x170>)
 800ddba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ddbc:	697b      	ldr	r3, [r7, #20]
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3718      	adds	r7, #24
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	200051f4 	.word	0x200051f4
 800ddcc:	200051d0 	.word	0x200051d0
 800ddd0:	20005184 	.word	0x20005184
 800ddd4:	20005188 	.word	0x20005188
 800ddd8:	200051e4 	.word	0x200051e4
 800dddc:	200051ec 	.word	0x200051ec
 800dde0:	200051d4 	.word	0x200051d4
 800dde4:	20004cfc 	.word	0x20004cfc
 800dde8:	20004cf8 	.word	0x20004cf8
 800ddec:	200051e0 	.word	0x200051e0
 800ddf0:	200051dc 	.word	0x200051dc

0800ddf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b085      	sub	sp, #20
 800ddf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ddfa:	4b2a      	ldr	r3, [pc, #168]	; (800dea4 <vTaskSwitchContext+0xb0>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d003      	beq.n	800de0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800de02:	4b29      	ldr	r3, [pc, #164]	; (800dea8 <vTaskSwitchContext+0xb4>)
 800de04:	2201      	movs	r2, #1
 800de06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800de08:	e046      	b.n	800de98 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800de0a:	4b27      	ldr	r3, [pc, #156]	; (800dea8 <vTaskSwitchContext+0xb4>)
 800de0c:	2200      	movs	r2, #0
 800de0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de10:	4b26      	ldr	r3, [pc, #152]	; (800deac <vTaskSwitchContext+0xb8>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	60fb      	str	r3, [r7, #12]
 800de16:	e010      	b.n	800de3a <vTaskSwitchContext+0x46>
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d10a      	bne.n	800de34 <vTaskSwitchContext+0x40>
	__asm volatile
 800de1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de22:	f383 8811 	msr	BASEPRI, r3
 800de26:	f3bf 8f6f 	isb	sy
 800de2a:	f3bf 8f4f 	dsb	sy
 800de2e:	607b      	str	r3, [r7, #4]
}
 800de30:	bf00      	nop
 800de32:	e7fe      	b.n	800de32 <vTaskSwitchContext+0x3e>
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	3b01      	subs	r3, #1
 800de38:	60fb      	str	r3, [r7, #12]
 800de3a:	491d      	ldr	r1, [pc, #116]	; (800deb0 <vTaskSwitchContext+0xbc>)
 800de3c:	68fa      	ldr	r2, [r7, #12]
 800de3e:	4613      	mov	r3, r2
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	4413      	add	r3, r2
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	440b      	add	r3, r1
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d0e4      	beq.n	800de18 <vTaskSwitchContext+0x24>
 800de4e:	68fa      	ldr	r2, [r7, #12]
 800de50:	4613      	mov	r3, r2
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	4413      	add	r3, r2
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	4a15      	ldr	r2, [pc, #84]	; (800deb0 <vTaskSwitchContext+0xbc>)
 800de5a:	4413      	add	r3, r2
 800de5c:	60bb      	str	r3, [r7, #8]
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	685a      	ldr	r2, [r3, #4]
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	605a      	str	r2, [r3, #4]
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	685a      	ldr	r2, [r3, #4]
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	3308      	adds	r3, #8
 800de70:	429a      	cmp	r2, r3
 800de72:	d104      	bne.n	800de7e <vTaskSwitchContext+0x8a>
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	685a      	ldr	r2, [r3, #4]
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	605a      	str	r2, [r3, #4]
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	4a0b      	ldr	r2, [pc, #44]	; (800deb4 <vTaskSwitchContext+0xc0>)
 800de86:	6013      	str	r3, [r2, #0]
 800de88:	4a08      	ldr	r2, [pc, #32]	; (800deac <vTaskSwitchContext+0xb8>)
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800de8e:	4b09      	ldr	r3, [pc, #36]	; (800deb4 <vTaskSwitchContext+0xc0>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	3354      	adds	r3, #84	; 0x54
 800de94:	4a08      	ldr	r2, [pc, #32]	; (800deb8 <vTaskSwitchContext+0xc4>)
 800de96:	6013      	str	r3, [r2, #0]
}
 800de98:	bf00      	nop
 800de9a:	3714      	adds	r7, #20
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr
 800dea4:	200051f4 	.word	0x200051f4
 800dea8:	200051e0 	.word	0x200051e0
 800deac:	200051d4 	.word	0x200051d4
 800deb0:	20004cfc 	.word	0x20004cfc
 800deb4:	20004cf8 	.word	0x20004cf8
 800deb8:	20000010 	.word	0x20000010

0800debc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d10a      	bne.n	800dee2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800decc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded0:	f383 8811 	msr	BASEPRI, r3
 800ded4:	f3bf 8f6f 	isb	sy
 800ded8:	f3bf 8f4f 	dsb	sy
 800dedc:	60fb      	str	r3, [r7, #12]
}
 800dede:	bf00      	nop
 800dee0:	e7fe      	b.n	800dee0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dee2:	4b07      	ldr	r3, [pc, #28]	; (800df00 <vTaskPlaceOnEventList+0x44>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	3318      	adds	r3, #24
 800dee8:	4619      	mov	r1, r3
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f7fe fc13 	bl	800c716 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800def0:	2101      	movs	r1, #1
 800def2:	6838      	ldr	r0, [r7, #0]
 800def4:	f000 fa80 	bl	800e3f8 <prvAddCurrentTaskToDelayedList>
}
 800def8:	bf00      	nop
 800defa:	3710      	adds	r7, #16
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}
 800df00:	20004cf8 	.word	0x20004cf8

0800df04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df04:	b580      	push	{r7, lr}
 800df06:	b086      	sub	sp, #24
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d10a      	bne.n	800df2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800df16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1a:	f383 8811 	msr	BASEPRI, r3
 800df1e:	f3bf 8f6f 	isb	sy
 800df22:	f3bf 8f4f 	dsb	sy
 800df26:	617b      	str	r3, [r7, #20]
}
 800df28:	bf00      	nop
 800df2a:	e7fe      	b.n	800df2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df2c:	4b0a      	ldr	r3, [pc, #40]	; (800df58 <vTaskPlaceOnEventListRestricted+0x54>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	3318      	adds	r3, #24
 800df32:	4619      	mov	r1, r3
 800df34:	68f8      	ldr	r0, [r7, #12]
 800df36:	f7fe fbca 	bl	800c6ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d002      	beq.n	800df46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800df40:	f04f 33ff 	mov.w	r3, #4294967295
 800df44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800df46:	6879      	ldr	r1, [r7, #4]
 800df48:	68b8      	ldr	r0, [r7, #8]
 800df4a:	f000 fa55 	bl	800e3f8 <prvAddCurrentTaskToDelayedList>
	}
 800df4e:	bf00      	nop
 800df50:	3718      	adds	r7, #24
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	20004cf8 	.word	0x20004cf8

0800df5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b086      	sub	sp, #24
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d10a      	bne.n	800df88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800df72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df76:	f383 8811 	msr	BASEPRI, r3
 800df7a:	f3bf 8f6f 	isb	sy
 800df7e:	f3bf 8f4f 	dsb	sy
 800df82:	60fb      	str	r3, [r7, #12]
}
 800df84:	bf00      	nop
 800df86:	e7fe      	b.n	800df86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	3318      	adds	r3, #24
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7fe fbfb 	bl	800c788 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df92:	4b1e      	ldr	r3, [pc, #120]	; (800e00c <xTaskRemoveFromEventList+0xb0>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d11d      	bne.n	800dfd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	3304      	adds	r3, #4
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fe fbf2 	bl	800c788 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfa8:	4b19      	ldr	r3, [pc, #100]	; (800e010 <xTaskRemoveFromEventList+0xb4>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d903      	bls.n	800dfb8 <xTaskRemoveFromEventList+0x5c>
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfb4:	4a16      	ldr	r2, [pc, #88]	; (800e010 <xTaskRemoveFromEventList+0xb4>)
 800dfb6:	6013      	str	r3, [r2, #0]
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfbc:	4613      	mov	r3, r2
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	4413      	add	r3, r2
 800dfc2:	009b      	lsls	r3, r3, #2
 800dfc4:	4a13      	ldr	r2, [pc, #76]	; (800e014 <xTaskRemoveFromEventList+0xb8>)
 800dfc6:	441a      	add	r2, r3
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	3304      	adds	r3, #4
 800dfcc:	4619      	mov	r1, r3
 800dfce:	4610      	mov	r0, r2
 800dfd0:	f7fe fb7d 	bl	800c6ce <vListInsertEnd>
 800dfd4:	e005      	b.n	800dfe2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	3318      	adds	r3, #24
 800dfda:	4619      	mov	r1, r3
 800dfdc:	480e      	ldr	r0, [pc, #56]	; (800e018 <xTaskRemoveFromEventList+0xbc>)
 800dfde:	f7fe fb76 	bl	800c6ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfe6:	4b0d      	ldr	r3, [pc, #52]	; (800e01c <xTaskRemoveFromEventList+0xc0>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d905      	bls.n	800dffc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dff0:	2301      	movs	r3, #1
 800dff2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dff4:	4b0a      	ldr	r3, [pc, #40]	; (800e020 <xTaskRemoveFromEventList+0xc4>)
 800dff6:	2201      	movs	r2, #1
 800dff8:	601a      	str	r2, [r3, #0]
 800dffa:	e001      	b.n	800e000 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dffc:	2300      	movs	r3, #0
 800dffe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e000:	697b      	ldr	r3, [r7, #20]
}
 800e002:	4618      	mov	r0, r3
 800e004:	3718      	adds	r7, #24
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
 800e00a:	bf00      	nop
 800e00c:	200051f4 	.word	0x200051f4
 800e010:	200051d4 	.word	0x200051d4
 800e014:	20004cfc 	.word	0x20004cfc
 800e018:	2000518c 	.word	0x2000518c
 800e01c:	20004cf8 	.word	0x20004cf8
 800e020:	200051e0 	.word	0x200051e0

0800e024 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e02c:	4b06      	ldr	r3, [pc, #24]	; (800e048 <vTaskInternalSetTimeOutState+0x24>)
 800e02e:	681a      	ldr	r2, [r3, #0]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e034:	4b05      	ldr	r3, [pc, #20]	; (800e04c <vTaskInternalSetTimeOutState+0x28>)
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	605a      	str	r2, [r3, #4]
}
 800e03c:	bf00      	nop
 800e03e:	370c      	adds	r7, #12
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr
 800e048:	200051e4 	.word	0x200051e4
 800e04c:	200051d0 	.word	0x200051d0

0800e050 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b088      	sub	sp, #32
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d10a      	bne.n	800e076 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e064:	f383 8811 	msr	BASEPRI, r3
 800e068:	f3bf 8f6f 	isb	sy
 800e06c:	f3bf 8f4f 	dsb	sy
 800e070:	613b      	str	r3, [r7, #16]
}
 800e072:	bf00      	nop
 800e074:	e7fe      	b.n	800e074 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10a      	bne.n	800e092 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e080:	f383 8811 	msr	BASEPRI, r3
 800e084:	f3bf 8f6f 	isb	sy
 800e088:	f3bf 8f4f 	dsb	sy
 800e08c:	60fb      	str	r3, [r7, #12]
}
 800e08e:	bf00      	nop
 800e090:	e7fe      	b.n	800e090 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e092:	f7fe fccf 	bl	800ca34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e096:	4b1d      	ldr	r3, [pc, #116]	; (800e10c <xTaskCheckForTimeOut+0xbc>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	69ba      	ldr	r2, [r7, #24]
 800e0a2:	1ad3      	subs	r3, r2, r3
 800e0a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ae:	d102      	bne.n	800e0b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	61fb      	str	r3, [r7, #28]
 800e0b4:	e023      	b.n	800e0fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	4b15      	ldr	r3, [pc, #84]	; (800e110 <xTaskCheckForTimeOut+0xc0>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d007      	beq.n	800e0d2 <xTaskCheckForTimeOut+0x82>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	69ba      	ldr	r2, [r7, #24]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d302      	bcc.n	800e0d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	61fb      	str	r3, [r7, #28]
 800e0d0:	e015      	b.n	800e0fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	697a      	ldr	r2, [r7, #20]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d20b      	bcs.n	800e0f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	681a      	ldr	r2, [r3, #0]
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	1ad2      	subs	r2, r2, r3
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f7ff ff9b 	bl	800e024 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	61fb      	str	r3, [r7, #28]
 800e0f2:	e004      	b.n	800e0fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e0fe:	f7fe fcc9 	bl	800ca94 <vPortExitCritical>

	return xReturn;
 800e102:	69fb      	ldr	r3, [r7, #28]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3720      	adds	r7, #32
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	200051d0 	.word	0x200051d0
 800e110:	200051e4 	.word	0x200051e4

0800e114 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e114:	b480      	push	{r7}
 800e116:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e118:	4b03      	ldr	r3, [pc, #12]	; (800e128 <vTaskMissedYield+0x14>)
 800e11a:	2201      	movs	r2, #1
 800e11c:	601a      	str	r2, [r3, #0]
}
 800e11e:	bf00      	nop
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr
 800e128:	200051e0 	.word	0x200051e0

0800e12c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b082      	sub	sp, #8
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e134:	f000 f852 	bl	800e1dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e138:	4b06      	ldr	r3, [pc, #24]	; (800e154 <prvIdleTask+0x28>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d9f9      	bls.n	800e134 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e140:	4b05      	ldr	r3, [pc, #20]	; (800e158 <prvIdleTask+0x2c>)
 800e142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e146:	601a      	str	r2, [r3, #0]
 800e148:	f3bf 8f4f 	dsb	sy
 800e14c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e150:	e7f0      	b.n	800e134 <prvIdleTask+0x8>
 800e152:	bf00      	nop
 800e154:	20004cfc 	.word	0x20004cfc
 800e158:	e000ed04 	.word	0xe000ed04

0800e15c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e162:	2300      	movs	r3, #0
 800e164:	607b      	str	r3, [r7, #4]
 800e166:	e00c      	b.n	800e182 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	4613      	mov	r3, r2
 800e16c:	009b      	lsls	r3, r3, #2
 800e16e:	4413      	add	r3, r2
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	4a12      	ldr	r2, [pc, #72]	; (800e1bc <prvInitialiseTaskLists+0x60>)
 800e174:	4413      	add	r3, r2
 800e176:	4618      	mov	r0, r3
 800e178:	f7fe fa7c 	bl	800c674 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	3301      	adds	r3, #1
 800e180:	607b      	str	r3, [r7, #4]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2b37      	cmp	r3, #55	; 0x37
 800e186:	d9ef      	bls.n	800e168 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e188:	480d      	ldr	r0, [pc, #52]	; (800e1c0 <prvInitialiseTaskLists+0x64>)
 800e18a:	f7fe fa73 	bl	800c674 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e18e:	480d      	ldr	r0, [pc, #52]	; (800e1c4 <prvInitialiseTaskLists+0x68>)
 800e190:	f7fe fa70 	bl	800c674 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e194:	480c      	ldr	r0, [pc, #48]	; (800e1c8 <prvInitialiseTaskLists+0x6c>)
 800e196:	f7fe fa6d 	bl	800c674 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e19a:	480c      	ldr	r0, [pc, #48]	; (800e1cc <prvInitialiseTaskLists+0x70>)
 800e19c:	f7fe fa6a 	bl	800c674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e1a0:	480b      	ldr	r0, [pc, #44]	; (800e1d0 <prvInitialiseTaskLists+0x74>)
 800e1a2:	f7fe fa67 	bl	800c674 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e1a6:	4b0b      	ldr	r3, [pc, #44]	; (800e1d4 <prvInitialiseTaskLists+0x78>)
 800e1a8:	4a05      	ldr	r2, [pc, #20]	; (800e1c0 <prvInitialiseTaskLists+0x64>)
 800e1aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e1ac:	4b0a      	ldr	r3, [pc, #40]	; (800e1d8 <prvInitialiseTaskLists+0x7c>)
 800e1ae:	4a05      	ldr	r2, [pc, #20]	; (800e1c4 <prvInitialiseTaskLists+0x68>)
 800e1b0:	601a      	str	r2, [r3, #0]
}
 800e1b2:	bf00      	nop
 800e1b4:	3708      	adds	r7, #8
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	20004cfc 	.word	0x20004cfc
 800e1c0:	2000515c 	.word	0x2000515c
 800e1c4:	20005170 	.word	0x20005170
 800e1c8:	2000518c 	.word	0x2000518c
 800e1cc:	200051a0 	.word	0x200051a0
 800e1d0:	200051b8 	.word	0x200051b8
 800e1d4:	20005184 	.word	0x20005184
 800e1d8:	20005188 	.word	0x20005188

0800e1dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e1e2:	e019      	b.n	800e218 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e1e4:	f7fe fc26 	bl	800ca34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1e8:	4b10      	ldr	r3, [pc, #64]	; (800e22c <prvCheckTasksWaitingTermination+0x50>)
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	68db      	ldr	r3, [r3, #12]
 800e1ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	3304      	adds	r3, #4
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7fe fac7 	bl	800c788 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e1fa:	4b0d      	ldr	r3, [pc, #52]	; (800e230 <prvCheckTasksWaitingTermination+0x54>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	3b01      	subs	r3, #1
 800e200:	4a0b      	ldr	r2, [pc, #44]	; (800e230 <prvCheckTasksWaitingTermination+0x54>)
 800e202:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e204:	4b0b      	ldr	r3, [pc, #44]	; (800e234 <prvCheckTasksWaitingTermination+0x58>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	3b01      	subs	r3, #1
 800e20a:	4a0a      	ldr	r2, [pc, #40]	; (800e234 <prvCheckTasksWaitingTermination+0x58>)
 800e20c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e20e:	f7fe fc41 	bl	800ca94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 f810 	bl	800e238 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e218:	4b06      	ldr	r3, [pc, #24]	; (800e234 <prvCheckTasksWaitingTermination+0x58>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d1e1      	bne.n	800e1e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e220:	bf00      	nop
 800e222:	bf00      	nop
 800e224:	3708      	adds	r7, #8
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	200051a0 	.word	0x200051a0
 800e230:	200051cc 	.word	0x200051cc
 800e234:	200051b4 	.word	0x200051b4

0800e238 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	3354      	adds	r3, #84	; 0x54
 800e244:	4618      	mov	r0, r3
 800e246:	f000 fd0d 	bl	800ec64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e250:	2b00      	cmp	r3, #0
 800e252:	d108      	bne.n	800e266 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e258:	4618      	mov	r0, r3
 800e25a:	f7fe f8ed 	bl	800c438 <vPortFree>
				vPortFree( pxTCB );
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f7fe f8ea 	bl	800c438 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e264:	e018      	b.n	800e298 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d103      	bne.n	800e278 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f7fe f8e1 	bl	800c438 <vPortFree>
	}
 800e276:	e00f      	b.n	800e298 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e27e:	2b02      	cmp	r3, #2
 800e280:	d00a      	beq.n	800e298 <prvDeleteTCB+0x60>
	__asm volatile
 800e282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e286:	f383 8811 	msr	BASEPRI, r3
 800e28a:	f3bf 8f6f 	isb	sy
 800e28e:	f3bf 8f4f 	dsb	sy
 800e292:	60fb      	str	r3, [r7, #12]
}
 800e294:	bf00      	nop
 800e296:	e7fe      	b.n	800e296 <prvDeleteTCB+0x5e>
	}
 800e298:	bf00      	nop
 800e29a:	3710      	adds	r7, #16
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b083      	sub	sp, #12
 800e2a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2a6:	4b0c      	ldr	r3, [pc, #48]	; (800e2d8 <prvResetNextTaskUnblockTime+0x38>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d104      	bne.n	800e2ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e2b0:	4b0a      	ldr	r3, [pc, #40]	; (800e2dc <prvResetNextTaskUnblockTime+0x3c>)
 800e2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e2b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e2b8:	e008      	b.n	800e2cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2ba:	4b07      	ldr	r3, [pc, #28]	; (800e2d8 <prvResetNextTaskUnblockTime+0x38>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	68db      	ldr	r3, [r3, #12]
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	4a04      	ldr	r2, [pc, #16]	; (800e2dc <prvResetNextTaskUnblockTime+0x3c>)
 800e2ca:	6013      	str	r3, [r2, #0]
}
 800e2cc:	bf00      	nop
 800e2ce:	370c      	adds	r7, #12
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr
 800e2d8:	20005184 	.word	0x20005184
 800e2dc:	200051ec 	.word	0x200051ec

0800e2e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e2e6:	4b0b      	ldr	r3, [pc, #44]	; (800e314 <xTaskGetSchedulerState+0x34>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d102      	bne.n	800e2f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	607b      	str	r3, [r7, #4]
 800e2f2:	e008      	b.n	800e306 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2f4:	4b08      	ldr	r3, [pc, #32]	; (800e318 <xTaskGetSchedulerState+0x38>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d102      	bne.n	800e302 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e2fc:	2302      	movs	r3, #2
 800e2fe:	607b      	str	r3, [r7, #4]
 800e300:	e001      	b.n	800e306 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e302:	2300      	movs	r3, #0
 800e304:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e306:	687b      	ldr	r3, [r7, #4]
	}
 800e308:	4618      	mov	r0, r3
 800e30a:	370c      	adds	r7, #12
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr
 800e314:	200051d8 	.word	0x200051d8
 800e318:	200051f4 	.word	0x200051f4

0800e31c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b086      	sub	sp, #24
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e328:	2300      	movs	r3, #0
 800e32a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d056      	beq.n	800e3e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e332:	4b2e      	ldr	r3, [pc, #184]	; (800e3ec <xTaskPriorityDisinherit+0xd0>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	693a      	ldr	r2, [r7, #16]
 800e338:	429a      	cmp	r2, r3
 800e33a:	d00a      	beq.n	800e352 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e340:	f383 8811 	msr	BASEPRI, r3
 800e344:	f3bf 8f6f 	isb	sy
 800e348:	f3bf 8f4f 	dsb	sy
 800e34c:	60fb      	str	r3, [r7, #12]
}
 800e34e:	bf00      	nop
 800e350:	e7fe      	b.n	800e350 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e356:	2b00      	cmp	r3, #0
 800e358:	d10a      	bne.n	800e370 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35e:	f383 8811 	msr	BASEPRI, r3
 800e362:	f3bf 8f6f 	isb	sy
 800e366:	f3bf 8f4f 	dsb	sy
 800e36a:	60bb      	str	r3, [r7, #8]
}
 800e36c:	bf00      	nop
 800e36e:	e7fe      	b.n	800e36e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e374:	1e5a      	subs	r2, r3, #1
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e382:	429a      	cmp	r2, r3
 800e384:	d02c      	beq.n	800e3e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d128      	bne.n	800e3e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	3304      	adds	r3, #4
 800e392:	4618      	mov	r0, r3
 800e394:	f7fe f9f8 	bl	800c788 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3b0:	4b0f      	ldr	r3, [pc, #60]	; (800e3f0 <xTaskPriorityDisinherit+0xd4>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d903      	bls.n	800e3c0 <xTaskPriorityDisinherit+0xa4>
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3bc:	4a0c      	ldr	r2, [pc, #48]	; (800e3f0 <xTaskPriorityDisinherit+0xd4>)
 800e3be:	6013      	str	r3, [r2, #0]
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3c4:	4613      	mov	r3, r2
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	4413      	add	r3, r2
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	4a09      	ldr	r2, [pc, #36]	; (800e3f4 <xTaskPriorityDisinherit+0xd8>)
 800e3ce:	441a      	add	r2, r3
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	3304      	adds	r3, #4
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	4610      	mov	r0, r2
 800e3d8:	f7fe f979 	bl	800c6ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e3dc:	2301      	movs	r3, #1
 800e3de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e3e0:	697b      	ldr	r3, [r7, #20]
	}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3718      	adds	r7, #24
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	20004cf8 	.word	0x20004cf8
 800e3f0:	200051d4 	.word	0x200051d4
 800e3f4:	20004cfc 	.word	0x20004cfc

0800e3f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
 800e400:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e402:	4b21      	ldr	r3, [pc, #132]	; (800e488 <prvAddCurrentTaskToDelayedList+0x90>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e408:	4b20      	ldr	r3, [pc, #128]	; (800e48c <prvAddCurrentTaskToDelayedList+0x94>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	3304      	adds	r3, #4
 800e40e:	4618      	mov	r0, r3
 800e410:	f7fe f9ba 	bl	800c788 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e41a:	d10a      	bne.n	800e432 <prvAddCurrentTaskToDelayedList+0x3a>
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d007      	beq.n	800e432 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e422:	4b1a      	ldr	r3, [pc, #104]	; (800e48c <prvAddCurrentTaskToDelayedList+0x94>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	3304      	adds	r3, #4
 800e428:	4619      	mov	r1, r3
 800e42a:	4819      	ldr	r0, [pc, #100]	; (800e490 <prvAddCurrentTaskToDelayedList+0x98>)
 800e42c:	f7fe f94f 	bl	800c6ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e430:	e026      	b.n	800e480 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e432:	68fa      	ldr	r2, [r7, #12]
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	4413      	add	r3, r2
 800e438:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e43a:	4b14      	ldr	r3, [pc, #80]	; (800e48c <prvAddCurrentTaskToDelayedList+0x94>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	68ba      	ldr	r2, [r7, #8]
 800e440:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e442:	68ba      	ldr	r2, [r7, #8]
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	429a      	cmp	r2, r3
 800e448:	d209      	bcs.n	800e45e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e44a:	4b12      	ldr	r3, [pc, #72]	; (800e494 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e44c:	681a      	ldr	r2, [r3, #0]
 800e44e:	4b0f      	ldr	r3, [pc, #60]	; (800e48c <prvAddCurrentTaskToDelayedList+0x94>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	3304      	adds	r3, #4
 800e454:	4619      	mov	r1, r3
 800e456:	4610      	mov	r0, r2
 800e458:	f7fe f95d 	bl	800c716 <vListInsert>
}
 800e45c:	e010      	b.n	800e480 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e45e:	4b0e      	ldr	r3, [pc, #56]	; (800e498 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	4b0a      	ldr	r3, [pc, #40]	; (800e48c <prvAddCurrentTaskToDelayedList+0x94>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	3304      	adds	r3, #4
 800e468:	4619      	mov	r1, r3
 800e46a:	4610      	mov	r0, r2
 800e46c:	f7fe f953 	bl	800c716 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e470:	4b0a      	ldr	r3, [pc, #40]	; (800e49c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	68ba      	ldr	r2, [r7, #8]
 800e476:	429a      	cmp	r2, r3
 800e478:	d202      	bcs.n	800e480 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e47a:	4a08      	ldr	r2, [pc, #32]	; (800e49c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	6013      	str	r3, [r2, #0]
}
 800e480:	bf00      	nop
 800e482:	3710      	adds	r7, #16
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	200051d0 	.word	0x200051d0
 800e48c:	20004cf8 	.word	0x20004cf8
 800e490:	200051b8 	.word	0x200051b8
 800e494:	20005188 	.word	0x20005188
 800e498:	20005184 	.word	0x20005184
 800e49c:	200051ec 	.word	0x200051ec

0800e4a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b08a      	sub	sp, #40	; 0x28
 800e4a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e4aa:	f000 fb07 	bl	800eabc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e4ae:	4b1c      	ldr	r3, [pc, #112]	; (800e520 <xTimerCreateTimerTask+0x80>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d021      	beq.n	800e4fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e4be:	1d3a      	adds	r2, r7, #4
 800e4c0:	f107 0108 	add.w	r1, r7, #8
 800e4c4:	f107 030c 	add.w	r3, r7, #12
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7fd fecf 	bl	800c26c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e4ce:	6879      	ldr	r1, [r7, #4]
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	68fa      	ldr	r2, [r7, #12]
 800e4d4:	9202      	str	r2, [sp, #8]
 800e4d6:	9301      	str	r3, [sp, #4]
 800e4d8:	2302      	movs	r3, #2
 800e4da:	9300      	str	r3, [sp, #0]
 800e4dc:	2300      	movs	r3, #0
 800e4de:	460a      	mov	r2, r1
 800e4e0:	4910      	ldr	r1, [pc, #64]	; (800e524 <xTimerCreateTimerTask+0x84>)
 800e4e2:	4811      	ldr	r0, [pc, #68]	; (800e528 <xTimerCreateTimerTask+0x88>)
 800e4e4:	f7ff f8b4 	bl	800d650 <xTaskCreateStatic>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	4a10      	ldr	r2, [pc, #64]	; (800e52c <xTimerCreateTimerTask+0x8c>)
 800e4ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e4ee:	4b0f      	ldr	r3, [pc, #60]	; (800e52c <xTimerCreateTimerTask+0x8c>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d001      	beq.n	800e4fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d10a      	bne.n	800e516 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e504:	f383 8811 	msr	BASEPRI, r3
 800e508:	f3bf 8f6f 	isb	sy
 800e50c:	f3bf 8f4f 	dsb	sy
 800e510:	613b      	str	r3, [r7, #16]
}
 800e512:	bf00      	nop
 800e514:	e7fe      	b.n	800e514 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e516:	697b      	ldr	r3, [r7, #20]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3718      	adds	r7, #24
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	20005228 	.word	0x20005228
 800e524:	0800f44c 	.word	0x0800f44c
 800e528:	0800e665 	.word	0x0800e665
 800e52c:	2000522c 	.word	0x2000522c

0800e530 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b08a      	sub	sp, #40	; 0x28
 800e534:	af00      	add	r7, sp, #0
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	607a      	str	r2, [r7, #4]
 800e53c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e53e:	2300      	movs	r3, #0
 800e540:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d10a      	bne.n	800e55e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54c:	f383 8811 	msr	BASEPRI, r3
 800e550:	f3bf 8f6f 	isb	sy
 800e554:	f3bf 8f4f 	dsb	sy
 800e558:	623b      	str	r3, [r7, #32]
}
 800e55a:	bf00      	nop
 800e55c:	e7fe      	b.n	800e55c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e55e:	4b1a      	ldr	r3, [pc, #104]	; (800e5c8 <xTimerGenericCommand+0x98>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d02a      	beq.n	800e5bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	2b05      	cmp	r3, #5
 800e576:	dc18      	bgt.n	800e5aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e578:	f7ff feb2 	bl	800e2e0 <xTaskGetSchedulerState>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b02      	cmp	r3, #2
 800e580:	d109      	bne.n	800e596 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e582:	4b11      	ldr	r3, [pc, #68]	; (800e5c8 <xTimerGenericCommand+0x98>)
 800e584:	6818      	ldr	r0, [r3, #0]
 800e586:	f107 0110 	add.w	r1, r7, #16
 800e58a:	2300      	movs	r3, #0
 800e58c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e58e:	f7fe fc77 	bl	800ce80 <xQueueGenericSend>
 800e592:	6278      	str	r0, [r7, #36]	; 0x24
 800e594:	e012      	b.n	800e5bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e596:	4b0c      	ldr	r3, [pc, #48]	; (800e5c8 <xTimerGenericCommand+0x98>)
 800e598:	6818      	ldr	r0, [r3, #0]
 800e59a:	f107 0110 	add.w	r1, r7, #16
 800e59e:	2300      	movs	r3, #0
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f7fe fc6d 	bl	800ce80 <xQueueGenericSend>
 800e5a6:	6278      	str	r0, [r7, #36]	; 0x24
 800e5a8:	e008      	b.n	800e5bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e5aa:	4b07      	ldr	r3, [pc, #28]	; (800e5c8 <xTimerGenericCommand+0x98>)
 800e5ac:	6818      	ldr	r0, [r3, #0]
 800e5ae:	f107 0110 	add.w	r1, r7, #16
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	683a      	ldr	r2, [r7, #0]
 800e5b6:	f7fe fd61 	bl	800d07c <xQueueGenericSendFromISR>
 800e5ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3728      	adds	r7, #40	; 0x28
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	20005228 	.word	0x20005228

0800e5cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b088      	sub	sp, #32
 800e5d0:	af02      	add	r7, sp, #8
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5d6:	4b22      	ldr	r3, [pc, #136]	; (800e660 <prvProcessExpiredTimer+0x94>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	68db      	ldr	r3, [r3, #12]
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	3304      	adds	r3, #4
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7fe f8cf 	bl	800c788 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5f0:	f003 0304 	and.w	r3, r3, #4
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d022      	beq.n	800e63e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	699a      	ldr	r2, [r3, #24]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	18d1      	adds	r1, r2, r3
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	683a      	ldr	r2, [r7, #0]
 800e604:	6978      	ldr	r0, [r7, #20]
 800e606:	f000 f8d1 	bl	800e7ac <prvInsertTimerInActiveList>
 800e60a:	4603      	mov	r3, r0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d01f      	beq.n	800e650 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e610:	2300      	movs	r3, #0
 800e612:	9300      	str	r3, [sp, #0]
 800e614:	2300      	movs	r3, #0
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	2100      	movs	r1, #0
 800e61a:	6978      	ldr	r0, [r7, #20]
 800e61c:	f7ff ff88 	bl	800e530 <xTimerGenericCommand>
 800e620:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d113      	bne.n	800e650 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62c:	f383 8811 	msr	BASEPRI, r3
 800e630:	f3bf 8f6f 	isb	sy
 800e634:	f3bf 8f4f 	dsb	sy
 800e638:	60fb      	str	r3, [r7, #12]
}
 800e63a:	bf00      	nop
 800e63c:	e7fe      	b.n	800e63c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e644:	f023 0301 	bic.w	r3, r3, #1
 800e648:	b2da      	uxtb	r2, r3
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	6a1b      	ldr	r3, [r3, #32]
 800e654:	6978      	ldr	r0, [r7, #20]
 800e656:	4798      	blx	r3
}
 800e658:	bf00      	nop
 800e65a:	3718      	adds	r7, #24
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	20005220 	.word	0x20005220

0800e664 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b084      	sub	sp, #16
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e66c:	f107 0308 	add.w	r3, r7, #8
 800e670:	4618      	mov	r0, r3
 800e672:	f000 f857 	bl	800e724 <prvGetNextExpireTime>
 800e676:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	4619      	mov	r1, r3
 800e67c:	68f8      	ldr	r0, [r7, #12]
 800e67e:	f000 f803 	bl	800e688 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e682:	f000 f8d5 	bl	800e830 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e686:	e7f1      	b.n	800e66c <prvTimerTask+0x8>

0800e688 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e692:	f7ff fa39 	bl	800db08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e696:	f107 0308 	add.w	r3, r7, #8
 800e69a:	4618      	mov	r0, r3
 800e69c:	f000 f866 	bl	800e76c <prvSampleTimeNow>
 800e6a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d130      	bne.n	800e70a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d10a      	bne.n	800e6c4 <prvProcessTimerOrBlockTask+0x3c>
 800e6ae:	687a      	ldr	r2, [r7, #4]
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d806      	bhi.n	800e6c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e6b6:	f7ff fa35 	bl	800db24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e6ba:	68f9      	ldr	r1, [r7, #12]
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f7ff ff85 	bl	800e5cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e6c2:	e024      	b.n	800e70e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d008      	beq.n	800e6dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e6ca:	4b13      	ldr	r3, [pc, #76]	; (800e718 <prvProcessTimerOrBlockTask+0x90>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d101      	bne.n	800e6d8 <prvProcessTimerOrBlockTask+0x50>
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	e000      	b.n	800e6da <prvProcessTimerOrBlockTask+0x52>
 800e6d8:	2300      	movs	r3, #0
 800e6da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e6dc:	4b0f      	ldr	r3, [pc, #60]	; (800e71c <prvProcessTimerOrBlockTask+0x94>)
 800e6de:	6818      	ldr	r0, [r3, #0]
 800e6e0:	687a      	ldr	r2, [r7, #4]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	1ad3      	subs	r3, r2, r3
 800e6e6:	683a      	ldr	r2, [r7, #0]
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	f7fe ff7d 	bl	800d5e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e6ee:	f7ff fa19 	bl	800db24 <xTaskResumeAll>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d10a      	bne.n	800e70e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e6f8:	4b09      	ldr	r3, [pc, #36]	; (800e720 <prvProcessTimerOrBlockTask+0x98>)
 800e6fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6fe:	601a      	str	r2, [r3, #0]
 800e700:	f3bf 8f4f 	dsb	sy
 800e704:	f3bf 8f6f 	isb	sy
}
 800e708:	e001      	b.n	800e70e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e70a:	f7ff fa0b 	bl	800db24 <xTaskResumeAll>
}
 800e70e:	bf00      	nop
 800e710:	3710      	adds	r7, #16
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	20005224 	.word	0x20005224
 800e71c:	20005228 	.word	0x20005228
 800e720:	e000ed04 	.word	0xe000ed04

0800e724 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e724:	b480      	push	{r7}
 800e726:	b085      	sub	sp, #20
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e72c:	4b0e      	ldr	r3, [pc, #56]	; (800e768 <prvGetNextExpireTime+0x44>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d101      	bne.n	800e73a <prvGetNextExpireTime+0x16>
 800e736:	2201      	movs	r2, #1
 800e738:	e000      	b.n	800e73c <prvGetNextExpireTime+0x18>
 800e73a:	2200      	movs	r2, #0
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d105      	bne.n	800e754 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e748:	4b07      	ldr	r3, [pc, #28]	; (800e768 <prvGetNextExpireTime+0x44>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	68db      	ldr	r3, [r3, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	60fb      	str	r3, [r7, #12]
 800e752:	e001      	b.n	800e758 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e754:	2300      	movs	r3, #0
 800e756:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e758:	68fb      	ldr	r3, [r7, #12]
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3714      	adds	r7, #20
 800e75e:	46bd      	mov	sp, r7
 800e760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e764:	4770      	bx	lr
 800e766:	bf00      	nop
 800e768:	20005220 	.word	0x20005220

0800e76c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e774:	f7ff fa74 	bl	800dc60 <xTaskGetTickCount>
 800e778:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e77a:	4b0b      	ldr	r3, [pc, #44]	; (800e7a8 <prvSampleTimeNow+0x3c>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	68fa      	ldr	r2, [r7, #12]
 800e780:	429a      	cmp	r2, r3
 800e782:	d205      	bcs.n	800e790 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e784:	f000 f936 	bl	800e9f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2201      	movs	r2, #1
 800e78c:	601a      	str	r2, [r3, #0]
 800e78e:	e002      	b.n	800e796 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2200      	movs	r2, #0
 800e794:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e796:	4a04      	ldr	r2, [pc, #16]	; (800e7a8 <prvSampleTimeNow+0x3c>)
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e79c:	68fb      	ldr	r3, [r7, #12]
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3710      	adds	r7, #16
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	20005230 	.word	0x20005230

0800e7ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b086      	sub	sp, #24
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	60b9      	str	r1, [r7, #8]
 800e7b6:	607a      	str	r2, [r7, #4]
 800e7b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	68ba      	ldr	r2, [r7, #8]
 800e7c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	68fa      	ldr	r2, [r7, #12]
 800e7c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e7ca:	68ba      	ldr	r2, [r7, #8]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d812      	bhi.n	800e7f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7d2:	687a      	ldr	r2, [r7, #4]
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	1ad2      	subs	r2, r2, r3
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	699b      	ldr	r3, [r3, #24]
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d302      	bcc.n	800e7e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	617b      	str	r3, [r7, #20]
 800e7e4:	e01b      	b.n	800e81e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e7e6:	4b10      	ldr	r3, [pc, #64]	; (800e828 <prvInsertTimerInActiveList+0x7c>)
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	3304      	adds	r3, #4
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	4610      	mov	r0, r2
 800e7f2:	f7fd ff90 	bl	800c716 <vListInsert>
 800e7f6:	e012      	b.n	800e81e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e7f8:	687a      	ldr	r2, [r7, #4]
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d206      	bcs.n	800e80e <prvInsertTimerInActiveList+0x62>
 800e800:	68ba      	ldr	r2, [r7, #8]
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	429a      	cmp	r2, r3
 800e806:	d302      	bcc.n	800e80e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e808:	2301      	movs	r3, #1
 800e80a:	617b      	str	r3, [r7, #20]
 800e80c:	e007      	b.n	800e81e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e80e:	4b07      	ldr	r3, [pc, #28]	; (800e82c <prvInsertTimerInActiveList+0x80>)
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	3304      	adds	r3, #4
 800e816:	4619      	mov	r1, r3
 800e818:	4610      	mov	r0, r2
 800e81a:	f7fd ff7c 	bl	800c716 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e81e:	697b      	ldr	r3, [r7, #20]
}
 800e820:	4618      	mov	r0, r3
 800e822:	3718      	adds	r7, #24
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	20005224 	.word	0x20005224
 800e82c:	20005220 	.word	0x20005220

0800e830 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b08e      	sub	sp, #56	; 0x38
 800e834:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e836:	e0ca      	b.n	800e9ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	da18      	bge.n	800e870 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e83e:	1d3b      	adds	r3, r7, #4
 800e840:	3304      	adds	r3, #4
 800e842:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e846:	2b00      	cmp	r3, #0
 800e848:	d10a      	bne.n	800e860 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84e:	f383 8811 	msr	BASEPRI, r3
 800e852:	f3bf 8f6f 	isb	sy
 800e856:	f3bf 8f4f 	dsb	sy
 800e85a:	61fb      	str	r3, [r7, #28]
}
 800e85c:	bf00      	nop
 800e85e:	e7fe      	b.n	800e85e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e866:	6850      	ldr	r0, [r2, #4]
 800e868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e86a:	6892      	ldr	r2, [r2, #8]
 800e86c:	4611      	mov	r1, r2
 800e86e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2b00      	cmp	r3, #0
 800e874:	f2c0 80aa 	blt.w	800e9cc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87e:	695b      	ldr	r3, [r3, #20]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d004      	beq.n	800e88e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e886:	3304      	adds	r3, #4
 800e888:	4618      	mov	r0, r3
 800e88a:	f7fd ff7d 	bl	800c788 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e88e:	463b      	mov	r3, r7
 800e890:	4618      	mov	r0, r3
 800e892:	f7ff ff6b 	bl	800e76c <prvSampleTimeNow>
 800e896:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2b09      	cmp	r3, #9
 800e89c:	f200 8097 	bhi.w	800e9ce <prvProcessReceivedCommands+0x19e>
 800e8a0:	a201      	add	r2, pc, #4	; (adr r2, 800e8a8 <prvProcessReceivedCommands+0x78>)
 800e8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a6:	bf00      	nop
 800e8a8:	0800e8d1 	.word	0x0800e8d1
 800e8ac:	0800e8d1 	.word	0x0800e8d1
 800e8b0:	0800e8d1 	.word	0x0800e8d1
 800e8b4:	0800e945 	.word	0x0800e945
 800e8b8:	0800e959 	.word	0x0800e959
 800e8bc:	0800e9a3 	.word	0x0800e9a3
 800e8c0:	0800e8d1 	.word	0x0800e8d1
 800e8c4:	0800e8d1 	.word	0x0800e8d1
 800e8c8:	0800e945 	.word	0x0800e945
 800e8cc:	0800e959 	.word	0x0800e959
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8d6:	f043 0301 	orr.w	r3, r3, #1
 800e8da:	b2da      	uxtb	r2, r3
 800e8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e8e2:	68ba      	ldr	r2, [r7, #8]
 800e8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e6:	699b      	ldr	r3, [r3, #24]
 800e8e8:	18d1      	adds	r1, r2, r3
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8f0:	f7ff ff5c 	bl	800e7ac <prvInsertTimerInActiveList>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d069      	beq.n	800e9ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fc:	6a1b      	ldr	r3, [r3, #32]
 800e8fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e900:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e908:	f003 0304 	and.w	r3, r3, #4
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d05e      	beq.n	800e9ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e910:	68ba      	ldr	r2, [r7, #8]
 800e912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e914:	699b      	ldr	r3, [r3, #24]
 800e916:	441a      	add	r2, r3
 800e918:	2300      	movs	r3, #0
 800e91a:	9300      	str	r3, [sp, #0]
 800e91c:	2300      	movs	r3, #0
 800e91e:	2100      	movs	r1, #0
 800e920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e922:	f7ff fe05 	bl	800e530 <xTimerGenericCommand>
 800e926:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e928:	6a3b      	ldr	r3, [r7, #32]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d14f      	bne.n	800e9ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e932:	f383 8811 	msr	BASEPRI, r3
 800e936:	f3bf 8f6f 	isb	sy
 800e93a:	f3bf 8f4f 	dsb	sy
 800e93e:	61bb      	str	r3, [r7, #24]
}
 800e940:	bf00      	nop
 800e942:	e7fe      	b.n	800e942 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e94a:	f023 0301 	bic.w	r3, r3, #1
 800e94e:	b2da      	uxtb	r2, r3
 800e950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e956:	e03a      	b.n	800e9ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e95e:	f043 0301 	orr.w	r3, r3, #1
 800e962:	b2da      	uxtb	r2, r3
 800e964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e96a:	68ba      	ldr	r2, [r7, #8]
 800e96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e972:	699b      	ldr	r3, [r3, #24]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d10a      	bne.n	800e98e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97c:	f383 8811 	msr	BASEPRI, r3
 800e980:	f3bf 8f6f 	isb	sy
 800e984:	f3bf 8f4f 	dsb	sy
 800e988:	617b      	str	r3, [r7, #20]
}
 800e98a:	bf00      	nop
 800e98c:	e7fe      	b.n	800e98c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e990:	699a      	ldr	r2, [r3, #24]
 800e992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e994:	18d1      	adds	r1, r2, r3
 800e996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e99a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e99c:	f7ff ff06 	bl	800e7ac <prvInsertTimerInActiveList>
					break;
 800e9a0:	e015      	b.n	800e9ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9a8:	f003 0302 	and.w	r3, r3, #2
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d103      	bne.n	800e9b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e9b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9b2:	f7fd fd41 	bl	800c438 <vPortFree>
 800e9b6:	e00a      	b.n	800e9ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9be:	f023 0301 	bic.w	r3, r3, #1
 800e9c2:	b2da      	uxtb	r2, r3
 800e9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e9ca:	e000      	b.n	800e9ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e9cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e9ce:	4b08      	ldr	r3, [pc, #32]	; (800e9f0 <prvProcessReceivedCommands+0x1c0>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	1d39      	adds	r1, r7, #4
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7fe fbec 	bl	800d1b4 <xQueueReceive>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	f47f af2a 	bne.w	800e838 <prvProcessReceivedCommands+0x8>
	}
}
 800e9e4:	bf00      	nop
 800e9e6:	bf00      	nop
 800e9e8:	3730      	adds	r7, #48	; 0x30
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	20005228 	.word	0x20005228

0800e9f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b088      	sub	sp, #32
 800e9f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e9fa:	e048      	b.n	800ea8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e9fc:	4b2d      	ldr	r3, [pc, #180]	; (800eab4 <prvSwitchTimerLists+0xc0>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	68db      	ldr	r3, [r3, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea06:	4b2b      	ldr	r3, [pc, #172]	; (800eab4 <prvSwitchTimerLists+0xc0>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	68db      	ldr	r3, [r3, #12]
 800ea0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	3304      	adds	r3, #4
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7fd feb7 	bl	800c788 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	6a1b      	ldr	r3, [r3, #32]
 800ea1e:	68f8      	ldr	r0, [r7, #12]
 800ea20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea28:	f003 0304 	and.w	r3, r3, #4
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d02e      	beq.n	800ea8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	699b      	ldr	r3, [r3, #24]
 800ea34:	693a      	ldr	r2, [r7, #16]
 800ea36:	4413      	add	r3, r2
 800ea38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ea3a:	68ba      	ldr	r2, [r7, #8]
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d90e      	bls.n	800ea60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	68ba      	ldr	r2, [r7, #8]
 800ea46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	68fa      	ldr	r2, [r7, #12]
 800ea4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ea4e:	4b19      	ldr	r3, [pc, #100]	; (800eab4 <prvSwitchTimerLists+0xc0>)
 800ea50:	681a      	ldr	r2, [r3, #0]
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	3304      	adds	r3, #4
 800ea56:	4619      	mov	r1, r3
 800ea58:	4610      	mov	r0, r2
 800ea5a:	f7fd fe5c 	bl	800c716 <vListInsert>
 800ea5e:	e016      	b.n	800ea8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ea60:	2300      	movs	r3, #0
 800ea62:	9300      	str	r3, [sp, #0]
 800ea64:	2300      	movs	r3, #0
 800ea66:	693a      	ldr	r2, [r7, #16]
 800ea68:	2100      	movs	r1, #0
 800ea6a:	68f8      	ldr	r0, [r7, #12]
 800ea6c:	f7ff fd60 	bl	800e530 <xTimerGenericCommand>
 800ea70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d10a      	bne.n	800ea8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ea78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea7c:	f383 8811 	msr	BASEPRI, r3
 800ea80:	f3bf 8f6f 	isb	sy
 800ea84:	f3bf 8f4f 	dsb	sy
 800ea88:	603b      	str	r3, [r7, #0]
}
 800ea8a:	bf00      	nop
 800ea8c:	e7fe      	b.n	800ea8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ea8e:	4b09      	ldr	r3, [pc, #36]	; (800eab4 <prvSwitchTimerLists+0xc0>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d1b1      	bne.n	800e9fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ea98:	4b06      	ldr	r3, [pc, #24]	; (800eab4 <prvSwitchTimerLists+0xc0>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ea9e:	4b06      	ldr	r3, [pc, #24]	; (800eab8 <prvSwitchTimerLists+0xc4>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	4a04      	ldr	r2, [pc, #16]	; (800eab4 <prvSwitchTimerLists+0xc0>)
 800eaa4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eaa6:	4a04      	ldr	r2, [pc, #16]	; (800eab8 <prvSwitchTimerLists+0xc4>)
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	6013      	str	r3, [r2, #0]
}
 800eaac:	bf00      	nop
 800eaae:	3718      	adds	r7, #24
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	20005220 	.word	0x20005220
 800eab8:	20005224 	.word	0x20005224

0800eabc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eac2:	f7fd ffb7 	bl	800ca34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eac6:	4b15      	ldr	r3, [pc, #84]	; (800eb1c <prvCheckForValidListAndQueue+0x60>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d120      	bne.n	800eb10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eace:	4814      	ldr	r0, [pc, #80]	; (800eb20 <prvCheckForValidListAndQueue+0x64>)
 800ead0:	f7fd fdd0 	bl	800c674 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ead4:	4813      	ldr	r0, [pc, #76]	; (800eb24 <prvCheckForValidListAndQueue+0x68>)
 800ead6:	f7fd fdcd 	bl	800c674 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eada:	4b13      	ldr	r3, [pc, #76]	; (800eb28 <prvCheckForValidListAndQueue+0x6c>)
 800eadc:	4a10      	ldr	r2, [pc, #64]	; (800eb20 <prvCheckForValidListAndQueue+0x64>)
 800eade:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eae0:	4b12      	ldr	r3, [pc, #72]	; (800eb2c <prvCheckForValidListAndQueue+0x70>)
 800eae2:	4a10      	ldr	r2, [pc, #64]	; (800eb24 <prvCheckForValidListAndQueue+0x68>)
 800eae4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eae6:	2300      	movs	r3, #0
 800eae8:	9300      	str	r3, [sp, #0]
 800eaea:	4b11      	ldr	r3, [pc, #68]	; (800eb30 <prvCheckForValidListAndQueue+0x74>)
 800eaec:	4a11      	ldr	r2, [pc, #68]	; (800eb34 <prvCheckForValidListAndQueue+0x78>)
 800eaee:	2110      	movs	r1, #16
 800eaf0:	200a      	movs	r0, #10
 800eaf2:	f7fe f929 	bl	800cd48 <xQueueGenericCreateStatic>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	4a08      	ldr	r2, [pc, #32]	; (800eb1c <prvCheckForValidListAndQueue+0x60>)
 800eafa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eafc:	4b07      	ldr	r3, [pc, #28]	; (800eb1c <prvCheckForValidListAndQueue+0x60>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d005      	beq.n	800eb10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eb04:	4b05      	ldr	r3, [pc, #20]	; (800eb1c <prvCheckForValidListAndQueue+0x60>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	490b      	ldr	r1, [pc, #44]	; (800eb38 <prvCheckForValidListAndQueue+0x7c>)
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7fe fd42 	bl	800d594 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eb10:	f7fd ffc0 	bl	800ca94 <vPortExitCritical>
}
 800eb14:	bf00      	nop
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
 800eb1a:	bf00      	nop
 800eb1c:	20005228 	.word	0x20005228
 800eb20:	200051f8 	.word	0x200051f8
 800eb24:	2000520c 	.word	0x2000520c
 800eb28:	20005220 	.word	0x20005220
 800eb2c:	20005224 	.word	0x20005224
 800eb30:	200052d4 	.word	0x200052d4
 800eb34:	20005234 	.word	0x20005234
 800eb38:	0800f454 	.word	0x0800f454

0800eb3c <__libc_init_array>:
 800eb3c:	b570      	push	{r4, r5, r6, lr}
 800eb3e:	4d0d      	ldr	r5, [pc, #52]	; (800eb74 <__libc_init_array+0x38>)
 800eb40:	4c0d      	ldr	r4, [pc, #52]	; (800eb78 <__libc_init_array+0x3c>)
 800eb42:	1b64      	subs	r4, r4, r5
 800eb44:	10a4      	asrs	r4, r4, #2
 800eb46:	2600      	movs	r6, #0
 800eb48:	42a6      	cmp	r6, r4
 800eb4a:	d109      	bne.n	800eb60 <__libc_init_array+0x24>
 800eb4c:	4d0b      	ldr	r5, [pc, #44]	; (800eb7c <__libc_init_array+0x40>)
 800eb4e:	4c0c      	ldr	r4, [pc, #48]	; (800eb80 <__libc_init_array+0x44>)
 800eb50:	f000 f8f0 	bl	800ed34 <_init>
 800eb54:	1b64      	subs	r4, r4, r5
 800eb56:	10a4      	asrs	r4, r4, #2
 800eb58:	2600      	movs	r6, #0
 800eb5a:	42a6      	cmp	r6, r4
 800eb5c:	d105      	bne.n	800eb6a <__libc_init_array+0x2e>
 800eb5e:	bd70      	pop	{r4, r5, r6, pc}
 800eb60:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb64:	4798      	blx	r3
 800eb66:	3601      	adds	r6, #1
 800eb68:	e7ee      	b.n	800eb48 <__libc_init_array+0xc>
 800eb6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb6e:	4798      	blx	r3
 800eb70:	3601      	adds	r6, #1
 800eb72:	e7f2      	b.n	800eb5a <__libc_init_array+0x1e>
 800eb74:	0800f52c 	.word	0x0800f52c
 800eb78:	0800f52c 	.word	0x0800f52c
 800eb7c:	0800f52c 	.word	0x0800f52c
 800eb80:	0800f530 	.word	0x0800f530

0800eb84 <memcpy>:
 800eb84:	440a      	add	r2, r1
 800eb86:	4291      	cmp	r1, r2
 800eb88:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb8c:	d100      	bne.n	800eb90 <memcpy+0xc>
 800eb8e:	4770      	bx	lr
 800eb90:	b510      	push	{r4, lr}
 800eb92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb9a:	4291      	cmp	r1, r2
 800eb9c:	d1f9      	bne.n	800eb92 <memcpy+0xe>
 800eb9e:	bd10      	pop	{r4, pc}

0800eba0 <memset>:
 800eba0:	4402      	add	r2, r0
 800eba2:	4603      	mov	r3, r0
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d100      	bne.n	800ebaa <memset+0xa>
 800eba8:	4770      	bx	lr
 800ebaa:	f803 1b01 	strb.w	r1, [r3], #1
 800ebae:	e7f9      	b.n	800eba4 <memset+0x4>

0800ebb0 <_free_r>:
 800ebb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebb2:	2900      	cmp	r1, #0
 800ebb4:	d044      	beq.n	800ec40 <_free_r+0x90>
 800ebb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebba:	9001      	str	r0, [sp, #4]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	f1a1 0404 	sub.w	r4, r1, #4
 800ebc2:	bfb8      	it	lt
 800ebc4:	18e4      	addlt	r4, r4, r3
 800ebc6:	f000 f8a9 	bl	800ed1c <__malloc_lock>
 800ebca:	4a1e      	ldr	r2, [pc, #120]	; (800ec44 <_free_r+0x94>)
 800ebcc:	9801      	ldr	r0, [sp, #4]
 800ebce:	6813      	ldr	r3, [r2, #0]
 800ebd0:	b933      	cbnz	r3, 800ebe0 <_free_r+0x30>
 800ebd2:	6063      	str	r3, [r4, #4]
 800ebd4:	6014      	str	r4, [r2, #0]
 800ebd6:	b003      	add	sp, #12
 800ebd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebdc:	f000 b8a4 	b.w	800ed28 <__malloc_unlock>
 800ebe0:	42a3      	cmp	r3, r4
 800ebe2:	d908      	bls.n	800ebf6 <_free_r+0x46>
 800ebe4:	6825      	ldr	r5, [r4, #0]
 800ebe6:	1961      	adds	r1, r4, r5
 800ebe8:	428b      	cmp	r3, r1
 800ebea:	bf01      	itttt	eq
 800ebec:	6819      	ldreq	r1, [r3, #0]
 800ebee:	685b      	ldreq	r3, [r3, #4]
 800ebf0:	1949      	addeq	r1, r1, r5
 800ebf2:	6021      	streq	r1, [r4, #0]
 800ebf4:	e7ed      	b.n	800ebd2 <_free_r+0x22>
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	685b      	ldr	r3, [r3, #4]
 800ebfa:	b10b      	cbz	r3, 800ec00 <_free_r+0x50>
 800ebfc:	42a3      	cmp	r3, r4
 800ebfe:	d9fa      	bls.n	800ebf6 <_free_r+0x46>
 800ec00:	6811      	ldr	r1, [r2, #0]
 800ec02:	1855      	adds	r5, r2, r1
 800ec04:	42a5      	cmp	r5, r4
 800ec06:	d10b      	bne.n	800ec20 <_free_r+0x70>
 800ec08:	6824      	ldr	r4, [r4, #0]
 800ec0a:	4421      	add	r1, r4
 800ec0c:	1854      	adds	r4, r2, r1
 800ec0e:	42a3      	cmp	r3, r4
 800ec10:	6011      	str	r1, [r2, #0]
 800ec12:	d1e0      	bne.n	800ebd6 <_free_r+0x26>
 800ec14:	681c      	ldr	r4, [r3, #0]
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	6053      	str	r3, [r2, #4]
 800ec1a:	4421      	add	r1, r4
 800ec1c:	6011      	str	r1, [r2, #0]
 800ec1e:	e7da      	b.n	800ebd6 <_free_r+0x26>
 800ec20:	d902      	bls.n	800ec28 <_free_r+0x78>
 800ec22:	230c      	movs	r3, #12
 800ec24:	6003      	str	r3, [r0, #0]
 800ec26:	e7d6      	b.n	800ebd6 <_free_r+0x26>
 800ec28:	6825      	ldr	r5, [r4, #0]
 800ec2a:	1961      	adds	r1, r4, r5
 800ec2c:	428b      	cmp	r3, r1
 800ec2e:	bf04      	itt	eq
 800ec30:	6819      	ldreq	r1, [r3, #0]
 800ec32:	685b      	ldreq	r3, [r3, #4]
 800ec34:	6063      	str	r3, [r4, #4]
 800ec36:	bf04      	itt	eq
 800ec38:	1949      	addeq	r1, r1, r5
 800ec3a:	6021      	streq	r1, [r4, #0]
 800ec3c:	6054      	str	r4, [r2, #4]
 800ec3e:	e7ca      	b.n	800ebd6 <_free_r+0x26>
 800ec40:	b003      	add	sp, #12
 800ec42:	bd30      	pop	{r4, r5, pc}
 800ec44:	20005324 	.word	0x20005324

0800ec48 <cleanup_glue>:
 800ec48:	b538      	push	{r3, r4, r5, lr}
 800ec4a:	460c      	mov	r4, r1
 800ec4c:	6809      	ldr	r1, [r1, #0]
 800ec4e:	4605      	mov	r5, r0
 800ec50:	b109      	cbz	r1, 800ec56 <cleanup_glue+0xe>
 800ec52:	f7ff fff9 	bl	800ec48 <cleanup_glue>
 800ec56:	4621      	mov	r1, r4
 800ec58:	4628      	mov	r0, r5
 800ec5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec5e:	f7ff bfa7 	b.w	800ebb0 <_free_r>
	...

0800ec64 <_reclaim_reent>:
 800ec64:	4b2c      	ldr	r3, [pc, #176]	; (800ed18 <_reclaim_reent+0xb4>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	4283      	cmp	r3, r0
 800ec6a:	b570      	push	{r4, r5, r6, lr}
 800ec6c:	4604      	mov	r4, r0
 800ec6e:	d051      	beq.n	800ed14 <_reclaim_reent+0xb0>
 800ec70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ec72:	b143      	cbz	r3, 800ec86 <_reclaim_reent+0x22>
 800ec74:	68db      	ldr	r3, [r3, #12]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d14a      	bne.n	800ed10 <_reclaim_reent+0xac>
 800ec7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec7c:	6819      	ldr	r1, [r3, #0]
 800ec7e:	b111      	cbz	r1, 800ec86 <_reclaim_reent+0x22>
 800ec80:	4620      	mov	r0, r4
 800ec82:	f7ff ff95 	bl	800ebb0 <_free_r>
 800ec86:	6961      	ldr	r1, [r4, #20]
 800ec88:	b111      	cbz	r1, 800ec90 <_reclaim_reent+0x2c>
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	f7ff ff90 	bl	800ebb0 <_free_r>
 800ec90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ec92:	b111      	cbz	r1, 800ec9a <_reclaim_reent+0x36>
 800ec94:	4620      	mov	r0, r4
 800ec96:	f7ff ff8b 	bl	800ebb0 <_free_r>
 800ec9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ec9c:	b111      	cbz	r1, 800eca4 <_reclaim_reent+0x40>
 800ec9e:	4620      	mov	r0, r4
 800eca0:	f7ff ff86 	bl	800ebb0 <_free_r>
 800eca4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800eca6:	b111      	cbz	r1, 800ecae <_reclaim_reent+0x4a>
 800eca8:	4620      	mov	r0, r4
 800ecaa:	f7ff ff81 	bl	800ebb0 <_free_r>
 800ecae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ecb0:	b111      	cbz	r1, 800ecb8 <_reclaim_reent+0x54>
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	f7ff ff7c 	bl	800ebb0 <_free_r>
 800ecb8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ecba:	b111      	cbz	r1, 800ecc2 <_reclaim_reent+0x5e>
 800ecbc:	4620      	mov	r0, r4
 800ecbe:	f7ff ff77 	bl	800ebb0 <_free_r>
 800ecc2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ecc4:	b111      	cbz	r1, 800eccc <_reclaim_reent+0x68>
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f7ff ff72 	bl	800ebb0 <_free_r>
 800eccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecce:	b111      	cbz	r1, 800ecd6 <_reclaim_reent+0x72>
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	f7ff ff6d 	bl	800ebb0 <_free_r>
 800ecd6:	69a3      	ldr	r3, [r4, #24]
 800ecd8:	b1e3      	cbz	r3, 800ed14 <_reclaim_reent+0xb0>
 800ecda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ecdc:	4620      	mov	r0, r4
 800ecde:	4798      	blx	r3
 800ece0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ece2:	b1b9      	cbz	r1, 800ed14 <_reclaim_reent+0xb0>
 800ece4:	4620      	mov	r0, r4
 800ece6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecea:	f7ff bfad 	b.w	800ec48 <cleanup_glue>
 800ecee:	5949      	ldr	r1, [r1, r5]
 800ecf0:	b941      	cbnz	r1, 800ed04 <_reclaim_reent+0xa0>
 800ecf2:	3504      	adds	r5, #4
 800ecf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecf6:	2d80      	cmp	r5, #128	; 0x80
 800ecf8:	68d9      	ldr	r1, [r3, #12]
 800ecfa:	d1f8      	bne.n	800ecee <_reclaim_reent+0x8a>
 800ecfc:	4620      	mov	r0, r4
 800ecfe:	f7ff ff57 	bl	800ebb0 <_free_r>
 800ed02:	e7ba      	b.n	800ec7a <_reclaim_reent+0x16>
 800ed04:	680e      	ldr	r6, [r1, #0]
 800ed06:	4620      	mov	r0, r4
 800ed08:	f7ff ff52 	bl	800ebb0 <_free_r>
 800ed0c:	4631      	mov	r1, r6
 800ed0e:	e7ef      	b.n	800ecf0 <_reclaim_reent+0x8c>
 800ed10:	2500      	movs	r5, #0
 800ed12:	e7ef      	b.n	800ecf4 <_reclaim_reent+0x90>
 800ed14:	bd70      	pop	{r4, r5, r6, pc}
 800ed16:	bf00      	nop
 800ed18:	20000010 	.word	0x20000010

0800ed1c <__malloc_lock>:
 800ed1c:	4801      	ldr	r0, [pc, #4]	; (800ed24 <__malloc_lock+0x8>)
 800ed1e:	f7f4 ba1e 	b.w	800315e <__retarget_lock_acquire_recursive>
 800ed22:	bf00      	nop
 800ed24:	200008e4 	.word	0x200008e4

0800ed28 <__malloc_unlock>:
 800ed28:	4801      	ldr	r0, [pc, #4]	; (800ed30 <__malloc_unlock+0x8>)
 800ed2a:	f7f4 ba2c 	b.w	8003186 <__retarget_lock_release_recursive>
 800ed2e:	bf00      	nop
 800ed30:	200008e4 	.word	0x200008e4

0800ed34 <_init>:
 800ed34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed36:	bf00      	nop
 800ed38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed3a:	bc08      	pop	{r3}
 800ed3c:	469e      	mov	lr, r3
 800ed3e:	4770      	bx	lr

0800ed40 <_fini>:
 800ed40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed42:	bf00      	nop
 800ed44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed46:	bc08      	pop	{r3}
 800ed48:	469e      	mov	lr, r3
 800ed4a:	4770      	bx	lr
