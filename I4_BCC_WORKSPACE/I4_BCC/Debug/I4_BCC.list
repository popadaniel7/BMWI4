
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ce4  0800fcfc  0800fcfc  0001fcfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119e0  080119e0  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  080119e0  080119e0  000219e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119e8  080119e8  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080119e8  080119e8  000219e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080119ec  080119ec  000219ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080119f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005694  20000078  08011a68  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000570c  08011a68  0003570c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033b0f  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000073a2  00000000  00000000  00063bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029e8  00000000  00000000  0006af60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026e0  00000000  00000000  0006d948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023573  00000000  00000000  00070028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003fb1f  00000000  00000000  0009359b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb1bd  00000000  00000000  000d30ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018e277  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b050  00000000  00000000  0018e2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fce4 	.word	0x0800fce4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800fce4 	.word	0x0800fce4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <Btc_EnableUart>:
StdReturnType Btc_RxVal();
StdReturnType Btc_EnableUart();
StdReturnType Btc_IgnitionState();

StdReturnType Btc_EnableUart()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0

	Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(&huart1, &Btc_RxData, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	4903      	ldr	r1, [pc, #12]	; (80004f8 <Btc_EnableUart+0x14>)
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <Btc_EnableUart+0x18>)
 80004ee:	f00f f959 	bl	800f7a4 <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>

	return E_OK;
 80004f2:	2300      	movs	r3, #0

}
 80004f4:	4618      	mov	r0, r3
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000098 	.word	0x20000098
 80004fc:	20000a28 	.word	0x20000a28

08000500 <Btc_IgnitionState>:

StdReturnType Btc_IgnitionState()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

	uint8 stateValue = STD_LOW;
 8000506:	2300      	movs	r3, #0
 8000508:	71bb      	strb	r3, [r7, #6]
	uint8 returnValue = E_OK;
 800050a:	2300      	movs	r3, #0
 800050c:	71fb      	strb	r3, [r7, #7]

	if(Btc_IgnitionStepOne == STD_LOW && Btc_IgnitionStepTwo == STD_LOW && Btc_IgnitionTurnOff == STD_LOW)
 800050e:	4b21      	ldr	r3, [pc, #132]	; (8000594 <Btc_IgnitionState+0x94>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d129      	bne.n	800056a <Btc_IgnitionState+0x6a>
 8000516:	4b20      	ldr	r3, [pc, #128]	; (8000598 <Btc_IgnitionState+0x98>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d125      	bne.n	800056a <Btc_IgnitionState+0x6a>
 800051e:	4b1f      	ldr	r3, [pc, #124]	; (800059c <Btc_IgnitionState+0x9c>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d121      	bne.n	800056a <Btc_IgnitionState+0x6a>
	{

		Btc_LightSwitch 		= STD_LOW;
 8000526:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <Btc_IgnitionState+0xa0>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
		Btc_HighBeam 			= STD_LOW;
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <Btc_IgnitionState+0xa4>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
		Btc_FlashHighBeam 		= STD_LOW;
 8000532:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <Btc_IgnitionState+0xa8>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
		Btc_FrontFogLight 		= STD_LOW;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <Btc_IgnitionState+0xac>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
		Btc_TurnSignalLeft 		= STD_LOW;
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <Btc_IgnitionState+0xb0>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
		Btc_TurnSignalRight 	= STD_LOW;
 8000544:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <Btc_IgnitionState+0xb4>)
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
		Btc_HazardLight 		= STD_LOW;
 800054a:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <Btc_IgnitionState+0xb8>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
		Btc_BrakeLight 			= STD_LOW;
 8000550:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <Btc_IgnitionState+0xbc>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
		Btc_RearFogLight 		= STD_LOW;
 8000556:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <Btc_IgnitionState+0xc0>)
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
		Btc_ReverseLight 		= STD_LOW;
 800055c:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <Btc_IgnitionState+0xc4>)
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
		Btc_IntLights 			= STD_LOW;
 8000562:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <Btc_IgnitionState+0xc8>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
 8000568:	e00f      	b.n	800058a <Btc_IgnitionState+0x8a>

	}
	else if(Btc_IgnitionStepOne == STD_HIGH)
 800056a:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <Btc_IgnitionState+0x94>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d10b      	bne.n	800058a <Btc_IgnitionState+0x8a>
	{

		stateValue = STD_LOW;
 8000572:	2300      	movs	r3, #0
 8000574:	71bb      	strb	r3, [r7, #6]
		Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <Btc_IgnitionState+0xa0>)
 8000578:	2217      	movs	r2, #23
 800057a:	701a      	strb	r2, [r3, #0]

		Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(&stateValue);
 800057c:	1dbb      	adds	r3, r7, #6
 800057e:	4618      	mov	r0, r3
 8000580:	f00e ff24 	bl	800f3cc <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000584:	4806      	ldr	r0, [pc, #24]	; (80005a0 <Btc_IgnitionState+0xa0>)
 8000586:	f00e ffd1 	bl	800f52c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

		/* do nothing */

	}

	return returnValue;
 800058a:	79fb      	ldrb	r3, [r7, #7]

}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200000a7 	.word	0x200000a7
 8000598:	200000a8 	.word	0x200000a8
 800059c:	200000a9 	.word	0x200000a9
 80005a0:	2000009c 	.word	0x2000009c
 80005a4:	2000009d 	.word	0x2000009d
 80005a8:	2000009e 	.word	0x2000009e
 80005ac:	2000009f 	.word	0x2000009f
 80005b0:	200000a0 	.word	0x200000a0
 80005b4:	200000a1 	.word	0x200000a1
 80005b8:	200000a2 	.word	0x200000a2
 80005bc:	200000a3 	.word	0x200000a3
 80005c0:	200000a4 	.word	0x200000a4
 80005c4:	200000a5 	.word	0x200000a5
 80005c8:	200000a6 	.word	0x200000a6

080005cc <Btc_RxVal>:
	return E_OK;

}

StdReturnType Btc_RxVal()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0

	switch(Btc_ReceivedDataOnBluetooth)
 80005d0:	4b93      	ldr	r3, [pc, #588]	; (8000820 <Btc_RxVal+0x254>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	3b01      	subs	r3, #1
 80005d6:	2b1c      	cmp	r3, #28
 80005d8:	f200 811e 	bhi.w	8000818 <Btc_RxVal+0x24c>
 80005dc:	a201      	add	r2, pc, #4	; (adr r2, 80005e4 <Btc_RxVal+0x18>)
 80005de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e2:	bf00      	nop
 80005e4:	080006e9 	.word	0x080006e9
 80005e8:	080006f7 	.word	0x080006f7
 80005ec:	08000705 	.word	0x08000705
 80005f0:	08000713 	.word	0x08000713
 80005f4:	08000721 	.word	0x08000721
 80005f8:	0800072f 	.word	0x0800072f
 80005fc:	0800073d 	.word	0x0800073d
 8000600:	08000757 	.word	0x08000757
 8000604:	08000765 	.word	0x08000765
 8000608:	0800077f 	.word	0x0800077f
 800060c:	0800078d 	.word	0x0800078d
 8000610:	0800079b 	.word	0x0800079b
 8000614:	080007a9 	.word	0x080007a9
 8000618:	080007b7 	.word	0x080007b7
 800061c:	080007c5 	.word	0x080007c5
 8000620:	080007d3 	.word	0x080007d3
 8000624:	080007e1 	.word	0x080007e1
 8000628:	080007ef 	.word	0x080007ef
 800062c:	080007fd 	.word	0x080007fd
 8000630:	0800080b 	.word	0x0800080b
 8000634:	08000695 	.word	0x08000695
 8000638:	080006a3 	.word	0x080006a3
 800063c:	080006b1 	.word	0x080006b1
 8000640:	080006bf 	.word	0x080006bf
 8000644:	080006cd 	.word	0x080006cd
 8000648:	080006db 	.word	0x080006db
 800064c:	08000659 	.word	0x08000659
 8000650:	0800066d 	.word	0x0800066d
 8000654:	08000681 	.word	0x08000681
	{

		case BTC_RX_IGNITION_STEP_ONE:

			Btc_IgnitionStepOne = STD_HIGH;
 8000658:	4b72      	ldr	r3, [pc, #456]	; (8000824 <Btc_RxVal+0x258>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
			Btc_IgnitionStepTwo = STD_LOW;
 800065e:	4b72      	ldr	r3, [pc, #456]	; (8000828 <Btc_RxVal+0x25c>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
			Btc_IgnitionTurnOff = STD_LOW;
 8000664:	4b71      	ldr	r3, [pc, #452]	; (800082c <Btc_RxVal+0x260>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]

			break;
 800066a:	e0d6      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_IGNITION_STEP_TWO:

			Btc_IgnitionStepTwo = STD_HIGH;
 800066c:	4b6e      	ldr	r3, [pc, #440]	; (8000828 <Btc_RxVal+0x25c>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
			Btc_IgnitionStepOne = STD_LOW;
 8000672:	4b6c      	ldr	r3, [pc, #432]	; (8000824 <Btc_RxVal+0x258>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
			Btc_IgnitionTurnOff = STD_LOW;
 8000678:	4b6c      	ldr	r3, [pc, #432]	; (800082c <Btc_RxVal+0x260>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]

			break;
 800067e:	e0cc      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_IGNITION_TURN_OFF:

			Btc_IgnitionStepTwo = STD_LOW;
 8000680:	4b69      	ldr	r3, [pc, #420]	; (8000828 <Btc_RxVal+0x25c>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
			Btc_IgnitionStepOne = STD_LOW;
 8000686:	4b67      	ldr	r3, [pc, #412]	; (8000824 <Btc_RxVal+0x258>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
			Btc_IgnitionTurnOff = STD_HIGH;
 800068c:	4b67      	ldr	r3, [pc, #412]	; (800082c <Btc_RxVal+0x260>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]

			break;
 8000692:	e0c2      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:

			Btc_ReverseLight = STD_HIGH;
 8000694:	4b66      	ldr	r3, [pc, #408]	; (8000830 <Btc_RxVal+0x264>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 800069a:	4865      	ldr	r0, [pc, #404]	; (8000830 <Btc_RxVal+0x264>)
 800069c:	f00e ff04 	bl	800f4a8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>

			break;
 80006a0:	e0bb      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:

			Btc_ReverseLight = STD_LOW;
 80006a2:	4b63      	ldr	r3, [pc, #396]	; (8000830 <Btc_RxVal+0x264>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 80006a8:	4861      	ldr	r0, [pc, #388]	; (8000830 <Btc_RxVal+0x264>)
 80006aa:	f00e fefd 	bl	800f4a8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>

			break;
 80006ae:	e0b4      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_POSITIONZERO:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 80006b0:	4b60      	ldr	r3, [pc, #384]	; (8000834 <Btc_RxVal+0x268>)
 80006b2:	2217      	movs	r2, #23
 80006b4:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80006b6:	485f      	ldr	r0, [pc, #380]	; (8000834 <Btc_RxVal+0x268>)
 80006b8:	f00e ff38 	bl	800f52c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

			break;
 80006bc:	e0ad      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 80006be:	4b5d      	ldr	r3, [pc, #372]	; (8000834 <Btc_RxVal+0x268>)
 80006c0:	2218      	movs	r2, #24
 80006c2:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80006c4:	485b      	ldr	r0, [pc, #364]	; (8000834 <Btc_RxVal+0x268>)
 80006c6:	f00e ff31 	bl	800f52c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

			break;
 80006ca:	e0a6      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 80006cc:	4b59      	ldr	r3, [pc, #356]	; (8000834 <Btc_RxVal+0x268>)
 80006ce:	2219      	movs	r2, #25
 80006d0:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80006d2:	4858      	ldr	r0, [pc, #352]	; (8000834 <Btc_RxVal+0x268>)
 80006d4:	f00e ff2a 	bl	800f52c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

			break;
 80006d8:	e09f      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:

			Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 80006da:	4b56      	ldr	r3, [pc, #344]	; (8000834 <Btc_RxVal+0x268>)
 80006dc:	221a      	movs	r2, #26
 80006de:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 80006e0:	4854      	ldr	r0, [pc, #336]	; (8000834 <Btc_RxVal+0x268>)
 80006e2:	f00e ff23 	bl	800f52c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>

			break;
 80006e6:	e098      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_CENLOC_ON:

			Btc_CenLoc = STD_HIGH;
 80006e8:	4b53      	ldr	r3, [pc, #332]	; (8000838 <Btc_RxVal+0x26c>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
			Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 80006ee:	4852      	ldr	r0, [pc, #328]	; (8000838 <Btc_RxVal+0x26c>)
 80006f0:	f00e fe56 	bl	800f3a0 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>

			break;
 80006f4:	e091      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_CENLOC_OFF:

			Btc_CenLoc = STD_LOW;
 80006f6:	4b50      	ldr	r3, [pc, #320]	; (8000838 <Btc_RxVal+0x26c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
			Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 80006fc:	484e      	ldr	r0, [pc, #312]	; (8000838 <Btc_RxVal+0x26c>)
 80006fe:	f00e fe4f 	bl	800f3a0 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>

			break;
 8000702:	e08a      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_HIGBEAM_ON:

			Btc_HighBeam = STD_HIGH;
 8000704:	4b4d      	ldr	r3, [pc, #308]	; (800083c <Btc_RxVal+0x270>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 800070a:	484c      	ldr	r0, [pc, #304]	; (800083c <Btc_RxVal+0x270>)
 800070c:	f00e ff24 	bl	800f558 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>

			break;
 8000710:	e083      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_HIGBEAM_OFF:

			Btc_HighBeam = STD_LOW;
 8000712:	4b4a      	ldr	r3, [pc, #296]	; (800083c <Btc_RxVal+0x270>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 8000718:	4848      	ldr	r0, [pc, #288]	; (800083c <Btc_RxVal+0x270>)
 800071a:	f00e ff1d 	bl	800f558 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>

			break;
 800071e:	e07c      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_ON:

			Btc_FlashHighBeam = STD_HIGH;
 8000720:	4b47      	ldr	r3, [pc, #284]	; (8000840 <Btc_RxVal+0x274>)
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(&Btc_FlashHighBeam);
 8000726:	4846      	ldr	r0, [pc, #280]	; (8000840 <Btc_RxVal+0x274>)
 8000728:	f00e fed4 	bl	800f4d4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState>

			break;
 800072c:	e075      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_FLASHHIGHBEAM_OFF:

			Btc_FlashHighBeam = STD_LOW;
 800072e:	4b44      	ldr	r3, [pc, #272]	; (8000840 <Btc_RxVal+0x274>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(&Btc_FlashHighBeam);
 8000734:	4842      	ldr	r0, [pc, #264]	; (8000840 <Btc_RxVal+0x274>)
 8000736:	f00e fecd 	bl	800f4d4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState>

			break;
 800073a:	e06e      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:

			Btc_TurnSignalLeft = STD_HIGH;
 800073c:	4b41      	ldr	r3, [pc, #260]	; (8000844 <Btc_RxVal+0x278>)
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalRight = STD_LOW;
 8000742:	4b41      	ldr	r3, [pc, #260]	; (8000848 <Btc_RxVal+0x27c>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8000748:	483e      	ldr	r0, [pc, #248]	; (8000844 <Btc_RxVal+0x278>)
 800074a:	f00e ff31 	bl	800f5b0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 800074e:	483e      	ldr	r0, [pc, #248]	; (8000848 <Btc_RxVal+0x27c>)
 8000750:	f00e ff44 	bl	800f5dc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>

			break;
 8000754:	e061      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:

			Btc_TurnSignalLeft = STD_LOW;
 8000756:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <Btc_RxVal+0x278>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 800075c:	4839      	ldr	r0, [pc, #228]	; (8000844 <Btc_RxVal+0x278>)
 800075e:	f00e ff27 	bl	800f5b0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>

			break;
 8000762:	e05a      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:

			Btc_TurnSignalRight = STD_HIGH;
 8000764:	4b38      	ldr	r3, [pc, #224]	; (8000848 <Btc_RxVal+0x27c>)
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
			Btc_TurnSignalLeft = STD_LOW;
 800076a:	4b36      	ldr	r3, [pc, #216]	; (8000844 <Btc_RxVal+0x278>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8000770:	4834      	ldr	r0, [pc, #208]	; (8000844 <Btc_RxVal+0x278>)
 8000772:	f00e ff1d 	bl	800f5b0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8000776:	4834      	ldr	r0, [pc, #208]	; (8000848 <Btc_RxVal+0x27c>)
 8000778:	f00e ff30 	bl	800f5dc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>

			break;
 800077c:	e04d      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:

			Btc_TurnSignalRight = STD_LOW;
 800077e:	4b32      	ldr	r3, [pc, #200]	; (8000848 <Btc_RxVal+0x27c>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8000784:	4830      	ldr	r0, [pc, #192]	; (8000848 <Btc_RxVal+0x27c>)
 8000786:	f00e ff29 	bl	800f5dc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>

			break;
 800078a:	e046      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:

			Btc_HazardLight = STD_HIGH;
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <Btc_RxVal+0x280>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 8000792:	482e      	ldr	r0, [pc, #184]	; (800084c <Btc_RxVal+0x280>)
 8000794:	f00e ff38 	bl	800f608 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>

			break;
 8000798:	e03f      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:

			Btc_HazardLight = STD_LOW;
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <Btc_RxVal+0x280>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 80007a0:	482a      	ldr	r0, [pc, #168]	; (800084c <Btc_RxVal+0x280>)
 80007a2:	f00e ff31 	bl	800f608 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>

			break;
 80007a6:	e038      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:

			Btc_FrontFogLight = STD_HIGH;
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <Btc_RxVal+0x284>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 80007ae:	4828      	ldr	r0, [pc, #160]	; (8000850 <Btc_RxVal+0x284>)
 80007b0:	f00e fee8 	bl	800f584 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>

			break;
 80007b4:	e031      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:

			Btc_FrontFogLight = STD_LOW;
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <Btc_RxVal+0x284>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 80007bc:	4824      	ldr	r0, [pc, #144]	; (8000850 <Btc_RxVal+0x284>)
 80007be:	f00e fee1 	bl	800f584 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>

			break;
 80007c2:	e02a      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:

			Btc_RearFogLight = STD_HIGH;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <Btc_RxVal+0x288>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 80007ca:	4822      	ldr	r0, [pc, #136]	; (8000854 <Btc_RxVal+0x288>)
 80007cc:	f00e ff32 	bl	800f634 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>

			break;
 80007d0:	e023      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:

			Btc_RearFogLight = STD_LOW;
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <Btc_RxVal+0x288>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 80007d8:	481e      	ldr	r0, [pc, #120]	; (8000854 <Btc_RxVal+0x288>)
 80007da:	f00e ff2b 	bl	800f634 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>

			break;
 80007de:	e01c      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTON:

			Btc_BrakeLight = STD_HIGH;
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <Btc_RxVal+0x28c>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 80007e6:	481c      	ldr	r0, [pc, #112]	; (8000858 <Btc_RxVal+0x28c>)
 80007e8:	f00e fe8a 	bl	800f500 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>

			break;
 80007ec:	e015      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:

			Btc_BrakeLight = STD_LOW;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <Btc_RxVal+0x28c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 80007f4:	4818      	ldr	r0, [pc, #96]	; (8000858 <Btc_RxVal+0x28c>)
 80007f6:	f00e fe83 	bl	800f500 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>

			break;
 80007fa:	e00e      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:

			Btc_IntLights = STD_HIGH;
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <Btc_RxVal+0x290>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
			Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8000802:	4816      	ldr	r0, [pc, #88]	; (800085c <Btc_RxVal+0x290>)
 8000804:	f00e ff6e 	bl	800f6e4 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>

			break;
 8000808:	e007      	b.n	800081a <Btc_RxVal+0x24e>

		case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:

			Btc_IntLights = STD_LOW;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <Btc_RxVal+0x290>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
			Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8000810:	4812      	ldr	r0, [pc, #72]	; (800085c <Btc_RxVal+0x290>)
 8000812:	f00e ff67 	bl	800f6e4 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>

			break;
 8000816:	e000      	b.n	800081a <Btc_RxVal+0x24e>

		default:

			break;
 8000818:	bf00      	nop

	}

	return E_OK;
 800081a:	2300      	movs	r3, #0

}
 800081c:	4618      	mov	r0, r3
 800081e:	bd80      	pop	{r7, pc}
 8000820:	2000009a 	.word	0x2000009a
 8000824:	200000a7 	.word	0x200000a7
 8000828:	200000a8 	.word	0x200000a8
 800082c:	200000a9 	.word	0x200000a9
 8000830:	200000a5 	.word	0x200000a5
 8000834:	2000009c 	.word	0x2000009c
 8000838:	2000009b 	.word	0x2000009b
 800083c:	2000009d 	.word	0x2000009d
 8000840:	2000009e 	.word	0x2000009e
 8000844:	200000a0 	.word	0x200000a0
 8000848:	200000a1 	.word	0x200000a1
 800084c:	200000a2 	.word	0x200000a2
 8000850:	2000009f 	.word	0x2000009f
 8000854:	200000a4 	.word	0x200000a4
 8000858:	200000a3 	.word	0x200000a3
 800085c:	200000a6 	.word	0x200000a6

08000860 <Btc_MainFunction>:

void Btc_MainFunction()
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

	Btc_RxVal();
 8000864:	f7ff feb2 	bl	80005cc <Btc_RxVal>
	Btc_EnableUart();
 8000868:	f7ff fe3c 	bl	80004e4 <Btc_EnableUart>
	Btc_IgnitionState();
 800086c:	f7ff fe48 	bl	8000500 <Btc_IgnitionState>

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <CenLoc_State>:
	return E_OK;

}

StdReturnType CenLoc_State()
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

	uint8 status = E_OK;
 800087a:	2300      	movs	r3, #0
 800087c:	71fb      	strb	r3, [r7, #7]

	if(CenLoc_PreviousState != CenLoc_CurrentState)
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <CenLoc_State+0x88>)
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <CenLoc_State+0x8c>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	429a      	cmp	r2, r3
 8000888:	d033      	beq.n	80008f2 <CenLoc_State+0x7e>
	{

		CenLoc_PreviousStateFlag 			= CenLoc_PreviousState;
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <CenLoc_State+0x88>)
 800088c:	781a      	ldrb	r2, [r3, #0]
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <CenLoc_State+0x90>)
 8000890:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 				= CenLoc_CurrentState;
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <CenLoc_State+0x8c>)
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <CenLoc_State+0x88>)
 8000898:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim2IRQFlag 					= STD_LOW;
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <CenLoc_State+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim5IRQFlag 					= STD_LOW;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <CenLoc_State+0x98>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim3IRQFlag					= STD_LOW;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <CenLoc_State+0x9c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim11IRQFlag					= STD_LOW;
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <CenLoc_State+0xa0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]

		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 80008b2:	f000 fe2b 	bl	800150c <SecAlm_Init>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_CenLoc_LockUnlockSequence_TimerHandle, 250);
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <CenLoc_State+0xa4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	21fa      	movs	r1, #250	; 0xfa
 80008bc:	4618      	mov	r0, r3
 80008be:	f00e ffca 	bl	800f856 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag(&CenLoc_Tim2IRQFlag);
 80008c2:	4811      	ldr	r0, [pc, #68]	; (8000908 <CenLoc_State+0x94>)
 80008c4:	f00f f818 	bl	800f8f8 <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag>
		Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag(&CenLoc_Tim5IRQFlag);
 80008c8:	4810      	ldr	r0, [pc, #64]	; (800090c <CenLoc_State+0x98>)
 80008ca:	f00f f82b 	bl	800f924 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag>
		Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag(&CenLoc_Tim3IRQFlag);
 80008ce:	4810      	ldr	r0, [pc, #64]	; (8000910 <CenLoc_State+0x9c>)
 80008d0:	f00f f83e 	bl	800f950 <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag>
		Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(&CenLoc_Tim11IRQFlag);
 80008d4:	480f      	ldr	r0, [pc, #60]	; (8000914 <CenLoc_State+0xa0>)
 80008d6:	f00f f851 	bl	800f97c <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(&htim2);
 80008da:	4810      	ldr	r0, [pc, #64]	; (800091c <CenLoc_State+0xa8>)
 80008dc:	f00e ff74 	bl	800f7c8 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(&htim3);
 80008e0:	480f      	ldr	r0, [pc, #60]	; (8000920 <CenLoc_State+0xac>)
 80008e2:	f00e ff71 	bl	800f7c8 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(&htim4);
 80008e6:	480f      	ldr	r0, [pc, #60]	; (8000924 <CenLoc_State+0xb0>)
 80008e8:	f00e ff6e 	bl	800f7c8 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(&htim5);
 80008ec:	480e      	ldr	r0, [pc, #56]	; (8000928 <CenLoc_State+0xb4>)
 80008ee:	f00e ff6b 	bl	800f7c8 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>

		/* do nothing */

	}

	return status;
 80008f2:	79fb      	ldrb	r3, [r7, #7]

}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000ab 	.word	0x200000ab
 8000900:	200000aa 	.word	0x200000aa
 8000904:	200000ad 	.word	0x200000ad
 8000908:	200000ae 	.word	0x200000ae
 800090c:	200000b0 	.word	0x200000b0
 8000910:	200000af 	.word	0x200000af
 8000914:	200000b1 	.word	0x200000b1
 8000918:	200001e0 	.word	0x200001e0
 800091c:	200005f0 	.word	0x200005f0
 8000920:	200006a4 	.word	0x200006a4
 8000924:	20000758 	.word	0x20000758
 8000928:	2000080c 	.word	0x2000080c

0800092c <CenLoc_SecAlmStateToOff>:

void CenLoc_SecAlmStateToOff()
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <CenLoc_SecAlmStateToOff+0x14>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d101      	bne.n	800093c <CenLoc_SecAlmStateToOff+0x10>
	{

		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 8000938:	f000 fde8 	bl	800150c <SecAlm_Init>

		/* do nothing */

	}

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200000aa 	.word	0x200000aa

08000944 <CenLoc_ToggleDoorLED>:

void CenLoc_ToggleDoorLED(uint8 PinState)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(CENLOC_DOOR_LED_PORT, CENLOC_DOOR_LED_PIN, PinState);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	461a      	mov	r2, r3
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	4803      	ldr	r0, [pc, #12]	; (8000964 <CenLoc_ToggleDoorLED+0x20>)
 8000956:	f00e ff5b 	bl	800f810 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40020400 	.word	0x40020400

08000968 <CenLoc_FollowMeHome>:

void CenLoc_FollowMeHome()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

	if(CenLoc_Tim5IRQFlag == 1)
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <CenLoc_FollowMeHome+0x40>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d103      	bne.n	800097c <CenLoc_FollowMeHome+0x14>
	{

		CenLoc_FollowMeHomeState = STD_HIGH;
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <CenLoc_FollowMeHome+0x44>)
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

}
 800097a:	e013      	b.n	80009a4 <CenLoc_FollowMeHome+0x3c>
	else if(CenLoc_Tim5IRQFlag == 2)
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <CenLoc_FollowMeHome+0x40>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d10f      	bne.n	80009a4 <CenLoc_FollowMeHome+0x3c>
		CenLoc_FollowMeHomeState = STD_LOW;
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <CenLoc_FollowMeHome+0x44>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim5);
 800098a:	4809      	ldr	r0, [pc, #36]	; (80009b0 <CenLoc_FollowMeHome+0x48>)
 800098c:	f00e ff34 	bl	800f7f8 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_SET_COUNTER(&htim5, 0);
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <CenLoc_FollowMeHome+0x48>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2200      	movs	r2, #0
 8000996:	625a      	str	r2, [r3, #36]	; 0x24
		CenLoc_Tim5IRQFlag = STD_LOW;
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <CenLoc_FollowMeHome+0x40>)
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag(&CenLoc_Tim5IRQFlag);
 800099e:	4802      	ldr	r0, [pc, #8]	; (80009a8 <CenLoc_FollowMeHome+0x40>)
 80009a0:	f00e ffc0 	bl	800f924 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag>
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000b0 	.word	0x200000b0
 80009ac:	200000ac 	.word	0x200000ac
 80009b0:	2000080c 	.word	0x2000080c

080009b4 <CenLoc_UnlockSequence>:
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_TurnSignalRight(CenLoc_BlinkState);

}

void CenLoc_UnlockSequence()
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

	Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim3);
 80009b8:	482e      	ldr	r0, [pc, #184]	; (8000a74 <CenLoc_UnlockSequence+0xc0>)
 80009ba:	f00e ff1d 	bl	800f7f8 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>

	CenLoc_ToggleDoorLED(CenLoc_CurrentState);
 80009be:	4b2e      	ldr	r3, [pc, #184]	; (8000a78 <CenLoc_UnlockSequence+0xc4>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ffbe 	bl	8000944 <CenLoc_ToggleDoorLED>
	CenLoc_FollowMeHome();
 80009c8:	f7ff ffce 	bl	8000968 <CenLoc_FollowMeHome>

	localPreviousState = STD_HIGH;
 80009cc:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <CenLoc_UnlockSequence+0xc8>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]

	if(CenLoc_Tim2IRQFlag <= 4)
 80009d2:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <CenLoc_UnlockSequence+0xcc>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	d83a      	bhi.n	8000a50 <CenLoc_UnlockSequence+0x9c>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim2);
 80009da:	482a      	ldr	r0, [pc, #168]	; (8000a84 <CenLoc_UnlockSequence+0xd0>)
 80009dc:	f00e ff00 	bl	800f7e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim5);
 80009e0:	4829      	ldr	r0, [pc, #164]	; (8000a88 <CenLoc_UnlockSequence+0xd4>)
 80009e2:	f00e fefd 	bl	800f7e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>

		switch(CenLoc_Tim2IRQFlag)
 80009e6:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <CenLoc_UnlockSequence+0xcc>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d83d      	bhi.n	8000a6c <CenLoc_UnlockSequence+0xb8>
 80009f0:	a201      	add	r2, pc, #4	; (adr r2, 80009f8 <CenLoc_UnlockSequence+0x44>)
 80009f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f6:	bf00      	nop
 80009f8:	08000a09 	.word	0x08000a09
 80009fc:	08000a1b 	.word	0x08000a1b
 8000a00:	08000a2d 	.word	0x08000a2d
 8000a04:	08000a3f 	.word	0x08000a3f
		{

			case 1:

				CenLoc_BlinkState = STD_HIGH;
 8000a08:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f8fc 	bl	8000c10 <CenLoc_ToggleBuzzer>

				break;
 8000a18:	e029      	b.n	8000a6e <CenLoc_UnlockSequence+0xba>

			case 2:

				CenLoc_BlinkState = STD_LOW;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 f8f3 	bl	8000c10 <CenLoc_ToggleBuzzer>

				break;
 8000a2a:	e020      	b.n	8000a6e <CenLoc_UnlockSequence+0xba>

			case 3:

				CenLoc_BlinkState = STD_HIGH;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f8ea 	bl	8000c10 <CenLoc_ToggleBuzzer>

				break;
 8000a3c:	e017      	b.n	8000a6e <CenLoc_UnlockSequence+0xba>

			case 4:

				CenLoc_BlinkState = STD_LOW;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 f8e1 	bl	8000c10 <CenLoc_ToggleBuzzer>

				break;
 8000a4e:	e00e      	b.n	8000a6e <CenLoc_UnlockSequence+0xba>
				break;

		}

	}
	else if(CenLoc_Tim2IRQFlag == 5)
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <CenLoc_UnlockSequence+0xcc>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b05      	cmp	r3, #5
 8000a56:	d10a      	bne.n	8000a6e <CenLoc_UnlockSequence+0xba>
	{

		CenLoc_BlinkState = 2;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <CenLoc_UnlockSequence+0xd8>)
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim2IRQFlag = 6;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <CenLoc_UnlockSequence+0xcc>)
 8000a60:	2206      	movs	r2, #6
 8000a62:	701a      	strb	r2, [r3, #0]
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim2);
 8000a64:	4807      	ldr	r0, [pc, #28]	; (8000a84 <CenLoc_UnlockSequence+0xd0>)
 8000a66:	f00e fec7 	bl	800f7f8 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>

		/* do nothing */

	}

}
 8000a6a:	e000      	b.n	8000a6e <CenLoc_UnlockSequence+0xba>
				break;
 8000a6c:	bf00      	nop
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200006a4 	.word	0x200006a4
 8000a78:	200000aa 	.word	0x200000aa
 8000a7c:	200000b2 	.word	0x200000b2
 8000a80:	200000ae 	.word	0x200000ae
 8000a84:	200005f0 	.word	0x200005f0
 8000a88:	2000080c 	.word	0x2000080c
 8000a8c:	20000000 	.word	0x20000000

08000a90 <CenLoc_LockSequence>:

void CenLoc_LockSequence()
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

	CenLoc_ToggleDoorLED(CenLoc_CurrentState);
 8000a94:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <CenLoc_LockSequence+0x8c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff53 	bl	8000944 <CenLoc_ToggleDoorLED>
	CenLoc_FollowMeHome();
 8000a9e:	f7ff ff63 	bl	8000968 <CenLoc_FollowMeHome>

	if(CenLoc_Tim2IRQFlag <= 2 && localPreviousState == STD_HIGH)
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <CenLoc_LockSequence+0x90>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d824      	bhi.n	8000af4 <CenLoc_LockSequence+0x64>
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <CenLoc_LockSequence+0x94>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d120      	bne.n	8000af4 <CenLoc_LockSequence+0x64>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim5);
 8000ab2:	481d      	ldr	r0, [pc, #116]	; (8000b28 <CenLoc_LockSequence+0x98>)
 8000ab4:	f00e fe94 	bl	800f7e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>
		//Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim2);

		switch(CenLoc_Tim2IRQFlag)
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <CenLoc_LockSequence+0x90>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d002      	beq.n	8000ac6 <CenLoc_LockSequence+0x36>
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d009      	beq.n	8000ad8 <CenLoc_LockSequence+0x48>

				break;

			default:

				break;
 8000ac4:	e014      	b.n	8000af0 <CenLoc_LockSequence+0x60>
				CenLoc_BlinkState = STD_HIGH;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <CenLoc_LockSequence+0x9c>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <CenLoc_LockSequence+0x9c>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 f89d 	bl	8000c10 <CenLoc_ToggleBuzzer>
				break;
 8000ad6:	e00b      	b.n	8000af0 <CenLoc_LockSequence+0x60>
				CenLoc_BlinkState = STD_LOW;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <CenLoc_LockSequence+0x9c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <CenLoc_LockSequence+0x9c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f894 	bl	8000c10 <CenLoc_ToggleBuzzer>
				localPreviousState = STD_LOW;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <CenLoc_LockSequence+0x94>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
				break;
 8000aee:	bf00      	nop
		switch(CenLoc_Tim2IRQFlag)
 8000af0:	bf00      	nop
	else
	{
		/* do nothing */
	}

}
 8000af2:	e011      	b.n	8000b18 <CenLoc_LockSequence+0x88>
	else if(CenLoc_Tim2IRQFlag == 3)
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <CenLoc_LockSequence+0x90>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d10d      	bne.n	8000b18 <CenLoc_LockSequence+0x88>
		CenLoc_BlinkState = 2;
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <CenLoc_LockSequence+0x9c>)
 8000afe:	2202      	movs	r2, #2
 8000b00:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim2IRQFlag = 4;
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <CenLoc_LockSequence+0x90>)
 8000b04:	2204      	movs	r2, #4
 8000b06:	701a      	strb	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag(&CenLoc_Tim2IRQFlag);
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <CenLoc_LockSequence+0x90>)
 8000b0a:	f00e fef5 	bl	800f8f8 <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <CenLoc_LockSequence+0xa0>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f00e ff48 	bl	800f9a8 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200000aa 	.word	0x200000aa
 8000b20:	200000ae 	.word	0x200000ae
 8000b24:	200000b2 	.word	0x200000b2
 8000b28:	2000080c 	.word	0x2000080c
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	200001e0 	.word	0x200001e0

08000b34 <CenLoc_ControlAlarmLed>:

void CenLoc_ControlAlarmLed()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH)
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <CenLoc_ControlAlarmLed+0x84>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d10c      	bne.n	8000b5a <CenLoc_ControlAlarmLed+0x26>
	{

		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 fd19 	bl	8001578 <SecAlm_ToggleAlarmLed>
		CenLoc_Tim11IRQFlag = STD_LOW;
 8000b46:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <CenLoc_ControlAlarmLed+0x88>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(&CenLoc_Tim11IRQFlag);
 8000b4c:	481b      	ldr	r0, [pc, #108]	; (8000bbc <CenLoc_ControlAlarmLed+0x88>)
 8000b4e:	f00e ff15 	bl	800f97c <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim11);
 8000b52:	481b      	ldr	r0, [pc, #108]	; (8000bc0 <CenLoc_ControlAlarmLed+0x8c>)
 8000b54:	f00e fe50 	bl	800f7f8 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>

		}

	}

}
 8000b58:	e02b      	b.n	8000bb2 <CenLoc_ControlAlarmLed+0x7e>
	else if(CenLoc_CurrentState == STD_LOW)
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <CenLoc_ControlAlarmLed+0x84>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d127      	bne.n	8000bb2 <CenLoc_ControlAlarmLed+0x7e>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim3);
 8000b62:	4818      	ldr	r0, [pc, #96]	; (8000bc4 <CenLoc_ControlAlarmLed+0x90>)
 8000b64:	f00e fe3c 	bl	800f7e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>
		if(CenLoc_Tim3IRQFlag == 2)
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <CenLoc_ControlAlarmLed+0x94>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d120      	bne.n	8000bb2 <CenLoc_ControlAlarmLed+0x7e>
			Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim11);
 8000b70:	4813      	ldr	r0, [pc, #76]	; (8000bc0 <CenLoc_ControlAlarmLed+0x8c>)
 8000b72:	f00e fe35 	bl	800f7e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>
			if(CenLoc_Tim11IRQFlag == 1)
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <CenLoc_ControlAlarmLed+0x88>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d103      	bne.n	8000b86 <CenLoc_ControlAlarmLed+0x52>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_HIGH);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f000 fcfa 	bl	8001578 <SecAlm_ToggleAlarmLed>
}
 8000b84:	e015      	b.n	8000bb2 <CenLoc_ControlAlarmLed+0x7e>
			else if(CenLoc_Tim11IRQFlag > 1)
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <CenLoc_ControlAlarmLed+0x88>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d911      	bls.n	8000bb2 <CenLoc_ControlAlarmLed+0x7e>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 fcf2 	bl	8001578 <SecAlm_ToggleAlarmLed>
				CenLoc_Tim11IRQFlag = 0;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <CenLoc_ControlAlarmLed+0x88>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
				CenLoc_Tim3IRQFlag = 1;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <CenLoc_ControlAlarmLed+0x94>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(&CenLoc_Tim11IRQFlag);
 8000ba0:	4806      	ldr	r0, [pc, #24]	; (8000bbc <CenLoc_ControlAlarmLed+0x88>)
 8000ba2:	f00e feeb 	bl	800f97c <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag>
				Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag(&CenLoc_Tim3IRQFlag);
 8000ba6:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <CenLoc_ControlAlarmLed+0x94>)
 8000ba8:	f00e fed2 	bl	800f950 <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag>
				Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim11);
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <CenLoc_ControlAlarmLed+0x8c>)
 8000bae:	f00e fe23 	bl	800f7f8 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000aa 	.word	0x200000aa
 8000bbc:	200000b1 	.word	0x200000b1
 8000bc0:	20000974 	.word	0x20000974
 8000bc4:	200006a4 	.word	0x200006a4
 8000bc8:	200000af 	.word	0x200000af

08000bcc <CenLoc_LockUnlockStates>:

StdReturnType CenLoc_LockUnlockStates()
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

	if(CenLoc_CurrentState == STD_HIGH && SecAlm_Trigger == STD_LOW)
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <CenLoc_LockUnlockStates+0x3c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d108      	bne.n	8000bea <CenLoc_LockUnlockStates+0x1e>
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <CenLoc_LockUnlockStates+0x40>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d104      	bne.n	8000bea <CenLoc_LockUnlockStates+0x1e>
	{

		CenLoc_UnlockSequence();
 8000be0:	f7ff fee8 	bl	80009b4 <CenLoc_UnlockSequence>
		CenLoc_ControlAlarmLed();
 8000be4:	f7ff ffa6 	bl	8000b34 <CenLoc_ControlAlarmLed>
 8000be8:	e00b      	b.n	8000c02 <CenLoc_LockUnlockStates+0x36>

	}
	else if(CenLoc_CurrentState == STD_LOW && SecAlm_Trigger == STD_LOW)
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <CenLoc_LockUnlockStates+0x3c>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d107      	bne.n	8000c02 <CenLoc_LockUnlockStates+0x36>
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <CenLoc_LockUnlockStates+0x40>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d103      	bne.n	8000c02 <CenLoc_LockUnlockStates+0x36>
	{

		CenLoc_LockSequence();
 8000bfa:	f7ff ff49 	bl	8000a90 <CenLoc_LockSequence>
		CenLoc_ControlAlarmLed();
 8000bfe:	f7ff ff99 	bl	8000b34 <CenLoc_ControlAlarmLed>

	}

	return E_OK;
 8000c02:	2300      	movs	r3, #0

}
 8000c04:	4618      	mov	r0, r3
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200000aa 	.word	0x200000aa
 8000c0c:	200000d6 	.word	0x200000d6

08000c10 <CenLoc_ToggleBuzzer>:

void CenLoc_ToggleBuzzer(uint8 PinState)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2110      	movs	r1, #16
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <CenLoc_ToggleBuzzer+0x20>)
 8000c22:	f00e fdf5 	bl	800f810 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40020800 	.word	0x40020800

08000c34 <CenLoc_MainFunction>:

void CenLoc_MainFunction()
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

	CenLoc_State();
 8000c38:	f7ff fe1c 	bl	8000874 <CenLoc_State>
	CenLoc_SecAlmStateToOff();
 8000c3c:	f7ff fe76 	bl	800092c <CenLoc_SecAlmStateToOff>
	CenLoc_LockUnlockStates();
 8000c40:	f7ff ffc4 	bl	8000bcc <CenLoc_LockUnlockStates>

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <ExtLights_TurnSignalHazardLight>:
void ExtLights_PrevStateTSHL();
StdReturnType ExtLights_Init();
uint32 ExtLights_LightReadSensorValue();

void ExtLights_TurnSignalHazardLight()
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8000c4c:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <ExtLights_TurnSignalHazardLight+0xdc>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d115      	bne.n	8000c80 <ExtLights_TurnSignalHazardLight+0x38>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim2);
 8000c54:	4834      	ldr	r0, [pc, #208]	; (8000d28 <ExtLights_TurnSignalHazardLight+0xe0>)
 8000c56:	f00e fdc3 	bl	800f7e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>

		if(ExtLights_LTSFlag % 2 == 0)
 8000c5a:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <ExtLights_TurnSignalHazardLight+0xe4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d103      	bne.n	8000c6e <ExtLights_TurnSignalHazardLight+0x26>
		{

			ExtLights_TurnSignalLeft(STD_HIGH);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f000 fa5e 	bl	8001128 <ExtLights_TurnSignalLeft>
 8000c6c:	e008      	b.n	8000c80 <ExtLights_TurnSignalHazardLight+0x38>

		}
		else if(ExtLights_LTSFlag % 2 == STD_HIGH)
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <ExtLights_TurnSignalHazardLight+0xe4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <ExtLights_TurnSignalHazardLight+0x38>
		{

			ExtLights_TurnSignalLeft(STD_LOW);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 fa54 	bl	8001128 <ExtLights_TurnSignalLeft>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8000c80:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <ExtLights_TurnSignalHazardLight+0xe8>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d115      	bne.n	8000cb4 <ExtLights_TurnSignalHazardLight+0x6c>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim2);
 8000c88:	4827      	ldr	r0, [pc, #156]	; (8000d28 <ExtLights_TurnSignalHazardLight+0xe0>)
 8000c8a:	f00e fda9 	bl	800f7e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>

		if(ExtLights_RTSFlag % 2 == STD_LOW)
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <ExtLights_TurnSignalHazardLight+0xec>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d103      	bne.n	8000ca2 <ExtLights_TurnSignalHazardLight+0x5a>
		{

			ExtLights_TurnSignalRight(STD_HIGH);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 fa56 	bl	800114c <ExtLights_TurnSignalRight>
 8000ca0:	e008      	b.n	8000cb4 <ExtLights_TurnSignalHazardLight+0x6c>

		}
		else if(ExtLights_RTSFlag % 2 == STD_HIGH)
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <ExtLights_TurnSignalHazardLight+0xec>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <ExtLights_TurnSignalHazardLight+0x6c>
		{

			ExtLights_TurnSignalRight(STD_LOW);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 fa4c 	bl	800114c <ExtLights_TurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <ExtLights_TurnSignalHazardLight+0xf0>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d11b      	bne.n	8000cf4 <ExtLights_TurnSignalHazardLight+0xac>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim2);
 8000cbc:	481a      	ldr	r0, [pc, #104]	; (8000d28 <ExtLights_TurnSignalHazardLight+0xe0>)
 8000cbe:	f00e fd8f 	bl	800f7e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>

		if(ExtLights_HLFlag % 2 == STD_LOW)
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <ExtLights_TurnSignalHazardLight+0xf4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d106      	bne.n	8000cdc <ExtLights_TurnSignalHazardLight+0x94>
		{

			ExtLights_TurnSignalLeft(STD_HIGH);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f000 fa2a 	bl	8001128 <ExtLights_TurnSignalLeft>
			ExtLights_TurnSignalRight(STD_HIGH);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f000 fa39 	bl	800114c <ExtLights_TurnSignalRight>
 8000cda:	e00b      	b.n	8000cf4 <ExtLights_TurnSignalHazardLight+0xac>

		}
		else if(ExtLights_HLFlag % 2 == STD_HIGH)
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <ExtLights_TurnSignalHazardLight+0xf4>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <ExtLights_TurnSignalHazardLight+0xac>
		{

			ExtLights_TurnSignalLeft(STD_LOW);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f000 fa1d 	bl	8001128 <ExtLights_TurnSignalLeft>
			ExtLights_TurnSignalRight(STD_LOW);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 fa2c 	bl	800114c <ExtLights_TurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <ExtLights_TurnSignalHazardLight+0xe8>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d106      	bne.n	8000d0a <ExtLights_TurnSignalHazardLight+0xc2>
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <ExtLights_TurnSignalHazardLight+0xf0>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <ExtLights_TurnSignalHazardLight+0xc2>
	{

		ExtLights_TurnSignalRight(STD_LOW);
 8000d04:	2000      	movs	r0, #0
 8000d06:	f000 fa21 	bl	800114c <ExtLights_TurnSignalRight>

		/* do nothing */

	}

	if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <ExtLights_TurnSignalHazardLight+0xdc>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d106      	bne.n	8000d20 <ExtLights_TurnSignalHazardLight+0xd8>
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <ExtLights_TurnSignalHazardLight+0xf0>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d102      	bne.n	8000d20 <ExtLights_TurnSignalHazardLight+0xd8>
	{

		ExtLights_TurnSignalLeft(STD_LOW);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 fa04 	bl	8001128 <ExtLights_TurnSignalLeft>

		/* do nothing */

	}

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200000b9 	.word	0x200000b9
 8000d28:	200005f0 	.word	0x200005f0
 8000d2c:	200000c4 	.word	0x200000c4
 8000d30:	200000ba 	.word	0x200000ba
 8000d34:	200000c0 	.word	0x200000c0
 8000d38:	200000bb 	.word	0x200000bb
 8000d3c:	200000c8 	.word	0x200000c8

08000d40 <ExtLights_PrevStateTSHL>:

void ExtLights_PrevStateTSHL()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

	if(ExtLights_TurnSignalLeft_CurrentState != ExtLights_LTS_PrevState)
 8000d44:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <ExtLights_PrevStateTSHL+0x68>)
 8000d46:	781a      	ldrb	r2, [r3, #0]
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <ExtLights_PrevStateTSHL+0x6c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d009      	beq.n	8000d64 <ExtLights_PrevStateTSHL+0x24>
	{

		ExtLights_LTS_PrevState = ExtLights_TurnSignalLeft_CurrentState;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <ExtLights_PrevStateTSHL+0x68>)
 8000d52:	781a      	ldrb	r2, [r3, #0]
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <ExtLights_PrevStateTSHL+0x6c>)
 8000d56:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag = 0;
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <ExtLights_PrevStateTSHL+0x70>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag(&ExtLights_LTSFlag);
 8000d5e:	4814      	ldr	r0, [pc, #80]	; (8000db0 <ExtLights_PrevStateTSHL+0x70>)
 8000d60:	f00e fd88 	bl	800f874 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag>

		/* do nothing */

	}

	if(ExtLights_TurnSignalRight_CurrentState != ExtLights_RTS_PrevState)
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <ExtLights_PrevStateTSHL+0x74>)
 8000d66:	781a      	ldrb	r2, [r3, #0]
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <ExtLights_PrevStateTSHL+0x78>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d009      	beq.n	8000d84 <ExtLights_PrevStateTSHL+0x44>
	{

		ExtLights_RTS_PrevState = ExtLights_TurnSignalRight_CurrentState;
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <ExtLights_PrevStateTSHL+0x74>)
 8000d72:	781a      	ldrb	r2, [r3, #0]
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <ExtLights_PrevStateTSHL+0x78>)
 8000d76:	701a      	strb	r2, [r3, #0]
		ExtLights_RTSFlag = 0;
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <ExtLights_PrevStateTSHL+0x7c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag(&ExtLights_RTSFlag);
 8000d7e:	480f      	ldr	r0, [pc, #60]	; (8000dbc <ExtLights_PrevStateTSHL+0x7c>)
 8000d80:	f00e fd8e 	bl	800f8a0 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag>

		/* do nothing */

	}

	if(ExtLights_HazardLight_CurrentState != ExtLights_HL_PrevState)
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <ExtLights_PrevStateTSHL+0x80>)
 8000d86:	781a      	ldrb	r2, [r3, #0]
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <ExtLights_PrevStateTSHL+0x84>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d009      	beq.n	8000da4 <ExtLights_PrevStateTSHL+0x64>
	{

		ExtLights_HL_PrevState = ExtLights_HazardLight_CurrentState;
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <ExtLights_PrevStateTSHL+0x80>)
 8000d92:	781a      	ldrb	r2, [r3, #0]
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <ExtLights_PrevStateTSHL+0x84>)
 8000d96:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag = 0;
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <ExtLights_PrevStateTSHL+0x88>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
		Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag(&ExtLights_HLFlag);
 8000d9e:	480a      	ldr	r0, [pc, #40]	; (8000dc8 <ExtLights_PrevStateTSHL+0x88>)
 8000da0:	f00e fd94 	bl	800f8cc <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag>

		/* do nothing */

	}

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200000b9 	.word	0x200000b9
 8000dac:	200000be 	.word	0x200000be
 8000db0:	200000c4 	.word	0x200000c4
 8000db4:	200000ba 	.word	0x200000ba
 8000db8:	200000bd 	.word	0x200000bd
 8000dbc:	200000c0 	.word	0x200000c0
 8000dc0:	200000bb 	.word	0x200000bb
 8000dc4:	200000bf 	.word	0x200000bf
 8000dc8:	200000c8 	.word	0x200000c8

08000dcc <ExtLights_LightState>:

void ExtLights_LightState()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0



	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8000dd0:	4b59      	ldr	r3, [pc, #356]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d114      	bne.n	8000e02 <ExtLights_LightState+0x36>
	{

		ExtLights_LowBeam(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000dd8:	4b57      	ldr	r3, [pc, #348]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f95b 	bl	8001098 <ExtLights_LowBeam>
		ExtLights_DayTimeRunningLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000de2:	4b55      	ldr	r3, [pc, #340]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f97a 	bl	80010e0 <ExtLights_DayTimeRunningLight>
		ExtLights_RearPositionLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000dec:	4b52      	ldr	r3, [pc, #328]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f9bd 	bl	8001170 <ExtLights_RearPositionLight>
		ExtLights_LicensePlateLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000df6:	4b50      	ldr	r3, [pc, #320]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fa00 	bl	8001200 <ExtLights_LicensePlateLight>
 8000e00:	e01a      	b.n	8000e38 <ExtLights_LightState+0x6c>

	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 8000e02:	4b4d      	ldr	r3, [pc, #308]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d116      	bne.n	8000e38 <ExtLights_LightState+0x6c>
	{

		ExtLights_LowBeam(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000e0a:	4b4b      	ldr	r3, [pc, #300]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f942 	bl	8001098 <ExtLights_LowBeam>
		ExtLights_DayTimeRunningLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000e14:	4b48      	ldr	r3, [pc, #288]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f961 	bl	80010e0 <ExtLights_DayTimeRunningLight>
		ExtLights_RearPositionLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000e1e:	4b46      	ldr	r3, [pc, #280]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f9a4 	bl	8001170 <ExtLights_RearPositionLight>
		ExtLights_LicensePlateLight(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState);
 8000e28:	4b43      	ldr	r3, [pc, #268]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 f9e7 	bl	8001200 <ExtLights_LicensePlateLight>
		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim5);
 8000e32:	4842      	ldr	r0, [pc, #264]	; (8000f3c <ExtLights_LightState+0x170>)
 8000e34:	f00e fce0 	bl	800f7f8 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>

		/* do nothing */

	}

	if( ExtLights_ReverseLight_CurrentState == STD_HIGH ||
 8000e38:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <ExtLights_LightState+0x174>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d023      	beq.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 8000e40:	4b40      	ldr	r3, [pc, #256]	; (8000f44 <ExtLights_LightState+0x178>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
	if( ExtLights_ReverseLight_CurrentState == STD_HIGH ||
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d01f      	beq.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 8000e48:	4b3f      	ldr	r3, [pc, #252]	; (8000f48 <ExtLights_LightState+0x17c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
		ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d01b      	beq.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 8000e50:	4b3e      	ldr	r3, [pc, #248]	; (8000f4c <ExtLights_LightState+0x180>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d117      	bne.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8000e58:	4b3d      	ldr	r3, [pc, #244]	; (8000f50 <ExtLights_LightState+0x184>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d013      	beq.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_FrontFogLight_CurrentState == STD_HIGH ||
 8000e60:	4b3c      	ldr	r3, [pc, #240]	; (8000f54 <ExtLights_LightState+0x188>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d00f      	beq.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8000e68:	4b3b      	ldr	r3, [pc, #236]	; (8000f58 <ExtLights_LightState+0x18c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FrontFogLight_CurrentState == STD_HIGH ||
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d00b      	beq.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8000e70:	4b3a      	ldr	r3, [pc, #232]	; (8000f5c <ExtLights_LightState+0x190>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d007      	beq.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_HazardLight_CurrentState == STD_HIGH ||
 8000e78:	4b39      	ldr	r3, [pc, #228]	; (8000f60 <ExtLights_LightState+0x194>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d003      	beq.n	8000e88 <ExtLights_LightState+0xbc>
		ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8000e80:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <ExtLights_LightState+0x198>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HazardLight_CurrentState == STD_HIGH ||
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d105      	bne.n	8000e94 <ExtLights_LightState+0xc8>
	{

		CenLoc_FollowMeHomeState = STD_LOW;
 8000e88:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim5IRQFlag = 2;
 8000e8e:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <ExtLights_LightState+0x19c>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_HIGH)
 8000e94:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <ExtLights_LightState+0x1a0>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d10a      	bne.n	8000eb2 <ExtLights_LightState+0xe6>
	{

		ExtLights_TurnSignalLeft(CenLoc_BlinkState);
 8000e9c:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <ExtLights_LightState+0x1a0>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f941 	bl	8001128 <ExtLights_TurnSignalLeft>
		ExtLights_TurnSignalRight(CenLoc_BlinkState);
 8000ea6:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <ExtLights_LightState+0x1a0>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f94e 	bl	800114c <ExtLights_TurnSignalRight>
 8000eb0:	e018      	b.n	8000ee4 <ExtLights_LightState+0x118>

	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_LOW)
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <ExtLights_LightState+0x1a0>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10a      	bne.n	8000ed0 <ExtLights_LightState+0x104>
	{

		ExtLights_TurnSignalLeft(CenLoc_BlinkState);
 8000eba:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <ExtLights_LightState+0x1a0>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f932 	bl	8001128 <ExtLights_TurnSignalLeft>
		ExtLights_TurnSignalRight(CenLoc_BlinkState);
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <ExtLights_LightState+0x1a0>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 f93f 	bl	800114c <ExtLights_TurnSignalRight>
 8000ece:	e009      	b.n	8000ee4 <ExtLights_LightState+0x118>

	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 2 || Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 4)
 8000ed0:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <ExtLights_LightState+0x1a0>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d003      	beq.n	8000ee0 <ExtLights_LightState+0x114>
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <ExtLights_LightState+0x1a0>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b04      	cmp	r3, #4
 8000ede:	d101      	bne.n	8000ee4 <ExtLights_LightState+0x118>
	{

		ExtLights_TurnSignalHazardLight();
 8000ee0:	f7ff feb2 	bl	8000c48 <ExtLights_TurnSignalHazardLight>

		/* do nothing */

	}

	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <ExtLights_LightState+0x16c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <ExtLights_LightState+0x124>
	{

		ExtLights_LightSwitchMode();
 8000eec:	f000 f848 	bl	8000f80 <ExtLights_LightSwitchMode>

		/* do nothing */

	}

	if(ExtLights_HighBeam_CurrentState != STD_HIGH)
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <ExtLights_LightState+0x184>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d004      	beq.n	8000f02 <ExtLights_LightState+0x136>
	{

		ExtLights_HighBeam(ExtLights_FlashHighBeam_CurrentState);
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <ExtLights_LightState+0x17c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f8dd 	bl	80010bc <ExtLights_HighBeam>

		/* do nothing */

	}

	ExtLights_ReverseLight(ExtLights_ReverseLight_CurrentState);
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <ExtLights_LightState+0x174>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f968 	bl	80011dc <ExtLights_ReverseLight>
	ExtLights_BrakeLight(ExtLights_BrakeLight_CurrentState);
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <ExtLights_LightState+0x178>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f951 	bl	80011b8 <ExtLights_BrakeLight>
	ExtLights_HighBeam(ExtLights_HighBeam_CurrentState);
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <ExtLights_LightState+0x184>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f8ce 	bl	80010bc <ExtLights_HighBeam>
	ExtLights_RearFogLight(ExtLights_RearFogLight_CurrentState);
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <ExtLights_LightState+0x198>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 f935 	bl	8001194 <ExtLights_RearFogLight>
	ExtLights_FrontFogLight(ExtLights_FrontFogLight_CurrentState);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <ExtLights_LightState+0x188>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f8e8 	bl	8001104 <ExtLights_FrontFogLight>

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200000ac 	.word	0x200000ac
 8000f3c:	2000080c 	.word	0x2000080c
 8000f40:	200000b3 	.word	0x200000b3
 8000f44:	200000b4 	.word	0x200000b4
 8000f48:	200000b5 	.word	0x200000b5
 8000f4c:	200000b6 	.word	0x200000b6
 8000f50:	200000b7 	.word	0x200000b7
 8000f54:	200000b8 	.word	0x200000b8
 8000f58:	200000b9 	.word	0x200000b9
 8000f5c:	200000ba 	.word	0x200000ba
 8000f60:	200000bb 	.word	0x200000bb
 8000f64:	200000bc 	.word	0x200000bc
 8000f68:	200000b0 	.word	0x200000b0
 8000f6c:	20000000 	.word	0x20000000

08000f70 <ExtLights_MainFunction>:

void ExtLights_MainFunction()
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0

	ExtLights_LightState();
 8000f74:	f7ff ff2a 	bl	8000dcc <ExtLights_LightState>
	ExtLights_PrevStateTSHL();
 8000f78:	f7ff fee2 	bl	8000d40 <ExtLights_PrevStateTSHL>

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <ExtLights_LightSwitchMode>:

void ExtLights_LightSwitchMode()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0

	switch(ExtLights_LightsSwitch_CurrentState)
 8000f84:	4b31      	ldr	r3, [pc, #196]	; (800104c <ExtLights_LightSwitchMode+0xcc>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	3b17      	subs	r3, #23
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d859      	bhi.n	8001042 <ExtLights_LightSwitchMode+0xc2>
 8000f8e:	a201      	add	r2, pc, #4	; (adr r2, 8000f94 <ExtLights_LightSwitchMode+0x14>)
 8000f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f94:	08000fa5 	.word	0x08000fa5
 8000f98:	08000fbf 	.word	0x08000fbf
 8000f9c:	0800100f 	.word	0x0800100f
 8000fa0:	08001029 	.word	0x08001029
	{
		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:

			ExtLights_LowBeam(STD_LOW);
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 f877 	bl	8001098 <ExtLights_LowBeam>
			ExtLights_DayTimeRunningLight(STD_LOW);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f898 	bl	80010e0 <ExtLights_DayTimeRunningLight>
			ExtLights_RearPositionLight(STD_LOW);
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 f8dd 	bl	8001170 <ExtLights_RearPositionLight>
			ExtLights_LicensePlateLight(STD_LOW);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f922 	bl	8001200 <ExtLights_LicensePlateLight>

			break;
 8000fbc:	e044      	b.n	8001048 <ExtLights_LightSwitchMode+0xc8>

		case EXTLIGHTS_LIGHTSWITCH_STATEONE:

			lightSensorState = ExtLights_LightReadSensorValue();
 8000fbe:	f000 f849 	bl	8001054 <ExtLights_LightReadSensorValue>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <ExtLights_LightSwitchMode+0xd0>)
 8000fc8:	701a      	strb	r2, [r3, #0]

			if(lightSensorState == STD_HIGH)
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <ExtLights_LightSwitchMode+0xd0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d10c      	bne.n	8000fec <ExtLights_LightSwitchMode+0x6c>
			{

				ExtLights_LowBeam(STD_HIGH);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 f860 	bl	8001098 <ExtLights_LowBeam>
				ExtLights_DayTimeRunningLight(STD_HIGH);
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f000 f881 	bl	80010e0 <ExtLights_DayTimeRunningLight>
				ExtLights_RearPositionLight(STD_HIGH);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f000 f8c6 	bl	8001170 <ExtLights_RearPositionLight>
				ExtLights_LicensePlateLight(STD_HIGH);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 f90b 	bl	8001200 <ExtLights_LicensePlateLight>
				ExtLights_RearPositionLight(STD_LOW);
				ExtLights_LicensePlateLight(STD_LOW);

			}

			break;
 8000fea:	e02c      	b.n	8001046 <ExtLights_LightSwitchMode+0xc6>
			else if(lightSensorState == STD_LOW)
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <ExtLights_LightSwitchMode+0xd0>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d128      	bne.n	8001046 <ExtLights_LightSwitchMode+0xc6>
				ExtLights_LowBeam(STD_LOW);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 f84f 	bl	8001098 <ExtLights_LowBeam>
				ExtLights_DayTimeRunningLight(STD_HIGH);
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f000 f870 	bl	80010e0 <ExtLights_DayTimeRunningLight>
				ExtLights_RearPositionLight(STD_LOW);
 8001000:	2000      	movs	r0, #0
 8001002:	f000 f8b5 	bl	8001170 <ExtLights_RearPositionLight>
				ExtLights_LicensePlateLight(STD_LOW);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 f8fa 	bl	8001200 <ExtLights_LicensePlateLight>
			break;
 800100c:	e01b      	b.n	8001046 <ExtLights_LightSwitchMode+0xc6>

		case EXTLIGHTS_LIGHTSWITCH_STATETWO:

			ExtLights_LowBeam(STD_LOW);
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f842 	bl	8001098 <ExtLights_LowBeam>
			ExtLights_DayTimeRunningLight(STD_HIGH);
 8001014:	2001      	movs	r0, #1
 8001016:	f000 f863 	bl	80010e0 <ExtLights_DayTimeRunningLight>
			ExtLights_RearPositionLight(STD_HIGH);
 800101a:	2001      	movs	r0, #1
 800101c:	f000 f8a8 	bl	8001170 <ExtLights_RearPositionLight>
			ExtLights_LicensePlateLight(STD_HIGH);
 8001020:	2001      	movs	r0, #1
 8001022:	f000 f8ed 	bl	8001200 <ExtLights_LicensePlateLight>

			break;
 8001026:	e00f      	b.n	8001048 <ExtLights_LightSwitchMode+0xc8>

		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:

			ExtLights_LowBeam(STD_HIGH);
 8001028:	2001      	movs	r0, #1
 800102a:	f000 f835 	bl	8001098 <ExtLights_LowBeam>
			ExtLights_DayTimeRunningLight(STD_HIGH);
 800102e:	2001      	movs	r0, #1
 8001030:	f000 f856 	bl	80010e0 <ExtLights_DayTimeRunningLight>
			ExtLights_RearPositionLight(STD_HIGH);
 8001034:	2001      	movs	r0, #1
 8001036:	f000 f89b 	bl	8001170 <ExtLights_RearPositionLight>
			ExtLights_LicensePlateLight(STD_HIGH);
 800103a:	2001      	movs	r0, #1
 800103c:	f000 f8e0 	bl	8001200 <ExtLights_LicensePlateLight>

			break;
 8001040:	e002      	b.n	8001048 <ExtLights_LightSwitchMode+0xc8>

		default:

			break;
 8001042:	bf00      	nop
 8001044:	e000      	b.n	8001048 <ExtLights_LightSwitchMode+0xc8>
			break;
 8001046:	bf00      	nop

	}

}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200000b6 	.word	0x200000b6
 8001050:	200000d4 	.word	0x200000d4

08001054 <ExtLights_LightReadSensorValue>:
	return E_OK;

}

uint32 ExtLights_LightReadSensorValue()
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
	uint8 sensorValue = STD_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	71fb      	strb	r3, [r7, #7]

	Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, 2);
 800105e:	2202      	movs	r2, #2
 8001060:	490b      	ldr	r1, [pc, #44]	; (8001090 <ExtLights_LightReadSensorValue+0x3c>)
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <ExtLights_LightReadSensorValue+0x40>)
 8001064:	f00e fbe7 	bl	800f836 <Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA>

	if(ADC_BUFFER[1] < 4000)
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <ExtLights_LightReadSensorValue+0x3c>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001070:	d202      	bcs.n	8001078 <ExtLights_LightReadSensorValue+0x24>
	{

		sensorValue = STD_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	71fb      	strb	r3, [r7, #7]
 8001076:	e006      	b.n	8001086 <ExtLights_LightReadSensorValue+0x32>

	}
	else if(ADC_BUFFER[1] > 4000)
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <ExtLights_LightReadSensorValue+0x3c>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001080:	d901      	bls.n	8001086 <ExtLights_LightReadSensorValue+0x32>
	{

		sensorValue = STD_HIGH;
 8001082:	2301      	movs	r3, #1
 8001084:	71fb      	strb	r3, [r7, #7]

		/* do nothing */

	}

	return sensorValue;
 8001086:	79fb      	ldrb	r3, [r7, #7]

}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200000cc 	.word	0x200000cc
 8001094:	200000e0 	.word	0x200000e0

08001098 <ExtLights_LowBeam>:

void ExtLights_LowBeam(uint8 PinState)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_LOWBEAM_PORT, EXTLIGHTS_LOWBEAM_PIN, PinState);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	461a      	mov	r2, r3
 80010a6:	2110      	movs	r1, #16
 80010a8:	4803      	ldr	r0, [pc, #12]	; (80010b8 <ExtLights_LowBeam+0x20>)
 80010aa:	f00e fbb1 	bl	800f810 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40020000 	.word	0x40020000

080010bc <ExtLights_HighBeam>:

void ExtLights_HighBeam(uint8 PinState)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	461a      	mov	r2, r3
 80010ca:	2101      	movs	r1, #1
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <ExtLights_HighBeam+0x20>)
 80010ce:	f00e fb9f 	bl	800f810 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40020400 	.word	0x40020400

080010e0 <ExtLights_DayTimeRunningLight>:

void ExtLights_DayTimeRunningLight(uint8 PinState)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_DAYTIMERUNNINGLIGHT_PORT, EXTLIGHTS_DAYTIMERUNNINGLIGHT_PIN, PinState);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	461a      	mov	r2, r3
 80010ee:	2102      	movs	r1, #2
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <ExtLights_DayTimeRunningLight+0x20>)
 80010f2:	f00e fb8d 	bl	800f810 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40020000 	.word	0x40020000

08001104 <ExtLights_FrontFogLight>:

void ExtLights_FrontFogLight(uint8 PinState)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_FRONTFOGLIGHT_PORT, EXTLIGHTS_FRONTFOGLIGHT_PIN, PinState);
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	461a      	mov	r2, r3
 8001112:	2108      	movs	r1, #8
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <ExtLights_FrontFogLight+0x20>)
 8001116:	f00e fb7b 	bl	800f810 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40020800 	.word	0x40020800

08001128 <ExtLights_TurnSignalLeft>:

void ExtLights_TurnSignalLeft(uint8 PinState)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALLEFT_PORT, EXTLIGHTS_TURNSIGNALLEFT_PIN, PinState);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	461a      	mov	r2, r3
 8001136:	2101      	movs	r1, #1
 8001138:	4803      	ldr	r0, [pc, #12]	; (8001148 <ExtLights_TurnSignalLeft+0x20>)
 800113a:	f00e fb69 	bl	800f810 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40020800 	.word	0x40020800

0800114c <ExtLights_TurnSignalRight>:

void ExtLights_TurnSignalRight(uint8 PinState)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_TURNSIGNALRIGHT_PORT, EXTLIGHTS_TURNSIGNALRIGHT_PIN, PinState);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	461a      	mov	r2, r3
 800115a:	2102      	movs	r1, #2
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <ExtLights_TurnSignalRight+0x20>)
 800115e:	f00e fb57 	bl	800f810 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40020800 	.word	0x40020800

08001170 <ExtLights_RearPositionLight>:

void ExtLights_RearPositionLight(uint8 PinState)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REARPOSITIONLIGHT_PORT, EXTLIGHTS_REARPOSITIONLIGHT_PIN, PinState);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	461a      	mov	r2, r3
 800117e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <ExtLights_RearPositionLight+0x20>)
 8001184:	f00e fb44 	bl	800f810 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40020800 	.word	0x40020800

08001194 <ExtLights_RearFogLight>:

void ExtLights_RearFogLight(uint8 PinState)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REARFOGLIGHT_PORT, EXTLIGHTS_REARFOGLIGHT_PIN, PinState);
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	461a      	mov	r2, r3
 80011a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a6:	4803      	ldr	r0, [pc, #12]	; (80011b4 <ExtLights_RearFogLight+0x20>)
 80011a8:	f00e fb32 	bl	800f810 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40020800 	.word	0x40020800

080011b8 <ExtLights_BrakeLight>:

void ExtLights_BrakeLight(uint8 PinState)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_BRAKELIGHT_PORT, EXTLIGHTS_BRAKELIGHT_PIN, PinState);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	461a      	mov	r2, r3
 80011c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ca:	4803      	ldr	r0, [pc, #12]	; (80011d8 <ExtLights_BrakeLight+0x20>)
 80011cc:	f00e fb20 	bl	800f810 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40020800 	.word	0x40020800

080011dc <ExtLights_ReverseLight>:

void ExtLights_ReverseLight(uint8 PinState)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	461a      	mov	r2, r3
 80011ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ee:	4803      	ldr	r0, [pc, #12]	; (80011fc <ExtLights_ReverseLight+0x20>)
 80011f0:	f00e fb0e 	bl	800f810 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40020000 	.word	0x40020000

08001200 <ExtLights_LicensePlateLight>:

void ExtLights_LicensePlateLight(uint8 PinState)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_LICENSEPLATELIGHT_PORT, EXTLIGHTS_LICENSEPLATELIGHT_PIN, PinState);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	461a      	mov	r2, r3
 800120e:	2104      	movs	r1, #4
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <ExtLights_LicensePlateLight+0x20>)
 8001212:	f00e fafd 	bl	800f810 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40020000 	.word	0x40020000

08001224 <IntLights_RxBtcState>:
void IntLights_MainFunction();
void IntLights_ToggleIntLights(uint8 PinState);
void IntLights_RxBtcState();

void IntLights_RxBtcState()
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0

	uint8 lightsStateFromBtcCommand;

	Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&lightsStateFromBtcCommand);
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	4618      	mov	r0, r3
 800122e:	f00e faa3 	bl	800f778 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>

	switch(lightsStateFromBtcCommand)
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	3b01      	subs	r3, #1
 8001236:	2b13      	cmp	r3, #19
 8001238:	d83a      	bhi.n	80012b0 <IntLights_RxBtcState+0x8c>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <IntLights_RxBtcState+0x1c>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	08001291 	.word	0x08001291
 8001244:	08001299 	.word	0x08001299
 8001248:	080012b1 	.word	0x080012b1
 800124c:	080012b1 	.word	0x080012b1
 8001250:	080012b1 	.word	0x080012b1
 8001254:	080012b1 	.word	0x080012b1
 8001258:	080012b1 	.word	0x080012b1
 800125c:	080012b1 	.word	0x080012b1
 8001260:	080012b1 	.word	0x080012b1
 8001264:	080012b1 	.word	0x080012b1
 8001268:	080012b1 	.word	0x080012b1
 800126c:	080012b1 	.word	0x080012b1
 8001270:	080012b1 	.word	0x080012b1
 8001274:	080012b1 	.word	0x080012b1
 8001278:	080012b1 	.word	0x080012b1
 800127c:	080012b1 	.word	0x080012b1
 8001280:	080012b1 	.word	0x080012b1
 8001284:	080012b1 	.word	0x080012b1
 8001288:	080012a1 	.word	0x080012a1
 800128c:	080012a9 	.word	0x080012a9
	{
		case LIGHTSON_CENLOCON:

			IntLights_CurrentState = STD_HIGH;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <IntLights_RxBtcState+0x94>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]

			break;
 8001296:	e00b      	b.n	80012b0 <IntLights_RxBtcState+0x8c>

		case LIGHTSOFF_CENLOCOFF:

			IntLights_CurrentState = STD_LOW;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <IntLights_RxBtcState+0x94>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]

			break;
 800129e:	e007      	b.n	80012b0 <IntLights_RxBtcState+0x8c>

		case LIGHTSON_INTLIGHTSON:

			IntLights_CurrentState = STD_HIGH;
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <IntLights_RxBtcState+0x94>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]

			break;
 80012a6:	e003      	b.n	80012b0 <IntLights_RxBtcState+0x8c>

		case LIGHTSOFF_INTLIGHTSOFF:

			IntLights_CurrentState = STD_LOW;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <IntLights_RxBtcState+0x94>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]

			break;
 80012ae:	bf00      	nop

	}

}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200000d5 	.word	0x200000d5

080012bc <IntLights_MainFunction>:

void IntLights_MainFunction()
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0

	IntLights_RxBtcState();
 80012c0:	f7ff ffb0 	bl	8001224 <IntLights_RxBtcState>
	IntLights_ToggleIntLights(IntLights_CurrentState);
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <IntLights_MainFunction+0x18>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f805 	bl	80012d8 <IntLights_ToggleIntLights>

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200000d5 	.word	0x200000d5

080012d8 <IntLights_ToggleIntLights>:
	return E_OK;

}

void IntLights_ToggleIntLights(uint8 PinState)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(INTERIOR_LIGHT_PORT, INTERIOR_LIGHT_PIN, PinState);
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	461a      	mov	r2, r3
 80012e6:	2104      	movs	r1, #4
 80012e8:	4803      	ldr	r0, [pc, #12]	; (80012f8 <IntLights_ToggleIntLights+0x20>)
 80012ea:	f00e fa91 	bl	800f810 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40020800 	.word	0x40020800

080012fc <SecAlm_LightsBuzzerControl>:


uint8 SecAlm_TriggerPreviousState;

void SecAlm_LightsBuzzerControl()
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0

	uint16 sensorStatus = STD_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	80fb      	strh	r3, [r7, #6]

	sensorStatus = SecAlm_VibSenStatus();
 8001306:	f000 f89b 	bl	8001440 <SecAlm_VibSenStatus>
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]

	if(SecAlm_TriggerPreviousState != SecAlm_Trigger && !SecAlm_Trigger)
 800130e:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <SecAlm_LightsBuzzerControl+0xf4>)
 8001310:	781a      	ldrb	r2, [r3, #0]
 8001312:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <SecAlm_LightsBuzzerControl+0xf8>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d006      	beq.n	8001328 <SecAlm_LightsBuzzerControl+0x2c>
 800131a:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <SecAlm_LightsBuzzerControl+0xf8>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <SecAlm_LightsBuzzerControl+0x2c>
	{

		SecAlm_TriggerIRQCounterForTimer4 = STD_LOW;
 8001322:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <SecAlm_LightsBuzzerControl+0xfc>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
 8001328:	4b33      	ldr	r3, [pc, #204]	; (80013f8 <SecAlm_LightsBuzzerControl+0xfc>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b13      	cmp	r3, #19
 800132e:	d920      	bls.n	8001372 <SecAlm_LightsBuzzerControl+0x76>
	{

		SecAlm_TriggerPreviousState 		= SecAlm_Trigger;
 8001330:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <SecAlm_LightsBuzzerControl+0xf8>)
 8001332:	781a      	ldrb	r2, [r3, #0]
 8001334:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <SecAlm_LightsBuzzerControl+0xf4>)
 8001336:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim3IRQFlag 					= STD_HIGH;
 8001338:	4b30      	ldr	r3, [pc, #192]	; (80013fc <SecAlm_LightsBuzzerControl+0x100>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
		CenLoc_Tim11IRQFlag 				= STD_LOW;
 800133e:	4b30      	ldr	r3, [pc, #192]	; (8001400 <SecAlm_LightsBuzzerControl+0x104>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
		SecAlm_Trigger 						= STD_LOW;
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <SecAlm_LightsBuzzerControl+0xf8>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange 				= STD_LOW;
 800134a:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <SecAlm_LightsBuzzerControl+0x108>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
		SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 8001350:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <SecAlm_LightsBuzzerControl+0xfc>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
		SecAlm_SensorStatusCounter 			= STD_LOW;
 8001356:	4b2c      	ldr	r3, [pc, #176]	; (8001408 <SecAlm_LightsBuzzerControl+0x10c>)
 8001358:	2200      	movs	r2, #0
 800135a:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatus 				= STD_LOW;
 800135c:	4b2b      	ldr	r3, [pc, #172]	; (800140c <SecAlm_LightsBuzzerControl+0x110>)
 800135e:	2200      	movs	r2, #0
 8001360:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatusCounter 			= STD_LOW;
 8001362:	4b29      	ldr	r3, [pc, #164]	; (8001408 <SecAlm_LightsBuzzerControl+0x10c>)
 8001364:	2200      	movs	r2, #0
 8001366:	801a      	strh	r2, [r3, #0]

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(&htim4);
 8001368:	4829      	ldr	r0, [pc, #164]	; (8001410 <SecAlm_LightsBuzzerControl+0x114>)
 800136a:	f00e fa45 	bl	800f7f8 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>
		SecAlm_TurnOnExtLights();
 800136e:	f000 f89d 	bl	80014ac <SecAlm_TurnOnExtLights>

		/* do nothing */

	}

	if(SecAlm_SensorStatusCounter == STD_LOW)
 8001372:	4b25      	ldr	r3, [pc, #148]	; (8001408 <SecAlm_LightsBuzzerControl+0x10c>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d107      	bne.n	800138a <SecAlm_LightsBuzzerControl+0x8e>
	{

		sensorStatus 	= STD_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	80fb      	strh	r3, [r7, #6]
		SecAlm_Trigger 	= STD_LOW;
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <SecAlm_LightsBuzzerControl+0xf8>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange = STD_LOW;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <SecAlm_LightsBuzzerControl+0x108>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(sensorStatus == STD_HIGH)
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d102      	bne.n	8001396 <SecAlm_LightsBuzzerControl+0x9a>
	{

		SecAlm_Trigger = STD_HIGH;
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <SecAlm_LightsBuzzerControl+0xf8>)
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]

		/* do nothing */

	}

	if(SecAlm_Trigger == STD_HIGH)
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <SecAlm_LightsBuzzerControl+0xf8>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d11c      	bne.n	80013d8 <SecAlm_LightsBuzzerControl+0xdc>
	{

		Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(&htim4);
 800139e:	481c      	ldr	r0, [pc, #112]	; (8001410 <SecAlm_LightsBuzzerControl+0x114>)
 80013a0:	f00e fa1e 	bl	800f7e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>

		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <SecAlm_LightsBuzzerControl+0xfc>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d005      	beq.n	80013be <SecAlm_LightsBuzzerControl+0xc2>
		{

			SecAlm_PinStateChange = STD_HIGH;
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <SecAlm_LightsBuzzerControl+0x108>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 80013b8:	f000 f878 	bl	80014ac <SecAlm_TurnOnExtLights>

		/* do nothing */

	}

}
 80013bc:	e013      	b.n	80013e6 <SecAlm_LightsBuzzerControl+0xea>
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <SecAlm_LightsBuzzerControl+0xfc>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10c      	bne.n	80013e6 <SecAlm_LightsBuzzerControl+0xea>
			SecAlm_PinStateChange = STD_LOW;
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <SecAlm_LightsBuzzerControl+0x108>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 80013d2:	f000 f86b 	bl	80014ac <SecAlm_TurnOnExtLights>
}
 80013d6:	e006      	b.n	80013e6 <SecAlm_LightsBuzzerControl+0xea>
	else if(SecAlm_Trigger == STD_LOW)
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <SecAlm_LightsBuzzerControl+0xf8>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <SecAlm_LightsBuzzerControl+0xea>
		SecAlm_ToggleAlarmBuzzer(STD_LOW);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 f8b7 	bl	8001554 <SecAlm_ToggleAlarmBuzzer>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200000de 	.word	0x200000de
 80013f4:	200000d6 	.word	0x200000d6
 80013f8:	200000d8 	.word	0x200000d8
 80013fc:	200000af 	.word	0x200000af
 8001400:	200000b1 	.word	0x200000b1
 8001404:	200000d7 	.word	0x200000d7
 8001408:	200000da 	.word	0x200000da
 800140c:	200000dc 	.word	0x200000dc
 8001410:	20000758 	.word	0x20000758

08001414 <SecAlm_VibSenReadSensorValue>:


uint16 SecAlm_VibSenReadSensorValue()
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0

	uint16 sensorValue = STD_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	80fb      	strh	r3, [r7, #6]

	Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, 2);
 800141e:	2202      	movs	r2, #2
 8001420:	4905      	ldr	r1, [pc, #20]	; (8001438 <SecAlm_VibSenReadSensorValue+0x24>)
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <SecAlm_VibSenReadSensorValue+0x28>)
 8001424:	f00e fa07 	bl	800f836 <Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA>

	sensorValue = ADC_BUFFER[0];
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <SecAlm_VibSenReadSensorValue+0x24>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	80fb      	strh	r3, [r7, #6]

	return sensorValue;
 800142e:	88fb      	ldrh	r3, [r7, #6]

}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200000cc 	.word	0x200000cc
 800143c:	200000e0 	.word	0x200000e0

08001440 <SecAlm_VibSenStatus>:

StdReturnType SecAlm_VibSenStatus()
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0

	uint16 sensorValue 		= STD_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	80bb      	strh	r3, [r7, #4]
	uint16 sensorStatus 	= STD_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	80fb      	strh	r3, [r7, #6]

	sensorValue = SecAlm_VibSenReadSensorValue();
 800144e:	f7ff ffe1 	bl	8001414 <SecAlm_VibSenReadSensorValue>
 8001452:	4603      	mov	r3, r0
 8001454:	80bb      	strh	r3, [r7, #4]
//
//		lastTick = currentTick;
//
//	}

	if(sensorValue == 4095)
 8001456:	88bb      	ldrh	r3, [r7, #4]
 8001458:	f640 72ff 	movw	r2, #4095	; 0xfff
 800145c:	4293      	cmp	r3, r2
 800145e:	d10c      	bne.n	800147a <SecAlm_VibSenStatus+0x3a>
	{

		SecAlm_SensorStatusCounter = SecAlm_SensorStatusCounter + 1;
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <SecAlm_VibSenStatus+0x64>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	b29a      	uxth	r2, r3
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <SecAlm_VibSenStatus+0x64>)
 800146a:	801a      	strh	r2, [r3, #0]
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlm_AlarmResetHandle, 10000);
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <SecAlm_VibSenStatus+0x68>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f242 7110 	movw	r1, #10000	; 0x2710
 8001474:	4618      	mov	r0, r3
 8001476:	f00e f9ee 	bl	800f856 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>

		/* do nothing */

	}

	if(SecAlm_SensorStatusCounter >= 2000)
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <SecAlm_VibSenStatus+0x64>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001482:	d302      	bcc.n	800148a <SecAlm_VibSenStatus+0x4a>
	{

		sensorStatus = STD_HIGH;
 8001484:	2301      	movs	r3, #1
 8001486:	80fb      	strh	r3, [r7, #6]
 8001488:	e006      	b.n	8001498 <SecAlm_VibSenStatus+0x58>

	}
	else if(SecAlm_SensorStatusCounter < 2000)
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <SecAlm_VibSenStatus+0x64>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001492:	d201      	bcs.n	8001498 <SecAlm_VibSenStatus+0x58>
	{

		sensorStatus = STD_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	80fb      	strh	r3, [r7, #6]

		/* do nothing */

	}

	return sensorStatus;
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	b2db      	uxtb	r3, r3

}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200000da 	.word	0x200000da
 80014a8:	200001dc 	.word	0x200001dc

080014ac <SecAlm_TurnOnExtLights>:


void SecAlm_TurnOnExtLights()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_LowBeam(SecAlm_PinStateChange);
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <SecAlm_TurnOnExtLights+0x50>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fdef 	bl	8001098 <ExtLights_LowBeam>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_RearPositionLight(SecAlm_PinStateChange);
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <SecAlm_TurnOnExtLights+0x50>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fe56 	bl	8001170 <ExtLights_RearPositionLight>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_FrontFogLight(SecAlm_PinStateChange);
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <SecAlm_TurnOnExtLights+0x50>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fe1b 	bl	8001104 <ExtLights_FrontFogLight>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_RearFogLight(SecAlm_PinStateChange);
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <SecAlm_TurnOnExtLights+0x50>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fe5e 	bl	8001194 <ExtLights_RearFogLight>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_TurnSignalRight(SecAlm_PinStateChange);
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <SecAlm_TurnOnExtLights+0x50>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fe35 	bl	800114c <ExtLights_TurnSignalRight>
	Rte_Call_ExtLights_R_ExtLightsPort_ExtLights_TurnSignalLeft(SecAlm_PinStateChange);
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <SecAlm_TurnOnExtLights+0x50>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fe1e 	bl	8001128 <ExtLights_TurnSignalLeft>
	SecAlm_ToggleAlarmBuzzer(SecAlm_PinStateChange);
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <SecAlm_TurnOnExtLights+0x50>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 f82f 	bl	8001554 <SecAlm_ToggleAlarmBuzzer>

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200000d7 	.word	0x200000d7

08001500 <SecAlm_MainFunction>:

void SecAlm_MainFunction()
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0

	SecAlm_LightsBuzzerControl();
 8001504:	f7ff fefa 	bl	80012fc <SecAlm_LightsBuzzerControl>

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <SecAlm_Init>:


StdReturnType SecAlm_Init()
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0

	SecAlm_Trigger 						= STD_LOW;
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <SecAlm_Init+0x30>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
	SecAlm_PinStateChange 				= STD_LOW;
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <SecAlm_Init+0x34>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <SecAlm_Init+0x38>)
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
	SecAlm_SensorStatusCounter 			= STD_LOW;
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <SecAlm_Init+0x3c>)
 8001524:	2200      	movs	r2, #0
 8001526:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorStatus 				= STD_LOW;
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <SecAlm_Init+0x40>)
 800152a:	2200      	movs	r2, #0
 800152c:	801a      	strh	r2, [r3, #0]

	Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(&htim4);
 800152e:	4808      	ldr	r0, [pc, #32]	; (8001550 <SecAlm_Init+0x44>)
 8001530:	f00e f94a 	bl	800f7c8 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>

	return E_OK;
 8001534:	2300      	movs	r3, #0

}
 8001536:	4618      	mov	r0, r3
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200000d6 	.word	0x200000d6
 8001540:	200000d7 	.word	0x200000d7
 8001544:	200000d8 	.word	0x200000d8
 8001548:	200000da 	.word	0x200000da
 800154c:	200000dc 	.word	0x200000dc
 8001550:	20000758 	.word	0x20000758

08001554 <SecAlm_ToggleAlarmBuzzer>:


void SecAlm_ToggleAlarmBuzzer(uint8 PinState)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	461a      	mov	r2, r3
 8001562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001566:	4803      	ldr	r0, [pc, #12]	; (8001574 <SecAlm_ToggleAlarmBuzzer+0x20>)
 8001568:	f00e f952 	bl	800f810 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40020400 	.word	0x40020400

08001578 <SecAlm_ToggleAlarmLed>:


void SecAlm_ToggleAlarmLed(uint8 PinState)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]

	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	461a      	mov	r2, r3
 8001586:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800158a:	4803      	ldr	r0, [pc, #12]	; (8001598 <SecAlm_ToggleAlarmLed+0x20>)
 800158c:	f00e f940 	bl	800f810 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>

}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40020000 	.word	0x40020000

0800159c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015a2:	463b      	mov	r3, r7
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015ae:	4b28      	ldr	r3, [pc, #160]	; (8001650 <MX_ADC1_Init+0xb4>)
 80015b0:	4a28      	ldr	r2, [pc, #160]	; (8001654 <MX_ADC1_Init+0xb8>)
 80015b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015b4:	4b26      	ldr	r3, [pc, #152]	; (8001650 <MX_ADC1_Init+0xb4>)
 80015b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <MX_ADC1_Init+0xb4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <MX_ADC1_Init+0xb4>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015c8:	4b21      	ldr	r3, [pc, #132]	; (8001650 <MX_ADC1_Init+0xb4>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <MX_ADC1_Init+0xb4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015d6:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <MX_ADC1_Init+0xb4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <MX_ADC1_Init+0xb4>)
 80015de:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <MX_ADC1_Init+0xbc>)
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_ADC1_Init+0xb4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <MX_ADC1_Init+0xb4>)
 80015ea:	2202      	movs	r2, #2
 80015ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_ADC1_Init+0xb4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <MX_ADC1_Init+0xb4>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015fc:	4814      	ldr	r0, [pc, #80]	; (8001650 <MX_ADC1_Init+0xb4>)
 80015fe:	f002 f8ff 	bl	8003800 <HAL_ADC_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001608:	f001 f914 	bl	8002834 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800160c:	2306      	movs	r3, #6
 800160e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001610:	2301      	movs	r3, #1
 8001612:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001618:	463b      	mov	r3, r7
 800161a:	4619      	mov	r1, r3
 800161c:	480c      	ldr	r0, [pc, #48]	; (8001650 <MX_ADC1_Init+0xb4>)
 800161e:	f002 fcf3 	bl	8004008 <HAL_ADC_ConfigChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001628:	f001 f904 	bl	8002834 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800162c:	230f      	movs	r3, #15
 800162e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001630:	2302      	movs	r3, #2
 8001632:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_ADC1_Init+0xb4>)
 800163a:	f002 fce5 	bl	8004008 <HAL_ADC_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001644:	f001 f8f6 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200000e0 	.word	0x200000e0
 8001654:	40012000 	.word	0x40012000
 8001658:	0f000001 	.word	0x0f000001

0800165c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a3f      	ldr	r2, [pc, #252]	; (8001778 <HAL_ADC_MspInit+0x11c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d178      	bne.n	8001770 <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b3e      	ldr	r3, [pc, #248]	; (800177c <HAL_ADC_MspInit+0x120>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a3d      	ldr	r2, [pc, #244]	; (800177c <HAL_ADC_MspInit+0x120>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <HAL_ADC_MspInit+0x120>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b37      	ldr	r3, [pc, #220]	; (800177c <HAL_ADC_MspInit+0x120>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a36      	ldr	r2, [pc, #216]	; (800177c <HAL_ADC_MspInit+0x120>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b34      	ldr	r3, [pc, #208]	; (800177c <HAL_ADC_MspInit+0x120>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b30      	ldr	r3, [pc, #192]	; (800177c <HAL_ADC_MspInit+0x120>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a2f      	ldr	r2, [pc, #188]	; (800177c <HAL_ADC_MspInit+0x120>)
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b2d      	ldr	r3, [pc, #180]	; (800177c <HAL_ADC_MspInit+0x120>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016d2:	2340      	movs	r3, #64	; 0x40
 80016d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d6:	2303      	movs	r3, #3
 80016d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4826      	ldr	r0, [pc, #152]	; (8001780 <HAL_ADC_MspInit+0x124>)
 80016e6:	f004 f877 	bl	80057d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LIGHTSEN_Pin;
 80016ea:	2320      	movs	r3, #32
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ee:	2303      	movs	r3, #3
 80016f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LIGHTSEN_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	4821      	ldr	r0, [pc, #132]	; (8001784 <HAL_ADC_MspInit+0x128>)
 80016fe:	f004 f86b 	bl	80057d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <HAL_ADC_MspInit+0x12c>)
 8001704:	4a21      	ldr	r2, [pc, #132]	; (800178c <HAL_ADC_MspInit+0x130>)
 8001706:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001708:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <HAL_ADC_MspInit+0x12c>)
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170e:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <HAL_ADC_MspInit+0x12c>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001714:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <HAL_ADC_MspInit+0x12c>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800171a:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_ADC_MspInit+0x12c>)
 800171c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001720:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_ADC_MspInit+0x12c>)
 8001724:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001728:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <HAL_ADC_MspInit+0x12c>)
 800172c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001730:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_ADC_MspInit+0x12c>)
 8001734:	2200      	movs	r2, #0
 8001736:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <HAL_ADC_MspInit+0x12c>)
 800173a:	2200      	movs	r2, #0
 800173c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_ADC_MspInit+0x12c>)
 8001740:	2200      	movs	r2, #0
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001744:	4810      	ldr	r0, [pc, #64]	; (8001788 <HAL_ADC_MspInit+0x12c>)
 8001746:	f003 f8e7 	bl	8004918 <HAL_DMA_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001750:	f001 f870 	bl	8002834 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a0c      	ldr	r2, [pc, #48]	; (8001788 <HAL_ADC_MspInit+0x12c>)
 8001758:	639a      	str	r2, [r3, #56]	; 0x38
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <HAL_ADC_MspInit+0x12c>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2105      	movs	r1, #5
 8001764:	2012      	movs	r0, #18
 8001766:	f003 f851 	bl	800480c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800176a:	2012      	movs	r0, #18
 800176c:	f003 f87a 	bl	8004864 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40012000 	.word	0x40012000
 800177c:	40023800 	.word	0x40023800
 8001780:	40020000 	.word	0x40020000
 8001784:	40020800 	.word	0x40020800
 8001788:	20000144 	.word	0x20000144
 800178c:	40026410 	.word	0x40026410

08001790 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_CRC_Init+0x20>)
 8001796:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <MX_CRC_Init+0x24>)
 8001798:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_CRC_Init+0x20>)
 800179c:	f003 f892 	bl	80048c4 <HAL_CRC_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80017a6:	f001 f845 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200001a4 	.word	0x200001a4
 80017b4:	40023000 	.word	0x40023000

080017b8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <HAL_CRC_MspInit+0x3c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10d      	bne.n	80017e6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_CRC_MspInit+0x40>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <HAL_CRC_MspInit+0x40>)
 80017d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <HAL_CRC_MspInit+0x40>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40023000 	.word	0x40023000
 80017f8:	40023800 	.word	0x40023800

080017fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_DMA_Init+0x3c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <MX_DMA_Init+0x3c>)
 800180c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_DMA_Init+0x3c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2105      	movs	r1, #5
 8001822:	2038      	movs	r0, #56	; 0x38
 8001824:	f002 fff2 	bl	800480c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001828:	2038      	movs	r0, #56	; 0x38
 800182a:	f003 f81b 	bl	8004864 <HAL_NVIC_EnableIRQ>

}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <configureTimerForRunTimeStats>:
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
return 0;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <PreSleepProcessing>:
/* USER CODE END DAEMON_TASK_STARTUP_HOOK */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Os_SecAlm_AlarmReset */
  Os_SecAlm_AlarmResetHandle = osTimerNew(Os_SecAlm_AlarmReset_Callback, osTimerPeriodic, NULL, &Os_SecAlm_AlarmReset_attributes);
 80018d4:	4ba9      	ldr	r3, [pc, #676]	; (8001b7c <MX_FREERTOS_Init+0x2ac>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	2101      	movs	r1, #1
 80018da:	48a9      	ldr	r0, [pc, #676]	; (8001b80 <MX_FREERTOS_Init+0x2b0>)
 80018dc:	f00a fdda 	bl	800c494 <osTimerNew>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4aa8      	ldr	r2, [pc, #672]	; (8001b84 <MX_FREERTOS_Init+0x2b4>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* creation of Os_CenLoc_LockUnlockSequence_Timer */
  Os_CenLoc_LockUnlockSequence_TimerHandle = osTimerNew(Os_CenLoc_LockUnlockSequence_Timer_Callback, osTimerPeriodic, NULL, &Os_CenLoc_LockUnlockSequence_Timer_attributes);
 80018e6:	4ba8      	ldr	r3, [pc, #672]	; (8001b88 <MX_FREERTOS_Init+0x2b8>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	2101      	movs	r1, #1
 80018ec:	48a7      	ldr	r0, [pc, #668]	; (8001b8c <MX_FREERTOS_Init+0x2bc>)
 80018ee:	f00a fdd1 	bl	800c494 <osTimerNew>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4aa6      	ldr	r2, [pc, #664]	; (8001b90 <MX_FREERTOS_Init+0x2c0>)
 80018f6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of QM_APPL_HP */
  QM_APPL_HPHandle = osThreadNew(OS_TASK_QM_APPL_HP, NULL, &QM_APPL_HP_attributes);
 80018f8:	4aa6      	ldr	r2, [pc, #664]	; (8001b94 <MX_FREERTOS_Init+0x2c4>)
 80018fa:	2100      	movs	r1, #0
 80018fc:	48a6      	ldr	r0, [pc, #664]	; (8001b98 <MX_FREERTOS_Init+0x2c8>)
 80018fe:	f00a fd05 	bl	800c30c <osThreadNew>
 8001902:	4603      	mov	r3, r0
 8001904:	4aa5      	ldr	r2, [pc, #660]	; (8001b9c <MX_FREERTOS_Init+0x2cc>)
 8001906:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_LP */
  QM_APPL_LPHandle = osThreadNew(OS_TASK_QM_APPL_LP, NULL, &QM_APPL_LP_attributes);
 8001908:	4aa5      	ldr	r2, [pc, #660]	; (8001ba0 <MX_FREERTOS_Init+0x2d0>)
 800190a:	2100      	movs	r1, #0
 800190c:	48a5      	ldr	r0, [pc, #660]	; (8001ba4 <MX_FREERTOS_Init+0x2d4>)
 800190e:	f00a fcfd 	bl	800c30c <osThreadNew>
 8001912:	4603      	mov	r3, r0
 8001914:	4aa4      	ldr	r2, [pc, #656]	; (8001ba8 <MX_FREERTOS_Init+0x2d8>)
 8001916:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_HP */
  ASIL_APPL_HPHandle = osThreadNew(OS_TASK_ASIL_APPL_HP, NULL, &ASIL_APPL_HP_attributes);
 8001918:	4aa4      	ldr	r2, [pc, #656]	; (8001bac <MX_FREERTOS_Init+0x2dc>)
 800191a:	2100      	movs	r1, #0
 800191c:	48a4      	ldr	r0, [pc, #656]	; (8001bb0 <MX_FREERTOS_Init+0x2e0>)
 800191e:	f00a fcf5 	bl	800c30c <osThreadNew>
 8001922:	4603      	mov	r3, r0
 8001924:	4aa3      	ldr	r2, [pc, #652]	; (8001bb4 <MX_FREERTOS_Init+0x2e4>)
 8001926:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_LP */
  ASIL_APPL_LPHandle = osThreadNew(OS_TASK_ASIL_APPL_LP, NULL, &ASIL_APPL_LP_attributes);
 8001928:	4aa3      	ldr	r2, [pc, #652]	; (8001bb8 <MX_FREERTOS_Init+0x2e8>)
 800192a:	2100      	movs	r1, #0
 800192c:	48a3      	ldr	r0, [pc, #652]	; (8001bbc <MX_FREERTOS_Init+0x2ec>)
 800192e:	f00a fced 	bl	800c30c <osThreadNew>
 8001932:	4603      	mov	r3, r0
 8001934:	4aa2      	ldr	r2, [pc, #648]	; (8001bc0 <MX_FREERTOS_Init+0x2f0>)
 8001936:	6013      	str	r3, [r2, #0]

  /* creation of OS_COUNTER */
  OS_COUNTERHandle = osThreadNew(OS_TASK_OS_COUNTER, NULL, &OS_COUNTER_attributes);
 8001938:	4aa2      	ldr	r2, [pc, #648]	; (8001bc4 <MX_FREERTOS_Init+0x2f4>)
 800193a:	2100      	movs	r1, #0
 800193c:	48a2      	ldr	r0, [pc, #648]	; (8001bc8 <MX_FREERTOS_Init+0x2f8>)
 800193e:	f00a fce5 	bl	800c30c <osThreadNew>
 8001942:	4603      	mov	r3, r0
 8001944:	4aa1      	ldr	r2, [pc, #644]	; (8001bcc <MX_FREERTOS_Init+0x2fc>)
 8001946:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_HP */
  QM_BSW_HPHandle = osThreadNew(OS_TASK_QM_BSW_HP, NULL, &QM_BSW_HP_attributes);
 8001948:	4aa1      	ldr	r2, [pc, #644]	; (8001bd0 <MX_FREERTOS_Init+0x300>)
 800194a:	2100      	movs	r1, #0
 800194c:	48a1      	ldr	r0, [pc, #644]	; (8001bd4 <MX_FREERTOS_Init+0x304>)
 800194e:	f00a fcdd 	bl	800c30c <osThreadNew>
 8001952:	4603      	mov	r3, r0
 8001954:	4aa0      	ldr	r2, [pc, #640]	; (8001bd8 <MX_FREERTOS_Init+0x308>)
 8001956:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_LP */
  QM_BSW_LPHandle = osThreadNew(OS_TASK_QM_BSW_LP, NULL, &QM_BSW_LP_attributes);
 8001958:	4aa0      	ldr	r2, [pc, #640]	; (8001bdc <MX_FREERTOS_Init+0x30c>)
 800195a:	2100      	movs	r1, #0
 800195c:	48a0      	ldr	r0, [pc, #640]	; (8001be0 <MX_FREERTOS_Init+0x310>)
 800195e:	f00a fcd5 	bl	800c30c <osThreadNew>
 8001962:	4603      	mov	r3, r0
 8001964:	4a9f      	ldr	r2, [pc, #636]	; (8001be4 <MX_FREERTOS_Init+0x314>)
 8001966:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_HP */
  ASIL_BSW_HPHandle = osThreadNew(OS_TASK_ASIL_BSW_HP, NULL, &ASIL_BSW_HP_attributes);
 8001968:	4a9f      	ldr	r2, [pc, #636]	; (8001be8 <MX_FREERTOS_Init+0x318>)
 800196a:	2100      	movs	r1, #0
 800196c:	489f      	ldr	r0, [pc, #636]	; (8001bec <MX_FREERTOS_Init+0x31c>)
 800196e:	f00a fccd 	bl	800c30c <osThreadNew>
 8001972:	4603      	mov	r3, r0
 8001974:	4a9e      	ldr	r2, [pc, #632]	; (8001bf0 <MX_FREERTOS_Init+0x320>)
 8001976:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_LP */
  ASIL_BSW_LPHandle = osThreadNew(OS_TASK_ASIL_BSW_LP, NULL, &ASIL_BSW_LP_attributes);
 8001978:	4a9e      	ldr	r2, [pc, #632]	; (8001bf4 <MX_FREERTOS_Init+0x324>)
 800197a:	2100      	movs	r1, #0
 800197c:	489e      	ldr	r0, [pc, #632]	; (8001bf8 <MX_FREERTOS_Init+0x328>)
 800197e:	f00a fcc5 	bl	800c30c <osThreadNew>
 8001982:	4603      	mov	r3, r0
 8001984:	4a9d      	ldr	r2, [pc, #628]	; (8001bfc <MX_FREERTOS_Init+0x32c>)
 8001986:	6013      	str	r3, [r2, #0]

  /* creation of OsInit */
  OsInitHandle = osThreadNew(TASK_OS_OsInit, NULL, &OsInit_attributes);
 8001988:	4a9d      	ldr	r2, [pc, #628]	; (8001c00 <MX_FREERTOS_Init+0x330>)
 800198a:	2100      	movs	r1, #0
 800198c:	489d      	ldr	r0, [pc, #628]	; (8001c04 <MX_FREERTOS_Init+0x334>)
 800198e:	f00a fcbd 	bl	800c30c <osThreadNew>
 8001992:	4603      	mov	r3, r0
 8001994:	4a9c      	ldr	r2, [pc, #624]	; (8001c08 <MX_FREERTOS_Init+0x338>)
 8001996:	6013      	str	r3, [r2, #0]

  /* creation of Watchdog_MainFunction */
  Watchdog_MainFunctionHandle = osThreadNew(TASK_OS_Watchdog_MainFunction, NULL, &Watchdog_MainFunction_attributes);
 8001998:	4a9c      	ldr	r2, [pc, #624]	; (8001c0c <MX_FREERTOS_Init+0x33c>)
 800199a:	2100      	movs	r1, #0
 800199c:	489c      	ldr	r0, [pc, #624]	; (8001c10 <MX_FREERTOS_Init+0x340>)
 800199e:	f00a fcb5 	bl	800c30c <osThreadNew>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4a9b      	ldr	r2, [pc, #620]	; (8001c14 <MX_FREERTOS_Init+0x344>)
 80019a6:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of SysEvent_WatchdogReset */
  SysEvent_WatchdogResetHandle = osEventFlagsNew(&SysEvent_WatchdogReset_attributes);
 80019a8:	489b      	ldr	r0, [pc, #620]	; (8001c18 <MX_FREERTOS_Init+0x348>)
 80019aa:	f00a fe54 	bl	800c656 <osEventFlagsNew>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4a9a      	ldr	r2, [pc, #616]	; (8001c1c <MX_FREERTOS_Init+0x34c>)
 80019b2:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_PowerOnReset */
  SysEvent_PowerOnResetHandle = osEventFlagsNew(&SysEvent_PowerOnReset_attributes);
 80019b4:	489a      	ldr	r0, [pc, #616]	; (8001c20 <MX_FREERTOS_Init+0x350>)
 80019b6:	f00a fe4e 	bl	800c656 <osEventFlagsNew>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a99      	ldr	r2, [pc, #612]	; (8001c24 <MX_FREERTOS_Init+0x354>)
 80019be:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_CoreReset */
  SysEvent_CoreResetHandle = osEventFlagsNew(&SysEvent_CoreReset_attributes);
 80019c0:	4899      	ldr	r0, [pc, #612]	; (8001c28 <MX_FREERTOS_Init+0x358>)
 80019c2:	f00a fe48 	bl	800c656 <osEventFlagsNew>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a98      	ldr	r2, [pc, #608]	; (8001c2c <MX_FREERTOS_Init+0x35c>)
 80019ca:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_HardwareReset */
  SysEvent_HardwareResetHandle = osEventFlagsNew(&SysEvent_HardwareReset_attributes);
 80019cc:	4898      	ldr	r0, [pc, #608]	; (8001c30 <MX_FREERTOS_Init+0x360>)
 80019ce:	f00a fe42 	bl	800c656 <osEventFlagsNew>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4a97      	ldr	r2, [pc, #604]	; (8001c34 <MX_FREERTOS_Init+0x364>)
 80019d6:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_HardFault */
  SysEvent_HardFaultHandle = osEventFlagsNew(&SysEvent_HardFault_attributes);
 80019d8:	4897      	ldr	r0, [pc, #604]	; (8001c38 <MX_FREERTOS_Init+0x368>)
 80019da:	f00a fe3c 	bl	800c656 <osEventFlagsNew>
 80019de:	4603      	mov	r3, r0
 80019e0:	4a96      	ldr	r2, [pc, #600]	; (8001c3c <MX_FREERTOS_Init+0x36c>)
 80019e2:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_MemHandlerFault */
  SysEvent_MemHandlerFaultHandle = osEventFlagsNew(&SysEvent_MemHandlerFault_attributes);
 80019e4:	4896      	ldr	r0, [pc, #600]	; (8001c40 <MX_FREERTOS_Init+0x370>)
 80019e6:	f00a fe36 	bl	800c656 <osEventFlagsNew>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4a95      	ldr	r2, [pc, #596]	; (8001c44 <MX_FREERTOS_Init+0x374>)
 80019ee:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_BusFault */
  SysEvent_BusFaultHandle = osEventFlagsNew(&SysEvent_BusFault_attributes);
 80019f0:	4895      	ldr	r0, [pc, #596]	; (8001c48 <MX_FREERTOS_Init+0x378>)
 80019f2:	f00a fe30 	bl	800c656 <osEventFlagsNew>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4a94      	ldr	r2, [pc, #592]	; (8001c4c <MX_FREERTOS_Init+0x37c>)
 80019fa:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_NonMaskableInterrupt */
  SysEvent_NonMaskableInterruptHandle = osEventFlagsNew(&SysEvent_NonMaskableInterrupt_attributes);
 80019fc:	4894      	ldr	r0, [pc, #592]	; (8001c50 <MX_FREERTOS_Init+0x380>)
 80019fe:	f00a fe2a 	bl	800c656 <osEventFlagsNew>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4a93      	ldr	r2, [pc, #588]	; (8001c54 <MX_FREERTOS_Init+0x384>)
 8001a06:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_UsageFault */
  SysEvent_UsageFaultHandle = osEventFlagsNew(&SysEvent_UsageFault_attributes);
 8001a08:	4893      	ldr	r0, [pc, #588]	; (8001c58 <MX_FREERTOS_Init+0x388>)
 8001a0a:	f00a fe24 	bl	800c656 <osEventFlagsNew>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4a92      	ldr	r2, [pc, #584]	; (8001c5c <MX_FREERTOS_Init+0x38c>)
 8001a12:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_DebugMonFault */
  SysEvent_DebugMonFaultHandle = osEventFlagsNew(&SysEvent_DebugMonFault_attributes);
 8001a14:	4892      	ldr	r0, [pc, #584]	; (8001c60 <MX_FREERTOS_Init+0x390>)
 8001a16:	f00a fe1e 	bl	800c656 <osEventFlagsNew>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4a91      	ldr	r2, [pc, #580]	; (8001c64 <MX_FREERTOS_Init+0x394>)
 8001a1e:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_WWDGInterrupt */
  SysEvent_WWDGInterruptHandle = osEventFlagsNew(&SysEvent_WWDGInterrupt_attributes);
 8001a20:	4891      	ldr	r0, [pc, #580]	; (8001c68 <MX_FREERTOS_Init+0x398>)
 8001a22:	f00a fe18 	bl	800c656 <osEventFlagsNew>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4a90      	ldr	r2, [pc, #576]	; (8001c6c <MX_FREERTOS_Init+0x39c>)
 8001a2a:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_PVDInterrupt */
  SysEvent_PVDInterruptHandle = osEventFlagsNew(&SysEvent_PVDInterrupt_attributes);
 8001a2c:	4890      	ldr	r0, [pc, #576]	; (8001c70 <MX_FREERTOS_Init+0x3a0>)
 8001a2e:	f00a fe12 	bl	800c656 <osEventFlagsNew>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4a8f      	ldr	r2, [pc, #572]	; (8001c74 <MX_FREERTOS_Init+0x3a4>)
 8001a36:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_RTCWakeupInterrupt */
  SysEvent_RTCWakeupInterruptHandle = osEventFlagsNew(&SysEvent_RTCWakeupInterrupt_attributes);
 8001a38:	488f      	ldr	r0, [pc, #572]	; (8001c78 <MX_FREERTOS_Init+0x3a8>)
 8001a3a:	f00a fe0c 	bl	800c656 <osEventFlagsNew>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4a8e      	ldr	r2, [pc, #568]	; (8001c7c <MX_FREERTOS_Init+0x3ac>)
 8001a42:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_FlashInterurpt */
  SysEvent_FlashInterurptHandle = osEventFlagsNew(&SysEvent_FlashInterurpt_attributes);
 8001a44:	488e      	ldr	r0, [pc, #568]	; (8001c80 <MX_FREERTOS_Init+0x3b0>)
 8001a46:	f00a fe06 	bl	800c656 <osEventFlagsNew>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a8d      	ldr	r2, [pc, #564]	; (8001c84 <MX_FREERTOS_Init+0x3b4>)
 8001a4e:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_RCCInterrupt */
  SysEvent_RCCInterruptHandle = osEventFlagsNew(&SysEvent_RCCInterrupt_attributes);
 8001a50:	488d      	ldr	r0, [pc, #564]	; (8001c88 <MX_FREERTOS_Init+0x3b8>)
 8001a52:	f00a fe00 	bl	800c656 <osEventFlagsNew>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4a8c      	ldr	r2, [pc, #560]	; (8001c8c <MX_FREERTOS_Init+0x3bc>)
 8001a5a:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_ADCInterrupt */
  SysEvent_ADCInterruptHandle = osEventFlagsNew(&SysEvent_ADCInterrupt_attributes);
 8001a5c:	488c      	ldr	r0, [pc, #560]	; (8001c90 <MX_FREERTOS_Init+0x3c0>)
 8001a5e:	f00a fdfa 	bl	800c656 <osEventFlagsNew>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4a8b      	ldr	r2, [pc, #556]	; (8001c94 <MX_FREERTOS_Init+0x3c4>)
 8001a66:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_TIM1Interrupt */
  SysEvent_TIM1InterruptHandle = osEventFlagsNew(&SysEvent_TIM1Interrupt_attributes);
 8001a68:	488b      	ldr	r0, [pc, #556]	; (8001c98 <MX_FREERTOS_Init+0x3c8>)
 8001a6a:	f00a fdf4 	bl	800c656 <osEventFlagsNew>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4a8a      	ldr	r2, [pc, #552]	; (8001c9c <MX_FREERTOS_Init+0x3cc>)
 8001a72:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_TIM2Interrupt */
  SysEvent_TIM2InterruptHandle = osEventFlagsNew(&SysEvent_TIM2Interrupt_attributes);
 8001a74:	488a      	ldr	r0, [pc, #552]	; (8001ca0 <MX_FREERTOS_Init+0x3d0>)
 8001a76:	f00a fdee 	bl	800c656 <osEventFlagsNew>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a89      	ldr	r2, [pc, #548]	; (8001ca4 <MX_FREERTOS_Init+0x3d4>)
 8001a7e:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_TIM3Interrupt */
  SysEvent_TIM3InterruptHandle = osEventFlagsNew(&SysEvent_TIM3Interrupt_attributes);
 8001a80:	4889      	ldr	r0, [pc, #548]	; (8001ca8 <MX_FREERTOS_Init+0x3d8>)
 8001a82:	f00a fde8 	bl	800c656 <osEventFlagsNew>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4a88      	ldr	r2, [pc, #544]	; (8001cac <MX_FREERTOS_Init+0x3dc>)
 8001a8a:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_TIM4Interrupt */
  SysEvent_TIM4InterruptHandle = osEventFlagsNew(&SysEvent_TIM4Interrupt_attributes);
 8001a8c:	4888      	ldr	r0, [pc, #544]	; (8001cb0 <MX_FREERTOS_Init+0x3e0>)
 8001a8e:	f00a fde2 	bl	800c656 <osEventFlagsNew>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a87      	ldr	r2, [pc, #540]	; (8001cb4 <MX_FREERTOS_Init+0x3e4>)
 8001a96:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_TIM5Interrupt */
  SysEvent_TIM5InterruptHandle = osEventFlagsNew(&SysEvent_TIM5Interrupt_attributes);
 8001a98:	4887      	ldr	r0, [pc, #540]	; (8001cb8 <MX_FREERTOS_Init+0x3e8>)
 8001a9a:	f00a fddc 	bl	800c656 <osEventFlagsNew>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4a86      	ldr	r2, [pc, #536]	; (8001cbc <MX_FREERTOS_Init+0x3ec>)
 8001aa2:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_TIM9Interrupt */
  SysEvent_TIM9InterruptHandle = osEventFlagsNew(&SysEvent_TIM9Interrupt_attributes);
 8001aa4:	4886      	ldr	r0, [pc, #536]	; (8001cc0 <MX_FREERTOS_Init+0x3f0>)
 8001aa6:	f00a fdd6 	bl	800c656 <osEventFlagsNew>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4a85      	ldr	r2, [pc, #532]	; (8001cc4 <MX_FREERTOS_Init+0x3f4>)
 8001aae:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_TIM11Interrupt */
  SysEvent_TIM11InterruptHandle = osEventFlagsNew(&SysEvent_TIM11Interrupt_attributes);
 8001ab0:	4885      	ldr	r0, [pc, #532]	; (8001cc8 <MX_FREERTOS_Init+0x3f8>)
 8001ab2:	f00a fdd0 	bl	800c656 <osEventFlagsNew>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a84      	ldr	r2, [pc, #528]	; (8001ccc <MX_FREERTOS_Init+0x3fc>)
 8001aba:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_TIMFault */
  SysEvent_TIMFaultHandle = osEventFlagsNew(&SysEvent_TIMFault_attributes);
 8001abc:	4884      	ldr	r0, [pc, #528]	; (8001cd0 <MX_FREERTOS_Init+0x400>)
 8001abe:	f00a fdca 	bl	800c656 <osEventFlagsNew>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4a83      	ldr	r2, [pc, #524]	; (8001cd4 <MX_FREERTOS_Init+0x404>)
 8001ac6:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_I2CInterrupt */
  SysEvent_I2CInterruptHandle = osEventFlagsNew(&SysEvent_I2CInterrupt_attributes);
 8001ac8:	4883      	ldr	r0, [pc, #524]	; (8001cd8 <MX_FREERTOS_Init+0x408>)
 8001aca:	f00a fdc4 	bl	800c656 <osEventFlagsNew>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4a82      	ldr	r2, [pc, #520]	; (8001cdc <MX_FREERTOS_Init+0x40c>)
 8001ad2:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_I2CFault */
  SysEvent_I2CFaultHandle = osEventFlagsNew(&SysEvent_I2CFault_attributes);
 8001ad4:	4882      	ldr	r0, [pc, #520]	; (8001ce0 <MX_FREERTOS_Init+0x410>)
 8001ad6:	f00a fdbe 	bl	800c656 <osEventFlagsNew>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4a81      	ldr	r2, [pc, #516]	; (8001ce4 <MX_FREERTOS_Init+0x414>)
 8001ade:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_SPIFault */
  SysEvent_SPIFaultHandle = osEventFlagsNew(&SysEvent_SPIFault_attributes);
 8001ae0:	4881      	ldr	r0, [pc, #516]	; (8001ce8 <MX_FREERTOS_Init+0x418>)
 8001ae2:	f00a fdb8 	bl	800c656 <osEventFlagsNew>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4a80      	ldr	r2, [pc, #512]	; (8001cec <MX_FREERTOS_Init+0x41c>)
 8001aea:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_SPIInterrupt */
  SysEvent_SPIInterruptHandle = osEventFlagsNew(&SysEvent_SPIInterrupt_attributes);
 8001aec:	4880      	ldr	r0, [pc, #512]	; (8001cf0 <MX_FREERTOS_Init+0x420>)
 8001aee:	f00a fdb2 	bl	800c656 <osEventFlagsNew>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4a7f      	ldr	r2, [pc, #508]	; (8001cf4 <MX_FREERTOS_Init+0x424>)
 8001af6:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_USARTInterrupt */
  SysEvent_USARTInterruptHandle = osEventFlagsNew(&SysEvent_USARTInterrupt_attributes);
 8001af8:	487f      	ldr	r0, [pc, #508]	; (8001cf8 <MX_FREERTOS_Init+0x428>)
 8001afa:	f00a fdac 	bl	800c656 <osEventFlagsNew>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a7e      	ldr	r2, [pc, #504]	; (8001cfc <MX_FREERTOS_Init+0x42c>)
 8001b02:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_USARTFault */
  SysEvent_USARTFaultHandle = osEventFlagsNew(&SysEvent_USARTFault_attributes);
 8001b04:	487e      	ldr	r0, [pc, #504]	; (8001d00 <MX_FREERTOS_Init+0x430>)
 8001b06:	f00a fda6 	bl	800c656 <osEventFlagsNew>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4a7d      	ldr	r2, [pc, #500]	; (8001d04 <MX_FREERTOS_Init+0x434>)
 8001b0e:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_DMAInterrupt */
  SysEvent_DMAInterruptHandle = osEventFlagsNew(&SysEvent_DMAInterrupt_attributes);
 8001b10:	487d      	ldr	r0, [pc, #500]	; (8001d08 <MX_FREERTOS_Init+0x438>)
 8001b12:	f00a fda0 	bl	800c656 <osEventFlagsNew>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a7c      	ldr	r2, [pc, #496]	; (8001d0c <MX_FREERTOS_Init+0x43c>)
 8001b1a:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_SoftwareReset */
  SysEvent_SoftwareResetHandle = osEventFlagsNew(&SysEvent_SoftwareReset_attributes);
 8001b1c:	487c      	ldr	r0, [pc, #496]	; (8001d10 <MX_FREERTOS_Init+0x440>)
 8001b1e:	f00a fd9a 	bl	800c656 <osEventFlagsNew>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4a7b      	ldr	r2, [pc, #492]	; (8001d14 <MX_FREERTOS_Init+0x444>)
 8001b26:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_HardwareReset */
  DemEvent_DTC_HardwareResetHandle = osEventFlagsNew(&DemEvent_DTC_HardwareReset_attributes);
 8001b28:	487b      	ldr	r0, [pc, #492]	; (8001d18 <MX_FREERTOS_Init+0x448>)
 8001b2a:	f00a fd94 	bl	800c656 <osEventFlagsNew>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a7a      	ldr	r2, [pc, #488]	; (8001d1c <MX_FREERTOS_Init+0x44c>)
 8001b32:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_SoftwareReset */
  DemEvent_DTC_SoftwareResetHandle = osEventFlagsNew(&DemEvent_DTC_SoftwareReset_attributes);
 8001b34:	487a      	ldr	r0, [pc, #488]	; (8001d20 <MX_FREERTOS_Init+0x450>)
 8001b36:	f00a fd8e 	bl	800c656 <osEventFlagsNew>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4a79      	ldr	r2, [pc, #484]	; (8001d24 <MX_FREERTOS_Init+0x454>)
 8001b3e:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_PowerOnReset */
  DemEvent_DTC_PowerOnResetHandle = osEventFlagsNew(&DemEvent_DTC_PowerOnReset_attributes);
 8001b40:	4879      	ldr	r0, [pc, #484]	; (8001d28 <MX_FREERTOS_Init+0x458>)
 8001b42:	f00a fd88 	bl	800c656 <osEventFlagsNew>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4a78      	ldr	r2, [pc, #480]	; (8001d2c <MX_FREERTOS_Init+0x45c>)
 8001b4a:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_WatchdogReset */
  DemEvent_DTC_WatchdogResetHandle = osEventFlagsNew(&DemEvent_DTC_WatchdogReset_attributes);
 8001b4c:	4878      	ldr	r0, [pc, #480]	; (8001d30 <MX_FREERTOS_Init+0x460>)
 8001b4e:	f00a fd82 	bl	800c656 <osEventFlagsNew>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4a77      	ldr	r2, [pc, #476]	; (8001d34 <MX_FREERTOS_Init+0x464>)
 8001b56:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_DMAFault */
  DemEvent_DTC_DMAFaultHandle = osEventFlagsNew(&DemEvent_DTC_DMAFault_attributes);
 8001b58:	4877      	ldr	r0, [pc, #476]	; (8001d38 <MX_FREERTOS_Init+0x468>)
 8001b5a:	f00a fd7c 	bl	800c656 <osEventFlagsNew>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4a76      	ldr	r2, [pc, #472]	; (8001d3c <MX_FREERTOS_Init+0x46c>)
 8001b62:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_I2CFault */
  DemEvent_DTC_I2CFaultHandle = osEventFlagsNew(&DemEvent_DTC_I2CFault_attributes);
 8001b64:	4876      	ldr	r0, [pc, #472]	; (8001d40 <MX_FREERTOS_Init+0x470>)
 8001b66:	f00a fd76 	bl	800c656 <osEventFlagsNew>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4a75      	ldr	r2, [pc, #468]	; (8001d44 <MX_FREERTOS_Init+0x474>)
 8001b6e:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_SPIFault */
  DemEvent_DTC_SPIFaultHandle = osEventFlagsNew(&DemEvent_DTC_SPIFault_attributes);
 8001b70:	4875      	ldr	r0, [pc, #468]	; (8001d48 <MX_FREERTOS_Init+0x478>)
 8001b72:	f00a fd70 	bl	800c656 <osEventFlagsNew>
 8001b76:	4603      	mov	r3, r0
 8001b78:	e0e8      	b.n	8001d4c <MX_FREERTOS_Init+0x47c>
 8001b7a:	bf00      	nop
 8001b7c:	080111dc 	.word	0x080111dc
 8001b80:	08002329 	.word	0x08002329
 8001b84:	200001dc 	.word	0x200001dc
 8001b88:	080111ec 	.word	0x080111ec
 8001b8c:	0800233d 	.word	0x0800233d
 8001b90:	200001e0 	.word	0x200001e0
 8001b94:	08011050 	.word	0x08011050
 8001b98:	08002249 	.word	0x08002249
 8001b9c:	200001b0 	.word	0x200001b0
 8001ba0:	08011074 	.word	0x08011074
 8001ba4:	0800225d 	.word	0x0800225d
 8001ba8:	200001b4 	.word	0x200001b4
 8001bac:	08011098 	.word	0x08011098
 8001bb0:	08002271 	.word	0x08002271
 8001bb4:	200001b8 	.word	0x200001b8
 8001bb8:	080110bc 	.word	0x080110bc
 8001bbc:	08002285 	.word	0x08002285
 8001bc0:	200001bc 	.word	0x200001bc
 8001bc4:	080110e0 	.word	0x080110e0
 8001bc8:	0800229d 	.word	0x0800229d
 8001bcc:	200001c0 	.word	0x200001c0
 8001bd0:	08011104 	.word	0x08011104
 8001bd4:	080022bd 	.word	0x080022bd
 8001bd8:	200001c4 	.word	0x200001c4
 8001bdc:	08011128 	.word	0x08011128
 8001be0:	080022cd 	.word	0x080022cd
 8001be4:	200001c8 	.word	0x200001c8
 8001be8:	0801114c 	.word	0x0801114c
 8001bec:	080022dd 	.word	0x080022dd
 8001bf0:	200001cc 	.word	0x200001cc
 8001bf4:	08011170 	.word	0x08011170
 8001bf8:	080022ed 	.word	0x080022ed
 8001bfc:	200001d0 	.word	0x200001d0
 8001c00:	08011194 	.word	0x08011194
 8001c04:	080022fd 	.word	0x080022fd
 8001c08:	200001d4 	.word	0x200001d4
 8001c0c:	080111b8 	.word	0x080111b8
 8001c10:	0800230d 	.word	0x0800230d
 8001c14:	200001d8 	.word	0x200001d8
 8001c18:	080111fc 	.word	0x080111fc
 8001c1c:	200001e4 	.word	0x200001e4
 8001c20:	0801120c 	.word	0x0801120c
 8001c24:	200001e8 	.word	0x200001e8
 8001c28:	0801121c 	.word	0x0801121c
 8001c2c:	200001ec 	.word	0x200001ec
 8001c30:	0801122c 	.word	0x0801122c
 8001c34:	200001f0 	.word	0x200001f0
 8001c38:	0801123c 	.word	0x0801123c
 8001c3c:	200001f4 	.word	0x200001f4
 8001c40:	0801124c 	.word	0x0801124c
 8001c44:	200001f8 	.word	0x200001f8
 8001c48:	0801125c 	.word	0x0801125c
 8001c4c:	200001fc 	.word	0x200001fc
 8001c50:	0801126c 	.word	0x0801126c
 8001c54:	20000200 	.word	0x20000200
 8001c58:	0801127c 	.word	0x0801127c
 8001c5c:	20000204 	.word	0x20000204
 8001c60:	0801128c 	.word	0x0801128c
 8001c64:	20000208 	.word	0x20000208
 8001c68:	0801129c 	.word	0x0801129c
 8001c6c:	2000020c 	.word	0x2000020c
 8001c70:	080112ac 	.word	0x080112ac
 8001c74:	20000210 	.word	0x20000210
 8001c78:	080112bc 	.word	0x080112bc
 8001c7c:	20000214 	.word	0x20000214
 8001c80:	080112cc 	.word	0x080112cc
 8001c84:	20000218 	.word	0x20000218
 8001c88:	080112dc 	.word	0x080112dc
 8001c8c:	2000021c 	.word	0x2000021c
 8001c90:	080112ec 	.word	0x080112ec
 8001c94:	20000220 	.word	0x20000220
 8001c98:	080112fc 	.word	0x080112fc
 8001c9c:	20000224 	.word	0x20000224
 8001ca0:	0801130c 	.word	0x0801130c
 8001ca4:	20000228 	.word	0x20000228
 8001ca8:	0801131c 	.word	0x0801131c
 8001cac:	2000022c 	.word	0x2000022c
 8001cb0:	0801132c 	.word	0x0801132c
 8001cb4:	20000230 	.word	0x20000230
 8001cb8:	0801133c 	.word	0x0801133c
 8001cbc:	20000234 	.word	0x20000234
 8001cc0:	0801134c 	.word	0x0801134c
 8001cc4:	20000238 	.word	0x20000238
 8001cc8:	0801135c 	.word	0x0801135c
 8001ccc:	2000023c 	.word	0x2000023c
 8001cd0:	0801136c 	.word	0x0801136c
 8001cd4:	20000240 	.word	0x20000240
 8001cd8:	0801137c 	.word	0x0801137c
 8001cdc:	20000244 	.word	0x20000244
 8001ce0:	0801138c 	.word	0x0801138c
 8001ce4:	20000248 	.word	0x20000248
 8001ce8:	0801139c 	.word	0x0801139c
 8001cec:	2000024c 	.word	0x2000024c
 8001cf0:	080113ac 	.word	0x080113ac
 8001cf4:	20000250 	.word	0x20000250
 8001cf8:	080113bc 	.word	0x080113bc
 8001cfc:	20000254 	.word	0x20000254
 8001d00:	080113cc 	.word	0x080113cc
 8001d04:	20000258 	.word	0x20000258
 8001d08:	080113dc 	.word	0x080113dc
 8001d0c:	2000025c 	.word	0x2000025c
 8001d10:	080113ec 	.word	0x080113ec
 8001d14:	20000260 	.word	0x20000260
 8001d18:	080113fc 	.word	0x080113fc
 8001d1c:	20000264 	.word	0x20000264
 8001d20:	0801140c 	.word	0x0801140c
 8001d24:	20000268 	.word	0x20000268
 8001d28:	0801141c 	.word	0x0801141c
 8001d2c:	2000026c 	.word	0x2000026c
 8001d30:	0801142c 	.word	0x0801142c
 8001d34:	20000270 	.word	0x20000270
 8001d38:	0801143c 	.word	0x0801143c
 8001d3c:	20000274 	.word	0x20000274
 8001d40:	0801144c 	.word	0x0801144c
 8001d44:	20000278 	.word	0x20000278
 8001d48:	0801145c 	.word	0x0801145c
 8001d4c:	4aa9      	ldr	r2, [pc, #676]	; (8001ff4 <MX_FREERTOS_Init+0x724>)
 8001d4e:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_OSFault */
  SysEvent_OSFaultHandle = osEventFlagsNew(&SysEvent_OSFault_attributes);
 8001d50:	48a9      	ldr	r0, [pc, #676]	; (8001ff8 <MX_FREERTOS_Init+0x728>)
 8001d52:	f00a fc80 	bl	800c656 <osEventFlagsNew>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4aa8      	ldr	r2, [pc, #672]	; (8001ffc <MX_FREERTOS_Init+0x72c>)
 8001d5a:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_ComFault */
  SysEvent_ComFaultHandle = osEventFlagsNew(&SysEvent_ComFault_attributes);
 8001d5c:	48a8      	ldr	r0, [pc, #672]	; (8002000 <MX_FREERTOS_Init+0x730>)
 8001d5e:	f00a fc7a 	bl	800c656 <osEventFlagsNew>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4aa7      	ldr	r2, [pc, #668]	; (8002004 <MX_FREERTOS_Init+0x734>)
 8001d66:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_IOFault */
  SysEvent_IOFaultHandle = osEventFlagsNew(&SysEvent_IOFault_attributes);
 8001d68:	48a7      	ldr	r0, [pc, #668]	; (8002008 <MX_FREERTOS_Init+0x738>)
 8001d6a:	f00a fc74 	bl	800c656 <osEventFlagsNew>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4aa6      	ldr	r2, [pc, #664]	; (800200c <MX_FREERTOS_Init+0x73c>)
 8001d72:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_DiagFault */
  SysEvent_DiagFaultHandle = osEventFlagsNew(&SysEvent_DiagFault_attributes);
 8001d74:	48a6      	ldr	r0, [pc, #664]	; (8002010 <MX_FREERTOS_Init+0x740>)
 8001d76:	f00a fc6e 	bl	800c656 <osEventFlagsNew>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4aa5      	ldr	r2, [pc, #660]	; (8002014 <MX_FREERTOS_Init+0x744>)
 8001d7e:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_MemFault */
  SysEvent_MemFaultHandle = osEventFlagsNew(&SysEvent_MemFault_attributes);
 8001d80:	48a5      	ldr	r0, [pc, #660]	; (8002018 <MX_FREERTOS_Init+0x748>)
 8001d82:	f00a fc68 	bl	800c656 <osEventFlagsNew>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4aa4      	ldr	r2, [pc, #656]	; (800201c <MX_FREERTOS_Init+0x74c>)
 8001d8a:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_SysFault */
  SysEvent_SysFaultHandle = osEventFlagsNew(&SysEvent_SysFault_attributes);
 8001d8c:	48a4      	ldr	r0, [pc, #656]	; (8002020 <MX_FREERTOS_Init+0x750>)
 8001d8e:	f00a fc62 	bl	800c656 <osEventFlagsNew>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4aa3      	ldr	r2, [pc, #652]	; (8002024 <MX_FREERTOS_Init+0x754>)
 8001d96:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_ApplFault */
  SysEvent_ApplFaultHandle = osEventFlagsNew(&SysEvent_ApplFault_attributes);
 8001d98:	48a3      	ldr	r0, [pc, #652]	; (8002028 <MX_FREERTOS_Init+0x758>)
 8001d9a:	f00a fc5c 	bl	800c656 <osEventFlagsNew>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4aa2      	ldr	r2, [pc, #648]	; (800202c <MX_FREERTOS_Init+0x75c>)
 8001da2:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_CenLocFault */
  SysEvent_CenLocFaultHandle = osEventFlagsNew(&SysEvent_CenLocFault_attributes);
 8001da4:	48a2      	ldr	r0, [pc, #648]	; (8002030 <MX_FREERTOS_Init+0x760>)
 8001da6:	f00a fc56 	bl	800c656 <osEventFlagsNew>
 8001daa:	4603      	mov	r3, r0
 8001dac:	4aa1      	ldr	r2, [pc, #644]	; (8002034 <MX_FREERTOS_Init+0x764>)
 8001dae:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_SecAlmFault */
  SysEvent_SecAlmFaultHandle = osEventFlagsNew(&SysEvent_SecAlmFault_attributes);
 8001db0:	48a1      	ldr	r0, [pc, #644]	; (8002038 <MX_FREERTOS_Init+0x768>)
 8001db2:	f00a fc50 	bl	800c656 <osEventFlagsNew>
 8001db6:	4603      	mov	r3, r0
 8001db8:	4aa0      	ldr	r2, [pc, #640]	; (800203c <MX_FREERTOS_Init+0x76c>)
 8001dba:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_BtcFault */
  SysEvent_BtcFaultHandle = osEventFlagsNew(&SysEvent_BtcFault_attributes);
 8001dbc:	48a0      	ldr	r0, [pc, #640]	; (8002040 <MX_FREERTOS_Init+0x770>)
 8001dbe:	f00a fc4a 	bl	800c656 <osEventFlagsNew>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4a9f      	ldr	r2, [pc, #636]	; (8002044 <MX_FREERTOS_Init+0x774>)
 8001dc6:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_IntLightsFault */
  SysEvent_IntLightsFaultHandle = osEventFlagsNew(&SysEvent_IntLightsFault_attributes);
 8001dc8:	489f      	ldr	r0, [pc, #636]	; (8002048 <MX_FREERTOS_Init+0x778>)
 8001dca:	f00a fc44 	bl	800c656 <osEventFlagsNew>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4a9e      	ldr	r2, [pc, #632]	; (800204c <MX_FREERTOS_Init+0x77c>)
 8001dd2:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_CanFault */
  SysEvent_CanFaultHandle = osEventFlagsNew(&SysEvent_CanFault_attributes);
 8001dd4:	489e      	ldr	r0, [pc, #632]	; (8002050 <MX_FREERTOS_Init+0x780>)
 8001dd6:	f00a fc3e 	bl	800c656 <osEventFlagsNew>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4a9d      	ldr	r2, [pc, #628]	; (8002054 <MX_FREERTOS_Init+0x784>)
 8001dde:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_DcmFault */
  SysEvent_DcmFaultHandle = osEventFlagsNew(&SysEvent_DcmFault_attributes);
 8001de0:	489d      	ldr	r0, [pc, #628]	; (8002058 <MX_FREERTOS_Init+0x788>)
 8001de2:	f00a fc38 	bl	800c656 <osEventFlagsNew>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a9c      	ldr	r2, [pc, #624]	; (800205c <MX_FREERTOS_Init+0x78c>)
 8001dea:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_RteFault */
  SysEvent_RteFaultHandle = osEventFlagsNew(&SysEvent_RteFault_attributes);
 8001dec:	489c      	ldr	r0, [pc, #624]	; (8002060 <MX_FREERTOS_Init+0x790>)
 8001dee:	f00a fc32 	bl	800c656 <osEventFlagsNew>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4a9b      	ldr	r2, [pc, #620]	; (8002064 <MX_FREERTOS_Init+0x794>)
 8001df6:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_DemFault */
  SysEvent_DemFaultHandle = osEventFlagsNew(&SysEvent_DemFault_attributes);
 8001df8:	489b      	ldr	r0, [pc, #620]	; (8002068 <MX_FREERTOS_Init+0x798>)
 8001dfa:	f00a fc2c 	bl	800c656 <osEventFlagsNew>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a9a      	ldr	r2, [pc, #616]	; (800206c <MX_FREERTOS_Init+0x79c>)
 8001e02:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_CrcFault */
  SysEvent_CrcFaultHandle = osEventFlagsNew(&SysEvent_CrcFault_attributes);
 8001e04:	489a      	ldr	r0, [pc, #616]	; (8002070 <MX_FREERTOS_Init+0x7a0>)
 8001e06:	f00a fc26 	bl	800c656 <osEventFlagsNew>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4a99      	ldr	r2, [pc, #612]	; (8002074 <MX_FREERTOS_Init+0x7a4>)
 8001e0e:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_EcuFault */
  SysEvent_EcuFaultHandle = osEventFlagsNew(&SysEvent_EcuFault_attributes);
 8001e10:	4899      	ldr	r0, [pc, #612]	; (8002078 <MX_FREERTOS_Init+0x7a8>)
 8001e12:	f00a fc20 	bl	800c656 <osEventFlagsNew>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4a98      	ldr	r2, [pc, #608]	; (800207c <MX_FREERTOS_Init+0x7ac>)
 8001e1a:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_PortFault */
  SysEvent_PortFaultHandle = osEventFlagsNew(&SysEvent_PortFault_attributes);
 8001e1c:	4898      	ldr	r0, [pc, #608]	; (8002080 <MX_FREERTOS_Init+0x7b0>)
 8001e1e:	f00a fc1a 	bl	800c656 <osEventFlagsNew>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4a97      	ldr	r2, [pc, #604]	; (8002084 <MX_FREERTOS_Init+0x7b4>)
 8001e26:	6013      	str	r3, [r2, #0]

  /* creation of SysEvent_PWMFault */
  SysEvent_PWMFaultHandle = osEventFlagsNew(&SysEvent_PWMFault_attributes);
 8001e28:	4897      	ldr	r0, [pc, #604]	; (8002088 <MX_FREERTOS_Init+0x7b8>)
 8001e2a:	f00a fc14 	bl	800c656 <osEventFlagsNew>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	4a96      	ldr	r2, [pc, #600]	; (800208c <MX_FREERTOS_Init+0x7bc>)
 8001e32:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_ADCFault */
  DemEvent_DTC_ADCFaultHandle = osEventFlagsNew(&DemEvent_DTC_ADCFault_attributes);
 8001e34:	4896      	ldr	r0, [pc, #600]	; (8002090 <MX_FREERTOS_Init+0x7c0>)
 8001e36:	f00a fc0e 	bl	800c656 <osEventFlagsNew>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a95      	ldr	r2, [pc, #596]	; (8002094 <MX_FREERTOS_Init+0x7c4>)
 8001e3e:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_PWMFault */
  DemEvent_DTC_PWMFaultHandle = osEventFlagsNew(&DemEvent_DTC_PWMFault_attributes);
 8001e40:	4895      	ldr	r0, [pc, #596]	; (8002098 <MX_FREERTOS_Init+0x7c8>)
 8001e42:	f00a fc08 	bl	800c656 <osEventFlagsNew>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4a94      	ldr	r2, [pc, #592]	; (800209c <MX_FREERTOS_Init+0x7cc>)
 8001e4a:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_CanFault */
  DemEvent_DTC_CanFaultHandle = osEventFlagsNew(&DemEvent_DTC_CanFault_attributes);
 8001e4c:	4894      	ldr	r0, [pc, #592]	; (80020a0 <MX_FREERTOS_Init+0x7d0>)
 8001e4e:	f00a fc02 	bl	800c656 <osEventFlagsNew>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4a93      	ldr	r2, [pc, #588]	; (80020a4 <MX_FREERTOS_Init+0x7d4>)
 8001e56:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_BtcFault */
  DemEvent_DTC_BtcFaultHandle = osEventFlagsNew(&DemEvent_DTC_BtcFault_attributes);
 8001e58:	4893      	ldr	r0, [pc, #588]	; (80020a8 <MX_FREERTOS_Init+0x7d8>)
 8001e5a:	f00a fbfc 	bl	800c656 <osEventFlagsNew>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4a92      	ldr	r2, [pc, #584]	; (80020ac <MX_FREERTOS_Init+0x7dc>)
 8001e62:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_USARTFault */
  DemEvent_DTC_USARTFaultHandle = osEventFlagsNew(&DemEvent_DTC_USARTFault_attributes);
 8001e64:	4892      	ldr	r0, [pc, #584]	; (80020b0 <MX_FREERTOS_Init+0x7e0>)
 8001e66:	f00a fbf6 	bl	800c656 <osEventFlagsNew>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4a91      	ldr	r2, [pc, #580]	; (80020b4 <MX_FREERTOS_Init+0x7e4>)
 8001e6e:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_WatchdogFault */
  DemEvent_DTC_WatchdogFaultHandle = osEventFlagsNew(&DemEvent_DTC_WatchdogFault_attributes);
 8001e70:	4891      	ldr	r0, [pc, #580]	; (80020b8 <MX_FREERTOS_Init+0x7e8>)
 8001e72:	f00a fbf0 	bl	800c656 <osEventFlagsNew>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4a90      	ldr	r2, [pc, #576]	; (80020bc <MX_FREERTOS_Init+0x7ec>)
 8001e7a:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_FlashFault */
  DemEvent_DTC_FlashFaultHandle = osEventFlagsNew(&DemEvent_DTC_FlashFault_attributes);
 8001e7c:	4890      	ldr	r0, [pc, #576]	; (80020c0 <MX_FREERTOS_Init+0x7f0>)
 8001e7e:	f00a fbea 	bl	800c656 <osEventFlagsNew>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4a8f      	ldr	r2, [pc, #572]	; (80020c4 <MX_FREERTOS_Init+0x7f4>)
 8001e86:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_RamFault */
  DemEvent_DTC_RamFaultHandle = osEventFlagsNew(&DemEvent_DTC_RamFault_attributes);
 8001e88:	488f      	ldr	r0, [pc, #572]	; (80020c8 <MX_FREERTOS_Init+0x7f8>)
 8001e8a:	f00a fbe4 	bl	800c656 <osEventFlagsNew>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4a8e      	ldr	r2, [pc, #568]	; (80020cc <MX_FREERTOS_Init+0x7fc>)
 8001e92:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_TimerFault */
  DemEvent_DTC_TimerFaultHandle = osEventFlagsNew(&DemEvent_DTC_TimerFault_attributes);
 8001e94:	488e      	ldr	r0, [pc, #568]	; (80020d0 <MX_FREERTOS_Init+0x800>)
 8001e96:	f00a fbde 	bl	800c656 <osEventFlagsNew>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4a8d      	ldr	r2, [pc, #564]	; (80020d4 <MX_FREERTOS_Init+0x804>)
 8001e9e:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_EcuUnderVoltage */
  DemEvent_DTC_EcuUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_EcuUnderVoltage_attributes);
 8001ea0:	488d      	ldr	r0, [pc, #564]	; (80020d8 <MX_FREERTOS_Init+0x808>)
 8001ea2:	f00a fbd8 	bl	800c656 <osEventFlagsNew>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a8c      	ldr	r2, [pc, #560]	; (80020dc <MX_FREERTOS_Init+0x80c>)
 8001eaa:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_LowBeamShorted */
  DemEvent_DTC_LowBeamShortedHandle = osEventFlagsNew(&DemEvent_DTC_LowBeamShorted_attributes);
 8001eac:	488c      	ldr	r0, [pc, #560]	; (80020e0 <MX_FREERTOS_Init+0x810>)
 8001eae:	f00a fbd2 	bl	800c656 <osEventFlagsNew>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a8b      	ldr	r2, [pc, #556]	; (80020e4 <MX_FREERTOS_Init+0x814>)
 8001eb6:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_LowBeamUnderVoltage */
  DemEvent_DTC_LowBeamUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_LowBeamUnderVoltage_attributes);
 8001eb8:	488b      	ldr	r0, [pc, #556]	; (80020e8 <MX_FREERTOS_Init+0x818>)
 8001eba:	f00a fbcc 	bl	800c656 <osEventFlagsNew>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a8a      	ldr	r2, [pc, #552]	; (80020ec <MX_FREERTOS_Init+0x81c>)
 8001ec2:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_RTCFault */
  DemEvent_DTC_RTCFaultHandle = osEventFlagsNew(&DemEvent_DTC_RTCFault_attributes);
 8001ec4:	488a      	ldr	r0, [pc, #552]	; (80020f0 <MX_FREERTOS_Init+0x820>)
 8001ec6:	f00a fbc6 	bl	800c656 <osEventFlagsNew>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4a89      	ldr	r2, [pc, #548]	; (80020f4 <MX_FREERTOS_Init+0x824>)
 8001ece:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_HighBeamUnderVoltage */
  DemEvent_DTC_HighBeamUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_HighBeamUnderVoltage_attributes);
 8001ed0:	4889      	ldr	r0, [pc, #548]	; (80020f8 <MX_FREERTOS_Init+0x828>)
 8001ed2:	f00a fbc0 	bl	800c656 <osEventFlagsNew>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4a88      	ldr	r2, [pc, #544]	; (80020fc <MX_FREERTOS_Init+0x82c>)
 8001eda:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_HighBeamShorted */
  DemEvent_DTC_HighBeamShortedHandle = osEventFlagsNew(&DemEvent_DTC_HighBeamShorted_attributes);
 8001edc:	4888      	ldr	r0, [pc, #544]	; (8002100 <MX_FREERTOS_Init+0x830>)
 8001ede:	f00a fbba 	bl	800c656 <osEventFlagsNew>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4a87      	ldr	r2, [pc, #540]	; (8002104 <MX_FREERTOS_Init+0x834>)
 8001ee6:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_DayTimeRunningLightUnderVoltage */
  DemEvent_DTC_DayTimeRunningLightUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_DayTimeRunningLightUnderVoltage_attributes);
 8001ee8:	4887      	ldr	r0, [pc, #540]	; (8002108 <MX_FREERTOS_Init+0x838>)
 8001eea:	f00a fbb4 	bl	800c656 <osEventFlagsNew>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4a86      	ldr	r2, [pc, #536]	; (800210c <MX_FREERTOS_Init+0x83c>)
 8001ef2:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_DayTimeRunningLightShorted */
  DemEvent_DTC_DayTimeRunningLightShortedHandle = osEventFlagsNew(&DemEvent_DTC_DayTimeRunningLightShorted_attributes);
 8001ef4:	4886      	ldr	r0, [pc, #536]	; (8002110 <MX_FREERTOS_Init+0x840>)
 8001ef6:	f00a fbae 	bl	800c656 <osEventFlagsNew>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4a85      	ldr	r2, [pc, #532]	; (8002114 <MX_FREERTOS_Init+0x844>)
 8001efe:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_FrontFogLightsUnderVoltage */
  DemEvent_DTC_FrontFogLightsUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_FrontFogLightsUnderVoltage_attributes);
 8001f00:	4885      	ldr	r0, [pc, #532]	; (8002118 <MX_FREERTOS_Init+0x848>)
 8001f02:	f00a fba8 	bl	800c656 <osEventFlagsNew>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4a84      	ldr	r2, [pc, #528]	; (800211c <MX_FREERTOS_Init+0x84c>)
 8001f0a:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_FrontFogLightShorted */
  DemEvent_DTC_FrontFogLightShortedHandle = osEventFlagsNew(&DemEvent_DTC_FrontFogLightShorted_attributes);
 8001f0c:	4884      	ldr	r0, [pc, #528]	; (8002120 <MX_FREERTOS_Init+0x850>)
 8001f0e:	f00a fba2 	bl	800c656 <osEventFlagsNew>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4a83      	ldr	r2, [pc, #524]	; (8002124 <MX_FREERTOS_Init+0x854>)
 8001f16:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_RearFogLightUnderVoltage */
  DemEvent_DTC_RearFogLightUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_RearFogLightUnderVoltage_attributes);
 8001f18:	4883      	ldr	r0, [pc, #524]	; (8002128 <MX_FREERTOS_Init+0x858>)
 8001f1a:	f00a fb9c 	bl	800c656 <osEventFlagsNew>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4a82      	ldr	r2, [pc, #520]	; (800212c <MX_FREERTOS_Init+0x85c>)
 8001f22:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_RearFogLightShorted */
  DemEvent_DTC_RearFogLightShortedHandle = osEventFlagsNew(&DemEvent_DTC_RearFogLightShorted_attributes);
 8001f24:	4882      	ldr	r0, [pc, #520]	; (8002130 <MX_FREERTOS_Init+0x860>)
 8001f26:	f00a fb96 	bl	800c656 <osEventFlagsNew>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4a81      	ldr	r2, [pc, #516]	; (8002134 <MX_FREERTOS_Init+0x864>)
 8001f2e:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_RearPositionLightUnderVoltage */
  DemEvent_DTC_RearPositionLightUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_RearPositionLightUnderVoltage_attributes);
 8001f30:	4881      	ldr	r0, [pc, #516]	; (8002138 <MX_FREERTOS_Init+0x868>)
 8001f32:	f00a fb90 	bl	800c656 <osEventFlagsNew>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4a80      	ldr	r2, [pc, #512]	; (800213c <MX_FREERTOS_Init+0x86c>)
 8001f3a:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_RearPositionLightShorted */
  DemEvent_DTC_RearPositionLightShortedHandle = osEventFlagsNew(&DemEvent_DTC_RearPositionLightShorted_attributes);
 8001f3c:	4880      	ldr	r0, [pc, #512]	; (8002140 <MX_FREERTOS_Init+0x870>)
 8001f3e:	f00a fb8a 	bl	800c656 <osEventFlagsNew>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4a7f      	ldr	r2, [pc, #508]	; (8002144 <MX_FREERTOS_Init+0x874>)
 8001f46:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_RightTurnSignalUnderVoltage */
  DemEvent_DTC_RightTurnSignalUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_RightTurnSignalUnderVoltage_attributes);
 8001f48:	487f      	ldr	r0, [pc, #508]	; (8002148 <MX_FREERTOS_Init+0x878>)
 8001f4a:	f00a fb84 	bl	800c656 <osEventFlagsNew>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4a7e      	ldr	r2, [pc, #504]	; (800214c <MX_FREERTOS_Init+0x87c>)
 8001f52:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_LeftTurnSignalUnderVoltage */
  DemEvent_DTC_LeftTurnSignalUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_LeftTurnSignalUnderVoltage_attributes);
 8001f54:	487e      	ldr	r0, [pc, #504]	; (8002150 <MX_FREERTOS_Init+0x880>)
 8001f56:	f00a fb7e 	bl	800c656 <osEventFlagsNew>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4a7d      	ldr	r2, [pc, #500]	; (8002154 <MX_FREERTOS_Init+0x884>)
 8001f5e:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_RightTurnSignalShorted */
  DemEvent_DTC_RightTurnSignalShortedHandle = osEventFlagsNew(&DemEvent_DTC_RightTurnSignalShorted_attributes);
 8001f60:	487d      	ldr	r0, [pc, #500]	; (8002158 <MX_FREERTOS_Init+0x888>)
 8001f62:	f00a fb78 	bl	800c656 <osEventFlagsNew>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4a7c      	ldr	r2, [pc, #496]	; (800215c <MX_FREERTOS_Init+0x88c>)
 8001f6a:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_LeftTurnSignalShorted */
  DemEvent_DTC_LeftTurnSignalShortedHandle = osEventFlagsNew(&DemEvent_DTC_LeftTurnSignalShorted_attributes);
 8001f6c:	487c      	ldr	r0, [pc, #496]	; (8002160 <MX_FREERTOS_Init+0x890>)
 8001f6e:	f00a fb72 	bl	800c656 <osEventFlagsNew>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4a7b      	ldr	r2, [pc, #492]	; (8002164 <MX_FREERTOS_Init+0x894>)
 8001f76:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_ReverseLightUnderVoltage */
  DemEvent_DTC_ReverseLightUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_ReverseLightUnderVoltage_attributes);
 8001f78:	487b      	ldr	r0, [pc, #492]	; (8002168 <MX_FREERTOS_Init+0x898>)
 8001f7a:	f00a fb6c 	bl	800c656 <osEventFlagsNew>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4a7a      	ldr	r2, [pc, #488]	; (800216c <MX_FREERTOS_Init+0x89c>)
 8001f82:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_ReverseLightShorted */
  DemEvent_DTC_ReverseLightShortedHandle = osEventFlagsNew(&DemEvent_DTC_ReverseLightShorted_attributes);
 8001f84:	487a      	ldr	r0, [pc, #488]	; (8002170 <MX_FREERTOS_Init+0x8a0>)
 8001f86:	f00a fb66 	bl	800c656 <osEventFlagsNew>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4a79      	ldr	r2, [pc, #484]	; (8002174 <MX_FREERTOS_Init+0x8a4>)
 8001f8e:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_InteriorLightsUnderVoltage */
  DemEvent_DTC_InteriorLightsUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_InteriorLightsUnderVoltage_attributes);
 8001f90:	4879      	ldr	r0, [pc, #484]	; (8002178 <MX_FREERTOS_Init+0x8a8>)
 8001f92:	f00a fb60 	bl	800c656 <osEventFlagsNew>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4a78      	ldr	r2, [pc, #480]	; (800217c <MX_FREERTOS_Init+0x8ac>)
 8001f9a:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_InteriorLightsShorted */
  DemEvent_DTC_InteriorLightsShortedHandle = osEventFlagsNew(&DemEvent_DTC_InteriorLightsShorted_attributes);
 8001f9c:	4878      	ldr	r0, [pc, #480]	; (8002180 <MX_FREERTOS_Init+0x8b0>)
 8001f9e:	f00a fb5a 	bl	800c656 <osEventFlagsNew>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4a77      	ldr	r2, [pc, #476]	; (8002184 <MX_FREERTOS_Init+0x8b4>)
 8001fa6:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_DoorLedUnderVoltage */
  DemEvent_DTC_DoorLedUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_DoorLedUnderVoltage_attributes);
 8001fa8:	4877      	ldr	r0, [pc, #476]	; (8002188 <MX_FREERTOS_Init+0x8b8>)
 8001faa:	f00a fb54 	bl	800c656 <osEventFlagsNew>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4a76      	ldr	r2, [pc, #472]	; (800218c <MX_FREERTOS_Init+0x8bc>)
 8001fb2:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_DoorLedShorted */
  DemEvent_DTC_DoorLedShortedHandle = osEventFlagsNew(&DemEvent_DTC_DoorLedShorted_attributes);
 8001fb4:	4876      	ldr	r0, [pc, #472]	; (8002190 <MX_FREERTOS_Init+0x8c0>)
 8001fb6:	f00a fb4e 	bl	800c656 <osEventFlagsNew>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4a75      	ldr	r2, [pc, #468]	; (8002194 <MX_FREERTOS_Init+0x8c4>)
 8001fbe:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_LicensePlateLigthUnderVoltage */
  DemEvent_DTC_LicensePlateLigthUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_LicensePlateLigthUnderVoltage_attributes);
 8001fc0:	4875      	ldr	r0, [pc, #468]	; (8002198 <MX_FREERTOS_Init+0x8c8>)
 8001fc2:	f00a fb48 	bl	800c656 <osEventFlagsNew>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4a74      	ldr	r2, [pc, #464]	; (800219c <MX_FREERTOS_Init+0x8cc>)
 8001fca:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_LicensePlateLigthShorted */
  DemEvent_DTC_LicensePlateLigthShortedHandle = osEventFlagsNew(&DemEvent_DTC_LicensePlateLigthShorted_attributes);
 8001fcc:	4874      	ldr	r0, [pc, #464]	; (80021a0 <MX_FREERTOS_Init+0x8d0>)
 8001fce:	f00a fb42 	bl	800c656 <osEventFlagsNew>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4a73      	ldr	r2, [pc, #460]	; (80021a4 <MX_FREERTOS_Init+0x8d4>)
 8001fd6:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_Mcp2515Fault */
  DemEvent_DTC_Mcp2515FaultHandle = osEventFlagsNew(&DemEvent_DTC_Mcp2515Fault_attributes);
 8001fd8:	4873      	ldr	r0, [pc, #460]	; (80021a8 <MX_FREERTOS_Init+0x8d8>)
 8001fda:	f00a fb3c 	bl	800c656 <osEventFlagsNew>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4a72      	ldr	r2, [pc, #456]	; (80021ac <MX_FREERTOS_Init+0x8dc>)
 8001fe2:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_ExtEEPROMFault */
  DemEvent_DTC_ExtEEPROMFaultHandle = osEventFlagsNew(&DemEvent_DTC_ExtEEPROMFault_attributes);
 8001fe4:	4872      	ldr	r0, [pc, #456]	; (80021b0 <MX_FREERTOS_Init+0x8e0>)
 8001fe6:	f00a fb36 	bl	800c656 <osEventFlagsNew>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4a71      	ldr	r2, [pc, #452]	; (80021b4 <MX_FREERTOS_Init+0x8e4>)
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	e0e2      	b.n	80021b8 <MX_FREERTOS_Init+0x8e8>
 8001ff2:	bf00      	nop
 8001ff4:	2000027c 	.word	0x2000027c
 8001ff8:	0801146c 	.word	0x0801146c
 8001ffc:	20000280 	.word	0x20000280
 8002000:	0801147c 	.word	0x0801147c
 8002004:	20000284 	.word	0x20000284
 8002008:	0801148c 	.word	0x0801148c
 800200c:	20000288 	.word	0x20000288
 8002010:	0801149c 	.word	0x0801149c
 8002014:	2000028c 	.word	0x2000028c
 8002018:	080114ac 	.word	0x080114ac
 800201c:	20000290 	.word	0x20000290
 8002020:	080114bc 	.word	0x080114bc
 8002024:	20000294 	.word	0x20000294
 8002028:	080114cc 	.word	0x080114cc
 800202c:	20000298 	.word	0x20000298
 8002030:	080114dc 	.word	0x080114dc
 8002034:	2000029c 	.word	0x2000029c
 8002038:	080114ec 	.word	0x080114ec
 800203c:	200002a0 	.word	0x200002a0
 8002040:	080114fc 	.word	0x080114fc
 8002044:	200002a4 	.word	0x200002a4
 8002048:	0801150c 	.word	0x0801150c
 800204c:	200002a8 	.word	0x200002a8
 8002050:	0801151c 	.word	0x0801151c
 8002054:	200002ac 	.word	0x200002ac
 8002058:	0801152c 	.word	0x0801152c
 800205c:	200002b0 	.word	0x200002b0
 8002060:	0801153c 	.word	0x0801153c
 8002064:	200002b4 	.word	0x200002b4
 8002068:	0801154c 	.word	0x0801154c
 800206c:	200002b8 	.word	0x200002b8
 8002070:	0801155c 	.word	0x0801155c
 8002074:	200002bc 	.word	0x200002bc
 8002078:	0801156c 	.word	0x0801156c
 800207c:	200002c0 	.word	0x200002c0
 8002080:	0801157c 	.word	0x0801157c
 8002084:	200002c4 	.word	0x200002c4
 8002088:	0801158c 	.word	0x0801158c
 800208c:	200002c8 	.word	0x200002c8
 8002090:	0801159c 	.word	0x0801159c
 8002094:	200002cc 	.word	0x200002cc
 8002098:	080115ac 	.word	0x080115ac
 800209c:	200002d0 	.word	0x200002d0
 80020a0:	080115bc 	.word	0x080115bc
 80020a4:	200002d4 	.word	0x200002d4
 80020a8:	080115cc 	.word	0x080115cc
 80020ac:	200002d8 	.word	0x200002d8
 80020b0:	080115dc 	.word	0x080115dc
 80020b4:	200002dc 	.word	0x200002dc
 80020b8:	080115ec 	.word	0x080115ec
 80020bc:	200002e0 	.word	0x200002e0
 80020c0:	080115fc 	.word	0x080115fc
 80020c4:	200002e4 	.word	0x200002e4
 80020c8:	0801160c 	.word	0x0801160c
 80020cc:	200002e8 	.word	0x200002e8
 80020d0:	0801161c 	.word	0x0801161c
 80020d4:	200002ec 	.word	0x200002ec
 80020d8:	0801162c 	.word	0x0801162c
 80020dc:	200002f0 	.word	0x200002f0
 80020e0:	0801163c 	.word	0x0801163c
 80020e4:	200002f4 	.word	0x200002f4
 80020e8:	0801164c 	.word	0x0801164c
 80020ec:	200002f8 	.word	0x200002f8
 80020f0:	0801165c 	.word	0x0801165c
 80020f4:	200002fc 	.word	0x200002fc
 80020f8:	0801166c 	.word	0x0801166c
 80020fc:	20000300 	.word	0x20000300
 8002100:	0801167c 	.word	0x0801167c
 8002104:	20000304 	.word	0x20000304
 8002108:	0801168c 	.word	0x0801168c
 800210c:	20000308 	.word	0x20000308
 8002110:	0801169c 	.word	0x0801169c
 8002114:	2000030c 	.word	0x2000030c
 8002118:	080116ac 	.word	0x080116ac
 800211c:	20000310 	.word	0x20000310
 8002120:	080116bc 	.word	0x080116bc
 8002124:	20000314 	.word	0x20000314
 8002128:	080116cc 	.word	0x080116cc
 800212c:	20000318 	.word	0x20000318
 8002130:	080116dc 	.word	0x080116dc
 8002134:	2000031c 	.word	0x2000031c
 8002138:	080116ec 	.word	0x080116ec
 800213c:	20000320 	.word	0x20000320
 8002140:	080116fc 	.word	0x080116fc
 8002144:	20000324 	.word	0x20000324
 8002148:	0801170c 	.word	0x0801170c
 800214c:	20000328 	.word	0x20000328
 8002150:	0801171c 	.word	0x0801171c
 8002154:	2000032c 	.word	0x2000032c
 8002158:	0801172c 	.word	0x0801172c
 800215c:	20000330 	.word	0x20000330
 8002160:	0801173c 	.word	0x0801173c
 8002164:	20000334 	.word	0x20000334
 8002168:	0801174c 	.word	0x0801174c
 800216c:	20000338 	.word	0x20000338
 8002170:	0801175c 	.word	0x0801175c
 8002174:	2000033c 	.word	0x2000033c
 8002178:	0801176c 	.word	0x0801176c
 800217c:	20000340 	.word	0x20000340
 8002180:	0801177c 	.word	0x0801177c
 8002184:	20000344 	.word	0x20000344
 8002188:	0801178c 	.word	0x0801178c
 800218c:	20000348 	.word	0x20000348
 8002190:	0801179c 	.word	0x0801179c
 8002194:	2000034c 	.word	0x2000034c
 8002198:	080117ac 	.word	0x080117ac
 800219c:	20000350 	.word	0x20000350
 80021a0:	080117bc 	.word	0x080117bc
 80021a4:	20000354 	.word	0x20000354
 80021a8:	080117cc 	.word	0x080117cc
 80021ac:	20000358 	.word	0x20000358
 80021b0:	080117dc 	.word	0x080117dc
 80021b4:	2000035c 	.word	0x2000035c

  /* creation of DemEvent_DTC_VibrationSensorFault */
  DemEvent_DTC_VibrationSensorFaultHandle = osEventFlagsNew(&DemEvent_DTC_VibrationSensorFault_attributes);
 80021b8:	4815      	ldr	r0, [pc, #84]	; (8002210 <MX_FREERTOS_Init+0x940>)
 80021ba:	f00a fa4c 	bl	800c656 <osEventFlagsNew>
 80021be:	4603      	mov	r3, r0
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <MX_FREERTOS_Init+0x944>)
 80021c2:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_LightSensorFault */
  DemEvent_DTC_LightSensorFaultHandle = osEventFlagsNew(&DemEvent_DTC_LightSensorFault_attributes);
 80021c4:	4814      	ldr	r0, [pc, #80]	; (8002218 <MX_FREERTOS_Init+0x948>)
 80021c6:	f00a fa46 	bl	800c656 <osEventFlagsNew>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4a13      	ldr	r2, [pc, #76]	; (800221c <MX_FREERTOS_Init+0x94c>)
 80021ce:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_HC05Fault */
  DemEvent_DTC_HC05FaultHandle = osEventFlagsNew(&DemEvent_DTC_HC05Fault_attributes);
 80021d0:	4813      	ldr	r0, [pc, #76]	; (8002220 <MX_FREERTOS_Init+0x950>)
 80021d2:	f00a fa40 	bl	800c656 <osEventFlagsNew>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4a12      	ldr	r2, [pc, #72]	; (8002224 <MX_FREERTOS_Init+0x954>)
 80021da:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_AlarmLedUnderVoltage */
  DemEvent_DTC_AlarmLedUnderVoltageHandle = osEventFlagsNew(&DemEvent_DTC_AlarmLedUnderVoltage_attributes);
 80021dc:	4812      	ldr	r0, [pc, #72]	; (8002228 <MX_FREERTOS_Init+0x958>)
 80021de:	f00a fa3a 	bl	800c656 <osEventFlagsNew>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4a11      	ldr	r2, [pc, #68]	; (800222c <MX_FREERTOS_Init+0x95c>)
 80021e6:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_AlarmLedShorted */
  DemEvent_DTC_AlarmLedShortedHandle = osEventFlagsNew(&DemEvent_DTC_AlarmLedShorted_attributes);
 80021e8:	4811      	ldr	r0, [pc, #68]	; (8002230 <MX_FREERTOS_Init+0x960>)
 80021ea:	f00a fa34 	bl	800c656 <osEventFlagsNew>
 80021ee:	4603      	mov	r3, r0
 80021f0:	4a10      	ldr	r2, [pc, #64]	; (8002234 <MX_FREERTOS_Init+0x964>)
 80021f2:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_CentralLockBuzzerFault */
  DemEvent_DTC_CentralLockBuzzerFaultHandle = osEventFlagsNew(&DemEvent_DTC_CentralLockBuzzerFault_attributes);
 80021f4:	4810      	ldr	r0, [pc, #64]	; (8002238 <MX_FREERTOS_Init+0x968>)
 80021f6:	f00a fa2e 	bl	800c656 <osEventFlagsNew>
 80021fa:	4603      	mov	r3, r0
 80021fc:	4a0f      	ldr	r2, [pc, #60]	; (800223c <MX_FREERTOS_Init+0x96c>)
 80021fe:	6013      	str	r3, [r2, #0]

  /* creation of DemEvent_DTC_AlarmBuzzerFault */
  DemEvent_DTC_AlarmBuzzerFaultHandle = osEventFlagsNew(&DemEvent_DTC_AlarmBuzzerFault_attributes);
 8002200:	480f      	ldr	r0, [pc, #60]	; (8002240 <MX_FREERTOS_Init+0x970>)
 8002202:	f00a fa28 	bl	800c656 <osEventFlagsNew>
 8002206:	4603      	mov	r3, r0
 8002208:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <MX_FREERTOS_Init+0x974>)
 800220a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	080117ec 	.word	0x080117ec
 8002214:	20000360 	.word	0x20000360
 8002218:	080117fc 	.word	0x080117fc
 800221c:	20000364 	.word	0x20000364
 8002220:	0801180c 	.word	0x0801180c
 8002224:	20000368 	.word	0x20000368
 8002228:	0801181c 	.word	0x0801181c
 800222c:	2000036c 	.word	0x2000036c
 8002230:	0801182c 	.word	0x0801182c
 8002234:	20000370 	.word	0x20000370
 8002238:	0801183c 	.word	0x0801183c
 800223c:	20000374 	.word	0x20000374
 8002240:	0801184c 	.word	0x0801184c
 8002244:	20000378 	.word	0x20000378

08002248 <OS_TASK_QM_APPL_HP>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_OS_TASK_QM_APPL_HP */
void OS_TASK_QM_APPL_HP(void *argument)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		//vTaskDelayUntil(&osAlarmLastCount, osAlarmPeriod);

		Rte_Runnable_CenLoc_MainFunction();
 8002250:	f00d fa7a 	bl	800f748 <Rte_Runnable_CenLoc_MainFunction>

		osDelay(1);
 8002254:	2001      	movs	r0, #1
 8002256:	f00a f8ec 	bl	800c432 <osDelay>
		Rte_Runnable_CenLoc_MainFunction();
 800225a:	e7f9      	b.n	8002250 <OS_TASK_QM_APPL_HP+0x8>

0800225c <OS_TASK_QM_APPL_LP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_QM_APPL_LP */
void OS_TASK_QM_APPL_LP(void *argument)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		//vTaskDelayUntil(&osAlarmLastCount, osAlarmPeriod);

		Rte_Runnable_IntLights_MainFunction();
 8002264:	f00d fa7c 	bl	800f760 <Rte_Runnable_IntLights_MainFunction>

		osDelay(1);
 8002268:	2001      	movs	r0, #1
 800226a:	f00a f8e2 	bl	800c432 <osDelay>
		Rte_Runnable_IntLights_MainFunction();
 800226e:	e7f9      	b.n	8002264 <OS_TASK_QM_APPL_LP+0x8>

08002270 <OS_TASK_ASIL_APPL_HP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_ASIL_APPL_HP */
void OS_TASK_ASIL_APPL_HP(void *argument)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		//vTaskDelayUntil(&osAlarmLastCount, osAlarmPeriod);

		Rte_Runnable_Btc_MainFunction();
 8002278:	f00d fa60 	bl	800f73c <Rte_Runnable_Btc_MainFunction>

		osDelay(1);
 800227c:	2001      	movs	r0, #1
 800227e:	f00a f8d8 	bl	800c432 <osDelay>
		Rte_Runnable_Btc_MainFunction();
 8002282:	e7f9      	b.n	8002278 <OS_TASK_ASIL_APPL_HP+0x8>

08002284 <OS_TASK_ASIL_APPL_LP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_ASIL_APPL_LP */
void OS_TASK_ASIL_APPL_LP(void *argument)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	for(;;)
	{

		//vTaskDelayUntil(&osAlarmLastCount, osAlarmPeriod);

		Rte_Runnable_ExtLights_MainFunction();
 800228c:	f00d fa62 	bl	800f754 <Rte_Runnable_ExtLights_MainFunction>
		Rte_Runnable_SecAlm_MainFunction();
 8002290:	f00d fa6c 	bl	800f76c <Rte_Runnable_SecAlm_MainFunction>

		osDelay(1);
 8002294:	2001      	movs	r0, #1
 8002296:	f00a f8cc 	bl	800c432 <osDelay>
		Rte_Runnable_ExtLights_MainFunction();
 800229a:	e7f7      	b.n	800228c <OS_TASK_ASIL_APPL_LP+0x8>

0800229c <OS_TASK_OS_COUNTER>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_OS_COUNTER */
void OS_TASK_OS_COUNTER(void *argument)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_OS_COUNTER */

	for(;;)
	{

	  OS_Counter++;
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <OS_TASK_OS_COUNTER+0x1c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	3301      	adds	r3, #1
 80022aa:	4a03      	ldr	r2, [pc, #12]	; (80022b8 <OS_TASK_OS_COUNTER+0x1c>)
 80022ac:	6013      	str	r3, [r2, #0]

	  osDelay(1);
 80022ae:	2001      	movs	r0, #1
 80022b0:	f00a f8bf 	bl	800c432 <osDelay>
	  OS_Counter++;
 80022b4:	e7f6      	b.n	80022a4 <OS_TASK_OS_COUNTER+0x8>
 80022b6:	bf00      	nop
 80022b8:	200001ac 	.word	0x200001ac

080022bc <OS_TASK_QM_BSW_HP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_QM_BSW_HP */
void OS_TASK_QM_BSW_HP(void *argument)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_HP */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022c4:	2001      	movs	r0, #1
 80022c6:	f00a f8b4 	bl	800c432 <osDelay>
 80022ca:	e7fb      	b.n	80022c4 <OS_TASK_QM_BSW_HP+0x8>

080022cc <OS_TASK_QM_BSW_LP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_QM_BSW_LP */
void OS_TASK_QM_BSW_LP(void *argument)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_LP */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022d4:	2001      	movs	r0, #1
 80022d6:	f00a f8ac 	bl	800c432 <osDelay>
 80022da:	e7fb      	b.n	80022d4 <OS_TASK_QM_BSW_LP+0x8>

080022dc <OS_TASK_ASIL_BSW_HP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_ASIL_BSW_HP */
void OS_TASK_ASIL_BSW_HP(void *argument)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_HP */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022e4:	2001      	movs	r0, #1
 80022e6:	f00a f8a4 	bl	800c432 <osDelay>
 80022ea:	e7fb      	b.n	80022e4 <OS_TASK_ASIL_BSW_HP+0x8>

080022ec <OS_TASK_ASIL_BSW_LP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OS_TASK_ASIL_BSW_LP */
void OS_TASK_ASIL_BSW_LP(void *argument)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_LP */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f00a f89c 	bl	800c432 <osDelay>
 80022fa:	e7fb      	b.n	80022f4 <OS_TASK_ASIL_BSW_LP+0x8>

080022fc <TASK_OS_OsInit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_OS_OsInit */
void TASK_OS_OsInit(void *argument)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK_OS_OsInit */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002304:	2001      	movs	r0, #1
 8002306:	f00a f894 	bl	800c432 <osDelay>
 800230a:	e7fb      	b.n	8002304 <TASK_OS_OsInit+0x8>

0800230c <TASK_OS_Watchdog_MainFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_OS_Watchdog_MainFunction */
void TASK_OS_Watchdog_MainFunction(void *argument)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TASK_OS_Watchdog_MainFunction */
  /* Infinite loop */
  for(;;)
  {

	  HAL_WWDG_Refresh(&hwwdg);
 8002314:	4803      	ldr	r0, [pc, #12]	; (8002324 <TASK_OS_Watchdog_MainFunction+0x18>)
 8002316:	f009 ff51 	bl	800c1bc <HAL_WWDG_Refresh>
    osDelay(1);
 800231a:	2001      	movs	r0, #1
 800231c:	f00a f889 	bl	800c432 <osDelay>
	  HAL_WWDG_Refresh(&hwwdg);
 8002320:	e7f8      	b.n	8002314 <TASK_OS_Watchdog_MainFunction+0x8>
 8002322:	bf00      	nop
 8002324:	20000a9c 	.word	0x20000a9c

08002328 <Os_SecAlm_AlarmReset_Callback>:
  /* USER CODE END TASK_OS_Watchdog_MainFunction */
}

/* Os_SecAlm_AlarmReset_Callback function */
void Os_SecAlm_AlarmReset_Callback(void *argument)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlm_AlarmReset_Callback */

  /* USER CODE END Os_SecAlm_AlarmReset_Callback */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <Os_CenLoc_LockUnlockSequence_Timer_Callback>:

/* Os_CenLoc_LockUnlockSequence_Timer_Callback function */
void Os_CenLoc_LockUnlockSequence_Timer_Callback(void *argument)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_CenLoc_LockUnlockSequence_Timer_Callback */

	if(Timer2Counter_CenLoc_Tim2IRQFlag <= 6
 8002344:	4b14      	ldr	r3, [pc, #80]	; (8002398 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b06      	cmp	r3, #6
 800234a:	d819      	bhi.n	8002380 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
		&& ((Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_HIGH)
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d103      	bne.n	800235c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x20>
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d007      	beq.n	800236c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x30>
		|| (Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_LOW)))
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d10d      	bne.n	8002380 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
 8002364:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d109      	bne.n	8002380 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
	{

		Timer2Counter_CenLoc_Tim2IRQFlag++;
 800236c:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	3301      	adds	r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002376:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(&Timer2Counter_CenLoc_Tim2IRQFlag);
 8002378:	4807      	ldr	r0, [pc, #28]	; (8002398 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 800237a:	f00d f83d 	bl	800f3f8 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag>
 800237e:	e006      	b.n	800238e <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x52>

	}
	else
	{

		Timer2Counter_CenLoc_Tim2IRQFlag = 7;
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002382:	2207      	movs	r2, #7
 8002384:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(&Timer2Counter_CenLoc_Tim2IRQFlag);
 8002386:	4804      	ldr	r0, [pc, #16]	; (8002398 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002388:	f00d f836 	bl	800f3f8 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag>

	}

  /* USER CODE END Os_CenLoc_LockUnlockSequence_Timer_Callback */
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000af4 	.word	0x20000af4
 800239c:	200000aa 	.word	0x200000aa
 80023a0:	200000ad 	.word	0x200000ad

080023a4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
 80023b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	4b5d      	ldr	r3, [pc, #372]	; (8002534 <MX_GPIO_Init+0x190>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a5c      	ldr	r2, [pc, #368]	; (8002534 <MX_GPIO_Init+0x190>)
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b5a      	ldr	r3, [pc, #360]	; (8002534 <MX_GPIO_Init+0x190>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	4b56      	ldr	r3, [pc, #344]	; (8002534 <MX_GPIO_Init+0x190>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a55      	ldr	r2, [pc, #340]	; (8002534 <MX_GPIO_Init+0x190>)
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b53      	ldr	r3, [pc, #332]	; (8002534 <MX_GPIO_Init+0x190>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	4b4f      	ldr	r3, [pc, #316]	; (8002534 <MX_GPIO_Init+0x190>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a4e      	ldr	r2, [pc, #312]	; (8002534 <MX_GPIO_Init+0x190>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b4c      	ldr	r3, [pc, #304]	; (8002534 <MX_GPIO_Init+0x190>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	4b48      	ldr	r3, [pc, #288]	; (8002534 <MX_GPIO_Init+0x190>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a47      	ldr	r2, [pc, #284]	; (8002534 <MX_GPIO_Init+0x190>)
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b45      	ldr	r3, [pc, #276]	; (8002534 <MX_GPIO_Init+0x190>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	4b41      	ldr	r3, [pc, #260]	; (8002534 <MX_GPIO_Init+0x190>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a40      	ldr	r2, [pc, #256]	; (8002534 <MX_GPIO_Init+0x190>)
 8002434:	f043 0308 	orr.w	r3, r3, #8
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <MX_GPIO_Init+0x190>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTS_Pin|RTS_Pin|IL_Pin|FL_Pin
 8002446:	2200      	movs	r2, #0
 8002448:	f641 411f 	movw	r1, #7199	; 0x1c1f
 800244c:	483a      	ldr	r0, [pc, #232]	; (8002538 <MX_GPIO_Init+0x194>)
 800244e:	f003 fc5d 	bl	8005d0c <HAL_GPIO_WritePin>
                          |BUZZ1_Pin|RFL_Pin|BL_Pin|PRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRL_Pin|LPN_Pin|LB_Pin|CAN2_CS_Pin
 8002452:	2200      	movs	r2, #0
 8002454:	f249 2116 	movw	r1, #37398	; 0x9216
 8002458:	4838      	ldr	r0, [pc, #224]	; (800253c <MX_GPIO_Init+0x198>)
 800245a:	f003 fc57 	bl	8005d0c <HAL_GPIO_WritePin>
                          |RL_Pin|SAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HB_Pin|CAN1_CS_Pin|BUZZ2_Pin|CLL_Pin, GPIO_PIN_RESET);
 800245e:	2200      	movs	r2, #0
 8002460:	f242 0183 	movw	r1, #8323	; 0x2083
 8002464:	4836      	ldr	r0, [pc, #216]	; (8002540 <MX_GPIO_Init+0x19c>)
 8002466:	f003 fc51 	bl	8005d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC6 PC7
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7
 800246a:	f24c 33c0 	movw	r3, #50112	; 0xc3c0
 800246e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002470:	2303      	movs	r3, #3
 8002472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	4619      	mov	r1, r3
 800247e:	482e      	ldr	r0, [pc, #184]	; (8002538 <MX_GPIO_Init+0x194>)
 8002480:	f003 f9aa 	bl	80057d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LTS_Pin|RTS_Pin|IL_Pin|FL_Pin
 8002484:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002488:	617b      	str	r3, [r7, #20]
                          |BUZZ1_Pin|RFL_Pin|BL_Pin|PRL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248a:	2301      	movs	r3, #1
 800248c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4619      	mov	r1, r3
 800249c:	4826      	ldr	r0, [pc, #152]	; (8002538 <MX_GPIO_Init+0x194>)
 800249e:	f003 f99b 	bl	80057d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = DRL_Pin|LPN_Pin|LB_Pin|CAN2_CS_Pin
 80024a2:	f249 2316 	movw	r3, #37398	; 0x9216
 80024a6:	617b      	str	r3, [r7, #20]
                          |RL_Pin|SAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a8:	2301      	movs	r3, #1
 80024aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b0:	2300      	movs	r3, #0
 80024b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	4619      	mov	r1, r3
 80024ba:	4820      	ldr	r0, [pc, #128]	; (800253c <MX_GPIO_Init+0x198>)
 80024bc:	f003 f98c 	bl	80057d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA7 PA8 PA10
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 80024c0:	f640 5388 	movw	r3, #3464	; 0xd88
 80024c4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024c6:	2303      	movs	r3, #3
 80024c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	4619      	mov	r1, r3
 80024d4:	4819      	ldr	r0, [pc, #100]	; (800253c <MX_GPIO_Init+0x198>)
 80024d6:	f003 f97f 	bl	80057d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HB_Pin|CAN1_CS_Pin|BUZZ2_Pin|CLL_Pin;
 80024da:	f242 0383 	movw	r3, #8323	; 0x2083
 80024de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e0:	2301      	movs	r3, #1
 80024e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4619      	mov	r1, r3
 80024f2:	4813      	ldr	r0, [pc, #76]	; (8002540 <MX_GPIO_Init+0x19c>)
 80024f4:	f003 f970 	bl	80057d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 80024f8:	f241 0304 	movw	r3, #4100	; 0x1004
 80024fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024fe:	2303      	movs	r3, #3
 8002500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	4619      	mov	r1, r3
 800250c:	480c      	ldr	r0, [pc, #48]	; (8002540 <MX_GPIO_Init+0x19c>)
 800250e:	f003 f963 	bl	80057d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002512:	2304      	movs	r3, #4
 8002514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002516:	2303      	movs	r3, #3
 8002518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4619      	mov	r1, r3
 8002524:	4807      	ldr	r0, [pc, #28]	; (8002544 <MX_GPIO_Init+0x1a0>)
 8002526:	f003 f957 	bl	80057d8 <HAL_GPIO_Init>

}
 800252a:	bf00      	nop
 800252c:	3728      	adds	r7, #40	; 0x28
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	40020800 	.word	0x40020800
 800253c:	40020000 	.word	0x40020000
 8002540:	40020400 	.word	0x40020400
 8002544:	40020c00 	.word	0x40020c00

08002548 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <MX_I2C1_Init+0x50>)
 800254e:	4a13      	ldr	r2, [pc, #76]	; (800259c <MX_I2C1_Init+0x54>)
 8002550:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <MX_I2C1_Init+0x50>)
 8002554:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <MX_I2C1_Init+0x58>)
 8002556:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <MX_I2C1_Init+0x50>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <MX_I2C1_Init+0x50>)
 8002560:	2200      	movs	r2, #0
 8002562:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <MX_I2C1_Init+0x50>)
 8002566:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800256a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800256c:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <MX_I2C1_Init+0x50>)
 800256e:	2200      	movs	r2, #0
 8002570:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <MX_I2C1_Init+0x50>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <MX_I2C1_Init+0x50>)
 800257a:	2200      	movs	r2, #0
 800257c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <MX_I2C1_Init+0x50>)
 8002580:	2200      	movs	r2, #0
 8002582:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002584:	4804      	ldr	r0, [pc, #16]	; (8002598 <MX_I2C1_Init+0x50>)
 8002586:	f003 fbf3 	bl	8005d70 <HAL_I2C_Init>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002590:	f000 f950 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}
 8002598:	2000037c 	.word	0x2000037c
 800259c:	40005400 	.word	0x40005400
 80025a0:	000186a0 	.word	0x000186a0

080025a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a21      	ldr	r2, [pc, #132]	; (8002648 <HAL_I2C_MspInit+0xa4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d13c      	bne.n	8002640 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_I2C_MspInit+0xa8>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	4a1f      	ldr	r2, [pc, #124]	; (800264c <HAL_I2C_MspInit+0xa8>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	6313      	str	r3, [r2, #48]	; 0x30
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_I2C_MspInit+0xa8>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e8:	2312      	movs	r3, #18
 80025ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025f4:	2304      	movs	r3, #4
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4619      	mov	r1, r3
 80025fe:	4814      	ldr	r0, [pc, #80]	; (8002650 <HAL_I2C_MspInit+0xac>)
 8002600:	f003 f8ea 	bl	80057d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	4b10      	ldr	r3, [pc, #64]	; (800264c <HAL_I2C_MspInit+0xa8>)
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	4a0f      	ldr	r2, [pc, #60]	; (800264c <HAL_I2C_MspInit+0xa8>)
 800260e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002612:	6413      	str	r3, [r2, #64]	; 0x40
 8002614:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_I2C_MspInit+0xa8>)
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002620:	2200      	movs	r2, #0
 8002622:	2105      	movs	r1, #5
 8002624:	201f      	movs	r0, #31
 8002626:	f002 f8f1 	bl	800480c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800262a:	201f      	movs	r0, #31
 800262c:	f002 f91a 	bl	8004864 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002630:	2200      	movs	r2, #0
 8002632:	2105      	movs	r1, #5
 8002634:	2020      	movs	r0, #32
 8002636:	f002 f8e9 	bl	800480c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800263a:	2020      	movs	r0, #32
 800263c:	f002 f912 	bl	8004864 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002640:	bf00      	nop
 8002642:	3728      	adds	r7, #40	; 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40005400 	.word	0x40005400
 800264c:	40023800 	.word	0x40023800
 8002650:	40020400 	.word	0x40020400

08002654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002658:	f001 f890 	bl	800377c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800265c:	f000 f828 	bl	80026b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002660:	f7ff fea0 	bl	80023a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002664:	f7ff f8ca 	bl	80017fc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002668:	f000 fed4 	bl	8003414 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800266c:	f000 fc7e 	bl	8002f6c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002670:	f000 fcca 	bl	8003008 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002674:	f000 fd64 	bl	8003140 <MX_TIM5_Init>
  MX_TIM4_Init();
 8002678:	f000 fd14 	bl	80030a4 <MX_TIM4_Init>
  MX_ADC1_Init();
 800267c:	f7fe ff8e 	bl	800159c <MX_ADC1_Init>
  MX_CRC_Init();
 8002680:	f7ff f886 	bl	8001790 <MX_CRC_Init>
  MX_TIM9_Init();
 8002684:	f000 fdac 	bl	80031e0 <MX_TIM9_Init>
  MX_SPI1_Init();
 8002688:	f000 f99e 	bl	80029c8 <MX_SPI1_Init>
  MX_TIM11_Init();
 800268c:	f000 fde2 	bl	8003254 <MX_TIM11_Init>
  MX_I2C1_Init();
 8002690:	f7ff ff5a 	bl	8002548 <MX_I2C1_Init>
  MX_RTC_Init();
 8002694:	f000 f8de 	bl	8002854 <MX_RTC_Init>
  MX_SPI2_Init();
 8002698:	f000 f9ce 	bl	8002a38 <MX_SPI2_Init>
  MX_WWDG_Init();
 800269c:	f000 ff80 	bl	80035a0 <MX_WWDG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80026a0:	f009 fdea 	bl	800c278 <osKernelInitialize>
  MX_FREERTOS_Init();
 80026a4:	f7ff f914 	bl	80018d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80026a8:	f009 fe0a 	bl	800c2c0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <main+0x58>
	...

080026b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b094      	sub	sp, #80	; 0x50
 80026b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026b6:	f107 0320 	add.w	r3, r7, #32
 80026ba:	2230      	movs	r2, #48	; 0x30
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f00d f9ba 	bl	800fa38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026c4:	f107 030c 	add.w	r3, r7, #12
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	4b28      	ldr	r3, [pc, #160]	; (800277c <SystemClock_Config+0xcc>)
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	4a27      	ldr	r2, [pc, #156]	; (800277c <SystemClock_Config+0xcc>)
 80026de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e2:	6413      	str	r3, [r2, #64]	; 0x40
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <SystemClock_Config+0xcc>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f0:	2300      	movs	r3, #0
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	4b22      	ldr	r3, [pc, #136]	; (8002780 <SystemClock_Config+0xd0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a21      	ldr	r2, [pc, #132]	; (8002780 <SystemClock_Config+0xd0>)
 80026fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <SystemClock_Config+0xd0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800270c:	2309      	movs	r3, #9
 800270e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002716:	2301      	movs	r3, #1
 8002718:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800271a:	2302      	movs	r3, #2
 800271c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800271e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002724:	2304      	movs	r3, #4
 8002726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002728:	2364      	movs	r3, #100	; 0x64
 800272a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800272c:	2302      	movs	r3, #2
 800272e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002730:	2304      	movs	r3, #4
 8002732:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002734:	f107 0320 	add.w	r3, r7, #32
 8002738:	4618      	mov	r0, r3
 800273a:	f005 fa33 	bl	8007ba4 <HAL_RCC_OscConfig>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002744:	f000 f876 	bl	8002834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002748:	230f      	movs	r3, #15
 800274a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800274c:	2302      	movs	r3, #2
 800274e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800275e:	f107 030c 	add.w	r3, r7, #12
 8002762:	2103      	movs	r1, #3
 8002764:	4618      	mov	r0, r3
 8002766:	f005 fd45 	bl	80081f4 <HAL_RCC_ClockConfig>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002770:	f000 f860 	bl	8002834 <Error_Handler>
  }
}
 8002774:	bf00      	nop
 8002776:	3750      	adds	r7, #80	; 0x50
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40023800 	.word	0x40023800
 8002780:	40007000 	.word	0x40007000

08002784 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if(htim->Instance == TIM11)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1f      	ldr	r2, [pc, #124]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d108      	bne.n	80027a8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{

		Timer11Counter_CenLoc_Tim11IRQFlag++;
 8002796:	4b1f      	ldr	r3, [pc, #124]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	3301      	adds	r3, #1
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80027a0:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag(&Timer11Counter_CenLoc_Tim11IRQFlag);
 80027a2:	481c      	ldr	r0, [pc, #112]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80027a4:	f00c fe6a 	bl	800f47c <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag>

		/* do nothing */

	}

	if(htim->Instance == TIM2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b0:	d123      	bne.n	80027fa <HAL_TIM_PeriodElapsedCallback+0x76>
	{

		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 80027b2:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d107      	bne.n	80027ca <HAL_TIM_PeriodElapsedCallback+0x46>
		{

			Timer2Counter_ExtLights_LTSFlag++;
 80027ba:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3301      	adds	r3, #1
 80027c0:	4a16      	ldr	r2, [pc, #88]	; (800281c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80027c2:	6013      	str	r3, [r2, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(&Timer2Counter_ExtLights_LTSFlag);
 80027c4:	4815      	ldr	r0, [pc, #84]	; (800281c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80027c6:	f00c ff61 	bl	800f68c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>

			/* do nothing */

		}

		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d107      	bne.n	80027e2 <HAL_TIM_PeriodElapsedCallback+0x5e>
		{

			Timer2Counter_ExtLights_RTSFlag++;
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3301      	adds	r3, #1
 80027d8:	4a12      	ldr	r2, [pc, #72]	; (8002824 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80027da:	6013      	str	r3, [r2, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(&Timer2Counter_ExtLights_RTSFlag);
 80027dc:	4811      	ldr	r0, [pc, #68]	; (8002824 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80027de:	f00c ff3f 	bl	800f660 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>

			/* do nothing */

		}

		if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_HIGH)
 80027e2:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d107      	bne.n	80027fa <HAL_TIM_PeriodElapsedCallback+0x76>
		{

			Timer2Counter_ExtLights_HLFlag++;
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3301      	adds	r3, #1
 80027f0:	4a0e      	ldr	r2, [pc, #56]	; (800282c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80027f2:	6013      	str	r3, [r2, #0]
			Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(&Timer2Counter_ExtLights_HLFlag);
 80027f4:	480d      	ldr	r0, [pc, #52]	; (800282c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80027f6:	f00c ff5f 	bl	800f6b8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>
		/* do nothin */

	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d101      	bne.n	8002808 <HAL_TIM_PeriodElapsedCallback+0x84>
    HAL_IncTick();
 8002804:	f000 ffdc 	bl	80037c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40014800 	.word	0x40014800
 8002814:	20000af6 	.word	0x20000af6
 8002818:	200000b9 	.word	0x200000b9
 800281c:	20000ae8 	.word	0x20000ae8
 8002820:	200000ba 	.word	0x200000ba
 8002824:	20000aec 	.word	0x20000aec
 8002828:	200000bb 	.word	0x200000bb
 800282c:	20000af0 	.word	0x20000af0
 8002830:	40010000 	.word	0x40010000

08002834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002838:	b672      	cpsid	i
}
 800283a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800283c:	e7fe      	b.n	800283c <Error_Handler+0x8>

0800283e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002868:	2300      	movs	r3, #0
 800286a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800286c:	4b2e      	ldr	r3, [pc, #184]	; (8002928 <MX_RTC_Init+0xd4>)
 800286e:	4a2f      	ldr	r2, [pc, #188]	; (800292c <MX_RTC_Init+0xd8>)
 8002870:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002872:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <MX_RTC_Init+0xd4>)
 8002874:	2200      	movs	r2, #0
 8002876:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002878:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <MX_RTC_Init+0xd4>)
 800287a:	227f      	movs	r2, #127	; 0x7f
 800287c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800287e:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <MX_RTC_Init+0xd4>)
 8002880:	22ff      	movs	r2, #255	; 0xff
 8002882:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002884:	4b28      	ldr	r3, [pc, #160]	; (8002928 <MX_RTC_Init+0xd4>)
 8002886:	2200      	movs	r2, #0
 8002888:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800288a:	4b27      	ldr	r3, [pc, #156]	; (8002928 <MX_RTC_Init+0xd4>)
 800288c:	2200      	movs	r2, #0
 800288e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002890:	4b25      	ldr	r3, [pc, #148]	; (8002928 <MX_RTC_Init+0xd4>)
 8002892:	2200      	movs	r2, #0
 8002894:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002896:	4824      	ldr	r0, [pc, #144]	; (8002928 <MX_RTC_Init+0xd4>)
 8002898:	f006 f9bc 	bl	8008c14 <HAL_RTC_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80028a2:	f7ff ffc7 	bl	8002834 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	2201      	movs	r2, #1
 80028be:	4619      	mov	r1, r3
 80028c0:	4819      	ldr	r0, [pc, #100]	; (8002928 <MX_RTC_Init+0xd4>)
 80028c2:	f006 faab 	bl	8008e1c <HAL_RTC_SetTime>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80028cc:	f7ff ffb2 	bl	8002834 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80028d0:	2301      	movs	r3, #1
 80028d2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80028d4:	2301      	movs	r3, #1
 80028d6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80028d8:	2301      	movs	r3, #1
 80028da:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80028dc:	2300      	movs	r3, #0
 80028de:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80028e0:	463b      	mov	r3, r7
 80028e2:	2201      	movs	r2, #1
 80028e4:	4619      	mov	r1, r3
 80028e6:	4810      	ldr	r0, [pc, #64]	; (8002928 <MX_RTC_Init+0xd4>)
 80028e8:	f006 fbe0 	bl	80090ac <HAL_RTC_SetDate>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80028f2:	f7ff ff9f 	bl	8002834 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	480b      	ldr	r0, [pc, #44]	; (8002928 <MX_RTC_Init+0xd4>)
 80028fc:	f006 fdbe 	bl	800947c <HAL_RTCEx_SetWakeUpTimer_IT>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8002906:	f7ff ff95 	bl	8002834 <Error_Handler>
  }

  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 800290a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800290e:	4806      	ldr	r0, [pc, #24]	; (8002928 <MX_RTC_Init+0xd4>)
 8002910:	f006 fec4 	bl	800969c <HAL_RTCEx_SetCalibrationOutPut>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_RTC_Init+0xca>
  {
    Error_Handler();
 800291a:	f7ff ff8b 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000400 	.word	0x20000400
 800292c:	40002800 	.word	0x40002800

08002930 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002938:	f107 0308 	add.w	r3, r7, #8
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	611a      	str	r2, [r3, #16]
 8002948:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a10      	ldr	r2, [pc, #64]	; (8002990 <HAL_RTC_MspInit+0x60>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d119      	bne.n	8002988 <HAL_RTC_MspInit+0x58>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002954:	2302      	movs	r3, #2
 8002956:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800295c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800295e:	f107 0308 	add.w	r3, r7, #8
 8002962:	4618      	mov	r0, r3
 8002964:	f005 ff40 	bl	80087e8 <HAL_RCCEx_PeriphCLKConfig>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800296e:	f7ff ff61 	bl	8002834 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_RTC_MspInit+0x64>)
 8002974:	2201      	movs	r2, #1
 8002976:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 8002978:	2200      	movs	r2, #0
 800297a:	2105      	movs	r1, #5
 800297c:	2003      	movs	r0, #3
 800297e:	f001 ff45 	bl	800480c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002982:	2003      	movs	r0, #3
 8002984:	f001 ff6e 	bl	8004864 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002988:	bf00      	nop
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40002800 	.word	0x40002800
 8002994:	42470e3c 	.word	0x42470e3c

08002998 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a06      	ldr	r2, [pc, #24]	; (80029c0 <HAL_RTC_MspDeInit+0x28>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d105      	bne.n	80029b6 <HAL_RTC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_RTC_MspDeInit+0x2c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Deinit */
    HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);
 80029b0:	2003      	movs	r0, #3
 80029b2:	f001 ff6f 	bl	8004894 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40002800 	.word	0x40002800
 80029c4:	42470e3c 	.word	0x42470e3c

080029c8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029cc:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <MX_SPI1_Init+0x68>)
 80029ce:	4a19      	ldr	r2, [pc, #100]	; (8002a34 <MX_SPI1_Init+0x6c>)
 80029d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029d2:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <MX_SPI1_Init+0x68>)
 80029d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <MX_SPI1_Init+0x68>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <MX_SPI1_Init+0x68>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <MX_SPI1_Init+0x68>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029ec:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <MX_SPI1_Init+0x68>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029f2:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <MX_SPI1_Init+0x68>)
 80029f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <MX_SPI1_Init+0x68>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <MX_SPI1_Init+0x68>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <MX_SPI1_Init+0x68>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <MX_SPI1_Init+0x68>)
 8002a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <MX_SPI1_Init+0x68>)
 8002a16:	220a      	movs	r2, #10
 8002a18:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a1a:	4805      	ldr	r0, [pc, #20]	; (8002a30 <MX_SPI1_Init+0x68>)
 8002a1c:	f006 fe96 	bl	800974c <HAL_SPI_Init>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002a26:	f7ff ff05 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	2000043c 	.word	0x2000043c
 8002a34:	40013000 	.word	0x40013000

08002a38 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002a3c:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <MX_SPI2_Init+0x68>)
 8002a3e:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <MX_SPI2_Init+0x6c>)
 8002a40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a42:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <MX_SPI2_Init+0x68>)
 8002a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <MX_SPI2_Init+0x68>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a50:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <MX_SPI2_Init+0x68>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <MX_SPI2_Init+0x68>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <MX_SPI2_Init+0x68>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a62:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <MX_SPI2_Init+0x68>)
 8002a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a68:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <MX_SPI2_Init+0x68>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <MX_SPI2_Init+0x68>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <MX_SPI2_Init+0x68>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <MX_SPI2_Init+0x68>)
 8002a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <MX_SPI2_Init+0x68>)
 8002a86:	220a      	movs	r2, #10
 8002a88:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a8a:	4805      	ldr	r0, [pc, #20]	; (8002aa0 <MX_SPI2_Init+0x68>)
 8002a8c:	f006 fe5e 	bl	800974c <HAL_SPI_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8002a96:	f7ff fecd 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200004bc 	.word	0x200004bc
 8002aa4:	40003800 	.word	0x40003800

08002aa8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08c      	sub	sp, #48	; 0x30
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 031c 	add.w	r3, r7, #28
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a49      	ldr	r2, [pc, #292]	; (8002bec <HAL_SPI_MspInit+0x144>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d152      	bne.n	8002b70 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	4b48      	ldr	r3, [pc, #288]	; (8002bf0 <HAL_SPI_MspInit+0x148>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a47      	ldr	r2, [pc, #284]	; (8002bf0 <HAL_SPI_MspInit+0x148>)
 8002ad4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b45      	ldr	r3, [pc, #276]	; (8002bf0 <HAL_SPI_MspInit+0x148>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <HAL_SPI_MspInit+0x148>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a40      	ldr	r2, [pc, #256]	; (8002bf0 <HAL_SPI_MspInit+0x148>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b3e      	ldr	r3, [pc, #248]	; (8002bf0 <HAL_SPI_MspInit+0x148>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <HAL_SPI_MspInit+0x148>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a39      	ldr	r2, [pc, #228]	; (8002bf0 <HAL_SPI_MspInit+0x148>)
 8002b0c:	f043 0302 	orr.w	r3, r3, #2
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b37      	ldr	r3, [pc, #220]	; (8002bf0 <HAL_SPI_MspInit+0x148>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b1e:	2320      	movs	r3, #32
 8002b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b2e:	2305      	movs	r3, #5
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b32:	f107 031c 	add.w	r3, r7, #28
 8002b36:	4619      	mov	r1, r3
 8002b38:	482e      	ldr	r0, [pc, #184]	; (8002bf4 <HAL_SPI_MspInit+0x14c>)
 8002b3a:	f002 fe4d 	bl	80057d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b3e:	2330      	movs	r3, #48	; 0x30
 8002b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b4e:	2305      	movs	r3, #5
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b52:	f107 031c 	add.w	r3, r7, #28
 8002b56:	4619      	mov	r1, r3
 8002b58:	4827      	ldr	r0, [pc, #156]	; (8002bf8 <HAL_SPI_MspInit+0x150>)
 8002b5a:	f002 fe3d 	bl	80057d8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2105      	movs	r1, #5
 8002b62:	2023      	movs	r0, #35	; 0x23
 8002b64:	f001 fe52 	bl	800480c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002b68:	2023      	movs	r0, #35	; 0x23
 8002b6a:	f001 fe7b 	bl	8004864 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002b6e:	e039      	b.n	8002be4 <HAL_SPI_MspInit+0x13c>
  else if(spiHandle->Instance==SPI2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <HAL_SPI_MspInit+0x154>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d134      	bne.n	8002be4 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <HAL_SPI_MspInit+0x148>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <HAL_SPI_MspInit+0x148>)
 8002b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b88:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_SPI_MspInit+0x148>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <HAL_SPI_MspInit+0x148>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <HAL_SPI_MspInit+0x148>)
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_SPI_MspInit+0x148>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002bb2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bc4:	2305      	movs	r3, #5
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc8:	f107 031c 	add.w	r3, r7, #28
 8002bcc:	4619      	mov	r1, r3
 8002bce:	480a      	ldr	r0, [pc, #40]	; (8002bf8 <HAL_SPI_MspInit+0x150>)
 8002bd0:	f002 fe02 	bl	80057d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2105      	movs	r1, #5
 8002bd8:	2024      	movs	r0, #36	; 0x24
 8002bda:	f001 fe17 	bl	800480c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002bde:	2024      	movs	r0, #36	; 0x24
 8002be0:	f001 fe40 	bl	8004864 <HAL_NVIC_EnableIRQ>
}
 8002be4:	bf00      	nop
 8002be6:	3730      	adds	r7, #48	; 0x30
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40013000 	.word	0x40013000
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40020000 	.word	0x40020000
 8002bf8:	40020400 	.word	0x40020400
 8002bfc:	40003800 	.word	0x40003800

08002c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <HAL_MspInit+0x94>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	4a21      	ldr	r2, [pc, #132]	; (8002c94 <HAL_MspInit+0x94>)
 8002c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c14:	6453      	str	r3, [r2, #68]	; 0x44
 8002c16:	4b1f      	ldr	r3, [pc, #124]	; (8002c94 <HAL_MspInit+0x94>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1e:	607b      	str	r3, [r7, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <HAL_MspInit+0x94>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	4a1a      	ldr	r2, [pc, #104]	; (8002c94 <HAL_MspInit+0x94>)
 8002c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c30:	6413      	str	r3, [r2, #64]	; 0x40
 8002c32:	4b18      	ldr	r3, [pc, #96]	; (8002c94 <HAL_MspInit+0x94>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	210f      	movs	r1, #15
 8002c42:	f06f 0001 	mvn.w	r0, #1
 8002c46:	f001 fde1 	bl	800480c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2105      	movs	r1, #5
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f001 fddc 	bl	800480c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8002c54:	2001      	movs	r0, #1
 8002c56:	f001 fe05 	bl	8004864 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2105      	movs	r1, #5
 8002c5e:	2004      	movs	r0, #4
 8002c60:	f001 fdd4 	bl	800480c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002c64:	2004      	movs	r0, #4
 8002c66:	f001 fdfd 	bl	8004864 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2105      	movs	r1, #5
 8002c6e:	2005      	movs	r0, #5
 8002c70:	f001 fdcc 	bl	800480c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002c74:	2005      	movs	r0, #5
 8002c76:	f001 fdf5 	bl	8004864 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2105      	movs	r1, #5
 8002c7e:	2051      	movs	r0, #81	; 0x51
 8002c80:	f001 fdc4 	bl	800480c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002c84:	2051      	movs	r0, #81	; 0x51
 8002c86:	f001 fded 	bl	8004864 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800

08002c98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08c      	sub	sp, #48	; 0x30
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	4b2e      	ldr	r3, [pc, #184]	; (8002d68 <HAL_InitTick+0xd0>)
 8002cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb0:	4a2d      	ldr	r2, [pc, #180]	; (8002d68 <HAL_InitTick+0xd0>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <HAL_InitTick+0xd0>)
 8002cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cc4:	f107 020c 	add.w	r2, r7, #12
 8002cc8:	f107 0310 	add.w	r3, r7, #16
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f005 fd58 	bl	8008784 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002cd4:	f005 fd42 	bl	800875c <HAL_RCC_GetPCLK2Freq>
 8002cd8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cdc:	4a23      	ldr	r2, [pc, #140]	; (8002d6c <HAL_InitTick+0xd4>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	0c9b      	lsrs	r3, r3, #18
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002ce8:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <HAL_InitTick+0xd8>)
 8002cea:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <HAL_InitTick+0xdc>)
 8002cec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <HAL_InitTick+0xd8>)
 8002cf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cf4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002cf6:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <HAL_InitTick+0xd8>)
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002cfc:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <HAL_InitTick+0xd8>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d02:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <HAL_InitTick+0xd8>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d08:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_InitTick+0xd8>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002d0e:	4818      	ldr	r0, [pc, #96]	; (8002d70 <HAL_InitTick+0xd8>)
 8002d10:	f007 f880 	bl	8009e14 <HAL_TIM_Base_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d11b      	bne.n	8002d5a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002d22:	4813      	ldr	r0, [pc, #76]	; (8002d70 <HAL_InitTick+0xd8>)
 8002d24:	f007 f948 	bl	8009fb8 <HAL_TIM_Base_Start_IT>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d111      	bne.n	8002d5a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d36:	2019      	movs	r0, #25
 8002d38:	f001 fd94 	bl	8004864 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b0f      	cmp	r3, #15
 8002d40:	d808      	bhi.n	8002d54 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002d42:	2200      	movs	r2, #0
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	2019      	movs	r0, #25
 8002d48:	f001 fd60 	bl	800480c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <HAL_InitTick+0xe0>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e002      	b.n	8002d5a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3730      	adds	r7, #48	; 0x30
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	431bde83 	.word	0x431bde83
 8002d70:	2000053c 	.word	0x2000053c
 8002d74:	40010000 	.word	0x40010000
 8002d78:	20000008 	.word	0x20000008

08002d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d80:	e7fe      	b.n	8002d80 <NMI_Handler+0x4>

08002d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d86:	e7fe      	b.n	8002d86 <HardFault_Handler+0x4>

08002d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d8c:	e7fe      	b.n	8002d8c <MemManage_Handler+0x4>

08002d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d92:	e7fe      	b.n	8002d92 <BusFault_Handler+0x4>

08002d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d98:	e7fe      	b.n	8002d98 <UsageFault_Handler+0x4>

08002d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002dac:	f004 fee0 	bl	8007b70 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002db0:	bf00      	nop
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002db8:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <RTC_WKUP_IRQHandler+0x10>)
 8002dba:	f006 fc3f 	bl	800963c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000400 	.word	0x20000400

08002dc8 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002dcc:	f002 fb2e 	bl	800542c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
	...

08002de4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002de8:	4802      	ldr	r0, [pc, #8]	; (8002df4 <ADC_IRQHandler+0x10>)
 8002dea:	f000 fe8b 	bl	8003b04 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	200000e0 	.word	0x200000e0

08002df8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002dfc:	4802      	ldr	r0, [pc, #8]	; (8002e08 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002dfe:	f007 f9d7 	bl	800a1b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200008c0 	.word	0x200008c0

08002e0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e10:	4802      	ldr	r0, [pc, #8]	; (8002e1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e12:	f007 f9cd 	bl	800a1b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	2000053c 	.word	0x2000053c

08002e20 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002e24:	4802      	ldr	r0, [pc, #8]	; (8002e30 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002e26:	f007 f9c3 	bl	800a1b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000974 	.word	0x20000974

08002e34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e38:	4802      	ldr	r0, [pc, #8]	; (8002e44 <TIM2_IRQHandler+0x10>)
 8002e3a:	f007 f9b9 	bl	800a1b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200005f0 	.word	0x200005f0

08002e48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	Timer3Counter_CenLoc_Tim3IRQFlag++;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <TIM3_IRQHandler+0x20>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <TIM3_IRQHandler+0x20>)
 8002e56:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag(&Timer3Counter_CenLoc_Tim3IRQFlag);
 8002e58:	4803      	ldr	r0, [pc, #12]	; (8002e68 <TIM3_IRQHandler+0x20>)
 8002e5a:	f00c fae3 	bl	800f424 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e5e:	4803      	ldr	r0, [pc, #12]	; (8002e6c <TIM3_IRQHandler+0x24>)
 8002e60:	f007 f9a6 	bl	800a1b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000af7 	.word	0x20000af7
 8002e6c:	200006a4 	.word	0x200006a4

08002e70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	SecAlm_TriggerIRQCounterForTimer4++;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <TIM4_IRQHandler+0x20>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <TIM4_IRQHandler+0x20>)
 8002e7e:	701a      	strb	r2, [r3, #0]
	Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(&SecAlm_TriggerIRQCounterForTimer4);
 8002e80:	4803      	ldr	r0, [pc, #12]	; (8002e90 <TIM4_IRQHandler+0x20>)
 8002e82:	f00c fc45 	bl	800f710 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e86:	4803      	ldr	r0, [pc, #12]	; (8002e94 <TIM4_IRQHandler+0x24>)
 8002e88:	f007 f992 	bl	800a1b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	200000d8 	.word	0x200000d8
 8002e94:	20000758 	.word	0x20000758

08002e98 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002e9c:	4802      	ldr	r0, [pc, #8]	; (8002ea8 <I2C1_EV_IRQHandler+0x10>)
 8002e9e:	f003 f971 	bl	8006184 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	2000037c 	.word	0x2000037c

08002eac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002eb0:	4802      	ldr	r0, [pc, #8]	; (8002ebc <I2C1_ER_IRQHandler+0x10>)
 8002eb2:	f003 fad8 	bl	8006466 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	2000037c 	.word	0x2000037c

08002ec0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <SPI1_IRQHandler+0x10>)
 8002ec6:	f006 fe3f 	bl	8009b48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	2000043c 	.word	0x2000043c

08002ed4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <SPI2_IRQHandler+0x10>)
 8002eda:	f006 fe35 	bl	8009b48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200004bc 	.word	0x200004bc

08002ee8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <USART1_IRQHandler+0x10>)
 8002eee:	f008 f933 	bl	800b158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000a28 	.word	0x20000a28

08002efc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

	Timer5Counter_CenLoc_Tim5IRQFlag++;
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <TIM5_IRQHandler+0x20>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	3301      	adds	r3, #1
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <TIM5_IRQHandler+0x20>)
 8002f0a:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag(&Timer5Counter_CenLoc_Tim5IRQFlag);
 8002f0c:	4803      	ldr	r0, [pc, #12]	; (8002f1c <TIM5_IRQHandler+0x20>)
 8002f0e:	f00c fa9f 	bl	800f450 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag>

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002f12:	4803      	ldr	r0, [pc, #12]	; (8002f20 <TIM5_IRQHandler+0x24>)
 8002f14:	f007 f94c 	bl	800a1b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002f18:	bf00      	nop
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000af5 	.word	0x20000af5
 8002f20:	2000080c 	.word	0x2000080c

08002f24 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f28:	4802      	ldr	r0, [pc, #8]	; (8002f34 <DMA2_Stream0_IRQHandler+0x10>)
 8002f2a:	f002 f807 	bl	8004f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000144 	.word	0x20000144

08002f38 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f4c:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <SystemInit+0x20>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f52:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <SystemInit+0x20>)
 8002f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f72:	f107 0308 	add.w	r3, r7, #8
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f80:	463b      	mov	r3, r7
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f88:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <MX_TIM2_Init+0x98>)
 8002f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8002f90:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <MX_TIM2_Init+0x98>)
 8002f92:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f98:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <MX_TIM2_Init+0x98>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <MX_TIM2_Init+0x98>)
 8002fa0:	f241 3287 	movw	r2, #4999	; 0x1387
 8002fa4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa6:	4b17      	ldr	r3, [pc, #92]	; (8003004 <MX_TIM2_Init+0x98>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <MX_TIM2_Init+0x98>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fb2:	4814      	ldr	r0, [pc, #80]	; (8003004 <MX_TIM2_Init+0x98>)
 8002fb4:	f006 ff2e 	bl	8009e14 <HAL_TIM_Base_Init>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002fbe:	f7ff fc39 	bl	8002834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fc8:	f107 0308 	add.w	r3, r7, #8
 8002fcc:	4619      	mov	r1, r3
 8002fce:	480d      	ldr	r0, [pc, #52]	; (8003004 <MX_TIM2_Init+0x98>)
 8002fd0:	f007 fa16 	bl	800a400 <HAL_TIM_ConfigClockSource>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002fda:	f7ff fc2b 	bl	8002834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002fe6:	463b      	mov	r3, r7
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4806      	ldr	r0, [pc, #24]	; (8003004 <MX_TIM2_Init+0x98>)
 8002fec:	f007 fee4 	bl	800adb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002ff6:	f7ff fc1d 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ffa:	bf00      	nop
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	200005f0 	.word	0x200005f0

08003008 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800300e:	f107 0308 	add.w	r3, r7, #8
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	609a      	str	r2, [r3, #8]
 800301a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800301c:	463b      	mov	r3, r7
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003024:	4b1d      	ldr	r3, [pc, #116]	; (800309c <MX_TIM3_Init+0x94>)
 8003026:	4a1e      	ldr	r2, [pc, #120]	; (80030a0 <MX_TIM3_Init+0x98>)
 8003028:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 800302a:	4b1c      	ldr	r3, [pc, #112]	; (800309c <MX_TIM3_Init+0x94>)
 800302c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003030:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003032:	4b1a      	ldr	r3, [pc, #104]	; (800309c <MX_TIM3_Init+0x94>)
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 8003038:	4b18      	ldr	r3, [pc, #96]	; (800309c <MX_TIM3_Init+0x94>)
 800303a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800303e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003040:	4b16      	ldr	r3, [pc, #88]	; (800309c <MX_TIM3_Init+0x94>)
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <MX_TIM3_Init+0x94>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800304c:	4813      	ldr	r0, [pc, #76]	; (800309c <MX_TIM3_Init+0x94>)
 800304e:	f006 fee1 	bl	8009e14 <HAL_TIM_Base_Init>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003058:	f7ff fbec 	bl	8002834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800305c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003062:	f107 0308 	add.w	r3, r7, #8
 8003066:	4619      	mov	r1, r3
 8003068:	480c      	ldr	r0, [pc, #48]	; (800309c <MX_TIM3_Init+0x94>)
 800306a:	f007 f9c9 	bl	800a400 <HAL_TIM_ConfigClockSource>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003074:	f7ff fbde 	bl	8002834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003078:	2300      	movs	r3, #0
 800307a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800307c:	2300      	movs	r3, #0
 800307e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003080:	463b      	mov	r3, r7
 8003082:	4619      	mov	r1, r3
 8003084:	4805      	ldr	r0, [pc, #20]	; (800309c <MX_TIM3_Init+0x94>)
 8003086:	f007 fe97 	bl	800adb8 <HAL_TIMEx_MasterConfigSynchronization>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003090:	f7ff fbd0 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003094:	bf00      	nop
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	200006a4 	.word	0x200006a4
 80030a0:	40000400 	.word	0x40000400

080030a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030aa:	f107 0308 	add.w	r3, r7, #8
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	609a      	str	r2, [r3, #8]
 80030b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030b8:	463b      	mov	r3, r7
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80030c0:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <MX_TIM4_Init+0x94>)
 80030c2:	4a1e      	ldr	r2, [pc, #120]	; (800313c <MX_TIM4_Init+0x98>)
 80030c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 80030c6:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <MX_TIM4_Init+0x94>)
 80030c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80030cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ce:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <MX_TIM4_Init+0x94>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 80030d4:	4b18      	ldr	r3, [pc, #96]	; (8003138 <MX_TIM4_Init+0x94>)
 80030d6:	f241 3287 	movw	r2, #4999	; 0x1387
 80030da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030dc:	4b16      	ldr	r3, [pc, #88]	; (8003138 <MX_TIM4_Init+0x94>)
 80030de:	2200      	movs	r2, #0
 80030e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <MX_TIM4_Init+0x94>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80030e8:	4813      	ldr	r0, [pc, #76]	; (8003138 <MX_TIM4_Init+0x94>)
 80030ea:	f006 fe93 	bl	8009e14 <HAL_TIM_Base_Init>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80030f4:	f7ff fb9e 	bl	8002834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80030fe:	f107 0308 	add.w	r3, r7, #8
 8003102:	4619      	mov	r1, r3
 8003104:	480c      	ldr	r0, [pc, #48]	; (8003138 <MX_TIM4_Init+0x94>)
 8003106:	f007 f97b 	bl	800a400 <HAL_TIM_ConfigClockSource>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003110:	f7ff fb90 	bl	8002834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003114:	2300      	movs	r3, #0
 8003116:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003118:	2300      	movs	r3, #0
 800311a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800311c:	463b      	mov	r3, r7
 800311e:	4619      	mov	r1, r3
 8003120:	4805      	ldr	r0, [pc, #20]	; (8003138 <MX_TIM4_Init+0x94>)
 8003122:	f007 fe49 	bl	800adb8 <HAL_TIMEx_MasterConfigSynchronization>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800312c:	f7ff fb82 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003130:	bf00      	nop
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000758 	.word	0x20000758
 800313c:	40000800 	.word	0x40000800

08003140 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003146:	f107 0308 	add.w	r3, r7, #8
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	605a      	str	r2, [r3, #4]
 8003150:	609a      	str	r2, [r3, #8]
 8003152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003154:	463b      	mov	r3, r7
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800315c:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <MX_TIM5_Init+0x94>)
 800315e:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <MX_TIM5_Init+0x98>)
 8003160:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000-1;
 8003162:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <MX_TIM5_Init+0x94>)
 8003164:	f242 720f 	movw	r2, #9999	; 0x270f
 8003168:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800316a:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <MX_TIM5_Init+0x94>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 8003170:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <MX_TIM5_Init+0x94>)
 8003172:	4a1a      	ldr	r2, [pc, #104]	; (80031dc <MX_TIM5_Init+0x9c>)
 8003174:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003176:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <MX_TIM5_Init+0x94>)
 8003178:	2200      	movs	r2, #0
 800317a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800317c:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <MX_TIM5_Init+0x94>)
 800317e:	2200      	movs	r2, #0
 8003180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003182:	4814      	ldr	r0, [pc, #80]	; (80031d4 <MX_TIM5_Init+0x94>)
 8003184:	f006 fe46 	bl	8009e14 <HAL_TIM_Base_Init>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800318e:	f7ff fb51 	bl	8002834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003196:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003198:	f107 0308 	add.w	r3, r7, #8
 800319c:	4619      	mov	r1, r3
 800319e:	480d      	ldr	r0, [pc, #52]	; (80031d4 <MX_TIM5_Init+0x94>)
 80031a0:	f007 f92e 	bl	800a400 <HAL_TIM_ConfigClockSource>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80031aa:	f7ff fb43 	bl	8002834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ae:	2300      	movs	r3, #0
 80031b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80031b6:	463b      	mov	r3, r7
 80031b8:	4619      	mov	r1, r3
 80031ba:	4806      	ldr	r0, [pc, #24]	; (80031d4 <MX_TIM5_Init+0x94>)
 80031bc:	f007 fdfc 	bl	800adb8 <HAL_TIMEx_MasterConfigSynchronization>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80031c6:	f7ff fb35 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80031ca:	bf00      	nop
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	2000080c 	.word	0x2000080c
 80031d8:	40000c00 	.word	0x40000c00
 80031dc:	0001869f 	.word	0x0001869f

080031e0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031e6:	463b      	mov	r3, r7
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80031f2:	4b16      	ldr	r3, [pc, #88]	; (800324c <MX_TIM9_Init+0x6c>)
 80031f4:	4a16      	ldr	r2, [pc, #88]	; (8003250 <MX_TIM9_Init+0x70>)
 80031f6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 10000-1;
 80031f8:	4b14      	ldr	r3, [pc, #80]	; (800324c <MX_TIM9_Init+0x6c>)
 80031fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80031fe:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003200:	4b12      	ldr	r3, [pc, #72]	; (800324c <MX_TIM9_Init+0x6c>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000-1;
 8003206:	4b11      	ldr	r3, [pc, #68]	; (800324c <MX_TIM9_Init+0x6c>)
 8003208:	f242 720f 	movw	r2, #9999	; 0x270f
 800320c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800320e:	4b0f      	ldr	r3, [pc, #60]	; (800324c <MX_TIM9_Init+0x6c>)
 8003210:	2200      	movs	r2, #0
 8003212:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003214:	4b0d      	ldr	r3, [pc, #52]	; (800324c <MX_TIM9_Init+0x6c>)
 8003216:	2200      	movs	r2, #0
 8003218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800321a:	480c      	ldr	r0, [pc, #48]	; (800324c <MX_TIM9_Init+0x6c>)
 800321c:	f006 fdfa 	bl	8009e14 <HAL_TIM_Base_Init>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8003226:	f7ff fb05 	bl	8002834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800322a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800322e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003230:	463b      	mov	r3, r7
 8003232:	4619      	mov	r1, r3
 8003234:	4805      	ldr	r0, [pc, #20]	; (800324c <MX_TIM9_Init+0x6c>)
 8003236:	f007 f8e3 	bl	800a400 <HAL_TIM_ConfigClockSource>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8003240:	f7ff faf8 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	200008c0 	.word	0x200008c0
 8003250:	40014000 	.word	0x40014000

08003254 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <MX_TIM11_Init+0x40>)
 800325a:	4a0f      	ldr	r2, [pc, #60]	; (8003298 <MX_TIM11_Init+0x44>)
 800325c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 10000-1;
 800325e:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <MX_TIM11_Init+0x40>)
 8003260:	f242 720f 	movw	r2, #9999	; 0x270f
 8003264:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003266:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <MX_TIM11_Init+0x40>)
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 5000-1;
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <MX_TIM11_Init+0x40>)
 800326e:	f241 3287 	movw	r2, #4999	; 0x1387
 8003272:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003274:	4b07      	ldr	r3, [pc, #28]	; (8003294 <MX_TIM11_Init+0x40>)
 8003276:	2200      	movs	r2, #0
 8003278:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <MX_TIM11_Init+0x40>)
 800327c:	2200      	movs	r2, #0
 800327e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003280:	4804      	ldr	r0, [pc, #16]	; (8003294 <MX_TIM11_Init+0x40>)
 8003282:	f006 fdc7 	bl	8009e14 <HAL_TIM_Base_Init>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 800328c:	f7ff fad2 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003290:	bf00      	nop
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20000974 	.word	0x20000974
 8003298:	40014800 	.word	0x40014800

0800329c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ac:	d116      	bne.n	80032dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	4b52      	ldr	r3, [pc, #328]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	4a51      	ldr	r2, [pc, #324]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6413      	str	r3, [r2, #64]	; 0x40
 80032be:	4b4f      	ldr	r3, [pc, #316]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80032ca:	2200      	movs	r2, #0
 80032cc:	2105      	movs	r1, #5
 80032ce:	201c      	movs	r0, #28
 80032d0:	f001 fa9c 	bl	800480c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032d4:	201c      	movs	r0, #28
 80032d6:	f001 fac5 	bl	8004864 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80032da:	e08a      	b.n	80033f2 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM3)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a47      	ldr	r2, [pc, #284]	; (8003400 <HAL_TIM_Base_MspInit+0x164>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d116      	bne.n	8003314 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	61bb      	str	r3, [r7, #24]
 80032ea:	4b44      	ldr	r3, [pc, #272]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	4a43      	ldr	r2, [pc, #268]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 80032f0:	f043 0302 	orr.w	r3, r3, #2
 80032f4:	6413      	str	r3, [r2, #64]	; 0x40
 80032f6:	4b41      	ldr	r3, [pc, #260]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003302:	2200      	movs	r2, #0
 8003304:	2105      	movs	r1, #5
 8003306:	201d      	movs	r0, #29
 8003308:	f001 fa80 	bl	800480c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800330c:	201d      	movs	r0, #29
 800330e:	f001 faa9 	bl	8004864 <HAL_NVIC_EnableIRQ>
}
 8003312:	e06e      	b.n	80033f2 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM4)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a3a      	ldr	r2, [pc, #232]	; (8003404 <HAL_TIM_Base_MspInit+0x168>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d116      	bne.n	800334c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	4b36      	ldr	r3, [pc, #216]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	4a35      	ldr	r2, [pc, #212]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 8003328:	f043 0304 	orr.w	r3, r3, #4
 800332c:	6413      	str	r3, [r2, #64]	; 0x40
 800332e:	4b33      	ldr	r3, [pc, #204]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800333a:	2200      	movs	r2, #0
 800333c:	2105      	movs	r1, #5
 800333e:	201e      	movs	r0, #30
 8003340:	f001 fa64 	bl	800480c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003344:	201e      	movs	r0, #30
 8003346:	f001 fa8d 	bl	8004864 <HAL_NVIC_EnableIRQ>
}
 800334a:	e052      	b.n	80033f2 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM5)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a2d      	ldr	r2, [pc, #180]	; (8003408 <HAL_TIM_Base_MspInit+0x16c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d116      	bne.n	8003384 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	4b28      	ldr	r3, [pc, #160]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	4a27      	ldr	r2, [pc, #156]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 8003360:	f043 0308 	orr.w	r3, r3, #8
 8003364:	6413      	str	r3, [r2, #64]	; 0x40
 8003366:	4b25      	ldr	r3, [pc, #148]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8003372:	2200      	movs	r2, #0
 8003374:	2105      	movs	r1, #5
 8003376:	2032      	movs	r0, #50	; 0x32
 8003378:	f001 fa48 	bl	800480c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800337c:	2032      	movs	r0, #50	; 0x32
 800337e:	f001 fa71 	bl	8004864 <HAL_NVIC_EnableIRQ>
}
 8003382:	e036      	b.n	80033f2 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM9)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a20      	ldr	r2, [pc, #128]	; (800340c <HAL_TIM_Base_MspInit+0x170>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d116      	bne.n	80033bc <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	4a19      	ldr	r2, [pc, #100]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6453      	str	r3, [r2, #68]	; 0x44
 800339e:	4b17      	ldr	r3, [pc, #92]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80033aa:	2200      	movs	r2, #0
 80033ac:	2105      	movs	r1, #5
 80033ae:	2018      	movs	r0, #24
 80033b0:	f001 fa2c 	bl	800480c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80033b4:	2018      	movs	r0, #24
 80033b6:	f001 fa55 	bl	8004864 <HAL_NVIC_EnableIRQ>
}
 80033ba:	e01a      	b.n	80033f2 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM11)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a13      	ldr	r2, [pc, #76]	; (8003410 <HAL_TIM_Base_MspInit+0x174>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d115      	bne.n	80033f2 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	4a0b      	ldr	r2, [pc, #44]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 80033d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d4:	6453      	str	r3, [r2, #68]	; 0x44
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_TIM_Base_MspInit+0x160>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80033e2:	2200      	movs	r2, #0
 80033e4:	2105      	movs	r1, #5
 80033e6:	201a      	movs	r0, #26
 80033e8:	f001 fa10 	bl	800480c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80033ec:	201a      	movs	r0, #26
 80033ee:	f001 fa39 	bl	8004864 <HAL_NVIC_EnableIRQ>
}
 80033f2:	bf00      	nop
 80033f4:	3720      	adds	r7, #32
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800
 8003400:	40000400 	.word	0x40000400
 8003404:	40000800 	.word	0x40000800
 8003408:	40000c00 	.word	0x40000c00
 800340c:	40014000 	.word	0x40014000
 8003410:	40014800 	.word	0x40014800

08003414 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 800341a:	4a12      	ldr	r2, [pc, #72]	; (8003464 <MX_USART1_UART_Init+0x50>)
 800341c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800341e:	4b10      	ldr	r3, [pc, #64]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 8003420:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003424:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003426:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800342c:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 800342e:	2200      	movs	r2, #0
 8003430:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003432:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003438:	4b09      	ldr	r3, [pc, #36]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 800343a:	220c      	movs	r2, #12
 800343c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800343e:	4b08      	ldr	r3, [pc, #32]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 8003440:	2200      	movs	r2, #0
 8003442:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003444:	4b06      	ldr	r3, [pc, #24]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 8003446:	2200      	movs	r2, #0
 8003448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800344a:	4805      	ldr	r0, [pc, #20]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 800344c:	f007 fd90 	bl	800af70 <HAL_UART_Init>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003456:	f7ff f9ed 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000a28 	.word	0x20000a28
 8003464:	40011000 	.word	0x40011000

08003468 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003470:	f107 0314 	add.w	r3, r7, #20
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	60da      	str	r2, [r3, #12]
 800347e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1d      	ldr	r2, [pc, #116]	; (80034fc <HAL_UART_MspInit+0x94>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d133      	bne.n	80034f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <HAL_UART_MspInit+0x98>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	4a1b      	ldr	r2, [pc, #108]	; (8003500 <HAL_UART_MspInit+0x98>)
 8003494:	f043 0310 	orr.w	r3, r3, #16
 8003498:	6453      	str	r3, [r2, #68]	; 0x44
 800349a:	4b19      	ldr	r3, [pc, #100]	; (8003500 <HAL_UART_MspInit+0x98>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f003 0310 	and.w	r3, r3, #16
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	4b15      	ldr	r3, [pc, #84]	; (8003500 <HAL_UART_MspInit+0x98>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a14      	ldr	r2, [pc, #80]	; (8003500 <HAL_UART_MspInit+0x98>)
 80034b0:	f043 0302 	orr.w	r3, r3, #2
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <HAL_UART_MspInit+0x98>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB3     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80034c2:	2348      	movs	r3, #72	; 0x48
 80034c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c6:	2302      	movs	r3, #2
 80034c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ce:	2303      	movs	r3, #3
 80034d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034d2:	2307      	movs	r3, #7
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4619      	mov	r1, r3
 80034dc:	4809      	ldr	r0, [pc, #36]	; (8003504 <HAL_UART_MspInit+0x9c>)
 80034de:	f002 f97b 	bl	80057d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80034e2:	2200      	movs	r2, #0
 80034e4:	2105      	movs	r1, #5
 80034e6:	2025      	movs	r0, #37	; 0x25
 80034e8:	f001 f990 	bl	800480c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034ec:	2025      	movs	r0, #37	; 0x25
 80034ee:	f001 f9b9 	bl	8004864 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80034f2:	bf00      	nop
 80034f4:	3728      	adds	r7, #40	; 0x28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40011000 	.word	0x40011000
 8003500:	40023800 	.word	0x40023800
 8003504:	40020400 	.word	0x40020400

08003508 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1d      	ldr	r2, [pc, #116]	; (800358c <HAL_UART_RxCpltCallback+0x84>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d133      	bne.n	8003582 <HAL_UART_RxCpltCallback+0x7a>
	{

		if(Btc_RxData == '\n')
 800351a:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <HAL_UART_RxCpltCallback+0x88>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b0a      	cmp	r3, #10
 8003520:	d117      	bne.n	8003552 <HAL_UART_RxCpltCallback+0x4a>
		{

			if(Btc_RxCount <= 3)
 8003522:	4b1c      	ldr	r3, [pc, #112]	; (8003594 <HAL_UART_RxCpltCallback+0x8c>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b03      	cmp	r3, #3
 8003528:	d80f      	bhi.n	800354a <HAL_UART_RxCpltCallback+0x42>
			{

				Btc_DataBuffer[Btc_RxCount] = '\0';
 800352a:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <HAL_UART_RxCpltCallback+0x8c>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_UART_RxCpltCallback+0x90>)
 8003532:	2100      	movs	r1, #0
 8003534:	5499      	strb	r1, [r3, r2]
				Btc_RxData = atoi((char*)Btc_DataBuffer);
 8003536:	4818      	ldr	r0, [pc, #96]	; (8003598 <HAL_UART_RxCpltCallback+0x90>)
 8003538:	f00c fa42 	bl	800f9c0 <atoi>
 800353c:	4603      	mov	r3, r0
 800353e:	b2da      	uxtb	r2, r3
 8003540:	4b13      	ldr	r3, [pc, #76]	; (8003590 <HAL_UART_RxCpltCallback+0x88>)
 8003542:	701a      	strb	r2, [r3, #0]
				Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&Btc_RxData);
 8003544:	4812      	ldr	r0, [pc, #72]	; (8003590 <HAL_UART_RxCpltCallback+0x88>)
 8003546:	f00b ff15 	bl	800f374 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>

				/* do nothing */

			}

			Btc_RxCount = 0;
 800354a:	4b12      	ldr	r3, [pc, #72]	; (8003594 <HAL_UART_RxCpltCallback+0x8c>)
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
 8003550:	e012      	b.n	8003578 <HAL_UART_RxCpltCallback+0x70>

		}
		else if(Btc_RxCount < 3)
 8003552:	4b10      	ldr	r3, [pc, #64]	; (8003594 <HAL_UART_RxCpltCallback+0x8c>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d80b      	bhi.n	8003572 <HAL_UART_RxCpltCallback+0x6a>
		{

			Btc_DataBuffer[Btc_RxCount++] = Btc_RxData;
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <HAL_UART_RxCpltCallback+0x8c>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	b2d1      	uxtb	r1, r2
 8003562:	4a0c      	ldr	r2, [pc, #48]	; (8003594 <HAL_UART_RxCpltCallback+0x8c>)
 8003564:	7011      	strb	r1, [r2, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <HAL_UART_RxCpltCallback+0x88>)
 800356a:	7819      	ldrb	r1, [r3, #0]
 800356c:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <HAL_UART_RxCpltCallback+0x90>)
 800356e:	5499      	strb	r1, [r3, r2]
 8003570:	e002      	b.n	8003578 <HAL_UART_RxCpltCallback+0x70>

		}
		else
		{

			Btc_RxCount = 0;
 8003572:	4b08      	ldr	r3, [pc, #32]	; (8003594 <HAL_UART_RxCpltCallback+0x8c>)
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]

		}

		Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(&huart1, &Btc_RxData, 1);
 8003578:	2201      	movs	r2, #1
 800357a:	4905      	ldr	r1, [pc, #20]	; (8003590 <HAL_UART_RxCpltCallback+0x88>)
 800357c:	4807      	ldr	r0, [pc, #28]	; (800359c <HAL_UART_RxCpltCallback+0x94>)
 800357e:	f00c f911 	bl	800f7a4 <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>

		/* do nothing */

	}

}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40011000 	.word	0x40011000
 8003590:	20000098 	.word	0x20000098
 8003594:	20000099 	.word	0x20000099
 8003598:	20000094 	.word	0x20000094
 800359c:	20000a28 	.word	0x20000a28

080035a0 <MX_WWDG_Init>:

WWDG_HandleTypeDef hwwdg;

/* WWDG init function */
void MX_WWDG_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <MX_WWDG_Init+0x38>)
 80035a6:	4a0d      	ldr	r2, [pc, #52]	; (80035dc <MX_WWDG_Init+0x3c>)
 80035a8:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 80035aa:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <MX_WWDG_Init+0x38>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 126;
 80035b0:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <MX_WWDG_Init+0x38>)
 80035b2:	227e      	movs	r2, #126	; 0x7e
 80035b4:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 127;
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <MX_WWDG_Init+0x38>)
 80035b8:	227f      	movs	r2, #127	; 0x7f
 80035ba:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_ENABLE;
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <MX_WWDG_Init+0x38>)
 80035be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c2:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 80035c4:	4804      	ldr	r0, [pc, #16]	; (80035d8 <MX_WWDG_Init+0x38>)
 80035c6:	f008 fd79 	bl	800c0bc <HAL_WWDG_Init>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 80035d0:	f7ff f930 	bl	8002834 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 80035d4:	bf00      	nop
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000a9c 	.word	0x20000a9c
 80035dc:	40002c00 	.word	0x40002c00

080035e0 <HAL_WWDG_MspInit>:

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* wwdgHandle)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

  if(wwdgHandle->Instance==WWDG)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a0b      	ldr	r2, [pc, #44]	; (800361c <HAL_WWDG_MspInit+0x3c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d10d      	bne.n	800360e <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* WWDG clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <HAL_WWDG_MspInit+0x40>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	4a09      	ldr	r2, [pc, #36]	; (8003620 <HAL_WWDG_MspInit+0x40>)
 80035fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003600:	6413      	str	r3, [r2, #64]	; 0x40
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <HAL_WWDG_MspInit+0x40>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }
}
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40002c00 	.word	0x40002c00
 8003620:	40023800 	.word	0x40023800

08003624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800365c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003628:	480d      	ldr	r0, [pc, #52]	; (8003660 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800362a:	490e      	ldr	r1, [pc, #56]	; (8003664 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800362c:	4a0e      	ldr	r2, [pc, #56]	; (8003668 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800362e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003630:	e002      	b.n	8003638 <LoopCopyDataInit>

08003632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003636:	3304      	adds	r3, #4

08003638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800363a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800363c:	d3f9      	bcc.n	8003632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800363e:	4a0b      	ldr	r2, [pc, #44]	; (800366c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003640:	4c0b      	ldr	r4, [pc, #44]	; (8003670 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003644:	e001      	b.n	800364a <LoopFillZerobss>

08003646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003648:	3204      	adds	r2, #4

0800364a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800364a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800364c:	d3fb      	bcc.n	8003646 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800364e:	f7ff fc7b 	bl	8002f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003652:	f00c f9bf 	bl	800f9d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003656:	f7fe fffd 	bl	8002654 <main>
  bx  lr    
 800365a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800365c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003664:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003668:	080119f0 	.word	0x080119f0
  ldr r2, =_sbss
 800366c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003670:	2000570c 	.word	0x2000570c

08003674 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003674:	e7fe      	b.n	8003674 <DMA1_Stream0_IRQHandler>

08003676 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d104      	bne.n	800368e <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003684:	b672      	cpsid	i
}
 8003686:	bf00      	nop
 8003688:	f7ff f8d4 	bl	8002834 <Error_Handler>
 800368c:	e7fe      	b.n	800368c <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	7a1b      	ldrb	r3, [r3, #8]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d904      	bls.n	80036a0 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003696:	b672      	cpsid	i
}
 8003698:	bf00      	nop
 800369a:	f7ff f8cb 	bl	8002834 <Error_Handler>
 800369e:	e7fe      	b.n	800369e <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	7a1b      	ldrb	r3, [r3, #8]
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	b2d1      	uxtb	r1, r2
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	7211      	strb	r1, [r2, #8]
 80036ac:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036ae:	f3ef 8211 	mrs	r2, BASEPRI
 80036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	60fa      	str	r2, [r7, #12]
 80036c4:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d104      	bne.n	80036ee <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80036e4:	b672      	cpsid	i
}
 80036e6:	bf00      	nop
 80036e8:	f7ff f8a4 	bl	8002834 <Error_Handler>
 80036ec:	e7fe      	b.n	80036ec <stm32_lock_release+0x16>
  lock->nesting_level--;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	7a1b      	ldrb	r3, [r3, #8]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	7a1b      	ldrb	r3, [r3, #8]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d904      	bls.n	800370c <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8003702:	b672      	cpsid	i
}
 8003704:	bf00      	nop
 8003706:	f7ff f895 	bl	8002834 <Error_Handler>
 800370a:	e7fe      	b.n	800370a <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	7a1b      	ldrb	r3, [r3, #8]
 8003710:	461a      	mov	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003718:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003720:	bf00      	nop
}
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d104      	bne.n	8003742 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003738:	b672      	cpsid	i
}
 800373a:	bf00      	nop
 800373c:	f7ff f87a 	bl	8002834 <Error_Handler>
 8003740:	e7fe      	b.n	8003740 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ff96 	bl	8003676 <stm32_lock_acquire>
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d104      	bne.n	800376a <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003760:	b672      	cpsid	i
}
 8003762:	bf00      	nop
 8003764:	f7ff f866 	bl	8002834 <Error_Handler>
 8003768:	e7fe      	b.n	8003768 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ffb2 	bl	80036d6 <stm32_lock_release>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003780:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <HAL_Init+0x40>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a0d      	ldr	r2, [pc, #52]	; (80037bc <HAL_Init+0x40>)
 8003786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800378a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_Init+0x40>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <HAL_Init+0x40>)
 8003792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_Init+0x40>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a07      	ldr	r2, [pc, #28]	; (80037bc <HAL_Init+0x40>)
 800379e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037a4:	2003      	movs	r0, #3
 80037a6:	f001 f811 	bl	80047cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037aa:	2000      	movs	r0, #0
 80037ac:	f7ff fa74 	bl	8002c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037b0:	f7ff fa26 	bl	8002c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40023c00 	.word	0x40023c00

080037c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_IncTick+0x20>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_IncTick+0x24>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4413      	add	r3, r2
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <HAL_IncTick+0x24>)
 80037d2:	6013      	str	r3, [r2, #0]
}
 80037d4:	bf00      	nop
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	2000000c 	.word	0x2000000c
 80037e4:	20000ac4 	.word	0x20000ac4

080037e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return uwTick;
 80037ec:	4b03      	ldr	r3, [pc, #12]	; (80037fc <HAL_GetTick+0x14>)
 80037ee:	681b      	ldr	r3, [r3, #0]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20000ac4 	.word	0x20000ac4

08003800 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e16f      	b.n	8003af6 <HAL_ADC_Init+0x2f6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a93      	ldr	r2, [pc, #588]	; (8003a68 <HAL_ADC_Init+0x268>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d004      	beq.n	800382a <HAL_ADC_Init+0x2a>
 8003820:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003824:	4891      	ldr	r0, [pc, #580]	; (8003a6c <HAL_ADC_Init+0x26c>)
 8003826:	f7ff f80a 	bl	800283e <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d013      	beq.n	800385a <HAL_ADC_Init+0x5a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383a:	d00e      	beq.n	800385a <HAL_ADC_Init+0x5a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003844:	d009      	beq.n	800385a <HAL_ADC_Init+0x5a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800384e:	d004      	beq.n	800385a <HAL_ADC_Init+0x5a>
 8003850:	f240 1143 	movw	r1, #323	; 0x143
 8003854:	4885      	ldr	r0, [pc, #532]	; (8003a6c <HAL_ADC_Init+0x26c>)
 8003856:	f7fe fff2 	bl	800283e <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d013      	beq.n	800388a <HAL_ADC_Init+0x8a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800386a:	d00e      	beq.n	800388a <HAL_ADC_Init+0x8a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003874:	d009      	beq.n	800388a <HAL_ADC_Init+0x8a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800387e:	d004      	beq.n	800388a <HAL_ADC_Init+0x8a>
 8003880:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003884:	4879      	ldr	r0, [pc, #484]	; (8003a6c <HAL_ADC_Init+0x26c>)
 8003886:	f7fe ffda 	bl	800283e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_ADC_Init+0xa4>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d004      	beq.n	80038a4 <HAL_ADC_Init+0xa4>
 800389a:	f240 1145 	movw	r1, #325	; 0x145
 800389e:	4873      	ldr	r0, [pc, #460]	; (8003a6c <HAL_ADC_Init+0x26c>)
 80038a0:	f7fe ffcd 	bl	800283e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	7e1b      	ldrb	r3, [r3, #24]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_ADC_Init+0xbe>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	7e1b      	ldrb	r3, [r3, #24]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d004      	beq.n	80038be <HAL_ADC_Init+0xbe>
 80038b4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80038b8:	486c      	ldr	r0, [pc, #432]	; (8003a6c <HAL_ADC_Init+0x26c>)
 80038ba:	f7fe ffc0 	bl	800283e <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d054      	beq.n	8003970 <HAL_ADC_Init+0x170>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ce:	d04f      	beq.n	8003970 <HAL_ADC_Init+0x170>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038d8:	d04a      	beq.n	8003970 <HAL_ADC_Init+0x170>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038e2:	d045      	beq.n	8003970 <HAL_ADC_Init+0x170>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038ec:	d040      	beq.n	8003970 <HAL_ADC_Init+0x170>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80038f6:	d03b      	beq.n	8003970 <HAL_ADC_Init+0x170>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003900:	d036      	beq.n	8003970 <HAL_ADC_Init+0x170>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800390a:	d031      	beq.n	8003970 <HAL_ADC_Init+0x170>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003914:	d02c      	beq.n	8003970 <HAL_ADC_Init+0x170>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800391e:	d027      	beq.n	8003970 <HAL_ADC_Init+0x170>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003928:	d022      	beq.n	8003970 <HAL_ADC_Init+0x170>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8003932:	d01d      	beq.n	8003970 <HAL_ADC_Init+0x170>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800393c:	d018      	beq.n	8003970 <HAL_ADC_Init+0x170>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003942:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8003946:	d013      	beq.n	8003970 <HAL_ADC_Init+0x170>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003950:	d00e      	beq.n	8003970 <HAL_ADC_Init+0x170>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003956:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800395a:	d009      	beq.n	8003970 <HAL_ADC_Init+0x170>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	4a43      	ldr	r2, [pc, #268]	; (8003a70 <HAL_ADC_Init+0x270>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <HAL_ADC_Init+0x170>
 8003966:	f240 1147 	movw	r1, #327	; 0x147
 800396a:	4840      	ldr	r0, [pc, #256]	; (8003a6c <HAL_ADC_Init+0x26c>)
 800396c:	f7fe ff67 	bl	800283e <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d009      	beq.n	800398c <HAL_ADC_Init+0x18c>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003980:	d004      	beq.n	800398c <HAL_ADC_Init+0x18c>
 8003982:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003986:	4839      	ldr	r0, [pc, #228]	; (8003a6c <HAL_ADC_Init+0x26c>)
 8003988:	f7fe ff59 	bl	800283e <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <HAL_ADC_Init+0x19c>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	2b10      	cmp	r3, #16
 800399a:	d904      	bls.n	80039a6 <HAL_ADC_Init+0x1a6>
 800399c:	f240 1149 	movw	r1, #329	; 0x149
 80039a0:	4832      	ldr	r0, [pc, #200]	; (8003a6c <HAL_ADC_Init+0x26c>)
 80039a2:	f7fe ff4c 	bl	800283e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d009      	beq.n	80039c4 <HAL_ADC_Init+0x1c4>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d004      	beq.n	80039c4 <HAL_ADC_Init+0x1c4>
 80039ba:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80039be:	482b      	ldr	r0, [pc, #172]	; (8003a6c <HAL_ADC_Init+0x26c>)
 80039c0:	f7fe ff3d 	bl	800283e <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d00c      	beq.n	80039e6 <HAL_ADC_Init+0x1e6>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_ADC_Init+0x1e6>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d004      	beq.n	80039e6 <HAL_ADC_Init+0x1e6>
 80039dc:	f240 114b 	movw	r1, #331	; 0x14b
 80039e0:	4822      	ldr	r0, [pc, #136]	; (8003a6c <HAL_ADC_Init+0x26c>)
 80039e2:	f7fe ff2c 	bl	800283e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d009      	beq.n	8003a04 <HAL_ADC_Init+0x204>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d004      	beq.n	8003a04 <HAL_ADC_Init+0x204>
 80039fa:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80039fe:	481b      	ldr	r0, [pc, #108]	; (8003a6c <HAL_ADC_Init+0x26c>)
 8003a00:	f7fe ff1d 	bl	800283e <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	4a19      	ldr	r2, [pc, #100]	; (8003a70 <HAL_ADC_Init+0x270>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d017      	beq.n	8003a3e <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d013      	beq.n	8003a3e <HAL_ADC_Init+0x23e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a1e:	d00e      	beq.n	8003a3e <HAL_ADC_Init+0x23e>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a28:	d009      	beq.n	8003a3e <HAL_ADC_Init+0x23e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a32:	d004      	beq.n	8003a3e <HAL_ADC_Init+0x23e>
 8003a34:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003a38:	480c      	ldr	r0, [pc, #48]	; (8003a6c <HAL_ADC_Init+0x26c>)
 8003a3a:	f7fe ff00 	bl	800283e <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d131      	bne.n	8003aaa <HAL_ADC_Init+0x2aa>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <HAL_ADC_Init+0x274>)
 8003a4a:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a0a      	ldr	r2, [pc, #40]	; (8003a78 <HAL_ADC_Init+0x278>)
 8003a50:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a09      	ldr	r2, [pc, #36]	; (8003a7c <HAL_ADC_Init+0x27c>)
 8003a56:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a09      	ldr	r2, [pc, #36]	; (8003a80 <HAL_ADC_Init+0x280>)
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a08      	ldr	r2, [pc, #32]	; (8003a84 <HAL_ADC_Init+0x284>)
 8003a62:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	e00f      	b.n	8003a88 <HAL_ADC_Init+0x288>
 8003a68:	40012000 	.word	0x40012000
 8003a6c:	080108bc 	.word	0x080108bc
 8003a70:	0f000001 	.word	0x0f000001
 8003a74:	08003fb9 	.word	0x08003fb9
 8003a78:	08003fcd 	.word	0x08003fcd
 8003a7c:	08003fe1 	.word	0x08003fe1
 8003a80:	08003ff5 	.word	0x08003ff5
 8003a84:	08004615 	.word	0x08004615
 8003a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d102      	bne.n	8003a94 <HAL_ADC_Init+0x294>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a1b      	ldr	r2, [pc, #108]	; (8003b00 <HAL_ADC_Init+0x300>)
 8003a92:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f003 0310 	and.w	r3, r3, #16
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d118      	bne.n	8003ae8 <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003abe:	f023 0302 	bic.w	r3, r3, #2
 8003ac2:	f043 0202 	orr.w	r2, r3, #2
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fc12 	bl	80042f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f023 0303 	bic.w	r3, r3, #3
 8003ade:	f043 0201 	orr.w	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ae6:	e001      	b.n	8003aec <HAL_ADC_Init+0x2ec>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	0800165d 	.word	0x0800165d

08003b04 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	7e1b      	ldrb	r3, [r3, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_ADC_IRQHandler+0x3a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	7e1b      	ldrb	r3, [r3, #24]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d004      	beq.n	8003b3e <HAL_ADC_IRQHandler+0x3a>
 8003b34:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8003b38:	4892      	ldr	r0, [pc, #584]	; (8003d84 <HAL_ADC_IRQHandler+0x280>)
 8003b3a:	f7fe fe80 	bl	800283e <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_ADC_IRQHandler+0x4a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	2b10      	cmp	r3, #16
 8003b4c:	d904      	bls.n	8003b58 <HAL_ADC_IRQHandler+0x54>
 8003b4e:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 8003b52:	488c      	ldr	r0, [pc, #560]	; (8003d84 <HAL_ADC_IRQHandler+0x280>)
 8003b54:	f7fe fe73 	bl	800283e <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d00c      	beq.n	8003b7a <HAL_ADC_IRQHandler+0x76>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_ADC_IRQHandler+0x76>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d004      	beq.n	8003b7a <HAL_ADC_IRQHandler+0x76>
 8003b70:	f240 41b9 	movw	r1, #1209	; 0x4b9
 8003b74:	4883      	ldr	r0, [pc, #524]	; (8003d84 <HAL_ADC_IRQHandler+0x280>)
 8003b76:	f7fe fe62 	bl	800283e <assert_failed>
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d04a      	beq.n	8003c26 <HAL_ADC_IRQHandler+0x122>
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d047      	beq.n	8003c26 <HAL_ADC_IRQHandler+0x122>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d105      	bne.n	8003bae <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d12b      	bne.n	8003c14 <HAL_ADC_IRQHandler+0x110>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d127      	bne.n	8003c14 <HAL_ADC_IRQHandler+0x110>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d006      	beq.n	8003be0 <HAL_ADC_IRQHandler+0xdc>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d119      	bne.n	8003c14 <HAL_ADC_IRQHandler+0x110>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0220 	bic.w	r2, r2, #32
 8003bee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d105      	bne.n	8003c14 <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	f043 0201 	orr.w	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	4798      	blx	r3
#else
    HAL_ADC_ConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0212 	mvn.w	r2, #18
 8003c24:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c34:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d058      	beq.n	8003cee <HAL_ADC_IRQHandler+0x1ea>
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d055      	beq.n	8003cee <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d105      	bne.n	8003c5a <HAL_ADC_IRQHandler+0x156>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d139      	bne.n	8003cdc <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d006      	beq.n	8003c84 <HAL_ADC_IRQHandler+0x180>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d12b      	bne.n	8003cdc <HAL_ADC_IRQHandler+0x1d8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d124      	bne.n	8003cdc <HAL_ADC_IRQHandler+0x1d8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d11d      	bne.n	8003cdc <HAL_ADC_IRQHandler+0x1d8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d119      	bne.n	8003cdc <HAL_ADC_IRQHandler+0x1d8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cb6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d105      	bne.n	8003cdc <HAL_ADC_IRQHandler+0x1d8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	f043 0201 	orr.w	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 020c 	mvn.w	r2, #12
 8003cec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d018      	beq.n	8003d36 <HAL_ADC_IRQHandler+0x232>
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d015      	beq.n	8003d36 <HAL_ADC_IRQHandler+0x232>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10e      	bne.n	8003d36 <HAL_ADC_IRQHandler+0x232>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0201 	mvn.w	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d44:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d016      	beq.n	8003d7a <HAL_ADC_IRQHandler+0x276>
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d013      	beq.n	8003d7a <HAL_ADC_IRQHandler+0x276>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	f043 0202 	orr.w	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f06f 0220 	mvn.w	r2, #32
 8003d66:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
#else
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0220 	mvn.w	r2, #32
 8003d78:	601a      	str	r2, [r3, #0]
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	080108bc 	.word	0x080108bc

08003d88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	7e1b      	ldrb	r3, [r3, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_ADC_Start_DMA+0x2a>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	7e1b      	ldrb	r3, [r3, #24]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d004      	beq.n	8003db2 <HAL_ADC_Start_DMA+0x2a>
 8003da8:	f240 515a 	movw	r1, #1370	; 0x55a
 8003dac:	487a      	ldr	r0, [pc, #488]	; (8003f98 <HAL_ADC_Start_DMA+0x210>)
 8003dae:	f7fe fd46 	bl	800283e <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d013      	beq.n	8003de2 <HAL_ADC_Start_DMA+0x5a>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dc2:	d00e      	beq.n	8003de2 <HAL_ADC_Start_DMA+0x5a>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dcc:	d009      	beq.n	8003de2 <HAL_ADC_Start_DMA+0x5a>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003dd6:	d004      	beq.n	8003de2 <HAL_ADC_Start_DMA+0x5a>
 8003dd8:	f240 515b 	movw	r1, #1371	; 0x55b
 8003ddc:	486e      	ldr	r0, [pc, #440]	; (8003f98 <HAL_ADC_Start_DMA+0x210>)
 8003dde:	f7fe fd2e 	bl	800283e <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_ADC_Start_DMA+0x68>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e0ce      	b.n	8003f8e <HAL_ADC_Start_DMA+0x206>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d018      	beq.n	8003e38 <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0201 	orr.w	r2, r2, #1
 8003e14:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e16:	4b61      	ldr	r3, [pc, #388]	; (8003f9c <HAL_ADC_Start_DMA+0x214>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a61      	ldr	r2, [pc, #388]	; (8003fa0 <HAL_ADC_Start_DMA+0x218>)
 8003e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e20:	0c9a      	lsrs	r2, r3, #18
 8003e22:	4613      	mov	r3, r2
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	4413      	add	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e2a:	e002      	b.n	8003e32 <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f9      	bne.n	8003e2c <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e46:	d107      	bne.n	8003e58 <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e56:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	f040 8086 	bne.w	8003f74 <HAL_ADC_Start_DMA+0x1ec>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e70:	f023 0301 	bic.w	r3, r3, #1
 8003e74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea6:	d106      	bne.n	8003eb6 <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eac:	f023 0206 	bic.w	r2, r3, #6
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	645a      	str	r2, [r3, #68]	; 0x44
 8003eb4:	e002      	b.n	8003ebc <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ec4:	4b37      	ldr	r3, [pc, #220]	; (8003fa4 <HAL_ADC_Start_DMA+0x21c>)
 8003ec6:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ecc:	4a36      	ldr	r2, [pc, #216]	; (8003fa8 <HAL_ADC_Start_DMA+0x220>)
 8003ece:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	4a35      	ldr	r2, [pc, #212]	; (8003fac <HAL_ADC_Start_DMA+0x224>)
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	4a34      	ldr	r2, [pc, #208]	; (8003fb0 <HAL_ADC_Start_DMA+0x228>)
 8003ede:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ee8:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ef8:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f08:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	334c      	adds	r3, #76	; 0x4c
 8003f14:	4619      	mov	r1, r3
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f000 ff17 	bl	8004d4c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 031f 	and.w	r3, r3, #31
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10f      	bne.n	8003f4a <HAL_ADC_Start_DMA+0x1c2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d129      	bne.n	8003f8c <HAL_ADC_Start_DMA+0x204>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	e020      	b.n	8003f8c <HAL_ADC_Start_DMA+0x204>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a19      	ldr	r2, [pc, #100]	; (8003fb4 <HAL_ADC_Start_DMA+0x22c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d11b      	bne.n	8003f8c <HAL_ADC_Start_DMA+0x204>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d114      	bne.n	8003f8c <HAL_ADC_Start_DMA+0x204>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	e00b      	b.n	8003f8c <HAL_ADC_Start_DMA+0x204>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	f043 0210 	orr.w	r2, r3, #16
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f84:	f043 0201 	orr.w	r2, r3, #1
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	080108bc 	.word	0x080108bc
 8003f9c:	20000004 	.word	0x20000004
 8003fa0:	431bde83 	.word	0x431bde83
 8003fa4:	40012300 	.word	0x40012300
 8003fa8:	08004509 	.word	0x08004509
 8003fac:	080045c7 	.word	0x080045c7
 8003fb0:	080045e5 	.word	0x080045e5
 8003fb4:	40012000 	.word	0x40012000

08003fb8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b12      	cmp	r3, #18
 800401c:	d909      	bls.n	8004032 <HAL_ADC_ConfigChannel+0x2a>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a72      	ldr	r2, [pc, #456]	; (80041ec <HAL_ADC_ConfigChannel+0x1e4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d004      	beq.n	8004032 <HAL_ADC_ConfigChannel+0x2a>
 8004028:	f240 618b 	movw	r1, #1675	; 0x68b
 800402c:	4870      	ldr	r0, [pc, #448]	; (80041f0 <HAL_ADC_ConfigChannel+0x1e8>)
 800402e:	f7fe fc06 	bl	800283e <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_ADC_ConfigChannel+0x3a>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b10      	cmp	r3, #16
 8004040:	d904      	bls.n	800404c <HAL_ADC_ConfigChannel+0x44>
 8004042:	f240 618c 	movw	r1, #1676	; 0x68c
 8004046:	486a      	ldr	r0, [pc, #424]	; (80041f0 <HAL_ADC_ConfigChannel+0x1e8>)
 8004048:	f7fe fbf9 	bl	800283e <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d020      	beq.n	8004096 <HAL_ADC_ConfigChannel+0x8e>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d01c      	beq.n	8004096 <HAL_ADC_ConfigChannel+0x8e>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d018      	beq.n	8004096 <HAL_ADC_ConfigChannel+0x8e>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b03      	cmp	r3, #3
 800406a:	d014      	beq.n	8004096 <HAL_ADC_ConfigChannel+0x8e>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2b04      	cmp	r3, #4
 8004072:	d010      	beq.n	8004096 <HAL_ADC_ConfigChannel+0x8e>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	2b05      	cmp	r3, #5
 800407a:	d00c      	beq.n	8004096 <HAL_ADC_ConfigChannel+0x8e>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2b06      	cmp	r3, #6
 8004082:	d008      	beq.n	8004096 <HAL_ADC_ConfigChannel+0x8e>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b07      	cmp	r3, #7
 800408a:	d004      	beq.n	8004096 <HAL_ADC_ConfigChannel+0x8e>
 800408c:	f240 618d 	movw	r1, #1677	; 0x68d
 8004090:	4857      	ldr	r0, [pc, #348]	; (80041f0 <HAL_ADC_ConfigChannel+0x1e8>)
 8004092:	f7fe fbd4 	bl	800283e <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x9c>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e118      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x2ce>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b09      	cmp	r3, #9
 80040b2:	d925      	bls.n	8004100 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68d9      	ldr	r1, [r3, #12]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	4613      	mov	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4413      	add	r3, r2
 80040c8:	3b1e      	subs	r3, #30
 80040ca:	2207      	movs	r2, #7
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	43da      	mvns	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	400a      	ands	r2, r1
 80040d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68d9      	ldr	r1, [r3, #12]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	4618      	mov	r0, r3
 80040ec:	4603      	mov	r3, r0
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	4403      	add	r3, r0
 80040f2:	3b1e      	subs	r3, #30
 80040f4:	409a      	lsls	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	e022      	b.n	8004146 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6919      	ldr	r1, [r3, #16]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	4613      	mov	r3, r2
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	4413      	add	r3, r2
 8004114:	2207      	movs	r2, #7
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43da      	mvns	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	400a      	ands	r2, r1
 8004122:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6919      	ldr	r1, [r3, #16]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	4618      	mov	r0, r3
 8004136:	4603      	mov	r3, r0
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4403      	add	r3, r0
 800413c:	409a      	lsls	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b06      	cmp	r3, #6
 800414c:	d824      	bhi.n	8004198 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	3b05      	subs	r3, #5
 8004160:	221f      	movs	r2, #31
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	43da      	mvns	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	400a      	ands	r2, r1
 800416e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	b29b      	uxth	r3, r3
 800417c:	4618      	mov	r0, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	3b05      	subs	r3, #5
 800418a:	fa00 f203 	lsl.w	r2, r0, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	635a      	str	r2, [r3, #52]	; 0x34
 8004196:	e051      	b.n	800423c <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b0c      	cmp	r3, #12
 800419e:	d829      	bhi.n	80041f4 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	3b23      	subs	r3, #35	; 0x23
 80041b2:	221f      	movs	r2, #31
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	43da      	mvns	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	400a      	ands	r2, r1
 80041c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	4618      	mov	r0, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	3b23      	subs	r3, #35	; 0x23
 80041dc:	fa00 f203 	lsl.w	r2, r0, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
 80041e8:	e028      	b.n	800423c <HAL_ADC_ConfigChannel+0x234>
 80041ea:	bf00      	nop
 80041ec:	10000012 	.word	0x10000012
 80041f0:	080108bc 	.word	0x080108bc
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	3b41      	subs	r3, #65	; 0x41
 8004206:	221f      	movs	r2, #31
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	43da      	mvns	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	400a      	ands	r2, r1
 8004214:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	b29b      	uxth	r3, r3
 8004222:	4618      	mov	r0, r3
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	3b41      	subs	r3, #65	; 0x41
 8004230:	fa00 f203 	lsl.w	r2, r0, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800423c:	4b28      	ldr	r3, [pc, #160]	; (80042e0 <HAL_ADC_ConfigChannel+0x2d8>)
 800423e:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a27      	ldr	r2, [pc, #156]	; (80042e4 <HAL_ADC_ConfigChannel+0x2dc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d10f      	bne.n	800426a <HAL_ADC_ConfigChannel+0x262>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b12      	cmp	r3, #18
 8004250:	d10b      	bne.n	800426a <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1d      	ldr	r2, [pc, #116]	; (80042e4 <HAL_ADC_ConfigChannel+0x2dc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d12b      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x2c4>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1b      	ldr	r2, [pc, #108]	; (80042e8 <HAL_ADC_ConfigChannel+0x2e0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d003      	beq.n	8004286 <HAL_ADC_ConfigChannel+0x27e>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b11      	cmp	r3, #17
 8004284:	d122      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a11      	ldr	r2, [pc, #68]	; (80042e8 <HAL_ADC_ConfigChannel+0x2e0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d111      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042a8:	4b10      	ldr	r3, [pc, #64]	; (80042ec <HAL_ADC_ConfigChannel+0x2e4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a10      	ldr	r2, [pc, #64]	; (80042f0 <HAL_ADC_ConfigChannel+0x2e8>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	0c9a      	lsrs	r2, r3, #18
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042be:	e002      	b.n	80042c6 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f9      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40012300 	.word	0x40012300
 80042e4:	40012000 	.word	0x40012000
 80042e8:	10000012 	.word	0x10000012
 80042ec:	20000004 	.word	0x20000004
 80042f0:	431bde83 	.word	0x431bde83

080042f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042fc:	4b7f      	ldr	r3, [pc, #508]	; (80044fc <ADC_Init+0x208>)
 80042fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	431a      	orrs	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004328:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6859      	ldr	r1, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	021a      	lsls	r2, r3, #8
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800434c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6859      	ldr	r1, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800436e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6899      	ldr	r1, [r3, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	4a5e      	ldr	r2, [pc, #376]	; (8004500 <ADC_Init+0x20c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d022      	beq.n	80043d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800439a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6899      	ldr	r1, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6899      	ldr	r1, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	609a      	str	r2, [r3, #8]
 80043d0:	e00f      	b.n	80043f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0202 	bic.w	r2, r2, #2
 8004400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6899      	ldr	r1, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	7e1b      	ldrb	r3, [r3, #24]
 800440c:	005a      	lsls	r2, r3, #1
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d028      	beq.n	8004472 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <ADC_Init+0x13c>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	2b08      	cmp	r3, #8
 800442e:	d904      	bls.n	800443a <ADC_Init+0x146>
 8004430:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8004434:	4833      	ldr	r0, [pc, #204]	; (8004504 <ADC_Init+0x210>)
 8004436:	f7fe fa02 	bl	800283e <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004448:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004458:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	3b01      	subs	r3, #1
 8004466:	035a      	lsls	r2, r3, #13
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	605a      	str	r2, [r3, #4]
 8004470:	e007      	b.n	8004482 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004480:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004490:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	3b01      	subs	r3, #1
 800449e:	051a      	lsls	r2, r3, #20
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6899      	ldr	r1, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044c4:	025a      	lsls	r2, r3, #9
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6899      	ldr	r1, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	029a      	lsls	r2, r3, #10
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	609a      	str	r2, [r3, #8]
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40012300 	.word	0x40012300
 8004500:	0f000001 	.word	0x0f000001
 8004504:	080108bc 	.word	0x080108bc

08004508 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800451e:	2b00      	cmp	r3, #0
 8004520:	d13d      	bne.n	800459e <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d12b      	bne.n	8004594 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004540:	2b00      	cmp	r3, #0
 8004542:	d127      	bne.n	8004594 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800454e:	2b00      	cmp	r3, #0
 8004550:	d006      	beq.n	8004560 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800455c:	2b00      	cmp	r3, #0
 800455e:	d119      	bne.n	8004594 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0220 	bic.w	r2, r2, #32
 800456e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d105      	bne.n	8004594 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	f043 0201 	orr.w	r2, r3, #1
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800459c:	e00f      	b.n	80045be <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d004      	beq.n	80045b4 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	4798      	blx	r3
}
 80045b2:	e004      	b.n	80045be <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	4798      	blx	r3
}
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045dc:	bf00      	nop
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2240      	movs	r2, #64	; 0x40
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fc:	f043 0204 	orr.w	r2, r3, #4
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800460c:	bf00      	nop
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <__NVIC_SetPriorityGrouping+0x44>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004644:	4013      	ands	r3, r2
 8004646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800465a:	4a04      	ldr	r2, [pc, #16]	; (800466c <__NVIC_SetPriorityGrouping+0x44>)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	60d3      	str	r3, [r2, #12]
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	e000ed00 	.word	0xe000ed00

08004670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004674:	4b04      	ldr	r3, [pc, #16]	; (8004688 <__NVIC_GetPriorityGrouping+0x18>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	0a1b      	lsrs	r3, r3, #8
 800467a:	f003 0307 	and.w	r3, r3, #7
}
 800467e:	4618      	mov	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469a:	2b00      	cmp	r3, #0
 800469c:	db0b      	blt.n	80046b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	f003 021f 	and.w	r2, r3, #31
 80046a4:	4907      	ldr	r1, [pc, #28]	; (80046c4 <__NVIC_EnableIRQ+0x38>)
 80046a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	2001      	movs	r0, #1
 80046ae:	fa00 f202 	lsl.w	r2, r0, r2
 80046b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	e000e100 	.word	0xe000e100

080046c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	4603      	mov	r3, r0
 80046d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	db12      	blt.n	8004700 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	f003 021f 	and.w	r2, r3, #31
 80046e0:	490a      	ldr	r1, [pc, #40]	; (800470c <__NVIC_DisableIRQ+0x44>)
 80046e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	2001      	movs	r0, #1
 80046ea:	fa00 f202 	lsl.w	r2, r0, r2
 80046ee:	3320      	adds	r3, #32
 80046f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80046f4:	f3bf 8f4f 	dsb	sy
}
 80046f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80046fa:	f3bf 8f6f 	isb	sy
}
 80046fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	e000e100 	.word	0xe000e100

08004710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	6039      	str	r1, [r7, #0]
 800471a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800471c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004720:	2b00      	cmp	r3, #0
 8004722:	db0a      	blt.n	800473a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	b2da      	uxtb	r2, r3
 8004728:	490c      	ldr	r1, [pc, #48]	; (800475c <__NVIC_SetPriority+0x4c>)
 800472a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472e:	0112      	lsls	r2, r2, #4
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	440b      	add	r3, r1
 8004734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004738:	e00a      	b.n	8004750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	b2da      	uxtb	r2, r3
 800473e:	4908      	ldr	r1, [pc, #32]	; (8004760 <__NVIC_SetPriority+0x50>)
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	3b04      	subs	r3, #4
 8004748:	0112      	lsls	r2, r2, #4
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	440b      	add	r3, r1
 800474e:	761a      	strb	r2, [r3, #24]
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	e000e100 	.word	0xe000e100
 8004760:	e000ed00 	.word	0xe000ed00

08004764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004764:	b480      	push	{r7}
 8004766:	b089      	sub	sp, #36	; 0x24
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f1c3 0307 	rsb	r3, r3, #7
 800477e:	2b04      	cmp	r3, #4
 8004780:	bf28      	it	cs
 8004782:	2304      	movcs	r3, #4
 8004784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3304      	adds	r3, #4
 800478a:	2b06      	cmp	r3, #6
 800478c:	d902      	bls.n	8004794 <NVIC_EncodePriority+0x30>
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3b03      	subs	r3, #3
 8004792:	e000      	b.n	8004796 <NVIC_EncodePriority+0x32>
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004798:	f04f 32ff 	mov.w	r2, #4294967295
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	43da      	mvns	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	401a      	ands	r2, r3
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047ac:	f04f 31ff 	mov.w	r1, #4294967295
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	fa01 f303 	lsl.w	r3, r1, r3
 80047b6:	43d9      	mvns	r1, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047bc:	4313      	orrs	r3, r2
         );
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3724      	adds	r7, #36	; 0x24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b07      	cmp	r3, #7
 80047d8:	d00f      	beq.n	80047fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b06      	cmp	r3, #6
 80047de:	d00c      	beq.n	80047fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b05      	cmp	r3, #5
 80047e4:	d009      	beq.n	80047fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d006      	beq.n	80047fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d003      	beq.n	80047fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80047f2:	2190      	movs	r1, #144	; 0x90
 80047f4:	4804      	ldr	r0, [pc, #16]	; (8004808 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80047f6:	f7fe f822 	bl	800283e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff ff14 	bl	8004628 <__NVIC_SetPriorityGrouping>
}
 8004800:	bf00      	nop
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	08010930 	.word	0x08010930

0800480c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b0f      	cmp	r3, #15
 8004822:	d903      	bls.n	800482c <HAL_NVIC_SetPriority+0x20>
 8004824:	21a8      	movs	r1, #168	; 0xa8
 8004826:	480e      	ldr	r0, [pc, #56]	; (8004860 <HAL_NVIC_SetPriority+0x54>)
 8004828:	f7fe f809 	bl	800283e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b0f      	cmp	r3, #15
 8004830:	d903      	bls.n	800483a <HAL_NVIC_SetPriority+0x2e>
 8004832:	21a9      	movs	r1, #169	; 0xa9
 8004834:	480a      	ldr	r0, [pc, #40]	; (8004860 <HAL_NVIC_SetPriority+0x54>)
 8004836:	f7fe f802 	bl	800283e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800483a:	f7ff ff19 	bl	8004670 <__NVIC_GetPriorityGrouping>
 800483e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	6978      	ldr	r0, [r7, #20]
 8004846:	f7ff ff8d 	bl	8004764 <NVIC_EncodePriority>
 800484a:	4602      	mov	r2, r0
 800484c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004850:	4611      	mov	r1, r2
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff ff5c 	bl	8004710 <__NVIC_SetPriority>
}
 8004858:	bf00      	nop
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	08010930 	.word	0x08010930

08004864 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	2b00      	cmp	r3, #0
 8004874:	da03      	bge.n	800487e <HAL_NVIC_EnableIRQ+0x1a>
 8004876:	21bc      	movs	r1, #188	; 0xbc
 8004878:	4805      	ldr	r0, [pc, #20]	; (8004890 <HAL_NVIC_EnableIRQ+0x2c>)
 800487a:	f7fd ffe0 	bl	800283e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800487e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff ff02 	bl	800468c <__NVIC_EnableIRQ>
}
 8004888:	bf00      	nop
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	08010930 	.word	0x08010930

08004894 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800489e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	da03      	bge.n	80048ae <HAL_NVIC_DisableIRQ+0x1a>
 80048a6:	21cc      	movs	r1, #204	; 0xcc
 80048a8:	4805      	ldr	r0, [pc, #20]	; (80048c0 <HAL_NVIC_DisableIRQ+0x2c>)
 80048aa:	f7fd ffc8 	bl	800283e <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80048ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff ff08 	bl	80046c8 <__NVIC_DisableIRQ>
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	08010930 	.word	0x08010930

080048c4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e017      	b.n	8004906 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a0d      	ldr	r2, [pc, #52]	; (8004910 <HAL_CRC_Init+0x4c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d003      	beq.n	80048e8 <HAL_CRC_Init+0x24>
 80048e0:	2168      	movs	r1, #104	; 0x68
 80048e2:	480c      	ldr	r0, [pc, #48]	; (8004914 <HAL_CRC_Init+0x50>)
 80048e4:	f7fd ffab 	bl	800283e <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	795b      	ldrb	r3, [r3, #5]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d105      	bne.n	80048fe <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7fc ff5d 	bl	80017b8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40023000 	.word	0x40023000
 8004914:	080109a8 	.word	0x080109a8

08004918 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004924:	f7fe ff60 	bl	80037e8 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e203      	b.n	8004d3c <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a8b      	ldr	r2, [pc, #556]	; (8004b68 <HAL_DMA_Init+0x250>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d04e      	beq.n	80049dc <HAL_DMA_Init+0xc4>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a8a      	ldr	r2, [pc, #552]	; (8004b6c <HAL_DMA_Init+0x254>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d049      	beq.n	80049dc <HAL_DMA_Init+0xc4>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a88      	ldr	r2, [pc, #544]	; (8004b70 <HAL_DMA_Init+0x258>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d044      	beq.n	80049dc <HAL_DMA_Init+0xc4>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a87      	ldr	r2, [pc, #540]	; (8004b74 <HAL_DMA_Init+0x25c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d03f      	beq.n	80049dc <HAL_DMA_Init+0xc4>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a85      	ldr	r2, [pc, #532]	; (8004b78 <HAL_DMA_Init+0x260>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d03a      	beq.n	80049dc <HAL_DMA_Init+0xc4>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a84      	ldr	r2, [pc, #528]	; (8004b7c <HAL_DMA_Init+0x264>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d035      	beq.n	80049dc <HAL_DMA_Init+0xc4>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a82      	ldr	r2, [pc, #520]	; (8004b80 <HAL_DMA_Init+0x268>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d030      	beq.n	80049dc <HAL_DMA_Init+0xc4>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a81      	ldr	r2, [pc, #516]	; (8004b84 <HAL_DMA_Init+0x26c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d02b      	beq.n	80049dc <HAL_DMA_Init+0xc4>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a7f      	ldr	r2, [pc, #508]	; (8004b88 <HAL_DMA_Init+0x270>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d026      	beq.n	80049dc <HAL_DMA_Init+0xc4>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a7e      	ldr	r2, [pc, #504]	; (8004b8c <HAL_DMA_Init+0x274>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d021      	beq.n	80049dc <HAL_DMA_Init+0xc4>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a7c      	ldr	r2, [pc, #496]	; (8004b90 <HAL_DMA_Init+0x278>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01c      	beq.n	80049dc <HAL_DMA_Init+0xc4>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a7b      	ldr	r2, [pc, #492]	; (8004b94 <HAL_DMA_Init+0x27c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d017      	beq.n	80049dc <HAL_DMA_Init+0xc4>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a79      	ldr	r2, [pc, #484]	; (8004b98 <HAL_DMA_Init+0x280>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d012      	beq.n	80049dc <HAL_DMA_Init+0xc4>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a78      	ldr	r2, [pc, #480]	; (8004b9c <HAL_DMA_Init+0x284>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00d      	beq.n	80049dc <HAL_DMA_Init+0xc4>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a76      	ldr	r2, [pc, #472]	; (8004ba0 <HAL_DMA_Init+0x288>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d008      	beq.n	80049dc <HAL_DMA_Init+0xc4>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a75      	ldr	r2, [pc, #468]	; (8004ba4 <HAL_DMA_Init+0x28c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d003      	beq.n	80049dc <HAL_DMA_Init+0xc4>
 80049d4:	21b7      	movs	r1, #183	; 0xb7
 80049d6:	4874      	ldr	r0, [pc, #464]	; (8004ba8 <HAL_DMA_Init+0x290>)
 80049d8:	f7fd ff31 	bl	800283e <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d026      	beq.n	8004a32 <HAL_DMA_Init+0x11a>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049ec:	d021      	beq.n	8004a32 <HAL_DMA_Init+0x11a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049f6:	d01c      	beq.n	8004a32 <HAL_DMA_Init+0x11a>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004a00:	d017      	beq.n	8004a32 <HAL_DMA_Init+0x11a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a0a:	d012      	beq.n	8004a32 <HAL_DMA_Init+0x11a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004a14:	d00d      	beq.n	8004a32 <HAL_DMA_Init+0x11a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a1e:	d008      	beq.n	8004a32 <HAL_DMA_Init+0x11a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004a28:	d003      	beq.n	8004a32 <HAL_DMA_Init+0x11a>
 8004a2a:	21b8      	movs	r1, #184	; 0xb8
 8004a2c:	485e      	ldr	r0, [pc, #376]	; (8004ba8 <HAL_DMA_Init+0x290>)
 8004a2e:	f7fd ff06 	bl	800283e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <HAL_DMA_Init+0x13a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d007      	beq.n	8004a52 <HAL_DMA_Init+0x13a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b80      	cmp	r3, #128	; 0x80
 8004a48:	d003      	beq.n	8004a52 <HAL_DMA_Init+0x13a>
 8004a4a:	21b9      	movs	r1, #185	; 0xb9
 8004a4c:	4856      	ldr	r0, [pc, #344]	; (8004ba8 <HAL_DMA_Init+0x290>)
 8004a4e:	f7fd fef6 	bl	800283e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a5a:	d007      	beq.n	8004a6c <HAL_DMA_Init+0x154>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_DMA_Init+0x154>
 8004a64:	21ba      	movs	r1, #186	; 0xba
 8004a66:	4850      	ldr	r0, [pc, #320]	; (8004ba8 <HAL_DMA_Init+0x290>)
 8004a68:	f7fd fee9 	bl	800283e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a74:	d007      	beq.n	8004a86 <HAL_DMA_Init+0x16e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_DMA_Init+0x16e>
 8004a7e:	21bb      	movs	r1, #187	; 0xbb
 8004a80:	4849      	ldr	r0, [pc, #292]	; (8004ba8 <HAL_DMA_Init+0x290>)
 8004a82:	f7fd fedc 	bl	800283e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <HAL_DMA_Init+0x192>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a96:	d008      	beq.n	8004aaa <HAL_DMA_Init+0x192>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa0:	d003      	beq.n	8004aaa <HAL_DMA_Init+0x192>
 8004aa2:	21bc      	movs	r1, #188	; 0xbc
 8004aa4:	4840      	ldr	r0, [pc, #256]	; (8004ba8 <HAL_DMA_Init+0x290>)
 8004aa6:	f7fd feca 	bl	800283e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00d      	beq.n	8004ace <HAL_DMA_Init+0x1b6>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aba:	d008      	beq.n	8004ace <HAL_DMA_Init+0x1b6>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ac4:	d003      	beq.n	8004ace <HAL_DMA_Init+0x1b6>
 8004ac6:	21bd      	movs	r1, #189	; 0xbd
 8004ac8:	4837      	ldr	r0, [pc, #220]	; (8004ba8 <HAL_DMA_Init+0x290>)
 8004aca:	f7fd feb8 	bl	800283e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00c      	beq.n	8004af0 <HAL_DMA_Init+0x1d8>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ade:	d007      	beq.n	8004af0 <HAL_DMA_Init+0x1d8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d003      	beq.n	8004af0 <HAL_DMA_Init+0x1d8>
 8004ae8:	21be      	movs	r1, #190	; 0xbe
 8004aea:	482f      	ldr	r0, [pc, #188]	; (8004ba8 <HAL_DMA_Init+0x290>)
 8004aec:	f7fd fea7 	bl	800283e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d012      	beq.n	8004b1e <HAL_DMA_Init+0x206>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b00:	d00d      	beq.n	8004b1e <HAL_DMA_Init+0x206>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b0a:	d008      	beq.n	8004b1e <HAL_DMA_Init+0x206>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b14:	d003      	beq.n	8004b1e <HAL_DMA_Init+0x206>
 8004b16:	21bf      	movs	r1, #191	; 0xbf
 8004b18:	4823      	ldr	r0, [pc, #140]	; (8004ba8 <HAL_DMA_Init+0x290>)
 8004b1a:	f7fd fe90 	bl	800283e <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_DMA_Init+0x21e>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d003      	beq.n	8004b36 <HAL_DMA_Init+0x21e>
 8004b2e:	21c0      	movs	r1, #192	; 0xc0
 8004b30:	481d      	ldr	r0, [pc, #116]	; (8004ba8 <HAL_DMA_Init+0x290>)
 8004b32:	f7fd fe84 	bl	800283e <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d064      	beq.n	8004c08 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d032      	beq.n	8004bac <HAL_DMA_Init+0x294>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d02e      	beq.n	8004bac <HAL_DMA_Init+0x294>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d02a      	beq.n	8004bac <HAL_DMA_Init+0x294>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d026      	beq.n	8004bac <HAL_DMA_Init+0x294>
 8004b5e:	21c5      	movs	r1, #197	; 0xc5
 8004b60:	4811      	ldr	r0, [pc, #68]	; (8004ba8 <HAL_DMA_Init+0x290>)
 8004b62:	f7fd fe6c 	bl	800283e <assert_failed>
 8004b66:	e021      	b.n	8004bac <HAL_DMA_Init+0x294>
 8004b68:	40026010 	.word	0x40026010
 8004b6c:	40026028 	.word	0x40026028
 8004b70:	40026040 	.word	0x40026040
 8004b74:	40026058 	.word	0x40026058
 8004b78:	40026070 	.word	0x40026070
 8004b7c:	40026088 	.word	0x40026088
 8004b80:	400260a0 	.word	0x400260a0
 8004b84:	400260b8 	.word	0x400260b8
 8004b88:	40026410 	.word	0x40026410
 8004b8c:	40026428 	.word	0x40026428
 8004b90:	40026440 	.word	0x40026440
 8004b94:	40026458 	.word	0x40026458
 8004b98:	40026470 	.word	0x40026470
 8004b9c:	40026488 	.word	0x40026488
 8004ba0:	400264a0 	.word	0x400264a0
 8004ba4:	400264b8 	.word	0x400264b8
 8004ba8:	08010a1c 	.word	0x08010a1c
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d012      	beq.n	8004bda <HAL_DMA_Init+0x2c2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bbc:	d00d      	beq.n	8004bda <HAL_DMA_Init+0x2c2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bc6:	d008      	beq.n	8004bda <HAL_DMA_Init+0x2c2>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bcc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bd0:	d003      	beq.n	8004bda <HAL_DMA_Init+0x2c2>
 8004bd2:	21c6      	movs	r1, #198	; 0xc6
 8004bd4:	485b      	ldr	r0, [pc, #364]	; (8004d44 <HAL_DMA_Init+0x42c>)
 8004bd6:	f7fd fe32 	bl	800283e <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d012      	beq.n	8004c08 <HAL_DMA_Init+0x2f0>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bea:	d00d      	beq.n	8004c08 <HAL_DMA_Init+0x2f0>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf4:	d008      	beq.n	8004c08 <HAL_DMA_Init+0x2f0>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004bfe:	d003      	beq.n	8004c08 <HAL_DMA_Init+0x2f0>
 8004c00:	21c7      	movs	r1, #199	; 0xc7
 8004c02:	4850      	ldr	r0, [pc, #320]	; (8004d44 <HAL_DMA_Init+0x42c>)
 8004c04:	f7fd fe1b 	bl	800283e <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0201 	bic.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c28:	e00f      	b.n	8004c4a <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c2a:	f7fe fddd 	bl	80037e8 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b05      	cmp	r3, #5
 8004c36:	d908      	bls.n	8004c4a <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2203      	movs	r2, #3
 8004c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e078      	b.n	8004d3c <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e8      	bne.n	8004c2a <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	4b39      	ldr	r3, [pc, #228]	; (8004d48 <HAL_DMA_Init+0x430>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d107      	bne.n	8004cb4 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	4313      	orrs	r3, r2
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f023 0307 	bic.w	r3, r3, #7
 8004cca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d117      	bne.n	8004d0e <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00e      	beq.n	8004d0e <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fb1f 	bl	8005334 <DMA_CheckFifoParam>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2240      	movs	r2, #64	; 0x40
 8004d00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e016      	b.n	8004d3c <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fad6 	bl	80052c8 <DMA_CalcBaseAndBitshift>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d24:	223f      	movs	r2, #63	; 0x3f
 8004d26:	409a      	lsls	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	08010a1c 	.word	0x08010a1c
 8004d48:	f010803f 	.word	0xf010803f

08004d4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_DMA_Start_IT+0x26>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d70:	d304      	bcc.n	8004d7c <HAL_DMA_Start_IT+0x30>
 8004d72:	f240 11cb 	movw	r1, #459	; 0x1cb
 8004d76:	4827      	ldr	r0, [pc, #156]	; (8004e14 <HAL_DMA_Start_IT+0xc8>)
 8004d78:	f7fd fd61 	bl	800283e <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_DMA_Start_IT+0x3e>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e040      	b.n	8004e0c <HAL_DMA_Start_IT+0xc0>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d12f      	bne.n	8004dfe <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2202      	movs	r2, #2
 8004da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fa5a 	bl	800526c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbc:	223f      	movs	r2, #63	; 0x3f
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0216 	orr.w	r2, r2, #22
 8004dd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0208 	orr.w	r2, r2, #8
 8004dea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	e005      	b.n	8004e0a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e06:	2302      	movs	r3, #2
 8004e08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	08010a1c 	.word	0x08010a1c

08004e18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e26:	f7fe fcdf 	bl	80037e8 <HAL_GetTick>
 8004e2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d008      	beq.n	8004e4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2280      	movs	r2, #128	; 0x80
 8004e3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e052      	b.n	8004ef0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0216 	bic.w	r2, r2, #22
 8004e58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695a      	ldr	r2, [r3, #20]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d103      	bne.n	8004e7a <HAL_DMA_Abort+0x62>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0208 	bic.w	r2, r2, #8
 8004e88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0201 	bic.w	r2, r2, #1
 8004e98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e9a:	e013      	b.n	8004ec4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e9c:	f7fe fca4 	bl	80037e8 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b05      	cmp	r3, #5
 8004ea8:	d90c      	bls.n	8004ec4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2220      	movs	r2, #32
 8004eae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e015      	b.n	8004ef0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e4      	bne.n	8004e9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed6:	223f      	movs	r2, #63	; 0x3f
 8004ed8:	409a      	lsls	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d004      	beq.n	8004f16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2280      	movs	r2, #128	; 0x80
 8004f10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e00c      	b.n	8004f30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2205      	movs	r2, #5
 8004f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0201 	bic.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f48:	4b8e      	ldr	r3, [pc, #568]	; (8005184 <HAL_DMA_IRQHandler+0x248>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a8e      	ldr	r2, [pc, #568]	; (8005188 <HAL_DMA_IRQHandler+0x24c>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	0a9b      	lsrs	r3, r3, #10
 8004f54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f66:	2208      	movs	r2, #8
 8004f68:	409a      	lsls	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d01a      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d013      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0204 	bic.w	r2, r2, #4
 8004f8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f94:	2208      	movs	r2, #8
 8004f96:	409a      	lsls	r2, r3
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa0:	f043 0201 	orr.w	r2, r3, #1
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fac:	2201      	movs	r2, #1
 8004fae:	409a      	lsls	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d012      	beq.n	8004fde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00b      	beq.n	8004fde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fca:	2201      	movs	r2, #1
 8004fcc:	409a      	lsls	r2, r3
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd6:	f043 0202 	orr.w	r2, r3, #2
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	409a      	lsls	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d012      	beq.n	8005014 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005000:	2204      	movs	r2, #4
 8005002:	409a      	lsls	r2, r3
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500c:	f043 0204 	orr.w	r2, r3, #4
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005018:	2210      	movs	r2, #16
 800501a:	409a      	lsls	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4013      	ands	r3, r2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d043      	beq.n	80050ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d03c      	beq.n	80050ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005036:	2210      	movs	r2, #16
 8005038:	409a      	lsls	r2, r3
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d018      	beq.n	800507e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d108      	bne.n	800506c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d024      	beq.n	80050ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	4798      	blx	r3
 800506a:	e01f      	b.n	80050ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01b      	beq.n	80050ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	4798      	blx	r3
 800507c:	e016      	b.n	80050ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005088:	2b00      	cmp	r3, #0
 800508a:	d107      	bne.n	800509c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0208 	bic.w	r2, r2, #8
 800509a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b0:	2220      	movs	r2, #32
 80050b2:	409a      	lsls	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4013      	ands	r3, r2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 808f 	beq.w	80051dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 8087 	beq.w	80051dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d2:	2220      	movs	r2, #32
 80050d4:	409a      	lsls	r2, r3
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b05      	cmp	r3, #5
 80050e4:	d136      	bne.n	8005154 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0216 	bic.w	r2, r2, #22
 80050f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695a      	ldr	r2, [r3, #20]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005104:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	d103      	bne.n	8005116 <HAL_DMA_IRQHandler+0x1da>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0208 	bic.w	r2, r2, #8
 8005124:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800512a:	223f      	movs	r2, #63	; 0x3f
 800512c:	409a      	lsls	r2, r3
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005146:	2b00      	cmp	r3, #0
 8005148:	d07e      	beq.n	8005248 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	4798      	blx	r3
        }
        return;
 8005152:	e079      	b.n	8005248 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01d      	beq.n	800519e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10d      	bne.n	800518c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005174:	2b00      	cmp	r3, #0
 8005176:	d031      	beq.n	80051dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	4798      	blx	r3
 8005180:	e02c      	b.n	80051dc <HAL_DMA_IRQHandler+0x2a0>
 8005182:	bf00      	nop
 8005184:	20000004 	.word	0x20000004
 8005188:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005190:	2b00      	cmp	r3, #0
 8005192:	d023      	beq.n	80051dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	4798      	blx	r3
 800519c:	e01e      	b.n	80051dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10f      	bne.n	80051cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0210 	bic.w	r2, r2, #16
 80051ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d032      	beq.n	800524a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d022      	beq.n	8005236 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2205      	movs	r2, #5
 80051f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0201 	bic.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	3301      	adds	r3, #1
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	429a      	cmp	r2, r3
 8005212:	d307      	bcc.n	8005224 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f2      	bne.n	8005208 <HAL_DMA_IRQHandler+0x2cc>
 8005222:	e000      	b.n	8005226 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005224:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	4798      	blx	r3
 8005246:	e000      	b.n	800524a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005248:	bf00      	nop
    }
  }
}
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800525e:	b2db      	uxtb	r3, r3
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005288:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	2b40      	cmp	r3, #64	; 0x40
 8005298:	d108      	bne.n	80052ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052aa:	e007      	b.n	80052bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	60da      	str	r2, [r3, #12]
}
 80052bc:	bf00      	nop
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	3b10      	subs	r3, #16
 80052d8:	4a14      	ldr	r2, [pc, #80]	; (800532c <DMA_CalcBaseAndBitshift+0x64>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	091b      	lsrs	r3, r3, #4
 80052e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80052e2:	4a13      	ldr	r2, [pc, #76]	; (8005330 <DMA_CalcBaseAndBitshift+0x68>)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d909      	bls.n	800530a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80052fe:	f023 0303 	bic.w	r3, r3, #3
 8005302:	1d1a      	adds	r2, r3, #4
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	659a      	str	r2, [r3, #88]	; 0x58
 8005308:	e007      	b.n	800531a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005312:	f023 0303 	bic.w	r3, r3, #3
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	aaaaaaab 	.word	0xaaaaaaab
 8005330:	08011874 	.word	0x08011874

08005334 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d11f      	bne.n	800538e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b03      	cmp	r3, #3
 8005352:	d856      	bhi.n	8005402 <DMA_CheckFifoParam+0xce>
 8005354:	a201      	add	r2, pc, #4	; (adr r2, 800535c <DMA_CheckFifoParam+0x28>)
 8005356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535a:	bf00      	nop
 800535c:	0800536d 	.word	0x0800536d
 8005360:	0800537f 	.word	0x0800537f
 8005364:	0800536d 	.word	0x0800536d
 8005368:	08005403 	.word	0x08005403
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d046      	beq.n	8005406 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800537c:	e043      	b.n	8005406 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005386:	d140      	bne.n	800540a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800538c:	e03d      	b.n	800540a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005396:	d121      	bne.n	80053dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b03      	cmp	r3, #3
 800539c:	d837      	bhi.n	800540e <DMA_CheckFifoParam+0xda>
 800539e:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <DMA_CheckFifoParam+0x70>)
 80053a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a4:	080053b5 	.word	0x080053b5
 80053a8:	080053bb 	.word	0x080053bb
 80053ac:	080053b5 	.word	0x080053b5
 80053b0:	080053cd 	.word	0x080053cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	73fb      	strb	r3, [r7, #15]
      break;
 80053b8:	e030      	b.n	800541c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d025      	beq.n	8005412 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ca:	e022      	b.n	8005412 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053d4:	d11f      	bne.n	8005416 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80053da:	e01c      	b.n	8005416 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d903      	bls.n	80053ea <DMA_CheckFifoParam+0xb6>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d003      	beq.n	80053f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80053e8:	e018      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	73fb      	strb	r3, [r7, #15]
      break;
 80053ee:	e015      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00e      	beq.n	800541a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005400:	e00b      	b.n	800541a <DMA_CheckFifoParam+0xe6>
      break;
 8005402:	bf00      	nop
 8005404:	e00a      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;
 8005406:	bf00      	nop
 8005408:	e008      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;
 800540a:	bf00      	nop
 800540c:	e006      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;
 800540e:	bf00      	nop
 8005410:	e004      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;
 8005412:	bf00      	nop
 8005414:	e002      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;   
 8005416:	bf00      	nop
 8005418:	e000      	b.n	800541c <DMA_CheckFifoParam+0xe8>
      break;
 800541a:	bf00      	nop
    }
  } 
  
  return status; 
 800541c:	7bfb      	ldrb	r3, [r7, #15]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop

0800542c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005436:	4b4b      	ldr	r3, [pc, #300]	; (8005564 <HAL_FLASH_IRQHandler+0x138>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d020      	beq.n	8005484 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005442:	4b49      	ldr	r3, [pc, #292]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b01      	cmp	r3, #1
 800544a:	d107      	bne.n	800545c <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800544c:	4b46      	ldr	r3, [pc, #280]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8005452:	4b45      	ldr	r3, [pc, #276]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 8005454:	f04f 32ff 	mov.w	r2, #4294967295
 8005458:	60da      	str	r2, [r3, #12]
 800545a:	e00b      	b.n	8005474 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800545c:	4b42      	ldr	r3, [pc, #264]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d103      	bne.n	800546e <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8005466:	4b40      	ldr	r3, [pc, #256]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	607b      	str	r3, [r7, #4]
 800546c:	e002      	b.n	8005474 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800546e:	4b3e      	ldr	r3, [pc, #248]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8005474:	f000 f88e 	bl	8005594 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f881 	bl	8005580 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800547e:	4b3a      	ldr	r3, [pc, #232]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005484:	4b37      	ldr	r3, [pc, #220]	; (8005564 <HAL_FLASH_IRQHandler+0x138>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d04a      	beq.n	8005526 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005490:	4b34      	ldr	r3, [pc, #208]	; (8005564 <HAL_FLASH_IRQHandler+0x138>)
 8005492:	2201      	movs	r2, #1
 8005494:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005496:	4b34      	ldr	r3, [pc, #208]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b01      	cmp	r3, #1
 800549e:	d12d      	bne.n	80054fc <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 80054a0:	4b31      	ldr	r3, [pc, #196]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	4a30      	ldr	r2, [pc, #192]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 80054a8:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 80054aa:	4b2f      	ldr	r3, [pc, #188]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d015      	beq.n	80054de <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 80054b2:	4b2d      	ldr	r3, [pc, #180]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f857 	bl	800556c <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 80054be:	4b2a      	ldr	r3, [pc, #168]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	3301      	adds	r3, #1
 80054c4:	4a28      	ldr	r2, [pc, #160]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 80054c6:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 80054c8:	4b27      	ldr	r3, [pc, #156]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 80054ce:	4b26      	ldr	r3, [pc, #152]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 80054d0:	7a1b      	ldrb	r3, [r3, #8]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	4619      	mov	r1, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f8c2 	bl	8005660 <FLASH_Erase_Sector>
 80054dc:	e023      	b.n	8005526 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 80054de:	f04f 33ff 	mov.w	r3, #4294967295
 80054e2:	607b      	str	r3, [r7, #4]
 80054e4:	4a20      	ldr	r2, [pc, #128]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80054ea:	4b1f      	ldr	r3, [pc, #124]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80054f0:	f000 f92c 	bl	800574c <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f839 	bl	800556c <HAL_FLASH_EndOfOperationCallback>
 80054fa:	e014      	b.n	8005526 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 80054fc:	4b1a      	ldr	r3, [pc, #104]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d107      	bne.n	8005516 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8005506:	f000 f921 	bl	800574c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800550a:	4b17      	ldr	r3, [pc, #92]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	4618      	mov	r0, r3
 8005510:	f000 f82c 	bl	800556c <HAL_FLASH_EndOfOperationCallback>
 8005514:	e004      	b.n	8005520 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8005516:	4b14      	ldr	r3, [pc, #80]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	4618      	mov	r0, r3
 800551c:	f000 f826 	bl	800556c <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005520:	4b11      	ldr	r3, [pc, #68]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 8005522:	2200      	movs	r2, #0
 8005524:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8005526:	4b10      	ldr	r3, [pc, #64]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d114      	bne.n	800555a <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8005530:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <HAL_FLASH_IRQHandler+0x138>)
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	4a0b      	ldr	r2, [pc, #44]	; (8005564 <HAL_FLASH_IRQHandler+0x138>)
 8005536:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800553a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800553c:	4b09      	ldr	r3, [pc, #36]	; (8005564 <HAL_FLASH_IRQHandler+0x138>)
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	4a08      	ldr	r2, [pc, #32]	; (8005564 <HAL_FLASH_IRQHandler+0x138>)
 8005542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005546:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8005548:	4b06      	ldr	r3, [pc, #24]	; (8005564 <HAL_FLASH_IRQHandler+0x138>)
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	4a05      	ldr	r2, [pc, #20]	; (8005564 <HAL_FLASH_IRQHandler+0x138>)
 800554e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005552:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005554:	4b04      	ldr	r3, [pc, #16]	; (8005568 <HAL_FLASH_IRQHandler+0x13c>)
 8005556:	2200      	movs	r2, #0
 8005558:	761a      	strb	r2, [r3, #24]
  }
}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40023c00 	.word	0x40023c00
 8005568:	20000ac8 	.word	0x20000ac8

0800556c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005598:	4b2f      	ldr	r3, [pc, #188]	; (8005658 <FLASH_SetErrorCode+0xc4>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80055a4:	4b2d      	ldr	r3, [pc, #180]	; (800565c <FLASH_SetErrorCode+0xc8>)
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	f043 0310 	orr.w	r3, r3, #16
 80055ac:	4a2b      	ldr	r2, [pc, #172]	; (800565c <FLASH_SetErrorCode+0xc8>)
 80055ae:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80055b0:	4b29      	ldr	r3, [pc, #164]	; (8005658 <FLASH_SetErrorCode+0xc4>)
 80055b2:	2210      	movs	r2, #16
 80055b4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80055b6:	4b28      	ldr	r3, [pc, #160]	; (8005658 <FLASH_SetErrorCode+0xc4>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d008      	beq.n	80055d4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80055c2:	4b26      	ldr	r3, [pc, #152]	; (800565c <FLASH_SetErrorCode+0xc8>)
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f043 0308 	orr.w	r3, r3, #8
 80055ca:	4a24      	ldr	r2, [pc, #144]	; (800565c <FLASH_SetErrorCode+0xc8>)
 80055cc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80055ce:	4b22      	ldr	r3, [pc, #136]	; (8005658 <FLASH_SetErrorCode+0xc4>)
 80055d0:	2220      	movs	r2, #32
 80055d2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80055d4:	4b20      	ldr	r3, [pc, #128]	; (8005658 <FLASH_SetErrorCode+0xc4>)
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d008      	beq.n	80055f2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80055e0:	4b1e      	ldr	r3, [pc, #120]	; (800565c <FLASH_SetErrorCode+0xc8>)
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f043 0304 	orr.w	r3, r3, #4
 80055e8:	4a1c      	ldr	r2, [pc, #112]	; (800565c <FLASH_SetErrorCode+0xc8>)
 80055ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80055ec:	4b1a      	ldr	r3, [pc, #104]	; (8005658 <FLASH_SetErrorCode+0xc4>)
 80055ee:	2240      	movs	r2, #64	; 0x40
 80055f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80055f2:	4b19      	ldr	r3, [pc, #100]	; (8005658 <FLASH_SetErrorCode+0xc4>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d008      	beq.n	8005610 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80055fe:	4b17      	ldr	r3, [pc, #92]	; (800565c <FLASH_SetErrorCode+0xc8>)
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	f043 0302 	orr.w	r3, r3, #2
 8005606:	4a15      	ldr	r2, [pc, #84]	; (800565c <FLASH_SetErrorCode+0xc8>)
 8005608:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800560a:	4b13      	ldr	r3, [pc, #76]	; (8005658 <FLASH_SetErrorCode+0xc4>)
 800560c:	2280      	movs	r2, #128	; 0x80
 800560e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005610:	4b11      	ldr	r3, [pc, #68]	; (8005658 <FLASH_SetErrorCode+0xc4>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005618:	2b00      	cmp	r3, #0
 800561a:	d009      	beq.n	8005630 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800561c:	4b0f      	ldr	r3, [pc, #60]	; (800565c <FLASH_SetErrorCode+0xc8>)
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f043 0301 	orr.w	r3, r3, #1
 8005624:	4a0d      	ldr	r2, [pc, #52]	; (800565c <FLASH_SetErrorCode+0xc8>)
 8005626:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <FLASH_SetErrorCode+0xc4>)
 800562a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800562e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005630:	4b09      	ldr	r3, [pc, #36]	; (8005658 <FLASH_SetErrorCode+0xc4>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d008      	beq.n	800564e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800563c:	4b07      	ldr	r3, [pc, #28]	; (800565c <FLASH_SetErrorCode+0xc8>)
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f043 0320 	orr.w	r3, r3, #32
 8005644:	4a05      	ldr	r2, [pc, #20]	; (800565c <FLASH_SetErrorCode+0xc8>)
 8005646:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <FLASH_SetErrorCode+0xc4>)
 800564a:	2202      	movs	r2, #2
 800564c:	60da      	str	r2, [r3, #12]
  }
}
 800564e:	bf00      	nop
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	40023c00 	.word	0x40023c00
 800565c:	20000ac8 	.word	0x20000ac8

08005660 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d019      	beq.n	80056aa <FLASH_Erase_Sector+0x4a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d016      	beq.n	80056aa <FLASH_Erase_Sector+0x4a>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d013      	beq.n	80056aa <FLASH_Erase_Sector+0x4a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b03      	cmp	r3, #3
 8005686:	d010      	beq.n	80056aa <FLASH_Erase_Sector+0x4a>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b04      	cmp	r3, #4
 800568c:	d00d      	beq.n	80056aa <FLASH_Erase_Sector+0x4a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b05      	cmp	r3, #5
 8005692:	d00a      	beq.n	80056aa <FLASH_Erase_Sector+0x4a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b06      	cmp	r3, #6
 8005698:	d007      	beq.n	80056aa <FLASH_Erase_Sector+0x4a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b07      	cmp	r3, #7
 800569e:	d004      	beq.n	80056aa <FLASH_Erase_Sector+0x4a>
 80056a0:	f240 31d9 	movw	r1, #985	; 0x3d9
 80056a4:	4827      	ldr	r0, [pc, #156]	; (8005744 <FLASH_Erase_Sector+0xe4>)
 80056a6:	f7fd f8ca 	bl	800283e <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00d      	beq.n	80056cc <FLASH_Erase_Sector+0x6c>
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d00a      	beq.n	80056cc <FLASH_Erase_Sector+0x6c>
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d007      	beq.n	80056cc <FLASH_Erase_Sector+0x6c>
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d004      	beq.n	80056cc <FLASH_Erase_Sector+0x6c>
 80056c2:	f240 31da 	movw	r1, #986	; 0x3da
 80056c6:	481f      	ldr	r0, [pc, #124]	; (8005744 <FLASH_Erase_Sector+0xe4>)
 80056c8:	f7fd f8b9 	bl	800283e <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d102      	bne.n	80056d8 <FLASH_Erase_Sector+0x78>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	e010      	b.n	80056fa <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d103      	bne.n	80056e6 <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80056de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	e009      	b.n	80056fa <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80056e6:	78fb      	ldrb	r3, [r7, #3]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d103      	bne.n	80056f4 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80056ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	e002      	b.n	80056fa <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80056f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80056f8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80056fa:	4b13      	ldr	r3, [pc, #76]	; (8005748 <FLASH_Erase_Sector+0xe8>)
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	4a12      	ldr	r2, [pc, #72]	; (8005748 <FLASH_Erase_Sector+0xe8>)
 8005700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005704:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005706:	4b10      	ldr	r3, [pc, #64]	; (8005748 <FLASH_Erase_Sector+0xe8>)
 8005708:	691a      	ldr	r2, [r3, #16]
 800570a:	490f      	ldr	r1, [pc, #60]	; (8005748 <FLASH_Erase_Sector+0xe8>)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005712:	4b0d      	ldr	r3, [pc, #52]	; (8005748 <FLASH_Erase_Sector+0xe8>)
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	4a0c      	ldr	r2, [pc, #48]	; (8005748 <FLASH_Erase_Sector+0xe8>)
 8005718:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800571c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800571e:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <FLASH_Erase_Sector+0xe8>)
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	4313      	orrs	r3, r2
 8005728:	4a07      	ldr	r2, [pc, #28]	; (8005748 <FLASH_Erase_Sector+0xe8>)
 800572a:	f043 0302 	orr.w	r3, r3, #2
 800572e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005730:	4b05      	ldr	r3, [pc, #20]	; (8005748 <FLASH_Erase_Sector+0xe8>)
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	4a04      	ldr	r2, [pc, #16]	; (8005748 <FLASH_Erase_Sector+0xe8>)
 8005736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800573a:	6113      	str	r3, [r2, #16]
}
 800573c:	bf00      	nop
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	08010a90 	.word	0x08010a90
 8005748:	40023c00 	.word	0x40023c00

0800574c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005750:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <FLASH_FlushCaches+0x88>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005758:	2b00      	cmp	r3, #0
 800575a:	d017      	beq.n	800578c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800575c:	4b1d      	ldr	r3, [pc, #116]	; (80057d4 <FLASH_FlushCaches+0x88>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a1c      	ldr	r2, [pc, #112]	; (80057d4 <FLASH_FlushCaches+0x88>)
 8005762:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005766:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005768:	4b1a      	ldr	r3, [pc, #104]	; (80057d4 <FLASH_FlushCaches+0x88>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a19      	ldr	r2, [pc, #100]	; (80057d4 <FLASH_FlushCaches+0x88>)
 800576e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	4b17      	ldr	r3, [pc, #92]	; (80057d4 <FLASH_FlushCaches+0x88>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a16      	ldr	r2, [pc, #88]	; (80057d4 <FLASH_FlushCaches+0x88>)
 800577a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800577e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005780:	4b14      	ldr	r3, [pc, #80]	; (80057d4 <FLASH_FlushCaches+0x88>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a13      	ldr	r2, [pc, #76]	; (80057d4 <FLASH_FlushCaches+0x88>)
 8005786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800578a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800578c:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <FLASH_FlushCaches+0x88>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005794:	2b00      	cmp	r3, #0
 8005796:	d017      	beq.n	80057c8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005798:	4b0e      	ldr	r3, [pc, #56]	; (80057d4 <FLASH_FlushCaches+0x88>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a0d      	ldr	r2, [pc, #52]	; (80057d4 <FLASH_FlushCaches+0x88>)
 800579e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057a2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80057a4:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <FLASH_FlushCaches+0x88>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a0a      	ldr	r2, [pc, #40]	; (80057d4 <FLASH_FlushCaches+0x88>)
 80057aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	4b08      	ldr	r3, [pc, #32]	; (80057d4 <FLASH_FlushCaches+0x88>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a07      	ldr	r2, [pc, #28]	; (80057d4 <FLASH_FlushCaches+0x88>)
 80057b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057ba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <FLASH_FlushCaches+0x88>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a04      	ldr	r2, [pc, #16]	; (80057d4 <FLASH_FlushCaches+0x88>)
 80057c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057c6:	6013      	str	r3, [r2, #0]
  }
}
 80057c8:	bf00      	nop
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40023c00 	.word	0x40023c00

080057d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a33      	ldr	r2, [pc, #204]	; (80058c0 <HAL_GPIO_Init+0xe8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d017      	beq.n	8005826 <HAL_GPIO_Init+0x4e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a32      	ldr	r2, [pc, #200]	; (80058c4 <HAL_GPIO_Init+0xec>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d013      	beq.n	8005826 <HAL_GPIO_Init+0x4e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a31      	ldr	r2, [pc, #196]	; (80058c8 <HAL_GPIO_Init+0xf0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00f      	beq.n	8005826 <HAL_GPIO_Init+0x4e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a30      	ldr	r2, [pc, #192]	; (80058cc <HAL_GPIO_Init+0xf4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00b      	beq.n	8005826 <HAL_GPIO_Init+0x4e>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a2f      	ldr	r2, [pc, #188]	; (80058d0 <HAL_GPIO_Init+0xf8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d007      	beq.n	8005826 <HAL_GPIO_Init+0x4e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a2e      	ldr	r2, [pc, #184]	; (80058d4 <HAL_GPIO_Init+0xfc>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d003      	beq.n	8005826 <HAL_GPIO_Init+0x4e>
 800581e:	21ac      	movs	r1, #172	; 0xac
 8005820:	482d      	ldr	r0, [pc, #180]	; (80058d8 <HAL_GPIO_Init+0x100>)
 8005822:	f7fd f80c 	bl	800283e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_GPIO_Init+0x64>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	0c1b      	lsrs	r3, r3, #16
 8005836:	041b      	lsls	r3, r3, #16
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_GPIO_Init+0x6c>
 800583c:	21ad      	movs	r1, #173	; 0xad
 800583e:	4826      	ldr	r0, [pc, #152]	; (80058d8 <HAL_GPIO_Init+0x100>)
 8005840:	f7fc fffd 	bl	800283e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d035      	beq.n	80058b8 <HAL_GPIO_Init+0xe0>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d031      	beq.n	80058b8 <HAL_GPIO_Init+0xe0>
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b11      	cmp	r3, #17
 800585a:	d02d      	beq.n	80058b8 <HAL_GPIO_Init+0xe0>
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d029      	beq.n	80058b8 <HAL_GPIO_Init+0xe0>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2b12      	cmp	r3, #18
 800586a:	d025      	beq.n	80058b8 <HAL_GPIO_Init+0xe0>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005874:	d020      	beq.n	80058b8 <HAL_GPIO_Init+0xe0>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800587e:	d01b      	beq.n	80058b8 <HAL_GPIO_Init+0xe0>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8005888:	d016      	beq.n	80058b8 <HAL_GPIO_Init+0xe0>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8005892:	d011      	beq.n	80058b8 <HAL_GPIO_Init+0xe0>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800589c:	d00c      	beq.n	80058b8 <HAL_GPIO_Init+0xe0>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80058a6:	d007      	beq.n	80058b8 <HAL_GPIO_Init+0xe0>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d003      	beq.n	80058b8 <HAL_GPIO_Init+0xe0>
 80058b0:	21ae      	movs	r1, #174	; 0xae
 80058b2:	4809      	ldr	r0, [pc, #36]	; (80058d8 <HAL_GPIO_Init+0x100>)
 80058b4:	f7fc ffc3 	bl	800283e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058b8:	2300      	movs	r3, #0
 80058ba:	61fb      	str	r3, [r7, #28]
 80058bc:	e20c      	b.n	8005cd8 <HAL_GPIO_Init+0x500>
 80058be:	bf00      	nop
 80058c0:	40020000 	.word	0x40020000
 80058c4:	40020400 	.word	0x40020400
 80058c8:	40020800 	.word	0x40020800
 80058cc:	40020c00 	.word	0x40020c00
 80058d0:	40021000 	.word	0x40021000
 80058d4:	40021c00 	.word	0x40021c00
 80058d8:	08010b08 	.word	0x08010b08
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058dc:	2201      	movs	r2, #1
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4013      	ands	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	f040 81ec 	bne.w	8005cd2 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	2b01      	cmp	r3, #1
 8005904:	d005      	beq.n	8005912 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800590e:	2b02      	cmp	r3, #2
 8005910:	d144      	bne.n	800599c <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00f      	beq.n	800593a <HAL_GPIO_Init+0x162>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d00b      	beq.n	800593a <HAL_GPIO_Init+0x162>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d007      	beq.n	800593a <HAL_GPIO_Init+0x162>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	2b03      	cmp	r3, #3
 8005930:	d003      	beq.n	800593a <HAL_GPIO_Init+0x162>
 8005932:	21c0      	movs	r1, #192	; 0xc0
 8005934:	4884      	ldr	r0, [pc, #528]	; (8005b48 <HAL_GPIO_Init+0x370>)
 8005936:	f7fc ff82 	bl	800283e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	2203      	movs	r2, #3
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43db      	mvns	r3, r3
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	4013      	ands	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	fa02 f303 	lsl.w	r3, r2, r3
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	4313      	orrs	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005970:	2201      	movs	r2, #1
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	43db      	mvns	r3, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4013      	ands	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	f003 0201 	and.w	r2, r3, #1
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	fa02 f303 	lsl.w	r3, r2, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4313      	orrs	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f003 0303 	and.w	r3, r3, #3
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d027      	beq.n	80059f8 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00b      	beq.n	80059c8 <HAL_GPIO_Init+0x1f0>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d007      	beq.n	80059c8 <HAL_GPIO_Init+0x1f0>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d003      	beq.n	80059c8 <HAL_GPIO_Init+0x1f0>
 80059c0:	21d1      	movs	r1, #209	; 0xd1
 80059c2:	4861      	ldr	r0, [pc, #388]	; (8005b48 <HAL_GPIO_Init+0x370>)
 80059c4:	f7fc ff3b 	bl	800283e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	2203      	movs	r2, #3
 80059d4:	fa02 f303 	lsl.w	r3, r2, r3
 80059d8:	43db      	mvns	r3, r3
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	4013      	ands	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f003 0303 	and.w	r3, r3, #3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	f040 80a3 	bne.w	8005b4c <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d077      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	2b09      	cmp	r3, #9
 8005a14:	d073      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d06f      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d06b      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d067      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d063      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d05f      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d05b      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d057      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d053      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d04f      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d04b      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d047      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d043      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	2b05      	cmp	r3, #5
 8005a7c:	d03f      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b05      	cmp	r3, #5
 8005a84:	d03b      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b05      	cmp	r3, #5
 8005a8c:	d037      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b06      	cmp	r3, #6
 8005a94:	d033      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	2b06      	cmp	r3, #6
 8005a9c:	d02f      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b05      	cmp	r3, #5
 8005aa4:	d02b      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	2b06      	cmp	r3, #6
 8005aac:	d027      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	2b07      	cmp	r3, #7
 8005ab4:	d023      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b07      	cmp	r3, #7
 8005abc:	d01f      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	2b07      	cmp	r3, #7
 8005ac4:	d01b      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d017      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b0a      	cmp	r3, #10
 8005ad4:	d013      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	2b09      	cmp	r3, #9
 8005adc:	d00f      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	2b09      	cmp	r3, #9
 8005ae4:	d00b      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	2b0c      	cmp	r3, #12
 8005aec:	d007      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	2b0f      	cmp	r3, #15
 8005af4:	d003      	beq.n	8005afe <HAL_GPIO_Init+0x326>
 8005af6:	21de      	movs	r1, #222	; 0xde
 8005af8:	4813      	ldr	r0, [pc, #76]	; (8005b48 <HAL_GPIO_Init+0x370>)
 8005afa:	f7fc fea0 	bl	800283e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	08da      	lsrs	r2, r3, #3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3208      	adds	r2, #8
 8005b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	220f      	movs	r2, #15
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	08da      	lsrs	r2, r3, #3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3208      	adds	r2, #8
 8005b40:	69b9      	ldr	r1, [r7, #24]
 8005b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005b46:	e001      	b.n	8005b4c <HAL_GPIO_Init+0x374>
 8005b48:	08010b08 	.word	0x08010b08
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	2203      	movs	r2, #3
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	4013      	ands	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f003 0203 	and.w	r2, r3, #3
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 80a2 	beq.w	8005cd2 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	4b56      	ldr	r3, [pc, #344]	; (8005cec <HAL_GPIO_Init+0x514>)
 8005b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b96:	4a55      	ldr	r2, [pc, #340]	; (8005cec <HAL_GPIO_Init+0x514>)
 8005b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b9e:	4b53      	ldr	r3, [pc, #332]	; (8005cec <HAL_GPIO_Init+0x514>)
 8005ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005baa:	4a51      	ldr	r2, [pc, #324]	; (8005cf0 <HAL_GPIO_Init+0x518>)
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	089b      	lsrs	r3, r3, #2
 8005bb0:	3302      	adds	r3, #2
 8005bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	220f      	movs	r2, #15
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	43db      	mvns	r3, r3
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a48      	ldr	r2, [pc, #288]	; (8005cf4 <HAL_GPIO_Init+0x51c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d019      	beq.n	8005c0a <HAL_GPIO_Init+0x432>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a47      	ldr	r2, [pc, #284]	; (8005cf8 <HAL_GPIO_Init+0x520>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d013      	beq.n	8005c06 <HAL_GPIO_Init+0x42e>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a46      	ldr	r2, [pc, #280]	; (8005cfc <HAL_GPIO_Init+0x524>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00d      	beq.n	8005c02 <HAL_GPIO_Init+0x42a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a45      	ldr	r2, [pc, #276]	; (8005d00 <HAL_GPIO_Init+0x528>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d007      	beq.n	8005bfe <HAL_GPIO_Init+0x426>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a44      	ldr	r2, [pc, #272]	; (8005d04 <HAL_GPIO_Init+0x52c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d101      	bne.n	8005bfa <HAL_GPIO_Init+0x422>
 8005bf6:	2304      	movs	r3, #4
 8005bf8:	e008      	b.n	8005c0c <HAL_GPIO_Init+0x434>
 8005bfa:	2307      	movs	r3, #7
 8005bfc:	e006      	b.n	8005c0c <HAL_GPIO_Init+0x434>
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e004      	b.n	8005c0c <HAL_GPIO_Init+0x434>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e002      	b.n	8005c0c <HAL_GPIO_Init+0x434>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e000      	b.n	8005c0c <HAL_GPIO_Init+0x434>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	f002 0203 	and.w	r2, r2, #3
 8005c12:	0092      	lsls	r2, r2, #2
 8005c14:	4093      	lsls	r3, r2
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c1c:	4934      	ldr	r1, [pc, #208]	; (8005cf0 <HAL_GPIO_Init+0x518>)
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	089b      	lsrs	r3, r3, #2
 8005c22:	3302      	adds	r3, #2
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c2a:	4b37      	ldr	r3, [pc, #220]	; (8005d08 <HAL_GPIO_Init+0x530>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	43db      	mvns	r3, r3
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	4013      	ands	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c4e:	4a2e      	ldr	r2, [pc, #184]	; (8005d08 <HAL_GPIO_Init+0x530>)
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c54:	4b2c      	ldr	r3, [pc, #176]	; (8005d08 <HAL_GPIO_Init+0x530>)
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	4013      	ands	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c78:	4a23      	ldr	r2, [pc, #140]	; (8005d08 <HAL_GPIO_Init+0x530>)
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c7e:	4b22      	ldr	r3, [pc, #136]	; (8005d08 <HAL_GPIO_Init+0x530>)
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	43db      	mvns	r3, r3
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ca2:	4a19      	ldr	r2, [pc, #100]	; (8005d08 <HAL_GPIO_Init+0x530>)
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ca8:	4b17      	ldr	r3, [pc, #92]	; (8005d08 <HAL_GPIO_Init+0x530>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ccc:	4a0e      	ldr	r2, [pc, #56]	; (8005d08 <HAL_GPIO_Init+0x530>)
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	61fb      	str	r3, [r7, #28]
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	2b0f      	cmp	r3, #15
 8005cdc:	f67f adfe 	bls.w	80058dc <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8005ce0:	bf00      	nop
 8005ce2:	bf00      	nop
 8005ce4:	3720      	adds	r7, #32
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	40023800 	.word	0x40023800
 8005cf0:	40013800 	.word	0x40013800
 8005cf4:	40020000 	.word	0x40020000
 8005cf8:	40020400 	.word	0x40020400
 8005cfc:	40020800 	.word	0x40020800
 8005d00:	40020c00 	.word	0x40020c00
 8005d04:	40021000 	.word	0x40021000
 8005d08:	40013c00 	.word	0x40013c00

08005d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	807b      	strh	r3, [r7, #2]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005d1c:	887b      	ldrh	r3, [r7, #2]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d004      	beq.n	8005d2c <HAL_GPIO_WritePin+0x20>
 8005d22:	887b      	ldrh	r3, [r7, #2]
 8005d24:	0c1b      	lsrs	r3, r3, #16
 8005d26:	041b      	lsls	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d004      	beq.n	8005d36 <HAL_GPIO_WritePin+0x2a>
 8005d2c:	f240 119d 	movw	r1, #413	; 0x19d
 8005d30:	480e      	ldr	r0, [pc, #56]	; (8005d6c <HAL_GPIO_WritePin+0x60>)
 8005d32:	f7fc fd84 	bl	800283e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005d36:	787b      	ldrb	r3, [r7, #1]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d007      	beq.n	8005d4c <HAL_GPIO_WritePin+0x40>
 8005d3c:	787b      	ldrb	r3, [r7, #1]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d004      	beq.n	8005d4c <HAL_GPIO_WritePin+0x40>
 8005d42:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8005d46:	4809      	ldr	r0, [pc, #36]	; (8005d6c <HAL_GPIO_WritePin+0x60>)
 8005d48:	f7fc fd79 	bl	800283e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005d4c:	787b      	ldrb	r3, [r7, #1]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d52:	887a      	ldrh	r2, [r7, #2]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d58:	e003      	b.n	8005d62 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d5a:	887b      	ldrh	r3, [r7, #2]
 8005d5c:	041a      	lsls	r2, r3, #16
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	619a      	str	r2, [r3, #24]
}
 8005d62:	bf00      	nop
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	08010b08 	.word	0x08010b08

08005d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e1f7      	b.n	8006172 <HAL_I2C_Init+0x402>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a81      	ldr	r2, [pc, #516]	; (8005f8c <HAL_I2C_Init+0x21c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00e      	beq.n	8005daa <HAL_I2C_Init+0x3a>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a7f      	ldr	r2, [pc, #508]	; (8005f90 <HAL_I2C_Init+0x220>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d009      	beq.n	8005daa <HAL_I2C_Init+0x3a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a7e      	ldr	r2, [pc, #504]	; (8005f94 <HAL_I2C_Init+0x224>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d004      	beq.n	8005daa <HAL_I2C_Init+0x3a>
 8005da0:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8005da4:	487c      	ldr	r0, [pc, #496]	; (8005f98 <HAL_I2C_Init+0x228>)
 8005da6:	f7fc fd4a 	bl	800283e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d004      	beq.n	8005dbc <HAL_I2C_Init+0x4c>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	4a79      	ldr	r2, [pc, #484]	; (8005f9c <HAL_I2C_Init+0x22c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d904      	bls.n	8005dc6 <HAL_I2C_Init+0x56>
 8005dbc:	f240 11bf 	movw	r1, #447	; 0x1bf
 8005dc0:	4875      	ldr	r0, [pc, #468]	; (8005f98 <HAL_I2C_Init+0x228>)
 8005dc2:	f7fc fd3c 	bl	800283e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <HAL_I2C_Init+0x72>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dd6:	d004      	beq.n	8005de2 <HAL_I2C_Init+0x72>
 8005dd8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005ddc:	486e      	ldr	r0, [pc, #440]	; (8005f98 <HAL_I2C_Init+0x228>)
 8005dde:	f7fc fd2e 	bl	800283e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005dea:	f023 0303 	bic.w	r3, r3, #3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d004      	beq.n	8005dfc <HAL_I2C_Init+0x8c>
 8005df2:	f240 11c1 	movw	r1, #449	; 0x1c1
 8005df6:	4868      	ldr	r0, [pc, #416]	; (8005f98 <HAL_I2C_Init+0x228>)
 8005df8:	f7fc fd21 	bl	800283e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e04:	d009      	beq.n	8005e1a <HAL_I2C_Init+0xaa>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e0e:	d004      	beq.n	8005e1a <HAL_I2C_Init+0xaa>
 8005e10:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8005e14:	4860      	ldr	r0, [pc, #384]	; (8005f98 <HAL_I2C_Init+0x228>)
 8005e16:	f7fc fd12 	bl	800283e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d008      	beq.n	8005e34 <HAL_I2C_Init+0xc4>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d004      	beq.n	8005e34 <HAL_I2C_Init+0xc4>
 8005e2a:	f240 11c3 	movw	r1, #451	; 0x1c3
 8005e2e:	485a      	ldr	r0, [pc, #360]	; (8005f98 <HAL_I2C_Init+0x228>)
 8005e30:	f7fc fd05 	bl	800283e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d004      	beq.n	8005e4a <HAL_I2C_Init+0xda>
 8005e40:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8005e44:	4854      	ldr	r0, [pc, #336]	; (8005f98 <HAL_I2C_Init+0x228>)
 8005e46:	f7fc fcfa 	bl	800283e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d008      	beq.n	8005e64 <HAL_I2C_Init+0xf4>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	2b40      	cmp	r3, #64	; 0x40
 8005e58:	d004      	beq.n	8005e64 <HAL_I2C_Init+0xf4>
 8005e5a:	f240 11c5 	movw	r1, #453	; 0x1c5
 8005e5e:	484e      	ldr	r0, [pc, #312]	; (8005f98 <HAL_I2C_Init+0x228>)
 8005e60:	f7fc fced 	bl	800283e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <HAL_I2C_Init+0x10e>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	2b80      	cmp	r3, #128	; 0x80
 8005e72:	d004      	beq.n	8005e7e <HAL_I2C_Init+0x10e>
 8005e74:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8005e78:	4847      	ldr	r0, [pc, #284]	; (8005f98 <HAL_I2C_Init+0x228>)
 8005e7a:	f7fc fce0 	bl	800283e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d12c      	bne.n	8005ee4 <HAL_I2C_Init+0x174>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a42      	ldr	r2, [pc, #264]	; (8005fa0 <HAL_I2C_Init+0x230>)
 8005e96:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a42      	ldr	r2, [pc, #264]	; (8005fa4 <HAL_I2C_Init+0x234>)
 8005e9c:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a41      	ldr	r2, [pc, #260]	; (8005fa8 <HAL_I2C_Init+0x238>)
 8005ea2:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a41      	ldr	r2, [pc, #260]	; (8005fac <HAL_I2C_Init+0x23c>)
 8005ea8:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a40      	ldr	r2, [pc, #256]	; (8005fb0 <HAL_I2C_Init+0x240>)
 8005eae:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a40      	ldr	r2, [pc, #256]	; (8005fb4 <HAL_I2C_Init+0x244>)
 8005eb4:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a3f      	ldr	r2, [pc, #252]	; (8005fb8 <HAL_I2C_Init+0x248>)
 8005eba:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a3f      	ldr	r2, [pc, #252]	; (8005fbc <HAL_I2C_Init+0x24c>)
 8005ec0:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a3e      	ldr	r2, [pc, #248]	; (8005fc0 <HAL_I2C_Init+0x250>)
 8005ec6:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a3e      	ldr	r2, [pc, #248]	; (8005fc4 <HAL_I2C_Init+0x254>)
 8005ecc:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d102      	bne.n	8005edc <HAL_I2C_Init+0x16c>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a3b      	ldr	r2, [pc, #236]	; (8005fc8 <HAL_I2C_Init+0x258>)
 8005eda:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2224      	movs	r2, #36	; 0x24
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0201 	bic.w	r2, r2, #1
 8005efa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f1c:	f002 fc0a 	bl	8008734 <HAL_RCC_GetPCLK1Freq>
 8005f20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	4a29      	ldr	r2, [pc, #164]	; (8005fcc <HAL_I2C_Init+0x25c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d807      	bhi.n	8005f3c <HAL_I2C_Init+0x1cc>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4a28      	ldr	r2, [pc, #160]	; (8005fd0 <HAL_I2C_Init+0x260>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	bf94      	ite	ls
 8005f34:	2301      	movls	r3, #1
 8005f36:	2300      	movhi	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	e006      	b.n	8005f4a <HAL_I2C_Init+0x1da>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4a25      	ldr	r2, [pc, #148]	; (8005fd4 <HAL_I2C_Init+0x264>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	bf94      	ite	ls
 8005f44:	2301      	movls	r3, #1
 8005f46:	2300      	movhi	r3, #0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <HAL_I2C_Init+0x1e2>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e10f      	b.n	8006172 <HAL_I2C_Init+0x402>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4a20      	ldr	r2, [pc, #128]	; (8005fd8 <HAL_I2C_Init+0x268>)
 8005f56:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5a:	0c9b      	lsrs	r3, r3, #18
 8005f5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	4a12      	ldr	r2, [pc, #72]	; (8005fcc <HAL_I2C_Init+0x25c>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d82a      	bhi.n	8005fdc <HAL_I2C_Init+0x26c>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	e031      	b.n	8005ff0 <HAL_I2C_Init+0x280>
 8005f8c:	40005400 	.word	0x40005400
 8005f90:	40005800 	.word	0x40005800
 8005f94:	40005c00 	.word	0x40005c00
 8005f98:	08010b7c 	.word	0x08010b7c
 8005f9c:	00061a80 	.word	0x00061a80
 8005fa0:	080065b5 	.word	0x080065b5
 8005fa4:	080065c9 	.word	0x080065c9
 8005fa8:	080065dd 	.word	0x080065dd
 8005fac:	080065f1 	.word	0x080065f1
 8005fb0:	08006621 	.word	0x08006621
 8005fb4:	08006635 	.word	0x08006635
 8005fb8:	08006649 	.word	0x08006649
 8005fbc:	0800665d 	.word	0x0800665d
 8005fc0:	08006671 	.word	0x08006671
 8005fc4:	08006605 	.word	0x08006605
 8005fc8:	080025a5 	.word	0x080025a5
 8005fcc:	000186a0 	.word	0x000186a0
 8005fd0:	001e847f 	.word	0x001e847f
 8005fd4:	003d08ff 	.word	0x003d08ff
 8005fd8:	431bde83 	.word	0x431bde83
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005fe2:	fb02 f303 	mul.w	r3, r2, r3
 8005fe6:	4a65      	ldr	r2, [pc, #404]	; (800617c <HAL_I2C_Init+0x40c>)
 8005fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fec:	099b      	lsrs	r3, r3, #6
 8005fee:	3301      	adds	r3, #1
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6812      	ldr	r2, [r2, #0]
 8005ff4:	430b      	orrs	r3, r1
 8005ff6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006002:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	495d      	ldr	r1, [pc, #372]	; (8006180 <HAL_I2C_Init+0x410>)
 800600c:	428b      	cmp	r3, r1
 800600e:	d819      	bhi.n	8006044 <HAL_I2C_Init+0x2d4>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	1e59      	subs	r1, r3, #1
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	fbb1 f3f3 	udiv	r3, r1, r3
 800601e:	1c59      	adds	r1, r3, #1
 8006020:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006024:	400b      	ands	r3, r1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <HAL_I2C_Init+0x2d0>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	1e59      	subs	r1, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	fbb1 f3f3 	udiv	r3, r1, r3
 8006038:	3301      	adds	r3, #1
 800603a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800603e:	e051      	b.n	80060e4 <HAL_I2C_Init+0x374>
 8006040:	2304      	movs	r3, #4
 8006042:	e04f      	b.n	80060e4 <HAL_I2C_Init+0x374>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d111      	bne.n	8006070 <HAL_I2C_Init+0x300>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	1e58      	subs	r0, r3, #1
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6859      	ldr	r1, [r3, #4]
 8006054:	460b      	mov	r3, r1
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	440b      	add	r3, r1
 800605a:	fbb0 f3f3 	udiv	r3, r0, r3
 800605e:	3301      	adds	r3, #1
 8006060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006064:	2b00      	cmp	r3, #0
 8006066:	bf0c      	ite	eq
 8006068:	2301      	moveq	r3, #1
 800606a:	2300      	movne	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	e012      	b.n	8006096 <HAL_I2C_Init+0x326>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	1e58      	subs	r0, r3, #1
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6859      	ldr	r1, [r3, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	0099      	lsls	r1, r3, #2
 8006080:	440b      	add	r3, r1
 8006082:	fbb0 f3f3 	udiv	r3, r0, r3
 8006086:	3301      	adds	r3, #1
 8006088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800608c:	2b00      	cmp	r3, #0
 800608e:	bf0c      	ite	eq
 8006090:	2301      	moveq	r3, #1
 8006092:	2300      	movne	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <HAL_I2C_Init+0x32e>
 800609a:	2301      	movs	r3, #1
 800609c:	e022      	b.n	80060e4 <HAL_I2C_Init+0x374>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10e      	bne.n	80060c4 <HAL_I2C_Init+0x354>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	1e58      	subs	r0, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6859      	ldr	r1, [r3, #4]
 80060ae:	460b      	mov	r3, r1
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	440b      	add	r3, r1
 80060b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80060b8:	3301      	adds	r3, #1
 80060ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c2:	e00f      	b.n	80060e4 <HAL_I2C_Init+0x374>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	1e58      	subs	r0, r3, #1
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6859      	ldr	r1, [r3, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	440b      	add	r3, r1
 80060d2:	0099      	lsls	r1, r3, #2
 80060d4:	440b      	add	r3, r1
 80060d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80060da:	3301      	adds	r3, #1
 80060dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	6809      	ldr	r1, [r1, #0]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	69da      	ldr	r2, [r3, #28]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006112:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6911      	ldr	r1, [r2, #16]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	68d2      	ldr	r2, [r2, #12]
 800611e:	4311      	orrs	r1, r2
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	430b      	orrs	r3, r1
 8006126:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	695a      	ldr	r2, [r3, #20]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	431a      	orrs	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	10624dd3 	.word	0x10624dd3
 8006180:	000186a0 	.word	0x000186a0

08006184 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	2b10      	cmp	r3, #16
 80061b2:	d003      	beq.n	80061bc <HAL_I2C_EV_IRQHandler+0x38>
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	2b40      	cmp	r3, #64	; 0x40
 80061b8:	f040 80c1 	bne.w	800633e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10d      	bne.n	80061f2 <HAL_I2C_EV_IRQHandler+0x6e>
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80061dc:	d003      	beq.n	80061e6 <HAL_I2C_EV_IRQHandler+0x62>
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80061e4:	d101      	bne.n	80061ea <HAL_I2C_EV_IRQHandler+0x66>
 80061e6:	2301      	movs	r3, #1
 80061e8:	e000      	b.n	80061ec <HAL_I2C_EV_IRQHandler+0x68>
 80061ea:	2300      	movs	r3, #0
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	f000 8132 	beq.w	8006456 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00c      	beq.n	8006216 <HAL_I2C_EV_IRQHandler+0x92>
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	0a5b      	lsrs	r3, r3, #9
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d006      	beq.n	8006216 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f001 fc95 	bl	8007b38 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fd8f 	bl	8006d32 <I2C_Master_SB>
 8006214:	e092      	b.n	800633c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	08db      	lsrs	r3, r3, #3
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <HAL_I2C_EV_IRQHandler+0xb2>
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	0a5b      	lsrs	r3, r3, #9
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fe05 	bl	8006e3e <I2C_Master_ADD10>
 8006234:	e082      	b.n	800633c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	085b      	lsrs	r3, r3, #1
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d009      	beq.n	8006256 <HAL_I2C_EV_IRQHandler+0xd2>
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	0a5b      	lsrs	r3, r3, #9
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fe1f 	bl	8006e92 <I2C_Master_ADDR>
 8006254:	e072      	b.n	800633c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	089b      	lsrs	r3, r3, #2
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d03b      	beq.n	80062da <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800626c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006270:	f000 80f3 	beq.w	800645a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	09db      	lsrs	r3, r3, #7
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00f      	beq.n	80062a0 <HAL_I2C_EV_IRQHandler+0x11c>
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	0a9b      	lsrs	r3, r3, #10
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d009      	beq.n	80062a0 <HAL_I2C_EV_IRQHandler+0x11c>
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	089b      	lsrs	r3, r3, #2
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d103      	bne.n	80062a0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f9f3 	bl	8006684 <I2C_MasterTransmit_TXE>
 800629e:	e04d      	b.n	800633c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	089b      	lsrs	r3, r3, #2
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 80d6 	beq.w	800645a <HAL_I2C_EV_IRQHandler+0x2d6>
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	0a5b      	lsrs	r3, r3, #9
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 80cf 	beq.w	800645a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80062bc:	7bbb      	ldrb	r3, [r7, #14]
 80062be:	2b21      	cmp	r3, #33	; 0x21
 80062c0:	d103      	bne.n	80062ca <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fa7d 	bl	80067c2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062c8:	e0c7      	b.n	800645a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	2b40      	cmp	r3, #64	; 0x40
 80062ce:	f040 80c4 	bne.w	800645a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 faee 	bl	80068b4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062d8:	e0bf      	b.n	800645a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062e8:	f000 80b7 	beq.w	800645a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	099b      	lsrs	r3, r3, #6
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00f      	beq.n	8006318 <HAL_I2C_EV_IRQHandler+0x194>
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	0a9b      	lsrs	r3, r3, #10
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d009      	beq.n	8006318 <HAL_I2C_EV_IRQHandler+0x194>
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	089b      	lsrs	r3, r3, #2
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b00      	cmp	r3, #0
 800630e:	d103      	bne.n	8006318 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fb64 	bl	80069de <I2C_MasterReceive_RXNE>
 8006316:	e011      	b.n	800633c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	089b      	lsrs	r3, r3, #2
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 809a 	beq.w	800645a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	0a5b      	lsrs	r3, r3, #9
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 8093 	beq.w	800645a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fc10 	bl	8006b5a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800633a:	e08e      	b.n	800645a <HAL_I2C_EV_IRQHandler+0x2d6>
 800633c:	e08d      	b.n	800645a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d004      	beq.n	8006350 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	61fb      	str	r3, [r7, #28]
 800634e:	e007      	b.n	8006360 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	085b      	lsrs	r3, r3, #1
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b00      	cmp	r3, #0
 800636a:	d012      	beq.n	8006392 <HAL_I2C_EV_IRQHandler+0x20e>
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	0a5b      	lsrs	r3, r3, #9
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00c      	beq.n	8006392 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006388:	69b9      	ldr	r1, [r7, #24]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 ffd2 	bl	8007334 <I2C_Slave_ADDR>
 8006390:	e066      	b.n	8006460 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	091b      	lsrs	r3, r3, #4
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d009      	beq.n	80063b2 <HAL_I2C_EV_IRQHandler+0x22e>
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	0a5b      	lsrs	r3, r3, #9
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 f80c 	bl	80073c8 <I2C_Slave_STOPF>
 80063b0:	e056      	b.n	8006460 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80063b2:	7bbb      	ldrb	r3, [r7, #14]
 80063b4:	2b21      	cmp	r3, #33	; 0x21
 80063b6:	d002      	beq.n	80063be <HAL_I2C_EV_IRQHandler+0x23a>
 80063b8:	7bbb      	ldrb	r3, [r7, #14]
 80063ba:	2b29      	cmp	r3, #41	; 0x29
 80063bc:	d125      	bne.n	800640a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	09db      	lsrs	r3, r3, #7
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00f      	beq.n	80063ea <HAL_I2C_EV_IRQHandler+0x266>
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	0a9b      	lsrs	r3, r3, #10
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d009      	beq.n	80063ea <HAL_I2C_EV_IRQHandler+0x266>
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	089b      	lsrs	r3, r3, #2
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d103      	bne.n	80063ea <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fee6 	bl	80071b4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80063e8:	e039      	b.n	800645e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	089b      	lsrs	r3, r3, #2
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d033      	beq.n	800645e <HAL_I2C_EV_IRQHandler+0x2da>
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	0a5b      	lsrs	r3, r3, #9
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d02d      	beq.n	800645e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 ff14 	bl	8007230 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006408:	e029      	b.n	800645e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	099b      	lsrs	r3, r3, #6
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00f      	beq.n	8006436 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	0a9b      	lsrs	r3, r3, #10
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d009      	beq.n	8006436 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	089b      	lsrs	r3, r3, #2
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d103      	bne.n	8006436 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 ff1f 	bl	8007272 <I2C_SlaveReceive_RXNE>
 8006434:	e014      	b.n	8006460 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	089b      	lsrs	r3, r3, #2
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00e      	beq.n	8006460 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	0a5b      	lsrs	r3, r3, #9
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d008      	beq.n	8006460 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 ff4e 	bl	80072f0 <I2C_SlaveReceive_BTF>
 8006454:	e004      	b.n	8006460 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006456:	bf00      	nop
 8006458:	e002      	b.n	8006460 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800645a:	bf00      	nop
 800645c:	e000      	b.n	8006460 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800645e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006460:	3720      	adds	r7, #32
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b08a      	sub	sp, #40	; 0x28
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800647e:	2300      	movs	r3, #0
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006488:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	0a1b      	lsrs	r3, r3, #8
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00e      	beq.n	80064b4 <HAL_I2C_ER_IRQHandler+0x4e>
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	0a1b      	lsrs	r3, r3, #8
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d008      	beq.n	80064b4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	f043 0301 	orr.w	r3, r3, #1
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80064b2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	0a5b      	lsrs	r3, r3, #9
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00e      	beq.n	80064de <HAL_I2C_ER_IRQHandler+0x78>
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	0a1b      	lsrs	r3, r3, #8
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d008      	beq.n	80064de <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	f043 0302 	orr.w	r3, r3, #2
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80064dc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	0a9b      	lsrs	r3, r3, #10
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d03f      	beq.n	800656a <HAL_I2C_ER_IRQHandler+0x104>
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	0a1b      	lsrs	r3, r3, #8
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d039      	beq.n	800656a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80064f6:	7efb      	ldrb	r3, [r7, #27]
 80064f8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fe:	b29b      	uxth	r3, r3
 8006500:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006508:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006510:	7ebb      	ldrb	r3, [r7, #26]
 8006512:	2b20      	cmp	r3, #32
 8006514:	d112      	bne.n	800653c <HAL_I2C_ER_IRQHandler+0xd6>
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10f      	bne.n	800653c <HAL_I2C_ER_IRQHandler+0xd6>
 800651c:	7cfb      	ldrb	r3, [r7, #19]
 800651e:	2b21      	cmp	r3, #33	; 0x21
 8006520:	d008      	beq.n	8006534 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006522:	7cfb      	ldrb	r3, [r7, #19]
 8006524:	2b29      	cmp	r3, #41	; 0x29
 8006526:	d005      	beq.n	8006534 <HAL_I2C_ER_IRQHandler+0xce>
 8006528:	7cfb      	ldrb	r3, [r7, #19]
 800652a:	2b28      	cmp	r3, #40	; 0x28
 800652c:	d106      	bne.n	800653c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b21      	cmp	r3, #33	; 0x21
 8006532:	d103      	bne.n	800653c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f001 f87b 	bl	8007630 <I2C_Slave_AF>
 800653a:	e016      	b.n	800656a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006544:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	f043 0304 	orr.w	r3, r3, #4
 800654c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800654e:	7efb      	ldrb	r3, [r7, #27]
 8006550:	2b10      	cmp	r3, #16
 8006552:	d002      	beq.n	800655a <HAL_I2C_ER_IRQHandler+0xf4>
 8006554:	7efb      	ldrb	r3, [r7, #27]
 8006556:	2b40      	cmp	r3, #64	; 0x40
 8006558:	d107      	bne.n	800656a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006568:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	0adb      	lsrs	r3, r3, #11
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00e      	beq.n	8006594 <HAL_I2C_ER_IRQHandler+0x12e>
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	0a1b      	lsrs	r3, r3, #8
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d008      	beq.n	8006594 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	f043 0308 	orr.w	r3, r3, #8
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006592:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	2b00      	cmp	r3, #0
 8006598:	d008      	beq.n	80065ac <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 f8b4 	bl	8007714 <I2C_ITError>
  }
}
 80065ac:	bf00      	nop
 80065ae:	3728      	adds	r7, #40	; 0x28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	70fb      	strb	r3, [r7, #3]
 8006610:	4613      	mov	r3, r2
 8006612:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006692:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800669a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d153      	bne.n	8006752 <I2C_MasterTransmit_TXE+0xce>
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	2b21      	cmp	r3, #33	; 0x21
 80066ae:	d150      	bne.n	8006752 <I2C_MasterTransmit_TXE+0xce>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2b08      	cmp	r3, #8
 80066b4:	d01e      	beq.n	80066f4 <I2C_MasterTransmit_TXE+0x70>
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	d01b      	beq.n	80066f4 <I2C_MasterTransmit_TXE+0x70>
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066c2:	d017      	beq.n	80066f4 <I2C_MasterTransmit_TXE+0x70>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066d2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2211      	movs	r2, #17
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80066f2:	e062      	b.n	80067ba <I2C_MasterTransmit_TXE+0x136>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006702:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006712:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b40      	cmp	r3, #64	; 0x40
 800672c:	d108      	bne.n	8006740 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800673e:	e03c      	b.n	80067ba <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MemTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	4798      	blx	r3
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006750:	e033      	b.n	80067ba <I2C_MasterTransmit_TXE+0x136>
        HAL_I2C_MasterTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006752:	7bfb      	ldrb	r3, [r7, #15]
 8006754:	2b21      	cmp	r3, #33	; 0x21
 8006756:	d005      	beq.n	8006764 <I2C_MasterTransmit_TXE+0xe0>
 8006758:	7bbb      	ldrb	r3, [r7, #14]
 800675a:	2b40      	cmp	r3, #64	; 0x40
 800675c:	d12d      	bne.n	80067ba <I2C_MasterTransmit_TXE+0x136>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	2b22      	cmp	r3, #34	; 0x22
 8006762:	d12a      	bne.n	80067ba <I2C_MasterTransmit_TXE+0x136>
  {
    if (hi2c->XferCount == 0U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d108      	bne.n	8006780 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800677c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800677e:	e01c      	b.n	80067ba <I2C_MasterTransmit_TXE+0x136>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b40      	cmp	r3, #64	; 0x40
 800678a:	d103      	bne.n	8006794 <I2C_MasterTransmit_TXE+0x110>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f891 	bl	80068b4 <I2C_MemoryTransmit_TXE_BTF>
}
 8006792:	e012      	b.n	80067ba <I2C_MasterTransmit_TXE+0x136>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	781a      	ldrb	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80067b8:	e7ff      	b.n	80067ba <I2C_MasterTransmit_TXE+0x136>
 80067ba:	bf00      	nop
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ce:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b21      	cmp	r3, #33	; 0x21
 80067da:	d167      	bne.n	80068ac <I2C_MasterTransmit_BTF+0xea>
  {
    if (hi2c->XferCount != 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d012      	beq.n	800680c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	781a      	ldrb	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006800:	b29b      	uxth	r3, r3
 8006802:	3b01      	subs	r3, #1
 8006804:	b29a      	uxth	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800680a:	e04f      	b.n	80068ac <I2C_MasterTransmit_BTF+0xea>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b08      	cmp	r3, #8
 8006810:	d01e      	beq.n	8006850 <I2C_MasterTransmit_BTF+0x8e>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b20      	cmp	r3, #32
 8006816:	d01b      	beq.n	8006850 <I2C_MasterTransmit_BTF+0x8e>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800681e:	d017      	beq.n	8006850 <I2C_MasterTransmit_BTF+0x8e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800682e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2211      	movs	r2, #17
 8006834:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->MasterTxCpltCallback(hi2c);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	4798      	blx	r3
}
 800684e:	e02d      	b.n	80068ac <I2C_MasterTransmit_BTF+0xea>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800685e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800686e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	d108      	bne.n	800689c <I2C_MasterTransmit_BTF+0xda>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MemTxCpltCallback(hi2c);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	4798      	blx	r3
}
 800689a:	e007      	b.n	80068ac <I2C_MasterTransmit_BTF+0xea>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->MasterTxCpltCallback(hi2c);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	4798      	blx	r3
}
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d11d      	bne.n	8006908 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d10b      	bne.n	80068ec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e4:	1c9a      	adds	r2, r3, #2
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80068ea:	e074      	b.n	80069d6 <I2C_MemoryTransmit_TXE_BTF+0x122>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	121b      	asrs	r3, r3, #8
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006906:	e066      	b.n	80069d6 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 1U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800690c:	2b01      	cmp	r3, #1
 800690e:	d10b      	bne.n	8006928 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006914:	b2da      	uxtb	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006926:	e056      	b.n	80069d6 <I2C_MemoryTransmit_TXE_BTF+0x122>
  else if (hi2c->EventCount == 2U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692c:	2b02      	cmp	r3, #2
 800692e:	d152      	bne.n	80069d6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	2b22      	cmp	r3, #34	; 0x22
 8006934:	d10d      	bne.n	8006952 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006944:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006950:	e041      	b.n	80069d6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006956:	b29b      	uxth	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	d015      	beq.n	8006988 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	2b21      	cmp	r3, #33	; 0x21
 8006960:	d112      	bne.n	8006988 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	781a      	ldrb	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800697c:	b29b      	uxth	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006986:	e026      	b.n	80069d6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d121      	bne.n	80069d6 <I2C_MemoryTransmit_TXE_BTF+0x122>
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	2b21      	cmp	r3, #33	; 0x21
 8006996:	d11e      	bne.n	80069d6 <I2C_MemoryTransmit_TXE_BTF+0x122>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069a6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->MemTxCpltCallback(hi2c);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	4798      	blx	r3
}
 80069d6:	bf00      	nop
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b22      	cmp	r3, #34	; 0x22
 80069f0:	f040 80af 	bne.w	8006b52 <I2C_MasterReceive_RXNE+0x174>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d921      	bls.n	8006a46 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	691a      	ldr	r2, [r3, #16]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	b2d2      	uxtb	r2, r2
 8006a0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a14:	1c5a      	adds	r2, r3, #1
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	3b01      	subs	r3, #1
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2b03      	cmp	r3, #3
 8006a30:	f040 808f 	bne.w	8006b52 <I2C_MasterReceive_RXNE+0x174>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a42:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006a44:	e085      	b.n	8006b52 <I2C_MasterReceive_RXNE+0x174>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d078      	beq.n	8006b40 <I2C_MasterReceive_RXNE+0x162>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d002      	beq.n	8006a5a <I2C_MasterReceive_RXNE+0x7c>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d172      	bne.n	8006b40 <I2C_MasterReceive_RXNE+0x162>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f001 f83a 	bl	8007ad4 <I2C_WaitOnSTOPRequestThroughIT>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d144      	bne.n	8006af0 <I2C_MasterReceive_RXNE+0x112>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a74:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a84:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	691a      	ldr	r2, [r3, #16]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b40      	cmp	r3, #64	; 0x40
 8006abe:	d10b      	bne.n	8006ad8 <I2C_MasterReceive_RXNE+0xfa>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MemRxCpltCallback(hi2c);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006ad6:	e03c      	b.n	8006b52 <I2C_MasterReceive_RXNE+0x174>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2212      	movs	r2, #18
 8006ae4:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->MasterRxCpltCallback(hi2c);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006aee:	e030      	b.n	8006b52 <I2C_MasterReceive_RXNE+0x174>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006afe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691a      	ldr	r2, [r3, #16]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCallback(hi2c);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	4798      	blx	r3
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006b3e:	e008      	b.n	8006b52 <I2C_MasterReceive_RXNE+0x174>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b4e:	605a      	str	r2, [r3, #4]
}
 8006b50:	e7ff      	b.n	8006b52 <I2C_MasterReceive_RXNE+0x174>
 8006b52:	bf00      	nop
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b66:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d11b      	bne.n	8006baa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b80:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	691a      	ldr	r2, [r3, #16]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006ba8:	e0bf      	b.n	8006d2a <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 3U)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	d129      	bne.n	8006c08 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bc2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d00a      	beq.n	8006be0 <I2C_MasterReceive_BTF+0x86>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d007      	beq.n	8006be0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bde:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	691a      	ldr	r2, [r3, #16]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006c06:	e090      	b.n	8006d2a <I2C_MasterReceive_BTF+0x1d0>
  else if (hi2c->XferCount == 2U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d178      	bne.n	8006d04 <I2C_MasterReceive_BTF+0x1aa>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d002      	beq.n	8006c1e <I2C_MasterReceive_BTF+0xc4>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b10      	cmp	r3, #16
 8006c1c:	d108      	bne.n	8006c30 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	e019      	b.n	8006c64 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	d002      	beq.n	8006c3c <I2C_MasterReceive_BTF+0xe2>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d108      	bne.n	8006c4e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	e00a      	b.n	8006c64 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b10      	cmp	r3, #16
 8006c52:	d007      	beq.n	8006c64 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c62:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	691a      	ldr	r2, [r3, #16]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	691a      	ldr	r2, [r3, #16]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006cbe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b40      	cmp	r3, #64	; 0x40
 8006cd2:	d10b      	bne.n	8006cec <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MemRxCpltCallback(hi2c);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	4798      	blx	r3
}
 8006cea:	e01e      	b.n	8006d2a <I2C_MasterReceive_BTF+0x1d0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2212      	movs	r2, #18
 8006cf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	4798      	blx	r3
}
 8006d02:	e012      	b.n	8006d2a <I2C_MasterReceive_BTF+0x1d0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	691a      	ldr	r2, [r3, #16]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	b2d2      	uxtb	r2, r2
 8006d10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006d2a:	bf00      	nop
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b40      	cmp	r3, #64	; 0x40
 8006d44:	d117      	bne.n	8006d76 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d109      	bne.n	8006d62 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d5e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006d60:	e067      	b.n	8006e32 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	f043 0301 	orr.w	r3, r3, #1
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	611a      	str	r2, [r3, #16]
}
 8006d74:	e05d      	b.n	8006e32 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d7e:	d133      	bne.n	8006de8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b21      	cmp	r3, #33	; 0x21
 8006d8a:	d109      	bne.n	8006da0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	461a      	mov	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d9c:	611a      	str	r2, [r3, #16]
 8006d9e:	e008      	b.n	8006db2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	f043 0301 	orr.w	r3, r3, #1
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d004      	beq.n	8006dc4 <I2C_Master_SB+0x92>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d108      	bne.n	8006dd6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d032      	beq.n	8006e32 <I2C_Master_SB+0x100>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d02d      	beq.n	8006e32 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006de4:	605a      	str	r2, [r3, #4]
}
 8006de6:	e024      	b.n	8006e32 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10e      	bne.n	8006e0e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	11db      	asrs	r3, r3, #7
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	f003 0306 	and.w	r3, r3, #6
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	f063 030f 	orn	r3, r3, #15
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	611a      	str	r2, [r3, #16]
}
 8006e0c:	e011      	b.n	8006e32 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d10d      	bne.n	8006e32 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	11db      	asrs	r3, r3, #7
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	f003 0306 	and.w	r3, r3, #6
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	f063 030e 	orn	r3, r3, #14
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	611a      	str	r2, [r3, #16]
}
 8006e32:	bf00      	nop
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d004      	beq.n	8006e64 <I2C_Master_ADD10+0x26>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d108      	bne.n	8006e76 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00c      	beq.n	8006e86 <I2C_Master_ADD10+0x48>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d007      	beq.n	8006e86 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e84:	605a      	str	r2, [r3, #4]
  }
}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b091      	sub	sp, #68	; 0x44
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ea0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b22      	cmp	r3, #34	; 0x22
 8006eba:	f040 8169 	bne.w	8007190 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10f      	bne.n	8006ee6 <I2C_Master_ADDR+0x54>
 8006ec6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006eca:	2b40      	cmp	r3, #64	; 0x40
 8006ecc:	d10b      	bne.n	8006ee6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ece:	2300      	movs	r3, #0
 8006ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	e160      	b.n	80071a8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d11d      	bne.n	8006f2a <I2C_Master_ADDR+0x98>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ef6:	d118      	bne.n	8006f2a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ef8:	2300      	movs	r3, #0
 8006efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f1c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f22:	1c5a      	adds	r2, r3, #1
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	651a      	str	r2, [r3, #80]	; 0x50
 8006f28:	e13e      	b.n	80071a8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d113      	bne.n	8006f5c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f34:	2300      	movs	r3, #0
 8006f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	e115      	b.n	8007188 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	f040 808a 	bne.w	800707c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f6e:	d137      	bne.n	8006fe0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f7e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f8e:	d113      	bne.n	8006fb8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f9e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	e0e7      	b.n	8007188 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fb8:	2300      	movs	r3, #0
 8006fba:	623b      	str	r3, [r7, #32]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	623b      	str	r3, [r7, #32]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	623b      	str	r3, [r7, #32]
 8006fcc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e0d3      	b.n	8007188 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	2b08      	cmp	r3, #8
 8006fe4:	d02e      	beq.n	8007044 <I2C_Master_ADDR+0x1b2>
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe8:	2b20      	cmp	r3, #32
 8006fea:	d02b      	beq.n	8007044 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fee:	2b12      	cmp	r3, #18
 8006ff0:	d102      	bne.n	8006ff8 <I2C_Master_ADDR+0x166>
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d125      	bne.n	8007044 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffa:	2b04      	cmp	r3, #4
 8006ffc:	d00e      	beq.n	800701c <I2C_Master_ADDR+0x18a>
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	2b02      	cmp	r3, #2
 8007002:	d00b      	beq.n	800701c <I2C_Master_ADDR+0x18a>
 8007004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007006:	2b10      	cmp	r3, #16
 8007008:	d008      	beq.n	800701c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	e007      	b.n	800702c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800702a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800702c:	2300      	movs	r3, #0
 800702e:	61fb      	str	r3, [r7, #28]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	61fb      	str	r3, [r7, #28]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	61fb      	str	r3, [r7, #28]
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	e0a1      	b.n	8007188 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007052:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007054:	2300      	movs	r3, #0
 8007056:	61bb      	str	r3, [r7, #24]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	61bb      	str	r3, [r7, #24]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	61bb      	str	r3, [r7, #24]
 8007068:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	e085      	b.n	8007188 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d14d      	bne.n	8007122 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007088:	2b04      	cmp	r3, #4
 800708a:	d016      	beq.n	80070ba <I2C_Master_ADDR+0x228>
 800708c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708e:	2b02      	cmp	r3, #2
 8007090:	d013      	beq.n	80070ba <I2C_Master_ADDR+0x228>
 8007092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007094:	2b10      	cmp	r3, #16
 8007096:	d010      	beq.n	80070ba <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070a6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	e007      	b.n	80070ca <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070c8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070d8:	d117      	bne.n	800710a <I2C_Master_ADDR+0x278>
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070e0:	d00b      	beq.n	80070fa <I2C_Master_ADDR+0x268>
 80070e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d008      	beq.n	80070fa <I2C_Master_ADDR+0x268>
 80070e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ea:	2b08      	cmp	r3, #8
 80070ec:	d005      	beq.n	80070fa <I2C_Master_ADDR+0x268>
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	d002      	beq.n	80070fa <I2C_Master_ADDR+0x268>
 80070f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f6:	2b20      	cmp	r3, #32
 80070f8:	d107      	bne.n	800710a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007108:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	617b      	str	r3, [r7, #20]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	e032      	b.n	8007188 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007130:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800713c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007140:	d117      	bne.n	8007172 <I2C_Master_ADDR+0x2e0>
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007148:	d00b      	beq.n	8007162 <I2C_Master_ADDR+0x2d0>
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	2b01      	cmp	r3, #1
 800714e:	d008      	beq.n	8007162 <I2C_Master_ADDR+0x2d0>
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	2b08      	cmp	r3, #8
 8007154:	d005      	beq.n	8007162 <I2C_Master_ADDR+0x2d0>
 8007156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007158:	2b10      	cmp	r3, #16
 800715a:	d002      	beq.n	8007162 <I2C_Master_ADDR+0x2d0>
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	2b20      	cmp	r3, #32
 8007160:	d107      	bne.n	8007172 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007170:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007172:	2300      	movs	r3, #0
 8007174:	613b      	str	r3, [r7, #16]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	613b      	str	r3, [r7, #16]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	613b      	str	r3, [r7, #16]
 8007186:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800718e:	e00b      	b.n	80071a8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	68fb      	ldr	r3, [r7, #12]
}
 80071a6:	e7ff      	b.n	80071a8 <I2C_Master_ADDR+0x316>
 80071a8:	bf00      	nop
 80071aa:	3744      	adds	r7, #68	; 0x44
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d02c      	beq.n	8007228 <I2C_SlaveTransmit_TXE+0x74>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d2:	781a      	ldrb	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	1c5a      	adds	r2, r3, #1
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	3b01      	subs	r3, #1
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d115      	bne.n	8007228 <I2C_SlaveTransmit_TXE+0x74>
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	2b29      	cmp	r3, #41	; 0x29
 8007200:	d112      	bne.n	8007228 <I2C_SlaveTransmit_TXE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007210:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2221      	movs	r2, #33	; 0x21
 8007216:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2228      	movs	r2, #40	; 0x28
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	4798      	blx	r3
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007228:	bf00      	nop
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800723c:	b29b      	uxth	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d011      	beq.n	8007266 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	781a      	ldrb	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800725c:	b29b      	uxth	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	b29a      	uxth	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007280:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d02d      	beq.n	80072e8 <I2C_SlaveReceive_RXNE+0x76>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691a      	ldr	r2, [r3, #16]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	b2d2      	uxtb	r2, r2
 8007298:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	3b01      	subs	r3, #1
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d115      	bne.n	80072e8 <I2C_SlaveReceive_RXNE+0x76>
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
 80072be:	2b2a      	cmp	r3, #42	; 0x2a
 80072c0:	d112      	bne.n	80072e8 <I2C_SlaveReceive_RXNE+0x76>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072d0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2222      	movs	r2, #34	; 0x22
 80072d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2228      	movs	r2, #40	; 0x28
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	4798      	blx	r3
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80072e8:	bf00      	nop
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d012      	beq.n	8007328 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	b2d2      	uxtb	r2, r2
 800730e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731e:	b29b      	uxth	r3, r3
 8007320:	3b01      	subs	r3, #1
 8007322:	b29a      	uxth	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007348:	b2db      	uxtb	r3, r3
 800734a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800734e:	2b28      	cmp	r3, #40	; 0x28
 8007350:	d127      	bne.n	80073a2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007360:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	089b      	lsrs	r3, r3, #2
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800736e:	2301      	movs	r3, #1
 8007370:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	09db      	lsrs	r3, r3, #7
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d103      	bne.n	8007386 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	81bb      	strh	r3, [r7, #12]
 8007384:	e002      	b.n	800738c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007398:	89ba      	ldrh	r2, [r7, #12]
 800739a:	7bf9      	ldrb	r1, [r7, #15]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	4798      	blx	r3
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80073a0:	e00e      	b.n	80073c0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073a2:	2300      	movs	r3, #0
 80073a4:	60bb      	str	r3, [r7, #8]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	60bb      	str	r3, [r7, #8]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	60bb      	str	r3, [r7, #8]
 80073b6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80073c0:	bf00      	nop
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80073e8:	2300      	movs	r3, #0
 80073ea:	60bb      	str	r3, [r7, #8]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	60bb      	str	r3, [r7, #8]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f042 0201 	orr.w	r2, r2, #1
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007414:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007424:	d172      	bne.n	800750c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	2b22      	cmp	r3, #34	; 0x22
 800742a:	d002      	beq.n	8007432 <I2C_Slave_STOPF+0x6a>
 800742c:	7bfb      	ldrb	r3, [r7, #15]
 800742e:	2b2a      	cmp	r3, #42	; 0x2a
 8007430:	d135      	bne.n	800749e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	b29a      	uxth	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d005      	beq.n	8007456 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f043 0204 	orr.w	r2, r3, #4
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007464:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	4618      	mov	r0, r3
 800746c:	f7fd fef0 	bl	8005250 <HAL_DMA_GetState>
 8007470:	4603      	mov	r3, r0
 8007472:	2b01      	cmp	r3, #1
 8007474:	d049      	beq.n	800750a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	4a6b      	ldr	r2, [pc, #428]	; (8007628 <I2C_Slave_STOPF+0x260>)
 800747c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007482:	4618      	mov	r0, r3
 8007484:	f7fd fd38 	bl	8004ef8 <HAL_DMA_Abort_IT>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d03d      	beq.n	800750a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007498:	4610      	mov	r0, r2
 800749a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800749c:	e035      	b.n	800750a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d005      	beq.n	80074c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	f043 0204 	orr.w	r2, r3, #4
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fd feba 	bl	8005250 <HAL_DMA_GetState>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d014      	beq.n	800750c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e6:	4a50      	ldr	r2, [pc, #320]	; (8007628 <I2C_Slave_STOPF+0x260>)
 80074e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fd fd02 	bl	8004ef8 <HAL_DMA_Abort_IT>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d008      	beq.n	800750c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007504:	4610      	mov	r0, r2
 8007506:	4798      	blx	r3
 8007508:	e000      	b.n	800750c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800750a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d03e      	beq.n	8007594 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b04      	cmp	r3, #4
 8007522:	d112      	bne.n	800754a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691a      	ldr	r2, [r3, #16]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	b2d2      	uxtb	r2, r2
 8007530:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	1c5a      	adds	r2, r3, #1
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007540:	b29b      	uxth	r3, r3
 8007542:	3b01      	subs	r3, #1
 8007544:	b29a      	uxth	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007554:	2b40      	cmp	r3, #64	; 0x40
 8007556:	d112      	bne.n	800757e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	691a      	ldr	r2, [r3, #16]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	b2d2      	uxtb	r2, r2
 8007564:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007574:	b29b      	uxth	r3, r3
 8007576:	3b01      	subs	r3, #1
 8007578:	b29a      	uxth	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007582:	b29b      	uxth	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758c:	f043 0204 	orr.w	r2, r3, #4
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f8b9 	bl	8007714 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80075a2:	e03c      	b.n	800761e <I2C_Slave_STOPF+0x256>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
 80075a6:	2b2a      	cmp	r3, #42	; 0x2a
 80075a8:	d10a      	bne.n	80075c0 <I2C_Slave_STOPF+0x1f8>
      hi2c->PreviousState = I2C_STATE_NONE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2228      	movs	r2, #40	; 0x28
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b28      	cmp	r3, #40	; 0x28
 80075ca:	d112      	bne.n	80075f2 <I2C_Slave_STOPF+0x22a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a17      	ldr	r2, [pc, #92]	; (800762c <I2C_Slave_STOPF+0x264>)
 80075d0:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ListenCpltCallback(hi2c);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	4798      	blx	r3
}
 80075f0:	e015      	b.n	800761e <I2C_Slave_STOPF+0x256>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f6:	2b22      	cmp	r3, #34	; 0x22
 80075f8:	d002      	beq.n	8007600 <I2C_Slave_STOPF+0x238>
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	2b22      	cmp	r3, #34	; 0x22
 80075fe:	d10e      	bne.n	800761e <I2C_Slave_STOPF+0x256>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2220      	movs	r2, #32
 800760a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->SlaveRxCpltCallback(hi2c);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	4798      	blx	r3
}
 800761e:	bf00      	nop
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	08007981 	.word	0x08007981
 800762c:	ffff0000 	.word	0xffff0000

08007630 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800763e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2b08      	cmp	r3, #8
 800764a:	d002      	beq.n	8007652 <I2C_Slave_AF+0x22>
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b20      	cmp	r3, #32
 8007650:	d12a      	bne.n	80076a8 <I2C_Slave_AF+0x78>
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	2b28      	cmp	r3, #40	; 0x28
 8007656:	d127      	bne.n	80076a8 <I2C_Slave_AF+0x78>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a2d      	ldr	r2, [pc, #180]	; (8007710 <I2C_Slave_AF+0xe0>)
 800765c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800766c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007676:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007686:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	4798      	blx	r3
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80076a6:	e02f      	b.n	8007708 <I2C_Slave_AF+0xd8>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
 80076aa:	2b21      	cmp	r3, #33	; 0x21
 80076ac:	d127      	bne.n	80076fe <I2C_Slave_AF+0xce>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a17      	ldr	r2, [pc, #92]	; (8007710 <I2C_Slave_AF+0xe0>)
 80076b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2221      	movs	r2, #33	; 0x21
 80076b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2220      	movs	r2, #32
 80076be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80076d8:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076e2:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076f2:	601a      	str	r2, [r3, #0]
    hi2c->SlaveTxCpltCallback(hi2c);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	4798      	blx	r3
}
 80076fc:	e004      	b.n	8007708 <I2C_Slave_AF+0xd8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007706:	615a      	str	r2, [r3, #20]
}
 8007708:	bf00      	nop
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	ffff0000 	.word	0xffff0000

08007714 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007722:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800772a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	2b10      	cmp	r3, #16
 8007730:	d002      	beq.n	8007738 <I2C_ITError+0x24>
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	2b40      	cmp	r3, #64	; 0x40
 8007736:	d10a      	bne.n	800774e <I2C_ITError+0x3a>
 8007738:	7bfb      	ldrb	r3, [r7, #15]
 800773a:	2b22      	cmp	r3, #34	; 0x22
 800773c:	d107      	bne.n	800774e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800774c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007754:	2b28      	cmp	r3, #40	; 0x28
 8007756:	d107      	bne.n	8007768 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2228      	movs	r2, #40	; 0x28
 8007762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007766:	e015      	b.n	8007794 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007776:	d00a      	beq.n	800778e <I2C_ITError+0x7a>
 8007778:	7bfb      	ldrb	r3, [r7, #15]
 800777a:	2b60      	cmp	r3, #96	; 0x60
 800777c:	d007      	beq.n	800778e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2220      	movs	r2, #32
 8007782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800779e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077a2:	d162      	bne.n	800786a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077b2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d020      	beq.n	8007804 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c6:	4a6c      	ldr	r2, [pc, #432]	; (8007978 <I2C_ITError+0x264>)
 80077c8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fd fb92 	bl	8004ef8 <HAL_DMA_Abort_IT>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 808b 	beq.w	80078f2 <I2C_ITError+0x1de>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 0201 	bic.w	r2, r2, #1
 80077ea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2220      	movs	r2, #32
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80077fe:	4610      	mov	r0, r2
 8007800:	4798      	blx	r3
 8007802:	e076      	b.n	80078f2 <I2C_ITError+0x1de>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007808:	4a5b      	ldr	r2, [pc, #364]	; (8007978 <I2C_ITError+0x264>)
 800780a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007810:	4618      	mov	r0, r3
 8007812:	f7fd fb71 	bl	8004ef8 <HAL_DMA_Abort_IT>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d06a      	beq.n	80078f2 <I2C_ITError+0x1de>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007826:	2b40      	cmp	r3, #64	; 0x40
 8007828:	d10b      	bne.n	8007842 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	691a      	ldr	r2, [r3, #16]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	b2d2      	uxtb	r2, r2
 8007836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0201 	bic.w	r2, r2, #1
 8007850:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2220      	movs	r2, #32
 8007856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007864:	4610      	mov	r0, r2
 8007866:	4798      	blx	r3
 8007868:	e043      	b.n	80078f2 <I2C_ITError+0x1de>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b60      	cmp	r3, #96	; 0x60
 8007874:	d126      	bne.n	80078c4 <I2C_ITError+0x1b0>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2220      	movs	r2, #32
 800787a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788e:	2b40      	cmp	r3, #64	; 0x40
 8007890:	d10b      	bne.n	80078aa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	b2d2      	uxtb	r2, r2
 800789e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f022 0201 	bic.w	r2, r2, #1
 80078b8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	4798      	blx	r3
 80078c2:	e016      	b.n	80078f2 <I2C_ITError+0x1de>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	d10b      	bne.n	80078ea <I2C_ITError+0x1d6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	691a      	ldr	r2, [r3, #16]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	b2d2      	uxtb	r2, r2
 80078de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e4:	1c5a      	adds	r2, r3, #1
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10e      	bne.n	8007920 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007908:	2b00      	cmp	r3, #0
 800790a:	d109      	bne.n	8007920 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007912:	2b00      	cmp	r3, #0
 8007914:	d104      	bne.n	8007920 <I2C_ITError+0x20c>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800791c:	2b00      	cmp	r3, #0
 800791e:	d007      	beq.n	8007930 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800792e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007936:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793c:	f003 0304 	and.w	r3, r3, #4
 8007940:	2b04      	cmp	r3, #4
 8007942:	d114      	bne.n	800796e <I2C_ITError+0x25a>
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	2b28      	cmp	r3, #40	; 0x28
 8007948:	d111      	bne.n	800796e <I2C_ITError+0x25a>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a0b      	ldr	r2, [pc, #44]	; (800797c <I2C_ITError+0x268>)
 800794e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2220      	movs	r2, #32
 800795a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
#else
    HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800796e:	bf00      	nop
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	08007981 	.word	0x08007981
 800797c:	ffff0000 	.word	0xffff0000

08007980 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007988:	2300      	movs	r3, #0
 800798a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007998:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800799a:	4b4c      	ldr	r3, [pc, #304]	; (8007acc <I2C_DMAAbort+0x14c>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	08db      	lsrs	r3, r3, #3
 80079a0:	4a4b      	ldr	r2, [pc, #300]	; (8007ad0 <I2C_DMAAbort+0x150>)
 80079a2:	fba2 2303 	umull	r2, r3, r2, r3
 80079a6:	0a1a      	lsrs	r2, r3, #8
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	00da      	lsls	r2, r3, #3
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d106      	bne.n	80079c8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079be:	f043 0220 	orr.w	r2, r3, #32
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80079c6:	e00a      	b.n	80079de <I2C_DMAAbort+0x5e>
    }
    count--;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3b01      	subs	r3, #1
 80079cc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079dc:	d0ea      	beq.n	80079b4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d003      	beq.n	80079ee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ea:	2200      	movs	r2, #0
 80079ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fa:	2200      	movs	r2, #0
 80079fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a0c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	2200      	movs	r2, #0
 8007a12:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a20:	2200      	movs	r2, #0
 8007a22:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a30:	2200      	movs	r2, #0
 8007a32:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 0201 	bic.w	r2, r2, #1
 8007a42:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b60      	cmp	r3, #96	; 0x60
 8007a4e:	d10f      	bne.n	8007a70 <I2C_DMAAbort+0xf0>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2200      	movs	r2, #0
 8007a64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a6a:	6978      	ldr	r0, [r7, #20]
 8007a6c:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007a6e:	e028      	b.n	8007ac2 <I2C_DMAAbort+0x142>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a70:	7cfb      	ldrb	r3, [r7, #19]
 8007a72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a76:	2b28      	cmp	r3, #40	; 0x28
 8007a78:	d117      	bne.n	8007aaa <I2C_DMAAbort+0x12a>
      __HAL_I2C_ENABLE(hi2c);
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f042 0201 	orr.w	r2, r2, #1
 8007a88:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a98:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2228      	movs	r2, #40	; 0x28
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007aa8:	e007      	b.n	8007aba <I2C_DMAAbort+0x13a>
      hi2c->State = HAL_I2C_STATE_READY;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCallback(hi2c);
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abe:	6978      	ldr	r0, [r7, #20]
 8007ac0:	4798      	blx	r3
}
 8007ac2:	bf00      	nop
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000004 	.word	0x20000004
 8007ad0:	14f8b589 	.word	0x14f8b589

08007ad4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ae0:	4b13      	ldr	r3, [pc, #76]	; (8007b30 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	08db      	lsrs	r3, r3, #3
 8007ae6:	4a13      	ldr	r2, [pc, #76]	; (8007b34 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8007aec:	0a1a      	lsrs	r2, r3, #8
 8007aee:	4613      	mov	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4413      	add	r3, r2
 8007af4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d107      	bne.n	8007b12 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	f043 0220 	orr.w	r2, r3, #32
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e008      	b.n	8007b24 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b20:	d0e9      	beq.n	8007af6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	20000004 	.word	0x20000004
 8007b34:	14f8b589 	.word	0x14f8b589

08007b38 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b44:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007b48:	d103      	bne.n	8007b52 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007b50:	e007      	b.n	8007b62 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b56:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007b5a:	d102      	bne.n	8007b62 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2208      	movs	r2, #8
 8007b60:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007b62:	bf00      	nop
 8007b64:	370c      	adds	r7, #12
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
	...

08007b70 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8007b74:	4b06      	ldr	r3, [pc, #24]	; (8007b90 <HAL_PWR_PVD_IRQHandler+0x20>)
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d005      	beq.n	8007b8c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8007b80:	f000 f808 	bl	8007b94 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8007b84:	4b02      	ldr	r3, [pc, #8]	; (8007b90 <HAL_PWR_PVD_IRQHandler+0x20>)
 8007b86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007b8a:	615a      	str	r2, [r3, #20]
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	40013c00 	.word	0x40013c00

08007b94 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8007b94:	b480      	push	{r7}
 8007b96:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8007b98:	bf00      	nop
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
	...

08007ba4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e314      	b.n	80081e0 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b0f      	cmp	r3, #15
 8007bbc:	d903      	bls.n	8007bc6 <HAL_RCC_OscConfig+0x22>
 8007bbe:	21e6      	movs	r1, #230	; 0xe6
 8007bc0:	4897      	ldr	r0, [pc, #604]	; (8007e20 <HAL_RCC_OscConfig+0x27c>)
 8007bc2:	f7fa fe3c 	bl	800283e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 8088 	beq.w	8007ce4 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00d      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x54>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007be4:	d008      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x54>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bee:	d003      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x54>
 8007bf0:	21eb      	movs	r1, #235	; 0xeb
 8007bf2:	488b      	ldr	r0, [pc, #556]	; (8007e20 <HAL_RCC_OscConfig+0x27c>)
 8007bf4:	f7fa fe23 	bl	800283e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007bf8:	4b8a      	ldr	r3, [pc, #552]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f003 030c 	and.w	r3, r3, #12
 8007c00:	2b04      	cmp	r3, #4
 8007c02:	d00c      	beq.n	8007c1e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c04:	4b87      	ldr	r3, [pc, #540]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c0c:	2b08      	cmp	r3, #8
 8007c0e:	d112      	bne.n	8007c36 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c10:	4b84      	ldr	r3, [pc, #528]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c1c:	d10b      	bne.n	8007c36 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c1e:	4b81      	ldr	r3, [pc, #516]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d05b      	beq.n	8007ce2 <HAL_RCC_OscConfig+0x13e>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d157      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e2d4      	b.n	80081e0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c3e:	d106      	bne.n	8007c4e <HAL_RCC_OscConfig+0xaa>
 8007c40:	4b78      	ldr	r3, [pc, #480]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a77      	ldr	r2, [pc, #476]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	e01d      	b.n	8007c8a <HAL_RCC_OscConfig+0xe6>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c56:	d10c      	bne.n	8007c72 <HAL_RCC_OscConfig+0xce>
 8007c58:	4b72      	ldr	r3, [pc, #456]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a71      	ldr	r2, [pc, #452]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007c5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c62:	6013      	str	r3, [r2, #0]
 8007c64:	4b6f      	ldr	r3, [pc, #444]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a6e      	ldr	r2, [pc, #440]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c6e:	6013      	str	r3, [r2, #0]
 8007c70:	e00b      	b.n	8007c8a <HAL_RCC_OscConfig+0xe6>
 8007c72:	4b6c      	ldr	r3, [pc, #432]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a6b      	ldr	r2, [pc, #428]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	4b69      	ldr	r3, [pc, #420]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a68      	ldr	r2, [pc, #416]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d013      	beq.n	8007cba <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c92:	f7fb fda9 	bl	80037e8 <HAL_GetTick>
 8007c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c98:	e008      	b.n	8007cac <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c9a:	f7fb fda5 	bl	80037e8 <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	2b64      	cmp	r3, #100	; 0x64
 8007ca6:	d901      	bls.n	8007cac <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e299      	b.n	80081e0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cac:	4b5d      	ldr	r3, [pc, #372]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0f0      	beq.n	8007c9a <HAL_RCC_OscConfig+0xf6>
 8007cb8:	e014      	b.n	8007ce4 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cba:	f7fb fd95 	bl	80037e8 <HAL_GetTick>
 8007cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cc0:	e008      	b.n	8007cd4 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cc2:	f7fb fd91 	bl	80037e8 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	2b64      	cmp	r3, #100	; 0x64
 8007cce:	d901      	bls.n	8007cd4 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e285      	b.n	80081e0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cd4:	4b53      	ldr	r3, [pc, #332]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1f0      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x11e>
 8007ce0:	e000      	b.n	8007ce4 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ce2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d079      	beq.n	8007de4 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d008      	beq.n	8007d0a <HAL_RCC_OscConfig+0x166>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d004      	beq.n	8007d0a <HAL_RCC_OscConfig+0x166>
 8007d00:	f240 111d 	movw	r1, #285	; 0x11d
 8007d04:	4846      	ldr	r0, [pc, #280]	; (8007e20 <HAL_RCC_OscConfig+0x27c>)
 8007d06:	f7fa fd9a 	bl	800283e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	2b1f      	cmp	r3, #31
 8007d10:	d904      	bls.n	8007d1c <HAL_RCC_OscConfig+0x178>
 8007d12:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8007d16:	4842      	ldr	r0, [pc, #264]	; (8007e20 <HAL_RCC_OscConfig+0x27c>)
 8007d18:	f7fa fd91 	bl	800283e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d1c:	4b41      	ldr	r3, [pc, #260]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f003 030c 	and.w	r3, r3, #12
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00b      	beq.n	8007d40 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d28:	4b3e      	ldr	r3, [pc, #248]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d11c      	bne.n	8007d6e <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d34:	4b3b      	ldr	r3, [pc, #236]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d116      	bne.n	8007d6e <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d40:	4b38      	ldr	r3, [pc, #224]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d005      	beq.n	8007d58 <HAL_RCC_OscConfig+0x1b4>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d001      	beq.n	8007d58 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e243      	b.n	80081e0 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d58:	4b32      	ldr	r3, [pc, #200]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	00db      	lsls	r3, r3, #3
 8007d66:	492f      	ldr	r1, [pc, #188]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d6c:	e03a      	b.n	8007de4 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d020      	beq.n	8007db8 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d76:	4b2c      	ldr	r3, [pc, #176]	; (8007e28 <HAL_RCC_OscConfig+0x284>)
 8007d78:	2201      	movs	r2, #1
 8007d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7c:	f7fb fd34 	bl	80037e8 <HAL_GetTick>
 8007d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d82:	e008      	b.n	8007d96 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d84:	f7fb fd30 	bl	80037e8 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d901      	bls.n	8007d96 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e224      	b.n	80081e0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d96:	4b23      	ldr	r3, [pc, #140]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0f0      	beq.n	8007d84 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007da2:	4b20      	ldr	r3, [pc, #128]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	491c      	ldr	r1, [pc, #112]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007db2:	4313      	orrs	r3, r2
 8007db4:	600b      	str	r3, [r1, #0]
 8007db6:	e015      	b.n	8007de4 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007db8:	4b1b      	ldr	r3, [pc, #108]	; (8007e28 <HAL_RCC_OscConfig+0x284>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dbe:	f7fb fd13 	bl	80037e8 <HAL_GetTick>
 8007dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dc4:	e008      	b.n	8007dd8 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dc6:	f7fb fd0f 	bl	80037e8 <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d901      	bls.n	8007dd8 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e203      	b.n	80081e0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dd8:	4b12      	ldr	r3, [pc, #72]	; (8007e24 <HAL_RCC_OscConfig+0x280>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0302 	and.w	r3, r3, #2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1f0      	bne.n	8007dc6 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0308 	and.w	r3, r3, #8
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d045      	beq.n	8007e7c <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d008      	beq.n	8007e0a <HAL_RCC_OscConfig+0x266>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d004      	beq.n	8007e0a <HAL_RCC_OscConfig+0x266>
 8007e00:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007e04:	4806      	ldr	r0, [pc, #24]	; (8007e20 <HAL_RCC_OscConfig+0x27c>)
 8007e06:	f7fa fd1a 	bl	800283e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d01e      	beq.n	8007e50 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e12:	4b06      	ldr	r3, [pc, #24]	; (8007e2c <HAL_RCC_OscConfig+0x288>)
 8007e14:	2201      	movs	r2, #1
 8007e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e18:	f7fb fce6 	bl	80037e8 <HAL_GetTick>
 8007e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e1e:	e010      	b.n	8007e42 <HAL_RCC_OscConfig+0x29e>
 8007e20:	08010bf0 	.word	0x08010bf0
 8007e24:	40023800 	.word	0x40023800
 8007e28:	42470000 	.word	0x42470000
 8007e2c:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e30:	f7fb fcda 	bl	80037e8 <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d901      	bls.n	8007e42 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e1ce      	b.n	80081e0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e42:	4b5e      	ldr	r3, [pc, #376]	; (8007fbc <HAL_RCC_OscConfig+0x418>)
 8007e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d0f0      	beq.n	8007e30 <HAL_RCC_OscConfig+0x28c>
 8007e4e:	e015      	b.n	8007e7c <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e50:	4b5b      	ldr	r3, [pc, #364]	; (8007fc0 <HAL_RCC_OscConfig+0x41c>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e56:	f7fb fcc7 	bl	80037e8 <HAL_GetTick>
 8007e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e5c:	e008      	b.n	8007e70 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e5e:	f7fb fcc3 	bl	80037e8 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d901      	bls.n	8007e70 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e1b7      	b.n	80081e0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e70:	4b52      	ldr	r3, [pc, #328]	; (8007fbc <HAL_RCC_OscConfig+0x418>)
 8007e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1f0      	bne.n	8007e5e <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0304 	and.w	r3, r3, #4
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 80b0 	beq.w	8007fea <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00c      	beq.n	8007eb0 <HAL_RCC_OscConfig+0x30c>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d008      	beq.n	8007eb0 <HAL_RCC_OscConfig+0x30c>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	2b05      	cmp	r3, #5
 8007ea4:	d004      	beq.n	8007eb0 <HAL_RCC_OscConfig+0x30c>
 8007ea6:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8007eaa:	4846      	ldr	r0, [pc, #280]	; (8007fc4 <HAL_RCC_OscConfig+0x420>)
 8007eac:	f7fa fcc7 	bl	800283e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007eb0:	4b42      	ldr	r3, [pc, #264]	; (8007fbc <HAL_RCC_OscConfig+0x418>)
 8007eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10f      	bne.n	8007edc <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	60bb      	str	r3, [r7, #8]
 8007ec0:	4b3e      	ldr	r3, [pc, #248]	; (8007fbc <HAL_RCC_OscConfig+0x418>)
 8007ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec4:	4a3d      	ldr	r2, [pc, #244]	; (8007fbc <HAL_RCC_OscConfig+0x418>)
 8007ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eca:	6413      	str	r3, [r2, #64]	; 0x40
 8007ecc:	4b3b      	ldr	r3, [pc, #236]	; (8007fbc <HAL_RCC_OscConfig+0x418>)
 8007ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ed4:	60bb      	str	r3, [r7, #8]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007edc:	4b3a      	ldr	r3, [pc, #232]	; (8007fc8 <HAL_RCC_OscConfig+0x424>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d118      	bne.n	8007f1a <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ee8:	4b37      	ldr	r3, [pc, #220]	; (8007fc8 <HAL_RCC_OscConfig+0x424>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a36      	ldr	r2, [pc, #216]	; (8007fc8 <HAL_RCC_OscConfig+0x424>)
 8007eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ef2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ef4:	f7fb fc78 	bl	80037e8 <HAL_GetTick>
 8007ef8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007efa:	e008      	b.n	8007f0e <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007efc:	f7fb fc74 	bl	80037e8 <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d901      	bls.n	8007f0e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e168      	b.n	80081e0 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f0e:	4b2e      	ldr	r3, [pc, #184]	; (8007fc8 <HAL_RCC_OscConfig+0x424>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0f0      	beq.n	8007efc <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d106      	bne.n	8007f30 <HAL_RCC_OscConfig+0x38c>
 8007f22:	4b26      	ldr	r3, [pc, #152]	; (8007fbc <HAL_RCC_OscConfig+0x418>)
 8007f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f26:	4a25      	ldr	r2, [pc, #148]	; (8007fbc <HAL_RCC_OscConfig+0x418>)
 8007f28:	f043 0301 	orr.w	r3, r3, #1
 8007f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007f2e:	e01c      	b.n	8007f6a <HAL_RCC_OscConfig+0x3c6>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	2b05      	cmp	r3, #5
 8007f36:	d10c      	bne.n	8007f52 <HAL_RCC_OscConfig+0x3ae>
 8007f38:	4b20      	ldr	r3, [pc, #128]	; (8007fbc <HAL_RCC_OscConfig+0x418>)
 8007f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f3c:	4a1f      	ldr	r2, [pc, #124]	; (8007fbc <HAL_RCC_OscConfig+0x418>)
 8007f3e:	f043 0304 	orr.w	r3, r3, #4
 8007f42:	6713      	str	r3, [r2, #112]	; 0x70
 8007f44:	4b1d      	ldr	r3, [pc, #116]	; (8007fbc <HAL_RCC_OscConfig+0x418>)
 8007f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f48:	4a1c      	ldr	r2, [pc, #112]	; (8007fbc <HAL_RCC_OscConfig+0x418>)
 8007f4a:	f043 0301 	orr.w	r3, r3, #1
 8007f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8007f50:	e00b      	b.n	8007f6a <HAL_RCC_OscConfig+0x3c6>
 8007f52:	4b1a      	ldr	r3, [pc, #104]	; (8007fbc <HAL_RCC_OscConfig+0x418>)
 8007f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f56:	4a19      	ldr	r2, [pc, #100]	; (8007fbc <HAL_RCC_OscConfig+0x418>)
 8007f58:	f023 0301 	bic.w	r3, r3, #1
 8007f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8007f5e:	4b17      	ldr	r3, [pc, #92]	; (8007fbc <HAL_RCC_OscConfig+0x418>)
 8007f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f62:	4a16      	ldr	r2, [pc, #88]	; (8007fbc <HAL_RCC_OscConfig+0x418>)
 8007f64:	f023 0304 	bic.w	r3, r3, #4
 8007f68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d015      	beq.n	8007f9e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f72:	f7fb fc39 	bl	80037e8 <HAL_GetTick>
 8007f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f78:	e00a      	b.n	8007f90 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f7a:	f7fb fc35 	bl	80037e8 <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d901      	bls.n	8007f90 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e127      	b.n	80081e0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f90:	4b0a      	ldr	r3, [pc, #40]	; (8007fbc <HAL_RCC_OscConfig+0x418>)
 8007f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d0ee      	beq.n	8007f7a <HAL_RCC_OscConfig+0x3d6>
 8007f9c:	e01c      	b.n	8007fd8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f9e:	f7fb fc23 	bl	80037e8 <HAL_GetTick>
 8007fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fa4:	e012      	b.n	8007fcc <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fa6:	f7fb fc1f 	bl	80037e8 <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d909      	bls.n	8007fcc <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e111      	b.n	80081e0 <HAL_RCC_OscConfig+0x63c>
 8007fbc:	40023800 	.word	0x40023800
 8007fc0:	42470e80 	.word	0x42470e80
 8007fc4:	08010bf0 	.word	0x08010bf0
 8007fc8:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fcc:	4b86      	ldr	r3, [pc, #536]	; (80081e8 <HAL_RCC_OscConfig+0x644>)
 8007fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e6      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d105      	bne.n	8007fea <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fde:	4b82      	ldr	r3, [pc, #520]	; (80081e8 <HAL_RCC_OscConfig+0x644>)
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	4a81      	ldr	r2, [pc, #516]	; (80081e8 <HAL_RCC_OscConfig+0x644>)
 8007fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fe8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00c      	beq.n	800800c <HAL_RCC_OscConfig+0x468>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d008      	beq.n	800800c <HAL_RCC_OscConfig+0x468>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d004      	beq.n	800800c <HAL_RCC_OscConfig+0x468>
 8008002:	f240 11cd 	movw	r1, #461	; 0x1cd
 8008006:	4879      	ldr	r0, [pc, #484]	; (80081ec <HAL_RCC_OscConfig+0x648>)
 8008008:	f7fa fc19 	bl	800283e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 80e4 	beq.w	80081de <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008016:	4b74      	ldr	r3, [pc, #464]	; (80081e8 <HAL_RCC_OscConfig+0x644>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f003 030c 	and.w	r3, r3, #12
 800801e:	2b08      	cmp	r3, #8
 8008020:	f000 80a5 	beq.w	800816e <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	2b02      	cmp	r3, #2
 800802a:	f040 8089 	bne.w	8008140 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d009      	beq.n	800804a <HAL_RCC_OscConfig+0x4a6>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800803e:	d004      	beq.n	800804a <HAL_RCC_OscConfig+0x4a6>
 8008040:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8008044:	4869      	ldr	r0, [pc, #420]	; (80081ec <HAL_RCC_OscConfig+0x648>)
 8008046:	f7fa fbfa 	bl	800283e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	2b3f      	cmp	r3, #63	; 0x3f
 8008050:	d904      	bls.n	800805c <HAL_RCC_OscConfig+0x4b8>
 8008052:	f240 11d7 	movw	r1, #471	; 0x1d7
 8008056:	4865      	ldr	r0, [pc, #404]	; (80081ec <HAL_RCC_OscConfig+0x648>)
 8008058:	f7fa fbf1 	bl	800283e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008060:	2b31      	cmp	r3, #49	; 0x31
 8008062:	d904      	bls.n	800806e <HAL_RCC_OscConfig+0x4ca>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008068:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800806c:	d904      	bls.n	8008078 <HAL_RCC_OscConfig+0x4d4>
 800806e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8008072:	485e      	ldr	r0, [pc, #376]	; (80081ec <HAL_RCC_OscConfig+0x648>)
 8008074:	f7fa fbe3 	bl	800283e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807c:	2b02      	cmp	r3, #2
 800807e:	d010      	beq.n	80080a2 <HAL_RCC_OscConfig+0x4fe>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008084:	2b04      	cmp	r3, #4
 8008086:	d00c      	beq.n	80080a2 <HAL_RCC_OscConfig+0x4fe>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808c:	2b06      	cmp	r3, #6
 800808e:	d008      	beq.n	80080a2 <HAL_RCC_OscConfig+0x4fe>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008094:	2b08      	cmp	r3, #8
 8008096:	d004      	beq.n	80080a2 <HAL_RCC_OscConfig+0x4fe>
 8008098:	f240 11d9 	movw	r1, #473	; 0x1d9
 800809c:	4853      	ldr	r0, [pc, #332]	; (80081ec <HAL_RCC_OscConfig+0x648>)
 800809e:	f7fa fbce 	bl	800283e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d903      	bls.n	80080b2 <HAL_RCC_OscConfig+0x50e>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ae:	2b0f      	cmp	r3, #15
 80080b0:	d904      	bls.n	80080bc <HAL_RCC_OscConfig+0x518>
 80080b2:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80080b6:	484d      	ldr	r0, [pc, #308]	; (80081ec <HAL_RCC_OscConfig+0x648>)
 80080b8:	f7fa fbc1 	bl	800283e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080bc:	4b4c      	ldr	r3, [pc, #304]	; (80081f0 <HAL_RCC_OscConfig+0x64c>)
 80080be:	2200      	movs	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080c2:	f7fb fb91 	bl	80037e8 <HAL_GetTick>
 80080c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080c8:	e008      	b.n	80080dc <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080ca:	f7fb fb8d 	bl	80037e8 <HAL_GetTick>
 80080ce:	4602      	mov	r2, r0
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d901      	bls.n	80080dc <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e081      	b.n	80081e0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080dc:	4b42      	ldr	r3, [pc, #264]	; (80081e8 <HAL_RCC_OscConfig+0x644>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1f0      	bne.n	80080ca <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	69da      	ldr	r2, [r3, #28]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	431a      	orrs	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	019b      	lsls	r3, r3, #6
 80080f8:	431a      	orrs	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fe:	085b      	lsrs	r3, r3, #1
 8008100:	3b01      	subs	r3, #1
 8008102:	041b      	lsls	r3, r3, #16
 8008104:	431a      	orrs	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810a:	061b      	lsls	r3, r3, #24
 800810c:	4936      	ldr	r1, [pc, #216]	; (80081e8 <HAL_RCC_OscConfig+0x644>)
 800810e:	4313      	orrs	r3, r2
 8008110:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008112:	4b37      	ldr	r3, [pc, #220]	; (80081f0 <HAL_RCC_OscConfig+0x64c>)
 8008114:	2201      	movs	r2, #1
 8008116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008118:	f7fb fb66 	bl	80037e8 <HAL_GetTick>
 800811c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800811e:	e008      	b.n	8008132 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008120:	f7fb fb62 	bl	80037e8 <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	2b02      	cmp	r3, #2
 800812c:	d901      	bls.n	8008132 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e056      	b.n	80081e0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008132:	4b2d      	ldr	r3, [pc, #180]	; (80081e8 <HAL_RCC_OscConfig+0x644>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0f0      	beq.n	8008120 <HAL_RCC_OscConfig+0x57c>
 800813e:	e04e      	b.n	80081de <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008140:	4b2b      	ldr	r3, [pc, #172]	; (80081f0 <HAL_RCC_OscConfig+0x64c>)
 8008142:	2200      	movs	r2, #0
 8008144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008146:	f7fb fb4f 	bl	80037e8 <HAL_GetTick>
 800814a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800814c:	e008      	b.n	8008160 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800814e:	f7fb fb4b 	bl	80037e8 <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	2b02      	cmp	r3, #2
 800815a:	d901      	bls.n	8008160 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e03f      	b.n	80081e0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008160:	4b21      	ldr	r3, [pc, #132]	; (80081e8 <HAL_RCC_OscConfig+0x644>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1f0      	bne.n	800814e <HAL_RCC_OscConfig+0x5aa>
 800816c:	e037      	b.n	80081de <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d101      	bne.n	800817a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e032      	b.n	80081e0 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800817a:	4b1b      	ldr	r3, [pc, #108]	; (80081e8 <HAL_RCC_OscConfig+0x644>)
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d028      	beq.n	80081da <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008192:	429a      	cmp	r2, r3
 8008194:	d121      	bne.n	80081da <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d11a      	bne.n	80081da <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80081aa:	4013      	ands	r3, r2
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d111      	bne.n	80081da <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c0:	085b      	lsrs	r3, r3, #1
 80081c2:	3b01      	subs	r3, #1
 80081c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d107      	bne.n	80081da <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d001      	beq.n	80081de <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e000      	b.n	80081e0 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	40023800 	.word	0x40023800
 80081ec:	08010bf0 	.word	0x08010bf0
 80081f0:	42470060 	.word	0x42470060

080081f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e174      	b.n	80084f2 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <HAL_RCC_ClockConfig+0x24>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b0f      	cmp	r3, #15
 8008216:	d904      	bls.n	8008222 <HAL_RCC_ClockConfig+0x2e>
 8008218:	f240 215a 	movw	r1, #602	; 0x25a
 800821c:	487b      	ldr	r0, [pc, #492]	; (800840c <HAL_RCC_ClockConfig+0x218>)
 800821e:	f7fa fb0e 	bl	800283e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d019      	beq.n	800825c <HAL_RCC_ClockConfig+0x68>
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d016      	beq.n	800825c <HAL_RCC_ClockConfig+0x68>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b02      	cmp	r3, #2
 8008232:	d013      	beq.n	800825c <HAL_RCC_ClockConfig+0x68>
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2b03      	cmp	r3, #3
 8008238:	d010      	beq.n	800825c <HAL_RCC_ClockConfig+0x68>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b04      	cmp	r3, #4
 800823e:	d00d      	beq.n	800825c <HAL_RCC_ClockConfig+0x68>
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	2b05      	cmp	r3, #5
 8008244:	d00a      	beq.n	800825c <HAL_RCC_ClockConfig+0x68>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b06      	cmp	r3, #6
 800824a:	d007      	beq.n	800825c <HAL_RCC_ClockConfig+0x68>
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	2b07      	cmp	r3, #7
 8008250:	d004      	beq.n	800825c <HAL_RCC_ClockConfig+0x68>
 8008252:	f240 215b 	movw	r1, #603	; 0x25b
 8008256:	486d      	ldr	r0, [pc, #436]	; (800840c <HAL_RCC_ClockConfig+0x218>)
 8008258:	f7fa faf1 	bl	800283e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800825c:	4b6c      	ldr	r3, [pc, #432]	; (8008410 <HAL_RCC_ClockConfig+0x21c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0307 	and.w	r3, r3, #7
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	429a      	cmp	r2, r3
 8008268:	d90c      	bls.n	8008284 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800826a:	4b69      	ldr	r3, [pc, #420]	; (8008410 <HAL_RCC_ClockConfig+0x21c>)
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	b2d2      	uxtb	r2, r2
 8008270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008272:	4b67      	ldr	r3, [pc, #412]	; (8008410 <HAL_RCC_ClockConfig+0x21c>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	429a      	cmp	r2, r3
 800827e:	d001      	beq.n	8008284 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e136      	b.n	80084f2 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d049      	beq.n	8008324 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b00      	cmp	r3, #0
 800829a:	d005      	beq.n	80082a8 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800829c:	4b5d      	ldr	r3, [pc, #372]	; (8008414 <HAL_RCC_ClockConfig+0x220>)
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	4a5c      	ldr	r2, [pc, #368]	; (8008414 <HAL_RCC_ClockConfig+0x220>)
 80082a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0308 	and.w	r3, r3, #8
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082b4:	4b57      	ldr	r3, [pc, #348]	; (8008414 <HAL_RCC_ClockConfig+0x220>)
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	4a56      	ldr	r2, [pc, #344]	; (8008414 <HAL_RCC_ClockConfig+0x220>)
 80082ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80082be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d024      	beq.n	8008312 <HAL_RCC_ClockConfig+0x11e>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	2b80      	cmp	r3, #128	; 0x80
 80082ce:	d020      	beq.n	8008312 <HAL_RCC_ClockConfig+0x11e>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	2b90      	cmp	r3, #144	; 0x90
 80082d6:	d01c      	beq.n	8008312 <HAL_RCC_ClockConfig+0x11e>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	2ba0      	cmp	r3, #160	; 0xa0
 80082de:	d018      	beq.n	8008312 <HAL_RCC_ClockConfig+0x11e>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	2bb0      	cmp	r3, #176	; 0xb0
 80082e6:	d014      	beq.n	8008312 <HAL_RCC_ClockConfig+0x11e>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	2bc0      	cmp	r3, #192	; 0xc0
 80082ee:	d010      	beq.n	8008312 <HAL_RCC_ClockConfig+0x11e>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	2bd0      	cmp	r3, #208	; 0xd0
 80082f6:	d00c      	beq.n	8008312 <HAL_RCC_ClockConfig+0x11e>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	2be0      	cmp	r3, #224	; 0xe0
 80082fe:	d008      	beq.n	8008312 <HAL_RCC_ClockConfig+0x11e>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	2bf0      	cmp	r3, #240	; 0xf0
 8008306:	d004      	beq.n	8008312 <HAL_RCC_ClockConfig+0x11e>
 8008308:	f240 217e 	movw	r1, #638	; 0x27e
 800830c:	483f      	ldr	r0, [pc, #252]	; (800840c <HAL_RCC_ClockConfig+0x218>)
 800830e:	f7fa fa96 	bl	800283e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008312:	4b40      	ldr	r3, [pc, #256]	; (8008414 <HAL_RCC_ClockConfig+0x220>)
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	493d      	ldr	r1, [pc, #244]	; (8008414 <HAL_RCC_ClockConfig+0x220>)
 8008320:	4313      	orrs	r3, r2
 8008322:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0301 	and.w	r3, r3, #1
 800832c:	2b00      	cmp	r3, #0
 800832e:	d059      	beq.n	80083e4 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d010      	beq.n	800835a <HAL_RCC_ClockConfig+0x166>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d00c      	beq.n	800835a <HAL_RCC_ClockConfig+0x166>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	2b02      	cmp	r3, #2
 8008346:	d008      	beq.n	800835a <HAL_RCC_ClockConfig+0x166>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	2b03      	cmp	r3, #3
 800834e:	d004      	beq.n	800835a <HAL_RCC_ClockConfig+0x166>
 8008350:	f240 2185 	movw	r1, #645	; 0x285
 8008354:	482d      	ldr	r0, [pc, #180]	; (800840c <HAL_RCC_ClockConfig+0x218>)
 8008356:	f7fa fa72 	bl	800283e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d107      	bne.n	8008372 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008362:	4b2c      	ldr	r3, [pc, #176]	; (8008414 <HAL_RCC_ClockConfig+0x220>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d119      	bne.n	80083a2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e0bf      	b.n	80084f2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	2b02      	cmp	r3, #2
 8008378:	d003      	beq.n	8008382 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800837e:	2b03      	cmp	r3, #3
 8008380:	d107      	bne.n	8008392 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008382:	4b24      	ldr	r3, [pc, #144]	; (8008414 <HAL_RCC_ClockConfig+0x220>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d109      	bne.n	80083a2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e0af      	b.n	80084f2 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008392:	4b20      	ldr	r3, [pc, #128]	; (8008414 <HAL_RCC_ClockConfig+0x220>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0302 	and.w	r3, r3, #2
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e0a7      	b.n	80084f2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083a2:	4b1c      	ldr	r3, [pc, #112]	; (8008414 <HAL_RCC_ClockConfig+0x220>)
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f023 0203 	bic.w	r2, r3, #3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	4919      	ldr	r1, [pc, #100]	; (8008414 <HAL_RCC_ClockConfig+0x220>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80083b4:	f7fb fa18 	bl	80037e8 <HAL_GetTick>
 80083b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ba:	e00a      	b.n	80083d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083bc:	f7fb fa14 	bl	80037e8 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d901      	bls.n	80083d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e08f      	b.n	80084f2 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083d2:	4b10      	ldr	r3, [pc, #64]	; (8008414 <HAL_RCC_ClockConfig+0x220>)
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f003 020c 	and.w	r2, r3, #12
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d1eb      	bne.n	80083bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083e4:	4b0a      	ldr	r3, [pc, #40]	; (8008410 <HAL_RCC_ClockConfig+0x21c>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0307 	and.w	r3, r3, #7
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d212      	bcs.n	8008418 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083f2:	4b07      	ldr	r3, [pc, #28]	; (8008410 <HAL_RCC_ClockConfig+0x21c>)
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	b2d2      	uxtb	r2, r2
 80083f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083fa:	4b05      	ldr	r3, [pc, #20]	; (8008410 <HAL_RCC_ClockConfig+0x21c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	429a      	cmp	r2, r3
 8008406:	d007      	beq.n	8008418 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e072      	b.n	80084f2 <HAL_RCC_ClockConfig+0x2fe>
 800840c:	08010bf0 	.word	0x08010bf0
 8008410:	40023c00 	.word	0x40023c00
 8008414:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0304 	and.w	r3, r3, #4
 8008420:	2b00      	cmp	r3, #0
 8008422:	d025      	beq.n	8008470 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d018      	beq.n	800845e <HAL_RCC_ClockConfig+0x26a>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008434:	d013      	beq.n	800845e <HAL_RCC_ClockConfig+0x26a>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800843e:	d00e      	beq.n	800845e <HAL_RCC_ClockConfig+0x26a>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008448:	d009      	beq.n	800845e <HAL_RCC_ClockConfig+0x26a>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008452:	d004      	beq.n	800845e <HAL_RCC_ClockConfig+0x26a>
 8008454:	f240 21c3 	movw	r1, #707	; 0x2c3
 8008458:	4828      	ldr	r0, [pc, #160]	; (80084fc <HAL_RCC_ClockConfig+0x308>)
 800845a:	f7fa f9f0 	bl	800283e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800845e:	4b28      	ldr	r3, [pc, #160]	; (8008500 <HAL_RCC_ClockConfig+0x30c>)
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	4925      	ldr	r1, [pc, #148]	; (8008500 <HAL_RCC_ClockConfig+0x30c>)
 800846c:	4313      	orrs	r3, r2
 800846e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0308 	and.w	r3, r3, #8
 8008478:	2b00      	cmp	r3, #0
 800847a:	d026      	beq.n	80084ca <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d018      	beq.n	80084b6 <HAL_RCC_ClockConfig+0x2c2>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800848c:	d013      	beq.n	80084b6 <HAL_RCC_ClockConfig+0x2c2>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008496:	d00e      	beq.n	80084b6 <HAL_RCC_ClockConfig+0x2c2>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80084a0:	d009      	beq.n	80084b6 <HAL_RCC_ClockConfig+0x2c2>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80084aa:	d004      	beq.n	80084b6 <HAL_RCC_ClockConfig+0x2c2>
 80084ac:	f240 21ca 	movw	r1, #714	; 0x2ca
 80084b0:	4812      	ldr	r0, [pc, #72]	; (80084fc <HAL_RCC_ClockConfig+0x308>)
 80084b2:	f7fa f9c4 	bl	800283e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084b6:	4b12      	ldr	r3, [pc, #72]	; (8008500 <HAL_RCC_ClockConfig+0x30c>)
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	00db      	lsls	r3, r3, #3
 80084c4:	490e      	ldr	r1, [pc, #56]	; (8008500 <HAL_RCC_ClockConfig+0x30c>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80084ca:	f000 f821 	bl	8008510 <HAL_RCC_GetSysClockFreq>
 80084ce:	4602      	mov	r2, r0
 80084d0:	4b0b      	ldr	r3, [pc, #44]	; (8008500 <HAL_RCC_ClockConfig+0x30c>)
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	091b      	lsrs	r3, r3, #4
 80084d6:	f003 030f 	and.w	r3, r3, #15
 80084da:	490a      	ldr	r1, [pc, #40]	; (8008504 <HAL_RCC_ClockConfig+0x310>)
 80084dc:	5ccb      	ldrb	r3, [r1, r3]
 80084de:	fa22 f303 	lsr.w	r3, r2, r3
 80084e2:	4a09      	ldr	r2, [pc, #36]	; (8008508 <HAL_RCC_ClockConfig+0x314>)
 80084e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80084e6:	4b09      	ldr	r3, [pc, #36]	; (800850c <HAL_RCC_ClockConfig+0x318>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fa fbd4 	bl	8002c98 <HAL_InitTick>

  return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	08010bf0 	.word	0x08010bf0
 8008500:	40023800 	.word	0x40023800
 8008504:	0801185c 	.word	0x0801185c
 8008508:	20000004 	.word	0x20000004
 800850c:	20000008 	.word	0x20000008

08008510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008514:	b094      	sub	sp, #80	; 0x50
 8008516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	647b      	str	r3, [r7, #68]	; 0x44
 800851c:	2300      	movs	r3, #0
 800851e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008520:	2300      	movs	r3, #0
 8008522:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008524:	2300      	movs	r3, #0
 8008526:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008528:	4b79      	ldr	r3, [pc, #484]	; (8008710 <HAL_RCC_GetSysClockFreq+0x200>)
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f003 030c 	and.w	r3, r3, #12
 8008530:	2b08      	cmp	r3, #8
 8008532:	d00d      	beq.n	8008550 <HAL_RCC_GetSysClockFreq+0x40>
 8008534:	2b08      	cmp	r3, #8
 8008536:	f200 80e1 	bhi.w	80086fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d002      	beq.n	8008544 <HAL_RCC_GetSysClockFreq+0x34>
 800853e:	2b04      	cmp	r3, #4
 8008540:	d003      	beq.n	800854a <HAL_RCC_GetSysClockFreq+0x3a>
 8008542:	e0db      	b.n	80086fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008544:	4b73      	ldr	r3, [pc, #460]	; (8008714 <HAL_RCC_GetSysClockFreq+0x204>)
 8008546:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008548:	e0db      	b.n	8008702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800854a:	4b73      	ldr	r3, [pc, #460]	; (8008718 <HAL_RCC_GetSysClockFreq+0x208>)
 800854c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800854e:	e0d8      	b.n	8008702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008550:	4b6f      	ldr	r3, [pc, #444]	; (8008710 <HAL_RCC_GetSysClockFreq+0x200>)
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008558:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800855a:	4b6d      	ldr	r3, [pc, #436]	; (8008710 <HAL_RCC_GetSysClockFreq+0x200>)
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d063      	beq.n	800862e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008566:	4b6a      	ldr	r3, [pc, #424]	; (8008710 <HAL_RCC_GetSysClockFreq+0x200>)
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	099b      	lsrs	r3, r3, #6
 800856c:	2200      	movs	r2, #0
 800856e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008570:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008578:	633b      	str	r3, [r7, #48]	; 0x30
 800857a:	2300      	movs	r3, #0
 800857c:	637b      	str	r3, [r7, #52]	; 0x34
 800857e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008582:	4622      	mov	r2, r4
 8008584:	462b      	mov	r3, r5
 8008586:	f04f 0000 	mov.w	r0, #0
 800858a:	f04f 0100 	mov.w	r1, #0
 800858e:	0159      	lsls	r1, r3, #5
 8008590:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008594:	0150      	lsls	r0, r2, #5
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4621      	mov	r1, r4
 800859c:	1a51      	subs	r1, r2, r1
 800859e:	6139      	str	r1, [r7, #16]
 80085a0:	4629      	mov	r1, r5
 80085a2:	eb63 0301 	sbc.w	r3, r3, r1
 80085a6:	617b      	str	r3, [r7, #20]
 80085a8:	f04f 0200 	mov.w	r2, #0
 80085ac:	f04f 0300 	mov.w	r3, #0
 80085b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085b4:	4659      	mov	r1, fp
 80085b6:	018b      	lsls	r3, r1, #6
 80085b8:	4651      	mov	r1, sl
 80085ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80085be:	4651      	mov	r1, sl
 80085c0:	018a      	lsls	r2, r1, #6
 80085c2:	4651      	mov	r1, sl
 80085c4:	ebb2 0801 	subs.w	r8, r2, r1
 80085c8:	4659      	mov	r1, fp
 80085ca:	eb63 0901 	sbc.w	r9, r3, r1
 80085ce:	f04f 0200 	mov.w	r2, #0
 80085d2:	f04f 0300 	mov.w	r3, #0
 80085d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80085da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80085de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80085e2:	4690      	mov	r8, r2
 80085e4:	4699      	mov	r9, r3
 80085e6:	4623      	mov	r3, r4
 80085e8:	eb18 0303 	adds.w	r3, r8, r3
 80085ec:	60bb      	str	r3, [r7, #8]
 80085ee:	462b      	mov	r3, r5
 80085f0:	eb49 0303 	adc.w	r3, r9, r3
 80085f4:	60fb      	str	r3, [r7, #12]
 80085f6:	f04f 0200 	mov.w	r2, #0
 80085fa:	f04f 0300 	mov.w	r3, #0
 80085fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008602:	4629      	mov	r1, r5
 8008604:	024b      	lsls	r3, r1, #9
 8008606:	4621      	mov	r1, r4
 8008608:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800860c:	4621      	mov	r1, r4
 800860e:	024a      	lsls	r2, r1, #9
 8008610:	4610      	mov	r0, r2
 8008612:	4619      	mov	r1, r3
 8008614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008616:	2200      	movs	r2, #0
 8008618:	62bb      	str	r3, [r7, #40]	; 0x28
 800861a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800861c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008620:	f7f7 fdde 	bl	80001e0 <__aeabi_uldivmod>
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	4613      	mov	r3, r2
 800862a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800862c:	e058      	b.n	80086e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800862e:	4b38      	ldr	r3, [pc, #224]	; (8008710 <HAL_RCC_GetSysClockFreq+0x200>)
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	099b      	lsrs	r3, r3, #6
 8008634:	2200      	movs	r2, #0
 8008636:	4618      	mov	r0, r3
 8008638:	4611      	mov	r1, r2
 800863a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800863e:	623b      	str	r3, [r7, #32]
 8008640:	2300      	movs	r3, #0
 8008642:	627b      	str	r3, [r7, #36]	; 0x24
 8008644:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008648:	4642      	mov	r2, r8
 800864a:	464b      	mov	r3, r9
 800864c:	f04f 0000 	mov.w	r0, #0
 8008650:	f04f 0100 	mov.w	r1, #0
 8008654:	0159      	lsls	r1, r3, #5
 8008656:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800865a:	0150      	lsls	r0, r2, #5
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	4641      	mov	r1, r8
 8008662:	ebb2 0a01 	subs.w	sl, r2, r1
 8008666:	4649      	mov	r1, r9
 8008668:	eb63 0b01 	sbc.w	fp, r3, r1
 800866c:	f04f 0200 	mov.w	r2, #0
 8008670:	f04f 0300 	mov.w	r3, #0
 8008674:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008678:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800867c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008680:	ebb2 040a 	subs.w	r4, r2, sl
 8008684:	eb63 050b 	sbc.w	r5, r3, fp
 8008688:	f04f 0200 	mov.w	r2, #0
 800868c:	f04f 0300 	mov.w	r3, #0
 8008690:	00eb      	lsls	r3, r5, #3
 8008692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008696:	00e2      	lsls	r2, r4, #3
 8008698:	4614      	mov	r4, r2
 800869a:	461d      	mov	r5, r3
 800869c:	4643      	mov	r3, r8
 800869e:	18e3      	adds	r3, r4, r3
 80086a0:	603b      	str	r3, [r7, #0]
 80086a2:	464b      	mov	r3, r9
 80086a4:	eb45 0303 	adc.w	r3, r5, r3
 80086a8:	607b      	str	r3, [r7, #4]
 80086aa:	f04f 0200 	mov.w	r2, #0
 80086ae:	f04f 0300 	mov.w	r3, #0
 80086b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80086b6:	4629      	mov	r1, r5
 80086b8:	028b      	lsls	r3, r1, #10
 80086ba:	4621      	mov	r1, r4
 80086bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80086c0:	4621      	mov	r1, r4
 80086c2:	028a      	lsls	r2, r1, #10
 80086c4:	4610      	mov	r0, r2
 80086c6:	4619      	mov	r1, r3
 80086c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ca:	2200      	movs	r2, #0
 80086cc:	61bb      	str	r3, [r7, #24]
 80086ce:	61fa      	str	r2, [r7, #28]
 80086d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086d4:	f7f7 fd84 	bl	80001e0 <__aeabi_uldivmod>
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	4613      	mov	r3, r2
 80086de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80086e0:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <HAL_RCC_GetSysClockFreq+0x200>)
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	0c1b      	lsrs	r3, r3, #16
 80086e6:	f003 0303 	and.w	r3, r3, #3
 80086ea:	3301      	adds	r3, #1
 80086ec:	005b      	lsls	r3, r3, #1
 80086ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80086f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80086fa:	e002      	b.n	8008702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80086fc:	4b05      	ldr	r3, [pc, #20]	; (8008714 <HAL_RCC_GetSysClockFreq+0x204>)
 80086fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008704:	4618      	mov	r0, r3
 8008706:	3750      	adds	r7, #80	; 0x50
 8008708:	46bd      	mov	sp, r7
 800870a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800870e:	bf00      	nop
 8008710:	40023800 	.word	0x40023800
 8008714:	00f42400 	.word	0x00f42400
 8008718:	007a1200 	.word	0x007a1200

0800871c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800871c:	b480      	push	{r7}
 800871e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008720:	4b03      	ldr	r3, [pc, #12]	; (8008730 <HAL_RCC_GetHCLKFreq+0x14>)
 8008722:	681b      	ldr	r3, [r3, #0]
}
 8008724:	4618      	mov	r0, r3
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	20000004 	.word	0x20000004

08008734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008738:	f7ff fff0 	bl	800871c <HAL_RCC_GetHCLKFreq>
 800873c:	4602      	mov	r2, r0
 800873e:	4b05      	ldr	r3, [pc, #20]	; (8008754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	0a9b      	lsrs	r3, r3, #10
 8008744:	f003 0307 	and.w	r3, r3, #7
 8008748:	4903      	ldr	r1, [pc, #12]	; (8008758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800874a:	5ccb      	ldrb	r3, [r1, r3]
 800874c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008750:	4618      	mov	r0, r3
 8008752:	bd80      	pop	{r7, pc}
 8008754:	40023800 	.word	0x40023800
 8008758:	0801186c 	.word	0x0801186c

0800875c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008760:	f7ff ffdc 	bl	800871c <HAL_RCC_GetHCLKFreq>
 8008764:	4602      	mov	r2, r0
 8008766:	4b05      	ldr	r3, [pc, #20]	; (800877c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	0b5b      	lsrs	r3, r3, #13
 800876c:	f003 0307 	and.w	r3, r3, #7
 8008770:	4903      	ldr	r1, [pc, #12]	; (8008780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008772:	5ccb      	ldrb	r3, [r1, r3]
 8008774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008778:	4618      	mov	r0, r3
 800877a:	bd80      	pop	{r7, pc}
 800877c:	40023800 	.word	0x40023800
 8008780:	0801186c 	.word	0x0801186c

08008784 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	220f      	movs	r2, #15
 8008792:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008794:	4b12      	ldr	r3, [pc, #72]	; (80087e0 <HAL_RCC_GetClockConfig+0x5c>)
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f003 0203 	and.w	r2, r3, #3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80087a0:	4b0f      	ldr	r3, [pc, #60]	; (80087e0 <HAL_RCC_GetClockConfig+0x5c>)
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80087ac:	4b0c      	ldr	r3, [pc, #48]	; (80087e0 <HAL_RCC_GetClockConfig+0x5c>)
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80087b8:	4b09      	ldr	r3, [pc, #36]	; (80087e0 <HAL_RCC_GetClockConfig+0x5c>)
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	08db      	lsrs	r3, r3, #3
 80087be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80087c6:	4b07      	ldr	r3, [pc, #28]	; (80087e4 <HAL_RCC_GetClockConfig+0x60>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0207 	and.w	r2, r3, #7
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	601a      	str	r2, [r3, #0]
}
 80087d2:	bf00      	nop
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	40023800 	.word	0x40023800
 80087e4:	40023c00 	.word	0x40023c00

080087e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80087f0:	2300      	movs	r3, #0
 80087f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b0f      	cmp	r3, #15
 8008806:	d904      	bls.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8008808:	f640 11d7 	movw	r1, #2519	; 0x9d7
 800880c:	4834      	ldr	r0, [pc, #208]	; (80088e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800880e:	f7fa f816 	bl	800283e <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	2b00      	cmp	r3, #0
 800881c:	d105      	bne.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008826:	2b00      	cmp	r3, #0
 8008828:	d066      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d903      	bls.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	2b07      	cmp	r3, #7
 8008838:	d904      	bls.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800883a:	f640 11de 	movw	r1, #2526	; 0x9de
 800883e:	4828      	ldr	r0, [pc, #160]	; (80088e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8008840:	f7f9 fffd 	bl	800283e <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	2b31      	cmp	r3, #49	; 0x31
 800884a:	d904      	bls.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8008854:	d904      	bls.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8008856:	f640 11df 	movw	r1, #2527	; 0x9df
 800885a:	4821      	ldr	r0, [pc, #132]	; (80088e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800885c:	f7f9 ffef 	bl	800283e <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d903      	bls.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	2b3f      	cmp	r3, #63	; 0x3f
 800886e:	d904      	bls.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x92>
 8008870:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8008874:	481a      	ldr	r0, [pc, #104]	; (80088e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8008876:	f7f9 ffe2 	bl	800283e <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800887a:	4b1a      	ldr	r3, [pc, #104]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800887c:	2200      	movs	r2, #0
 800887e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008880:	f7fa ffb2 	bl	80037e8 <HAL_GetTick>
 8008884:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008886:	e008      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008888:	f7fa ffae 	bl	80037e8 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b02      	cmp	r3, #2
 8008894:	d901      	bls.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e1b3      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800889a:	4b13      	ldr	r3, [pc, #76]	; (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1f0      	bne.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685a      	ldr	r2, [r3, #4]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	019b      	lsls	r3, r3, #6
 80088b0:	431a      	orrs	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	071b      	lsls	r3, r3, #28
 80088b8:	490b      	ldr	r1, [pc, #44]	; (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80088ba:	4313      	orrs	r3, r2
 80088bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80088c0:	4b08      	ldr	r3, [pc, #32]	; (80088e4 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 80088c2:	2201      	movs	r2, #1
 80088c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088c6:	f7fa ff8f 	bl	80037e8 <HAL_GetTick>
 80088ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088cc:	e00e      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80088ce:	f7fa ff8b 	bl	80037e8 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d907      	bls.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088dc:	2303      	movs	r3, #3
 80088de:	e190      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80088e0:	08010c64 	.word	0x08010c64
 80088e4:	42470068 	.word	0x42470068
 80088e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088ec:	4b88      	ldr	r3, [pc, #544]	; (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0ea      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0302 	and.w	r3, r3, #2
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 8173 	beq.w	8008bec <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800890e:	f000 80a6 	beq.w	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800891a:	f000 80a0 	beq.w	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	4a7c      	ldr	r2, [pc, #496]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8008924:	4293      	cmp	r3, r2
 8008926:	f000 809a 	beq.w	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	4a7a      	ldr	r2, [pc, #488]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008930:	4293      	cmp	r3, r2
 8008932:	f000 8094 	beq.w	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	4a78      	ldr	r2, [pc, #480]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800893c:	4293      	cmp	r3, r2
 800893e:	f000 808e 	beq.w	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	4a76      	ldr	r2, [pc, #472]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008948:	4293      	cmp	r3, r2
 800894a:	f000 8088 	beq.w	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	4a74      	ldr	r2, [pc, #464]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008954:	4293      	cmp	r3, r2
 8008956:	f000 8082 	beq.w	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	4a72      	ldr	r2, [pc, #456]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d07c      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	4a70      	ldr	r2, [pc, #448]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d077      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	4a6f      	ldr	r2, [pc, #444]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d072      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	4a6d      	ldr	r2, [pc, #436]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d06d      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	4a6c      	ldr	r2, [pc, #432]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d068      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	4a6a      	ldr	r2, [pc, #424]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d063      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	4a69      	ldr	r2, [pc, #420]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d05e      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	4a67      	ldr	r2, [pc, #412]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d059      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	4a66      	ldr	r2, [pc, #408]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d054      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	4a64      	ldr	r2, [pc, #400]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d04f      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	4a63      	ldr	r2, [pc, #396]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d04a      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	4a61      	ldr	r2, [pc, #388]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d045      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	4a60      	ldr	r2, [pc, #384]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d040      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	4a5e      	ldr	r2, [pc, #376]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d03b      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	4a5d      	ldr	r2, [pc, #372]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d036      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	4a5b      	ldr	r2, [pc, #364]	; (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d031      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	4a5a      	ldr	r2, [pc, #360]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d02c      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	4a58      	ldr	r2, [pc, #352]	; (8008b6c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d027      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	4a57      	ldr	r2, [pc, #348]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d022      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	4a55      	ldr	r2, [pc, #340]	; (8008b74 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d01d      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	4a54      	ldr	r2, [pc, #336]	; (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d018      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	4a52      	ldr	r2, [pc, #328]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d013      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	4a51      	ldr	r2, [pc, #324]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d00e      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	4a4f      	ldr	r2, [pc, #316]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d009      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	4a4e      	ldr	r2, [pc, #312]	; (8008b88 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d004      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008a54:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8008a58:	484c      	ldr	r0, [pc, #304]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8008a5a:	f7f9 fef0 	bl	800283e <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]
 8008a62:	4b2b      	ldr	r3, [pc, #172]	; (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a66:	4a2a      	ldr	r2, [pc, #168]	; (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8008a6e:	4b28      	ldr	r3, [pc, #160]	; (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008a7a:	4b45      	ldr	r3, [pc, #276]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a44      	ldr	r2, [pc, #272]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a84:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a86:	f7fa feaf 	bl	80037e8 <HAL_GetTick>
 8008a8a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008a8c:	e008      	b.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008a8e:	f7fa feab 	bl	80037e8 <HAL_GetTick>
 8008a92:	4602      	mov	r2, r0
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d901      	bls.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e0b0      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008aa0:	4b3b      	ldr	r3, [pc, #236]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d0f0      	beq.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008aac:	4b18      	ldr	r3, [pc, #96]	; (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ab4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d073      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d06c      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008aca:	4b11      	ldr	r3, [pc, #68]	; (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ad2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008ad4:	4b2f      	ldr	r3, [pc, #188]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ada:	4b2e      	ldr	r3, [pc, #184]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008ae0:	4a0b      	ldr	r2, [pc, #44]	; (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008ae6:	4b0a      	ldr	r3, [pc, #40]	; (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8008ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d158      	bne.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008af2:	f7fa fe79 	bl	80037e8 <HAL_GetTick>
 8008af6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008af8:	e04e      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008afa:	f7fa fe75 	bl	80037e8 <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d945      	bls.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e078      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008b10:	40023800 	.word	0x40023800
 8008b14:	00020300 	.word	0x00020300
 8008b18:	00030300 	.word	0x00030300
 8008b1c:	00040300 	.word	0x00040300
 8008b20:	00050300 	.word	0x00050300
 8008b24:	00060300 	.word	0x00060300
 8008b28:	00070300 	.word	0x00070300
 8008b2c:	00080300 	.word	0x00080300
 8008b30:	00090300 	.word	0x00090300
 8008b34:	000a0300 	.word	0x000a0300
 8008b38:	000b0300 	.word	0x000b0300
 8008b3c:	000c0300 	.word	0x000c0300
 8008b40:	000d0300 	.word	0x000d0300
 8008b44:	000e0300 	.word	0x000e0300
 8008b48:	000f0300 	.word	0x000f0300
 8008b4c:	00100300 	.word	0x00100300
 8008b50:	00110300 	.word	0x00110300
 8008b54:	00120300 	.word	0x00120300
 8008b58:	00130300 	.word	0x00130300
 8008b5c:	00140300 	.word	0x00140300
 8008b60:	00150300 	.word	0x00150300
 8008b64:	00160300 	.word	0x00160300
 8008b68:	00170300 	.word	0x00170300
 8008b6c:	00180300 	.word	0x00180300
 8008b70:	00190300 	.word	0x00190300
 8008b74:	001a0300 	.word	0x001a0300
 8008b78:	001b0300 	.word	0x001b0300
 8008b7c:	001c0300 	.word	0x001c0300
 8008b80:	001d0300 	.word	0x001d0300
 8008b84:	001e0300 	.word	0x001e0300
 8008b88:	001f0300 	.word	0x001f0300
 8008b8c:	08010c64 	.word	0x08010c64
 8008b90:	40007000 	.word	0x40007000
 8008b94:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b98:	4b1c      	ldr	r3, [pc, #112]	; (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9c:	f003 0302 	and.w	r3, r3, #2
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d0aa      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bb0:	d10d      	bne.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008bb2:	4b16      	ldr	r3, [pc, #88]	; (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bc6:	4911      	ldr	r1, [pc, #68]	; (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	608b      	str	r3, [r1, #8]
 8008bcc:	e005      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008bce:	4b0f      	ldr	r3, [pc, #60]	; (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	4a0e      	ldr	r2, [pc, #56]	; (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008bd4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008bd8:	6093      	str	r3, [r2, #8]
 8008bda:	4b0c      	ldr	r3, [pc, #48]	; (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008bdc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008be6:	4909      	ldr	r1, [pc, #36]	; (8008c0c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8008be8:	4313      	orrs	r3, r2
 8008bea:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0308 	and.w	r3, r3, #8
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d003      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	7d1a      	ldrb	r2, [r3, #20]
 8008bfc:	4b04      	ldr	r3, [pc, #16]	; (8008c10 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8008bfe:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3718      	adds	r7, #24
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	40023800 	.word	0x40023800
 8008c10:	424711e0 	.word	0x424711e0

08008c14 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e0e2      	b.n	8008df0 <HAL_RTC_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a72      	ldr	r2, [pc, #456]	; (8008df8 <HAL_RTC_Init+0x1e4>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d004      	beq.n	8008c3e <HAL_RTC_Init+0x2a>
 8008c34:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008c38:	4870      	ldr	r0, [pc, #448]	; (8008dfc <HAL_RTC_Init+0x1e8>)
 8008c3a:	f7f9 fe00 	bl	800283e <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	2b40      	cmp	r3, #64	; 0x40
 8008c44:	d008      	beq.n	8008c58 <HAL_RTC_Init+0x44>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d004      	beq.n	8008c58 <HAL_RTC_Init+0x44>
 8008c4e:	f240 1105 	movw	r1, #261	; 0x105
 8008c52:	486a      	ldr	r0, [pc, #424]	; (8008dfc <HAL_RTC_Init+0x1e8>)
 8008c54:	f7f9 fdf3 	bl	800283e <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	2b7f      	cmp	r3, #127	; 0x7f
 8008c5e:	d904      	bls.n	8008c6a <HAL_RTC_Init+0x56>
 8008c60:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008c64:	4865      	ldr	r0, [pc, #404]	; (8008dfc <HAL_RTC_Init+0x1e8>)
 8008c66:	f7f9 fdea 	bl	800283e <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c72:	d304      	bcc.n	8008c7e <HAL_RTC_Init+0x6a>
 8008c74:	f240 1107 	movw	r1, #263	; 0x107
 8008c78:	4860      	ldr	r0, [pc, #384]	; (8008dfc <HAL_RTC_Init+0x1e8>)
 8008c7a:	f7f9 fde0 	bl	800283e <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d013      	beq.n	8008cae <HAL_RTC_Init+0x9a>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c8e:	d00e      	beq.n	8008cae <HAL_RTC_Init+0x9a>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c98:	d009      	beq.n	8008cae <HAL_RTC_Init+0x9a>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ca2:	d004      	beq.n	8008cae <HAL_RTC_Init+0x9a>
 8008ca4:	f44f 7184 	mov.w	r1, #264	; 0x108
 8008ca8:	4854      	ldr	r0, [pc, #336]	; (8008dfc <HAL_RTC_Init+0x1e8>)
 8008caa:	f7f9 fdc8 	bl	800283e <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d009      	beq.n	8008cca <HAL_RTC_Init+0xb6>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cbe:	d004      	beq.n	8008cca <HAL_RTC_Init+0xb6>
 8008cc0:	f240 1109 	movw	r1, #265	; 0x109
 8008cc4:	484d      	ldr	r0, [pc, #308]	; (8008dfc <HAL_RTC_Init+0x1e8>)
 8008cc6:	f7f9 fdba 	bl	800283e <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d009      	beq.n	8008ce6 <HAL_RTC_Init+0xd2>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008cda:	d004      	beq.n	8008ce6 <HAL_RTC_Init+0xd2>
 8008cdc:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8008ce0:	4846      	ldr	r0, [pc, #280]	; (8008dfc <HAL_RTC_Init+0x1e8>)
 8008ce2:	f7f9 fdac 	bl	800283e <assert_failed>

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	7f5b      	ldrb	r3, [r3, #29]
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d123      	bne.n	8008d38 <HAL_RTC_Init+0x124>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a41      	ldr	r2, [pc, #260]	; (8008e00 <HAL_RTC_Init+0x1ec>)
 8008cfa:	621a      	str	r2, [r3, #32]
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a41      	ldr	r2, [pc, #260]	; (8008e04 <HAL_RTC_Init+0x1f0>)
 8008d00:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a40      	ldr	r2, [pc, #256]	; (8008e08 <HAL_RTC_Init+0x1f4>)
 8008d06:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a40      	ldr	r2, [pc, #256]	; (8008e0c <HAL_RTC_Init+0x1f8>)
 8008d0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a3f      	ldr	r2, [pc, #252]	; (8008e10 <HAL_RTC_Init+0x1fc>)
 8008d12:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER2_SUPPORT)
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
#endif /* RTC_TAMPER2_SUPPORT */

    if (hrtc->MspInitCallback == NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d102      	bne.n	8008d22 <HAL_RTC_Init+0x10e>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a3d      	ldr	r2, [pc, #244]	; (8008e14 <HAL_RTC_Init+0x200>)
 8008d20:	635a      	str	r2, [r3, #52]	; 0x34
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	4798      	blx	r3

    if (hrtc->MspDeInitCallback == NULL)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d102      	bne.n	8008d38 <HAL_RTC_Init+0x124>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a38      	ldr	r2, [pc, #224]	; (8008e18 <HAL_RTC_Init+0x204>)
 8008d36:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	22ca      	movs	r2, #202	; 0xca
 8008d44:	625a      	str	r2, [r3, #36]	; 0x24
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2253      	movs	r2, #83	; 0x53
 8008d4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 faea 	bl	8009328 <RTC_EnterInitMode>
 8008d54:	4603      	mov	r3, r0
 8008d56:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d12c      	bne.n	8008db8 <HAL_RTC_Init+0x1a4>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	6812      	ldr	r2, [r2, #0]
 8008d68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d70:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6899      	ldr	r1, [r3, #8]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685a      	ldr	r2, [r3, #4]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	431a      	orrs	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	431a      	orrs	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	68d2      	ldr	r2, [r2, #12]
 8008d98:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6919      	ldr	r1, [r3, #16]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	041a      	lsls	r2, r3, #16
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 faf1 	bl	8009396 <RTC_ExitInitMode>
 8008db4:	4603      	mov	r3, r0
 8008db6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d113      	bne.n	8008de6 <HAL_RTC_Init+0x1d2>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008dcc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	699a      	ldr	r2, [r3, #24]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	22ff      	movs	r2, #255	; 0xff
 8008dec:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	40002800 	.word	0x40002800
 8008dfc:	08010cdc 	.word	0x08010cdc
 8008e00:	080092c5 	.word	0x080092c5
 8008e04:	08009739 	.word	0x08009739
 8008e08:	08009453 	.word	0x08009453
 8008e0c:	08009689 	.word	0x08009689
 8008e10:	08009467 	.word	0x08009467
 8008e14:	08002931 	.word	0x08002931
 8008e18:	08002999 	.word	0x08002999

08008e1c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008e1c:	b590      	push	{r4, r7, lr}
 8008e1e:	b087      	sub	sp, #28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d007      	beq.n	8008e42 <HAL_RTC_SetTime+0x26>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d004      	beq.n	8008e42 <HAL_RTC_SetTime+0x26>
 8008e38:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 8008e3c:	489a      	ldr	r0, [pc, #616]	; (80090a8 <HAL_RTC_SetTime+0x28c>)
 8008e3e:	f7f9 fcfe 	bl	800283e <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e4a:	d00d      	beq.n	8008e68 <HAL_RTC_SetTime+0x4c>
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e54:	d008      	beq.n	8008e68 <HAL_RTC_SetTime+0x4c>
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d004      	beq.n	8008e68 <HAL_RTC_SetTime+0x4c>
 8008e5e:	f240 21b5 	movw	r1, #693	; 0x2b5
 8008e62:	4891      	ldr	r0, [pc, #580]	; (80090a8 <HAL_RTC_SetTime+0x28c>)
 8008e64:	f7f9 fceb 	bl	800283e <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d009      	beq.n	8008e84 <HAL_RTC_SetTime+0x68>
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e78:	d004      	beq.n	8008e84 <HAL_RTC_SetTime+0x68>
 8008e7a:	f240 21b6 	movw	r1, #694	; 0x2b6
 8008e7e:	488a      	ldr	r0, [pc, #552]	; (80090a8 <HAL_RTC_SetTime+0x28c>)
 8008e80:	f7f9 fcdd 	bl	800283e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	7f1b      	ldrb	r3, [r3, #28]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d101      	bne.n	8008e90 <HAL_RTC_SetTime+0x74>
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	e107      	b.n	80090a0 <HAL_RTC_SetTime+0x284>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2201      	movs	r2, #1
 8008e94:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2202      	movs	r2, #2
 8008e9a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d15c      	bne.n	8008f5c <HAL_RTC_SetTime+0x140>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d01a      	beq.n	8008ee6 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d003      	beq.n	8008ec0 <HAL_RTC_SetTime+0xa4>
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	2b0c      	cmp	r3, #12
 8008ebe:	d904      	bls.n	8008eca <HAL_RTC_SetTime+0xae>
 8008ec0:	f240 21c1 	movw	r1, #705	; 0x2c1
 8008ec4:	4878      	ldr	r0, [pc, #480]	; (80090a8 <HAL_RTC_SetTime+0x28c>)
 8008ec6:	f7f9 fcba 	bl	800283e <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	78db      	ldrb	r3, [r3, #3]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d015      	beq.n	8008efe <HAL_RTC_SetTime+0xe2>
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	78db      	ldrb	r3, [r3, #3]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d011      	beq.n	8008efe <HAL_RTC_SetTime+0xe2>
 8008eda:	f240 21c2 	movw	r1, #706	; 0x2c2
 8008ede:	4872      	ldr	r0, [pc, #456]	; (80090a8 <HAL_RTC_SetTime+0x28c>)
 8008ee0:	f7f9 fcad 	bl	800283e <assert_failed>
 8008ee4:	e00b      	b.n	8008efe <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	2b17      	cmp	r3, #23
 8008ef2:	d904      	bls.n	8008efe <HAL_RTC_SetTime+0xe2>
 8008ef4:	f240 21c7 	movw	r1, #711	; 0x2c7
 8008ef8:	486b      	ldr	r0, [pc, #428]	; (80090a8 <HAL_RTC_SetTime+0x28c>)
 8008efa:	f7f9 fca0 	bl	800283e <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	785b      	ldrb	r3, [r3, #1]
 8008f02:	2b3b      	cmp	r3, #59	; 0x3b
 8008f04:	d904      	bls.n	8008f10 <HAL_RTC_SetTime+0xf4>
 8008f06:	f240 21c9 	movw	r1, #713	; 0x2c9
 8008f0a:	4867      	ldr	r0, [pc, #412]	; (80090a8 <HAL_RTC_SetTime+0x28c>)
 8008f0c:	f7f9 fc97 	bl	800283e <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	789b      	ldrb	r3, [r3, #2]
 8008f14:	2b3b      	cmp	r3, #59	; 0x3b
 8008f16:	d904      	bls.n	8008f22 <HAL_RTC_SetTime+0x106>
 8008f18:	f240 21ca 	movw	r1, #714	; 0x2ca
 8008f1c:	4862      	ldr	r0, [pc, #392]	; (80090a8 <HAL_RTC_SetTime+0x28c>)
 8008f1e:	f7f9 fc8e 	bl	800283e <assert_failed>

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 fa5a 	bl	80093e0 <RTC_ByteToBcd2>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	785b      	ldrb	r3, [r3, #1]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 fa53 	bl	80093e0 <RTC_ByteToBcd2>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008f3e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	789b      	ldrb	r3, [r3, #2]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fa4b 	bl	80093e0 <RTC_ByteToBcd2>
 8008f4a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008f4c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	78db      	ldrb	r3, [r3, #3]
 8008f54:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008f56:	4313      	orrs	r3, r2
 8008f58:	617b      	str	r3, [r7, #20]
 8008f5a:	e062      	b.n	8009022 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d022      	beq.n	8008fb0 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 fa53 	bl	800941a <RTC_Bcd2ToByte>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d007      	beq.n	8008f8a <HAL_RTC_SetTime+0x16e>
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 fa4b 	bl	800941a <RTC_Bcd2ToByte>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b0c      	cmp	r3, #12
 8008f88:	d904      	bls.n	8008f94 <HAL_RTC_SetTime+0x178>
 8008f8a:	f240 21d5 	movw	r1, #725	; 0x2d5
 8008f8e:	4846      	ldr	r0, [pc, #280]	; (80090a8 <HAL_RTC_SetTime+0x28c>)
 8008f90:	f7f9 fc55 	bl	800283e <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	78db      	ldrb	r3, [r3, #3]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d019      	beq.n	8008fd0 <HAL_RTC_SetTime+0x1b4>
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	78db      	ldrb	r3, [r3, #3]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d015      	beq.n	8008fd0 <HAL_RTC_SetTime+0x1b4>
 8008fa4:	f240 21d6 	movw	r1, #726	; 0x2d6
 8008fa8:	483f      	ldr	r0, [pc, #252]	; (80090a8 <HAL_RTC_SetTime+0x28c>)
 8008faa:	f7f9 fc48 	bl	800283e <assert_failed>
 8008fae:	e00f      	b.n	8008fd0 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fa2d 	bl	800941a <RTC_Bcd2ToByte>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b17      	cmp	r3, #23
 8008fc4:	d904      	bls.n	8008fd0 <HAL_RTC_SetTime+0x1b4>
 8008fc6:	f240 21db 	movw	r1, #731	; 0x2db
 8008fca:	4837      	ldr	r0, [pc, #220]	; (80090a8 <HAL_RTC_SetTime+0x28c>)
 8008fcc:	f7f9 fc37 	bl	800283e <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	785b      	ldrb	r3, [r3, #1]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 fa20 	bl	800941a <RTC_Bcd2ToByte>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b3b      	cmp	r3, #59	; 0x3b
 8008fde:	d904      	bls.n	8008fea <HAL_RTC_SetTime+0x1ce>
 8008fe0:	f240 21dd 	movw	r1, #733	; 0x2dd
 8008fe4:	4830      	ldr	r0, [pc, #192]	; (80090a8 <HAL_RTC_SetTime+0x28c>)
 8008fe6:	f7f9 fc2a 	bl	800283e <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	789b      	ldrb	r3, [r3, #2]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fa13 	bl	800941a <RTC_Bcd2ToByte>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b3b      	cmp	r3, #59	; 0x3b
 8008ff8:	d904      	bls.n	8009004 <HAL_RTC_SetTime+0x1e8>
 8008ffa:	f240 21de 	movw	r1, #734	; 0x2de
 8008ffe:	482a      	ldr	r0, [pc, #168]	; (80090a8 <HAL_RTC_SetTime+0x28c>)
 8009000:	f7f9 fc1d 	bl	800283e <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	785b      	ldrb	r3, [r3, #1]
 800900e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009010:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009016:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	78db      	ldrb	r3, [r3, #3]
 800901c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800901e:	4313      	orrs	r3, r2
 8009020:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	22ca      	movs	r2, #202	; 0xca
 8009028:	625a      	str	r2, [r3, #36]	; 0x24
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2253      	movs	r2, #83	; 0x53
 8009030:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f000 f978 	bl	8009328 <RTC_EnterInitMode>
 8009038:	4603      	mov	r3, r0
 800903a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800903c:	7cfb      	ldrb	r3, [r7, #19]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d120      	bne.n	8009084 <HAL_RTC_SetTime+0x268>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800904c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009050:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	689a      	ldr	r2, [r3, #8]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009060:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	6899      	ldr	r1, [r3, #8]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	68da      	ldr	r2, [r3, #12]
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	431a      	orrs	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f000 f98b 	bl	8009396 <RTC_ExitInitMode>
 8009080:	4603      	mov	r3, r0
 8009082:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009084:	7cfb      	ldrb	r3, [r7, #19]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d102      	bne.n	8009090 <HAL_RTC_SetTime+0x274>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2201      	movs	r2, #1
 800908e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	22ff      	movs	r2, #255	; 0xff
 8009096:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	771a      	strb	r2, [r3, #28]

  return status;
 800909e:	7cfb      	ldrb	r3, [r7, #19]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	371c      	adds	r7, #28
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd90      	pop	{r4, r7, pc}
 80090a8:	08010cdc 	.word	0x08010cdc

080090ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80090ac:	b590      	push	{r4, r7, lr}
 80090ae:	b087      	sub	sp, #28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80090b8:	2300      	movs	r3, #0
 80090ba:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d007      	beq.n	80090d2 <HAL_RTC_SetDate+0x26>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d004      	beq.n	80090d2 <HAL_RTC_SetDate+0x26>
 80090c8:	f240 3153 	movw	r1, #851	; 0x353
 80090cc:	487c      	ldr	r0, [pc, #496]	; (80092c0 <HAL_RTC_SetDate+0x214>)
 80090ce:	f7f9 fbb6 	bl	800283e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	7f1b      	ldrb	r3, [r3, #28]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d101      	bne.n	80090de <HAL_RTC_SetDate+0x32>
 80090da:	2302      	movs	r3, #2
 80090dc:	e0ec      	b.n	80092b8 <HAL_RTC_SetDate+0x20c>
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2201      	movs	r2, #1
 80090e2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2202      	movs	r2, #2
 80090e8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10e      	bne.n	800910e <HAL_RTC_SetDate+0x62>
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	785b      	ldrb	r3, [r3, #1]
 80090f4:	f003 0310 	and.w	r3, r3, #16
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d008      	beq.n	800910e <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	785b      	ldrb	r3, [r3, #1]
 8009100:	f023 0310 	bic.w	r3, r3, #16
 8009104:	b2db      	uxtb	r3, r3
 8009106:	330a      	adds	r3, #10
 8009108:	b2da      	uxtb	r2, r3
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d01c      	beq.n	8009150 <HAL_RTC_SetDate+0xa4>
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	2b02      	cmp	r3, #2
 800911c:	d018      	beq.n	8009150 <HAL_RTC_SetDate+0xa4>
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	2b03      	cmp	r3, #3
 8009124:	d014      	beq.n	8009150 <HAL_RTC_SetDate+0xa4>
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	2b04      	cmp	r3, #4
 800912c:	d010      	beq.n	8009150 <HAL_RTC_SetDate+0xa4>
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	2b05      	cmp	r3, #5
 8009134:	d00c      	beq.n	8009150 <HAL_RTC_SetDate+0xa4>
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	2b06      	cmp	r3, #6
 800913c:	d008      	beq.n	8009150 <HAL_RTC_SetDate+0xa4>
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	2b07      	cmp	r3, #7
 8009144:	d004      	beq.n	8009150 <HAL_RTC_SetDate+0xa4>
 8009146:	f240 315f 	movw	r1, #863	; 0x35f
 800914a:	485d      	ldr	r0, [pc, #372]	; (80092c0 <HAL_RTC_SetDate+0x214>)
 800914c:	f7f9 fb77 	bl	800283e <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d13f      	bne.n	80091d6 <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	78db      	ldrb	r3, [r3, #3]
 800915a:	2b63      	cmp	r3, #99	; 0x63
 800915c:	d904      	bls.n	8009168 <HAL_RTC_SetDate+0xbc>
 800915e:	f240 3163 	movw	r1, #867	; 0x363
 8009162:	4857      	ldr	r0, [pc, #348]	; (80092c0 <HAL_RTC_SetDate+0x214>)
 8009164:	f7f9 fb6b 	bl	800283e <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	785b      	ldrb	r3, [r3, #1]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d003      	beq.n	8009178 <HAL_RTC_SetDate+0xcc>
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	785b      	ldrb	r3, [r3, #1]
 8009174:	2b0c      	cmp	r3, #12
 8009176:	d904      	bls.n	8009182 <HAL_RTC_SetDate+0xd6>
 8009178:	f44f 7159 	mov.w	r1, #868	; 0x364
 800917c:	4850      	ldr	r0, [pc, #320]	; (80092c0 <HAL_RTC_SetDate+0x214>)
 800917e:	f7f9 fb5e 	bl	800283e <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	789b      	ldrb	r3, [r3, #2]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d003      	beq.n	8009192 <HAL_RTC_SetDate+0xe6>
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	789b      	ldrb	r3, [r3, #2]
 800918e:	2b1f      	cmp	r3, #31
 8009190:	d904      	bls.n	800919c <HAL_RTC_SetDate+0xf0>
 8009192:	f240 3165 	movw	r1, #869	; 0x365
 8009196:	484a      	ldr	r0, [pc, #296]	; (80092c0 <HAL_RTC_SetDate+0x214>)
 8009198:	f7f9 fb51 	bl	800283e <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	78db      	ldrb	r3, [r3, #3]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f000 f91d 	bl	80093e0 <RTC_ByteToBcd2>
 80091a6:	4603      	mov	r3, r0
 80091a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	785b      	ldrb	r3, [r3, #1]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f000 f916 	bl	80093e0 <RTC_ByteToBcd2>
 80091b4:	4603      	mov	r3, r0
 80091b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80091b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	789b      	ldrb	r3, [r3, #2]
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 f90e 	bl	80093e0 <RTC_ByteToBcd2>
 80091c4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80091c6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80091d0:	4313      	orrs	r3, r2
 80091d2:	617b      	str	r3, [r7, #20]
 80091d4:	e045      	b.n	8009262 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	78db      	ldrb	r3, [r3, #3]
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 f91d 	bl	800941a <RTC_Bcd2ToByte>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b63      	cmp	r3, #99	; 0x63
 80091e4:	d904      	bls.n	80091f0 <HAL_RTC_SetDate+0x144>
 80091e6:	f240 316e 	movw	r1, #878	; 0x36e
 80091ea:	4835      	ldr	r0, [pc, #212]	; (80092c0 <HAL_RTC_SetDate+0x214>)
 80091ec:	f7f9 fb27 	bl	800283e <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	785b      	ldrb	r3, [r3, #1]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f000 f910 	bl	800941a <RTC_Bcd2ToByte>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d007      	beq.n	8009210 <HAL_RTC_SetDate+0x164>
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	785b      	ldrb	r3, [r3, #1]
 8009204:	4618      	mov	r0, r3
 8009206:	f000 f908 	bl	800941a <RTC_Bcd2ToByte>
 800920a:	4603      	mov	r3, r0
 800920c:	2b0c      	cmp	r3, #12
 800920e:	d904      	bls.n	800921a <HAL_RTC_SetDate+0x16e>
 8009210:	f240 316f 	movw	r1, #879	; 0x36f
 8009214:	482a      	ldr	r0, [pc, #168]	; (80092c0 <HAL_RTC_SetDate+0x214>)
 8009216:	f7f9 fb12 	bl	800283e <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	789b      	ldrb	r3, [r3, #2]
 800921e:	4618      	mov	r0, r3
 8009220:	f000 f8fb 	bl	800941a <RTC_Bcd2ToByte>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d007      	beq.n	800923a <HAL_RTC_SetDate+0x18e>
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	789b      	ldrb	r3, [r3, #2]
 800922e:	4618      	mov	r0, r3
 8009230:	f000 f8f3 	bl	800941a <RTC_Bcd2ToByte>
 8009234:	4603      	mov	r3, r0
 8009236:	2b1f      	cmp	r3, #31
 8009238:	d904      	bls.n	8009244 <HAL_RTC_SetDate+0x198>
 800923a:	f44f 715c 	mov.w	r1, #880	; 0x370
 800923e:	4820      	ldr	r0, [pc, #128]	; (80092c0 <HAL_RTC_SetDate+0x214>)
 8009240:	f7f9 fafd 	bl	800283e <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	78db      	ldrb	r3, [r3, #3]
 8009248:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	785b      	ldrb	r3, [r3, #1]
 800924e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009250:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009256:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800925e:	4313      	orrs	r3, r2
 8009260:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	22ca      	movs	r2, #202	; 0xca
 8009268:	625a      	str	r2, [r3, #36]	; 0x24
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2253      	movs	r2, #83	; 0x53
 8009270:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f000 f858 	bl	8009328 <RTC_EnterInitMode>
 8009278:	4603      	mov	r3, r0
 800927a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800927c:	7cfb      	ldrb	r3, [r7, #19]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10c      	bne.n	800929c <HAL_RTC_SetDate+0x1f0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800928c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009290:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f000 f87f 	bl	8009396 <RTC_ExitInitMode>
 8009298:	4603      	mov	r3, r0
 800929a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800929c:	7cfb      	ldrb	r3, [r7, #19]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d102      	bne.n	80092a8 <HAL_RTC_SetDate+0x1fc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2201      	movs	r2, #1
 80092a6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	22ff      	movs	r2, #255	; 0xff
 80092ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	771a      	strb	r2, [r3, #28]

  return status;
 80092b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	371c      	adds	r7, #28
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd90      	pop	{r4, r7, pc}
 80092c0:	08010cdc 	.word	0x08010cdc

080092c4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80092cc:	bf00      	nop
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80092e0:	2300      	movs	r3, #0
 80092e2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68da      	ldr	r2, [r3, #12]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80092f2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80092f4:	f7fa fa78 	bl	80037e8 <HAL_GetTick>
 80092f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80092fa:	e009      	b.n	8009310 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80092fc:	f7fa fa74 	bl	80037e8 <HAL_GetTick>
 8009300:	4602      	mov	r2, r0
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800930a:	d901      	bls.n	8009310 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e007      	b.n	8009320 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	f003 0320 	and.w	r3, r3, #32
 800931a:	2b00      	cmp	r3, #0
 800931c:	d0ee      	beq.n	80092fc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009330:	2300      	movs	r3, #0
 8009332:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009342:	2b00      	cmp	r3, #0
 8009344:	d122      	bne.n	800938c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009354:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009356:	f7fa fa47 	bl	80037e8 <HAL_GetTick>
 800935a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800935c:	e00c      	b.n	8009378 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800935e:	f7fa fa43 	bl	80037e8 <HAL_GetTick>
 8009362:	4602      	mov	r2, r0
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800936c:	d904      	bls.n	8009378 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2204      	movs	r2, #4
 8009372:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009382:	2b00      	cmp	r3, #0
 8009384:	d102      	bne.n	800938c <RTC_EnterInitMode+0x64>
 8009386:	7bfb      	ldrb	r3, [r7, #15]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d1e8      	bne.n	800935e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800938c:	7bfb      	ldrb	r3, [r7, #15]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68da      	ldr	r2, [r3, #12]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093b0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	f003 0320 	and.w	r3, r3, #32
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10a      	bne.n	80093d6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7ff ff89 	bl	80092d8 <HAL_RTC_WaitForSynchro>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d004      	beq.n	80093d6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2204      	movs	r2, #4
 80093d0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	4603      	mov	r3, r0
 80093e8:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80093ea:	2300      	movs	r3, #0
 80093ec:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80093ee:	e005      	b.n	80093fc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
 80093f2:	3301      	adds	r3, #1
 80093f4:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80093f6:	79fb      	ldrb	r3, [r7, #7]
 80093f8:	3b0a      	subs	r3, #10
 80093fa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80093fc:	79fb      	ldrb	r3, [r7, #7]
 80093fe:	2b09      	cmp	r3, #9
 8009400:	d8f6      	bhi.n	80093f0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009402:	7bfb      	ldrb	r3, [r7, #15]
 8009404:	011b      	lsls	r3, r3, #4
 8009406:	b2da      	uxtb	r2, r3
 8009408:	79fb      	ldrb	r3, [r7, #7]
 800940a:	4313      	orrs	r3, r2
 800940c:	b2db      	uxtb	r3, r3
}
 800940e:	4618      	mov	r0, r3
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800941a:	b480      	push	{r7}
 800941c:	b085      	sub	sp, #20
 800941e:	af00      	add	r7, sp, #0
 8009420:	4603      	mov	r3, r0
 8009422:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	091b      	lsrs	r3, r3, #4
 800942c:	b2db      	uxtb	r3, r3
 800942e:	461a      	mov	r2, r3
 8009430:	0092      	lsls	r2, r2, #2
 8009432:	4413      	add	r3, r2
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8009438:	79fb      	ldrb	r3, [r7, #7]
 800943a:	f003 030f 	and.w	r3, r3, #15
 800943e:	b2da      	uxtb	r2, r3
 8009440:	7bfb      	ldrb	r3, [r7, #15]
 8009442:	4413      	add	r3, r2
 8009444:	b2db      	uxtb	r3, r3
}
 8009446:	4618      	mov	r0, r3
 8009448:	3714      	adds	r7, #20
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr

08009452 <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009452:	b480      	push	{r7}
 8009454:	b083      	sub	sp, #12
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 800945a:	bf00      	nop
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8009466:	b480      	push	{r7}
 8009468:	b083      	sub	sp, #12
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 800946e:	bf00      	nop
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
	...

0800947c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b086      	sub	sp, #24
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009488:	4b68      	ldr	r3, [pc, #416]	; (800962c <HAL_RTCEx_SetWakeUpTimer_IT+0x1b0>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a68      	ldr	r2, [pc, #416]	; (8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b4>)
 800948e:	fba2 2303 	umull	r2, r3, r2, r3
 8009492:	0adb      	lsrs	r3, r3, #11
 8009494:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009498:	fb02 f303 	mul.w	r3, r2, r3
 800949c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d013      	beq.n	80094cc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d010      	beq.n	80094cc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d00d      	beq.n	80094cc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d00a      	beq.n	80094cc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b04      	cmp	r3, #4
 80094ba:	d007      	beq.n	80094cc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b06      	cmp	r3, #6
 80094c0:	d004      	beq.n	80094cc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 80094c2:	f240 31c5 	movw	r1, #965	; 0x3c5
 80094c6:	485b      	ldr	r0, [pc, #364]	; (8009634 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b8>)
 80094c8:	f7f9 f9b9 	bl	800283e <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094d2:	d304      	bcc.n	80094de <HAL_RTCEx_SetWakeUpTimer_IT+0x62>
 80094d4:	f240 31c6 	movw	r1, #966	; 0x3c6
 80094d8:	4856      	ldr	r0, [pc, #344]	; (8009634 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b8>)
 80094da:	f7f9 f9b0 	bl	800283e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	7f1b      	ldrb	r3, [r3, #28]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d101      	bne.n	80094ea <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
 80094e6:	2302      	movs	r3, #2
 80094e8:	e09b      	b.n	8009622 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2201      	movs	r2, #1
 80094ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2202      	movs	r2, #2
 80094f4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	22ca      	movs	r2, #202	; 0xca
 80094fc:	625a      	str	r2, [r3, #36]	; 0x24
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2253      	movs	r2, #83	; 0x53
 8009504:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009510:	2b00      	cmp	r3, #0
 8009512:	d017      	beq.n	8009544 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	1e5a      	subs	r2, r3, #1
 8009518:	617a      	str	r2, [r7, #20]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10b      	bne.n	8009536 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	22ff      	movs	r2, #255	; 0xff
 8009524:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2203      	movs	r2, #3
 800952a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	e075      	b.n	8009622 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	f003 0304 	and.w	r3, r3, #4
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1e7      	bne.n	8009514 <HAL_RTCEx_SetWakeUpTimer_IT+0x98>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	689a      	ldr	r2, [r3, #8]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009552:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	b2da      	uxtb	r2, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8009564:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009566:	4b31      	ldr	r3, [pc, #196]	; (800962c <HAL_RTCEx_SetWakeUpTimer_IT+0x1b0>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a31      	ldr	r2, [pc, #196]	; (8009630 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b4>)
 800956c:	fba2 2303 	umull	r2, r3, r2, r3
 8009570:	0adb      	lsrs	r3, r3, #11
 8009572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009576:	fb02 f303 	mul.w	r3, r2, r3
 800957a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	1e5a      	subs	r2, r3, #1
 8009580:	617a      	str	r2, [r7, #20]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10b      	bne.n	800959e <HAL_RTCEx_SetWakeUpTimer_IT+0x122>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	22ff      	movs	r2, #255	; 0xff
 800958c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2203      	movs	r2, #3
 8009592:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800959a:	2303      	movs	r3, #3
 800959c:	e041      	b.n	8009622 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	f003 0304 	and.w	r3, r3, #4
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0e7      	beq.n	800957c <HAL_RTCEx_SetWakeUpTimer_IT+0x100>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	689a      	ldr	r2, [r3, #8]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 0207 	bic.w	r2, r2, #7
 80095ba:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6899      	ldr	r1, [r3, #8]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80095d4:	4b18      	ldr	r3, [pc, #96]	; (8009638 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a17      	ldr	r2, [pc, #92]	; (8009638 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 80095da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80095de:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80095e0:	4b15      	ldr	r3, [pc, #84]	; (8009638 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	4a14      	ldr	r2, [pc, #80]	; (8009638 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 80095e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80095ea:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	689a      	ldr	r2, [r3, #8]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095fa:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	689a      	ldr	r2, [r3, #8]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800960a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	22ff      	movs	r2, #255	; 0xff
 8009612:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2201      	movs	r2, #1
 8009618:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	20000004 	.word	0x20000004
 8009630:	10624dd3 	.word	0x10624dd3
 8009634:	08010d50 	.word	0x08010d50
 8009638:	40013c00 	.word	0x40013c00

0800963c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00c      	beq.n	800966c <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>
  {
    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	4798      	blx	r3
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	b2da      	uxtb	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800966a:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800966c:	4b05      	ldr	r3, [pc, #20]	; (8009684 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800966e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8009672:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	775a      	strb	r2, [r3, #29]
}
 800967a:	bf00      	nop
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	40013c00 	.word	0x40013c00

08009688 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d008      	beq.n	80096be <HAL_RTCEx_SetCalibrationOutPut+0x22>
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80096b2:	d004      	beq.n	80096be <HAL_RTCEx_SetCalibrationOutPut+0x22>
 80096b4:	f240 612a 	movw	r1, #1578	; 0x62a
 80096b8:	481e      	ldr	r0, [pc, #120]	; (8009734 <HAL_RTCEx_SetCalibrationOutPut+0x98>)
 80096ba:	f7f9 f8c0 	bl	800283e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	7f1b      	ldrb	r3, [r3, #28]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d101      	bne.n	80096ca <HAL_RTCEx_SetCalibrationOutPut+0x2e>
 80096c6:	2302      	movs	r3, #2
 80096c8:	e030      	b.n	800972c <HAL_RTCEx_SetCalibrationOutPut+0x90>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2202      	movs	r2, #2
 80096d4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	22ca      	movs	r2, #202	; 0xca
 80096dc:	625a      	str	r2, [r3, #36]	; 0x24
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2253      	movs	r2, #83	; 0x53
 80096e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	689a      	ldr	r2, [r3, #8]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80096f4:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	6899      	ldr	r1, [r3, #8]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	683a      	ldr	r2, [r7, #0]
 8009702:	430a      	orrs	r2, r1
 8009704:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	689a      	ldr	r2, [r3, #8]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009714:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	22ff      	movs	r2, #255	; 0xff
 800971c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	08010d50 	.word	0x08010d50

08009738 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e1db      	b.n	8009b16 <HAL_SPI_Init+0x3ca>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a75      	ldr	r2, [pc, #468]	; (8009938 <HAL_SPI_Init+0x1ec>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d018      	beq.n	800979a <HAL_SPI_Init+0x4e>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a73      	ldr	r2, [pc, #460]	; (800993c <HAL_SPI_Init+0x1f0>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d013      	beq.n	800979a <HAL_SPI_Init+0x4e>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a72      	ldr	r2, [pc, #456]	; (8009940 <HAL_SPI_Init+0x1f4>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d00e      	beq.n	800979a <HAL_SPI_Init+0x4e>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a70      	ldr	r2, [pc, #448]	; (8009944 <HAL_SPI_Init+0x1f8>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d009      	beq.n	800979a <HAL_SPI_Init+0x4e>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a6f      	ldr	r2, [pc, #444]	; (8009948 <HAL_SPI_Init+0x1fc>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d004      	beq.n	800979a <HAL_SPI_Init+0x4e>
 8009790:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009794:	486d      	ldr	r0, [pc, #436]	; (800994c <HAL_SPI_Init+0x200>)
 8009796:	f7f9 f852 	bl	800283e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d009      	beq.n	80097b6 <HAL_SPI_Init+0x6a>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097aa:	d004      	beq.n	80097b6 <HAL_SPI_Init+0x6a>
 80097ac:	f240 1141 	movw	r1, #321	; 0x141
 80097b0:	4866      	ldr	r0, [pc, #408]	; (800994c <HAL_SPI_Init+0x200>)
 80097b2:	f7f9 f844 	bl	800283e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00e      	beq.n	80097dc <HAL_SPI_Init+0x90>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097c6:	d009      	beq.n	80097dc <HAL_SPI_Init+0x90>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097d0:	d004      	beq.n	80097dc <HAL_SPI_Init+0x90>
 80097d2:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80097d6:	485d      	ldr	r0, [pc, #372]	; (800994c <HAL_SPI_Init+0x200>)
 80097d8:	f7f9 f831 	bl	800283e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097e4:	d008      	beq.n	80097f8 <HAL_SPI_Init+0xac>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d004      	beq.n	80097f8 <HAL_SPI_Init+0xac>
 80097ee:	f240 1143 	movw	r1, #323	; 0x143
 80097f2:	4856      	ldr	r0, [pc, #344]	; (800994c <HAL_SPI_Init+0x200>)
 80097f4:	f7f9 f823 	bl	800283e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009800:	d00d      	beq.n	800981e <HAL_SPI_Init+0xd2>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	699b      	ldr	r3, [r3, #24]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d009      	beq.n	800981e <HAL_SPI_Init+0xd2>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009812:	d004      	beq.n	800981e <HAL_SPI_Init+0xd2>
 8009814:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8009818:	484c      	ldr	r0, [pc, #304]	; (800994c <HAL_SPI_Init+0x200>)
 800981a:	f7f9 f810 	bl	800283e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d020      	beq.n	8009868 <HAL_SPI_Init+0x11c>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	2b08      	cmp	r3, #8
 800982c:	d01c      	beq.n	8009868 <HAL_SPI_Init+0x11c>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	69db      	ldr	r3, [r3, #28]
 8009832:	2b10      	cmp	r3, #16
 8009834:	d018      	beq.n	8009868 <HAL_SPI_Init+0x11c>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	2b18      	cmp	r3, #24
 800983c:	d014      	beq.n	8009868 <HAL_SPI_Init+0x11c>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	69db      	ldr	r3, [r3, #28]
 8009842:	2b20      	cmp	r3, #32
 8009844:	d010      	beq.n	8009868 <HAL_SPI_Init+0x11c>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	69db      	ldr	r3, [r3, #28]
 800984a:	2b28      	cmp	r3, #40	; 0x28
 800984c:	d00c      	beq.n	8009868 <HAL_SPI_Init+0x11c>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	2b30      	cmp	r3, #48	; 0x30
 8009854:	d008      	beq.n	8009868 <HAL_SPI_Init+0x11c>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	69db      	ldr	r3, [r3, #28]
 800985a:	2b38      	cmp	r3, #56	; 0x38
 800985c:	d004      	beq.n	8009868 <HAL_SPI_Init+0x11c>
 800985e:	f240 1145 	movw	r1, #325	; 0x145
 8009862:	483a      	ldr	r0, [pc, #232]	; (800994c <HAL_SPI_Init+0x200>)
 8009864:	f7f8 ffeb 	bl	800283e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a1b      	ldr	r3, [r3, #32]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d008      	beq.n	8009882 <HAL_SPI_Init+0x136>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a1b      	ldr	r3, [r3, #32]
 8009874:	2b80      	cmp	r3, #128	; 0x80
 8009876:	d004      	beq.n	8009882 <HAL_SPI_Init+0x136>
 8009878:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800987c:	4833      	ldr	r0, [pc, #204]	; (800994c <HAL_SPI_Init+0x200>)
 800987e:	f7f8 ffde 	bl	800283e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009886:	2b00      	cmp	r3, #0
 8009888:	d008      	beq.n	800989c <HAL_SPI_Init+0x150>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988e:	2b10      	cmp	r3, #16
 8009890:	d004      	beq.n	800989c <HAL_SPI_Init+0x150>
 8009892:	f240 1147 	movw	r1, #327	; 0x147
 8009896:	482d      	ldr	r0, [pc, #180]	; (800994c <HAL_SPI_Init+0x200>)
 8009898:	f7f8 ffd1 	bl	800283e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d155      	bne.n	8009950 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d008      	beq.n	80098be <HAL_SPI_Init+0x172>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d004      	beq.n	80098be <HAL_SPI_Init+0x172>
 80098b4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80098b8:	4824      	ldr	r0, [pc, #144]	; (800994c <HAL_SPI_Init+0x200>)
 80098ba:	f7f8 ffc0 	bl	800283e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d008      	beq.n	80098d8 <HAL_SPI_Init+0x18c>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d004      	beq.n	80098d8 <HAL_SPI_Init+0x18c>
 80098ce:	f240 114b 	movw	r1, #331	; 0x14b
 80098d2:	481e      	ldr	r0, [pc, #120]	; (800994c <HAL_SPI_Init+0x200>)
 80098d4:	f7f8 ffb3 	bl	800283e <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098e0:	d125      	bne.n	800992e <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	69db      	ldr	r3, [r3, #28]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d05d      	beq.n	80099a6 <HAL_SPI_Init+0x25a>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	69db      	ldr	r3, [r3, #28]
 80098ee:	2b08      	cmp	r3, #8
 80098f0:	d059      	beq.n	80099a6 <HAL_SPI_Init+0x25a>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	69db      	ldr	r3, [r3, #28]
 80098f6:	2b10      	cmp	r3, #16
 80098f8:	d055      	beq.n	80099a6 <HAL_SPI_Init+0x25a>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	69db      	ldr	r3, [r3, #28]
 80098fe:	2b18      	cmp	r3, #24
 8009900:	d051      	beq.n	80099a6 <HAL_SPI_Init+0x25a>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	69db      	ldr	r3, [r3, #28]
 8009906:	2b20      	cmp	r3, #32
 8009908:	d04d      	beq.n	80099a6 <HAL_SPI_Init+0x25a>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	69db      	ldr	r3, [r3, #28]
 800990e:	2b28      	cmp	r3, #40	; 0x28
 8009910:	d049      	beq.n	80099a6 <HAL_SPI_Init+0x25a>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	2b30      	cmp	r3, #48	; 0x30
 8009918:	d045      	beq.n	80099a6 <HAL_SPI_Init+0x25a>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	69db      	ldr	r3, [r3, #28]
 800991e:	2b38      	cmp	r3, #56	; 0x38
 8009920:	d041      	beq.n	80099a6 <HAL_SPI_Init+0x25a>
 8009922:	f240 114f 	movw	r1, #335	; 0x14f
 8009926:	4809      	ldr	r0, [pc, #36]	; (800994c <HAL_SPI_Init+0x200>)
 8009928:	f7f8 ff89 	bl	800283e <assert_failed>
 800992c:	e03b      	b.n	80099a6 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	61da      	str	r2, [r3, #28]
 8009934:	e037      	b.n	80099a6 <HAL_SPI_Init+0x25a>
 8009936:	bf00      	nop
 8009938:	40013000 	.word	0x40013000
 800993c:	40003800 	.word	0x40003800
 8009940:	40003c00 	.word	0x40003c00
 8009944:	40013400 	.word	0x40013400
 8009948:	40015000 	.word	0x40015000
 800994c:	08010dc8 	.word	0x08010dc8
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	69db      	ldr	r3, [r3, #28]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d020      	beq.n	800999a <HAL_SPI_Init+0x24e>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	69db      	ldr	r3, [r3, #28]
 800995c:	2b08      	cmp	r3, #8
 800995e:	d01c      	beq.n	800999a <HAL_SPI_Init+0x24e>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	69db      	ldr	r3, [r3, #28]
 8009964:	2b10      	cmp	r3, #16
 8009966:	d018      	beq.n	800999a <HAL_SPI_Init+0x24e>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	69db      	ldr	r3, [r3, #28]
 800996c:	2b18      	cmp	r3, #24
 800996e:	d014      	beq.n	800999a <HAL_SPI_Init+0x24e>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	69db      	ldr	r3, [r3, #28]
 8009974:	2b20      	cmp	r3, #32
 8009976:	d010      	beq.n	800999a <HAL_SPI_Init+0x24e>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	69db      	ldr	r3, [r3, #28]
 800997c:	2b28      	cmp	r3, #40	; 0x28
 800997e:	d00c      	beq.n	800999a <HAL_SPI_Init+0x24e>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	69db      	ldr	r3, [r3, #28]
 8009984:	2b30      	cmp	r3, #48	; 0x30
 8009986:	d008      	beq.n	800999a <HAL_SPI_Init+0x24e>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	69db      	ldr	r3, [r3, #28]
 800998c:	2b38      	cmp	r3, #56	; 0x38
 800998e:	d004      	beq.n	800999a <HAL_SPI_Init+0x24e>
 8009990:	f240 1159 	movw	r1, #345	; 0x159
 8009994:	4862      	ldr	r0, [pc, #392]	; (8009b20 <HAL_SPI_Init+0x3d4>)
 8009996:	f7f8 ff52 	bl	800283e <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	615a      	str	r2, [r3, #20]
  }
#if (USE_SPI_CRC != 0U)
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d009      	beq.n	80099c2 <HAL_SPI_Init+0x276>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099b6:	d004      	beq.n	80099c2 <HAL_SPI_Init+0x276>
 80099b8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80099bc:	4858      	ldr	r0, [pc, #352]	; (8009b20 <HAL_SPI_Init+0x3d4>)
 80099be:	f7f8 ff3e 	bl	800283e <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099ca:	d113      	bne.n	80099f4 <HAL_SPI_Init+0x2a8>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00a      	beq.n	80099ea <HAL_SPI_Init+0x29e>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099dc:	d205      	bcs.n	80099ea <HAL_SPI_Init+0x29e>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e2:	f003 0301 	and.w	r3, r3, #1
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d104      	bne.n	80099f4 <HAL_SPI_Init+0x2a8>
 80099ea:	f240 1163 	movw	r1, #355	; 0x163
 80099ee:	484c      	ldr	r0, [pc, #304]	; (8009b20 <HAL_SPI_Init+0x3d4>)
 80099f0:	f7f8 ff25 	bl	800283e <assert_failed>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d126      	bne.n	8009a4e <HAL_SPI_Init+0x302>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a46      	ldr	r2, [pc, #280]	; (8009b24 <HAL_SPI_Init+0x3d8>)
 8009a0c:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a45      	ldr	r2, [pc, #276]	; (8009b28 <HAL_SPI_Init+0x3dc>)
 8009a12:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a45      	ldr	r2, [pc, #276]	; (8009b2c <HAL_SPI_Init+0x3e0>)
 8009a18:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a44      	ldr	r2, [pc, #272]	; (8009b30 <HAL_SPI_Init+0x3e4>)
 8009a1e:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a44      	ldr	r2, [pc, #272]	; (8009b34 <HAL_SPI_Init+0x3e8>)
 8009a24:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a43      	ldr	r2, [pc, #268]	; (8009b38 <HAL_SPI_Init+0x3ec>)
 8009a2a:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a43      	ldr	r2, [pc, #268]	; (8009b3c <HAL_SPI_Init+0x3f0>)
 8009a30:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a42      	ldr	r2, [pc, #264]	; (8009b40 <HAL_SPI_Init+0x3f4>)
 8009a36:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d102      	bne.n	8009a46 <HAL_SPI_Init+0x2fa>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a40      	ldr	r2, [pc, #256]	; (8009b44 <HAL_SPI_Init+0x3f8>)
 8009a44:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2202      	movs	r2, #2
 8009a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a64:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009a76:	431a      	orrs	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a80:	431a      	orrs	r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	f003 0302 	and.w	r3, r3, #2
 8009a8a:	431a      	orrs	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	695b      	ldr	r3, [r3, #20]
 8009a90:	f003 0301 	and.w	r3, r3, #1
 8009a94:	431a      	orrs	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a9e:	431a      	orrs	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	69db      	ldr	r3, [r3, #28]
 8009aa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ab2:	ea42 0103 	orr.w	r1, r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	0c1b      	lsrs	r3, r3, #16
 8009acc:	f003 0104 	and.w	r1, r3, #4
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad4:	f003 0210 	and.w	r2, r3, #16
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	430a      	orrs	r2, r1
 8009ade:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ae8:	d105      	bne.n	8009af6 <HAL_SPI_Init+0x3aa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	b292      	uxth	r2, r2
 8009af4:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	69da      	ldr	r2, [r3, #28]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	08010dc8 	.word	0x08010dc8
 8009b24:	08009d49 	.word	0x08009d49
 8009b28:	08009d5d 	.word	0x08009d5d
 8009b2c:	08009d71 	.word	0x08009d71
 8009b30:	08009d85 	.word	0x08009d85
 8009b34:	08009d99 	.word	0x08009d99
 8009b38:	08009dad 	.word	0x08009dad
 8009b3c:	08009dc1 	.word	0x08009dc1
 8009b40:	08009dd5 	.word	0x08009dd5
 8009b44:	08002aa9 	.word	0x08002aa9

08009b48 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b088      	sub	sp, #32
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	099b      	lsrs	r3, r3, #6
 8009b64:	f003 0301 	and.w	r3, r3, #1
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10f      	bne.n	8009b8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00a      	beq.n	8009b8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	099b      	lsrs	r3, r3, #6
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d004      	beq.n	8009b8c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	4798      	blx	r3
    return;
 8009b8a:	e0d8      	b.n	8009d3e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	085b      	lsrs	r3, r3, #1
 8009b90:	f003 0301 	and.w	r3, r3, #1
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00a      	beq.n	8009bae <HAL_SPI_IRQHandler+0x66>
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	09db      	lsrs	r3, r3, #7
 8009b9c:	f003 0301 	and.w	r3, r3, #1
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d004      	beq.n	8009bae <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	4798      	blx	r3
    return;
 8009bac:	e0c7      	b.n	8009d3e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	095b      	lsrs	r3, r3, #5
 8009bb2:	f003 0301 	and.w	r3, r3, #1
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10c      	bne.n	8009bd4 <HAL_SPI_IRQHandler+0x8c>
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	099b      	lsrs	r3, r3, #6
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d106      	bne.n	8009bd4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	0a1b      	lsrs	r3, r3, #8
 8009bca:	f003 0301 	and.w	r3, r3, #1
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 80b5 	beq.w	8009d3e <HAL_SPI_IRQHandler+0x1f6>
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	095b      	lsrs	r3, r3, #5
 8009bd8:	f003 0301 	and.w	r3, r3, #1
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 80ae 	beq.w	8009d3e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	099b      	lsrs	r3, r3, #6
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d023      	beq.n	8009c36 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	2b03      	cmp	r3, #3
 8009bf8:	d011      	beq.n	8009c1e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bfe:	f043 0204 	orr.w	r2, r3, #4
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c06:	2300      	movs	r3, #0
 8009c08:	617b      	str	r3, [r7, #20]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	617b      	str	r3, [r7, #20]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	617b      	str	r3, [r7, #20]
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	e00b      	b.n	8009c36 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c1e:	2300      	movs	r3, #0
 8009c20:	613b      	str	r3, [r7, #16]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	613b      	str	r3, [r7, #16]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	613b      	str	r3, [r7, #16]
 8009c32:	693b      	ldr	r3, [r7, #16]
        return;
 8009c34:	e083      	b.n	8009d3e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	095b      	lsrs	r3, r3, #5
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d014      	beq.n	8009c6c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c46:	f043 0201 	orr.w	r2, r3, #1
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60fb      	str	r3, [r7, #12]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	60fb      	str	r3, [r7, #12]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c68:	601a      	str	r2, [r3, #0]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	0a1b      	lsrs	r3, r3, #8
 8009c70:	f003 0301 	and.w	r3, r3, #1
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00c      	beq.n	8009c92 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c7c:	f043 0208 	orr.w	r2, r3, #8
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009c84:	2300      	movs	r3, #0
 8009c86:	60bb      	str	r3, [r7, #8]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	60bb      	str	r3, [r7, #8]
 8009c90:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d050      	beq.n	8009d3c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	685a      	ldr	r2, [r3, #4]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ca8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	f003 0302 	and.w	r3, r3, #2
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d104      	bne.n	8009cc6 <HAL_SPI_IRQHandler+0x17e>
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	f003 0301 	and.w	r3, r3, #1
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d034      	beq.n	8009d30 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	685a      	ldr	r2, [r3, #4]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f022 0203 	bic.w	r2, r2, #3
 8009cd4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d011      	beq.n	8009d02 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ce2:	4a18      	ldr	r2, [pc, #96]	; (8009d44 <HAL_SPI_IRQHandler+0x1fc>)
 8009ce4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fb f904 	bl	8004ef8 <HAL_DMA_Abort_IT>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d005      	beq.n	8009d02 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d017      	beq.n	8009d3a <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d0e:	4a0d      	ldr	r2, [pc, #52]	; (8009d44 <HAL_SPI_IRQHandler+0x1fc>)
 8009d10:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fb f8ee 	bl	8004ef8 <HAL_DMA_Abort_IT>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00b      	beq.n	8009d3a <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009d2e:	e004      	b.n	8009d3a <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009d38:	e000      	b.n	8009d3c <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8009d3a:	bf00      	nop
    return;
 8009d3c:	bf00      	nop
  }
}
 8009d3e:	3720      	adds	r7, #32
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	08009de9 	.word	0x08009de9

08009d48 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009e0a:	bf00      	nop
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
	...

08009e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e0b2      	b.n	8009f8c <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a5a      	ldr	r2, [pc, #360]	; (8009f94 <HAL_TIM_Base_Init+0x180>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d027      	beq.n	8009e80 <HAL_TIM_Base_Init+0x6c>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e38:	d022      	beq.n	8009e80 <HAL_TIM_Base_Init+0x6c>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a56      	ldr	r2, [pc, #344]	; (8009f98 <HAL_TIM_Base_Init+0x184>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d01d      	beq.n	8009e80 <HAL_TIM_Base_Init+0x6c>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a54      	ldr	r2, [pc, #336]	; (8009f9c <HAL_TIM_Base_Init+0x188>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d018      	beq.n	8009e80 <HAL_TIM_Base_Init+0x6c>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a53      	ldr	r2, [pc, #332]	; (8009fa0 <HAL_TIM_Base_Init+0x18c>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d013      	beq.n	8009e80 <HAL_TIM_Base_Init+0x6c>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a51      	ldr	r2, [pc, #324]	; (8009fa4 <HAL_TIM_Base_Init+0x190>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d00e      	beq.n	8009e80 <HAL_TIM_Base_Init+0x6c>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a50      	ldr	r2, [pc, #320]	; (8009fa8 <HAL_TIM_Base_Init+0x194>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d009      	beq.n	8009e80 <HAL_TIM_Base_Init+0x6c>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a4e      	ldr	r2, [pc, #312]	; (8009fac <HAL_TIM_Base_Init+0x198>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d004      	beq.n	8009e80 <HAL_TIM_Base_Init+0x6c>
 8009e76:	f240 1113 	movw	r1, #275	; 0x113
 8009e7a:	484d      	ldr	r0, [pc, #308]	; (8009fb0 <HAL_TIM_Base_Init+0x19c>)
 8009e7c:	f7f8 fcdf 	bl	800283e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d014      	beq.n	8009eb2 <HAL_TIM_Base_Init+0x9e>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	2b10      	cmp	r3, #16
 8009e8e:	d010      	beq.n	8009eb2 <HAL_TIM_Base_Init+0x9e>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	2b20      	cmp	r3, #32
 8009e96:	d00c      	beq.n	8009eb2 <HAL_TIM_Base_Init+0x9e>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	2b40      	cmp	r3, #64	; 0x40
 8009e9e:	d008      	beq.n	8009eb2 <HAL_TIM_Base_Init+0x9e>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	2b60      	cmp	r3, #96	; 0x60
 8009ea6:	d004      	beq.n	8009eb2 <HAL_TIM_Base_Init+0x9e>
 8009ea8:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009eac:	4840      	ldr	r0, [pc, #256]	; (8009fb0 <HAL_TIM_Base_Init+0x19c>)
 8009eae:	f7f8 fcc6 	bl	800283e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00e      	beq.n	8009ed8 <HAL_TIM_Base_Init+0xc4>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ec2:	d009      	beq.n	8009ed8 <HAL_TIM_Base_Init+0xc4>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ecc:	d004      	beq.n	8009ed8 <HAL_TIM_Base_Init+0xc4>
 8009ece:	f240 1115 	movw	r1, #277	; 0x115
 8009ed2:	4837      	ldr	r0, [pc, #220]	; (8009fb0 <HAL_TIM_Base_Init+0x19c>)
 8009ed4:	f7f8 fcb3 	bl	800283e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d008      	beq.n	8009ef2 <HAL_TIM_Base_Init+0xde>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	699b      	ldr	r3, [r3, #24]
 8009ee4:	2b80      	cmp	r3, #128	; 0x80
 8009ee6:	d004      	beq.n	8009ef2 <HAL_TIM_Base_Init+0xde>
 8009ee8:	f44f 718b 	mov.w	r1, #278	; 0x116
 8009eec:	4830      	ldr	r0, [pc, #192]	; (8009fb0 <HAL_TIM_Base_Init+0x19c>)
 8009eee:	f7f8 fca6 	bl	800283e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d111      	bne.n	8009f22 <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fefe 	bl	800ad08 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d102      	bne.n	8009f1a <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a27      	ldr	r2, [pc, #156]	; (8009fb4 <HAL_TIM_Base_Init+0x1a0>)
 8009f18:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2202      	movs	r2, #2
 8009f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	3304      	adds	r3, #4
 8009f32:	4619      	mov	r1, r3
 8009f34:	4610      	mov	r0, r2
 8009f36:	f000 fdcd 	bl	800aad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2201      	movs	r2, #1
 8009f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	40010000 	.word	0x40010000
 8009f98:	40000400 	.word	0x40000400
 8009f9c:	40000800 	.word	0x40000800
 8009fa0:	40000c00 	.word	0x40000c00
 8009fa4:	40014000 	.word	0x40014000
 8009fa8:	40014400 	.word	0x40014400
 8009fac:	40014800 	.word	0x40014800
 8009fb0:	08010e3c 	.word	0x08010e3c
 8009fb4:	0800329d 	.word	0x0800329d

08009fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a3d      	ldr	r2, [pc, #244]	; (800a0bc <HAL_TIM_Base_Start_IT+0x104>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d027      	beq.n	800a01a <HAL_TIM_Base_Start_IT+0x62>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd2:	d022      	beq.n	800a01a <HAL_TIM_Base_Start_IT+0x62>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a39      	ldr	r2, [pc, #228]	; (800a0c0 <HAL_TIM_Base_Start_IT+0x108>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d01d      	beq.n	800a01a <HAL_TIM_Base_Start_IT+0x62>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a38      	ldr	r2, [pc, #224]	; (800a0c4 <HAL_TIM_Base_Start_IT+0x10c>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d018      	beq.n	800a01a <HAL_TIM_Base_Start_IT+0x62>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a36      	ldr	r2, [pc, #216]	; (800a0c8 <HAL_TIM_Base_Start_IT+0x110>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d013      	beq.n	800a01a <HAL_TIM_Base_Start_IT+0x62>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a35      	ldr	r2, [pc, #212]	; (800a0cc <HAL_TIM_Base_Start_IT+0x114>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d00e      	beq.n	800a01a <HAL_TIM_Base_Start_IT+0x62>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a33      	ldr	r2, [pc, #204]	; (800a0d0 <HAL_TIM_Base_Start_IT+0x118>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d009      	beq.n	800a01a <HAL_TIM_Base_Start_IT+0x62>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a32      	ldr	r2, [pc, #200]	; (800a0d4 <HAL_TIM_Base_Start_IT+0x11c>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d004      	beq.n	800a01a <HAL_TIM_Base_Start_IT+0x62>
 800a010:	f240 11cf 	movw	r1, #463	; 0x1cf
 800a014:	4830      	ldr	r0, [pc, #192]	; (800a0d8 <HAL_TIM_Base_Start_IT+0x120>)
 800a016:	f7f8 fc12 	bl	800283e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b01      	cmp	r3, #1
 800a024:	d001      	beq.n	800a02a <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800a026:	2301      	movs	r3, #1
 800a028:	e044      	b.n	800a0b4 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2202      	movs	r2, #2
 800a02e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68da      	ldr	r2, [r3, #12]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f042 0201 	orr.w	r2, r2, #1
 800a040:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a1d      	ldr	r2, [pc, #116]	; (800a0bc <HAL_TIM_Base_Start_IT+0x104>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d018      	beq.n	800a07e <HAL_TIM_Base_Start_IT+0xc6>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a054:	d013      	beq.n	800a07e <HAL_TIM_Base_Start_IT+0xc6>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a19      	ldr	r2, [pc, #100]	; (800a0c0 <HAL_TIM_Base_Start_IT+0x108>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d00e      	beq.n	800a07e <HAL_TIM_Base_Start_IT+0xc6>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a17      	ldr	r2, [pc, #92]	; (800a0c4 <HAL_TIM_Base_Start_IT+0x10c>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d009      	beq.n	800a07e <HAL_TIM_Base_Start_IT+0xc6>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a16      	ldr	r2, [pc, #88]	; (800a0c8 <HAL_TIM_Base_Start_IT+0x110>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d004      	beq.n	800a07e <HAL_TIM_Base_Start_IT+0xc6>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a14      	ldr	r2, [pc, #80]	; (800a0cc <HAL_TIM_Base_Start_IT+0x114>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d111      	bne.n	800a0a2 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f003 0307 	and.w	r3, r3, #7
 800a088:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2b06      	cmp	r3, #6
 800a08e:	d010      	beq.n	800a0b2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f042 0201 	orr.w	r2, r2, #1
 800a09e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0a0:	e007      	b.n	800a0b2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f042 0201 	orr.w	r2, r2, #1
 800a0b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	40010000 	.word	0x40010000
 800a0c0:	40000400 	.word	0x40000400
 800a0c4:	40000800 	.word	0x40000800
 800a0c8:	40000c00 	.word	0x40000c00
 800a0cc:	40014000 	.word	0x40014000
 800a0d0:	40014400 	.word	0x40014400
 800a0d4:	40014800 	.word	0x40014800
 800a0d8:	08010e3c 	.word	0x08010e3c

0800a0dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a29      	ldr	r2, [pc, #164]	; (800a190 <HAL_TIM_Base_Stop_IT+0xb4>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d027      	beq.n	800a13e <HAL_TIM_Base_Stop_IT+0x62>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0f6:	d022      	beq.n	800a13e <HAL_TIM_Base_Stop_IT+0x62>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a25      	ldr	r2, [pc, #148]	; (800a194 <HAL_TIM_Base_Stop_IT+0xb8>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d01d      	beq.n	800a13e <HAL_TIM_Base_Stop_IT+0x62>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a24      	ldr	r2, [pc, #144]	; (800a198 <HAL_TIM_Base_Stop_IT+0xbc>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d018      	beq.n	800a13e <HAL_TIM_Base_Stop_IT+0x62>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a22      	ldr	r2, [pc, #136]	; (800a19c <HAL_TIM_Base_Stop_IT+0xc0>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d013      	beq.n	800a13e <HAL_TIM_Base_Stop_IT+0x62>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a21      	ldr	r2, [pc, #132]	; (800a1a0 <HAL_TIM_Base_Stop_IT+0xc4>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d00e      	beq.n	800a13e <HAL_TIM_Base_Stop_IT+0x62>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a1f      	ldr	r2, [pc, #124]	; (800a1a4 <HAL_TIM_Base_Stop_IT+0xc8>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d009      	beq.n	800a13e <HAL_TIM_Base_Stop_IT+0x62>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a1e      	ldr	r2, [pc, #120]	; (800a1a8 <HAL_TIM_Base_Stop_IT+0xcc>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d004      	beq.n	800a13e <HAL_TIM_Base_Stop_IT+0x62>
 800a134:	f240 11f7 	movw	r1, #503	; 0x1f7
 800a138:	481c      	ldr	r0, [pc, #112]	; (800a1ac <HAL_TIM_Base_Stop_IT+0xd0>)
 800a13a:	f7f8 fb80 	bl	800283e <assert_failed>

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	68da      	ldr	r2, [r3, #12]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f022 0201 	bic.w	r2, r2, #1
 800a14c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	6a1a      	ldr	r2, [r3, #32]
 800a154:	f241 1311 	movw	r3, #4369	; 0x1111
 800a158:	4013      	ands	r3, r2
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10f      	bne.n	800a17e <HAL_TIM_Base_Stop_IT+0xa2>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6a1a      	ldr	r2, [r3, #32]
 800a164:	f240 4344 	movw	r3, #1092	; 0x444
 800a168:	4013      	ands	r3, r2
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d107      	bne.n	800a17e <HAL_TIM_Base_Stop_IT+0xa2>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f022 0201 	bic.w	r2, r2, #1
 800a17c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2201      	movs	r2, #1
 800a182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	40010000 	.word	0x40010000
 800a194:	40000400 	.word	0x40000400
 800a198:	40000800 	.word	0x40000800
 800a19c:	40000c00 	.word	0x40000c00
 800a1a0:	40014000 	.word	0x40014000
 800a1a4:	40014400 	.word	0x40014400
 800a1a8:	40014800 	.word	0x40014800
 800a1ac:	08010e3c 	.word	0x08010e3c

0800a1b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	f003 0302 	and.w	r3, r3, #2
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d128      	bne.n	800a218 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	f003 0302 	and.w	r3, r3, #2
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	d121      	bne.n	800a218 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f06f 0202 	mvn.w	r2, #2
 800a1dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	f003 0303 	and.w	r3, r3, #3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d005      	beq.n	800a1fe <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	4798      	blx	r3
 800a1fc:	e009      	b.n	800a212 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	f003 0304 	and.w	r3, r3, #4
 800a222:	2b04      	cmp	r3, #4
 800a224:	d128      	bne.n	800a278 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	f003 0304 	and.w	r3, r3, #4
 800a230:	2b04      	cmp	r3, #4
 800a232:	d121      	bne.n	800a278 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f06f 0204 	mvn.w	r2, #4
 800a23c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2202      	movs	r2, #2
 800a242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d005      	beq.n	800a25e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	4798      	blx	r3
 800a25c:	e009      	b.n	800a272 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	f003 0308 	and.w	r3, r3, #8
 800a282:	2b08      	cmp	r3, #8
 800a284:	d128      	bne.n	800a2d8 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	f003 0308 	and.w	r3, r3, #8
 800a290:	2b08      	cmp	r3, #8
 800a292:	d121      	bne.n	800a2d8 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f06f 0208 	mvn.w	r2, #8
 800a29c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2204      	movs	r2, #4
 800a2a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	69db      	ldr	r3, [r3, #28]
 800a2aa:	f003 0303 	and.w	r3, r3, #3
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d005      	beq.n	800a2be <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	4798      	blx	r3
 800a2bc:	e009      	b.n	800a2d2 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	f003 0310 	and.w	r3, r3, #16
 800a2e2:	2b10      	cmp	r3, #16
 800a2e4:	d128      	bne.n	800a338 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	f003 0310 	and.w	r3, r3, #16
 800a2f0:	2b10      	cmp	r3, #16
 800a2f2:	d121      	bne.n	800a338 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f06f 0210 	mvn.w	r2, #16
 800a2fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2208      	movs	r2, #8
 800a302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	69db      	ldr	r3, [r3, #28]
 800a30a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d005      	beq.n	800a31e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	4798      	blx	r3
 800a31c:	e009      	b.n	800a332 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	f003 0301 	and.w	r3, r3, #1
 800a342:	2b01      	cmp	r3, #1
 800a344:	d110      	bne.n	800a368 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	f003 0301 	and.w	r3, r3, #1
 800a350:	2b01      	cmp	r3, #1
 800a352:	d109      	bne.n	800a368 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f06f 0201 	mvn.w	r2, #1
 800a35c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a372:	2b80      	cmp	r3, #128	; 0x80
 800a374:	d110      	bne.n	800a398 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a380:	2b80      	cmp	r3, #128	; 0x80
 800a382:	d109      	bne.n	800a398 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a38c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a2:	2b40      	cmp	r3, #64	; 0x40
 800a3a4:	d110      	bne.n	800a3c8 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b0:	2b40      	cmp	r3, #64	; 0x40
 800a3b2:	d109      	bne.n	800a3c8 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	f003 0320 	and.w	r3, r3, #32
 800a3d2:	2b20      	cmp	r3, #32
 800a3d4:	d110      	bne.n	800a3f8 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	f003 0320 	and.w	r3, r3, #32
 800a3e0:	2b20      	cmp	r3, #32
 800a3e2:	d109      	bne.n	800a3f8 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f06f 0220 	mvn.w	r2, #32
 800a3ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3f8:	bf00      	nop
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a40a:	2300      	movs	r3, #0
 800a40c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a414:	2b01      	cmp	r3, #1
 800a416:	d101      	bne.n	800a41c <HAL_TIM_ConfigClockSource+0x1c>
 800a418:	2302      	movs	r3, #2
 800a41a:	e2f0      	b.n	800a9fe <HAL_TIM_ConfigClockSource+0x5fe>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2202      	movs	r2, #2
 800a428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a434:	d029      	beq.n	800a48a <HAL_TIM_ConfigClockSource+0x8a>
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b70      	cmp	r3, #112	; 0x70
 800a43c:	d025      	beq.n	800a48a <HAL_TIM_ConfigClockSource+0x8a>
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a446:	d020      	beq.n	800a48a <HAL_TIM_ConfigClockSource+0x8a>
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2b40      	cmp	r3, #64	; 0x40
 800a44e:	d01c      	beq.n	800a48a <HAL_TIM_ConfigClockSource+0x8a>
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b50      	cmp	r3, #80	; 0x50
 800a456:	d018      	beq.n	800a48a <HAL_TIM_ConfigClockSource+0x8a>
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b60      	cmp	r3, #96	; 0x60
 800a45e:	d014      	beq.n	800a48a <HAL_TIM_ConfigClockSource+0x8a>
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d010      	beq.n	800a48a <HAL_TIM_ConfigClockSource+0x8a>
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2b10      	cmp	r3, #16
 800a46e:	d00c      	beq.n	800a48a <HAL_TIM_ConfigClockSource+0x8a>
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2b20      	cmp	r3, #32
 800a476:	d008      	beq.n	800a48a <HAL_TIM_ConfigClockSource+0x8a>
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b30      	cmp	r3, #48	; 0x30
 800a47e:	d004      	beq.n	800a48a <HAL_TIM_ConfigClockSource+0x8a>
 800a480:	f241 41b7 	movw	r1, #5303	; 0x14b7
 800a484:	487c      	ldr	r0, [pc, #496]	; (800a678 <HAL_TIM_ConfigClockSource+0x278>)
 800a486:	f7f8 f9da 	bl	800283e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a498:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4a0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68ba      	ldr	r2, [r7, #8]
 800a4a8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4b2:	f000 80f1 	beq.w	800a698 <HAL_TIM_ConfigClockSource+0x298>
 800a4b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4ba:	f200 8293 	bhi.w	800a9e4 <HAL_TIM_ConfigClockSource+0x5e4>
 800a4be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4c2:	d02d      	beq.n	800a520 <HAL_TIM_ConfigClockSource+0x120>
 800a4c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4c8:	f200 828c 	bhi.w	800a9e4 <HAL_TIM_ConfigClockSource+0x5e4>
 800a4cc:	2b70      	cmp	r3, #112	; 0x70
 800a4ce:	d05d      	beq.n	800a58c <HAL_TIM_ConfigClockSource+0x18c>
 800a4d0:	2b70      	cmp	r3, #112	; 0x70
 800a4d2:	f200 8287 	bhi.w	800a9e4 <HAL_TIM_ConfigClockSource+0x5e4>
 800a4d6:	2b60      	cmp	r3, #96	; 0x60
 800a4d8:	f000 81a0 	beq.w	800a81c <HAL_TIM_ConfigClockSource+0x41c>
 800a4dc:	2b60      	cmp	r3, #96	; 0x60
 800a4de:	f200 8281 	bhi.w	800a9e4 <HAL_TIM_ConfigClockSource+0x5e4>
 800a4e2:	2b50      	cmp	r3, #80	; 0x50
 800a4e4:	f000 8144 	beq.w	800a770 <HAL_TIM_ConfigClockSource+0x370>
 800a4e8:	2b50      	cmp	r3, #80	; 0x50
 800a4ea:	f200 827b 	bhi.w	800a9e4 <HAL_TIM_ConfigClockSource+0x5e4>
 800a4ee:	2b40      	cmp	r3, #64	; 0x40
 800a4f0:	f000 81f6 	beq.w	800a8e0 <HAL_TIM_ConfigClockSource+0x4e0>
 800a4f4:	2b40      	cmp	r3, #64	; 0x40
 800a4f6:	f200 8275 	bhi.w	800a9e4 <HAL_TIM_ConfigClockSource+0x5e4>
 800a4fa:	2b30      	cmp	r3, #48	; 0x30
 800a4fc:	f000 8246 	beq.w	800a98c <HAL_TIM_ConfigClockSource+0x58c>
 800a500:	2b30      	cmp	r3, #48	; 0x30
 800a502:	f200 826f 	bhi.w	800a9e4 <HAL_TIM_ConfigClockSource+0x5e4>
 800a506:	2b20      	cmp	r3, #32
 800a508:	f000 8240 	beq.w	800a98c <HAL_TIM_ConfigClockSource+0x58c>
 800a50c:	2b20      	cmp	r3, #32
 800a50e:	f200 8269 	bhi.w	800a9e4 <HAL_TIM_ConfigClockSource+0x5e4>
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 823a 	beq.w	800a98c <HAL_TIM_ConfigClockSource+0x58c>
 800a518:	2b10      	cmp	r3, #16
 800a51a:	f000 8237 	beq.w	800a98c <HAL_TIM_ConfigClockSource+0x58c>
 800a51e:	e261      	b.n	800a9e4 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a55      	ldr	r2, [pc, #340]	; (800a67c <HAL_TIM_ConfigClockSource+0x27c>)
 800a526:	4293      	cmp	r3, r2
 800a528:	f000 825f 	beq.w	800a9ea <HAL_TIM_ConfigClockSource+0x5ea>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a534:	f000 8259 	beq.w	800a9ea <HAL_TIM_ConfigClockSource+0x5ea>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a50      	ldr	r2, [pc, #320]	; (800a680 <HAL_TIM_ConfigClockSource+0x280>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	f000 8253 	beq.w	800a9ea <HAL_TIM_ConfigClockSource+0x5ea>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a4e      	ldr	r2, [pc, #312]	; (800a684 <HAL_TIM_ConfigClockSource+0x284>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	f000 824d 	beq.w	800a9ea <HAL_TIM_ConfigClockSource+0x5ea>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a4c      	ldr	r2, [pc, #304]	; (800a688 <HAL_TIM_ConfigClockSource+0x288>)
 800a556:	4293      	cmp	r3, r2
 800a558:	f000 8247 	beq.w	800a9ea <HAL_TIM_ConfigClockSource+0x5ea>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a4a      	ldr	r2, [pc, #296]	; (800a68c <HAL_TIM_ConfigClockSource+0x28c>)
 800a562:	4293      	cmp	r3, r2
 800a564:	f000 8241 	beq.w	800a9ea <HAL_TIM_ConfigClockSource+0x5ea>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a48      	ldr	r2, [pc, #288]	; (800a690 <HAL_TIM_ConfigClockSource+0x290>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	f000 823b 	beq.w	800a9ea <HAL_TIM_ConfigClockSource+0x5ea>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a46      	ldr	r2, [pc, #280]	; (800a694 <HAL_TIM_ConfigClockSource+0x294>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	f000 8235 	beq.w	800a9ea <HAL_TIM_ConfigClockSource+0x5ea>
 800a580:	f241 41c3 	movw	r1, #5315	; 0x14c3
 800a584:	483c      	ldr	r0, [pc, #240]	; (800a678 <HAL_TIM_ConfigClockSource+0x278>)
 800a586:	f7f8 f95a 	bl	800283e <assert_failed>
      break;
 800a58a:	e22e      	b.n	800a9ea <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a3a      	ldr	r2, [pc, #232]	; (800a67c <HAL_TIM_ConfigClockSource+0x27c>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d01d      	beq.n	800a5d2 <HAL_TIM_ConfigClockSource+0x1d2>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a59e:	d018      	beq.n	800a5d2 <HAL_TIM_ConfigClockSource+0x1d2>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a36      	ldr	r2, [pc, #216]	; (800a680 <HAL_TIM_ConfigClockSource+0x280>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d013      	beq.n	800a5d2 <HAL_TIM_ConfigClockSource+0x1d2>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a35      	ldr	r2, [pc, #212]	; (800a684 <HAL_TIM_ConfigClockSource+0x284>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d00e      	beq.n	800a5d2 <HAL_TIM_ConfigClockSource+0x1d2>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a33      	ldr	r2, [pc, #204]	; (800a688 <HAL_TIM_ConfigClockSource+0x288>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d009      	beq.n	800a5d2 <HAL_TIM_ConfigClockSource+0x1d2>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a32      	ldr	r2, [pc, #200]	; (800a68c <HAL_TIM_ConfigClockSource+0x28c>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d004      	beq.n	800a5d2 <HAL_TIM_ConfigClockSource+0x1d2>
 800a5c8:	f241 41ca 	movw	r1, #5322	; 0x14ca
 800a5cc:	482a      	ldr	r0, [pc, #168]	; (800a678 <HAL_TIM_ConfigClockSource+0x278>)
 800a5ce:	f7f8 f936 	bl	800283e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d013      	beq.n	800a602 <HAL_TIM_ConfigClockSource+0x202>
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5e2:	d00e      	beq.n	800a602 <HAL_TIM_ConfigClockSource+0x202>
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5ec:	d009      	beq.n	800a602 <HAL_TIM_ConfigClockSource+0x202>
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a5f6:	d004      	beq.n	800a602 <HAL_TIM_ConfigClockSource+0x202>
 800a5f8:	f241 41cd 	movw	r1, #5325	; 0x14cd
 800a5fc:	481e      	ldr	r0, [pc, #120]	; (800a678 <HAL_TIM_ConfigClockSource+0x278>)
 800a5fe:	f7f8 f91e 	bl	800283e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a60a:	d014      	beq.n	800a636 <HAL_TIM_ConfigClockSource+0x236>
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d010      	beq.n	800a636 <HAL_TIM_ConfigClockSource+0x236>
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00c      	beq.n	800a636 <HAL_TIM_ConfigClockSource+0x236>
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	2b02      	cmp	r3, #2
 800a622:	d008      	beq.n	800a636 <HAL_TIM_ConfigClockSource+0x236>
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	2b0a      	cmp	r3, #10
 800a62a:	d004      	beq.n	800a636 <HAL_TIM_ConfigClockSource+0x236>
 800a62c:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800a630:	4811      	ldr	r0, [pc, #68]	; (800a678 <HAL_TIM_ConfigClockSource+0x278>)
 800a632:	f7f8 f904 	bl	800283e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	2b0f      	cmp	r3, #15
 800a63c:	d904      	bls.n	800a648 <HAL_TIM_ConfigClockSource+0x248>
 800a63e:	f241 41cf 	movw	r1, #5327	; 0x14cf
 800a642:	480d      	ldr	r0, [pc, #52]	; (800a678 <HAL_TIM_ConfigClockSource+0x278>)
 800a644:	f7f8 f8fb 	bl	800283e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6818      	ldr	r0, [r3, #0]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	6899      	ldr	r1, [r3, #8]
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	685a      	ldr	r2, [r3, #4]
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	f000 fb36 	bl	800acc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a66a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68ba      	ldr	r2, [r7, #8]
 800a672:	609a      	str	r2, [r3, #8]
      break;
 800a674:	e1ba      	b.n	800a9ec <HAL_TIM_ConfigClockSource+0x5ec>
 800a676:	bf00      	nop
 800a678:	08010e3c 	.word	0x08010e3c
 800a67c:	40010000 	.word	0x40010000
 800a680:	40000400 	.word	0x40000400
 800a684:	40000800 	.word	0x40000800
 800a688:	40000c00 	.word	0x40000c00
 800a68c:	40014000 	.word	0x40014000
 800a690:	40014400 	.word	0x40014400
 800a694:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a8a      	ldr	r2, [pc, #552]	; (800a8c8 <HAL_TIM_ConfigClockSource+0x4c8>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d018      	beq.n	800a6d4 <HAL_TIM_ConfigClockSource+0x2d4>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6aa:	d013      	beq.n	800a6d4 <HAL_TIM_ConfigClockSource+0x2d4>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a86      	ldr	r2, [pc, #536]	; (800a8cc <HAL_TIM_ConfigClockSource+0x4cc>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d00e      	beq.n	800a6d4 <HAL_TIM_ConfigClockSource+0x2d4>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a85      	ldr	r2, [pc, #532]	; (800a8d0 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d009      	beq.n	800a6d4 <HAL_TIM_ConfigClockSource+0x2d4>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a83      	ldr	r2, [pc, #524]	; (800a8d4 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d004      	beq.n	800a6d4 <HAL_TIM_ConfigClockSource+0x2d4>
 800a6ca:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800a6ce:	4882      	ldr	r0, [pc, #520]	; (800a8d8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a6d0:	f7f8 f8b5 	bl	800283e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d013      	beq.n	800a704 <HAL_TIM_ConfigClockSource+0x304>
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6e4:	d00e      	beq.n	800a704 <HAL_TIM_ConfigClockSource+0x304>
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ee:	d009      	beq.n	800a704 <HAL_TIM_ConfigClockSource+0x304>
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6f8:	d004      	beq.n	800a704 <HAL_TIM_ConfigClockSource+0x304>
 800a6fa:	f241 41e5 	movw	r1, #5349	; 0x14e5
 800a6fe:	4876      	ldr	r0, [pc, #472]	; (800a8d8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a700:	f7f8 f89d 	bl	800283e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a70c:	d014      	beq.n	800a738 <HAL_TIM_ConfigClockSource+0x338>
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d010      	beq.n	800a738 <HAL_TIM_ConfigClockSource+0x338>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00c      	beq.n	800a738 <HAL_TIM_ConfigClockSource+0x338>
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	2b02      	cmp	r3, #2
 800a724:	d008      	beq.n	800a738 <HAL_TIM_ConfigClockSource+0x338>
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	2b0a      	cmp	r3, #10
 800a72c:	d004      	beq.n	800a738 <HAL_TIM_ConfigClockSource+0x338>
 800a72e:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800a732:	4869      	ldr	r0, [pc, #420]	; (800a8d8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a734:	f7f8 f883 	bl	800283e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	2b0f      	cmp	r3, #15
 800a73e:	d904      	bls.n	800a74a <HAL_TIM_ConfigClockSource+0x34a>
 800a740:	f241 41e7 	movw	r1, #5351	; 0x14e7
 800a744:	4864      	ldr	r0, [pc, #400]	; (800a8d8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a746:	f7f8 f87a 	bl	800283e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6818      	ldr	r0, [r3, #0]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	6899      	ldr	r1, [r3, #8]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	685a      	ldr	r2, [r3, #4]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	f000 fab5 	bl	800acc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	689a      	ldr	r2, [r3, #8]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a76c:	609a      	str	r2, [r3, #8]
      break;
 800a76e:	e13d      	b.n	800a9ec <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a54      	ldr	r2, [pc, #336]	; (800a8c8 <HAL_TIM_ConfigClockSource+0x4c8>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d01d      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0x3b6>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a782:	d018      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0x3b6>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a50      	ldr	r2, [pc, #320]	; (800a8cc <HAL_TIM_ConfigClockSource+0x4cc>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d013      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0x3b6>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a4f      	ldr	r2, [pc, #316]	; (800a8d0 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d00e      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0x3b6>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a4d      	ldr	r2, [pc, #308]	; (800a8d4 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d009      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0x3b6>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a4d      	ldr	r2, [pc, #308]	; (800a8dc <HAL_TIM_ConfigClockSource+0x4dc>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d004      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0x3b6>
 800a7ac:	f241 41f6 	movw	r1, #5366	; 0x14f6
 800a7b0:	4849      	ldr	r0, [pc, #292]	; (800a8d8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a7b2:	f7f8 f844 	bl	800283e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7be:	d014      	beq.n	800a7ea <HAL_TIM_ConfigClockSource+0x3ea>
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d010      	beq.n	800a7ea <HAL_TIM_ConfigClockSource+0x3ea>
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00c      	beq.n	800a7ea <HAL_TIM_ConfigClockSource+0x3ea>
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	d008      	beq.n	800a7ea <HAL_TIM_ConfigClockSource+0x3ea>
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	2b0a      	cmp	r3, #10
 800a7de:	d004      	beq.n	800a7ea <HAL_TIM_ConfigClockSource+0x3ea>
 800a7e0:	f241 41f9 	movw	r1, #5369	; 0x14f9
 800a7e4:	483c      	ldr	r0, [pc, #240]	; (800a8d8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a7e6:	f7f8 f82a 	bl	800283e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	2b0f      	cmp	r3, #15
 800a7f0:	d904      	bls.n	800a7fc <HAL_TIM_ConfigClockSource+0x3fc>
 800a7f2:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800a7f6:	4838      	ldr	r0, [pc, #224]	; (800a8d8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a7f8:	f7f8 f821 	bl	800283e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6818      	ldr	r0, [r3, #0]
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	6859      	ldr	r1, [r3, #4]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	461a      	mov	r2, r3
 800a80a:	f000 f9e3 	bl	800abd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2150      	movs	r1, #80	; 0x50
 800a814:	4618      	mov	r0, r3
 800a816:	f000 fa3c 	bl	800ac92 <TIM_ITRx_SetConfig>
      break;
 800a81a:	e0e7      	b.n	800a9ec <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a29      	ldr	r2, [pc, #164]	; (800a8c8 <HAL_TIM_ConfigClockSource+0x4c8>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d01d      	beq.n	800a862 <HAL_TIM_ConfigClockSource+0x462>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a82e:	d018      	beq.n	800a862 <HAL_TIM_ConfigClockSource+0x462>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a25      	ldr	r2, [pc, #148]	; (800a8cc <HAL_TIM_ConfigClockSource+0x4cc>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d013      	beq.n	800a862 <HAL_TIM_ConfigClockSource+0x462>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a24      	ldr	r2, [pc, #144]	; (800a8d0 <HAL_TIM_ConfigClockSource+0x4d0>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d00e      	beq.n	800a862 <HAL_TIM_ConfigClockSource+0x462>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a22      	ldr	r2, [pc, #136]	; (800a8d4 <HAL_TIM_ConfigClockSource+0x4d4>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d009      	beq.n	800a862 <HAL_TIM_ConfigClockSource+0x462>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a22      	ldr	r2, [pc, #136]	; (800a8dc <HAL_TIM_ConfigClockSource+0x4dc>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d004      	beq.n	800a862 <HAL_TIM_ConfigClockSource+0x462>
 800a858:	f241 5106 	movw	r1, #5382	; 0x1506
 800a85c:	481e      	ldr	r0, [pc, #120]	; (800a8d8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a85e:	f7f7 ffee 	bl	800283e <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a86a:	d014      	beq.n	800a896 <HAL_TIM_ConfigClockSource+0x496>
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d010      	beq.n	800a896 <HAL_TIM_ConfigClockSource+0x496>
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00c      	beq.n	800a896 <HAL_TIM_ConfigClockSource+0x496>
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	2b02      	cmp	r3, #2
 800a882:	d008      	beq.n	800a896 <HAL_TIM_ConfigClockSource+0x496>
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	2b0a      	cmp	r3, #10
 800a88a:	d004      	beq.n	800a896 <HAL_TIM_ConfigClockSource+0x496>
 800a88c:	f241 5109 	movw	r1, #5385	; 0x1509
 800a890:	4811      	ldr	r0, [pc, #68]	; (800a8d8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a892:	f7f7 ffd4 	bl	800283e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	2b0f      	cmp	r3, #15
 800a89c:	d904      	bls.n	800a8a8 <HAL_TIM_ConfigClockSource+0x4a8>
 800a89e:	f241 510a 	movw	r1, #5386	; 0x150a
 800a8a2:	480d      	ldr	r0, [pc, #52]	; (800a8d8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800a8a4:	f7f7 ffcb 	bl	800283e <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6818      	ldr	r0, [r3, #0]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	6859      	ldr	r1, [r3, #4]
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	f000 f9bc 	bl	800ac32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2160      	movs	r1, #96	; 0x60
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f000 f9e6 	bl	800ac92 <TIM_ITRx_SetConfig>
      break;
 800a8c6:	e091      	b.n	800a9ec <HAL_TIM_ConfigClockSource+0x5ec>
 800a8c8:	40010000 	.word	0x40010000
 800a8cc:	40000400 	.word	0x40000400
 800a8d0:	40000800 	.word	0x40000800
 800a8d4:	40000c00 	.word	0x40000c00
 800a8d8:	08010e3c 	.word	0x08010e3c
 800a8dc:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a48      	ldr	r2, [pc, #288]	; (800aa08 <HAL_TIM_ConfigClockSource+0x608>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d01d      	beq.n	800a926 <HAL_TIM_ConfigClockSource+0x526>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8f2:	d018      	beq.n	800a926 <HAL_TIM_ConfigClockSource+0x526>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a44      	ldr	r2, [pc, #272]	; (800aa0c <HAL_TIM_ConfigClockSource+0x60c>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d013      	beq.n	800a926 <HAL_TIM_ConfigClockSource+0x526>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a43      	ldr	r2, [pc, #268]	; (800aa10 <HAL_TIM_ConfigClockSource+0x610>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d00e      	beq.n	800a926 <HAL_TIM_ConfigClockSource+0x526>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a41      	ldr	r2, [pc, #260]	; (800aa14 <HAL_TIM_ConfigClockSource+0x614>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d009      	beq.n	800a926 <HAL_TIM_ConfigClockSource+0x526>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a40      	ldr	r2, [pc, #256]	; (800aa18 <HAL_TIM_ConfigClockSource+0x618>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d004      	beq.n	800a926 <HAL_TIM_ConfigClockSource+0x526>
 800a91c:	f241 5116 	movw	r1, #5398	; 0x1516
 800a920:	483e      	ldr	r0, [pc, #248]	; (800aa1c <HAL_TIM_ConfigClockSource+0x61c>)
 800a922:	f7f7 ff8c 	bl	800283e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a92e:	d014      	beq.n	800a95a <HAL_TIM_ConfigClockSource+0x55a>
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d010      	beq.n	800a95a <HAL_TIM_ConfigClockSource+0x55a>
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00c      	beq.n	800a95a <HAL_TIM_ConfigClockSource+0x55a>
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	2b02      	cmp	r3, #2
 800a946:	d008      	beq.n	800a95a <HAL_TIM_ConfigClockSource+0x55a>
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	2b0a      	cmp	r3, #10
 800a94e:	d004      	beq.n	800a95a <HAL_TIM_ConfigClockSource+0x55a>
 800a950:	f241 5119 	movw	r1, #5401	; 0x1519
 800a954:	4831      	ldr	r0, [pc, #196]	; (800aa1c <HAL_TIM_ConfigClockSource+0x61c>)
 800a956:	f7f7 ff72 	bl	800283e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	2b0f      	cmp	r3, #15
 800a960:	d904      	bls.n	800a96c <HAL_TIM_ConfigClockSource+0x56c>
 800a962:	f241 511a 	movw	r1, #5402	; 0x151a
 800a966:	482d      	ldr	r0, [pc, #180]	; (800aa1c <HAL_TIM_ConfigClockSource+0x61c>)
 800a968:	f7f7 ff69 	bl	800283e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6818      	ldr	r0, [r3, #0]
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	6859      	ldr	r1, [r3, #4]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	461a      	mov	r2, r3
 800a97a:	f000 f92b 	bl	800abd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2140      	movs	r1, #64	; 0x40
 800a984:	4618      	mov	r0, r3
 800a986:	f000 f984 	bl	800ac92 <TIM_ITRx_SetConfig>
      break;
 800a98a:	e02f      	b.n	800a9ec <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a1d      	ldr	r2, [pc, #116]	; (800aa08 <HAL_TIM_ConfigClockSource+0x608>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d01d      	beq.n	800a9d2 <HAL_TIM_ConfigClockSource+0x5d2>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a99e:	d018      	beq.n	800a9d2 <HAL_TIM_ConfigClockSource+0x5d2>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a19      	ldr	r2, [pc, #100]	; (800aa0c <HAL_TIM_ConfigClockSource+0x60c>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d013      	beq.n	800a9d2 <HAL_TIM_ConfigClockSource+0x5d2>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a18      	ldr	r2, [pc, #96]	; (800aa10 <HAL_TIM_ConfigClockSource+0x610>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d00e      	beq.n	800a9d2 <HAL_TIM_ConfigClockSource+0x5d2>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a16      	ldr	r2, [pc, #88]	; (800aa14 <HAL_TIM_ConfigClockSource+0x614>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d009      	beq.n	800a9d2 <HAL_TIM_ConfigClockSource+0x5d2>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a15      	ldr	r2, [pc, #84]	; (800aa18 <HAL_TIM_ConfigClockSource+0x618>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d004      	beq.n	800a9d2 <HAL_TIM_ConfigClockSource+0x5d2>
 800a9c8:	f241 5129 	movw	r1, #5417	; 0x1529
 800a9cc:	4813      	ldr	r0, [pc, #76]	; (800aa1c <HAL_TIM_ConfigClockSource+0x61c>)
 800a9ce:	f7f7 ff36 	bl	800283e <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	4610      	mov	r0, r2
 800a9de:	f000 f958 	bl	800ac92 <TIM_ITRx_SetConfig>
      break;
 800a9e2:	e003      	b.n	800a9ec <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a9e8:	e000      	b.n	800a9ec <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800a9ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a9fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	40010000 	.word	0x40010000
 800aa0c:	40000400 	.word	0x40000400
 800aa10:	40000800 	.word	0x40000800
 800aa14:	40000c00 	.word	0x40000c00
 800aa18:	40014000 	.word	0x40014000
 800aa1c:	08010e3c 	.word	0x08010e3c

0800aa20 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800aa28:	bf00      	nop
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa3c:	bf00      	nop
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa50:	bf00      	nop
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800aa64:	bf00      	nop
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa78:	bf00      	nop
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800aa8c:	bf00      	nop
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aaa0:	bf00      	nop
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a34      	ldr	r2, [pc, #208]	; (800abb8 <TIM_Base_SetConfig+0xe4>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d00f      	beq.n	800ab0c <TIM_Base_SetConfig+0x38>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaf2:	d00b      	beq.n	800ab0c <TIM_Base_SetConfig+0x38>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a31      	ldr	r2, [pc, #196]	; (800abbc <TIM_Base_SetConfig+0xe8>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d007      	beq.n	800ab0c <TIM_Base_SetConfig+0x38>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a30      	ldr	r2, [pc, #192]	; (800abc0 <TIM_Base_SetConfig+0xec>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d003      	beq.n	800ab0c <TIM_Base_SetConfig+0x38>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a2f      	ldr	r2, [pc, #188]	; (800abc4 <TIM_Base_SetConfig+0xf0>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d108      	bne.n	800ab1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a25      	ldr	r2, [pc, #148]	; (800abb8 <TIM_Base_SetConfig+0xe4>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d01b      	beq.n	800ab5e <TIM_Base_SetConfig+0x8a>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab2c:	d017      	beq.n	800ab5e <TIM_Base_SetConfig+0x8a>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4a22      	ldr	r2, [pc, #136]	; (800abbc <TIM_Base_SetConfig+0xe8>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d013      	beq.n	800ab5e <TIM_Base_SetConfig+0x8a>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4a21      	ldr	r2, [pc, #132]	; (800abc0 <TIM_Base_SetConfig+0xec>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d00f      	beq.n	800ab5e <TIM_Base_SetConfig+0x8a>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4a20      	ldr	r2, [pc, #128]	; (800abc4 <TIM_Base_SetConfig+0xf0>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d00b      	beq.n	800ab5e <TIM_Base_SetConfig+0x8a>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4a1f      	ldr	r2, [pc, #124]	; (800abc8 <TIM_Base_SetConfig+0xf4>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d007      	beq.n	800ab5e <TIM_Base_SetConfig+0x8a>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a1e      	ldr	r2, [pc, #120]	; (800abcc <TIM_Base_SetConfig+0xf8>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d003      	beq.n	800ab5e <TIM_Base_SetConfig+0x8a>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a1d      	ldr	r2, [pc, #116]	; (800abd0 <TIM_Base_SetConfig+0xfc>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d108      	bne.n	800ab70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	689a      	ldr	r2, [r3, #8]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4a08      	ldr	r2, [pc, #32]	; (800abb8 <TIM_Base_SetConfig+0xe4>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d103      	bne.n	800aba4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	691a      	ldr	r2, [r3, #16]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	615a      	str	r2, [r3, #20]
}
 800abaa:	bf00      	nop
 800abac:	3714      	adds	r7, #20
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	40010000 	.word	0x40010000
 800abbc:	40000400 	.word	0x40000400
 800abc0:	40000800 	.word	0x40000800
 800abc4:	40000c00 	.word	0x40000c00
 800abc8:	40014000 	.word	0x40014000
 800abcc:	40014400 	.word	0x40014400
 800abd0:	40014800 	.word	0x40014800

0800abd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b087      	sub	sp, #28
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	6a1b      	ldr	r3, [r3, #32]
 800abe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6a1b      	ldr	r3, [r3, #32]
 800abea:	f023 0201 	bic.w	r2, r3, #1
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	699b      	ldr	r3, [r3, #24]
 800abf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	011b      	lsls	r3, r3, #4
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	f023 030a 	bic.w	r3, r3, #10
 800ac10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac12:	697a      	ldr	r2, [r7, #20]
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	693a      	ldr	r2, [r7, #16]
 800ac1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	697a      	ldr	r2, [r7, #20]
 800ac24:	621a      	str	r2, [r3, #32]
}
 800ac26:	bf00      	nop
 800ac28:	371c      	adds	r7, #28
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac32:	b480      	push	{r7}
 800ac34:	b087      	sub	sp, #28
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	60f8      	str	r0, [r7, #12]
 800ac3a:	60b9      	str	r1, [r7, #8]
 800ac3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	f023 0210 	bic.w	r2, r3, #16
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6a1b      	ldr	r3, [r3, #32]
 800ac54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	031b      	lsls	r3, r3, #12
 800ac62:	697a      	ldr	r2, [r7, #20]
 800ac64:	4313      	orrs	r3, r2
 800ac66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	011b      	lsls	r3, r3, #4
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	4313      	orrs	r3, r2
 800ac78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	697a      	ldr	r2, [r7, #20]
 800ac7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	621a      	str	r2, [r3, #32]
}
 800ac86:	bf00      	nop
 800ac88:	371c      	adds	r7, #28
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b085      	sub	sp, #20
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acaa:	683a      	ldr	r2, [r7, #0]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	4313      	orrs	r3, r2
 800acb0:	f043 0307 	orr.w	r3, r3, #7
 800acb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	609a      	str	r2, [r3, #8]
}
 800acbc:	bf00      	nop
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800acc8:	b480      	push	{r7}
 800acca:	b087      	sub	sp, #28
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	607a      	str	r2, [r7, #4]
 800acd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ace2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	021a      	lsls	r2, r3, #8
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	431a      	orrs	r2, r3
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	4313      	orrs	r3, r2
 800acf0:	697a      	ldr	r2, [r7, #20]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	697a      	ldr	r2, [r7, #20]
 800acfa:	609a      	str	r2, [r3, #8]
}
 800acfc:	bf00      	nop
 800acfe:	371c      	adds	r7, #28
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a1c      	ldr	r2, [pc, #112]	; (800ad84 <TIM_ResetCallback+0x7c>)
 800ad14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a1b      	ldr	r2, [pc, #108]	; (800ad88 <TIM_ResetCallback+0x80>)
 800ad1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a1a      	ldr	r2, [pc, #104]	; (800ad8c <TIM_ResetCallback+0x84>)
 800ad24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a19      	ldr	r2, [pc, #100]	; (800ad90 <TIM_ResetCallback+0x88>)
 800ad2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a18      	ldr	r2, [pc, #96]	; (800ad94 <TIM_ResetCallback+0x8c>)
 800ad34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a17      	ldr	r2, [pc, #92]	; (800ad98 <TIM_ResetCallback+0x90>)
 800ad3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a16      	ldr	r2, [pc, #88]	; (800ad9c <TIM_ResetCallback+0x94>)
 800ad44:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a15      	ldr	r2, [pc, #84]	; (800ada0 <TIM_ResetCallback+0x98>)
 800ad4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a14      	ldr	r2, [pc, #80]	; (800ada4 <TIM_ResetCallback+0x9c>)
 800ad54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a13      	ldr	r2, [pc, #76]	; (800ada8 <TIM_ResetCallback+0xa0>)
 800ad5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a12      	ldr	r2, [pc, #72]	; (800adac <TIM_ResetCallback+0xa4>)
 800ad64:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a11      	ldr	r2, [pc, #68]	; (800adb0 <TIM_ResetCallback+0xa8>)
 800ad6c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a10      	ldr	r2, [pc, #64]	; (800adb4 <TIM_ResetCallback+0xac>)
 800ad74:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800ad78:	bf00      	nop
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr
 800ad84:	08002785 	.word	0x08002785
 800ad88:	0800aa21 	.word	0x0800aa21
 800ad8c:	0800aa99 	.word	0x0800aa99
 800ad90:	0800aaad 	.word	0x0800aaad
 800ad94:	0800aa49 	.word	0x0800aa49
 800ad98:	0800aa5d 	.word	0x0800aa5d
 800ad9c:	0800aa35 	.word	0x0800aa35
 800ada0:	0800aa71 	.word	0x0800aa71
 800ada4:	0800aa85 	.word	0x0800aa85
 800ada8:	0800aac1 	.word	0x0800aac1
 800adac:	0800af35 	.word	0x0800af35
 800adb0:	0800af49 	.word	0x0800af49
 800adb4:	0800af5d 	.word	0x0800af5d

0800adb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a55      	ldr	r2, [pc, #340]	; (800af1c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d018      	beq.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800add4:	d013      	beq.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a51      	ldr	r2, [pc, #324]	; (800af20 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d00e      	beq.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a4f      	ldr	r2, [pc, #316]	; (800af24 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d009      	beq.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a4e      	ldr	r2, [pc, #312]	; (800af28 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d004      	beq.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800adf4:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800adf8:	484c      	ldr	r0, [pc, #304]	; (800af2c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800adfa:	f7f7 fd20 	bl	800283e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d020      	beq.n	800ae48 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b10      	cmp	r3, #16
 800ae0c:	d01c      	beq.n	800ae48 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b20      	cmp	r3, #32
 800ae14:	d018      	beq.n	800ae48 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2b30      	cmp	r3, #48	; 0x30
 800ae1c:	d014      	beq.n	800ae48 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b40      	cmp	r3, #64	; 0x40
 800ae24:	d010      	beq.n	800ae48 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2b50      	cmp	r3, #80	; 0x50
 800ae2c:	d00c      	beq.n	800ae48 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b60      	cmp	r3, #96	; 0x60
 800ae34:	d008      	beq.n	800ae48 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b70      	cmp	r3, #112	; 0x70
 800ae3c:	d004      	beq.n	800ae48 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ae3e:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800ae42:	483a      	ldr	r0, [pc, #232]	; (800af2c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ae44:	f7f7 fcfb 	bl	800283e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	2b80      	cmp	r3, #128	; 0x80
 800ae4e:	d008      	beq.n	800ae62 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d004      	beq.n	800ae62 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800ae58:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800ae5c:	4833      	ldr	r0, [pc, #204]	; (800af2c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ae5e:	f7f7 fcee 	bl	800283e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d101      	bne.n	800ae70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ae6c:	2302      	movs	r3, #2
 800ae6e:	e050      	b.n	800af12 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2202      	movs	r2, #2
 800ae7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a1b      	ldr	r2, [pc, #108]	; (800af1c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d018      	beq.n	800aee6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aebc:	d013      	beq.n	800aee6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a17      	ldr	r2, [pc, #92]	; (800af20 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d00e      	beq.n	800aee6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a15      	ldr	r2, [pc, #84]	; (800af24 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d009      	beq.n	800aee6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a14      	ldr	r2, [pc, #80]	; (800af28 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d004      	beq.n	800aee6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a13      	ldr	r2, [pc, #76]	; (800af30 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d10c      	bne.n	800af00 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aeec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	4313      	orrs	r3, r2
 800aef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	68ba      	ldr	r2, [r7, #8]
 800aefe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	40010000 	.word	0x40010000
 800af20:	40000400 	.word	0x40000400
 800af24:	40000800 	.word	0x40000800
 800af28:	40000c00 	.word	0x40000c00
 800af2c:	08010eb0 	.word	0x08010eb0
 800af30:	40014000 	.word	0x40014000

0800af34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af3c:	bf00      	nop
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af64:	bf00      	nop
 800af66:	370c      	adds	r7, #12
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d101      	bne.n	800af82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	e0ab      	b.n	800b0da <HAL_UART_Init+0x16a>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d02c      	beq.n	800afe4 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a55      	ldr	r2, [pc, #340]	; (800b0e4 <HAL_UART_Init+0x174>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d00e      	beq.n	800afb2 <HAL_UART_Init+0x42>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a53      	ldr	r2, [pc, #332]	; (800b0e8 <HAL_UART_Init+0x178>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d009      	beq.n	800afb2 <HAL_UART_Init+0x42>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a52      	ldr	r2, [pc, #328]	; (800b0ec <HAL_UART_Init+0x17c>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d004      	beq.n	800afb2 <HAL_UART_Init+0x42>
 800afa8:	f240 1173 	movw	r1, #371	; 0x173
 800afac:	4850      	ldr	r0, [pc, #320]	; (800b0f0 <HAL_UART_Init+0x180>)
 800afae:	f7f7 fc46 	bl	800283e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d028      	beq.n	800b00c <HAL_UART_Init+0x9c>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	699b      	ldr	r3, [r3, #24]
 800afbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afc2:	d023      	beq.n	800b00c <HAL_UART_Init+0x9c>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afcc:	d01e      	beq.n	800b00c <HAL_UART_Init+0x9c>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afd6:	d019      	beq.n	800b00c <HAL_UART_Init+0x9c>
 800afd8:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800afdc:	4844      	ldr	r0, [pc, #272]	; (800b0f0 <HAL_UART_Init+0x180>)
 800afde:	f7f7 fc2e 	bl	800283e <assert_failed>
 800afe2:	e013      	b.n	800b00c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a3e      	ldr	r2, [pc, #248]	; (800b0e4 <HAL_UART_Init+0x174>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d00e      	beq.n	800b00c <HAL_UART_Init+0x9c>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a3d      	ldr	r2, [pc, #244]	; (800b0e8 <HAL_UART_Init+0x178>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d009      	beq.n	800b00c <HAL_UART_Init+0x9c>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a3b      	ldr	r2, [pc, #236]	; (800b0ec <HAL_UART_Init+0x17c>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d004      	beq.n	800b00c <HAL_UART_Init+0x9c>
 800b002:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800b006:	483a      	ldr	r0, [pc, #232]	; (800b0f0 <HAL_UART_Init+0x180>)
 800b008:	f7f7 fc19 	bl	800283e <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d009      	beq.n	800b028 <HAL_UART_Init+0xb8>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b01c:	d004      	beq.n	800b028 <HAL_UART_Init+0xb8>
 800b01e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800b022:	4833      	ldr	r0, [pc, #204]	; (800b0f0 <HAL_UART_Init+0x180>)
 800b024:	f7f7 fc0b 	bl	800283e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	69db      	ldr	r3, [r3, #28]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d009      	beq.n	800b044 <HAL_UART_Init+0xd4>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	69db      	ldr	r3, [r3, #28]
 800b034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b038:	d004      	beq.n	800b044 <HAL_UART_Init+0xd4>
 800b03a:	f240 117b 	movw	r1, #379	; 0x17b
 800b03e:	482c      	ldr	r0, [pc, #176]	; (800b0f0 <HAL_UART_Init+0x180>)
 800b040:	f7f7 fbfd 	bl	800283e <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d111      	bne.n	800b074 <HAL_UART_Init+0x104>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 fb61 	bl	800b720 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b062:	2b00      	cmp	r3, #0
 800b064:	d102      	bne.n	800b06c <HAL_UART_Init+0xfc>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4a22      	ldr	r2, [pc, #136]	; (800b0f4 <HAL_UART_Init+0x184>)
 800b06a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2224      	movs	r2, #36	; 0x24
 800b078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68da      	ldr	r2, [r3, #12]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b08a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 fd5b 	bl	800bb48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	691a      	ldr	r2, [r3, #16]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b0a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	695a      	ldr	r2, [r3, #20]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b0b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	68da      	ldr	r2, [r3, #12]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b0c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2220      	movs	r2, #32
 800b0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2220      	movs	r2, #32
 800b0d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3708      	adds	r7, #8
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	40011000 	.word	0x40011000
 800b0e8:	40004400 	.word	0x40004400
 800b0ec:	40011400 	.word	0x40011400
 800b0f0:	08010f28 	.word	0x08010f28
 800b0f4:	08003469 	.word	0x08003469

0800b0f8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	4613      	mov	r3, r2
 800b104:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	2b20      	cmp	r3, #32
 800b110:	d11d      	bne.n	800b14e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d002      	beq.n	800b11e <HAL_UART_Receive_IT+0x26>
 800b118:	88fb      	ldrh	r3, [r7, #6]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e016      	b.n	800b150 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d101      	bne.n	800b130 <HAL_UART_Receive_IT+0x38>
 800b12c:	2302      	movs	r3, #2
 800b12e:	e00f      	b.n	800b150 <HAL_UART_Receive_IT+0x58>
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2200      	movs	r2, #0
 800b13c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b13e:	88fb      	ldrh	r3, [r7, #6]
 800b140:	461a      	mov	r2, r3
 800b142:	68b9      	ldr	r1, [r7, #8]
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f000 fb23 	bl	800b790 <UART_Start_Receive_IT>
 800b14a:	4603      	mov	r3, r0
 800b14c:	e000      	b.n	800b150 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b14e:	2302      	movs	r3, #2
  }
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b0ba      	sub	sp, #232	; 0xe8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	695b      	ldr	r3, [r3, #20]
 800b17a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b17e:	2300      	movs	r3, #0
 800b180:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b184:	2300      	movs	r3, #0
 800b186:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b18a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b18e:	f003 030f 	and.w	r3, r3, #15
 800b192:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10f      	bne.n	800b1be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b19e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1a2:	f003 0320 	and.w	r3, r3, #32
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d009      	beq.n	800b1be <HAL_UART_IRQHandler+0x66>
 800b1aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1ae:	f003 0320 	and.w	r3, r3, #32
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d003      	beq.n	800b1be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fc09 	bl	800b9ce <UART_Receive_IT>
      return;
 800b1bc:	e25b      	b.n	800b676 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b1be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	f000 80e1 	beq.w	800b38a <HAL_UART_IRQHandler+0x232>
 800b1c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1cc:	f003 0301 	and.w	r3, r3, #1
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d106      	bne.n	800b1e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b1d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f000 80d4 	beq.w	800b38a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b1e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1e6:	f003 0301 	and.w	r3, r3, #1
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d00b      	beq.n	800b206 <HAL_UART_IRQHandler+0xae>
 800b1ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d005      	beq.n	800b206 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fe:	f043 0201 	orr.w	r2, r3, #1
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b20a:	f003 0304 	and.w	r3, r3, #4
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00b      	beq.n	800b22a <HAL_UART_IRQHandler+0xd2>
 800b212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b216:	f003 0301 	and.w	r3, r3, #1
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d005      	beq.n	800b22a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b222:	f043 0202 	orr.w	r2, r3, #2
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b22a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b22e:	f003 0302 	and.w	r3, r3, #2
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00b      	beq.n	800b24e <HAL_UART_IRQHandler+0xf6>
 800b236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b23a:	f003 0301 	and.w	r3, r3, #1
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d005      	beq.n	800b24e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b246:	f043 0204 	orr.w	r2, r3, #4
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b24e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b252:	f003 0308 	and.w	r3, r3, #8
 800b256:	2b00      	cmp	r3, #0
 800b258:	d011      	beq.n	800b27e <HAL_UART_IRQHandler+0x126>
 800b25a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b25e:	f003 0320 	and.w	r3, r3, #32
 800b262:	2b00      	cmp	r3, #0
 800b264:	d105      	bne.n	800b272 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b26a:	f003 0301 	and.w	r3, r3, #1
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d005      	beq.n	800b27e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b276:	f043 0208 	orr.w	r2, r3, #8
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b282:	2b00      	cmp	r3, #0
 800b284:	f000 81f2 	beq.w	800b66c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b28c:	f003 0320 	and.w	r3, r3, #32
 800b290:	2b00      	cmp	r3, #0
 800b292:	d008      	beq.n	800b2a6 <HAL_UART_IRQHandler+0x14e>
 800b294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b298:	f003 0320 	and.w	r3, r3, #32
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 fb94 	bl	800b9ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	695b      	ldr	r3, [r3, #20]
 800b2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2b0:	2b40      	cmp	r3, #64	; 0x40
 800b2b2:	bf0c      	ite	eq
 800b2b4:	2301      	moveq	r3, #1
 800b2b6:	2300      	movne	r3, #0
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c2:	f003 0308 	and.w	r3, r3, #8
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d103      	bne.n	800b2d2 <HAL_UART_IRQHandler+0x17a>
 800b2ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d051      	beq.n	800b376 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 fa9a 	bl	800b80c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	695b      	ldr	r3, [r3, #20]
 800b2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2e2:	2b40      	cmp	r3, #64	; 0x40
 800b2e4:	d142      	bne.n	800b36c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3314      	adds	r3, #20
 800b2ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b2f4:	e853 3f00 	ldrex	r3, [r3]
 800b2f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b2fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	3314      	adds	r3, #20
 800b30e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b312:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b31a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b31e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b322:	e841 2300 	strex	r3, r2, [r1]
 800b326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b32a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1d9      	bne.n	800b2e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b336:	2b00      	cmp	r3, #0
 800b338:	d013      	beq.n	800b362 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b33e:	4a7f      	ldr	r2, [pc, #508]	; (800b53c <HAL_UART_IRQHandler+0x3e4>)
 800b340:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b346:	4618      	mov	r0, r3
 800b348:	f7f9 fdd6 	bl	8004ef8 <HAL_DMA_Abort_IT>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d019      	beq.n	800b386 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b35c:	4610      	mov	r0, r2
 800b35e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b360:	e011      	b.n	800b386 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b36a:	e00c      	b.n	800b386 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b374:	e007      	b.n	800b386 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b384:	e172      	b.n	800b66c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b386:	bf00      	nop
    return;
 800b388:	e170      	b.n	800b66c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b38e:	2b01      	cmp	r3, #1
 800b390:	f040 814c 	bne.w	800b62c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b398:	f003 0310 	and.w	r3, r3, #16
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	f000 8145 	beq.w	800b62c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b3a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3a6:	f003 0310 	and.w	r3, r3, #16
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f000 813e 	beq.w	800b62c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	60bb      	str	r3, [r7, #8]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	60bb      	str	r3, [r7, #8]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	60bb      	str	r3, [r7, #8]
 800b3c4:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	695b      	ldr	r3, [r3, #20]
 800b3cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3d0:	2b40      	cmp	r3, #64	; 0x40
 800b3d2:	f040 80b5 	bne.w	800b540 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b3e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f000 8142 	beq.w	800b670 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b3f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	f080 813b 	bcs.w	800b670 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b400:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b406:	69db      	ldr	r3, [r3, #28]
 800b408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b40c:	f000 8088 	beq.w	800b520 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	330c      	adds	r3, #12
 800b416:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b41e:	e853 3f00 	ldrex	r3, [r3]
 800b422:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b426:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b42a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b42e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	330c      	adds	r3, #12
 800b438:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b43c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b444:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b448:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b44c:	e841 2300 	strex	r3, r2, [r1]
 800b450:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b454:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d1d9      	bne.n	800b410 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	3314      	adds	r3, #20
 800b462:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b466:	e853 3f00 	ldrex	r3, [r3]
 800b46a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b46c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b46e:	f023 0301 	bic.w	r3, r3, #1
 800b472:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	3314      	adds	r3, #20
 800b47c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b480:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b484:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b486:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b488:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b48c:	e841 2300 	strex	r3, r2, [r1]
 800b490:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1e1      	bne.n	800b45c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3314      	adds	r3, #20
 800b49e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4a2:	e853 3f00 	ldrex	r3, [r3]
 800b4a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b4a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	3314      	adds	r3, #20
 800b4b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b4bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b4be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b4c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b4c4:	e841 2300 	strex	r3, r2, [r1]
 800b4c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b4ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1e3      	bne.n	800b498 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2220      	movs	r2, #32
 800b4d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	330c      	adds	r3, #12
 800b4e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4e8:	e853 3f00 	ldrex	r3, [r3]
 800b4ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b4ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4f0:	f023 0310 	bic.w	r3, r3, #16
 800b4f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	330c      	adds	r3, #12
 800b4fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b502:	65ba      	str	r2, [r7, #88]	; 0x58
 800b504:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b506:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b50a:	e841 2300 	strex	r3, r2, [r1]
 800b50e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1e3      	bne.n	800b4de <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7f9 fc7c 	bl	8004e18 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b52c:	b292      	uxth	r2, r2
 800b52e:	1a8a      	subs	r2, r1, r2
 800b530:	b292      	uxth	r2, r2
 800b532:	4611      	mov	r1, r2
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b538:	e09a      	b.n	800b670 <HAL_UART_IRQHandler+0x518>
 800b53a:	bf00      	nop
 800b53c:	0800b8d3 	.word	0x0800b8d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b548:	b29b      	uxth	r3, r3
 800b54a:	1ad3      	subs	r3, r2, r3
 800b54c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b554:	b29b      	uxth	r3, r3
 800b556:	2b00      	cmp	r3, #0
 800b558:	f000 808c 	beq.w	800b674 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b55c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b560:	2b00      	cmp	r3, #0
 800b562:	f000 8087 	beq.w	800b674 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	330c      	adds	r3, #12
 800b56c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b570:	e853 3f00 	ldrex	r3, [r3]
 800b574:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b578:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b57c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	330c      	adds	r3, #12
 800b586:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b58a:	647a      	str	r2, [r7, #68]	; 0x44
 800b58c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b590:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b592:	e841 2300 	strex	r3, r2, [r1]
 800b596:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1e3      	bne.n	800b566 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	3314      	adds	r3, #20
 800b5a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a8:	e853 3f00 	ldrex	r3, [r3]
 800b5ac:	623b      	str	r3, [r7, #32]
   return(result);
 800b5ae:	6a3b      	ldr	r3, [r7, #32]
 800b5b0:	f023 0301 	bic.w	r3, r3, #1
 800b5b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	3314      	adds	r3, #20
 800b5be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b5c2:	633a      	str	r2, [r7, #48]	; 0x30
 800b5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5ca:	e841 2300 	strex	r3, r2, [r1]
 800b5ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1e3      	bne.n	800b59e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2220      	movs	r2, #32
 800b5da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	330c      	adds	r3, #12
 800b5ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	e853 3f00 	ldrex	r3, [r3]
 800b5f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f023 0310 	bic.w	r3, r3, #16
 800b5fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	330c      	adds	r3, #12
 800b604:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b608:	61fa      	str	r2, [r7, #28]
 800b60a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60c:	69b9      	ldr	r1, [r7, #24]
 800b60e:	69fa      	ldr	r2, [r7, #28]
 800b610:	e841 2300 	strex	r3, r2, [r1]
 800b614:	617b      	str	r3, [r7, #20]
   return(result);
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1e3      	bne.n	800b5e4 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b620:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b624:	4611      	mov	r1, r2
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b62a:	e023      	b.n	800b674 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b62c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b634:	2b00      	cmp	r3, #0
 800b636:	d009      	beq.n	800b64c <HAL_UART_IRQHandler+0x4f4>
 800b638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b63c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b640:	2b00      	cmp	r3, #0
 800b642:	d003      	beq.n	800b64c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 f959 	bl	800b8fc <UART_Transmit_IT>
    return;
 800b64a:	e014      	b.n	800b676 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b64c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00e      	beq.n	800b676 <HAL_UART_IRQHandler+0x51e>
 800b658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b65c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b660:	2b00      	cmp	r3, #0
 800b662:	d008      	beq.n	800b676 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f999 	bl	800b99c <UART_EndTransmit_IT>
    return;
 800b66a:	e004      	b.n	800b676 <HAL_UART_IRQHandler+0x51e>
    return;
 800b66c:	bf00      	nop
 800b66e:	e002      	b.n	800b676 <HAL_UART_IRQHandler+0x51e>
      return;
 800b670:	bf00      	nop
 800b672:	e000      	b.n	800b676 <HAL_UART_IRQHandler+0x51e>
      return;
 800b674:	bf00      	nop
  }
}
 800b676:	37e8      	adds	r7, #232	; 0xe8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b684:	bf00      	nop
 800b686:	370c      	adds	r7, #12
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b698:	bf00      	nop
 800b69a:	370c      	adds	r7, #12
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b6ac:	bf00      	nop
 800b6ae:	370c      	adds	r7, #12
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b6c0:	bf00      	nop
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b6d4:	bf00      	nop
 800b6d6:	370c      	adds	r7, #12
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b6e8:	bf00      	nop
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b6fc:	bf00      	nop
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	460b      	mov	r3, r1
 800b712:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b714:	bf00      	nop
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	4a10      	ldr	r2, [pc, #64]	; (800b76c <UART_InitCallbacksToDefault+0x4c>)
 800b72c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	4a0f      	ldr	r2, [pc, #60]	; (800b770 <UART_InitCallbacksToDefault+0x50>)
 800b732:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4a0f      	ldr	r2, [pc, #60]	; (800b774 <UART_InitCallbacksToDefault+0x54>)
 800b738:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a0e      	ldr	r2, [pc, #56]	; (800b778 <UART_InitCallbacksToDefault+0x58>)
 800b73e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	4a0e      	ldr	r2, [pc, #56]	; (800b77c <UART_InitCallbacksToDefault+0x5c>)
 800b744:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4a0d      	ldr	r2, [pc, #52]	; (800b780 <UART_InitCallbacksToDefault+0x60>)
 800b74a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	4a0d      	ldr	r2, [pc, #52]	; (800b784 <UART_InitCallbacksToDefault+0x64>)
 800b750:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4a0c      	ldr	r2, [pc, #48]	; (800b788 <UART_InitCallbacksToDefault+0x68>)
 800b756:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4a0c      	ldr	r2, [pc, #48]	; (800b78c <UART_InitCallbacksToDefault+0x6c>)
 800b75c:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b75e:	bf00      	nop
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	0800b691 	.word	0x0800b691
 800b770:	0800b67d 	.word	0x0800b67d
 800b774:	0800b6a5 	.word	0x0800b6a5
 800b778:	08003509 	.word	0x08003509
 800b77c:	0800b6b9 	.word	0x0800b6b9
 800b780:	0800b6cd 	.word	0x0800b6cd
 800b784:	0800b6e1 	.word	0x0800b6e1
 800b788:	0800b6f5 	.word	0x0800b6f5
 800b78c:	0800b709 	.word	0x0800b709

0800b790 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b790:	b480      	push	{r7}
 800b792:	b085      	sub	sp, #20
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	4613      	mov	r3, r2
 800b79c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	68ba      	ldr	r2, [r7, #8]
 800b7a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	88fa      	ldrh	r2, [r7, #6]
 800b7a8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	88fa      	ldrh	r2, [r7, #6]
 800b7ae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2222      	movs	r2, #34	; 0x22
 800b7ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	691b      	ldr	r3, [r3, #16]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d007      	beq.n	800b7de <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68da      	ldr	r2, [r3, #12]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	695a      	ldr	r2, [r3, #20]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f042 0201 	orr.w	r2, r2, #1
 800b7ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	68da      	ldr	r2, [r3, #12]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f042 0220 	orr.w	r2, r2, #32
 800b7fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3714      	adds	r7, #20
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b095      	sub	sp, #84	; 0x54
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	330c      	adds	r3, #12
 800b81a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b81e:	e853 3f00 	ldrex	r3, [r3]
 800b822:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b826:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b82a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	330c      	adds	r3, #12
 800b832:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b834:	643a      	str	r2, [r7, #64]	; 0x40
 800b836:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b838:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b83a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b83c:	e841 2300 	strex	r3, r2, [r1]
 800b840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1e5      	bne.n	800b814 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3314      	adds	r3, #20
 800b84e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b850:	6a3b      	ldr	r3, [r7, #32]
 800b852:	e853 3f00 	ldrex	r3, [r3]
 800b856:	61fb      	str	r3, [r7, #28]
   return(result);
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	f023 0301 	bic.w	r3, r3, #1
 800b85e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	3314      	adds	r3, #20
 800b866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b868:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b86a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b86e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b870:	e841 2300 	strex	r3, r2, [r1]
 800b874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d1e5      	bne.n	800b848 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b880:	2b01      	cmp	r3, #1
 800b882:	d119      	bne.n	800b8b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	330c      	adds	r3, #12
 800b88a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	e853 3f00 	ldrex	r3, [r3]
 800b892:	60bb      	str	r3, [r7, #8]
   return(result);
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	f023 0310 	bic.w	r3, r3, #16
 800b89a:	647b      	str	r3, [r7, #68]	; 0x44
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	330c      	adds	r3, #12
 800b8a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8a4:	61ba      	str	r2, [r7, #24]
 800b8a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a8:	6979      	ldr	r1, [r7, #20]
 800b8aa:	69ba      	ldr	r2, [r7, #24]
 800b8ac:	e841 2300 	strex	r3, r2, [r1]
 800b8b0:	613b      	str	r3, [r7, #16]
   return(result);
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1e5      	bne.n	800b884 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2220      	movs	r2, #32
 800b8bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b8c6:	bf00      	nop
 800b8c8:	3754      	adds	r7, #84	; 0x54
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr

0800b8d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b084      	sub	sp, #16
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8f4:	bf00      	nop
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	2b21      	cmp	r3, #33	; 0x21
 800b90e:	d13e      	bne.n	800b98e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b918:	d114      	bne.n	800b944 <UART_Transmit_IT+0x48>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d110      	bne.n	800b944 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6a1b      	ldr	r3, [r3, #32]
 800b926:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	881b      	ldrh	r3, [r3, #0]
 800b92c:	461a      	mov	r2, r3
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b936:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a1b      	ldr	r3, [r3, #32]
 800b93c:	1c9a      	adds	r2, r3, #2
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	621a      	str	r2, [r3, #32]
 800b942:	e008      	b.n	800b956 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6a1b      	ldr	r3, [r3, #32]
 800b948:	1c59      	adds	r1, r3, #1
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	6211      	str	r1, [r2, #32]
 800b94e:	781a      	ldrb	r2, [r3, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	3b01      	subs	r3, #1
 800b95e:	b29b      	uxth	r3, r3
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	4619      	mov	r1, r3
 800b964:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b966:	2b00      	cmp	r3, #0
 800b968:	d10f      	bne.n	800b98a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	68da      	ldr	r2, [r3, #12]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b978:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68da      	ldr	r2, [r3, #12]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b988:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b98a:	2300      	movs	r3, #0
 800b98c:	e000      	b.n	800b990 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b98e:	2302      	movs	r3, #2
  }
}
 800b990:	4618      	mov	r0, r3
 800b992:	3714      	adds	r7, #20
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	68da      	ldr	r2, [r3, #12]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2220      	movs	r2, #32
 800b9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3708      	adds	r7, #8
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b08c      	sub	sp, #48	; 0x30
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	2b22      	cmp	r3, #34	; 0x22
 800b9e0:	f040 80ad 	bne.w	800bb3e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	689b      	ldr	r3, [r3, #8]
 800b9e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9ec:	d117      	bne.n	800ba1e <UART_Receive_IT+0x50>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	691b      	ldr	r3, [r3, #16]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d113      	bne.n	800ba1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba0c:	b29a      	uxth	r2, r3
 800ba0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba16:	1c9a      	adds	r2, r3, #2
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	629a      	str	r2, [r3, #40]	; 0x28
 800ba1c:	e026      	b.n	800ba6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ba24:	2300      	movs	r3, #0
 800ba26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba30:	d007      	beq.n	800ba42 <UART_Receive_IT+0x74>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d10a      	bne.n	800ba50 <UART_Receive_IT+0x82>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	691b      	ldr	r3, [r3, #16]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d106      	bne.n	800ba50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	b2da      	uxtb	r2, r3
 800ba4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4c:	701a      	strb	r2, [r3, #0]
 800ba4e:	e008      	b.n	800ba62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba5c:	b2da      	uxtb	r2, r3
 800ba5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba66:	1c5a      	adds	r2, r3, #1
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	3b01      	subs	r3, #1
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	4619      	mov	r1, r3
 800ba7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d15c      	bne.n	800bb3a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	68da      	ldr	r2, [r3, #12]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f022 0220 	bic.w	r2, r2, #32
 800ba8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	68da      	ldr	r2, [r3, #12]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	695a      	ldr	r2, [r3, #20]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f022 0201 	bic.w	r2, r2, #1
 800baae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2220      	movs	r2, #32
 800bab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800babc:	2b01      	cmp	r3, #1
 800babe:	d136      	bne.n	800bb2e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	330c      	adds	r3, #12
 800bacc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	e853 3f00 	ldrex	r3, [r3]
 800bad4:	613b      	str	r3, [r7, #16]
   return(result);
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	f023 0310 	bic.w	r3, r3, #16
 800badc:	627b      	str	r3, [r7, #36]	; 0x24
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	330c      	adds	r3, #12
 800bae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bae6:	623a      	str	r2, [r7, #32]
 800bae8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baea:	69f9      	ldr	r1, [r7, #28]
 800baec:	6a3a      	ldr	r2, [r7, #32]
 800baee:	e841 2300 	strex	r3, r2, [r1]
 800baf2:	61bb      	str	r3, [r7, #24]
   return(result);
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1e5      	bne.n	800bac6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f003 0310 	and.w	r3, r3, #16
 800bb04:	2b10      	cmp	r3, #16
 800bb06:	d10a      	bne.n	800bb1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb08:	2300      	movs	r3, #0
 800bb0a:	60fb      	str	r3, [r7, #12]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	60fb      	str	r3, [r7, #12]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	60fb      	str	r3, [r7, #12]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800bb26:	4611      	mov	r1, r2
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	4798      	blx	r3
 800bb2c:	e003      	b.n	800bb36 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	e002      	b.n	800bb40 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e000      	b.n	800bb40 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800bb3e:	2302      	movs	r3, #2
  }
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3730      	adds	r7, #48	; 0x30
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb4c:	b0c0      	sub	sp, #256	; 0x100
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bb54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb58:	685a      	ldr	r2, [r3, #4]
 800bb5a:	4bcf      	ldr	r3, [pc, #828]	; (800be98 <UART_SetConfig+0x350>)
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d904      	bls.n	800bb6a <UART_SetConfig+0x22>
 800bb60:	f640 6161 	movw	r1, #3681	; 0xe61
 800bb64:	48cd      	ldr	r0, [pc, #820]	; (800be9c <UART_SetConfig+0x354>)
 800bb66:	f7f6 fe6a 	bl	800283e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800bb6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00a      	beq.n	800bb8a <UART_SetConfig+0x42>
 800bb74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb7e:	d004      	beq.n	800bb8a <UART_SetConfig+0x42>
 800bb80:	f640 6162 	movw	r1, #3682	; 0xe62
 800bb84:	48c5      	ldr	r0, [pc, #788]	; (800be9c <UART_SetConfig+0x354>)
 800bb86:	f7f6 fe5a 	bl	800283e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800bb8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d010      	beq.n	800bbb6 <UART_SetConfig+0x6e>
 800bb94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb98:	691b      	ldr	r3, [r3, #16]
 800bb9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb9e:	d00a      	beq.n	800bbb6 <UART_SetConfig+0x6e>
 800bba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bba4:	691b      	ldr	r3, [r3, #16]
 800bba6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bbaa:	d004      	beq.n	800bbb6 <UART_SetConfig+0x6e>
 800bbac:	f640 6163 	movw	r1, #3683	; 0xe63
 800bbb0:	48ba      	ldr	r0, [pc, #744]	; (800be9c <UART_SetConfig+0x354>)
 800bbb2:	f7f6 fe44 	bl	800283e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800bbb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbba:	695a      	ldr	r2, [r3, #20]
 800bbbc:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d104      	bne.n	800bbd0 <UART_SetConfig+0x88>
 800bbc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbca:	695b      	ldr	r3, [r3, #20]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d104      	bne.n	800bbda <UART_SetConfig+0x92>
 800bbd0:	f640 6164 	movw	r1, #3684	; 0xe64
 800bbd4:	48b1      	ldr	r0, [pc, #708]	; (800be9c <UART_SetConfig+0x354>)
 800bbd6:	f7f6 fe32 	bl	800283e <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	691b      	ldr	r3, [r3, #16]
 800bbe2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bbe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbea:	68d9      	ldr	r1, [r3, #12]
 800bbec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	ea40 0301 	orr.w	r3, r0, r1
 800bbf6:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bbf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbfc:	689a      	ldr	r2, [r3, #8]
 800bbfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc02:	691b      	ldr	r3, [r3, #16]
 800bc04:	431a      	orrs	r2, r3
 800bc06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc0a:	695b      	ldr	r3, [r3, #20]
 800bc0c:	431a      	orrs	r2, r3
 800bc0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc12:	69db      	ldr	r3, [r3, #28]
 800bc14:	4313      	orrs	r3, r2
 800bc16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bc1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bc26:	f021 010c 	bic.w	r1, r1, #12
 800bc2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bc34:	430b      	orrs	r3, r1
 800bc36:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bc38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	695b      	ldr	r3, [r3, #20]
 800bc40:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bc44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc48:	6999      	ldr	r1, [r3, #24]
 800bc4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	ea40 0301 	orr.w	r3, r0, r1
 800bc54:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bc56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	4b90      	ldr	r3, [pc, #576]	; (800bea0 <UART_SetConfig+0x358>)
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d005      	beq.n	800bc6e <UART_SetConfig+0x126>
 800bc62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	4b8e      	ldr	r3, [pc, #568]	; (800bea4 <UART_SetConfig+0x35c>)
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d104      	bne.n	800bc78 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bc6e:	f7fc fd75 	bl	800875c <HAL_RCC_GetPCLK2Freq>
 800bc72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bc76:	e003      	b.n	800bc80 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc78:	f7fc fd5c 	bl	8008734 <HAL_RCC_GetPCLK1Freq>
 800bc7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc84:	69db      	ldr	r3, [r3, #28]
 800bc86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc8a:	f040 810f 	bne.w	800beac <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bc8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc92:	2200      	movs	r2, #0
 800bc94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bc98:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bc9c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bca0:	4622      	mov	r2, r4
 800bca2:	462b      	mov	r3, r5
 800bca4:	1891      	adds	r1, r2, r2
 800bca6:	65b9      	str	r1, [r7, #88]	; 0x58
 800bca8:	415b      	adcs	r3, r3
 800bcaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bcb0:	4621      	mov	r1, r4
 800bcb2:	eb12 0801 	adds.w	r8, r2, r1
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	eb43 0901 	adc.w	r9, r3, r1
 800bcbc:	f04f 0200 	mov.w	r2, #0
 800bcc0:	f04f 0300 	mov.w	r3, #0
 800bcc4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bcc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bccc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bcd0:	4690      	mov	r8, r2
 800bcd2:	4699      	mov	r9, r3
 800bcd4:	4623      	mov	r3, r4
 800bcd6:	eb18 0303 	adds.w	r3, r8, r3
 800bcda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bcde:	462b      	mov	r3, r5
 800bce0:	eb49 0303 	adc.w	r3, r9, r3
 800bce4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bcf4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bcf8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	18db      	adds	r3, r3, r3
 800bd00:	653b      	str	r3, [r7, #80]	; 0x50
 800bd02:	4613      	mov	r3, r2
 800bd04:	eb42 0303 	adc.w	r3, r2, r3
 800bd08:	657b      	str	r3, [r7, #84]	; 0x54
 800bd0a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bd0e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bd12:	f7f4 fa65 	bl	80001e0 <__aeabi_uldivmod>
 800bd16:	4602      	mov	r2, r0
 800bd18:	460b      	mov	r3, r1
 800bd1a:	4b63      	ldr	r3, [pc, #396]	; (800bea8 <UART_SetConfig+0x360>)
 800bd1c:	fba3 2302 	umull	r2, r3, r3, r2
 800bd20:	095b      	lsrs	r3, r3, #5
 800bd22:	011c      	lsls	r4, r3, #4
 800bd24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd2e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bd32:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bd36:	4642      	mov	r2, r8
 800bd38:	464b      	mov	r3, r9
 800bd3a:	1891      	adds	r1, r2, r2
 800bd3c:	64b9      	str	r1, [r7, #72]	; 0x48
 800bd3e:	415b      	adcs	r3, r3
 800bd40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bd46:	4641      	mov	r1, r8
 800bd48:	eb12 0a01 	adds.w	sl, r2, r1
 800bd4c:	4649      	mov	r1, r9
 800bd4e:	eb43 0b01 	adc.w	fp, r3, r1
 800bd52:	f04f 0200 	mov.w	r2, #0
 800bd56:	f04f 0300 	mov.w	r3, #0
 800bd5a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bd5e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bd62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bd66:	4692      	mov	sl, r2
 800bd68:	469b      	mov	fp, r3
 800bd6a:	4643      	mov	r3, r8
 800bd6c:	eb1a 0303 	adds.w	r3, sl, r3
 800bd70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd74:	464b      	mov	r3, r9
 800bd76:	eb4b 0303 	adc.w	r3, fp, r3
 800bd7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bd7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd8a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bd8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bd92:	460b      	mov	r3, r1
 800bd94:	18db      	adds	r3, r3, r3
 800bd96:	643b      	str	r3, [r7, #64]	; 0x40
 800bd98:	4613      	mov	r3, r2
 800bd9a:	eb42 0303 	adc.w	r3, r2, r3
 800bd9e:	647b      	str	r3, [r7, #68]	; 0x44
 800bda0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bda4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bda8:	f7f4 fa1a 	bl	80001e0 <__aeabi_uldivmod>
 800bdac:	4602      	mov	r2, r0
 800bdae:	460b      	mov	r3, r1
 800bdb0:	4611      	mov	r1, r2
 800bdb2:	4b3d      	ldr	r3, [pc, #244]	; (800bea8 <UART_SetConfig+0x360>)
 800bdb4:	fba3 2301 	umull	r2, r3, r3, r1
 800bdb8:	095b      	lsrs	r3, r3, #5
 800bdba:	2264      	movs	r2, #100	; 0x64
 800bdbc:	fb02 f303 	mul.w	r3, r2, r3
 800bdc0:	1acb      	subs	r3, r1, r3
 800bdc2:	00db      	lsls	r3, r3, #3
 800bdc4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bdc8:	4b37      	ldr	r3, [pc, #220]	; (800bea8 <UART_SetConfig+0x360>)
 800bdca:	fba3 2302 	umull	r2, r3, r3, r2
 800bdce:	095b      	lsrs	r3, r3, #5
 800bdd0:	005b      	lsls	r3, r3, #1
 800bdd2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bdd6:	441c      	add	r4, r3
 800bdd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bddc:	2200      	movs	r2, #0
 800bdde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bde2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bde6:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bdea:	4642      	mov	r2, r8
 800bdec:	464b      	mov	r3, r9
 800bdee:	1891      	adds	r1, r2, r2
 800bdf0:	63b9      	str	r1, [r7, #56]	; 0x38
 800bdf2:	415b      	adcs	r3, r3
 800bdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdf6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bdfa:	4641      	mov	r1, r8
 800bdfc:	1851      	adds	r1, r2, r1
 800bdfe:	6339      	str	r1, [r7, #48]	; 0x30
 800be00:	4649      	mov	r1, r9
 800be02:	414b      	adcs	r3, r1
 800be04:	637b      	str	r3, [r7, #52]	; 0x34
 800be06:	f04f 0200 	mov.w	r2, #0
 800be0a:	f04f 0300 	mov.w	r3, #0
 800be0e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800be12:	4659      	mov	r1, fp
 800be14:	00cb      	lsls	r3, r1, #3
 800be16:	4651      	mov	r1, sl
 800be18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be1c:	4651      	mov	r1, sl
 800be1e:	00ca      	lsls	r2, r1, #3
 800be20:	4610      	mov	r0, r2
 800be22:	4619      	mov	r1, r3
 800be24:	4603      	mov	r3, r0
 800be26:	4642      	mov	r2, r8
 800be28:	189b      	adds	r3, r3, r2
 800be2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be2e:	464b      	mov	r3, r9
 800be30:	460a      	mov	r2, r1
 800be32:	eb42 0303 	adc.w	r3, r2, r3
 800be36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800be46:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800be4a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800be4e:	460b      	mov	r3, r1
 800be50:	18db      	adds	r3, r3, r3
 800be52:	62bb      	str	r3, [r7, #40]	; 0x28
 800be54:	4613      	mov	r3, r2
 800be56:	eb42 0303 	adc.w	r3, r2, r3
 800be5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800be60:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800be64:	f7f4 f9bc 	bl	80001e0 <__aeabi_uldivmod>
 800be68:	4602      	mov	r2, r0
 800be6a:	460b      	mov	r3, r1
 800be6c:	4b0e      	ldr	r3, [pc, #56]	; (800bea8 <UART_SetConfig+0x360>)
 800be6e:	fba3 1302 	umull	r1, r3, r3, r2
 800be72:	095b      	lsrs	r3, r3, #5
 800be74:	2164      	movs	r1, #100	; 0x64
 800be76:	fb01 f303 	mul.w	r3, r1, r3
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	00db      	lsls	r3, r3, #3
 800be7e:	3332      	adds	r3, #50	; 0x32
 800be80:	4a09      	ldr	r2, [pc, #36]	; (800bea8 <UART_SetConfig+0x360>)
 800be82:	fba2 2303 	umull	r2, r3, r2, r3
 800be86:	095b      	lsrs	r3, r3, #5
 800be88:	f003 0207 	and.w	r2, r3, #7
 800be8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4422      	add	r2, r4
 800be94:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800be96:	e108      	b.n	800c0aa <UART_SetConfig+0x562>
 800be98:	00a037a0 	.word	0x00a037a0
 800be9c:	08010f28 	.word	0x08010f28
 800bea0:	40011000 	.word	0x40011000
 800bea4:	40011400 	.word	0x40011400
 800bea8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800beac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800beb0:	2200      	movs	r2, #0
 800beb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800beb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800beba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bebe:	4642      	mov	r2, r8
 800bec0:	464b      	mov	r3, r9
 800bec2:	1891      	adds	r1, r2, r2
 800bec4:	6239      	str	r1, [r7, #32]
 800bec6:	415b      	adcs	r3, r3
 800bec8:	627b      	str	r3, [r7, #36]	; 0x24
 800beca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bece:	4641      	mov	r1, r8
 800bed0:	1854      	adds	r4, r2, r1
 800bed2:	4649      	mov	r1, r9
 800bed4:	eb43 0501 	adc.w	r5, r3, r1
 800bed8:	f04f 0200 	mov.w	r2, #0
 800bedc:	f04f 0300 	mov.w	r3, #0
 800bee0:	00eb      	lsls	r3, r5, #3
 800bee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bee6:	00e2      	lsls	r2, r4, #3
 800bee8:	4614      	mov	r4, r2
 800beea:	461d      	mov	r5, r3
 800beec:	4643      	mov	r3, r8
 800beee:	18e3      	adds	r3, r4, r3
 800bef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bef4:	464b      	mov	r3, r9
 800bef6:	eb45 0303 	adc.w	r3, r5, r3
 800befa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800befe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bf0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bf0e:	f04f 0200 	mov.w	r2, #0
 800bf12:	f04f 0300 	mov.w	r3, #0
 800bf16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	008b      	lsls	r3, r1, #2
 800bf1e:	4621      	mov	r1, r4
 800bf20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf24:	4621      	mov	r1, r4
 800bf26:	008a      	lsls	r2, r1, #2
 800bf28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bf2c:	f7f4 f958 	bl	80001e0 <__aeabi_uldivmod>
 800bf30:	4602      	mov	r2, r0
 800bf32:	460b      	mov	r3, r1
 800bf34:	4b60      	ldr	r3, [pc, #384]	; (800c0b8 <UART_SetConfig+0x570>)
 800bf36:	fba3 2302 	umull	r2, r3, r3, r2
 800bf3a:	095b      	lsrs	r3, r3, #5
 800bf3c:	011c      	lsls	r4, r3, #4
 800bf3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf42:	2200      	movs	r2, #0
 800bf44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bf4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bf50:	4642      	mov	r2, r8
 800bf52:	464b      	mov	r3, r9
 800bf54:	1891      	adds	r1, r2, r2
 800bf56:	61b9      	str	r1, [r7, #24]
 800bf58:	415b      	adcs	r3, r3
 800bf5a:	61fb      	str	r3, [r7, #28]
 800bf5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bf60:	4641      	mov	r1, r8
 800bf62:	1851      	adds	r1, r2, r1
 800bf64:	6139      	str	r1, [r7, #16]
 800bf66:	4649      	mov	r1, r9
 800bf68:	414b      	adcs	r3, r1
 800bf6a:	617b      	str	r3, [r7, #20]
 800bf6c:	f04f 0200 	mov.w	r2, #0
 800bf70:	f04f 0300 	mov.w	r3, #0
 800bf74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bf78:	4659      	mov	r1, fp
 800bf7a:	00cb      	lsls	r3, r1, #3
 800bf7c:	4651      	mov	r1, sl
 800bf7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bf82:	4651      	mov	r1, sl
 800bf84:	00ca      	lsls	r2, r1, #3
 800bf86:	4610      	mov	r0, r2
 800bf88:	4619      	mov	r1, r3
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	4642      	mov	r2, r8
 800bf8e:	189b      	adds	r3, r3, r2
 800bf90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf94:	464b      	mov	r3, r9
 800bf96:	460a      	mov	r2, r1
 800bf98:	eb42 0303 	adc.w	r3, r2, r3
 800bf9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bfa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	67bb      	str	r3, [r7, #120]	; 0x78
 800bfaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bfac:	f04f 0200 	mov.w	r2, #0
 800bfb0:	f04f 0300 	mov.w	r3, #0
 800bfb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bfb8:	4649      	mov	r1, r9
 800bfba:	008b      	lsls	r3, r1, #2
 800bfbc:	4641      	mov	r1, r8
 800bfbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfc2:	4641      	mov	r1, r8
 800bfc4:	008a      	lsls	r2, r1, #2
 800bfc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bfca:	f7f4 f909 	bl	80001e0 <__aeabi_uldivmod>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	4b39      	ldr	r3, [pc, #228]	; (800c0b8 <UART_SetConfig+0x570>)
 800bfd4:	fba3 1302 	umull	r1, r3, r3, r2
 800bfd8:	095b      	lsrs	r3, r3, #5
 800bfda:	2164      	movs	r1, #100	; 0x64
 800bfdc:	fb01 f303 	mul.w	r3, r1, r3
 800bfe0:	1ad3      	subs	r3, r2, r3
 800bfe2:	011b      	lsls	r3, r3, #4
 800bfe4:	3332      	adds	r3, #50	; 0x32
 800bfe6:	4a34      	ldr	r2, [pc, #208]	; (800c0b8 <UART_SetConfig+0x570>)
 800bfe8:	fba2 2303 	umull	r2, r3, r2, r3
 800bfec:	095b      	lsrs	r3, r3, #5
 800bfee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bff2:	441c      	add	r4, r3
 800bff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bff8:	2200      	movs	r2, #0
 800bffa:	673b      	str	r3, [r7, #112]	; 0x70
 800bffc:	677a      	str	r2, [r7, #116]	; 0x74
 800bffe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c002:	4642      	mov	r2, r8
 800c004:	464b      	mov	r3, r9
 800c006:	1891      	adds	r1, r2, r2
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	415b      	adcs	r3, r3
 800c00c:	60fb      	str	r3, [r7, #12]
 800c00e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c012:	4641      	mov	r1, r8
 800c014:	1851      	adds	r1, r2, r1
 800c016:	6039      	str	r1, [r7, #0]
 800c018:	4649      	mov	r1, r9
 800c01a:	414b      	adcs	r3, r1
 800c01c:	607b      	str	r3, [r7, #4]
 800c01e:	f04f 0200 	mov.w	r2, #0
 800c022:	f04f 0300 	mov.w	r3, #0
 800c026:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c02a:	4659      	mov	r1, fp
 800c02c:	00cb      	lsls	r3, r1, #3
 800c02e:	4651      	mov	r1, sl
 800c030:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c034:	4651      	mov	r1, sl
 800c036:	00ca      	lsls	r2, r1, #3
 800c038:	4610      	mov	r0, r2
 800c03a:	4619      	mov	r1, r3
 800c03c:	4603      	mov	r3, r0
 800c03e:	4642      	mov	r2, r8
 800c040:	189b      	adds	r3, r3, r2
 800c042:	66bb      	str	r3, [r7, #104]	; 0x68
 800c044:	464b      	mov	r3, r9
 800c046:	460a      	mov	r2, r1
 800c048:	eb42 0303 	adc.w	r3, r2, r3
 800c04c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c04e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	663b      	str	r3, [r7, #96]	; 0x60
 800c058:	667a      	str	r2, [r7, #100]	; 0x64
 800c05a:	f04f 0200 	mov.w	r2, #0
 800c05e:	f04f 0300 	mov.w	r3, #0
 800c062:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c066:	4649      	mov	r1, r9
 800c068:	008b      	lsls	r3, r1, #2
 800c06a:	4641      	mov	r1, r8
 800c06c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c070:	4641      	mov	r1, r8
 800c072:	008a      	lsls	r2, r1, #2
 800c074:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c078:	f7f4 f8b2 	bl	80001e0 <__aeabi_uldivmod>
 800c07c:	4602      	mov	r2, r0
 800c07e:	460b      	mov	r3, r1
 800c080:	4b0d      	ldr	r3, [pc, #52]	; (800c0b8 <UART_SetConfig+0x570>)
 800c082:	fba3 1302 	umull	r1, r3, r3, r2
 800c086:	095b      	lsrs	r3, r3, #5
 800c088:	2164      	movs	r1, #100	; 0x64
 800c08a:	fb01 f303 	mul.w	r3, r1, r3
 800c08e:	1ad3      	subs	r3, r2, r3
 800c090:	011b      	lsls	r3, r3, #4
 800c092:	3332      	adds	r3, #50	; 0x32
 800c094:	4a08      	ldr	r2, [pc, #32]	; (800c0b8 <UART_SetConfig+0x570>)
 800c096:	fba2 2303 	umull	r2, r3, r2, r3
 800c09a:	095b      	lsrs	r3, r3, #5
 800c09c:	f003 020f 	and.w	r2, r3, #15
 800c0a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4422      	add	r2, r4
 800c0a8:	609a      	str	r2, [r3, #8]
}
 800c0aa:	bf00      	nop
 800c0ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c0b6:	bf00      	nop
 800c0b8:	51eb851f 	.word	0x51eb851f

0800c0bc <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d101      	bne.n	800c0ce <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e069      	b.n	800c1a2 <HAL_WWDG_Init+0xe6>
  }

  /* Check the parameters */
  assert_param(IS_WWDG_ALL_INSTANCE(hwwdg->Instance));
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a36      	ldr	r2, [pc, #216]	; (800c1ac <HAL_WWDG_Init+0xf0>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d003      	beq.n	800c0e0 <HAL_WWDG_Init+0x24>
 800c0d8:	21b9      	movs	r1, #185	; 0xb9
 800c0da:	4835      	ldr	r0, [pc, #212]	; (800c1b0 <HAL_WWDG_Init+0xf4>)
 800c0dc:	f7f6 fbaf 	bl	800283e <assert_failed>
  assert_param(IS_WWDG_PRESCALER(hwwdg->Init.Prescaler));
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d011      	beq.n	800c10c <HAL_WWDG_Init+0x50>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	2b80      	cmp	r3, #128	; 0x80
 800c0ee:	d00d      	beq.n	800c10c <HAL_WWDG_Init+0x50>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0f8:	d008      	beq.n	800c10c <HAL_WWDG_Init+0x50>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800c102:	d003      	beq.n	800c10c <HAL_WWDG_Init+0x50>
 800c104:	21ba      	movs	r1, #186	; 0xba
 800c106:	482a      	ldr	r0, [pc, #168]	; (800c1b0 <HAL_WWDG_Init+0xf4>)
 800c108:	f7f6 fb99 	bl	800283e <assert_failed>
  assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	689b      	ldr	r3, [r3, #8]
 800c110:	2b3f      	cmp	r3, #63	; 0x3f
 800c112:	d903      	bls.n	800c11c <HAL_WWDG_Init+0x60>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	2b7f      	cmp	r3, #127	; 0x7f
 800c11a:	d903      	bls.n	800c124 <HAL_WWDG_Init+0x68>
 800c11c:	21bb      	movs	r1, #187	; 0xbb
 800c11e:	4824      	ldr	r0, [pc, #144]	; (800c1b0 <HAL_WWDG_Init+0xf4>)
 800c120:	f7f6 fb8d 	bl	800283e <assert_failed>
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	2b3f      	cmp	r3, #63	; 0x3f
 800c12a:	d903      	bls.n	800c134 <HAL_WWDG_Init+0x78>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	2b7f      	cmp	r3, #127	; 0x7f
 800c132:	d903      	bls.n	800c13c <HAL_WWDG_Init+0x80>
 800c134:	21bc      	movs	r1, #188	; 0xbc
 800c136:	481e      	ldr	r0, [pc, #120]	; (800c1b0 <HAL_WWDG_Init+0xf4>)
 800c138:	f7f6 fb81 	bl	800283e <assert_failed>
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	691b      	ldr	r3, [r3, #16]
 800c140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c144:	d007      	beq.n	800c156 <HAL_WWDG_Init+0x9a>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d003      	beq.n	800c156 <HAL_WWDG_Init+0x9a>
 800c14e:	21bd      	movs	r1, #189	; 0xbd
 800c150:	4817      	ldr	r0, [pc, #92]	; (800c1b0 <HAL_WWDG_Init+0xf4>)
 800c152:	f7f6 fb74 	bl	800283e <assert_failed>

#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
  /* Reset Callback pointers */
  if (hwwdg->EwiCallback == NULL)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	695b      	ldr	r3, [r3, #20]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d102      	bne.n	800c164 <HAL_WWDG_Init+0xa8>
  {
    hwwdg->EwiCallback = HAL_WWDG_EarlyWakeupCallback;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4a14      	ldr	r2, [pc, #80]	; (800c1b4 <HAL_WWDG_Init+0xf8>)
 800c162:	615a      	str	r2, [r3, #20]
  }

  if (hwwdg->MspInitCallback == NULL)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	699b      	ldr	r3, [r3, #24]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d102      	bne.n	800c172 <HAL_WWDG_Init+0xb6>
  {
    hwwdg->MspInitCallback = HAL_WWDG_MspInit;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4a12      	ldr	r2, [pc, #72]	; (800c1b8 <HAL_WWDG_Init+0xfc>)
 800c170:	619a      	str	r2, [r3, #24]
  }

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	4798      	blx	r3
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	68da      	ldr	r2, [r3, #12]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c186:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	691a      	ldr	r2, [r3, #16]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	ea42 0103 	orr.w	r1, r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	689a      	ldr	r2, [r3, #8]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	430a      	orrs	r2, r1
 800c19e:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	40002c00 	.word	0x40002c00
 800c1b0:	08010f9c 	.word	0x08010f9c
 800c1b4:	0800c1dd 	.word	0x0800c1dd
 800c1b8:	080035e1 	.word	0x080035e1

0800c1bc <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	68d2      	ldr	r2, [r2, #12]
 800c1cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 800c1e4:	bf00      	nop
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <__NVIC_SetPriority>:
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	6039      	str	r1, [r7, #0]
 800c1fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c1fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c200:	2b00      	cmp	r3, #0
 800c202:	db0a      	blt.n	800c21a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	b2da      	uxtb	r2, r3
 800c208:	490c      	ldr	r1, [pc, #48]	; (800c23c <__NVIC_SetPriority+0x4c>)
 800c20a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c20e:	0112      	lsls	r2, r2, #4
 800c210:	b2d2      	uxtb	r2, r2
 800c212:	440b      	add	r3, r1
 800c214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c218:	e00a      	b.n	800c230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	b2da      	uxtb	r2, r3
 800c21e:	4908      	ldr	r1, [pc, #32]	; (800c240 <__NVIC_SetPriority+0x50>)
 800c220:	79fb      	ldrb	r3, [r7, #7]
 800c222:	f003 030f 	and.w	r3, r3, #15
 800c226:	3b04      	subs	r3, #4
 800c228:	0112      	lsls	r2, r2, #4
 800c22a:	b2d2      	uxtb	r2, r2
 800c22c:	440b      	add	r3, r1
 800c22e:	761a      	strb	r2, [r3, #24]
}
 800c230:	bf00      	nop
 800c232:	370c      	adds	r7, #12
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	e000e100 	.word	0xe000e100
 800c240:	e000ed00 	.word	0xe000ed00

0800c244 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c244:	b580      	push	{r7, lr}
 800c246:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c248:	4b05      	ldr	r3, [pc, #20]	; (800c260 <SysTick_Handler+0x1c>)
 800c24a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c24c:	f002 fb72 	bl	800e934 <xTaskGetSchedulerState>
 800c250:	4603      	mov	r3, r0
 800c252:	2b01      	cmp	r3, #1
 800c254:	d001      	beq.n	800c25a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c256:	f000 fd97 	bl	800cd88 <xPortSysTickHandler>
  }
}
 800c25a:	bf00      	nop
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	e000e010 	.word	0xe000e010

0800c264 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c264:	b580      	push	{r7, lr}
 800c266:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c268:	2100      	movs	r1, #0
 800c26a:	f06f 0004 	mvn.w	r0, #4
 800c26e:	f7ff ffbf 	bl	800c1f0 <__NVIC_SetPriority>
#endif
}
 800c272:	bf00      	nop
 800c274:	bd80      	pop	{r7, pc}
	...

0800c278 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c27e:	f3ef 8305 	mrs	r3, IPSR
 800c282:	603b      	str	r3, [r7, #0]
  return(result);
 800c284:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c286:	2b00      	cmp	r3, #0
 800c288:	d003      	beq.n	800c292 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c28a:	f06f 0305 	mvn.w	r3, #5
 800c28e:	607b      	str	r3, [r7, #4]
 800c290:	e00c      	b.n	800c2ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c292:	4b0a      	ldr	r3, [pc, #40]	; (800c2bc <osKernelInitialize+0x44>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d105      	bne.n	800c2a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c29a:	4b08      	ldr	r3, [pc, #32]	; (800c2bc <osKernelInitialize+0x44>)
 800c29c:	2201      	movs	r2, #1
 800c29e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	607b      	str	r3, [r7, #4]
 800c2a4:	e002      	b.n	800c2ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c2a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c2aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c2ac:	687b      	ldr	r3, [r7, #4]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	370c      	adds	r7, #12
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b8:	4770      	bx	lr
 800c2ba:	bf00      	nop
 800c2bc:	20000af8 	.word	0x20000af8

0800c2c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2c6:	f3ef 8305 	mrs	r3, IPSR
 800c2ca:	603b      	str	r3, [r7, #0]
  return(result);
 800c2cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d003      	beq.n	800c2da <osKernelStart+0x1a>
    stat = osErrorISR;
 800c2d2:	f06f 0305 	mvn.w	r3, #5
 800c2d6:	607b      	str	r3, [r7, #4]
 800c2d8:	e010      	b.n	800c2fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c2da:	4b0b      	ldr	r3, [pc, #44]	; (800c308 <osKernelStart+0x48>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d109      	bne.n	800c2f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c2e2:	f7ff ffbf 	bl	800c264 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c2e6:	4b08      	ldr	r3, [pc, #32]	; (800c308 <osKernelStart+0x48>)
 800c2e8:	2202      	movs	r2, #2
 800c2ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c2ec:	f001 fdb2 	bl	800de54 <vTaskStartScheduler>
      stat = osOK;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	607b      	str	r3, [r7, #4]
 800c2f4:	e002      	b.n	800c2fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c2f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c2fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c2fc:	687b      	ldr	r3, [r7, #4]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	20000af8 	.word	0x20000af8

0800c30c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b08e      	sub	sp, #56	; 0x38
 800c310:	af04      	add	r7, sp, #16
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c318:	2300      	movs	r3, #0
 800c31a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c31c:	f3ef 8305 	mrs	r3, IPSR
 800c320:	617b      	str	r3, [r7, #20]
  return(result);
 800c322:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c324:	2b00      	cmp	r3, #0
 800c326:	d17f      	bne.n	800c428 <osThreadNew+0x11c>
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d07c      	beq.n	800c428 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800c32e:	2380      	movs	r3, #128	; 0x80
 800c330:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c332:	2318      	movs	r3, #24
 800c334:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c336:	2300      	movs	r3, #0
 800c338:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c33a:	f04f 33ff 	mov.w	r3, #4294967295
 800c33e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d046      	beq.n	800c3d4 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d002      	beq.n	800c354 <osThreadNew+0x48>
        name = attr->name;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	699b      	ldr	r3, [r3, #24]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d002      	beq.n	800c362 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	699b      	ldr	r3, [r3, #24]
 800c360:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d008      	beq.n	800c37a <osThreadNew+0x6e>
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	2b38      	cmp	r3, #56	; 0x38
 800c36c:	d805      	bhi.n	800c37a <osThreadNew+0x6e>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	f003 0301 	and.w	r3, r3, #1
 800c376:	2b00      	cmp	r3, #0
 800c378:	d001      	beq.n	800c37e <osThreadNew+0x72>
        return (NULL);
 800c37a:	2300      	movs	r3, #0
 800c37c:	e055      	b.n	800c42a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	695b      	ldr	r3, [r3, #20]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d003      	beq.n	800c38e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	695b      	ldr	r3, [r3, #20]
 800c38a:	089b      	lsrs	r3, r3, #2
 800c38c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00f      	beq.n	800c3b6 <osThreadNew+0xaa>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800c39e:	d30a      	bcc.n	800c3b6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d006      	beq.n	800c3b6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	695b      	ldr	r3, [r3, #20]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d002      	beq.n	800c3b6 <osThreadNew+0xaa>
        mem = 1;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	61bb      	str	r3, [r7, #24]
 800c3b4:	e010      	b.n	800c3d8 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d10c      	bne.n	800c3d8 <osThreadNew+0xcc>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d108      	bne.n	800c3d8 <osThreadNew+0xcc>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	691b      	ldr	r3, [r3, #16]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d104      	bne.n	800c3d8 <osThreadNew+0xcc>
          mem = 0;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	61bb      	str	r3, [r7, #24]
 800c3d2:	e001      	b.n	800c3d8 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d110      	bne.n	800c400 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c3e6:	9202      	str	r2, [sp, #8]
 800c3e8:	9301      	str	r3, [sp, #4]
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	9300      	str	r3, [sp, #0]
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	6a3a      	ldr	r2, [r7, #32]
 800c3f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f001 fb27 	bl	800da48 <xTaskCreateStatic>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	613b      	str	r3, [r7, #16]
 800c3fe:	e013      	b.n	800c428 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d110      	bne.n	800c428 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c406:	6a3b      	ldr	r3, [r7, #32]
 800c408:	b29a      	uxth	r2, r3
 800c40a:	f107 0310 	add.w	r3, r7, #16
 800c40e:	9301      	str	r3, [sp, #4]
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	f001 fb74 	bl	800db06 <xTaskCreate>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b01      	cmp	r3, #1
 800c422:	d001      	beq.n	800c428 <osThreadNew+0x11c>
            hTask = NULL;
 800c424:	2300      	movs	r3, #0
 800c426:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c428:	693b      	ldr	r3, [r7, #16]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3728      	adds	r7, #40	; 0x28
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c432:	b580      	push	{r7, lr}
 800c434:	b084      	sub	sp, #16
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c43a:	f3ef 8305 	mrs	r3, IPSR
 800c43e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c440:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c442:	2b00      	cmp	r3, #0
 800c444:	d003      	beq.n	800c44e <osDelay+0x1c>
    stat = osErrorISR;
 800c446:	f06f 0305 	mvn.w	r3, #5
 800c44a:	60fb      	str	r3, [r7, #12]
 800c44c:	e007      	b.n	800c45e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c44e:	2300      	movs	r3, #0
 800c450:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <osDelay+0x2c>
      vTaskDelay(ticks);
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f001 fcc7 	bl	800ddec <vTaskDelay>
    }
  }

  return (stat);
 800c45e:	68fb      	ldr	r3, [r7, #12]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f002 ff5e 	bl	800f332 <pvTimerGetTimerID>
 800c476:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d005      	beq.n	800c48a <TimerCallback+0x22>
    callb->func (callb->arg);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	6852      	ldr	r2, [r2, #4]
 800c486:	4610      	mov	r0, r2
 800c488:	4798      	blx	r3
  }
}
 800c48a:	bf00      	nop
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
	...

0800c494 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800c494:	b580      	push	{r7, lr}
 800c496:	b08c      	sub	sp, #48	; 0x30
 800c498:	af02      	add	r7, sp, #8
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	607a      	str	r2, [r7, #4]
 800c49e:	603b      	str	r3, [r7, #0]
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4a8:	f3ef 8305 	mrs	r3, IPSR
 800c4ac:	613b      	str	r3, [r7, #16]
  return(result);
 800c4ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d163      	bne.n	800c57c <osTimerNew+0xe8>
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d060      	beq.n	800c57c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800c4ba:	2008      	movs	r0, #8
 800c4bc:	f000 f990 	bl	800c7e0 <pvPortMalloc>
 800c4c0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d059      	beq.n	800c57c <osTimerNew+0xe8>
      callb->func = func;
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800c4d4:	7afb      	ldrb	r3, [r7, #11]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d102      	bne.n	800c4e0 <osTimerNew+0x4c>
        reload = pdFALSE;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	61fb      	str	r3, [r7, #28]
 800c4de:	e001      	b.n	800c4e4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800c4e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4e8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d01c      	beq.n	800c52e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d002      	beq.n	800c502 <osTimerNew+0x6e>
          name = attr->name;
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d006      	beq.n	800c518 <osTimerNew+0x84>
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	68db      	ldr	r3, [r3, #12]
 800c50e:	2b2b      	cmp	r3, #43	; 0x2b
 800c510:	d902      	bls.n	800c518 <osTimerNew+0x84>
          mem = 1;
 800c512:	2301      	movs	r3, #1
 800c514:	61bb      	str	r3, [r7, #24]
 800c516:	e00c      	b.n	800c532 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	689b      	ldr	r3, [r3, #8]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d108      	bne.n	800c532 <osTimerNew+0x9e>
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d104      	bne.n	800c532 <osTimerNew+0x9e>
            mem = 0;
 800c528:	2300      	movs	r3, #0
 800c52a:	61bb      	str	r3, [r7, #24]
 800c52c:	e001      	b.n	800c532 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800c52e:	2300      	movs	r3, #0
 800c530:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	2b01      	cmp	r3, #1
 800c536:	d10c      	bne.n	800c552 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	9301      	str	r3, [sp, #4]
 800c53e:	4b12      	ldr	r3, [pc, #72]	; (800c588 <osTimerNew+0xf4>)
 800c540:	9300      	str	r3, [sp, #0]
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	69fa      	ldr	r2, [r7, #28]
 800c546:	2101      	movs	r1, #1
 800c548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c54a:	f002 fb48 	bl	800ebde <xTimerCreateStatic>
 800c54e:	6238      	str	r0, [r7, #32]
 800c550:	e00b      	b.n	800c56a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d108      	bne.n	800c56a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800c558:	4b0b      	ldr	r3, [pc, #44]	; (800c588 <osTimerNew+0xf4>)
 800c55a:	9300      	str	r3, [sp, #0]
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	69fa      	ldr	r2, [r7, #28]
 800c560:	2101      	movs	r1, #1
 800c562:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c564:	f002 fb1a 	bl	800eb9c <xTimerCreate>
 800c568:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800c56a:	6a3b      	ldr	r3, [r7, #32]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d105      	bne.n	800c57c <osTimerNew+0xe8>
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d002      	beq.n	800c57c <osTimerNew+0xe8>
        vPortFree (callb);
 800c576:	6978      	ldr	r0, [r7, #20]
 800c578:	f000 f97c 	bl	800c874 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800c57c:	6a3b      	ldr	r3, [r7, #32]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3728      	adds	r7, #40	; 0x28
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	0800c469 	.word	0x0800c469

0800c58c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b088      	sub	sp, #32
 800c590:	af02      	add	r7, sp, #8
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c59a:	f3ef 8305 	mrs	r3, IPSR
 800c59e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d003      	beq.n	800c5ae <osTimerStart+0x22>
    stat = osErrorISR;
 800c5a6:	f06f 0305 	mvn.w	r3, #5
 800c5aa:	617b      	str	r3, [r7, #20]
 800c5ac:	e017      	b.n	800c5de <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d103      	bne.n	800c5bc <osTimerStart+0x30>
    stat = osErrorParameter;
 800c5b4:	f06f 0303 	mvn.w	r3, #3
 800c5b8:	617b      	str	r3, [r7, #20]
 800c5ba:	e010      	b.n	800c5de <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800c5bc:	2300      	movs	r3, #0
 800c5be:	9300      	str	r3, [sp, #0]
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	683a      	ldr	r2, [r7, #0]
 800c5c4:	2104      	movs	r1, #4
 800c5c6:	6938      	ldr	r0, [r7, #16]
 800c5c8:	f002 fb82 	bl	800ecd0 <xTimerGenericCommand>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d102      	bne.n	800c5d8 <osTimerStart+0x4c>
      stat = osOK;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	617b      	str	r3, [r7, #20]
 800c5d6:	e002      	b.n	800c5de <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800c5d8:	f06f 0302 	mvn.w	r3, #2
 800c5dc:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c5de:	697b      	ldr	r3, [r7, #20]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3718      	adds	r7, #24
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b088      	sub	sp, #32
 800c5ec:	af02      	add	r7, sp, #8
 800c5ee:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5f4:	f3ef 8305 	mrs	r3, IPSR
 800c5f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d003      	beq.n	800c608 <osTimerStop+0x20>
    stat = osErrorISR;
 800c600:	f06f 0305 	mvn.w	r3, #5
 800c604:	617b      	str	r3, [r7, #20]
 800c606:	e021      	b.n	800c64c <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d103      	bne.n	800c616 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800c60e:	f06f 0303 	mvn.w	r3, #3
 800c612:	617b      	str	r3, [r7, #20]
 800c614:	e01a      	b.n	800c64c <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800c616:	6938      	ldr	r0, [r7, #16]
 800c618:	f002 fe62 	bl	800f2e0 <xTimerIsTimerActive>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d103      	bne.n	800c62a <osTimerStop+0x42>
      stat = osErrorResource;
 800c622:	f06f 0302 	mvn.w	r3, #2
 800c626:	617b      	str	r3, [r7, #20]
 800c628:	e010      	b.n	800c64c <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800c62a:	2300      	movs	r3, #0
 800c62c:	9300      	str	r3, [sp, #0]
 800c62e:	2300      	movs	r3, #0
 800c630:	2200      	movs	r2, #0
 800c632:	2103      	movs	r1, #3
 800c634:	6938      	ldr	r0, [r7, #16]
 800c636:	f002 fb4b 	bl	800ecd0 <xTimerGenericCommand>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d102      	bne.n	800c646 <osTimerStop+0x5e>
        stat = osOK;
 800c640:	2300      	movs	r3, #0
 800c642:	617b      	str	r3, [r7, #20]
 800c644:	e002      	b.n	800c64c <osTimerStop+0x64>
      } else {
        stat = osError;
 800c646:	f04f 33ff 	mov.w	r3, #4294967295
 800c64a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c64c:	697b      	ldr	r3, [r7, #20]
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3718      	adds	r7, #24
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800c656:	b580      	push	{r7, lr}
 800c658:	b086      	sub	sp, #24
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800c65e:	2300      	movs	r3, #0
 800c660:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c662:	f3ef 8305 	mrs	r3, IPSR
 800c666:	60fb      	str	r3, [r7, #12]
  return(result);
 800c668:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d12d      	bne.n	800c6ca <osEventFlagsNew+0x74>
    mem = -1;
 800c66e:	f04f 33ff 	mov.w	r3, #4294967295
 800c672:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d015      	beq.n	800c6a6 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d006      	beq.n	800c690 <osEventFlagsNew+0x3a>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	68db      	ldr	r3, [r3, #12]
 800c686:	2b1f      	cmp	r3, #31
 800c688:	d902      	bls.n	800c690 <osEventFlagsNew+0x3a>
        mem = 1;
 800c68a:	2301      	movs	r3, #1
 800c68c:	613b      	str	r3, [r7, #16]
 800c68e:	e00c      	b.n	800c6aa <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d108      	bne.n	800c6aa <osEventFlagsNew+0x54>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d104      	bne.n	800c6aa <osEventFlagsNew+0x54>
          mem = 0;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	613b      	str	r3, [r7, #16]
 800c6a4:	e001      	b.n	800c6aa <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d106      	bne.n	800c6be <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 f841 	bl	800c73c <xEventGroupCreateStatic>
 800c6ba:	6178      	str	r0, [r7, #20]
 800c6bc:	e005      	b.n	800c6ca <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d102      	bne.n	800c6ca <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800c6c4:	f000 f871 	bl	800c7aa <xEventGroupCreate>
 800c6c8:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800c6ca:	697b      	ldr	r3, [r7, #20]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3718      	adds	r7, #24
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c6d4:	b480      	push	{r7}
 800c6d6:	b085      	sub	sp, #20
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	4a07      	ldr	r2, [pc, #28]	; (800c700 <vApplicationGetIdleTaskMemory+0x2c>)
 800c6e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	4a06      	ldr	r2, [pc, #24]	; (800c704 <vApplicationGetIdleTaskMemory+0x30>)
 800c6ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2280      	movs	r2, #128	; 0x80
 800c6f0:	601a      	str	r2, [r3, #0]
}
 800c6f2:	bf00      	nop
 800c6f4:	3714      	adds	r7, #20
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	20000afc 	.word	0x20000afc
 800c704:	20000cb8 	.word	0x20000cb8

0800c708 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c708:	b480      	push	{r7}
 800c70a:	b085      	sub	sp, #20
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	4a07      	ldr	r2, [pc, #28]	; (800c734 <vApplicationGetTimerTaskMemory+0x2c>)
 800c718:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	4a06      	ldr	r2, [pc, #24]	; (800c738 <vApplicationGetTimerTaskMemory+0x30>)
 800c71e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c726:	601a      	str	r2, [r3, #0]
}
 800c728:	bf00      	nop
 800c72a:	3714      	adds	r7, #20
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr
 800c734:	20000eb8 	.word	0x20000eb8
 800c738:	20001074 	.word	0x20001074

0800c73c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b086      	sub	sp, #24
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d10a      	bne.n	800c760 <xEventGroupCreateStatic+0x24>
	__asm volatile
 800c74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74e:	f383 8811 	msr	BASEPRI, r3
 800c752:	f3bf 8f6f 	isb	sy
 800c756:	f3bf 8f4f 	dsb	sy
 800c75a:	613b      	str	r3, [r7, #16]
}
 800c75c:	bf00      	nop
 800c75e:	e7fe      	b.n	800c75e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800c760:	2320      	movs	r3, #32
 800c762:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	2b20      	cmp	r3, #32
 800c768:	d00a      	beq.n	800c780 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800c76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76e:	f383 8811 	msr	BASEPRI, r3
 800c772:	f3bf 8f6f 	isb	sy
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	60fb      	str	r3, [r7, #12]
}
 800c77c:	bf00      	nop
 800c77e:	e7fe      	b.n	800c77e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00a      	beq.n	800c7a0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	2200      	movs	r2, #0
 800c78e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	3304      	adds	r3, #4
 800c794:	4618      	mov	r0, r3
 800c796:	f000 f885 	bl	800c8a4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	2201      	movs	r2, #1
 800c79e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800c7a0:	697b      	ldr	r3, [r7, #20]
	}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3718      	adds	r7, #24
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}

0800c7aa <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b082      	sub	sp, #8
 800c7ae:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c7b0:	2020      	movs	r0, #32
 800c7b2:	f000 f815 	bl	800c7e0 <pvPortMalloc>
 800c7b6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00a      	beq.n	800c7d4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	3304      	adds	r3, #4
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f000 f86b 	bl	800c8a4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c7d4:	687b      	ldr	r3, [r7, #4]
	}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3708      	adds	r7, #8
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
	...

0800c7e0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f003 0307 	and.w	r3, r3, #7
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d004      	beq.n	800c800 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f023 0307 	bic.w	r3, r3, #7
 800c7fc:	3308      	adds	r3, #8
 800c7fe:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800c800:	f001 fb9a 	bl	800df38 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800c804:	4b18      	ldr	r3, [pc, #96]	; (800c868 <pvPortMalloc+0x88>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d105      	bne.n	800c818 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800c80c:	4b17      	ldr	r3, [pc, #92]	; (800c86c <pvPortMalloc+0x8c>)
 800c80e:	f023 0307 	bic.w	r3, r3, #7
 800c812:	461a      	mov	r2, r3
 800c814:	4b14      	ldr	r3, [pc, #80]	; (800c868 <pvPortMalloc+0x88>)
 800c816:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800c818:	4b15      	ldr	r3, [pc, #84]	; (800c870 <pvPortMalloc+0x90>)
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	4413      	add	r3, r2
 800c820:	f643 32f7 	movw	r2, #15351	; 0x3bf7
 800c824:	4293      	cmp	r3, r2
 800c826:	d813      	bhi.n	800c850 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800c828:	4b11      	ldr	r3, [pc, #68]	; (800c870 <pvPortMalloc+0x90>)
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	441a      	add	r2, r3
 800c830:	4b0f      	ldr	r3, [pc, #60]	; (800c870 <pvPortMalloc+0x90>)
 800c832:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800c834:	429a      	cmp	r2, r3
 800c836:	d90b      	bls.n	800c850 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800c838:	4b0b      	ldr	r3, [pc, #44]	; (800c868 <pvPortMalloc+0x88>)
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	4b0c      	ldr	r3, [pc, #48]	; (800c870 <pvPortMalloc+0x90>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4413      	add	r3, r2
 800c842:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800c844:	4b0a      	ldr	r3, [pc, #40]	; (800c870 <pvPortMalloc+0x90>)
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	4413      	add	r3, r2
 800c84c:	4a08      	ldr	r2, [pc, #32]	; (800c870 <pvPortMalloc+0x90>)
 800c84e:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c850:	f001 fbb8 	bl	800dfc4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d101      	bne.n	800c85e <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c85a:	f7f5 f817 	bl	800188c <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 800c85e:	68fb      	ldr	r3, [r7, #12]
}
 800c860:	4618      	mov	r0, r3
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	20005078 	.word	0x20005078
 800c86c:	2000147c 	.word	0x2000147c
 800c870:	20005074 	.word	0x20005074

0800c874 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c874:	b480      	push	{r7}
 800c876:	b085      	sub	sp, #20
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00a      	beq.n	800c898 <vPortFree+0x24>
	__asm volatile
 800c882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c886:	f383 8811 	msr	BASEPRI, r3
 800c88a:	f3bf 8f6f 	isb	sy
 800c88e:	f3bf 8f4f 	dsb	sy
 800c892:	60fb      	str	r3, [r7, #12]
}
 800c894:	bf00      	nop
 800c896:	e7fe      	b.n	800c896 <vPortFree+0x22>
}
 800c898:	bf00      	nop
 800c89a:	3714      	adds	r7, #20
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f103 0208 	add.w	r2, r3, #8
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f103 0208 	add.w	r2, r3, #8
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f103 0208 	add.w	r2, r3, #8
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c8d8:	bf00      	nop
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c8f2:	bf00      	nop
 800c8f4:	370c      	adds	r7, #12
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr

0800c8fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c8fe:	b480      	push	{r7}
 800c900:	b085      	sub	sp, #20
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
 800c906:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	689a      	ldr	r2, [r3, #8]
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	683a      	ldr	r2, [r7, #0]
 800c922:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	683a      	ldr	r2, [r7, #0]
 800c928:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	1c5a      	adds	r2, r3, #1
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	601a      	str	r2, [r3, #0]
}
 800c93a:	bf00      	nop
 800c93c:	3714      	adds	r7, #20
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr

0800c946 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c946:	b480      	push	{r7}
 800c948:	b085      	sub	sp, #20
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
 800c94e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c95c:	d103      	bne.n	800c966 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	60fb      	str	r3, [r7, #12]
 800c964:	e00c      	b.n	800c980 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	3308      	adds	r3, #8
 800c96a:	60fb      	str	r3, [r7, #12]
 800c96c:	e002      	b.n	800c974 <vListInsert+0x2e>
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	60fb      	str	r3, [r7, #12]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	68ba      	ldr	r2, [r7, #8]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d2f6      	bcs.n	800c96e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	685a      	ldr	r2, [r3, #4]
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	683a      	ldr	r2, [r7, #0]
 800c98e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	68fa      	ldr	r2, [r7, #12]
 800c994:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	683a      	ldr	r2, [r7, #0]
 800c99a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	1c5a      	adds	r2, r3, #1
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	601a      	str	r2, [r3, #0]
}
 800c9ac:	bf00      	nop
 800c9ae:	3714      	adds	r7, #20
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	691b      	ldr	r3, [r3, #16]
 800c9c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	6892      	ldr	r2, [r2, #8]
 800c9ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	6852      	ldr	r2, [r2, #4]
 800c9d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d103      	bne.n	800c9ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	689a      	ldr	r2, [r3, #8]
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	1e5a      	subs	r2, r3, #1
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3714      	adds	r7, #20
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	3b04      	subs	r3, #4
 800ca1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	3b04      	subs	r3, #4
 800ca2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	f023 0201 	bic.w	r2, r3, #1
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	3b04      	subs	r3, #4
 800ca3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca3c:	4a0c      	ldr	r2, [pc, #48]	; (800ca70 <pxPortInitialiseStack+0x64>)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	3b14      	subs	r3, #20
 800ca46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3b04      	subs	r3, #4
 800ca52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f06f 0202 	mvn.w	r2, #2
 800ca5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	3b20      	subs	r3, #32
 800ca60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca62:	68fb      	ldr	r3, [r7, #12]
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3714      	adds	r7, #20
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr
 800ca70:	0800ca75 	.word	0x0800ca75

0800ca74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca74:	b480      	push	{r7}
 800ca76:	b085      	sub	sp, #20
 800ca78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca7e:	4b12      	ldr	r3, [pc, #72]	; (800cac8 <prvTaskExitError+0x54>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca86:	d00a      	beq.n	800ca9e <prvTaskExitError+0x2a>
	__asm volatile
 800ca88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8c:	f383 8811 	msr	BASEPRI, r3
 800ca90:	f3bf 8f6f 	isb	sy
 800ca94:	f3bf 8f4f 	dsb	sy
 800ca98:	60fb      	str	r3, [r7, #12]
}
 800ca9a:	bf00      	nop
 800ca9c:	e7fe      	b.n	800ca9c <prvTaskExitError+0x28>
	__asm volatile
 800ca9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa2:	f383 8811 	msr	BASEPRI, r3
 800caa6:	f3bf 8f6f 	isb	sy
 800caaa:	f3bf 8f4f 	dsb	sy
 800caae:	60bb      	str	r3, [r7, #8]
}
 800cab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cab2:	bf00      	nop
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d0fc      	beq.n	800cab4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800caba:	bf00      	nop
 800cabc:	bf00      	nop
 800cabe:	3714      	adds	r7, #20
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr
 800cac8:	20000010 	.word	0x20000010
 800cacc:	00000000 	.word	0x00000000

0800cad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cad0:	4b07      	ldr	r3, [pc, #28]	; (800caf0 <pxCurrentTCBConst2>)
 800cad2:	6819      	ldr	r1, [r3, #0]
 800cad4:	6808      	ldr	r0, [r1, #0]
 800cad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cada:	f380 8809 	msr	PSP, r0
 800cade:	f3bf 8f6f 	isb	sy
 800cae2:	f04f 0000 	mov.w	r0, #0
 800cae6:	f380 8811 	msr	BASEPRI, r0
 800caea:	4770      	bx	lr
 800caec:	f3af 8000 	nop.w

0800caf0 <pxCurrentTCBConst2>:
 800caf0:	200050d0 	.word	0x200050d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800caf4:	bf00      	nop
 800caf6:	bf00      	nop

0800caf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800caf8:	4808      	ldr	r0, [pc, #32]	; (800cb1c <prvPortStartFirstTask+0x24>)
 800cafa:	6800      	ldr	r0, [r0, #0]
 800cafc:	6800      	ldr	r0, [r0, #0]
 800cafe:	f380 8808 	msr	MSP, r0
 800cb02:	f04f 0000 	mov.w	r0, #0
 800cb06:	f380 8814 	msr	CONTROL, r0
 800cb0a:	b662      	cpsie	i
 800cb0c:	b661      	cpsie	f
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	df00      	svc	0
 800cb18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb1a:	bf00      	nop
 800cb1c:	e000ed08 	.word	0xe000ed08

0800cb20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b086      	sub	sp, #24
 800cb24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cb26:	4b46      	ldr	r3, [pc, #280]	; (800cc40 <xPortStartScheduler+0x120>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a46      	ldr	r2, [pc, #280]	; (800cc44 <xPortStartScheduler+0x124>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d10a      	bne.n	800cb46 <xPortStartScheduler+0x26>
	__asm volatile
 800cb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb34:	f383 8811 	msr	BASEPRI, r3
 800cb38:	f3bf 8f6f 	isb	sy
 800cb3c:	f3bf 8f4f 	dsb	sy
 800cb40:	613b      	str	r3, [r7, #16]
}
 800cb42:	bf00      	nop
 800cb44:	e7fe      	b.n	800cb44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cb46:	4b3e      	ldr	r3, [pc, #248]	; (800cc40 <xPortStartScheduler+0x120>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4a3f      	ldr	r2, [pc, #252]	; (800cc48 <xPortStartScheduler+0x128>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d10a      	bne.n	800cb66 <xPortStartScheduler+0x46>
	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	60fb      	str	r3, [r7, #12]
}
 800cb62:	bf00      	nop
 800cb64:	e7fe      	b.n	800cb64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb66:	4b39      	ldr	r3, [pc, #228]	; (800cc4c <xPortStartScheduler+0x12c>)
 800cb68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	22ff      	movs	r2, #255	; 0xff
 800cb76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb80:	78fb      	ldrb	r3, [r7, #3]
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb88:	b2da      	uxtb	r2, r3
 800cb8a:	4b31      	ldr	r3, [pc, #196]	; (800cc50 <xPortStartScheduler+0x130>)
 800cb8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb8e:	4b31      	ldr	r3, [pc, #196]	; (800cc54 <xPortStartScheduler+0x134>)
 800cb90:	2207      	movs	r2, #7
 800cb92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb94:	e009      	b.n	800cbaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cb96:	4b2f      	ldr	r3, [pc, #188]	; (800cc54 <xPortStartScheduler+0x134>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	4a2d      	ldr	r2, [pc, #180]	; (800cc54 <xPortStartScheduler+0x134>)
 800cb9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cba0:	78fb      	ldrb	r3, [r7, #3]
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbaa:	78fb      	ldrb	r3, [r7, #3]
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbb2:	2b80      	cmp	r3, #128	; 0x80
 800cbb4:	d0ef      	beq.n	800cb96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cbb6:	4b27      	ldr	r3, [pc, #156]	; (800cc54 <xPortStartScheduler+0x134>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f1c3 0307 	rsb	r3, r3, #7
 800cbbe:	2b04      	cmp	r3, #4
 800cbc0:	d00a      	beq.n	800cbd8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc6:	f383 8811 	msr	BASEPRI, r3
 800cbca:	f3bf 8f6f 	isb	sy
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	60bb      	str	r3, [r7, #8]
}
 800cbd4:	bf00      	nop
 800cbd6:	e7fe      	b.n	800cbd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cbd8:	4b1e      	ldr	r3, [pc, #120]	; (800cc54 <xPortStartScheduler+0x134>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	021b      	lsls	r3, r3, #8
 800cbde:	4a1d      	ldr	r2, [pc, #116]	; (800cc54 <xPortStartScheduler+0x134>)
 800cbe0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cbe2:	4b1c      	ldr	r3, [pc, #112]	; (800cc54 <xPortStartScheduler+0x134>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cbea:	4a1a      	ldr	r2, [pc, #104]	; (800cc54 <xPortStartScheduler+0x134>)
 800cbec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	b2da      	uxtb	r2, r3
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cbf6:	4b18      	ldr	r3, [pc, #96]	; (800cc58 <xPortStartScheduler+0x138>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a17      	ldr	r2, [pc, #92]	; (800cc58 <xPortStartScheduler+0x138>)
 800cbfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cc00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc02:	4b15      	ldr	r3, [pc, #84]	; (800cc58 <xPortStartScheduler+0x138>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4a14      	ldr	r2, [pc, #80]	; (800cc58 <xPortStartScheduler+0x138>)
 800cc08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cc0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc0e:	f000 f9a9 	bl	800cf64 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc12:	4b12      	ldr	r3, [pc, #72]	; (800cc5c <xPortStartScheduler+0x13c>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc18:	f000 f9e0 	bl	800cfdc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc1c:	4b10      	ldr	r3, [pc, #64]	; (800cc60 <xPortStartScheduler+0x140>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a0f      	ldr	r2, [pc, #60]	; (800cc60 <xPortStartScheduler+0x140>)
 800cc22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc28:	f7ff ff66 	bl	800caf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc2c:	f001 fb62 	bl	800e2f4 <vTaskSwitchContext>
	prvTaskExitError();
 800cc30:	f7ff ff20 	bl	800ca74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3718      	adds	r7, #24
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	e000ed00 	.word	0xe000ed00
 800cc44:	410fc271 	.word	0x410fc271
 800cc48:	410fc270 	.word	0x410fc270
 800cc4c:	e000e400 	.word	0xe000e400
 800cc50:	20005088 	.word	0x20005088
 800cc54:	2000508c 	.word	0x2000508c
 800cc58:	e000ed20 	.word	0xe000ed20
 800cc5c:	20000010 	.word	0x20000010
 800cc60:	e000ef34 	.word	0xe000ef34

0800cc64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
	__asm volatile
 800cc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	607b      	str	r3, [r7, #4]
}
 800cc7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc7e:	4b0f      	ldr	r3, [pc, #60]	; (800ccbc <vPortEnterCritical+0x58>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	3301      	adds	r3, #1
 800cc84:	4a0d      	ldr	r2, [pc, #52]	; (800ccbc <vPortEnterCritical+0x58>)
 800cc86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc88:	4b0c      	ldr	r3, [pc, #48]	; (800ccbc <vPortEnterCritical+0x58>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d10f      	bne.n	800ccb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc90:	4b0b      	ldr	r3, [pc, #44]	; (800ccc0 <vPortEnterCritical+0x5c>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d00a      	beq.n	800ccb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9e:	f383 8811 	msr	BASEPRI, r3
 800cca2:	f3bf 8f6f 	isb	sy
 800cca6:	f3bf 8f4f 	dsb	sy
 800ccaa:	603b      	str	r3, [r7, #0]
}
 800ccac:	bf00      	nop
 800ccae:	e7fe      	b.n	800ccae <vPortEnterCritical+0x4a>
	}
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	20000010 	.word	0x20000010
 800ccc0:	e000ed04 	.word	0xe000ed04

0800ccc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ccca:	4b12      	ldr	r3, [pc, #72]	; (800cd14 <vPortExitCritical+0x50>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d10a      	bne.n	800cce8 <vPortExitCritical+0x24>
	__asm volatile
 800ccd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd6:	f383 8811 	msr	BASEPRI, r3
 800ccda:	f3bf 8f6f 	isb	sy
 800ccde:	f3bf 8f4f 	dsb	sy
 800cce2:	607b      	str	r3, [r7, #4]
}
 800cce4:	bf00      	nop
 800cce6:	e7fe      	b.n	800cce6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cce8:	4b0a      	ldr	r3, [pc, #40]	; (800cd14 <vPortExitCritical+0x50>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	3b01      	subs	r3, #1
 800ccee:	4a09      	ldr	r2, [pc, #36]	; (800cd14 <vPortExitCritical+0x50>)
 800ccf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ccf2:	4b08      	ldr	r3, [pc, #32]	; (800cd14 <vPortExitCritical+0x50>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d105      	bne.n	800cd06 <vPortExitCritical+0x42>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	f383 8811 	msr	BASEPRI, r3
}
 800cd04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd06:	bf00      	nop
 800cd08:	370c      	adds	r7, #12
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	20000010 	.word	0x20000010
	...

0800cd20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd20:	f3ef 8009 	mrs	r0, PSP
 800cd24:	f3bf 8f6f 	isb	sy
 800cd28:	4b15      	ldr	r3, [pc, #84]	; (800cd80 <pxCurrentTCBConst>)
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	f01e 0f10 	tst.w	lr, #16
 800cd30:	bf08      	it	eq
 800cd32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd3a:	6010      	str	r0, [r2, #0]
 800cd3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd44:	f380 8811 	msr	BASEPRI, r0
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	f3bf 8f6f 	isb	sy
 800cd50:	f001 fad0 	bl	800e2f4 <vTaskSwitchContext>
 800cd54:	f04f 0000 	mov.w	r0, #0
 800cd58:	f380 8811 	msr	BASEPRI, r0
 800cd5c:	bc09      	pop	{r0, r3}
 800cd5e:	6819      	ldr	r1, [r3, #0]
 800cd60:	6808      	ldr	r0, [r1, #0]
 800cd62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd66:	f01e 0f10 	tst.w	lr, #16
 800cd6a:	bf08      	it	eq
 800cd6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd70:	f380 8809 	msr	PSP, r0
 800cd74:	f3bf 8f6f 	isb	sy
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop
 800cd7c:	f3af 8000 	nop.w

0800cd80 <pxCurrentTCBConst>:
 800cd80:	200050d0 	.word	0x200050d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd84:	bf00      	nop
 800cd86:	bf00      	nop

0800cd88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd92:	f383 8811 	msr	BASEPRI, r3
 800cd96:	f3bf 8f6f 	isb	sy
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	607b      	str	r3, [r7, #4]
}
 800cda0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cda2:	f001 f9e5 	bl	800e170 <xTaskIncrementTick>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d003      	beq.n	800cdb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cdac:	4b06      	ldr	r3, [pc, #24]	; (800cdc8 <xPortSysTickHandler+0x40>)
 800cdae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdb2:	601a      	str	r2, [r3, #0]
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	f383 8811 	msr	BASEPRI, r3
}
 800cdbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cdc0:	bf00      	nop
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	e000ed04 	.word	0xe000ed04

0800cdcc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b088      	sub	sp, #32
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800cdd4:	4b5d      	ldr	r3, [pc, #372]	; (800cf4c <vPortSuppressTicksAndSleep+0x180>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d902      	bls.n	800cde4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800cdde:	4b5b      	ldr	r3, [pc, #364]	; (800cf4c <vPortSuppressTicksAndSleep+0x180>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800cde4:	4b5a      	ldr	r3, [pc, #360]	; (800cf50 <vPortSuppressTicksAndSleep+0x184>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a59      	ldr	r2, [pc, #356]	; (800cf50 <vPortSuppressTicksAndSleep+0x184>)
 800cdea:	f023 0301 	bic.w	r3, r3, #1
 800cdee:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800cdf0:	4b58      	ldr	r3, [pc, #352]	; (800cf54 <vPortSuppressTicksAndSleep+0x188>)
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	3b01      	subs	r3, #1
 800cdf8:	4957      	ldr	r1, [pc, #348]	; (800cf58 <vPortSuppressTicksAndSleep+0x18c>)
 800cdfa:	6809      	ldr	r1, [r1, #0]
 800cdfc:	fb01 f303 	mul.w	r3, r1, r3
 800ce00:	4413      	add	r3, r2
 800ce02:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800ce04:	4b55      	ldr	r3, [pc, #340]	; (800cf5c <vPortSuppressTicksAndSleep+0x190>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	69fa      	ldr	r2, [r7, #28]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d904      	bls.n	800ce18 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800ce0e:	4b53      	ldr	r3, [pc, #332]	; (800cf5c <vPortSuppressTicksAndSleep+0x190>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	69fa      	ldr	r2, [r7, #28]
 800ce14:	1ad3      	subs	r3, r2, r3
 800ce16:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800ce18:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800ce1a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800ce1e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800ce22:	f001 fc95 	bl	800e750 <eTaskConfirmSleepModeStatus>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d110      	bne.n	800ce4e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800ce2c:	4b49      	ldr	r3, [pc, #292]	; (800cf54 <vPortSuppressTicksAndSleep+0x188>)
 800ce2e:	4a4c      	ldr	r2, [pc, #304]	; (800cf60 <vPortSuppressTicksAndSleep+0x194>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800ce34:	4b46      	ldr	r3, [pc, #280]	; (800cf50 <vPortSuppressTicksAndSleep+0x184>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a45      	ldr	r2, [pc, #276]	; (800cf50 <vPortSuppressTicksAndSleep+0x184>)
 800ce3a:	f043 0301 	orr.w	r3, r3, #1
 800ce3e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800ce40:	4b45      	ldr	r3, [pc, #276]	; (800cf58 <vPortSuppressTicksAndSleep+0x18c>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4a46      	ldr	r2, [pc, #280]	; (800cf60 <vPortSuppressTicksAndSleep+0x194>)
 800ce46:	3b01      	subs	r3, #1
 800ce48:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800ce4a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800ce4c:	e079      	b.n	800cf42 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800ce4e:	4a44      	ldr	r2, [pc, #272]	; (800cf60 <vPortSuppressTicksAndSleep+0x194>)
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ce54:	4b3f      	ldr	r3, [pc, #252]	; (800cf54 <vPortSuppressTicksAndSleep+0x188>)
 800ce56:	2200      	movs	r2, #0
 800ce58:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800ce5a:	4b3d      	ldr	r3, [pc, #244]	; (800cf50 <vPortSuppressTicksAndSleep+0x184>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4a3c      	ldr	r2, [pc, #240]	; (800cf50 <vPortSuppressTicksAndSleep+0x184>)
 800ce60:	f043 0301 	orr.w	r3, r3, #1
 800ce64:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	613b      	str	r3, [r7, #16]
 800ce6e:	6938      	ldr	r0, [r7, #16]
 800ce70:	f7f4 fd1a 	bl	80018a8 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d004      	beq.n	800ce84 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800ce7a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800ce7e:	bf30      	wfi
				__asm volatile( "isb" );
 800ce80:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f7f4 fd19 	bl	80018bc <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800ce8a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800ce8c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800ce90:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800ce94:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800ce96:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800ce9a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800ce9e:	4b2c      	ldr	r3, [pc, #176]	; (800cf50 <vPortSuppressTicksAndSleep+0x184>)
 800cea0:	2206      	movs	r2, #6
 800cea2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800cea4:	4b2a      	ldr	r3, [pc, #168]	; (800cf50 <vPortSuppressTicksAndSleep+0x184>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d01d      	beq.n	800ceec <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800ceb0:	4b29      	ldr	r3, [pc, #164]	; (800cf58 <vPortSuppressTicksAndSleep+0x18c>)
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	4b27      	ldr	r3, [pc, #156]	; (800cf54 <vPortSuppressTicksAndSleep+0x188>)
 800ceb6:	6819      	ldr	r1, [r3, #0]
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	1acb      	subs	r3, r1, r3
 800cebc:	4413      	add	r3, r2
 800cebe:	3b01      	subs	r3, #1
 800cec0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800cec2:	4b26      	ldr	r3, [pc, #152]	; (800cf5c <vPortSuppressTicksAndSleep+0x190>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	697a      	ldr	r2, [r7, #20]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d304      	bcc.n	800ced6 <vPortSuppressTicksAndSleep+0x10a>
 800cecc:	4b22      	ldr	r3, [pc, #136]	; (800cf58 <vPortSuppressTicksAndSleep+0x18c>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	697a      	ldr	r2, [r7, #20]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d903      	bls.n	800cede <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800ced6:	4b20      	ldr	r3, [pc, #128]	; (800cf58 <vPortSuppressTicksAndSleep+0x18c>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	3b01      	subs	r3, #1
 800cedc:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800cede:	4a20      	ldr	r2, [pc, #128]	; (800cf60 <vPortSuppressTicksAndSleep+0x194>)
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	3b01      	subs	r3, #1
 800cee8:	61bb      	str	r3, [r7, #24]
 800ceea:	e018      	b.n	800cf1e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800ceec:	4b1a      	ldr	r3, [pc, #104]	; (800cf58 <vPortSuppressTicksAndSleep+0x18c>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	fb03 f202 	mul.w	r2, r3, r2
 800cef6:	4b17      	ldr	r3, [pc, #92]	; (800cf54 <vPortSuppressTicksAndSleep+0x188>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	1ad3      	subs	r3, r2, r3
 800cefc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800cefe:	4b16      	ldr	r3, [pc, #88]	; (800cf58 <vPortSuppressTicksAndSleep+0x18c>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf08:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	4a12      	ldr	r2, [pc, #72]	; (800cf58 <vPortSuppressTicksAndSleep+0x18c>)
 800cf10:	6812      	ldr	r2, [r2, #0]
 800cf12:	fb03 f202 	mul.w	r2, r3, r2
 800cf16:	4912      	ldr	r1, [pc, #72]	; (800cf60 <vPortSuppressTicksAndSleep+0x194>)
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	1ad3      	subs	r3, r2, r3
 800cf1c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf1e:	4b0d      	ldr	r3, [pc, #52]	; (800cf54 <vPortSuppressTicksAndSleep+0x188>)
 800cf20:	2200      	movs	r2, #0
 800cf22:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800cf24:	4b0a      	ldr	r3, [pc, #40]	; (800cf50 <vPortSuppressTicksAndSleep+0x184>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a09      	ldr	r2, [pc, #36]	; (800cf50 <vPortSuppressTicksAndSleep+0x184>)
 800cf2a:	f043 0301 	orr.w	r3, r3, #1
 800cf2e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800cf30:	69b8      	ldr	r0, [r7, #24]
 800cf32:	f001 f8f5 	bl	800e120 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800cf36:	4b08      	ldr	r3, [pc, #32]	; (800cf58 <vPortSuppressTicksAndSleep+0x18c>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4a09      	ldr	r2, [pc, #36]	; (800cf60 <vPortSuppressTicksAndSleep+0x194>)
 800cf3c:	3b01      	subs	r3, #1
 800cf3e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800cf40:	b662      	cpsie	i
	}
 800cf42:	bf00      	nop
 800cf44:	3720      	adds	r7, #32
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	20005080 	.word	0x20005080
 800cf50:	e000e010 	.word	0xe000e010
 800cf54:	e000e018 	.word	0xe000e018
 800cf58:	2000507c 	.word	0x2000507c
 800cf5c:	20005084 	.word	0x20005084
 800cf60:	e000e014 	.word	0xe000e014

0800cf64 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf64:	b480      	push	{r7}
 800cf66:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800cf68:	4b14      	ldr	r3, [pc, #80]	; (800cfbc <vPortSetupTimerInterrupt+0x58>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4a14      	ldr	r2, [pc, #80]	; (800cfc0 <vPortSetupTimerInterrupt+0x5c>)
 800cf6e:	fba2 2303 	umull	r2, r3, r2, r3
 800cf72:	099b      	lsrs	r3, r3, #6
 800cf74:	4a13      	ldr	r2, [pc, #76]	; (800cfc4 <vPortSetupTimerInterrupt+0x60>)
 800cf76:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800cf78:	4b12      	ldr	r3, [pc, #72]	; (800cfc4 <vPortSetupTimerInterrupt+0x60>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800cf80:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf84:	4a10      	ldr	r2, [pc, #64]	; (800cfc8 <vPortSetupTimerInterrupt+0x64>)
 800cf86:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800cf88:	4b10      	ldr	r3, [pc, #64]	; (800cfcc <vPortSetupTimerInterrupt+0x68>)
 800cf8a:	222d      	movs	r2, #45	; 0x2d
 800cf8c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf8e:	4b10      	ldr	r3, [pc, #64]	; (800cfd0 <vPortSetupTimerInterrupt+0x6c>)
 800cf90:	2200      	movs	r2, #0
 800cf92:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf94:	4b0f      	ldr	r3, [pc, #60]	; (800cfd4 <vPortSetupTimerInterrupt+0x70>)
 800cf96:	2200      	movs	r2, #0
 800cf98:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf9a:	4b08      	ldr	r3, [pc, #32]	; (800cfbc <vPortSetupTimerInterrupt+0x58>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4a08      	ldr	r2, [pc, #32]	; (800cfc0 <vPortSetupTimerInterrupt+0x5c>)
 800cfa0:	fba2 2303 	umull	r2, r3, r2, r3
 800cfa4:	099b      	lsrs	r3, r3, #6
 800cfa6:	4a0c      	ldr	r2, [pc, #48]	; (800cfd8 <vPortSetupTimerInterrupt+0x74>)
 800cfa8:	3b01      	subs	r3, #1
 800cfaa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cfac:	4b08      	ldr	r3, [pc, #32]	; (800cfd0 <vPortSetupTimerInterrupt+0x6c>)
 800cfae:	2207      	movs	r2, #7
 800cfb0:	601a      	str	r2, [r3, #0]
}
 800cfb2:	bf00      	nop
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr
 800cfbc:	20000004 	.word	0x20000004
 800cfc0:	10624dd3 	.word	0x10624dd3
 800cfc4:	2000507c 	.word	0x2000507c
 800cfc8:	20005080 	.word	0x20005080
 800cfcc:	20005084 	.word	0x20005084
 800cfd0:	e000e010 	.word	0xe000e010
 800cfd4:	e000e018 	.word	0xe000e018
 800cfd8:	e000e014 	.word	0xe000e014

0800cfdc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cfdc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cfec <vPortEnableVFP+0x10>
 800cfe0:	6801      	ldr	r1, [r0, #0]
 800cfe2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cfe6:	6001      	str	r1, [r0, #0]
 800cfe8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cfea:	bf00      	nop
 800cfec:	e000ed88 	.word	0xe000ed88

0800cff0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cff0:	b480      	push	{r7}
 800cff2:	b085      	sub	sp, #20
 800cff4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cff6:	f3ef 8305 	mrs	r3, IPSR
 800cffa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2b0f      	cmp	r3, #15
 800d000:	d914      	bls.n	800d02c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d002:	4a17      	ldr	r2, [pc, #92]	; (800d060 <vPortValidateInterruptPriority+0x70>)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	4413      	add	r3, r2
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d00c:	4b15      	ldr	r3, [pc, #84]	; (800d064 <vPortValidateInterruptPriority+0x74>)
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	7afa      	ldrb	r2, [r7, #11]
 800d012:	429a      	cmp	r2, r3
 800d014:	d20a      	bcs.n	800d02c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01a:	f383 8811 	msr	BASEPRI, r3
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	607b      	str	r3, [r7, #4]
}
 800d028:	bf00      	nop
 800d02a:	e7fe      	b.n	800d02a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d02c:	4b0e      	ldr	r3, [pc, #56]	; (800d068 <vPortValidateInterruptPriority+0x78>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d034:	4b0d      	ldr	r3, [pc, #52]	; (800d06c <vPortValidateInterruptPriority+0x7c>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d90a      	bls.n	800d052 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d040:	f383 8811 	msr	BASEPRI, r3
 800d044:	f3bf 8f6f 	isb	sy
 800d048:	f3bf 8f4f 	dsb	sy
 800d04c:	603b      	str	r3, [r7, #0]
}
 800d04e:	bf00      	nop
 800d050:	e7fe      	b.n	800d050 <vPortValidateInterruptPriority+0x60>
	}
 800d052:	bf00      	nop
 800d054:	3714      	adds	r7, #20
 800d056:	46bd      	mov	sp, r7
 800d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05c:	4770      	bx	lr
 800d05e:	bf00      	nop
 800d060:	e000e3f0 	.word	0xe000e3f0
 800d064:	20005088 	.word	0x20005088
 800d068:	e000ed0c 	.word	0xe000ed0c
 800d06c:	2000508c 	.word	0x2000508c

0800d070 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10a      	bne.n	800d09a <xQueueGenericReset+0x2a>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	60bb      	str	r3, [r7, #8]
}
 800d096:	bf00      	nop
 800d098:	e7fe      	b.n	800d098 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d09a:	f7ff fde3 	bl	800cc64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0a6:	68f9      	ldr	r1, [r7, #12]
 800d0a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d0aa:	fb01 f303 	mul.w	r3, r1, r3
 800d0ae:	441a      	add	r2, r3
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ca:	3b01      	subs	r3, #1
 800d0cc:	68f9      	ldr	r1, [r7, #12]
 800d0ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d0d0:	fb01 f303 	mul.w	r3, r1, r3
 800d0d4:	441a      	add	r2, r3
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	22ff      	movs	r2, #255	; 0xff
 800d0de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	22ff      	movs	r2, #255	; 0xff
 800d0e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d114      	bne.n	800d11a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	691b      	ldr	r3, [r3, #16]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d01a      	beq.n	800d12e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	3310      	adds	r3, #16
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f001 f9eb 	bl	800e4d8 <xTaskRemoveFromEventList>
 800d102:	4603      	mov	r3, r0
 800d104:	2b00      	cmp	r3, #0
 800d106:	d012      	beq.n	800d12e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d108:	4b0c      	ldr	r3, [pc, #48]	; (800d13c <xQueueGenericReset+0xcc>)
 800d10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d10e:	601a      	str	r2, [r3, #0]
 800d110:	f3bf 8f4f 	dsb	sy
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	e009      	b.n	800d12e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	3310      	adds	r3, #16
 800d11e:	4618      	mov	r0, r3
 800d120:	f7ff fbc0 	bl	800c8a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	3324      	adds	r3, #36	; 0x24
 800d128:	4618      	mov	r0, r3
 800d12a:	f7ff fbbb 	bl	800c8a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d12e:	f7ff fdc9 	bl	800ccc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d132:	2301      	movs	r3, #1
}
 800d134:	4618      	mov	r0, r3
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	e000ed04 	.word	0xe000ed04

0800d140 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d140:	b580      	push	{r7, lr}
 800d142:	b08e      	sub	sp, #56	; 0x38
 800d144:	af02      	add	r7, sp, #8
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	607a      	str	r2, [r7, #4]
 800d14c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d10a      	bne.n	800d16a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d158:	f383 8811 	msr	BASEPRI, r3
 800d15c:	f3bf 8f6f 	isb	sy
 800d160:	f3bf 8f4f 	dsb	sy
 800d164:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d166:	bf00      	nop
 800d168:	e7fe      	b.n	800d168 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d10a      	bne.n	800d186 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d174:	f383 8811 	msr	BASEPRI, r3
 800d178:	f3bf 8f6f 	isb	sy
 800d17c:	f3bf 8f4f 	dsb	sy
 800d180:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d182:	bf00      	nop
 800d184:	e7fe      	b.n	800d184 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d002      	beq.n	800d192 <xQueueGenericCreateStatic+0x52>
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d001      	beq.n	800d196 <xQueueGenericCreateStatic+0x56>
 800d192:	2301      	movs	r3, #1
 800d194:	e000      	b.n	800d198 <xQueueGenericCreateStatic+0x58>
 800d196:	2300      	movs	r3, #0
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10a      	bne.n	800d1b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a0:	f383 8811 	msr	BASEPRI, r3
 800d1a4:	f3bf 8f6f 	isb	sy
 800d1a8:	f3bf 8f4f 	dsb	sy
 800d1ac:	623b      	str	r3, [r7, #32]
}
 800d1ae:	bf00      	nop
 800d1b0:	e7fe      	b.n	800d1b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d102      	bne.n	800d1be <xQueueGenericCreateStatic+0x7e>
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d101      	bne.n	800d1c2 <xQueueGenericCreateStatic+0x82>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	e000      	b.n	800d1c4 <xQueueGenericCreateStatic+0x84>
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d10a      	bne.n	800d1de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1cc:	f383 8811 	msr	BASEPRI, r3
 800d1d0:	f3bf 8f6f 	isb	sy
 800d1d4:	f3bf 8f4f 	dsb	sy
 800d1d8:	61fb      	str	r3, [r7, #28]
}
 800d1da:	bf00      	nop
 800d1dc:	e7fe      	b.n	800d1dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d1de:	2350      	movs	r3, #80	; 0x50
 800d1e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	2b50      	cmp	r3, #80	; 0x50
 800d1e6:	d00a      	beq.n	800d1fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ec:	f383 8811 	msr	BASEPRI, r3
 800d1f0:	f3bf 8f6f 	isb	sy
 800d1f4:	f3bf 8f4f 	dsb	sy
 800d1f8:	61bb      	str	r3, [r7, #24]
}
 800d1fa:	bf00      	nop
 800d1fc:	e7fe      	b.n	800d1fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d1fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00d      	beq.n	800d226 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20c:	2201      	movs	r2, #1
 800d20e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d212:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d218:	9300      	str	r3, [sp, #0]
 800d21a:	4613      	mov	r3, r2
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	68b9      	ldr	r1, [r7, #8]
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f000 f805 	bl	800d230 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d228:	4618      	mov	r0, r3
 800d22a:	3730      	adds	r7, #48	; 0x30
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	607a      	str	r2, [r7, #4]
 800d23c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d103      	bne.n	800d24c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d244:	69bb      	ldr	r3, [r7, #24]
 800d246:	69ba      	ldr	r2, [r7, #24]
 800d248:	601a      	str	r2, [r3, #0]
 800d24a:	e002      	b.n	800d252 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d24c:	69bb      	ldr	r3, [r7, #24]
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	68fa      	ldr	r2, [r7, #12]
 800d256:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	68ba      	ldr	r2, [r7, #8]
 800d25c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d25e:	2101      	movs	r1, #1
 800d260:	69b8      	ldr	r0, [r7, #24]
 800d262:	f7ff ff05 	bl	800d070 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d266:	69bb      	ldr	r3, [r7, #24]
 800d268:	78fa      	ldrb	r2, [r7, #3]
 800d26a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d26e:	bf00      	nop
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
	...

0800d278 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b08e      	sub	sp, #56	; 0x38
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
 800d284:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d286:	2300      	movs	r3, #0
 800d288:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d290:	2b00      	cmp	r3, #0
 800d292:	d10a      	bne.n	800d2aa <xQueueGenericSend+0x32>
	__asm volatile
 800d294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d298:	f383 8811 	msr	BASEPRI, r3
 800d29c:	f3bf 8f6f 	isb	sy
 800d2a0:	f3bf 8f4f 	dsb	sy
 800d2a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d2a6:	bf00      	nop
 800d2a8:	e7fe      	b.n	800d2a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d103      	bne.n	800d2b8 <xQueueGenericSend+0x40>
 800d2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d101      	bne.n	800d2bc <xQueueGenericSend+0x44>
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e000      	b.n	800d2be <xQueueGenericSend+0x46>
 800d2bc:	2300      	movs	r3, #0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d10a      	bne.n	800d2d8 <xQueueGenericSend+0x60>
	__asm volatile
 800d2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c6:	f383 8811 	msr	BASEPRI, r3
 800d2ca:	f3bf 8f6f 	isb	sy
 800d2ce:	f3bf 8f4f 	dsb	sy
 800d2d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2d4:	bf00      	nop
 800d2d6:	e7fe      	b.n	800d2d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	2b02      	cmp	r3, #2
 800d2dc:	d103      	bne.n	800d2e6 <xQueueGenericSend+0x6e>
 800d2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d101      	bne.n	800d2ea <xQueueGenericSend+0x72>
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	e000      	b.n	800d2ec <xQueueGenericSend+0x74>
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d10a      	bne.n	800d306 <xQueueGenericSend+0x8e>
	__asm volatile
 800d2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f4:	f383 8811 	msr	BASEPRI, r3
 800d2f8:	f3bf 8f6f 	isb	sy
 800d2fc:	f3bf 8f4f 	dsb	sy
 800d300:	623b      	str	r3, [r7, #32]
}
 800d302:	bf00      	nop
 800d304:	e7fe      	b.n	800d304 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d306:	f001 fb15 	bl	800e934 <xTaskGetSchedulerState>
 800d30a:	4603      	mov	r3, r0
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d102      	bne.n	800d316 <xQueueGenericSend+0x9e>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d101      	bne.n	800d31a <xQueueGenericSend+0xa2>
 800d316:	2301      	movs	r3, #1
 800d318:	e000      	b.n	800d31c <xQueueGenericSend+0xa4>
 800d31a:	2300      	movs	r3, #0
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d10a      	bne.n	800d336 <xQueueGenericSend+0xbe>
	__asm volatile
 800d320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d324:	f383 8811 	msr	BASEPRI, r3
 800d328:	f3bf 8f6f 	isb	sy
 800d32c:	f3bf 8f4f 	dsb	sy
 800d330:	61fb      	str	r3, [r7, #28]
}
 800d332:	bf00      	nop
 800d334:	e7fe      	b.n	800d334 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d336:	f7ff fc95 	bl	800cc64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d342:	429a      	cmp	r2, r3
 800d344:	d302      	bcc.n	800d34c <xQueueGenericSend+0xd4>
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	2b02      	cmp	r3, #2
 800d34a:	d129      	bne.n	800d3a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d34c:	683a      	ldr	r2, [r7, #0]
 800d34e:	68b9      	ldr	r1, [r7, #8]
 800d350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d352:	f000 fa0b 	bl	800d76c <prvCopyDataToQueue>
 800d356:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d010      	beq.n	800d382 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d362:	3324      	adds	r3, #36	; 0x24
 800d364:	4618      	mov	r0, r3
 800d366:	f001 f8b7 	bl	800e4d8 <xTaskRemoveFromEventList>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d013      	beq.n	800d398 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d370:	4b3f      	ldr	r3, [pc, #252]	; (800d470 <xQueueGenericSend+0x1f8>)
 800d372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d376:	601a      	str	r2, [r3, #0]
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	f3bf 8f6f 	isb	sy
 800d380:	e00a      	b.n	800d398 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d384:	2b00      	cmp	r3, #0
 800d386:	d007      	beq.n	800d398 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d388:	4b39      	ldr	r3, [pc, #228]	; (800d470 <xQueueGenericSend+0x1f8>)
 800d38a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d38e:	601a      	str	r2, [r3, #0]
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d398:	f7ff fc94 	bl	800ccc4 <vPortExitCritical>
				return pdPASS;
 800d39c:	2301      	movs	r3, #1
 800d39e:	e063      	b.n	800d468 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d103      	bne.n	800d3ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d3a6:	f7ff fc8d 	bl	800ccc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	e05c      	b.n	800d468 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d106      	bne.n	800d3c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3b4:	f107 0314 	add.w	r3, r7, #20
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f001 f8f3 	bl	800e5a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3c2:	f7ff fc7f 	bl	800ccc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3c6:	f000 fdb7 	bl	800df38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3ca:	f7ff fc4b 	bl	800cc64 <vPortEnterCritical>
 800d3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3d4:	b25b      	sxtb	r3, r3
 800d3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3da:	d103      	bne.n	800d3e4 <xQueueGenericSend+0x16c>
 800d3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3ea:	b25b      	sxtb	r3, r3
 800d3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3f0:	d103      	bne.n	800d3fa <xQueueGenericSend+0x182>
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3fa:	f7ff fc63 	bl	800ccc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3fe:	1d3a      	adds	r2, r7, #4
 800d400:	f107 0314 	add.w	r3, r7, #20
 800d404:	4611      	mov	r1, r2
 800d406:	4618      	mov	r0, r3
 800d408:	f001 f8e2 	bl	800e5d0 <xTaskCheckForTimeOut>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d124      	bne.n	800d45c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d412:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d414:	f000 faa2 	bl	800d95c <prvIsQueueFull>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d018      	beq.n	800d450 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d420:	3310      	adds	r3, #16
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	4611      	mov	r1, r2
 800d426:	4618      	mov	r0, r3
 800d428:	f001 f806 	bl	800e438 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d42c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d42e:	f000 fa2d 	bl	800d88c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d432:	f000 fdc7 	bl	800dfc4 <xTaskResumeAll>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	f47f af7c 	bne.w	800d336 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d43e:	4b0c      	ldr	r3, [pc, #48]	; (800d470 <xQueueGenericSend+0x1f8>)
 800d440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d444:	601a      	str	r2, [r3, #0]
 800d446:	f3bf 8f4f 	dsb	sy
 800d44a:	f3bf 8f6f 	isb	sy
 800d44e:	e772      	b.n	800d336 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d452:	f000 fa1b 	bl	800d88c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d456:	f000 fdb5 	bl	800dfc4 <xTaskResumeAll>
 800d45a:	e76c      	b.n	800d336 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d45c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d45e:	f000 fa15 	bl	800d88c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d462:	f000 fdaf 	bl	800dfc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d466:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3738      	adds	r7, #56	; 0x38
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	e000ed04 	.word	0xe000ed04

0800d474 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b090      	sub	sp, #64	; 0x40
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	60b9      	str	r1, [r7, #8]
 800d47e:	607a      	str	r2, [r7, #4]
 800d480:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d10a      	bne.n	800d4a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d490:	f383 8811 	msr	BASEPRI, r3
 800d494:	f3bf 8f6f 	isb	sy
 800d498:	f3bf 8f4f 	dsb	sy
 800d49c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d49e:	bf00      	nop
 800d4a0:	e7fe      	b.n	800d4a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d103      	bne.n	800d4b0 <xQueueGenericSendFromISR+0x3c>
 800d4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d101      	bne.n	800d4b4 <xQueueGenericSendFromISR+0x40>
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	e000      	b.n	800d4b6 <xQueueGenericSendFromISR+0x42>
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d10a      	bne.n	800d4d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d4cc:	bf00      	nop
 800d4ce:	e7fe      	b.n	800d4ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	2b02      	cmp	r3, #2
 800d4d4:	d103      	bne.n	800d4de <xQueueGenericSendFromISR+0x6a>
 800d4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d101      	bne.n	800d4e2 <xQueueGenericSendFromISR+0x6e>
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e000      	b.n	800d4e4 <xQueueGenericSendFromISR+0x70>
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d10a      	bne.n	800d4fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ec:	f383 8811 	msr	BASEPRI, r3
 800d4f0:	f3bf 8f6f 	isb	sy
 800d4f4:	f3bf 8f4f 	dsb	sy
 800d4f8:	623b      	str	r3, [r7, #32]
}
 800d4fa:	bf00      	nop
 800d4fc:	e7fe      	b.n	800d4fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4fe:	f7ff fd77 	bl	800cff0 <vPortValidateInterruptPriority>
	__asm volatile
 800d502:	f3ef 8211 	mrs	r2, BASEPRI
 800d506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50a:	f383 8811 	msr	BASEPRI, r3
 800d50e:	f3bf 8f6f 	isb	sy
 800d512:	f3bf 8f4f 	dsb	sy
 800d516:	61fa      	str	r2, [r7, #28]
 800d518:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d51a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d51c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d526:	429a      	cmp	r2, r3
 800d528:	d302      	bcc.n	800d530 <xQueueGenericSendFromISR+0xbc>
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	2b02      	cmp	r3, #2
 800d52e:	d12f      	bne.n	800d590 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d532:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d53e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d540:	683a      	ldr	r2, [r7, #0]
 800d542:	68b9      	ldr	r1, [r7, #8]
 800d544:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d546:	f000 f911 	bl	800d76c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d54a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d552:	d112      	bne.n	800d57a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d016      	beq.n	800d58a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55e:	3324      	adds	r3, #36	; 0x24
 800d560:	4618      	mov	r0, r3
 800d562:	f000 ffb9 	bl	800e4d8 <xTaskRemoveFromEventList>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d00e      	beq.n	800d58a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00b      	beq.n	800d58a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2201      	movs	r2, #1
 800d576:	601a      	str	r2, [r3, #0]
 800d578:	e007      	b.n	800d58a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d57a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d57e:	3301      	adds	r3, #1
 800d580:	b2db      	uxtb	r3, r3
 800d582:	b25a      	sxtb	r2, r3
 800d584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d58a:	2301      	movs	r3, #1
 800d58c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d58e:	e001      	b.n	800d594 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d590:	2300      	movs	r3, #0
 800d592:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d596:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	f383 8811 	msr	BASEPRI, r3
}
 800d59e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3740      	adds	r7, #64	; 0x40
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
	...

0800d5ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b08c      	sub	sp, #48	; 0x30
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	60b9      	str	r1, [r7, #8]
 800d5b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d10a      	bne.n	800d5dc <xQueueReceive+0x30>
	__asm volatile
 800d5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ca:	f383 8811 	msr	BASEPRI, r3
 800d5ce:	f3bf 8f6f 	isb	sy
 800d5d2:	f3bf 8f4f 	dsb	sy
 800d5d6:	623b      	str	r3, [r7, #32]
}
 800d5d8:	bf00      	nop
 800d5da:	e7fe      	b.n	800d5da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d103      	bne.n	800d5ea <xQueueReceive+0x3e>
 800d5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d101      	bne.n	800d5ee <xQueueReceive+0x42>
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	e000      	b.n	800d5f0 <xQueueReceive+0x44>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d10a      	bne.n	800d60a <xQueueReceive+0x5e>
	__asm volatile
 800d5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f8:	f383 8811 	msr	BASEPRI, r3
 800d5fc:	f3bf 8f6f 	isb	sy
 800d600:	f3bf 8f4f 	dsb	sy
 800d604:	61fb      	str	r3, [r7, #28]
}
 800d606:	bf00      	nop
 800d608:	e7fe      	b.n	800d608 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d60a:	f001 f993 	bl	800e934 <xTaskGetSchedulerState>
 800d60e:	4603      	mov	r3, r0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d102      	bne.n	800d61a <xQueueReceive+0x6e>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d101      	bne.n	800d61e <xQueueReceive+0x72>
 800d61a:	2301      	movs	r3, #1
 800d61c:	e000      	b.n	800d620 <xQueueReceive+0x74>
 800d61e:	2300      	movs	r3, #0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d10a      	bne.n	800d63a <xQueueReceive+0x8e>
	__asm volatile
 800d624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d628:	f383 8811 	msr	BASEPRI, r3
 800d62c:	f3bf 8f6f 	isb	sy
 800d630:	f3bf 8f4f 	dsb	sy
 800d634:	61bb      	str	r3, [r7, #24]
}
 800d636:	bf00      	nop
 800d638:	e7fe      	b.n	800d638 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d63a:	f7ff fb13 	bl	800cc64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d642:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d646:	2b00      	cmp	r3, #0
 800d648:	d01f      	beq.n	800d68a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d64a:	68b9      	ldr	r1, [r7, #8]
 800d64c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d64e:	f000 f8f7 	bl	800d840 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d654:	1e5a      	subs	r2, r3, #1
 800d656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d658:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65c:	691b      	ldr	r3, [r3, #16]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d00f      	beq.n	800d682 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d664:	3310      	adds	r3, #16
 800d666:	4618      	mov	r0, r3
 800d668:	f000 ff36 	bl	800e4d8 <xTaskRemoveFromEventList>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d007      	beq.n	800d682 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d672:	4b3d      	ldr	r3, [pc, #244]	; (800d768 <xQueueReceive+0x1bc>)
 800d674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d678:	601a      	str	r2, [r3, #0]
 800d67a:	f3bf 8f4f 	dsb	sy
 800d67e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d682:	f7ff fb1f 	bl	800ccc4 <vPortExitCritical>
				return pdPASS;
 800d686:	2301      	movs	r3, #1
 800d688:	e069      	b.n	800d75e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d103      	bne.n	800d698 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d690:	f7ff fb18 	bl	800ccc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d694:	2300      	movs	r3, #0
 800d696:	e062      	b.n	800d75e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d106      	bne.n	800d6ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d69e:	f107 0310 	add.w	r3, r7, #16
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f000 ff7e 	bl	800e5a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d6ac:	f7ff fb0a 	bl	800ccc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d6b0:	f000 fc42 	bl	800df38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d6b4:	f7ff fad6 	bl	800cc64 <vPortEnterCritical>
 800d6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6be:	b25b      	sxtb	r3, r3
 800d6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6c4:	d103      	bne.n	800d6ce <xQueueReceive+0x122>
 800d6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6d4:	b25b      	sxtb	r3, r3
 800d6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6da:	d103      	bne.n	800d6e4 <xQueueReceive+0x138>
 800d6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6e4:	f7ff faee 	bl	800ccc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d6e8:	1d3a      	adds	r2, r7, #4
 800d6ea:	f107 0310 	add.w	r3, r7, #16
 800d6ee:	4611      	mov	r1, r2
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f000 ff6d 	bl	800e5d0 <xTaskCheckForTimeOut>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d123      	bne.n	800d744 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6fe:	f000 f917 	bl	800d930 <prvIsQueueEmpty>
 800d702:	4603      	mov	r3, r0
 800d704:	2b00      	cmp	r3, #0
 800d706:	d017      	beq.n	800d738 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	3324      	adds	r3, #36	; 0x24
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	4611      	mov	r1, r2
 800d710:	4618      	mov	r0, r3
 800d712:	f000 fe91 	bl	800e438 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d718:	f000 f8b8 	bl	800d88c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d71c:	f000 fc52 	bl	800dfc4 <xTaskResumeAll>
 800d720:	4603      	mov	r3, r0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d189      	bne.n	800d63a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d726:	4b10      	ldr	r3, [pc, #64]	; (800d768 <xQueueReceive+0x1bc>)
 800d728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d72c:	601a      	str	r2, [r3, #0]
 800d72e:	f3bf 8f4f 	dsb	sy
 800d732:	f3bf 8f6f 	isb	sy
 800d736:	e780      	b.n	800d63a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d73a:	f000 f8a7 	bl	800d88c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d73e:	f000 fc41 	bl	800dfc4 <xTaskResumeAll>
 800d742:	e77a      	b.n	800d63a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d746:	f000 f8a1 	bl	800d88c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d74a:	f000 fc3b 	bl	800dfc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d74e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d750:	f000 f8ee 	bl	800d930 <prvIsQueueEmpty>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	f43f af6f 	beq.w	800d63a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d75c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3730      	adds	r7, #48	; 0x30
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	e000ed04 	.word	0xe000ed04

0800d76c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b086      	sub	sp, #24
 800d770:	af00      	add	r7, sp, #0
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	60b9      	str	r1, [r7, #8]
 800d776:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d778:	2300      	movs	r3, #0
 800d77a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d780:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d786:	2b00      	cmp	r3, #0
 800d788:	d10d      	bne.n	800d7a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d14d      	bne.n	800d82e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	4618      	mov	r0, r3
 800d798:	f001 f8ea 	bl	800e970 <xTaskPriorityDisinherit>
 800d79c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	609a      	str	r2, [r3, #8]
 800d7a4:	e043      	b.n	800d82e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d119      	bne.n	800d7e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	6858      	ldr	r0, [r3, #4]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	68b9      	ldr	r1, [r7, #8]
 800d7b8:	f002 f930 	bl	800fa1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	685a      	ldr	r2, [r3, #4]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7c4:	441a      	add	r2, r3
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	685a      	ldr	r2, [r3, #4]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	689b      	ldr	r3, [r3, #8]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d32b      	bcc.n	800d82e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	605a      	str	r2, [r3, #4]
 800d7de:	e026      	b.n	800d82e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	68d8      	ldr	r0, [r3, #12]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	68b9      	ldr	r1, [r7, #8]
 800d7ec:	f002 f916 	bl	800fa1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	68da      	ldr	r2, [r3, #12]
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f8:	425b      	negs	r3, r3
 800d7fa:	441a      	add	r2, r3
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	68da      	ldr	r2, [r3, #12]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d207      	bcs.n	800d81c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	689a      	ldr	r2, [r3, #8]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d814:	425b      	negs	r3, r3
 800d816:	441a      	add	r2, r3
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2b02      	cmp	r3, #2
 800d820:	d105      	bne.n	800d82e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d002      	beq.n	800d82e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	3b01      	subs	r3, #1
 800d82c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	1c5a      	adds	r2, r3, #1
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d836:	697b      	ldr	r3, [r7, #20]
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3718      	adds	r7, #24
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d018      	beq.n	800d884 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	68da      	ldr	r2, [r3, #12]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d85a:	441a      	add	r2, r3
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	68da      	ldr	r2, [r3, #12]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d303      	bcc.n	800d874 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	68d9      	ldr	r1, [r3, #12]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d87c:	461a      	mov	r2, r3
 800d87e:	6838      	ldr	r0, [r7, #0]
 800d880:	f002 f8cc 	bl	800fa1c <memcpy>
	}
}
 800d884:	bf00      	nop
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d894:	f7ff f9e6 	bl	800cc64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d89e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d8a0:	e011      	b.n	800d8c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d012      	beq.n	800d8d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	3324      	adds	r3, #36	; 0x24
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f000 fe12 	bl	800e4d8 <xTaskRemoveFromEventList>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d001      	beq.n	800d8be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d8ba:	f000 fefb 	bl	800e6b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d8be:	7bfb      	ldrb	r3, [r7, #15]
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d8c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	dce9      	bgt.n	800d8a2 <prvUnlockQueue+0x16>
 800d8ce:	e000      	b.n	800d8d2 <prvUnlockQueue+0x46>
					break;
 800d8d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	22ff      	movs	r2, #255	; 0xff
 800d8d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d8da:	f7ff f9f3 	bl	800ccc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d8de:	f7ff f9c1 	bl	800cc64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d8ea:	e011      	b.n	800d910 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	691b      	ldr	r3, [r3, #16]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d012      	beq.n	800d91a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	3310      	adds	r3, #16
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 fded 	bl	800e4d8 <xTaskRemoveFromEventList>
 800d8fe:	4603      	mov	r3, r0
 800d900:	2b00      	cmp	r3, #0
 800d902:	d001      	beq.n	800d908 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d904:	f000 fed6 	bl	800e6b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d908:	7bbb      	ldrb	r3, [r7, #14]
 800d90a:	3b01      	subs	r3, #1
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d914:	2b00      	cmp	r3, #0
 800d916:	dce9      	bgt.n	800d8ec <prvUnlockQueue+0x60>
 800d918:	e000      	b.n	800d91c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d91a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	22ff      	movs	r2, #255	; 0xff
 800d920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d924:	f7ff f9ce 	bl	800ccc4 <vPortExitCritical>
}
 800d928:	bf00      	nop
 800d92a:	3710      	adds	r7, #16
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d938:	f7ff f994 	bl	800cc64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d940:	2b00      	cmp	r3, #0
 800d942:	d102      	bne.n	800d94a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d944:	2301      	movs	r3, #1
 800d946:	60fb      	str	r3, [r7, #12]
 800d948:	e001      	b.n	800d94e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d94a:	2300      	movs	r3, #0
 800d94c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d94e:	f7ff f9b9 	bl	800ccc4 <vPortExitCritical>

	return xReturn;
 800d952:	68fb      	ldr	r3, [r7, #12]
}
 800d954:	4618      	mov	r0, r3
 800d956:	3710      	adds	r7, #16
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b084      	sub	sp, #16
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d964:	f7ff f97e 	bl	800cc64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d970:	429a      	cmp	r2, r3
 800d972:	d102      	bne.n	800d97a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d974:	2301      	movs	r3, #1
 800d976:	60fb      	str	r3, [r7, #12]
 800d978:	e001      	b.n	800d97e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d97a:	2300      	movs	r3, #0
 800d97c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d97e:	f7ff f9a1 	bl	800ccc4 <vPortExitCritical>

	return xReturn;
 800d982:	68fb      	ldr	r3, [r7, #12]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3710      	adds	r7, #16
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d98c:	b480      	push	{r7}
 800d98e:	b085      	sub	sp, #20
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d996:	2300      	movs	r3, #0
 800d998:	60fb      	str	r3, [r7, #12]
 800d99a:	e014      	b.n	800d9c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d99c:	4a0f      	ldr	r2, [pc, #60]	; (800d9dc <vQueueAddToRegistry+0x50>)
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d10b      	bne.n	800d9c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d9a8:	490c      	ldr	r1, [pc, #48]	; (800d9dc <vQueueAddToRegistry+0x50>)
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	683a      	ldr	r2, [r7, #0]
 800d9ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d9b2:	4a0a      	ldr	r2, [pc, #40]	; (800d9dc <vQueueAddToRegistry+0x50>)
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	00db      	lsls	r3, r3, #3
 800d9b8:	4413      	add	r3, r2
 800d9ba:	687a      	ldr	r2, [r7, #4]
 800d9bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d9be:	e006      	b.n	800d9ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	60fb      	str	r3, [r7, #12]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2b07      	cmp	r3, #7
 800d9ca:	d9e7      	bls.n	800d99c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d9cc:	bf00      	nop
 800d9ce:	bf00      	nop
 800d9d0:	3714      	adds	r7, #20
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr
 800d9da:	bf00      	nop
 800d9dc:	20005090 	.word	0x20005090

0800d9e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b086      	sub	sp, #24
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d9f0:	f7ff f938 	bl	800cc64 <vPortEnterCritical>
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9fa:	b25b      	sxtb	r3, r3
 800d9fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da00:	d103      	bne.n	800da0a <vQueueWaitForMessageRestricted+0x2a>
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	2200      	movs	r2, #0
 800da06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da10:	b25b      	sxtb	r3, r3
 800da12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da16:	d103      	bne.n	800da20 <vQueueWaitForMessageRestricted+0x40>
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	2200      	movs	r2, #0
 800da1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da20:	f7ff f950 	bl	800ccc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d106      	bne.n	800da3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	3324      	adds	r3, #36	; 0x24
 800da30:	687a      	ldr	r2, [r7, #4]
 800da32:	68b9      	ldr	r1, [r7, #8]
 800da34:	4618      	mov	r0, r3
 800da36:	f000 fd23 	bl	800e480 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800da3a:	6978      	ldr	r0, [r7, #20]
 800da3c:	f7ff ff26 	bl	800d88c <prvUnlockQueue>
	}
 800da40:	bf00      	nop
 800da42:	3718      	adds	r7, #24
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b08e      	sub	sp, #56	; 0x38
 800da4c:	af04      	add	r7, sp, #16
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	60b9      	str	r1, [r7, #8]
 800da52:	607a      	str	r2, [r7, #4]
 800da54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800da56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d10a      	bne.n	800da72 <xTaskCreateStatic+0x2a>
	__asm volatile
 800da5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da60:	f383 8811 	msr	BASEPRI, r3
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	623b      	str	r3, [r7, #32]
}
 800da6e:	bf00      	nop
 800da70:	e7fe      	b.n	800da70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800da72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da74:	2b00      	cmp	r3, #0
 800da76:	d10a      	bne.n	800da8e <xTaskCreateStatic+0x46>
	__asm volatile
 800da78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7c:	f383 8811 	msr	BASEPRI, r3
 800da80:	f3bf 8f6f 	isb	sy
 800da84:	f3bf 8f4f 	dsb	sy
 800da88:	61fb      	str	r3, [r7, #28]
}
 800da8a:	bf00      	nop
 800da8c:	e7fe      	b.n	800da8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800da8e:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800da92:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 800da9a:	d00a      	beq.n	800dab2 <xTaskCreateStatic+0x6a>
	__asm volatile
 800da9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa0:	f383 8811 	msr	BASEPRI, r3
 800daa4:	f3bf 8f6f 	isb	sy
 800daa8:	f3bf 8f4f 	dsb	sy
 800daac:	61bb      	str	r3, [r7, #24]
}
 800daae:	bf00      	nop
 800dab0:	e7fe      	b.n	800dab0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dab2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d01e      	beq.n	800daf8 <xTaskCreateStatic+0xb0>
 800daba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d01b      	beq.n	800daf8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dac8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800daca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dacc:	2202      	movs	r2, #2
 800dace:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dad2:	2300      	movs	r3, #0
 800dad4:	9303      	str	r3, [sp, #12]
 800dad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad8:	9302      	str	r3, [sp, #8]
 800dada:	f107 0314 	add.w	r3, r7, #20
 800dade:	9301      	str	r3, [sp, #4]
 800dae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae2:	9300      	str	r3, [sp, #0]
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	68b9      	ldr	r1, [r7, #8]
 800daea:	68f8      	ldr	r0, [r7, #12]
 800daec:	f000 f852 	bl	800db94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800daf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800daf2:	f000 f90b 	bl	800dd0c <prvAddNewTaskToReadyList>
 800daf6:	e001      	b.n	800dafc <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800daf8:	2300      	movs	r3, #0
 800dafa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dafc:	697b      	ldr	r3, [r7, #20]
	}
 800dafe:	4618      	mov	r0, r3
 800db00:	3728      	adds	r7, #40	; 0x28
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}

0800db06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800db06:	b580      	push	{r7, lr}
 800db08:	b08c      	sub	sp, #48	; 0x30
 800db0a:	af04      	add	r7, sp, #16
 800db0c:	60f8      	str	r0, [r7, #12]
 800db0e:	60b9      	str	r1, [r7, #8]
 800db10:	603b      	str	r3, [r7, #0]
 800db12:	4613      	mov	r3, r2
 800db14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800db16:	88fb      	ldrh	r3, [r7, #6]
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7fe fe60 	bl	800c7e0 <pvPortMalloc>
 800db20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d00f      	beq.n	800db48 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800db28:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 800db2c:	f7fe fe58 	bl	800c7e0 <pvPortMalloc>
 800db30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d003      	beq.n	800db40 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	697a      	ldr	r2, [r7, #20]
 800db3c:	631a      	str	r2, [r3, #48]	; 0x30
 800db3e:	e005      	b.n	800db4c <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800db40:	6978      	ldr	r0, [r7, #20]
 800db42:	f7fe fe97 	bl	800c874 <vPortFree>
 800db46:	e001      	b.n	800db4c <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800db48:	2300      	movs	r3, #0
 800db4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800db4c:	69fb      	ldr	r3, [r7, #28]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d017      	beq.n	800db82 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	2200      	movs	r2, #0
 800db56:	f883 21b5 	strb.w	r2, [r3, #437]	; 0x1b5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800db5a:	88fa      	ldrh	r2, [r7, #6]
 800db5c:	2300      	movs	r3, #0
 800db5e:	9303      	str	r3, [sp, #12]
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	9302      	str	r3, [sp, #8]
 800db64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db66:	9301      	str	r3, [sp, #4]
 800db68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6a:	9300      	str	r3, [sp, #0]
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	68b9      	ldr	r1, [r7, #8]
 800db70:	68f8      	ldr	r0, [r7, #12]
 800db72:	f000 f80f 	bl	800db94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db76:	69f8      	ldr	r0, [r7, #28]
 800db78:	f000 f8c8 	bl	800dd0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800db7c:	2301      	movs	r3, #1
 800db7e:	61bb      	str	r3, [r7, #24]
 800db80:	e002      	b.n	800db88 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800db82:	f04f 33ff 	mov.w	r3, #4294967295
 800db86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800db88:	69bb      	ldr	r3, [r7, #24]
	}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3720      	adds	r7, #32
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
	...

0800db94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b088      	sub	sp, #32
 800db98:	af00      	add	r7, sp, #0
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	607a      	str	r2, [r7, #4]
 800dba0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	461a      	mov	r2, r3
 800dbac:	21a5      	movs	r1, #165	; 0xa5
 800dbae:	f001 ff43 	bl	800fa38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dbbc:	3b01      	subs	r3, #1
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	4413      	add	r3, r2
 800dbc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dbc4:	69bb      	ldr	r3, [r7, #24]
 800dbc6:	f023 0307 	bic.w	r3, r3, #7
 800dbca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dbcc:	69bb      	ldr	r3, [r7, #24]
 800dbce:	f003 0307 	and.w	r3, r3, #7
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d00a      	beq.n	800dbec <prvInitialiseNewTask+0x58>
	__asm volatile
 800dbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbda:	f383 8811 	msr	BASEPRI, r3
 800dbde:	f3bf 8f6f 	isb	sy
 800dbe2:	f3bf 8f4f 	dsb	sy
 800dbe6:	617b      	str	r3, [r7, #20]
}
 800dbe8:	bf00      	nop
 800dbea:	e7fe      	b.n	800dbea <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800dbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbee:	69ba      	ldr	r2, [r7, #24]
 800dbf0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d01f      	beq.n	800dc3a <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	61fb      	str	r3, [r7, #28]
 800dbfe:	e012      	b.n	800dc26 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dc00:	68ba      	ldr	r2, [r7, #8]
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	4413      	add	r3, r2
 800dc06:	7819      	ldrb	r1, [r3, #0]
 800dc08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc0a:	69fb      	ldr	r3, [r7, #28]
 800dc0c:	4413      	add	r3, r2
 800dc0e:	3334      	adds	r3, #52	; 0x34
 800dc10:	460a      	mov	r2, r1
 800dc12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dc14:	68ba      	ldr	r2, [r7, #8]
 800dc16:	69fb      	ldr	r3, [r7, #28]
 800dc18:	4413      	add	r3, r2
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d006      	beq.n	800dc2e <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc20:	69fb      	ldr	r3, [r7, #28]
 800dc22:	3301      	adds	r3, #1
 800dc24:	61fb      	str	r3, [r7, #28]
 800dc26:	69fb      	ldr	r3, [r7, #28]
 800dc28:	2bfe      	cmp	r3, #254	; 0xfe
 800dc2a:	d9e9      	bls.n	800dc00 <prvInitialiseNewTask+0x6c>
 800dc2c:	e000      	b.n	800dc30 <prvInitialiseNewTask+0x9c>
			{
				break;
 800dc2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc32:	2200      	movs	r2, #0
 800dc34:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800dc38:	e003      	b.n	800dc42 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc44:	2b37      	cmp	r3, #55	; 0x37
 800dc46:	d901      	bls.n	800dc4c <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc48:	2337      	movs	r3, #55	; 0x37
 800dc4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc56:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		pxNewTCB->uxMutexesHeld = 0;
 800dc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc64:	3304      	adds	r3, #4
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7fe fe3c 	bl	800c8e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc6e:	3318      	adds	r3, #24
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7fe fe37 	bl	800c8e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800dc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800dc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc96:	2200      	movs	r2, #0
 800dc98:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9e:	2200      	movs	r2, #0
 800dca0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca6:	2200      	movs	r2, #0
 800dca8:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dcb2:	2260      	movs	r2, #96	; 0x60
 800dcb4:	2100      	movs	r1, #0
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f001 febe 	bl	800fa38 <memset>
 800dcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcbe:	4a10      	ldr	r2, [pc, #64]	; (800dd00 <prvInitialiseNewTask+0x16c>)
 800dcc0:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800dcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc6:	4a0f      	ldr	r2, [pc, #60]	; (800dd04 <prvInitialiseNewTask+0x170>)
 800dcc8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800dccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcce:	4a0e      	ldr	r2, [pc, #56]	; (800dd08 <prvInitialiseNewTask+0x174>)
 800dcd0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800dcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dcdc:	683a      	ldr	r2, [r7, #0]
 800dcde:	68f9      	ldr	r1, [r7, #12]
 800dce0:	69b8      	ldr	r0, [r7, #24]
 800dce2:	f7fe fe93 	bl	800ca0c <pxPortInitialiseStack>
 800dce6:	4602      	mov	r2, r0
 800dce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d002      	beq.n	800dcf8 <prvInitialiseNewTask+0x164>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dcf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcf6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcf8:	bf00      	nop
 800dcfa:	3720      	adds	r7, #32
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	0801189c 	.word	0x0801189c
 800dd04:	080118bc 	.word	0x080118bc
 800dd08:	0801187c 	.word	0x0801187c

0800dd0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dd14:	f7fe ffa6 	bl	800cc64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dd18:	4b2d      	ldr	r3, [pc, #180]	; (800ddd0 <prvAddNewTaskToReadyList+0xc4>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	4a2c      	ldr	r2, [pc, #176]	; (800ddd0 <prvAddNewTaskToReadyList+0xc4>)
 800dd20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dd22:	4b2c      	ldr	r3, [pc, #176]	; (800ddd4 <prvAddNewTaskToReadyList+0xc8>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d109      	bne.n	800dd3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dd2a:	4a2a      	ldr	r2, [pc, #168]	; (800ddd4 <prvAddNewTaskToReadyList+0xc8>)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dd30:	4b27      	ldr	r3, [pc, #156]	; (800ddd0 <prvAddNewTaskToReadyList+0xc4>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	2b01      	cmp	r3, #1
 800dd36:	d110      	bne.n	800dd5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dd38:	f000 fd38 	bl	800e7ac <prvInitialiseTaskLists>
 800dd3c:	e00d      	b.n	800dd5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dd3e:	4b26      	ldr	r3, [pc, #152]	; (800ddd8 <prvAddNewTaskToReadyList+0xcc>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d109      	bne.n	800dd5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd46:	4b23      	ldr	r3, [pc, #140]	; (800ddd4 <prvAddNewTaskToReadyList+0xc8>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d802      	bhi.n	800dd5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dd54:	4a1f      	ldr	r2, [pc, #124]	; (800ddd4 <prvAddNewTaskToReadyList+0xc8>)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dd5a:	4b20      	ldr	r3, [pc, #128]	; (800dddc <prvAddNewTaskToReadyList+0xd0>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	4a1e      	ldr	r2, [pc, #120]	; (800dddc <prvAddNewTaskToReadyList+0xd0>)
 800dd62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dd64:	4b1d      	ldr	r3, [pc, #116]	; (800dddc <prvAddNewTaskToReadyList+0xd0>)
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd72:	4b1b      	ldr	r3, [pc, #108]	; (800dde0 <prvAddNewTaskToReadyList+0xd4>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d903      	bls.n	800dd82 <prvAddNewTaskToReadyList+0x76>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd7e:	4a18      	ldr	r2, [pc, #96]	; (800dde0 <prvAddNewTaskToReadyList+0xd4>)
 800dd80:	6013      	str	r3, [r2, #0]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd86:	4613      	mov	r3, r2
 800dd88:	009b      	lsls	r3, r3, #2
 800dd8a:	4413      	add	r3, r2
 800dd8c:	009b      	lsls	r3, r3, #2
 800dd8e:	4a15      	ldr	r2, [pc, #84]	; (800dde4 <prvAddNewTaskToReadyList+0xd8>)
 800dd90:	441a      	add	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	3304      	adds	r3, #4
 800dd96:	4619      	mov	r1, r3
 800dd98:	4610      	mov	r0, r2
 800dd9a:	f7fe fdb0 	bl	800c8fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dd9e:	f7fe ff91 	bl	800ccc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dda2:	4b0d      	ldr	r3, [pc, #52]	; (800ddd8 <prvAddNewTaskToReadyList+0xcc>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00e      	beq.n	800ddc8 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ddaa:	4b0a      	ldr	r3, [pc, #40]	; (800ddd4 <prvAddNewTaskToReadyList+0xc8>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d207      	bcs.n	800ddc8 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ddb8:	4b0b      	ldr	r3, [pc, #44]	; (800dde8 <prvAddNewTaskToReadyList+0xdc>)
 800ddba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddbe:	601a      	str	r2, [r3, #0]
 800ddc0:	f3bf 8f4f 	dsb	sy
 800ddc4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ddc8:	bf00      	nop
 800ddca:	3708      	adds	r7, #8
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}
 800ddd0:	200055a8 	.word	0x200055a8
 800ddd4:	200050d0 	.word	0x200050d0
 800ddd8:	200055b4 	.word	0x200055b4
 800dddc:	200055c4 	.word	0x200055c4
 800dde0:	200055b0 	.word	0x200055b0
 800dde4:	200050d4 	.word	0x200050d4
 800dde8:	e000ed04 	.word	0xe000ed04

0800ddec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b084      	sub	sp, #16
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d017      	beq.n	800de2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ddfe:	4b13      	ldr	r3, [pc, #76]	; (800de4c <vTaskDelay+0x60>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d00a      	beq.n	800de1c <vTaskDelay+0x30>
	__asm volatile
 800de06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0a:	f383 8811 	msr	BASEPRI, r3
 800de0e:	f3bf 8f6f 	isb	sy
 800de12:	f3bf 8f4f 	dsb	sy
 800de16:	60bb      	str	r3, [r7, #8]
}
 800de18:	bf00      	nop
 800de1a:	e7fe      	b.n	800de1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800de1c:	f000 f88c 	bl	800df38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800de20:	2100      	movs	r1, #0
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f000 fe18 	bl	800ea58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800de28:	f000 f8cc 	bl	800dfc4 <xTaskResumeAll>
 800de2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d107      	bne.n	800de44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800de34:	4b06      	ldr	r3, [pc, #24]	; (800de50 <vTaskDelay+0x64>)
 800de36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de3a:	601a      	str	r2, [r3, #0]
 800de3c:	f3bf 8f4f 	dsb	sy
 800de40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de44:	bf00      	nop
 800de46:	3710      	adds	r7, #16
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	200055d0 	.word	0x200055d0
 800de50:	e000ed04 	.word	0xe000ed04

0800de54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b08a      	sub	sp, #40	; 0x28
 800de58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800de5a:	2300      	movs	r3, #0
 800de5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800de5e:	2300      	movs	r3, #0
 800de60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800de62:	463a      	mov	r2, r7
 800de64:	1d39      	adds	r1, r7, #4
 800de66:	f107 0308 	add.w	r3, r7, #8
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fe fc32 	bl	800c6d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800de70:	6839      	ldr	r1, [r7, #0]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	68ba      	ldr	r2, [r7, #8]
 800de76:	9202      	str	r2, [sp, #8]
 800de78:	9301      	str	r3, [sp, #4]
 800de7a:	2300      	movs	r3, #0
 800de7c:	9300      	str	r3, [sp, #0]
 800de7e:	2300      	movs	r3, #0
 800de80:	460a      	mov	r2, r1
 800de82:	4925      	ldr	r1, [pc, #148]	; (800df18 <vTaskStartScheduler+0xc4>)
 800de84:	4825      	ldr	r0, [pc, #148]	; (800df1c <vTaskStartScheduler+0xc8>)
 800de86:	f7ff fddf 	bl	800da48 <xTaskCreateStatic>
 800de8a:	4603      	mov	r3, r0
 800de8c:	4a24      	ldr	r2, [pc, #144]	; (800df20 <vTaskStartScheduler+0xcc>)
 800de8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800de90:	4b23      	ldr	r3, [pc, #140]	; (800df20 <vTaskStartScheduler+0xcc>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d002      	beq.n	800de9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800de98:	2301      	movs	r3, #1
 800de9a:	617b      	str	r3, [r7, #20]
 800de9c:	e001      	b.n	800dea2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800de9e:	2300      	movs	r3, #0
 800dea0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d102      	bne.n	800deae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dea8:	f000 fe30 	bl	800eb0c <xTimerCreateTimerTask>
 800deac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	d11e      	bne.n	800def2 <vTaskStartScheduler+0x9e>
	__asm volatile
 800deb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb8:	f383 8811 	msr	BASEPRI, r3
 800debc:	f3bf 8f6f 	isb	sy
 800dec0:	f3bf 8f4f 	dsb	sy
 800dec4:	613b      	str	r3, [r7, #16]
}
 800dec6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dec8:	4b16      	ldr	r3, [pc, #88]	; (800df24 <vTaskStartScheduler+0xd0>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ded0:	4a15      	ldr	r2, [pc, #84]	; (800df28 <vTaskStartScheduler+0xd4>)
 800ded2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ded4:	4b15      	ldr	r3, [pc, #84]	; (800df2c <vTaskStartScheduler+0xd8>)
 800ded6:	f04f 32ff 	mov.w	r2, #4294967295
 800deda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dedc:	4b14      	ldr	r3, [pc, #80]	; (800df30 <vTaskStartScheduler+0xdc>)
 800dede:	2201      	movs	r2, #1
 800dee0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dee2:	4b14      	ldr	r3, [pc, #80]	; (800df34 <vTaskStartScheduler+0xe0>)
 800dee4:	2200      	movs	r2, #0
 800dee6:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800dee8:	f7f3 fca8 	bl	800183c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800deec:	f7fe fe18 	bl	800cb20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800def0:	e00e      	b.n	800df10 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800def8:	d10a      	bne.n	800df10 <vTaskStartScheduler+0xbc>
	__asm volatile
 800defa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defe:	f383 8811 	msr	BASEPRI, r3
 800df02:	f3bf 8f6f 	isb	sy
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	60fb      	str	r3, [r7, #12]
}
 800df0c:	bf00      	nop
 800df0e:	e7fe      	b.n	800df0e <vTaskStartScheduler+0xba>
}
 800df10:	bf00      	nop
 800df12:	3718      	adds	r7, #24
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	08011010 	.word	0x08011010
 800df1c:	0800e6cd 	.word	0x0800e6cd
 800df20:	200055cc 	.word	0x200055cc
 800df24:	200050d0 	.word	0x200050d0
 800df28:	20000014 	.word	0x20000014
 800df2c:	200055c8 	.word	0x200055c8
 800df30:	200055b4 	.word	0x200055b4
 800df34:	200055ac 	.word	0x200055ac

0800df38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800df38:	b480      	push	{r7}
 800df3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800df3c:	4b04      	ldr	r3, [pc, #16]	; (800df50 <vTaskSuspendAll+0x18>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	3301      	adds	r3, #1
 800df42:	4a03      	ldr	r2, [pc, #12]	; (800df50 <vTaskSuspendAll+0x18>)
 800df44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800df46:	bf00      	nop
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr
 800df50:	200055d0 	.word	0x200055d0

0800df54 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800df5a:	2300      	movs	r3, #0
 800df5c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800df5e:	4b14      	ldr	r3, [pc, #80]	; (800dfb0 <prvGetExpectedIdleTime+0x5c>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d001      	beq.n	800df6a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800df66:	2301      	movs	r3, #1
 800df68:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800df6a:	4b12      	ldr	r3, [pc, #72]	; (800dfb4 <prvGetExpectedIdleTime+0x60>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df70:	2b00      	cmp	r3, #0
 800df72:	d002      	beq.n	800df7a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800df74:	2300      	movs	r3, #0
 800df76:	607b      	str	r3, [r7, #4]
 800df78:	e012      	b.n	800dfa0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800df7a:	4b0f      	ldr	r3, [pc, #60]	; (800dfb8 <prvGetExpectedIdleTime+0x64>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	2b01      	cmp	r3, #1
 800df80:	d902      	bls.n	800df88 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800df82:	2300      	movs	r3, #0
 800df84:	607b      	str	r3, [r7, #4]
 800df86:	e00b      	b.n	800dfa0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d002      	beq.n	800df94 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800df8e:	2300      	movs	r3, #0
 800df90:	607b      	str	r3, [r7, #4]
 800df92:	e005      	b.n	800dfa0 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800df94:	4b09      	ldr	r3, [pc, #36]	; (800dfbc <prvGetExpectedIdleTime+0x68>)
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	4b09      	ldr	r3, [pc, #36]	; (800dfc0 <prvGetExpectedIdleTime+0x6c>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	1ad3      	subs	r3, r2, r3
 800df9e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800dfa0:	687b      	ldr	r3, [r7, #4]
	}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	370c      	adds	r7, #12
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr
 800dfae:	bf00      	nop
 800dfb0:	200055b0 	.word	0x200055b0
 800dfb4:	200050d0 	.word	0x200050d0
 800dfb8:	200050d4 	.word	0x200050d4
 800dfbc:	200055c8 	.word	0x200055c8
 800dfc0:	200055ac 	.word	0x200055ac

0800dfc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dfd2:	4b42      	ldr	r3, [pc, #264]	; (800e0dc <xTaskResumeAll+0x118>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d10a      	bne.n	800dff0 <xTaskResumeAll+0x2c>
	__asm volatile
 800dfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfde:	f383 8811 	msr	BASEPRI, r3
 800dfe2:	f3bf 8f6f 	isb	sy
 800dfe6:	f3bf 8f4f 	dsb	sy
 800dfea:	603b      	str	r3, [r7, #0]
}
 800dfec:	bf00      	nop
 800dfee:	e7fe      	b.n	800dfee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dff0:	f7fe fe38 	bl	800cc64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dff4:	4b39      	ldr	r3, [pc, #228]	; (800e0dc <xTaskResumeAll+0x118>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	3b01      	subs	r3, #1
 800dffa:	4a38      	ldr	r2, [pc, #224]	; (800e0dc <xTaskResumeAll+0x118>)
 800dffc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dffe:	4b37      	ldr	r3, [pc, #220]	; (800e0dc <xTaskResumeAll+0x118>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d162      	bne.n	800e0cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e006:	4b36      	ldr	r3, [pc, #216]	; (800e0e0 <xTaskResumeAll+0x11c>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d05e      	beq.n	800e0cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e00e:	e02f      	b.n	800e070 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e010:	4b34      	ldr	r3, [pc, #208]	; (800e0e4 <xTaskResumeAll+0x120>)
 800e012:	68db      	ldr	r3, [r3, #12]
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	3318      	adds	r3, #24
 800e01c:	4618      	mov	r0, r3
 800e01e:	f7fe fccb 	bl	800c9b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	3304      	adds	r3, #4
 800e026:	4618      	mov	r0, r3
 800e028:	f7fe fcc6 	bl	800c9b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e030:	4b2d      	ldr	r3, [pc, #180]	; (800e0e8 <xTaskResumeAll+0x124>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	429a      	cmp	r2, r3
 800e036:	d903      	bls.n	800e040 <xTaskResumeAll+0x7c>
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e03c:	4a2a      	ldr	r2, [pc, #168]	; (800e0e8 <xTaskResumeAll+0x124>)
 800e03e:	6013      	str	r3, [r2, #0]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e044:	4613      	mov	r3, r2
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	4413      	add	r3, r2
 800e04a:	009b      	lsls	r3, r3, #2
 800e04c:	4a27      	ldr	r2, [pc, #156]	; (800e0ec <xTaskResumeAll+0x128>)
 800e04e:	441a      	add	r2, r3
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	3304      	adds	r3, #4
 800e054:	4619      	mov	r1, r3
 800e056:	4610      	mov	r0, r2
 800e058:	f7fe fc51 	bl	800c8fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e060:	4b23      	ldr	r3, [pc, #140]	; (800e0f0 <xTaskResumeAll+0x12c>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e066:	429a      	cmp	r2, r3
 800e068:	d302      	bcc.n	800e070 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e06a:	4b22      	ldr	r3, [pc, #136]	; (800e0f4 <xTaskResumeAll+0x130>)
 800e06c:	2201      	movs	r2, #1
 800e06e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e070:	4b1c      	ldr	r3, [pc, #112]	; (800e0e4 <xTaskResumeAll+0x120>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d1cb      	bne.n	800e010 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d001      	beq.n	800e082 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e07e:	f000 fc39 	bl	800e8f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e082:	4b1d      	ldr	r3, [pc, #116]	; (800e0f8 <xTaskResumeAll+0x134>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d010      	beq.n	800e0b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e08e:	f000 f86f 	bl	800e170 <xTaskIncrementTick>
 800e092:	4603      	mov	r3, r0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d002      	beq.n	800e09e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e098:	4b16      	ldr	r3, [pc, #88]	; (800e0f4 <xTaskResumeAll+0x130>)
 800e09a:	2201      	movs	r2, #1
 800e09c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d1f1      	bne.n	800e08e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e0aa:	4b13      	ldr	r3, [pc, #76]	; (800e0f8 <xTaskResumeAll+0x134>)
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e0b0:	4b10      	ldr	r3, [pc, #64]	; (800e0f4 <xTaskResumeAll+0x130>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d009      	beq.n	800e0cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e0bc:	4b0f      	ldr	r3, [pc, #60]	; (800e0fc <xTaskResumeAll+0x138>)
 800e0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0c2:	601a      	str	r2, [r3, #0]
 800e0c4:	f3bf 8f4f 	dsb	sy
 800e0c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e0cc:	f7fe fdfa 	bl	800ccc4 <vPortExitCritical>

	return xAlreadyYielded;
 800e0d0:	68bb      	ldr	r3, [r7, #8]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	200055d0 	.word	0x200055d0
 800e0e0:	200055a8 	.word	0x200055a8
 800e0e4:	20005564 	.word	0x20005564
 800e0e8:	200055b0 	.word	0x200055b0
 800e0ec:	200050d4 	.word	0x200050d4
 800e0f0:	200050d0 	.word	0x200050d0
 800e0f4:	200055bc 	.word	0x200055bc
 800e0f8:	200055b8 	.word	0x200055b8
 800e0fc:	e000ed04 	.word	0xe000ed04

0800e100 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e106:	4b05      	ldr	r3, [pc, #20]	; (800e11c <xTaskGetTickCount+0x1c>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e10c:	687b      	ldr	r3, [r7, #4]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	370c      	adds	r7, #12
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr
 800e11a:	bf00      	nop
 800e11c:	200055ac 	.word	0x200055ac

0800e120 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800e120:	b480      	push	{r7}
 800e122:	b085      	sub	sp, #20
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800e128:	4b0f      	ldr	r3, [pc, #60]	; (800e168 <vTaskStepTick+0x48>)
 800e12a:	681a      	ldr	r2, [r3, #0]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	441a      	add	r2, r3
 800e130:	4b0e      	ldr	r3, [pc, #56]	; (800e16c <vTaskStepTick+0x4c>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	429a      	cmp	r2, r3
 800e136:	d90a      	bls.n	800e14e <vTaskStepTick+0x2e>
	__asm volatile
 800e138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13c:	f383 8811 	msr	BASEPRI, r3
 800e140:	f3bf 8f6f 	isb	sy
 800e144:	f3bf 8f4f 	dsb	sy
 800e148:	60fb      	str	r3, [r7, #12]
}
 800e14a:	bf00      	nop
 800e14c:	e7fe      	b.n	800e14c <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800e14e:	4b06      	ldr	r3, [pc, #24]	; (800e168 <vTaskStepTick+0x48>)
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	4413      	add	r3, r2
 800e156:	4a04      	ldr	r2, [pc, #16]	; (800e168 <vTaskStepTick+0x48>)
 800e158:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800e15a:	bf00      	nop
 800e15c:	3714      	adds	r7, #20
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr
 800e166:	bf00      	nop
 800e168:	200055ac 	.word	0x200055ac
 800e16c:	200055c8 	.word	0x200055c8

0800e170 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e176:	2300      	movs	r3, #0
 800e178:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e17a:	4b53      	ldr	r3, [pc, #332]	; (800e2c8 <xTaskIncrementTick+0x158>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	f040 8095 	bne.w	800e2ae <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e184:	4b51      	ldr	r3, [pc, #324]	; (800e2cc <xTaskIncrementTick+0x15c>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	3301      	adds	r3, #1
 800e18a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e18c:	4a4f      	ldr	r2, [pc, #316]	; (800e2cc <xTaskIncrementTick+0x15c>)
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d120      	bne.n	800e1da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e198:	4b4d      	ldr	r3, [pc, #308]	; (800e2d0 <xTaskIncrementTick+0x160>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d00a      	beq.n	800e1b8 <xTaskIncrementTick+0x48>
	__asm volatile
 800e1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a6:	f383 8811 	msr	BASEPRI, r3
 800e1aa:	f3bf 8f6f 	isb	sy
 800e1ae:	f3bf 8f4f 	dsb	sy
 800e1b2:	603b      	str	r3, [r7, #0]
}
 800e1b4:	bf00      	nop
 800e1b6:	e7fe      	b.n	800e1b6 <xTaskIncrementTick+0x46>
 800e1b8:	4b45      	ldr	r3, [pc, #276]	; (800e2d0 <xTaskIncrementTick+0x160>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	60fb      	str	r3, [r7, #12]
 800e1be:	4b45      	ldr	r3, [pc, #276]	; (800e2d4 <xTaskIncrementTick+0x164>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	4a43      	ldr	r2, [pc, #268]	; (800e2d0 <xTaskIncrementTick+0x160>)
 800e1c4:	6013      	str	r3, [r2, #0]
 800e1c6:	4a43      	ldr	r2, [pc, #268]	; (800e2d4 <xTaskIncrementTick+0x164>)
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	6013      	str	r3, [r2, #0]
 800e1cc:	4b42      	ldr	r3, [pc, #264]	; (800e2d8 <xTaskIncrementTick+0x168>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	4a41      	ldr	r2, [pc, #260]	; (800e2d8 <xTaskIncrementTick+0x168>)
 800e1d4:	6013      	str	r3, [r2, #0]
 800e1d6:	f000 fb8d 	bl	800e8f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e1da:	4b40      	ldr	r3, [pc, #256]	; (800e2dc <xTaskIncrementTick+0x16c>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	693a      	ldr	r2, [r7, #16]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d349      	bcc.n	800e278 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1e4:	4b3a      	ldr	r3, [pc, #232]	; (800e2d0 <xTaskIncrementTick+0x160>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d104      	bne.n	800e1f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1ee:	4b3b      	ldr	r3, [pc, #236]	; (800e2dc <xTaskIncrementTick+0x16c>)
 800e1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1f4:	601a      	str	r2, [r3, #0]
					break;
 800e1f6:	e03f      	b.n	800e278 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1f8:	4b35      	ldr	r3, [pc, #212]	; (800e2d0 <xTaskIncrementTick+0x160>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	68db      	ldr	r3, [r3, #12]
 800e1fe:	68db      	ldr	r3, [r3, #12]
 800e200:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e208:	693a      	ldr	r2, [r7, #16]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d203      	bcs.n	800e218 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e210:	4a32      	ldr	r2, [pc, #200]	; (800e2dc <xTaskIncrementTick+0x16c>)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e216:	e02f      	b.n	800e278 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	3304      	adds	r3, #4
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7fe fbcb 	bl	800c9b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e226:	2b00      	cmp	r3, #0
 800e228:	d004      	beq.n	800e234 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	3318      	adds	r3, #24
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fe fbc2 	bl	800c9b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e238:	4b29      	ldr	r3, [pc, #164]	; (800e2e0 <xTaskIncrementTick+0x170>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d903      	bls.n	800e248 <xTaskIncrementTick+0xd8>
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e244:	4a26      	ldr	r2, [pc, #152]	; (800e2e0 <xTaskIncrementTick+0x170>)
 800e246:	6013      	str	r3, [r2, #0]
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e24c:	4613      	mov	r3, r2
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	4413      	add	r3, r2
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	4a23      	ldr	r2, [pc, #140]	; (800e2e4 <xTaskIncrementTick+0x174>)
 800e256:	441a      	add	r2, r3
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	3304      	adds	r3, #4
 800e25c:	4619      	mov	r1, r3
 800e25e:	4610      	mov	r0, r2
 800e260:	f7fe fb4d 	bl	800c8fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e268:	4b1f      	ldr	r3, [pc, #124]	; (800e2e8 <xTaskIncrementTick+0x178>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e26e:	429a      	cmp	r2, r3
 800e270:	d3b8      	bcc.n	800e1e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e272:	2301      	movs	r3, #1
 800e274:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e276:	e7b5      	b.n	800e1e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e278:	4b1b      	ldr	r3, [pc, #108]	; (800e2e8 <xTaskIncrementTick+0x178>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e27e:	4919      	ldr	r1, [pc, #100]	; (800e2e4 <xTaskIncrementTick+0x174>)
 800e280:	4613      	mov	r3, r2
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	4413      	add	r3, r2
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	440b      	add	r3, r1
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d901      	bls.n	800e294 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e290:	2301      	movs	r3, #1
 800e292:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800e294:	4b15      	ldr	r3, [pc, #84]	; (800e2ec <xTaskIncrementTick+0x17c>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d101      	bne.n	800e2a0 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800e29c:	f7f3 fae4 	bl	8001868 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e2a0:	4b13      	ldr	r3, [pc, #76]	; (800e2f0 <xTaskIncrementTick+0x180>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d009      	beq.n	800e2bc <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	617b      	str	r3, [r7, #20]
 800e2ac:	e006      	b.n	800e2bc <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e2ae:	4b0f      	ldr	r3, [pc, #60]	; (800e2ec <xTaskIncrementTick+0x17c>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	4a0d      	ldr	r2, [pc, #52]	; (800e2ec <xTaskIncrementTick+0x17c>)
 800e2b6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800e2b8:	f7f3 fad6 	bl	8001868 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800e2bc:	697b      	ldr	r3, [r7, #20]
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3718      	adds	r7, #24
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	200055d0 	.word	0x200055d0
 800e2cc:	200055ac 	.word	0x200055ac
 800e2d0:	2000555c 	.word	0x2000555c
 800e2d4:	20005560 	.word	0x20005560
 800e2d8:	200055c0 	.word	0x200055c0
 800e2dc:	200055c8 	.word	0x200055c8
 800e2e0:	200055b0 	.word	0x200055b0
 800e2e4:	200050d4 	.word	0x200050d4
 800e2e8:	200050d0 	.word	0x200050d0
 800e2ec:	200055b8 	.word	0x200055b8
 800e2f0:	200055bc 	.word	0x200055bc

0800e2f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e2fa:	4b46      	ldr	r3, [pc, #280]	; (800e414 <vTaskSwitchContext+0x120>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d003      	beq.n	800e30a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e302:	4b45      	ldr	r3, [pc, #276]	; (800e418 <vTaskSwitchContext+0x124>)
 800e304:	2201      	movs	r2, #1
 800e306:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e308:	e07f      	b.n	800e40a <vTaskSwitchContext+0x116>
		xYieldPending = pdFALSE;
 800e30a:	4b43      	ldr	r3, [pc, #268]	; (800e418 <vTaskSwitchContext+0x124>)
 800e30c:	2200      	movs	r2, #0
 800e30e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e310:	f7f3 fa9b 	bl	800184a <getRunTimeCounterValue>
 800e314:	4603      	mov	r3, r0
 800e316:	4a41      	ldr	r2, [pc, #260]	; (800e41c <vTaskSwitchContext+0x128>)
 800e318:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e31a:	4b40      	ldr	r3, [pc, #256]	; (800e41c <vTaskSwitchContext+0x128>)
 800e31c:	681a      	ldr	r2, [r3, #0]
 800e31e:	4b40      	ldr	r3, [pc, #256]	; (800e420 <vTaskSwitchContext+0x12c>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	429a      	cmp	r2, r3
 800e324:	d90b      	bls.n	800e33e <vTaskSwitchContext+0x4a>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e326:	4b3f      	ldr	r3, [pc, #252]	; (800e424 <vTaskSwitchContext+0x130>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
 800e32e:	4a3b      	ldr	r2, [pc, #236]	; (800e41c <vTaskSwitchContext+0x128>)
 800e330:	6810      	ldr	r0, [r2, #0]
 800e332:	4a3b      	ldr	r2, [pc, #236]	; (800e420 <vTaskSwitchContext+0x12c>)
 800e334:	6812      	ldr	r2, [r2, #0]
 800e336:	1a82      	subs	r2, r0, r2
 800e338:	440a      	add	r2, r1
 800e33a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e33e:	4b37      	ldr	r3, [pc, #220]	; (800e41c <vTaskSwitchContext+0x128>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	4a37      	ldr	r2, [pc, #220]	; (800e420 <vTaskSwitchContext+0x12c>)
 800e344:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e346:	4b37      	ldr	r3, [pc, #220]	; (800e424 <vTaskSwitchContext+0x130>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	681a      	ldr	r2, [r3, #0]
 800e34c:	4b35      	ldr	r3, [pc, #212]	; (800e424 <vTaskSwitchContext+0x130>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e352:	429a      	cmp	r2, r3
 800e354:	d808      	bhi.n	800e368 <vTaskSwitchContext+0x74>
 800e356:	4b33      	ldr	r3, [pc, #204]	; (800e424 <vTaskSwitchContext+0x130>)
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	4b32      	ldr	r3, [pc, #200]	; (800e424 <vTaskSwitchContext+0x130>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	3334      	adds	r3, #52	; 0x34
 800e360:	4619      	mov	r1, r3
 800e362:	4610      	mov	r0, r2
 800e364:	f7f3 fa87 	bl	8001876 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800e368:	4b2e      	ldr	r3, [pc, #184]	; (800e424 <vTaskSwitchContext+0x130>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a2e      	ldr	r2, [pc, #184]	; (800e428 <vTaskSwitchContext+0x134>)
 800e36e:	6812      	ldr	r2, [r2, #0]
 800e370:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e374:	4b2d      	ldr	r3, [pc, #180]	; (800e42c <vTaskSwitchContext+0x138>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	60fb      	str	r3, [r7, #12]
 800e37a:	e010      	b.n	800e39e <vTaskSwitchContext+0xaa>
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d10a      	bne.n	800e398 <vTaskSwitchContext+0xa4>
	__asm volatile
 800e382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e386:	f383 8811 	msr	BASEPRI, r3
 800e38a:	f3bf 8f6f 	isb	sy
 800e38e:	f3bf 8f4f 	dsb	sy
 800e392:	607b      	str	r3, [r7, #4]
}
 800e394:	bf00      	nop
 800e396:	e7fe      	b.n	800e396 <vTaskSwitchContext+0xa2>
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	3b01      	subs	r3, #1
 800e39c:	60fb      	str	r3, [r7, #12]
 800e39e:	4924      	ldr	r1, [pc, #144]	; (800e430 <vTaskSwitchContext+0x13c>)
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	4613      	mov	r3, r2
 800e3a4:	009b      	lsls	r3, r3, #2
 800e3a6:	4413      	add	r3, r2
 800e3a8:	009b      	lsls	r3, r3, #2
 800e3aa:	440b      	add	r3, r1
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d0e4      	beq.n	800e37c <vTaskSwitchContext+0x88>
 800e3b2:	68fa      	ldr	r2, [r7, #12]
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	4413      	add	r3, r2
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	4a1c      	ldr	r2, [pc, #112]	; (800e430 <vTaskSwitchContext+0x13c>)
 800e3be:	4413      	add	r3, r2
 800e3c0:	60bb      	str	r3, [r7, #8]
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	685a      	ldr	r2, [r3, #4]
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	605a      	str	r2, [r3, #4]
 800e3cc:	68bb      	ldr	r3, [r7, #8]
 800e3ce:	685a      	ldr	r2, [r3, #4]
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	3308      	adds	r3, #8
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d104      	bne.n	800e3e2 <vTaskSwitchContext+0xee>
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	685a      	ldr	r2, [r3, #4]
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	605a      	str	r2, [r3, #4]
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	68db      	ldr	r3, [r3, #12]
 800e3e8:	4a0e      	ldr	r2, [pc, #56]	; (800e424 <vTaskSwitchContext+0x130>)
 800e3ea:	6013      	str	r3, [r2, #0]
 800e3ec:	4a0f      	ldr	r2, [pc, #60]	; (800e42c <vTaskSwitchContext+0x138>)
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800e3f2:	4b0c      	ldr	r3, [pc, #48]	; (800e424 <vTaskSwitchContext+0x130>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800e3fa:	4a0b      	ldr	r2, [pc, #44]	; (800e428 <vTaskSwitchContext+0x134>)
 800e3fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e3fe:	4b09      	ldr	r3, [pc, #36]	; (800e424 <vTaskSwitchContext+0x130>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e406:	4a0b      	ldr	r2, [pc, #44]	; (800e434 <vTaskSwitchContext+0x140>)
 800e408:	6013      	str	r3, [r2, #0]
}
 800e40a:	bf00      	nop
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	200055d0 	.word	0x200055d0
 800e418:	200055bc 	.word	0x200055bc
 800e41c:	200055d8 	.word	0x200055d8
 800e420:	200055d4 	.word	0x200055d4
 800e424:	200050d0 	.word	0x200050d0
 800e428:	200055a4 	.word	0x200055a4
 800e42c:	200055b0 	.word	0x200055b0
 800e430:	200050d4 	.word	0x200050d4
 800e434:	20000014 	.word	0x20000014

0800e438 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d10a      	bne.n	800e45e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44c:	f383 8811 	msr	BASEPRI, r3
 800e450:	f3bf 8f6f 	isb	sy
 800e454:	f3bf 8f4f 	dsb	sy
 800e458:	60fb      	str	r3, [r7, #12]
}
 800e45a:	bf00      	nop
 800e45c:	e7fe      	b.n	800e45c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e45e:	4b07      	ldr	r3, [pc, #28]	; (800e47c <vTaskPlaceOnEventList+0x44>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	3318      	adds	r3, #24
 800e464:	4619      	mov	r1, r3
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f7fe fa6d 	bl	800c946 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e46c:	2101      	movs	r1, #1
 800e46e:	6838      	ldr	r0, [r7, #0]
 800e470:	f000 faf2 	bl	800ea58 <prvAddCurrentTaskToDelayedList>
}
 800e474:	bf00      	nop
 800e476:	3710      	adds	r7, #16
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	200050d0 	.word	0x200050d0

0800e480 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e480:	b580      	push	{r7, lr}
 800e482:	b086      	sub	sp, #24
 800e484:	af00      	add	r7, sp, #0
 800e486:	60f8      	str	r0, [r7, #12]
 800e488:	60b9      	str	r1, [r7, #8]
 800e48a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d10a      	bne.n	800e4a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e496:	f383 8811 	msr	BASEPRI, r3
 800e49a:	f3bf 8f6f 	isb	sy
 800e49e:	f3bf 8f4f 	dsb	sy
 800e4a2:	617b      	str	r3, [r7, #20]
}
 800e4a4:	bf00      	nop
 800e4a6:	e7fe      	b.n	800e4a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e4a8:	4b0a      	ldr	r3, [pc, #40]	; (800e4d4 <vTaskPlaceOnEventListRestricted+0x54>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	3318      	adds	r3, #24
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	68f8      	ldr	r0, [r7, #12]
 800e4b2:	f7fe fa24 	bl	800c8fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d002      	beq.n	800e4c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e4bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e4c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e4c2:	6879      	ldr	r1, [r7, #4]
 800e4c4:	68b8      	ldr	r0, [r7, #8]
 800e4c6:	f000 fac7 	bl	800ea58 <prvAddCurrentTaskToDelayedList>
	}
 800e4ca:	bf00      	nop
 800e4cc:	3718      	adds	r7, #24
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	200050d0 	.word	0x200050d0

0800e4d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b086      	sub	sp, #24
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	68db      	ldr	r3, [r3, #12]
 800e4e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d10a      	bne.n	800e504 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	60fb      	str	r3, [r7, #12]
}
 800e500:	bf00      	nop
 800e502:	e7fe      	b.n	800e502 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	3318      	adds	r3, #24
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fe fa55 	bl	800c9b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e50e:	4b1f      	ldr	r3, [pc, #124]	; (800e58c <xTaskRemoveFromEventList+0xb4>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d11f      	bne.n	800e556 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	3304      	adds	r3, #4
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fe fa4c 	bl	800c9b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e524:	4b1a      	ldr	r3, [pc, #104]	; (800e590 <xTaskRemoveFromEventList+0xb8>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d903      	bls.n	800e534 <xTaskRemoveFromEventList+0x5c>
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e530:	4a17      	ldr	r2, [pc, #92]	; (800e590 <xTaskRemoveFromEventList+0xb8>)
 800e532:	6013      	str	r3, [r2, #0]
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e538:	4613      	mov	r3, r2
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	4413      	add	r3, r2
 800e53e:	009b      	lsls	r3, r3, #2
 800e540:	4a14      	ldr	r2, [pc, #80]	; (800e594 <xTaskRemoveFromEventList+0xbc>)
 800e542:	441a      	add	r2, r3
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	3304      	adds	r3, #4
 800e548:	4619      	mov	r1, r3
 800e54a:	4610      	mov	r0, r2
 800e54c:	f7fe f9d7 	bl	800c8fe <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800e550:	f000 f9d0 	bl	800e8f4 <prvResetNextTaskUnblockTime>
 800e554:	e005      	b.n	800e562 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	3318      	adds	r3, #24
 800e55a:	4619      	mov	r1, r3
 800e55c:	480e      	ldr	r0, [pc, #56]	; (800e598 <xTaskRemoveFromEventList+0xc0>)
 800e55e:	f7fe f9ce 	bl	800c8fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e566:	4b0d      	ldr	r3, [pc, #52]	; (800e59c <xTaskRemoveFromEventList+0xc4>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d905      	bls.n	800e57c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e570:	2301      	movs	r3, #1
 800e572:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e574:	4b0a      	ldr	r3, [pc, #40]	; (800e5a0 <xTaskRemoveFromEventList+0xc8>)
 800e576:	2201      	movs	r2, #1
 800e578:	601a      	str	r2, [r3, #0]
 800e57a:	e001      	b.n	800e580 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800e57c:	2300      	movs	r3, #0
 800e57e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e580:	697b      	ldr	r3, [r7, #20]
}
 800e582:	4618      	mov	r0, r3
 800e584:	3718      	adds	r7, #24
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
 800e58a:	bf00      	nop
 800e58c:	200055d0 	.word	0x200055d0
 800e590:	200055b0 	.word	0x200055b0
 800e594:	200050d4 	.word	0x200050d4
 800e598:	20005564 	.word	0x20005564
 800e59c:	200050d0 	.word	0x200050d0
 800e5a0:	200055bc 	.word	0x200055bc

0800e5a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b083      	sub	sp, #12
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e5ac:	4b06      	ldr	r3, [pc, #24]	; (800e5c8 <vTaskInternalSetTimeOutState+0x24>)
 800e5ae:	681a      	ldr	r2, [r3, #0]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e5b4:	4b05      	ldr	r3, [pc, #20]	; (800e5cc <vTaskInternalSetTimeOutState+0x28>)
 800e5b6:	681a      	ldr	r2, [r3, #0]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	605a      	str	r2, [r3, #4]
}
 800e5bc:	bf00      	nop
 800e5be:	370c      	adds	r7, #12
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c6:	4770      	bx	lr
 800e5c8:	200055c0 	.word	0x200055c0
 800e5cc:	200055ac 	.word	0x200055ac

0800e5d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b088      	sub	sp, #32
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d10a      	bne.n	800e5f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e4:	f383 8811 	msr	BASEPRI, r3
 800e5e8:	f3bf 8f6f 	isb	sy
 800e5ec:	f3bf 8f4f 	dsb	sy
 800e5f0:	613b      	str	r3, [r7, #16]
}
 800e5f2:	bf00      	nop
 800e5f4:	e7fe      	b.n	800e5f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d10a      	bne.n	800e612 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e600:	f383 8811 	msr	BASEPRI, r3
 800e604:	f3bf 8f6f 	isb	sy
 800e608:	f3bf 8f4f 	dsb	sy
 800e60c:	60fb      	str	r3, [r7, #12]
}
 800e60e:	bf00      	nop
 800e610:	e7fe      	b.n	800e610 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e612:	f7fe fb27 	bl	800cc64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e616:	4b24      	ldr	r3, [pc, #144]	; (800e6a8 <xTaskCheckForTimeOut+0xd8>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	69ba      	ldr	r2, [r7, #24]
 800e622:	1ad3      	subs	r3, r2, r3
 800e624:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800e626:	4b21      	ldr	r3, [pc, #132]	; (800e6ac <xTaskCheckForTimeOut+0xdc>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d007      	beq.n	800e642 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800e632:	4b1e      	ldr	r3, [pc, #120]	; (800e6ac <xTaskCheckForTimeOut+0xdc>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	2200      	movs	r2, #0
 800e638:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
				xReturn = pdTRUE;
 800e63c:	2301      	movs	r3, #1
 800e63e:	61fb      	str	r3, [r7, #28]
 800e640:	e02b      	b.n	800e69a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e64a:	d102      	bne.n	800e652 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e64c:	2300      	movs	r3, #0
 800e64e:	61fb      	str	r3, [r7, #28]
 800e650:	e023      	b.n	800e69a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	4b16      	ldr	r3, [pc, #88]	; (800e6b0 <xTaskCheckForTimeOut+0xe0>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d007      	beq.n	800e66e <xTaskCheckForTimeOut+0x9e>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	69ba      	ldr	r2, [r7, #24]
 800e664:	429a      	cmp	r2, r3
 800e666:	d302      	bcc.n	800e66e <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e668:	2301      	movs	r3, #1
 800e66a:	61fb      	str	r3, [r7, #28]
 800e66c:	e015      	b.n	800e69a <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	697a      	ldr	r2, [r7, #20]
 800e674:	429a      	cmp	r2, r3
 800e676:	d20b      	bcs.n	800e690 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	681a      	ldr	r2, [r3, #0]
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	1ad2      	subs	r2, r2, r3
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f7ff ff8d 	bl	800e5a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e68a:	2300      	movs	r3, #0
 800e68c:	61fb      	str	r3, [r7, #28]
 800e68e:	e004      	b.n	800e69a <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	2200      	movs	r2, #0
 800e694:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e696:	2301      	movs	r3, #1
 800e698:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e69a:	f7fe fb13 	bl	800ccc4 <vPortExitCritical>

	return xReturn;
 800e69e:	69fb      	ldr	r3, [r7, #28]
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3720      	adds	r7, #32
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	200055ac 	.word	0x200055ac
 800e6ac:	200050d0 	.word	0x200050d0
 800e6b0:	200055c0 	.word	0x200055c0

0800e6b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e6b8:	4b03      	ldr	r3, [pc, #12]	; (800e6c8 <vTaskMissedYield+0x14>)
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	601a      	str	r2, [r3, #0]
}
 800e6be:	bf00      	nop
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr
 800e6c8:	200055bc 	.word	0x200055bc

0800e6cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e6d4:	f000 f8aa 	bl	800e82c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e6d8:	4b19      	ldr	r3, [pc, #100]	; (800e740 <prvIdleTask+0x74>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	d907      	bls.n	800e6f0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e6e0:	4b18      	ldr	r3, [pc, #96]	; (800e744 <prvIdleTask+0x78>)
 800e6e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6e6:	601a      	str	r2, [r3, #0]
 800e6e8:	f3bf 8f4f 	dsb	sy
 800e6ec:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e6f0:	f7f3 f8b3 	bl	800185a <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800e6f4:	f7ff fc2e 	bl	800df54 <prvGetExpectedIdleTime>
 800e6f8:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2b01      	cmp	r3, #1
 800e6fe:	d9e9      	bls.n	800e6d4 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800e700:	f7ff fc1a 	bl	800df38 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800e704:	4b10      	ldr	r3, [pc, #64]	; (800e748 <prvIdleTask+0x7c>)
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	4b10      	ldr	r3, [pc, #64]	; (800e74c <prvIdleTask+0x80>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d20a      	bcs.n	800e726 <prvIdleTask+0x5a>
	__asm volatile
 800e710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e714:	f383 8811 	msr	BASEPRI, r3
 800e718:	f3bf 8f6f 	isb	sy
 800e71c:	f3bf 8f4f 	dsb	sy
 800e720:	60bb      	str	r3, [r7, #8]
}
 800e722:	bf00      	nop
 800e724:	e7fe      	b.n	800e724 <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800e726:	f7ff fc15 	bl	800df54 <prvGetExpectedIdleTime>
 800e72a:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2b01      	cmp	r3, #1
 800e730:	d902      	bls.n	800e738 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	f7fe fb4a 	bl	800cdcc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800e738:	f7ff fc44 	bl	800dfc4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800e73c:	e7ca      	b.n	800e6d4 <prvIdleTask+0x8>
 800e73e:	bf00      	nop
 800e740:	200050d4 	.word	0x200050d4
 800e744:	e000ed04 	.word	0xe000ed04
 800e748:	200055c8 	.word	0x200055c8
 800e74c:	200055ac 	.word	0x200055ac

0800e750 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800e756:	2301      	movs	r3, #1
 800e758:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800e75a:	2301      	movs	r3, #1
 800e75c:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800e75e:	4b0f      	ldr	r3, [pc, #60]	; (800e79c <eTaskConfirmSleepModeStatus+0x4c>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d002      	beq.n	800e76c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800e766:	2300      	movs	r3, #0
 800e768:	71fb      	strb	r3, [r7, #7]
 800e76a:	e010      	b.n	800e78e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800e76c:	4b0c      	ldr	r3, [pc, #48]	; (800e7a0 <eTaskConfirmSleepModeStatus+0x50>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d002      	beq.n	800e77a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800e774:	2300      	movs	r3, #0
 800e776:	71fb      	strb	r3, [r7, #7]
 800e778:	e009      	b.n	800e78e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800e77a:	4b0a      	ldr	r3, [pc, #40]	; (800e7a4 <eTaskConfirmSleepModeStatus+0x54>)
 800e77c:	681a      	ldr	r2, [r3, #0]
 800e77e:	4b0a      	ldr	r3, [pc, #40]	; (800e7a8 <eTaskConfirmSleepModeStatus+0x58>)
 800e780:	6819      	ldr	r1, [r3, #0]
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	1acb      	subs	r3, r1, r3
 800e786:	429a      	cmp	r2, r3
 800e788:	d101      	bne.n	800e78e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800e78a:	2302      	movs	r3, #2
 800e78c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800e78e:	79fb      	ldrb	r3, [r7, #7]
	}
 800e790:	4618      	mov	r0, r3
 800e792:	370c      	adds	r7, #12
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr
 800e79c:	20005564 	.word	0x20005564
 800e7a0:	200055bc 	.word	0x200055bc
 800e7a4:	20005590 	.word	0x20005590
 800e7a8:	200055a8 	.word	0x200055a8

0800e7ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	607b      	str	r3, [r7, #4]
 800e7b6:	e00c      	b.n	800e7d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e7b8:	687a      	ldr	r2, [r7, #4]
 800e7ba:	4613      	mov	r3, r2
 800e7bc:	009b      	lsls	r3, r3, #2
 800e7be:	4413      	add	r3, r2
 800e7c0:	009b      	lsls	r3, r3, #2
 800e7c2:	4a12      	ldr	r2, [pc, #72]	; (800e80c <prvInitialiseTaskLists+0x60>)
 800e7c4:	4413      	add	r3, r2
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f7fe f86c 	bl	800c8a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	607b      	str	r3, [r7, #4]
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2b37      	cmp	r3, #55	; 0x37
 800e7d6:	d9ef      	bls.n	800e7b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e7d8:	480d      	ldr	r0, [pc, #52]	; (800e810 <prvInitialiseTaskLists+0x64>)
 800e7da:	f7fe f863 	bl	800c8a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e7de:	480d      	ldr	r0, [pc, #52]	; (800e814 <prvInitialiseTaskLists+0x68>)
 800e7e0:	f7fe f860 	bl	800c8a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e7e4:	480c      	ldr	r0, [pc, #48]	; (800e818 <prvInitialiseTaskLists+0x6c>)
 800e7e6:	f7fe f85d 	bl	800c8a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e7ea:	480c      	ldr	r0, [pc, #48]	; (800e81c <prvInitialiseTaskLists+0x70>)
 800e7ec:	f7fe f85a 	bl	800c8a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e7f0:	480b      	ldr	r0, [pc, #44]	; (800e820 <prvInitialiseTaskLists+0x74>)
 800e7f2:	f7fe f857 	bl	800c8a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e7f6:	4b0b      	ldr	r3, [pc, #44]	; (800e824 <prvInitialiseTaskLists+0x78>)
 800e7f8:	4a05      	ldr	r2, [pc, #20]	; (800e810 <prvInitialiseTaskLists+0x64>)
 800e7fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e7fc:	4b0a      	ldr	r3, [pc, #40]	; (800e828 <prvInitialiseTaskLists+0x7c>)
 800e7fe:	4a05      	ldr	r2, [pc, #20]	; (800e814 <prvInitialiseTaskLists+0x68>)
 800e800:	601a      	str	r2, [r3, #0]
}
 800e802:	bf00      	nop
 800e804:	3708      	adds	r7, #8
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	200050d4 	.word	0x200050d4
 800e810:	20005534 	.word	0x20005534
 800e814:	20005548 	.word	0x20005548
 800e818:	20005564 	.word	0x20005564
 800e81c:	20005578 	.word	0x20005578
 800e820:	20005590 	.word	0x20005590
 800e824:	2000555c 	.word	0x2000555c
 800e828:	20005560 	.word	0x20005560

0800e82c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e832:	e019      	b.n	800e868 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e834:	f7fe fa16 	bl	800cc64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e838:	4b10      	ldr	r3, [pc, #64]	; (800e87c <prvCheckTasksWaitingTermination+0x50>)
 800e83a:	68db      	ldr	r3, [r3, #12]
 800e83c:	68db      	ldr	r3, [r3, #12]
 800e83e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	3304      	adds	r3, #4
 800e844:	4618      	mov	r0, r3
 800e846:	f7fe f8b7 	bl	800c9b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e84a:	4b0d      	ldr	r3, [pc, #52]	; (800e880 <prvCheckTasksWaitingTermination+0x54>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	3b01      	subs	r3, #1
 800e850:	4a0b      	ldr	r2, [pc, #44]	; (800e880 <prvCheckTasksWaitingTermination+0x54>)
 800e852:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e854:	4b0b      	ldr	r3, [pc, #44]	; (800e884 <prvCheckTasksWaitingTermination+0x58>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	3b01      	subs	r3, #1
 800e85a:	4a0a      	ldr	r2, [pc, #40]	; (800e884 <prvCheckTasksWaitingTermination+0x58>)
 800e85c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e85e:	f7fe fa31 	bl	800ccc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f000 f810 	bl	800e888 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e868:	4b06      	ldr	r3, [pc, #24]	; (800e884 <prvCheckTasksWaitingTermination+0x58>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d1e1      	bne.n	800e834 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e870:	bf00      	nop
 800e872:	bf00      	nop
 800e874:	3708      	adds	r7, #8
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	20005578 	.word	0x20005578
 800e880:	200055a8 	.word	0x200055a8
 800e884:	2000558c 	.word	0x2000558c

0800e888 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e896:	4618      	mov	r0, r3
 800e898:	f001 f930 	bl	800fafc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d108      	bne.n	800e8b8 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7fd ffe2 	bl	800c874 <vPortFree>
				vPortFree( pxTCB );
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f7fd ffdf 	bl	800c874 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e8b6:	e018      	b.n	800e8ea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	d103      	bne.n	800e8ca <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f7fd ffd6 	bl	800c874 <vPortFree>
	}
 800e8c8:	e00f      	b.n	800e8ea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f893 31b5 	ldrb.w	r3, [r3, #437]	; 0x1b5
 800e8d0:	2b02      	cmp	r3, #2
 800e8d2:	d00a      	beq.n	800e8ea <prvDeleteTCB+0x62>
	__asm volatile
 800e8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d8:	f383 8811 	msr	BASEPRI, r3
 800e8dc:	f3bf 8f6f 	isb	sy
 800e8e0:	f3bf 8f4f 	dsb	sy
 800e8e4:	60fb      	str	r3, [r7, #12]
}
 800e8e6:	bf00      	nop
 800e8e8:	e7fe      	b.n	800e8e8 <prvDeleteTCB+0x60>
	}
 800e8ea:	bf00      	nop
 800e8ec:	3710      	adds	r7, #16
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}
	...

0800e8f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b083      	sub	sp, #12
 800e8f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8fa:	4b0c      	ldr	r3, [pc, #48]	; (800e92c <prvResetNextTaskUnblockTime+0x38>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d104      	bne.n	800e90e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e904:	4b0a      	ldr	r3, [pc, #40]	; (800e930 <prvResetNextTaskUnblockTime+0x3c>)
 800e906:	f04f 32ff 	mov.w	r2, #4294967295
 800e90a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e90c:	e008      	b.n	800e920 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e90e:	4b07      	ldr	r3, [pc, #28]	; (800e92c <prvResetNextTaskUnblockTime+0x38>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	68db      	ldr	r3, [r3, #12]
 800e914:	68db      	ldr	r3, [r3, #12]
 800e916:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	685b      	ldr	r3, [r3, #4]
 800e91c:	4a04      	ldr	r2, [pc, #16]	; (800e930 <prvResetNextTaskUnblockTime+0x3c>)
 800e91e:	6013      	str	r3, [r2, #0]
}
 800e920:	bf00      	nop
 800e922:	370c      	adds	r7, #12
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr
 800e92c:	2000555c 	.word	0x2000555c
 800e930:	200055c8 	.word	0x200055c8

0800e934 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e93a:	4b0b      	ldr	r3, [pc, #44]	; (800e968 <xTaskGetSchedulerState+0x34>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d102      	bne.n	800e948 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e942:	2301      	movs	r3, #1
 800e944:	607b      	str	r3, [r7, #4]
 800e946:	e008      	b.n	800e95a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e948:	4b08      	ldr	r3, [pc, #32]	; (800e96c <xTaskGetSchedulerState+0x38>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d102      	bne.n	800e956 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e950:	2302      	movs	r3, #2
 800e952:	607b      	str	r3, [r7, #4]
 800e954:	e001      	b.n	800e95a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e956:	2300      	movs	r3, #0
 800e958:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e95a:	687b      	ldr	r3, [r7, #4]
	}
 800e95c:	4618      	mov	r0, r3
 800e95e:	370c      	adds	r7, #12
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr
 800e968:	200055b4 	.word	0x200055b4
 800e96c:	200055d0 	.word	0x200055d0

0800e970 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e970:	b580      	push	{r7, lr}
 800e972:	b086      	sub	sp, #24
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e97c:	2300      	movs	r3, #0
 800e97e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d05c      	beq.n	800ea40 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e986:	4b31      	ldr	r3, [pc, #196]	; (800ea4c <xTaskPriorityDisinherit+0xdc>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	693a      	ldr	r2, [r7, #16]
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d00a      	beq.n	800e9a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e994:	f383 8811 	msr	BASEPRI, r3
 800e998:	f3bf 8f6f 	isb	sy
 800e99c:	f3bf 8f4f 	dsb	sy
 800e9a0:	60fb      	str	r3, [r7, #12]
}
 800e9a2:	bf00      	nop
 800e9a4:	e7fe      	b.n	800e9a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d10a      	bne.n	800e9c6 <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800e9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b4:	f383 8811 	msr	BASEPRI, r3
 800e9b8:	f3bf 8f6f 	isb	sy
 800e9bc:	f3bf 8f4f 	dsb	sy
 800e9c0:	60bb      	str	r3, [r7, #8]
}
 800e9c2:	bf00      	nop
 800e9c4:	e7fe      	b.n	800e9c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800e9cc:	1e5a      	subs	r2, r3, #1
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d02e      	beq.n	800ea40 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d129      	bne.n	800ea40 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	3304      	adds	r3, #4
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7fd ffe1 	bl	800c9b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea10:	4b0f      	ldr	r3, [pc, #60]	; (800ea50 <xTaskPriorityDisinherit+0xe0>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d903      	bls.n	800ea20 <xTaskPriorityDisinherit+0xb0>
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea1c:	4a0c      	ldr	r2, [pc, #48]	; (800ea50 <xTaskPriorityDisinherit+0xe0>)
 800ea1e:	6013      	str	r3, [r2, #0]
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea24:	4613      	mov	r3, r2
 800ea26:	009b      	lsls	r3, r3, #2
 800ea28:	4413      	add	r3, r2
 800ea2a:	009b      	lsls	r3, r3, #2
 800ea2c:	4a09      	ldr	r2, [pc, #36]	; (800ea54 <xTaskPriorityDisinherit+0xe4>)
 800ea2e:	441a      	add	r2, r3
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	3304      	adds	r3, #4
 800ea34:	4619      	mov	r1, r3
 800ea36:	4610      	mov	r0, r2
 800ea38:	f7fd ff61 	bl	800c8fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ea40:	697b      	ldr	r3, [r7, #20]
	}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3718      	adds	r7, #24
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	200050d0 	.word	0x200050d0
 800ea50:	200055b0 	.word	0x200055b0
 800ea54:	200050d4 	.word	0x200050d4

0800ea58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ea62:	4b24      	ldr	r3, [pc, #144]	; (800eaf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800ea68:	4b23      	ldr	r3, [pc, #140]	; (800eaf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea72:	4b21      	ldr	r3, [pc, #132]	; (800eaf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	3304      	adds	r3, #4
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7fd ff9d 	bl	800c9b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea84:	d10a      	bne.n	800ea9c <prvAddCurrentTaskToDelayedList+0x44>
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d007      	beq.n	800ea9c <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ea8c:	4b1a      	ldr	r3, [pc, #104]	; (800eaf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	3304      	adds	r3, #4
 800ea92:	4619      	mov	r1, r3
 800ea94:	4819      	ldr	r0, [pc, #100]	; (800eafc <prvAddCurrentTaskToDelayedList+0xa4>)
 800ea96:	f7fd ff32 	bl	800c8fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ea9a:	e026      	b.n	800eaea <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ea9c:	68fa      	ldr	r2, [r7, #12]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eaa4:	4b14      	ldr	r3, [pc, #80]	; (800eaf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eaac:	68ba      	ldr	r2, [r7, #8]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d209      	bcs.n	800eac8 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eab4:	4b12      	ldr	r3, [pc, #72]	; (800eb00 <prvAddCurrentTaskToDelayedList+0xa8>)
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	4b0f      	ldr	r3, [pc, #60]	; (800eaf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	3304      	adds	r3, #4
 800eabe:	4619      	mov	r1, r3
 800eac0:	4610      	mov	r0, r2
 800eac2:	f7fd ff40 	bl	800c946 <vListInsert>
}
 800eac6:	e010      	b.n	800eaea <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eac8:	4b0e      	ldr	r3, [pc, #56]	; (800eb04 <prvAddCurrentTaskToDelayedList+0xac>)
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	4b0a      	ldr	r3, [pc, #40]	; (800eaf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	3304      	adds	r3, #4
 800ead2:	4619      	mov	r1, r3
 800ead4:	4610      	mov	r0, r2
 800ead6:	f7fd ff36 	bl	800c946 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eada:	4b0b      	ldr	r3, [pc, #44]	; (800eb08 <prvAddCurrentTaskToDelayedList+0xb0>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	68ba      	ldr	r2, [r7, #8]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d202      	bcs.n	800eaea <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800eae4:	4a08      	ldr	r2, [pc, #32]	; (800eb08 <prvAddCurrentTaskToDelayedList+0xb0>)
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	6013      	str	r3, [r2, #0]
}
 800eaea:	bf00      	nop
 800eaec:	3710      	adds	r7, #16
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	200055ac 	.word	0x200055ac
 800eaf8:	200050d0 	.word	0x200050d0
 800eafc:	20005590 	.word	0x20005590
 800eb00:	20005560 	.word	0x20005560
 800eb04:	2000555c 	.word	0x2000555c
 800eb08:	200055c8 	.word	0x200055c8

0800eb0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b08a      	sub	sp, #40	; 0x28
 800eb10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eb12:	2300      	movs	r3, #0
 800eb14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800eb16:	f000 fba3 	bl	800f260 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800eb1a:	4b1c      	ldr	r3, [pc, #112]	; (800eb8c <xTimerCreateTimerTask+0x80>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d021      	beq.n	800eb66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800eb22:	2300      	movs	r3, #0
 800eb24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eb26:	2300      	movs	r3, #0
 800eb28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eb2a:	1d3a      	adds	r2, r7, #4
 800eb2c:	f107 0108 	add.w	r1, r7, #8
 800eb30:	f107 030c 	add.w	r3, r7, #12
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7fd fde7 	bl	800c708 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eb3a:	6879      	ldr	r1, [r7, #4]
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	68fa      	ldr	r2, [r7, #12]
 800eb40:	9202      	str	r2, [sp, #8]
 800eb42:	9301      	str	r3, [sp, #4]
 800eb44:	2302      	movs	r3, #2
 800eb46:	9300      	str	r3, [sp, #0]
 800eb48:	2300      	movs	r3, #0
 800eb4a:	460a      	mov	r2, r1
 800eb4c:	4910      	ldr	r1, [pc, #64]	; (800eb90 <xTimerCreateTimerTask+0x84>)
 800eb4e:	4811      	ldr	r0, [pc, #68]	; (800eb94 <xTimerCreateTimerTask+0x88>)
 800eb50:	f7fe ff7a 	bl	800da48 <xTaskCreateStatic>
 800eb54:	4603      	mov	r3, r0
 800eb56:	4a10      	ldr	r2, [pc, #64]	; (800eb98 <xTimerCreateTimerTask+0x8c>)
 800eb58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800eb5a:	4b0f      	ldr	r3, [pc, #60]	; (800eb98 <xTimerCreateTimerTask+0x8c>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d001      	beq.n	800eb66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800eb62:	2301      	movs	r3, #1
 800eb64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d10a      	bne.n	800eb82 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800eb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb70:	f383 8811 	msr	BASEPRI, r3
 800eb74:	f3bf 8f6f 	isb	sy
 800eb78:	f3bf 8f4f 	dsb	sy
 800eb7c:	613b      	str	r3, [r7, #16]
}
 800eb7e:	bf00      	nop
 800eb80:	e7fe      	b.n	800eb80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800eb82:	697b      	ldr	r3, [r7, #20]
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3718      	adds	r7, #24
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	2000560c 	.word	0x2000560c
 800eb90:	08011040 	.word	0x08011040
 800eb94:	0800ee05 	.word	0x0800ee05
 800eb98:	20005610 	.word	0x20005610

0800eb9c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b088      	sub	sp, #32
 800eba0:	af02      	add	r7, sp, #8
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	607a      	str	r2, [r7, #4]
 800eba8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ebaa:	202c      	movs	r0, #44	; 0x2c
 800ebac:	f7fd fe18 	bl	800c7e0 <pvPortMalloc>
 800ebb0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d00d      	beq.n	800ebd4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	9301      	str	r3, [sp, #4]
 800ebc4:	6a3b      	ldr	r3, [r7, #32]
 800ebc6:	9300      	str	r3, [sp, #0]
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	68b9      	ldr	r1, [r7, #8]
 800ebce:	68f8      	ldr	r0, [r7, #12]
 800ebd0:	f000 f843 	bl	800ec5a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ebd4:	697b      	ldr	r3, [r7, #20]
	}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3718      	adds	r7, #24
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}

0800ebde <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800ebde:	b580      	push	{r7, lr}
 800ebe0:	b08a      	sub	sp, #40	; 0x28
 800ebe2:	af02      	add	r7, sp, #8
 800ebe4:	60f8      	str	r0, [r7, #12]
 800ebe6:	60b9      	str	r1, [r7, #8]
 800ebe8:	607a      	str	r2, [r7, #4]
 800ebea:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800ebec:	232c      	movs	r3, #44	; 0x2c
 800ebee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	2b2c      	cmp	r3, #44	; 0x2c
 800ebf4:	d00a      	beq.n	800ec0c <xTimerCreateStatic+0x2e>
	__asm volatile
 800ebf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebfa:	f383 8811 	msr	BASEPRI, r3
 800ebfe:	f3bf 8f6f 	isb	sy
 800ec02:	f3bf 8f4f 	dsb	sy
 800ec06:	61bb      	str	r3, [r7, #24]
}
 800ec08:	bf00      	nop
 800ec0a:	e7fe      	b.n	800ec0a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ec0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800ec0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d10a      	bne.n	800ec2a <xTimerCreateStatic+0x4c>
	__asm volatile
 800ec14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec18:	f383 8811 	msr	BASEPRI, r3
 800ec1c:	f3bf 8f6f 	isb	sy
 800ec20:	f3bf 8f4f 	dsb	sy
 800ec24:	617b      	str	r3, [r7, #20]
}
 800ec26:	bf00      	nop
 800ec28:	e7fe      	b.n	800ec28 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800ec2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec2c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800ec2e:	69fb      	ldr	r3, [r7, #28]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d00d      	beq.n	800ec50 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	2202      	movs	r2, #2
 800ec38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ec3c:	69fb      	ldr	r3, [r7, #28]
 800ec3e:	9301      	str	r3, [sp, #4]
 800ec40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec42:	9300      	str	r3, [sp, #0]
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	68b9      	ldr	r1, [r7, #8]
 800ec4a:	68f8      	ldr	r0, [r7, #12]
 800ec4c:	f000 f805 	bl	800ec5a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ec50:	69fb      	ldr	r3, [r7, #28]
	}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3720      	adds	r7, #32
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}

0800ec5a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b086      	sub	sp, #24
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	60f8      	str	r0, [r7, #12]
 800ec62:	60b9      	str	r1, [r7, #8]
 800ec64:	607a      	str	r2, [r7, #4]
 800ec66:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d10a      	bne.n	800ec84 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800ec6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec72:	f383 8811 	msr	BASEPRI, r3
 800ec76:	f3bf 8f6f 	isb	sy
 800ec7a:	f3bf 8f4f 	dsb	sy
 800ec7e:	617b      	str	r3, [r7, #20]
}
 800ec80:	bf00      	nop
 800ec82:	e7fe      	b.n	800ec82 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ec84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d01e      	beq.n	800ecc8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ec8a:	f000 fae9 	bl	800f260 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ec8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec90:	68fa      	ldr	r2, [r7, #12]
 800ec92:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ec94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec96:	68ba      	ldr	r2, [r7, #8]
 800ec98:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ec9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9c:	683a      	ldr	r2, [r7, #0]
 800ec9e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800eca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca2:	6a3a      	ldr	r2, [r7, #32]
 800eca4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800eca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca8:	3304      	adds	r3, #4
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7fd fe1a 	bl	800c8e4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d008      	beq.n	800ecc8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ecb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecbc:	f043 0304 	orr.w	r3, r3, #4
 800ecc0:	b2da      	uxtb	r2, r3
 800ecc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ecc8:	bf00      	nop
 800ecca:	3718      	adds	r7, #24
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b08a      	sub	sp, #40	; 0x28
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	60f8      	str	r0, [r7, #12]
 800ecd8:	60b9      	str	r1, [r7, #8]
 800ecda:	607a      	str	r2, [r7, #4]
 800ecdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ecde:	2300      	movs	r3, #0
 800ece0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d10a      	bne.n	800ecfe <xTimerGenericCommand+0x2e>
	__asm volatile
 800ece8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecec:	f383 8811 	msr	BASEPRI, r3
 800ecf0:	f3bf 8f6f 	isb	sy
 800ecf4:	f3bf 8f4f 	dsb	sy
 800ecf8:	623b      	str	r3, [r7, #32]
}
 800ecfa:	bf00      	nop
 800ecfc:	e7fe      	b.n	800ecfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ecfe:	4b1a      	ldr	r3, [pc, #104]	; (800ed68 <xTimerGenericCommand+0x98>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d02a      	beq.n	800ed5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	2b05      	cmp	r3, #5
 800ed16:	dc18      	bgt.n	800ed4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ed18:	f7ff fe0c 	bl	800e934 <xTaskGetSchedulerState>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	2b02      	cmp	r3, #2
 800ed20:	d109      	bne.n	800ed36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ed22:	4b11      	ldr	r3, [pc, #68]	; (800ed68 <xTimerGenericCommand+0x98>)
 800ed24:	6818      	ldr	r0, [r3, #0]
 800ed26:	f107 0110 	add.w	r1, r7, #16
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed2e:	f7fe faa3 	bl	800d278 <xQueueGenericSend>
 800ed32:	6278      	str	r0, [r7, #36]	; 0x24
 800ed34:	e012      	b.n	800ed5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ed36:	4b0c      	ldr	r3, [pc, #48]	; (800ed68 <xTimerGenericCommand+0x98>)
 800ed38:	6818      	ldr	r0, [r3, #0]
 800ed3a:	f107 0110 	add.w	r1, r7, #16
 800ed3e:	2300      	movs	r3, #0
 800ed40:	2200      	movs	r2, #0
 800ed42:	f7fe fa99 	bl	800d278 <xQueueGenericSend>
 800ed46:	6278      	str	r0, [r7, #36]	; 0x24
 800ed48:	e008      	b.n	800ed5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ed4a:	4b07      	ldr	r3, [pc, #28]	; (800ed68 <xTimerGenericCommand+0x98>)
 800ed4c:	6818      	ldr	r0, [r3, #0]
 800ed4e:	f107 0110 	add.w	r1, r7, #16
 800ed52:	2300      	movs	r3, #0
 800ed54:	683a      	ldr	r2, [r7, #0]
 800ed56:	f7fe fb8d 	bl	800d474 <xQueueGenericSendFromISR>
 800ed5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ed5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3728      	adds	r7, #40	; 0x28
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
 800ed66:	bf00      	nop
 800ed68:	2000560c 	.word	0x2000560c

0800ed6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b088      	sub	sp, #32
 800ed70:	af02      	add	r7, sp, #8
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed76:	4b22      	ldr	r3, [pc, #136]	; (800ee00 <prvProcessExpiredTimer+0x94>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	68db      	ldr	r3, [r3, #12]
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	3304      	adds	r3, #4
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7fd fe17 	bl	800c9b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed90:	f003 0304 	and.w	r3, r3, #4
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d022      	beq.n	800edde <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	699a      	ldr	r2, [r3, #24]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	18d1      	adds	r1, r2, r3
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	683a      	ldr	r2, [r7, #0]
 800eda4:	6978      	ldr	r0, [r7, #20]
 800eda6:	f000 f8d3 	bl	800ef50 <prvInsertTimerInActiveList>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b00      	cmp	r3, #0
 800edae:	d01f      	beq.n	800edf0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800edb0:	2300      	movs	r3, #0
 800edb2:	9300      	str	r3, [sp, #0]
 800edb4:	2300      	movs	r3, #0
 800edb6:	687a      	ldr	r2, [r7, #4]
 800edb8:	2100      	movs	r1, #0
 800edba:	6978      	ldr	r0, [r7, #20]
 800edbc:	f7ff ff88 	bl	800ecd0 <xTimerGenericCommand>
 800edc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d113      	bne.n	800edf0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800edc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edcc:	f383 8811 	msr	BASEPRI, r3
 800edd0:	f3bf 8f6f 	isb	sy
 800edd4:	f3bf 8f4f 	dsb	sy
 800edd8:	60fb      	str	r3, [r7, #12]
}
 800edda:	bf00      	nop
 800eddc:	e7fe      	b.n	800eddc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ede4:	f023 0301 	bic.w	r3, r3, #1
 800ede8:	b2da      	uxtb	r2, r3
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	6a1b      	ldr	r3, [r3, #32]
 800edf4:	6978      	ldr	r0, [r7, #20]
 800edf6:	4798      	blx	r3
}
 800edf8:	bf00      	nop
 800edfa:	3718      	adds	r7, #24
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	20005604 	.word	0x20005604

0800ee04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 800ee0c:	f7f2 fd45 	bl	800189a <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee10:	f107 0308 	add.w	r3, r7, #8
 800ee14:	4618      	mov	r0, r3
 800ee16:	f000 f857 	bl	800eec8 <prvGetNextExpireTime>
 800ee1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	4619      	mov	r1, r3
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	f000 f803 	bl	800ee2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ee26:	f000 f8d5 	bl	800efd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee2a:	e7f1      	b.n	800ee10 <prvTimerTask+0xc>

0800ee2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ee36:	f7ff f87f 	bl	800df38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee3a:	f107 0308 	add.w	r3, r7, #8
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f000 f866 	bl	800ef10 <prvSampleTimeNow>
 800ee44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d130      	bne.n	800eeae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d10a      	bne.n	800ee68 <prvProcessTimerOrBlockTask+0x3c>
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d806      	bhi.n	800ee68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ee5a:	f7ff f8b3 	bl	800dfc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ee5e:	68f9      	ldr	r1, [r7, #12]
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f7ff ff83 	bl	800ed6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ee66:	e024      	b.n	800eeb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d008      	beq.n	800ee80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ee6e:	4b13      	ldr	r3, [pc, #76]	; (800eebc <prvProcessTimerOrBlockTask+0x90>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d101      	bne.n	800ee7c <prvProcessTimerOrBlockTask+0x50>
 800ee78:	2301      	movs	r3, #1
 800ee7a:	e000      	b.n	800ee7e <prvProcessTimerOrBlockTask+0x52>
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ee80:	4b0f      	ldr	r3, [pc, #60]	; (800eec0 <prvProcessTimerOrBlockTask+0x94>)
 800ee82:	6818      	ldr	r0, [r3, #0]
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	1ad3      	subs	r3, r2, r3
 800ee8a:	683a      	ldr	r2, [r7, #0]
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	f7fe fda7 	bl	800d9e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ee92:	f7ff f897 	bl	800dfc4 <xTaskResumeAll>
 800ee96:	4603      	mov	r3, r0
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d10a      	bne.n	800eeb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ee9c:	4b09      	ldr	r3, [pc, #36]	; (800eec4 <prvProcessTimerOrBlockTask+0x98>)
 800ee9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eea2:	601a      	str	r2, [r3, #0]
 800eea4:	f3bf 8f4f 	dsb	sy
 800eea8:	f3bf 8f6f 	isb	sy
}
 800eeac:	e001      	b.n	800eeb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eeae:	f7ff f889 	bl	800dfc4 <xTaskResumeAll>
}
 800eeb2:	bf00      	nop
 800eeb4:	3710      	adds	r7, #16
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	20005608 	.word	0x20005608
 800eec0:	2000560c 	.word	0x2000560c
 800eec4:	e000ed04 	.word	0xe000ed04

0800eec8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eec8:	b480      	push	{r7}
 800eeca:	b085      	sub	sp, #20
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eed0:	4b0e      	ldr	r3, [pc, #56]	; (800ef0c <prvGetNextExpireTime+0x44>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d101      	bne.n	800eede <prvGetNextExpireTime+0x16>
 800eeda:	2201      	movs	r2, #1
 800eedc:	e000      	b.n	800eee0 <prvGetNextExpireTime+0x18>
 800eede:	2200      	movs	r2, #0
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d105      	bne.n	800eef8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eeec:	4b07      	ldr	r3, [pc, #28]	; (800ef0c <prvGetNextExpireTime+0x44>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	68db      	ldr	r3, [r3, #12]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	60fb      	str	r3, [r7, #12]
 800eef6:	e001      	b.n	800eefc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eef8:	2300      	movs	r3, #0
 800eefa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eefc:	68fb      	ldr	r3, [r7, #12]
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3714      	adds	r7, #20
 800ef02:	46bd      	mov	sp, r7
 800ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef08:	4770      	bx	lr
 800ef0a:	bf00      	nop
 800ef0c:	20005604 	.word	0x20005604

0800ef10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ef18:	f7ff f8f2 	bl	800e100 <xTaskGetTickCount>
 800ef1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ef1e:	4b0b      	ldr	r3, [pc, #44]	; (800ef4c <prvSampleTimeNow+0x3c>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	68fa      	ldr	r2, [r7, #12]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d205      	bcs.n	800ef34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ef28:	f000 f936 	bl	800f198 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	601a      	str	r2, [r3, #0]
 800ef32:	e002      	b.n	800ef3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2200      	movs	r2, #0
 800ef38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ef3a:	4a04      	ldr	r2, [pc, #16]	; (800ef4c <prvSampleTimeNow+0x3c>)
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ef40:	68fb      	ldr	r3, [r7, #12]
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3710      	adds	r7, #16
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	20005614 	.word	0x20005614

0800ef50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b086      	sub	sp, #24
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	60b9      	str	r1, [r7, #8]
 800ef5a:	607a      	str	r2, [r7, #4]
 800ef5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	68ba      	ldr	r2, [r7, #8]
 800ef66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	68fa      	ldr	r2, [r7, #12]
 800ef6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ef6e:	68ba      	ldr	r2, [r7, #8]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d812      	bhi.n	800ef9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef76:	687a      	ldr	r2, [r7, #4]
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	1ad2      	subs	r2, r2, r3
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	699b      	ldr	r3, [r3, #24]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d302      	bcc.n	800ef8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ef84:	2301      	movs	r3, #1
 800ef86:	617b      	str	r3, [r7, #20]
 800ef88:	e01b      	b.n	800efc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ef8a:	4b10      	ldr	r3, [pc, #64]	; (800efcc <prvInsertTimerInActiveList+0x7c>)
 800ef8c:	681a      	ldr	r2, [r3, #0]
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	3304      	adds	r3, #4
 800ef92:	4619      	mov	r1, r3
 800ef94:	4610      	mov	r0, r2
 800ef96:	f7fd fcd6 	bl	800c946 <vListInsert>
 800ef9a:	e012      	b.n	800efc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d206      	bcs.n	800efb2 <prvInsertTimerInActiveList+0x62>
 800efa4:	68ba      	ldr	r2, [r7, #8]
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d302      	bcc.n	800efb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800efac:	2301      	movs	r3, #1
 800efae:	617b      	str	r3, [r7, #20]
 800efb0:	e007      	b.n	800efc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800efb2:	4b07      	ldr	r3, [pc, #28]	; (800efd0 <prvInsertTimerInActiveList+0x80>)
 800efb4:	681a      	ldr	r2, [r3, #0]
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	3304      	adds	r3, #4
 800efba:	4619      	mov	r1, r3
 800efbc:	4610      	mov	r0, r2
 800efbe:	f7fd fcc2 	bl	800c946 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800efc2:	697b      	ldr	r3, [r7, #20]
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3718      	adds	r7, #24
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	20005608 	.word	0x20005608
 800efd0:	20005604 	.word	0x20005604

0800efd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b08e      	sub	sp, #56	; 0x38
 800efd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800efda:	e0ca      	b.n	800f172 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	da18      	bge.n	800f014 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800efe2:	1d3b      	adds	r3, r7, #4
 800efe4:	3304      	adds	r3, #4
 800efe6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800efe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efea:	2b00      	cmp	r3, #0
 800efec:	d10a      	bne.n	800f004 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800efee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff2:	f383 8811 	msr	BASEPRI, r3
 800eff6:	f3bf 8f6f 	isb	sy
 800effa:	f3bf 8f4f 	dsb	sy
 800effe:	61fb      	str	r3, [r7, #28]
}
 800f000:	bf00      	nop
 800f002:	e7fe      	b.n	800f002 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f00a:	6850      	ldr	r0, [r2, #4]
 800f00c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f00e:	6892      	ldr	r2, [r2, #8]
 800f010:	4611      	mov	r1, r2
 800f012:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2b00      	cmp	r3, #0
 800f018:	f2c0 80aa 	blt.w	800f170 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f022:	695b      	ldr	r3, [r3, #20]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d004      	beq.n	800f032 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f02a:	3304      	adds	r3, #4
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7fd fcc3 	bl	800c9b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f032:	463b      	mov	r3, r7
 800f034:	4618      	mov	r0, r3
 800f036:	f7ff ff6b 	bl	800ef10 <prvSampleTimeNow>
 800f03a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2b09      	cmp	r3, #9
 800f040:	f200 8097 	bhi.w	800f172 <prvProcessReceivedCommands+0x19e>
 800f044:	a201      	add	r2, pc, #4	; (adr r2, 800f04c <prvProcessReceivedCommands+0x78>)
 800f046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f04a:	bf00      	nop
 800f04c:	0800f075 	.word	0x0800f075
 800f050:	0800f075 	.word	0x0800f075
 800f054:	0800f075 	.word	0x0800f075
 800f058:	0800f0e9 	.word	0x0800f0e9
 800f05c:	0800f0fd 	.word	0x0800f0fd
 800f060:	0800f147 	.word	0x0800f147
 800f064:	0800f075 	.word	0x0800f075
 800f068:	0800f075 	.word	0x0800f075
 800f06c:	0800f0e9 	.word	0x0800f0e9
 800f070:	0800f0fd 	.word	0x0800f0fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f07a:	f043 0301 	orr.w	r3, r3, #1
 800f07e:	b2da      	uxtb	r2, r3
 800f080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f086:	68ba      	ldr	r2, [r7, #8]
 800f088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f08a:	699b      	ldr	r3, [r3, #24]
 800f08c:	18d1      	adds	r1, r2, r3
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f094:	f7ff ff5c 	bl	800ef50 <prvInsertTimerInActiveList>
 800f098:	4603      	mov	r3, r0
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d069      	beq.n	800f172 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a0:	6a1b      	ldr	r3, [r3, #32]
 800f0a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0ac:	f003 0304 	and.w	r3, r3, #4
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d05e      	beq.n	800f172 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f0b4:	68ba      	ldr	r2, [r7, #8]
 800f0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b8:	699b      	ldr	r3, [r3, #24]
 800f0ba:	441a      	add	r2, r3
 800f0bc:	2300      	movs	r3, #0
 800f0be:	9300      	str	r3, [sp, #0]
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	2100      	movs	r1, #0
 800f0c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0c6:	f7ff fe03 	bl	800ecd0 <xTimerGenericCommand>
 800f0ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f0cc:	6a3b      	ldr	r3, [r7, #32]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d14f      	bne.n	800f172 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d6:	f383 8811 	msr	BASEPRI, r3
 800f0da:	f3bf 8f6f 	isb	sy
 800f0de:	f3bf 8f4f 	dsb	sy
 800f0e2:	61bb      	str	r3, [r7, #24]
}
 800f0e4:	bf00      	nop
 800f0e6:	e7fe      	b.n	800f0e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0ee:	f023 0301 	bic.w	r3, r3, #1
 800f0f2:	b2da      	uxtb	r2, r3
 800f0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f0fa:	e03a      	b.n	800f172 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f102:	f043 0301 	orr.w	r3, r3, #1
 800f106:	b2da      	uxtb	r2, r3
 800f108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f10a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f10e:	68ba      	ldr	r2, [r7, #8]
 800f110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f112:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f116:	699b      	ldr	r3, [r3, #24]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d10a      	bne.n	800f132 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f120:	f383 8811 	msr	BASEPRI, r3
 800f124:	f3bf 8f6f 	isb	sy
 800f128:	f3bf 8f4f 	dsb	sy
 800f12c:	617b      	str	r3, [r7, #20]
}
 800f12e:	bf00      	nop
 800f130:	e7fe      	b.n	800f130 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f134:	699a      	ldr	r2, [r3, #24]
 800f136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f138:	18d1      	adds	r1, r2, r3
 800f13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f13e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f140:	f7ff ff06 	bl	800ef50 <prvInsertTimerInActiveList>
					break;
 800f144:	e015      	b.n	800f172 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f14c:	f003 0302 	and.w	r3, r3, #2
 800f150:	2b00      	cmp	r3, #0
 800f152:	d103      	bne.n	800f15c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f156:	f7fd fb8d 	bl	800c874 <vPortFree>
 800f15a:	e00a      	b.n	800f172 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f15e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f162:	f023 0301 	bic.w	r3, r3, #1
 800f166:	b2da      	uxtb	r2, r3
 800f168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f16e:	e000      	b.n	800f172 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f170:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f172:	4b08      	ldr	r3, [pc, #32]	; (800f194 <prvProcessReceivedCommands+0x1c0>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	1d39      	adds	r1, r7, #4
 800f178:	2200      	movs	r2, #0
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7fe fa16 	bl	800d5ac <xQueueReceive>
 800f180:	4603      	mov	r3, r0
 800f182:	2b00      	cmp	r3, #0
 800f184:	f47f af2a 	bne.w	800efdc <prvProcessReceivedCommands+0x8>
	}
}
 800f188:	bf00      	nop
 800f18a:	bf00      	nop
 800f18c:	3730      	adds	r7, #48	; 0x30
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
 800f192:	bf00      	nop
 800f194:	2000560c 	.word	0x2000560c

0800f198 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b088      	sub	sp, #32
 800f19c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f19e:	e048      	b.n	800f232 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1a0:	4b2d      	ldr	r3, [pc, #180]	; (800f258 <prvSwitchTimerLists+0xc0>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	68db      	ldr	r3, [r3, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1aa:	4b2b      	ldr	r3, [pc, #172]	; (800f258 <prvSwitchTimerLists+0xc0>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	68db      	ldr	r3, [r3, #12]
 800f1b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	3304      	adds	r3, #4
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7fd fbfd 	bl	800c9b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	6a1b      	ldr	r3, [r3, #32]
 800f1c2:	68f8      	ldr	r0, [r7, #12]
 800f1c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1cc:	f003 0304 	and.w	r3, r3, #4
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d02e      	beq.n	800f232 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	699b      	ldr	r3, [r3, #24]
 800f1d8:	693a      	ldr	r2, [r7, #16]
 800f1da:	4413      	add	r3, r2
 800f1dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f1de:	68ba      	ldr	r2, [r7, #8]
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d90e      	bls.n	800f204 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	68ba      	ldr	r2, [r7, #8]
 800f1ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	68fa      	ldr	r2, [r7, #12]
 800f1f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f1f2:	4b19      	ldr	r3, [pc, #100]	; (800f258 <prvSwitchTimerLists+0xc0>)
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	3304      	adds	r3, #4
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	4610      	mov	r0, r2
 800f1fe:	f7fd fba2 	bl	800c946 <vListInsert>
 800f202:	e016      	b.n	800f232 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f204:	2300      	movs	r3, #0
 800f206:	9300      	str	r3, [sp, #0]
 800f208:	2300      	movs	r3, #0
 800f20a:	693a      	ldr	r2, [r7, #16]
 800f20c:	2100      	movs	r1, #0
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	f7ff fd5e 	bl	800ecd0 <xTimerGenericCommand>
 800f214:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d10a      	bne.n	800f232 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f220:	f383 8811 	msr	BASEPRI, r3
 800f224:	f3bf 8f6f 	isb	sy
 800f228:	f3bf 8f4f 	dsb	sy
 800f22c:	603b      	str	r3, [r7, #0]
}
 800f22e:	bf00      	nop
 800f230:	e7fe      	b.n	800f230 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f232:	4b09      	ldr	r3, [pc, #36]	; (800f258 <prvSwitchTimerLists+0xc0>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d1b1      	bne.n	800f1a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f23c:	4b06      	ldr	r3, [pc, #24]	; (800f258 <prvSwitchTimerLists+0xc0>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f242:	4b06      	ldr	r3, [pc, #24]	; (800f25c <prvSwitchTimerLists+0xc4>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	4a04      	ldr	r2, [pc, #16]	; (800f258 <prvSwitchTimerLists+0xc0>)
 800f248:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f24a:	4a04      	ldr	r2, [pc, #16]	; (800f25c <prvSwitchTimerLists+0xc4>)
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	6013      	str	r3, [r2, #0]
}
 800f250:	bf00      	nop
 800f252:	3718      	adds	r7, #24
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	20005604 	.word	0x20005604
 800f25c:	20005608 	.word	0x20005608

0800f260 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b082      	sub	sp, #8
 800f264:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f266:	f7fd fcfd 	bl	800cc64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f26a:	4b15      	ldr	r3, [pc, #84]	; (800f2c0 <prvCheckForValidListAndQueue+0x60>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d120      	bne.n	800f2b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f272:	4814      	ldr	r0, [pc, #80]	; (800f2c4 <prvCheckForValidListAndQueue+0x64>)
 800f274:	f7fd fb16 	bl	800c8a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f278:	4813      	ldr	r0, [pc, #76]	; (800f2c8 <prvCheckForValidListAndQueue+0x68>)
 800f27a:	f7fd fb13 	bl	800c8a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f27e:	4b13      	ldr	r3, [pc, #76]	; (800f2cc <prvCheckForValidListAndQueue+0x6c>)
 800f280:	4a10      	ldr	r2, [pc, #64]	; (800f2c4 <prvCheckForValidListAndQueue+0x64>)
 800f282:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f284:	4b12      	ldr	r3, [pc, #72]	; (800f2d0 <prvCheckForValidListAndQueue+0x70>)
 800f286:	4a10      	ldr	r2, [pc, #64]	; (800f2c8 <prvCheckForValidListAndQueue+0x68>)
 800f288:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f28a:	2300      	movs	r3, #0
 800f28c:	9300      	str	r3, [sp, #0]
 800f28e:	4b11      	ldr	r3, [pc, #68]	; (800f2d4 <prvCheckForValidListAndQueue+0x74>)
 800f290:	4a11      	ldr	r2, [pc, #68]	; (800f2d8 <prvCheckForValidListAndQueue+0x78>)
 800f292:	2110      	movs	r1, #16
 800f294:	200a      	movs	r0, #10
 800f296:	f7fd ff53 	bl	800d140 <xQueueGenericCreateStatic>
 800f29a:	4603      	mov	r3, r0
 800f29c:	4a08      	ldr	r2, [pc, #32]	; (800f2c0 <prvCheckForValidListAndQueue+0x60>)
 800f29e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f2a0:	4b07      	ldr	r3, [pc, #28]	; (800f2c0 <prvCheckForValidListAndQueue+0x60>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d005      	beq.n	800f2b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f2a8:	4b05      	ldr	r3, [pc, #20]	; (800f2c0 <prvCheckForValidListAndQueue+0x60>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	490b      	ldr	r1, [pc, #44]	; (800f2dc <prvCheckForValidListAndQueue+0x7c>)
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fe fb6c 	bl	800d98c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f2b4:	f7fd fd06 	bl	800ccc4 <vPortExitCritical>
}
 800f2b8:	bf00      	nop
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	2000560c 	.word	0x2000560c
 800f2c4:	200055dc 	.word	0x200055dc
 800f2c8:	200055f0 	.word	0x200055f0
 800f2cc:	20005604 	.word	0x20005604
 800f2d0:	20005608 	.word	0x20005608
 800f2d4:	200056b8 	.word	0x200056b8
 800f2d8:	20005618 	.word	0x20005618
 800f2dc:	08011048 	.word	0x08011048

0800f2e0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b086      	sub	sp, #24
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d10a      	bne.n	800f308 <xTimerIsTimerActive+0x28>
	__asm volatile
 800f2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f6:	f383 8811 	msr	BASEPRI, r3
 800f2fa:	f3bf 8f6f 	isb	sy
 800f2fe:	f3bf 8f4f 	dsb	sy
 800f302:	60fb      	str	r3, [r7, #12]
}
 800f304:	bf00      	nop
 800f306:	e7fe      	b.n	800f306 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800f308:	f7fd fcac 	bl	800cc64 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800f30c:	693b      	ldr	r3, [r7, #16]
 800f30e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f312:	f003 0301 	and.w	r3, r3, #1
 800f316:	2b00      	cmp	r3, #0
 800f318:	d102      	bne.n	800f320 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800f31a:	2300      	movs	r3, #0
 800f31c:	617b      	str	r3, [r7, #20]
 800f31e:	e001      	b.n	800f324 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800f320:	2301      	movs	r3, #1
 800f322:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800f324:	f7fd fcce 	bl	800ccc4 <vPortExitCritical>

	return xReturn;
 800f328:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800f32a:	4618      	mov	r0, r3
 800f32c:	3718      	adds	r7, #24
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}

0800f332 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f332:	b580      	push	{r7, lr}
 800f334:	b086      	sub	sp, #24
 800f336:	af00      	add	r7, sp, #0
 800f338:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d10a      	bne.n	800f35a <pvTimerGetTimerID+0x28>
	__asm volatile
 800f344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f348:	f383 8811 	msr	BASEPRI, r3
 800f34c:	f3bf 8f6f 	isb	sy
 800f350:	f3bf 8f4f 	dsb	sy
 800f354:	60fb      	str	r3, [r7, #12]
}
 800f356:	bf00      	nop
 800f358:	e7fe      	b.n	800f358 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800f35a:	f7fd fc83 	bl	800cc64 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	69db      	ldr	r3, [r3, #28]
 800f362:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f364:	f7fd fcae 	bl	800ccc4 <vPortExitCritical>

	return pvReturn;
 800f368:	693b      	ldr	r3, [r7, #16]
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3718      	adds	r7, #24
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}
	...

0800f374 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
void Rte_Runnable_ExtLights_MainFunction();
void Rte_Runnable_IntLights_MainFunction();
void Rte_Runnable_SecAlm_MainFunction();

StdReturnType Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 800f374:	b480      	push	{r7}
 800f376:	b083      	sub	sp, #12
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d101      	bne.n	800f386 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x12>
	{

		return RTE_E_NOT_OK;
 800f382:	2301      	movs	r3, #1
 800f384:	e004      	b.n	800f390 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>
		/* do nothing */

	}


	Btc_ReceivedDataOnBluetooth = *data;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	781a      	ldrb	r2, [r3, #0]
 800f38a:	4b04      	ldr	r3, [pc, #16]	; (800f39c <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x28>)
 800f38c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f38e:	2300      	movs	r3, #0

}
 800f390:	4618      	mov	r0, r3
 800f392:	370c      	adds	r7, #12
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr
 800f39c:	2000009a 	.word	0x2000009a

0800f3a0 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>:

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(uint8* data)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b083      	sub	sp, #12
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d101      	bne.n	800f3b2 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	e004      	b.n	800f3bc <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x1c>
		/* do nothing */

	}


	CenLoc_CurrentState = *data;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	781a      	ldrb	r2, [r3, #0]
 800f3b6:	4b04      	ldr	r3, [pc, #16]	; (800f3c8 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x28>)
 800f3b8:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f3ba:	2300      	movs	r3, #0

}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr
 800f3c8:	200000aa 	.word	0x200000aa

0800f3cc <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(uint8* data)
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b083      	sub	sp, #12
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d101      	bne.n	800f3de <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x12>
	{

		return RTE_E_NOT_OK;
 800f3da:	2301      	movs	r3, #1
 800f3dc:	e004      	b.n	800f3e8 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x1c>
		/* do nothing */

	}


	CenLoc_FollowMeHomeState = *data;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	781a      	ldrb	r2, [r3, #0]
 800f3e2:	4b04      	ldr	r3, [pc, #16]	; (800f3f4 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x28>)
 800f3e4:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f3e6:	2300      	movs	r3, #0

}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	370c      	adds	r7, #12
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f2:	4770      	bx	lr
 800f3f4:	200000ac 	.word	0x200000ac

0800f3f8 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag(uint8* data)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	b083      	sub	sp, #12
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d101      	bne.n	800f40a <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f406:	2301      	movs	r3, #1
 800f408:	e004      	b.n	800f414 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag+0x1c>
		/* do nothing */

	}


	CenLoc_Tim2IRQFlag = *data;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	781a      	ldrb	r2, [r3, #0]
 800f40e:	4b04      	ldr	r3, [pc, #16]	; (800f420 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim2IRQFlag+0x28>)
 800f410:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f412:	2300      	movs	r3, #0

}
 800f414:	4618      	mov	r0, r3
 800f416:	370c      	adds	r7, #12
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr
 800f420:	200000ae 	.word	0x200000ae

0800f424 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag>:

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag(uint8* data)
{
 800f424:	b480      	push	{r7}
 800f426:	b083      	sub	sp, #12
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d101      	bne.n	800f436 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f432:	2301      	movs	r3, #1
 800f434:	e004      	b.n	800f440 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag+0x1c>
		/* do nothing */

	}


	CenLoc_Tim3IRQFlag = *data;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	781a      	ldrb	r2, [r3, #0]
 800f43a:	4b04      	ldr	r3, [pc, #16]	; (800f44c <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim3IRQFlag+0x28>)
 800f43c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f43e:	2300      	movs	r3, #0

}
 800f440:	4618      	mov	r0, r3
 800f442:	370c      	adds	r7, #12
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr
 800f44c:	200000af 	.word	0x200000af

0800f450 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag>:

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag(uint8* data)
{
 800f450:	b480      	push	{r7}
 800f452:	b083      	sub	sp, #12
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d101      	bne.n	800f462 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f45e:	2301      	movs	r3, #1
 800f460:	e004      	b.n	800f46c <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag+0x1c>
		/* do nothing */

	}


	CenLoc_Tim5IRQFlag = *data;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	781a      	ldrb	r2, [r3, #0]
 800f466:	4b04      	ldr	r3, [pc, #16]	; (800f478 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim5IRQFlag+0x28>)
 800f468:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f46a:	2300      	movs	r3, #0

}
 800f46c:	4618      	mov	r0, r3
 800f46e:	370c      	adds	r7, #12
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr
 800f478:	200000b0 	.word	0x200000b0

0800f47c <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag>:

StdReturnType Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag(uint8* data)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b083      	sub	sp, #12
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d101      	bne.n	800f48e <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f48a:	2301      	movs	r3, #1
 800f48c:	e004      	b.n	800f498 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag+0x1c>
		/* do nothing */

	}


	CenLoc_Tim11IRQFlag = *data;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	781a      	ldrb	r2, [r3, #0]
 800f492:	4b04      	ldr	r3, [pc, #16]	; (800f4a4 <Rte_Write_CenLoc_CenLocPort_CenLoc_Tim11IRQFlag+0x28>)
 800f494:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f496:	2300      	movs	r3, #0

}
 800f498:	4618      	mov	r0, r3
 800f49a:	370c      	adds	r7, #12
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr
 800f4a4:	200000b1 	.word	0x200000b1

0800f4a8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(uint8* data)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b083      	sub	sp, #12
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d101      	bne.n	800f4ba <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	e004      	b.n	800f4c4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_ReverseLight_CurrentState = *data;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	781a      	ldrb	r2, [r3, #0]
 800f4be:	4b04      	ldr	r3, [pc, #16]	; (800f4d0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x28>)
 800f4c0:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f4c2:	2300      	movs	r3, #0

}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	370c      	adds	r7, #12
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ce:	4770      	bx	lr
 800f4d0:	200000b3 	.word	0x200000b3

0800f4d4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState(uint8* data)
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b083      	sub	sp, #12
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d101      	bne.n	800f4e6 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	e004      	b.n	800f4f0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_FlashHighBeam_CurrentState = *data;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	781a      	ldrb	r2, [r3, #0]
 800f4ea:	4b04      	ldr	r3, [pc, #16]	; (800f4fc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FlashHighBeam_CurrentState+0x28>)
 800f4ec:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f4ee:	2300      	movs	r3, #0

}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr
 800f4fc:	200000b5 	.word	0x200000b5

0800f500 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(uint8* data)
{
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d101      	bne.n	800f512 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f50e:	2301      	movs	r3, #1
 800f510:	e004      	b.n	800f51c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_BrakeLight_CurrentState = *data;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	781a      	ldrb	r2, [r3, #0]
 800f516:	4b04      	ldr	r3, [pc, #16]	; (800f528 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x28>)
 800f518:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f51a:	2300      	movs	r3, #0

}
 800f51c:	4618      	mov	r0, r3
 800f51e:	370c      	adds	r7, #12
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr
 800f528:	200000b4 	.word	0x200000b4

0800f52c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(uint8* data)
{
 800f52c:	b480      	push	{r7}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d101      	bne.n	800f53e <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f53a:	2301      	movs	r3, #1
 800f53c:	e004      	b.n	800f548 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_LightsSwitch_CurrentState = *data;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	781a      	ldrb	r2, [r3, #0]
 800f542:	4b04      	ldr	r3, [pc, #16]	; (800f554 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x28>)
 800f544:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f546:	2300      	movs	r3, #0

}
 800f548:	4618      	mov	r0, r3
 800f54a:	370c      	adds	r7, #12
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr
 800f554:	200000b6 	.word	0x200000b6

0800f558 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(uint8* data)
{
 800f558:	b480      	push	{r7}
 800f55a:	b083      	sub	sp, #12
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d101      	bne.n	800f56a <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f566:	2301      	movs	r3, #1
 800f568:	e004      	b.n	800f574 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_HighBeam_CurrentState = *data;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	781a      	ldrb	r2, [r3, #0]
 800f56e:	4b04      	ldr	r3, [pc, #16]	; (800f580 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x28>)
 800f570:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f572:	2300      	movs	r3, #0

}
 800f574:	4618      	mov	r0, r3
 800f576:	370c      	adds	r7, #12
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr
 800f580:	200000b7 	.word	0x200000b7

0800f584 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(uint8* data)
{
 800f584:	b480      	push	{r7}
 800f586:	b083      	sub	sp, #12
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d101      	bne.n	800f596 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f592:	2301      	movs	r3, #1
 800f594:	e004      	b.n	800f5a0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_FrontFogLight_CurrentState = *data;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	781a      	ldrb	r2, [r3, #0]
 800f59a:	4b04      	ldr	r3, [pc, #16]	; (800f5ac <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x28>)
 800f59c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f59e:	2300      	movs	r3, #0

}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	370c      	adds	r7, #12
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr
 800f5ac:	200000b8 	.word	0x200000b8

0800f5b0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(uint8* data)
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b083      	sub	sp, #12
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d101      	bne.n	800f5c2 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f5be:	2301      	movs	r3, #1
 800f5c0:	e004      	b.n	800f5cc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_TurnSignalLeft_CurrentState = *data;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	781a      	ldrb	r2, [r3, #0]
 800f5c6:	4b04      	ldr	r3, [pc, #16]	; (800f5d8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x28>)
 800f5c8:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f5ca:	2300      	movs	r3, #0

}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	370c      	adds	r7, #12
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d6:	4770      	bx	lr
 800f5d8:	200000b9 	.word	0x200000b9

0800f5dc <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(uint8* data)
{
 800f5dc:	b480      	push	{r7}
 800f5de:	b083      	sub	sp, #12
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d101      	bne.n	800f5ee <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	e004      	b.n	800f5f8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_TurnSignalRight_CurrentState = *data;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	781a      	ldrb	r2, [r3, #0]
 800f5f2:	4b04      	ldr	r3, [pc, #16]	; (800f604 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x28>)
 800f5f4:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f5f6:	2300      	movs	r3, #0

}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	370c      	adds	r7, #12
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f602:	4770      	bx	lr
 800f604:	200000ba 	.word	0x200000ba

0800f608 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(uint8* data)
{
 800f608:	b480      	push	{r7}
 800f60a:	b083      	sub	sp, #12
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d101      	bne.n	800f61a <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f616:	2301      	movs	r3, #1
 800f618:	e004      	b.n	800f624 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_HazardLight_CurrentState = *data;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	781a      	ldrb	r2, [r3, #0]
 800f61e:	4b04      	ldr	r3, [pc, #16]	; (800f630 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x28>)
 800f620:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f622:	2300      	movs	r3, #0

}
 800f624:	4618      	mov	r0, r3
 800f626:	370c      	adds	r7, #12
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr
 800f630:	200000bb 	.word	0x200000bb

0800f634 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(uint8* data)
{
 800f634:	b480      	push	{r7}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d101      	bne.n	800f646 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f642:	2301      	movs	r3, #1
 800f644:	e004      	b.n	800f650 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x1c>
		/* do nothing */

	}


	ExtLights_RearFogLight_CurrentState = *data;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	781a      	ldrb	r2, [r3, #0]
 800f64a:	4b04      	ldr	r3, [pc, #16]	; (800f65c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x28>)
 800f64c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f64e:	2300      	movs	r3, #0

}
 800f650:	4618      	mov	r0, r3
 800f652:	370c      	adds	r7, #12
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr
 800f65c:	200000bc 	.word	0x200000bc

0800f660 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(uint32* data)
{
 800f660:	b480      	push	{r7}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d101      	bne.n	800f672 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f66e:	2301      	movs	r3, #1
 800f670:	e004      	b.n	800f67c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x1c>
		/* do nothing */

	}


	ExtLights_RTSFlag = *data;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	4a04      	ldr	r2, [pc, #16]	; (800f688 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x28>)
 800f678:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800f67a:	2300      	movs	r3, #0

}
 800f67c:	4618      	mov	r0, r3
 800f67e:	370c      	adds	r7, #12
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr
 800f688:	200000c0 	.word	0x200000c0

0800f68c <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(uint32* data)
{
 800f68c:	b480      	push	{r7}
 800f68e:	b083      	sub	sp, #12
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d101      	bne.n	800f69e <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f69a:	2301      	movs	r3, #1
 800f69c:	e004      	b.n	800f6a8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x1c>
		/* do nothing */

	}


	ExtLights_LTSFlag = *data;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	4a04      	ldr	r2, [pc, #16]	; (800f6b4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x28>)
 800f6a4:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800f6a6:	2300      	movs	r3, #0

}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	370c      	adds	r7, #12
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr
 800f6b4:	200000c4 	.word	0x200000c4

0800f6b8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>:

StdReturnType Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(uint32* data)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b083      	sub	sp, #12
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d101      	bne.n	800f6ca <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	e004      	b.n	800f6d4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x1c>
		/* do nothing */

	}


	ExtLights_HLFlag = *data;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	4a04      	ldr	r2, [pc, #16]	; (800f6e0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x28>)
 800f6d0:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800f6d2:	2300      	movs	r3, #0

}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	370c      	adds	r7, #12
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr
 800f6e0:	200000c8 	.word	0x200000c8

0800f6e4 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>:

StdReturnType Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(uint8* data)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d101      	bne.n	800f6f6 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x12>
	{

		return RTE_E_NOT_OK;
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	e004      	b.n	800f700 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x1c>
		/* do nothing */

	}


	IntLights_CurrentState = *data;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	781a      	ldrb	r2, [r3, #0]
 800f6fa:	4b04      	ldr	r3, [pc, #16]	; (800f70c <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x28>)
 800f6fc:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f6fe:	2300      	movs	r3, #0

}
 800f700:	4618      	mov	r0, r3
 800f702:	370c      	adds	r7, #12
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr
 800f70c:	200000d5 	.word	0x200000d5

0800f710 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>:
	return RTE_E_OK;

}

StdReturnType Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(uint8* data)
{
 800f710:	b480      	push	{r7}
 800f712:	b083      	sub	sp, #12
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d101      	bne.n	800f722 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x12>
	{

		return RTE_E_NOT_OK;
 800f71e:	2301      	movs	r3, #1
 800f720:	e004      	b.n	800f72c <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x1c>
		/* do nothing */

	}


	SecAlm_TriggerIRQCounterForTimer4 = *data;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	781a      	ldrb	r2, [r3, #0]
 800f726:	4b04      	ldr	r3, [pc, #16]	; (800f738 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x28>)
 800f728:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f72a:	2300      	movs	r3, #0

}
 800f72c:	4618      	mov	r0, r3
 800f72e:	370c      	adds	r7, #12
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr
 800f738:	200000d8 	.word	0x200000d8

0800f73c <Rte_Runnable_Btc_MainFunction>:
	return RTE_E_OK;

}

void Rte_Runnable_Btc_MainFunction()
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	af00      	add	r7, sp, #0

	Btc_MainFunction();
 800f740:	f7f1 f88e 	bl	8000860 <Btc_MainFunction>

}
 800f744:	bf00      	nop
 800f746:	bd80      	pop	{r7, pc}

0800f748 <Rte_Runnable_CenLoc_MainFunction>:

void Rte_Runnable_CenLoc_MainFunction()
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	af00      	add	r7, sp, #0

	CenLoc_MainFunction();
 800f74c:	f7f1 fa72 	bl	8000c34 <CenLoc_MainFunction>

}
 800f750:	bf00      	nop
 800f752:	bd80      	pop	{r7, pc}

0800f754 <Rte_Runnable_ExtLights_MainFunction>:

void Rte_Runnable_ExtLights_MainFunction()
{
 800f754:	b580      	push	{r7, lr}
 800f756:	af00      	add	r7, sp, #0

	ExtLights_MainFunction();
 800f758:	f7f1 fc0a 	bl	8000f70 <ExtLights_MainFunction>

}
 800f75c:	bf00      	nop
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <Rte_Runnable_IntLights_MainFunction>:

void Rte_Runnable_IntLights_MainFunction()
{
 800f760:	b580      	push	{r7, lr}
 800f762:	af00      	add	r7, sp, #0

	IntLights_MainFunction();
 800f764:	f7f1 fdaa 	bl	80012bc <IntLights_MainFunction>

}
 800f768:	bf00      	nop
 800f76a:	bd80      	pop	{r7, pc}

0800f76c <Rte_Runnable_SecAlm_MainFunction>:

void Rte_Runnable_SecAlm_MainFunction()
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	af00      	add	r7, sp, #0

	SecAlm_MainFunction();
 800f770:	f7f1 fec6 	bl	8001500 <SecAlm_MainFunction>

}
 800f774:	bf00      	nop
 800f776:	bd80      	pop	{r7, pc}

0800f778 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:

StdReturnType Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 800f778:	b480      	push	{r7}
 800f77a:	b083      	sub	sp, #12
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d101      	bne.n	800f78a <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x12>
	{

		return RTE_E_NOT_OK;
 800f786:	2301      	movs	r3, #1
 800f788:	e004      	b.n	800f794 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>
		/* do nothing */

	}


	*data = Btc_ReceivedDataOnBluetooth;
 800f78a:	4b05      	ldr	r3, [pc, #20]	; (800f7a0 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x28>)
 800f78c:	781a      	ldrb	r2, [r3, #0]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f792:	2300      	movs	r3, #0

}
 800f794:	4618      	mov	r0, r3
 800f796:	370c      	adds	r7, #12
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr
 800f7a0:	2000009a 	.word	0x2000009a

0800f7a4 <Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT>:
	return RTE_E_OK;

}

StdReturnType Rte_Call_Uart_R_UartPort_HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Receive_IT(huart, pData, Size);
 800f7b2:	88fb      	ldrh	r3, [r7, #6]
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	68b9      	ldr	r1, [r7, #8]
 800f7b8:	68f8      	ldr	r0, [r7, #12]
 800f7ba:	f7fb fc9d 	bl	800b0f8 <HAL_UART_Receive_IT>

	return RTE_E_OK;
 800f7be:	2300      	movs	r3, #0

}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3710      	adds	r7, #16
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init>:

StdReturnType Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b082      	sub	sp, #8
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Init(htim);
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f7fa fb1f 	bl	8009e14 <HAL_TIM_Base_Init>

	return RTE_E_OK;
 800f7d6:	2300      	movs	r3, #0

}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3708      	adds	r7, #8
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}

0800f7e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT>:

StdReturnType Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start_IT(htim);
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f7fa fbe5 	bl	8009fb8 <HAL_TIM_Base_Start_IT>

	return RTE_E_OK;
 800f7ee:	2300      	movs	r3, #0

}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3708      	adds	r7, #8
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT>:

StdReturnType Rte_Call_Tim_R_TimPort_HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Stop_IT(htim);
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f7fa fc6b 	bl	800a0dc <HAL_TIM_Base_Stop_IT>

	return RTE_E_OK;
 800f806:	2300      	movs	r3, #0

}
 800f808:	4618      	mov	r0, r3
 800f80a:	3708      	adds	r7, #8
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>:

StdReturnType Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	460b      	mov	r3, r1
 800f81a:	807b      	strh	r3, [r7, #2]
 800f81c:	4613      	mov	r3, r2
 800f81e:	707b      	strb	r3, [r7, #1]

	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 800f820:	787a      	ldrb	r2, [r7, #1]
 800f822:	887b      	ldrh	r3, [r7, #2]
 800f824:	4619      	mov	r1, r3
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f7f6 fa70 	bl	8005d0c <HAL_GPIO_WritePin>

	return RTE_E_OK;
 800f82c:	2300      	movs	r3, #0

}
 800f82e:	4618      	mov	r0, r3
 800f830:	3708      	adds	r7, #8
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}

0800f836 <Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA>:

StdReturnType Rte_Call_ADC_R_ADCPort_HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800f836:	b580      	push	{r7, lr}
 800f838:	b084      	sub	sp, #16
 800f83a:	af00      	add	r7, sp, #0
 800f83c:	60f8      	str	r0, [r7, #12]
 800f83e:	60b9      	str	r1, [r7, #8]
 800f840:	607a      	str	r2, [r7, #4]

	HAL_ADC_Start_DMA(hadc, pData, Length);
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	68b9      	ldr	r1, [r7, #8]
 800f846:	68f8      	ldr	r0, [r7, #12]
 800f848:	f7f4 fa9e 	bl	8003d88 <HAL_ADC_Start_DMA>

	return RTE_E_OK;
 800f84c:	2300      	movs	r3, #0

}
 800f84e:	4618      	mov	r0, r3
 800f850:	3710      	adds	r7, #16
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}

0800f856 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>:
	return RTE_E_OK;

}

StdReturnType Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(osTimerId_t timer_id, uint32_t ticks)
{
 800f856:	b580      	push	{r7, lr}
 800f858:	b082      	sub	sp, #8
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	6078      	str	r0, [r7, #4]
 800f85e:	6039      	str	r1, [r7, #0]

	osTimerStart(timer_id, ticks);
 800f860:	6839      	ldr	r1, [r7, #0]
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f7fc fe92 	bl	800c58c <osTimerStart>

	return RTE_E_OK;
 800f868:	2300      	movs	r3, #0

}
 800f86a:	4618      	mov	r0, r3
 800f86c:	3708      	adds	r7, #8
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}
	...

0800f874 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag>:

StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag(uint32* data)
{
 800f874:	b480      	push	{r7}
 800f876:	b083      	sub	sp, #12
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d101      	bne.n	800f886 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f882:	2301      	movs	r3, #1
 800f884:	e004      	b.n	800f890 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag+0x1c>
		/* do nothing */

	}


	Timer2Counter_ExtLights_LTSFlag = *data;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	4a04      	ldr	r2, [pc, #16]	; (800f89c <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_LTSFlag+0x28>)
 800f88c:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800f88e:	2300      	movs	r3, #0


}
 800f890:	4618      	mov	r0, r3
 800f892:	370c      	adds	r7, #12
 800f894:	46bd      	mov	sp, r7
 800f896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89a:	4770      	bx	lr
 800f89c:	20000ae8 	.word	0x20000ae8

0800f8a0 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag(uint32* data)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b083      	sub	sp, #12
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d101      	bne.n	800f8b2 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	e004      	b.n	800f8bc <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag+0x1c>
		/* do nothing */

	}


	Timer2Counter_ExtLights_RTSFlag  = *data;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	4a04      	ldr	r2, [pc, #16]	; (800f8c8 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_RTSFlag+0x28>)
 800f8b8:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800f8ba:	2300      	movs	r3, #0

}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	370c      	adds	r7, #12
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c6:	4770      	bx	lr
 800f8c8:	20000aec 	.word	0x20000aec

0800f8cc <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag(uint32* data)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b083      	sub	sp, #12
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d101      	bne.n	800f8de <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f8da:	2301      	movs	r3, #1
 800f8dc:	e004      	b.n	800f8e8 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag+0x1c>
		/* do nothing */

	}


	Timer2Counter_ExtLights_HLFlag = *data;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	4a04      	ldr	r2, [pc, #16]	; (800f8f4 <Rte_Write_TimH_TimHPort_Timer2Counter_ExtLights_HLFlag+0x28>)
 800f8e4:	6013      	str	r3, [r2, #0]

	return RTE_E_OK;
 800f8e6:	2300      	movs	r3, #0

}
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	370c      	adds	r7, #12
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f2:	4770      	bx	lr
 800f8f4:	20000af0 	.word	0x20000af0

0800f8f8 <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag(uint8* data)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b083      	sub	sp, #12
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d101      	bne.n	800f90a <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f906:	2301      	movs	r3, #1
 800f908:	e004      	b.n	800f914 <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag+0x1c>
		/* do nothing */

	}


	Timer2Counter_CenLoc_Tim2IRQFlag = *data;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	781a      	ldrb	r2, [r3, #0]
 800f90e:	4b04      	ldr	r3, [pc, #16]	; (800f920 <Rte_Write_TimH_TimHPort_Timer2Counter_CenLoc_Tim2IRQFlag+0x28>)
 800f910:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f912:	2300      	movs	r3, #0

}
 800f914:	4618      	mov	r0, r3
 800f916:	370c      	adds	r7, #12
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr
 800f920:	20000af4 	.word	0x20000af4

0800f924 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag(uint8* data)
{
 800f924:	b480      	push	{r7}
 800f926:	b083      	sub	sp, #12
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d101      	bne.n	800f936 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f932:	2301      	movs	r3, #1
 800f934:	e004      	b.n	800f940 <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag+0x1c>
		/* do nothing */

	}


	Timer5Counter_CenLoc_Tim5IRQFlag = *data;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	781a      	ldrb	r2, [r3, #0]
 800f93a:	4b04      	ldr	r3, [pc, #16]	; (800f94c <Rte_Write_TimH_TimHPort_Timer5Counter_CenLoc_Tim5IRQFlag+0x28>)
 800f93c:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f93e:	2300      	movs	r3, #0

}
 800f940:	4618      	mov	r0, r3
 800f942:	370c      	adds	r7, #12
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr
 800f94c:	20000af5 	.word	0x20000af5

0800f950 <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag(uint8* data)
{
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d101      	bne.n	800f962 <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f95e:	2301      	movs	r3, #1
 800f960:	e004      	b.n	800f96c <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag+0x1c>
		/* do nothing */

	}


	Timer3Counter_CenLoc_Tim3IRQFlag = *data;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	781a      	ldrb	r2, [r3, #0]
 800f966:	4b04      	ldr	r3, [pc, #16]	; (800f978 <Rte_Write_TimH_TimHPort_Timer3Counter_CenLoc_Tim3IRQFlag+0x28>)
 800f968:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f96a:	2300      	movs	r3, #0

}
 800f96c:	4618      	mov	r0, r3
 800f96e:	370c      	adds	r7, #12
 800f970:	46bd      	mov	sp, r7
 800f972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f976:	4770      	bx	lr
 800f978:	20000af7 	.word	0x20000af7

0800f97c <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag>:
StdReturnType Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag(uint8* data)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]

	if(data == NULL_PTR)
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d101      	bne.n	800f98e <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag+0x12>
	{

		return RTE_E_NOT_OK;
 800f98a:	2301      	movs	r3, #1
 800f98c:	e004      	b.n	800f998 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag+0x1c>
		/* do nothing */

	}


	Timer11Counter_CenLoc_Tim11IRQFlag = *data;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	781a      	ldrb	r2, [r3, #0]
 800f992:	4b04      	ldr	r3, [pc, #16]	; (800f9a4 <Rte_Write_TimH_TimHPort_Timer11Counter_CenLoc_Tim11IRQFlag+0x28>)
 800f994:	701a      	strb	r2, [r3, #0]

	return RTE_E_OK;
 800f996:	2300      	movs	r3, #0

}
 800f998:	4618      	mov	r0, r3
 800f99a:	370c      	adds	r7, #12
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr
 800f9a4:	20000af6 	.word	0x20000af6

0800f9a8 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>:

StdReturnType Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(osTimerId_t timer_id)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]

	osTimerStop(timer_id);
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f7fc fe19 	bl	800c5e8 <osTimerStop>

	return RTE_E_OK;
 800f9b6:	2300      	movs	r3, #0

}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3708      	adds	r7, #8
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}

0800f9c0 <atoi>:
 800f9c0:	220a      	movs	r2, #10
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	f000 b978 	b.w	800fcb8 <strtol>

0800f9c8 <__errno>:
 800f9c8:	4b01      	ldr	r3, [pc, #4]	; (800f9d0 <__errno+0x8>)
 800f9ca:	6818      	ldr	r0, [r3, #0]
 800f9cc:	4770      	bx	lr
 800f9ce:	bf00      	nop
 800f9d0:	20000014 	.word	0x20000014

0800f9d4 <__libc_init_array>:
 800f9d4:	b570      	push	{r4, r5, r6, lr}
 800f9d6:	4d0d      	ldr	r5, [pc, #52]	; (800fa0c <__libc_init_array+0x38>)
 800f9d8:	4c0d      	ldr	r4, [pc, #52]	; (800fa10 <__libc_init_array+0x3c>)
 800f9da:	1b64      	subs	r4, r4, r5
 800f9dc:	10a4      	asrs	r4, r4, #2
 800f9de:	2600      	movs	r6, #0
 800f9e0:	42a6      	cmp	r6, r4
 800f9e2:	d109      	bne.n	800f9f8 <__libc_init_array+0x24>
 800f9e4:	4d0b      	ldr	r5, [pc, #44]	; (800fa14 <__libc_init_array+0x40>)
 800f9e6:	4c0c      	ldr	r4, [pc, #48]	; (800fa18 <__libc_init_array+0x44>)
 800f9e8:	f000 f97c 	bl	800fce4 <_init>
 800f9ec:	1b64      	subs	r4, r4, r5
 800f9ee:	10a4      	asrs	r4, r4, #2
 800f9f0:	2600      	movs	r6, #0
 800f9f2:	42a6      	cmp	r6, r4
 800f9f4:	d105      	bne.n	800fa02 <__libc_init_array+0x2e>
 800f9f6:	bd70      	pop	{r4, r5, r6, pc}
 800f9f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9fc:	4798      	blx	r3
 800f9fe:	3601      	adds	r6, #1
 800fa00:	e7ee      	b.n	800f9e0 <__libc_init_array+0xc>
 800fa02:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa06:	4798      	blx	r3
 800fa08:	3601      	adds	r6, #1
 800fa0a:	e7f2      	b.n	800f9f2 <__libc_init_array+0x1e>
 800fa0c:	080119e8 	.word	0x080119e8
 800fa10:	080119e8 	.word	0x080119e8
 800fa14:	080119e8 	.word	0x080119e8
 800fa18:	080119ec 	.word	0x080119ec

0800fa1c <memcpy>:
 800fa1c:	440a      	add	r2, r1
 800fa1e:	4291      	cmp	r1, r2
 800fa20:	f100 33ff 	add.w	r3, r0, #4294967295
 800fa24:	d100      	bne.n	800fa28 <memcpy+0xc>
 800fa26:	4770      	bx	lr
 800fa28:	b510      	push	{r4, lr}
 800fa2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa32:	4291      	cmp	r1, r2
 800fa34:	d1f9      	bne.n	800fa2a <memcpy+0xe>
 800fa36:	bd10      	pop	{r4, pc}

0800fa38 <memset>:
 800fa38:	4402      	add	r2, r0
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	d100      	bne.n	800fa42 <memset+0xa>
 800fa40:	4770      	bx	lr
 800fa42:	f803 1b01 	strb.w	r1, [r3], #1
 800fa46:	e7f9      	b.n	800fa3c <memset+0x4>

0800fa48 <_free_r>:
 800fa48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa4a:	2900      	cmp	r1, #0
 800fa4c:	d044      	beq.n	800fad8 <_free_r+0x90>
 800fa4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa52:	9001      	str	r0, [sp, #4]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	f1a1 0404 	sub.w	r4, r1, #4
 800fa5a:	bfb8      	it	lt
 800fa5c:	18e4      	addlt	r4, r4, r3
 800fa5e:	f000 f935 	bl	800fccc <__malloc_lock>
 800fa62:	4a1e      	ldr	r2, [pc, #120]	; (800fadc <_free_r+0x94>)
 800fa64:	9801      	ldr	r0, [sp, #4]
 800fa66:	6813      	ldr	r3, [r2, #0]
 800fa68:	b933      	cbnz	r3, 800fa78 <_free_r+0x30>
 800fa6a:	6063      	str	r3, [r4, #4]
 800fa6c:	6014      	str	r4, [r2, #0]
 800fa6e:	b003      	add	sp, #12
 800fa70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa74:	f000 b930 	b.w	800fcd8 <__malloc_unlock>
 800fa78:	42a3      	cmp	r3, r4
 800fa7a:	d908      	bls.n	800fa8e <_free_r+0x46>
 800fa7c:	6825      	ldr	r5, [r4, #0]
 800fa7e:	1961      	adds	r1, r4, r5
 800fa80:	428b      	cmp	r3, r1
 800fa82:	bf01      	itttt	eq
 800fa84:	6819      	ldreq	r1, [r3, #0]
 800fa86:	685b      	ldreq	r3, [r3, #4]
 800fa88:	1949      	addeq	r1, r1, r5
 800fa8a:	6021      	streq	r1, [r4, #0]
 800fa8c:	e7ed      	b.n	800fa6a <_free_r+0x22>
 800fa8e:	461a      	mov	r2, r3
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	b10b      	cbz	r3, 800fa98 <_free_r+0x50>
 800fa94:	42a3      	cmp	r3, r4
 800fa96:	d9fa      	bls.n	800fa8e <_free_r+0x46>
 800fa98:	6811      	ldr	r1, [r2, #0]
 800fa9a:	1855      	adds	r5, r2, r1
 800fa9c:	42a5      	cmp	r5, r4
 800fa9e:	d10b      	bne.n	800fab8 <_free_r+0x70>
 800faa0:	6824      	ldr	r4, [r4, #0]
 800faa2:	4421      	add	r1, r4
 800faa4:	1854      	adds	r4, r2, r1
 800faa6:	42a3      	cmp	r3, r4
 800faa8:	6011      	str	r1, [r2, #0]
 800faaa:	d1e0      	bne.n	800fa6e <_free_r+0x26>
 800faac:	681c      	ldr	r4, [r3, #0]
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	6053      	str	r3, [r2, #4]
 800fab2:	4421      	add	r1, r4
 800fab4:	6011      	str	r1, [r2, #0]
 800fab6:	e7da      	b.n	800fa6e <_free_r+0x26>
 800fab8:	d902      	bls.n	800fac0 <_free_r+0x78>
 800faba:	230c      	movs	r3, #12
 800fabc:	6003      	str	r3, [r0, #0]
 800fabe:	e7d6      	b.n	800fa6e <_free_r+0x26>
 800fac0:	6825      	ldr	r5, [r4, #0]
 800fac2:	1961      	adds	r1, r4, r5
 800fac4:	428b      	cmp	r3, r1
 800fac6:	bf04      	itt	eq
 800fac8:	6819      	ldreq	r1, [r3, #0]
 800faca:	685b      	ldreq	r3, [r3, #4]
 800facc:	6063      	str	r3, [r4, #4]
 800face:	bf04      	itt	eq
 800fad0:	1949      	addeq	r1, r1, r5
 800fad2:	6021      	streq	r1, [r4, #0]
 800fad4:	6054      	str	r4, [r2, #4]
 800fad6:	e7ca      	b.n	800fa6e <_free_r+0x26>
 800fad8:	b003      	add	sp, #12
 800fada:	bd30      	pop	{r4, r5, pc}
 800fadc:	20005708 	.word	0x20005708

0800fae0 <cleanup_glue>:
 800fae0:	b538      	push	{r3, r4, r5, lr}
 800fae2:	460c      	mov	r4, r1
 800fae4:	6809      	ldr	r1, [r1, #0]
 800fae6:	4605      	mov	r5, r0
 800fae8:	b109      	cbz	r1, 800faee <cleanup_glue+0xe>
 800faea:	f7ff fff9 	bl	800fae0 <cleanup_glue>
 800faee:	4621      	mov	r1, r4
 800faf0:	4628      	mov	r0, r5
 800faf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800faf6:	f7ff bfa7 	b.w	800fa48 <_free_r>
	...

0800fafc <_reclaim_reent>:
 800fafc:	4b2c      	ldr	r3, [pc, #176]	; (800fbb0 <_reclaim_reent+0xb4>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	4283      	cmp	r3, r0
 800fb02:	b570      	push	{r4, r5, r6, lr}
 800fb04:	4604      	mov	r4, r0
 800fb06:	d051      	beq.n	800fbac <_reclaim_reent+0xb0>
 800fb08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fb0a:	b143      	cbz	r3, 800fb1e <_reclaim_reent+0x22>
 800fb0c:	68db      	ldr	r3, [r3, #12]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d14a      	bne.n	800fba8 <_reclaim_reent+0xac>
 800fb12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb14:	6819      	ldr	r1, [r3, #0]
 800fb16:	b111      	cbz	r1, 800fb1e <_reclaim_reent+0x22>
 800fb18:	4620      	mov	r0, r4
 800fb1a:	f7ff ff95 	bl	800fa48 <_free_r>
 800fb1e:	6961      	ldr	r1, [r4, #20]
 800fb20:	b111      	cbz	r1, 800fb28 <_reclaim_reent+0x2c>
 800fb22:	4620      	mov	r0, r4
 800fb24:	f7ff ff90 	bl	800fa48 <_free_r>
 800fb28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fb2a:	b111      	cbz	r1, 800fb32 <_reclaim_reent+0x36>
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	f7ff ff8b 	bl	800fa48 <_free_r>
 800fb32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fb34:	b111      	cbz	r1, 800fb3c <_reclaim_reent+0x40>
 800fb36:	4620      	mov	r0, r4
 800fb38:	f7ff ff86 	bl	800fa48 <_free_r>
 800fb3c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fb3e:	b111      	cbz	r1, 800fb46 <_reclaim_reent+0x4a>
 800fb40:	4620      	mov	r0, r4
 800fb42:	f7ff ff81 	bl	800fa48 <_free_r>
 800fb46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fb48:	b111      	cbz	r1, 800fb50 <_reclaim_reent+0x54>
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	f7ff ff7c 	bl	800fa48 <_free_r>
 800fb50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fb52:	b111      	cbz	r1, 800fb5a <_reclaim_reent+0x5e>
 800fb54:	4620      	mov	r0, r4
 800fb56:	f7ff ff77 	bl	800fa48 <_free_r>
 800fb5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fb5c:	b111      	cbz	r1, 800fb64 <_reclaim_reent+0x68>
 800fb5e:	4620      	mov	r0, r4
 800fb60:	f7ff ff72 	bl	800fa48 <_free_r>
 800fb64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb66:	b111      	cbz	r1, 800fb6e <_reclaim_reent+0x72>
 800fb68:	4620      	mov	r0, r4
 800fb6a:	f7ff ff6d 	bl	800fa48 <_free_r>
 800fb6e:	69a3      	ldr	r3, [r4, #24]
 800fb70:	b1e3      	cbz	r3, 800fbac <_reclaim_reent+0xb0>
 800fb72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fb74:	4620      	mov	r0, r4
 800fb76:	4798      	blx	r3
 800fb78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fb7a:	b1b9      	cbz	r1, 800fbac <_reclaim_reent+0xb0>
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb82:	f7ff bfad 	b.w	800fae0 <cleanup_glue>
 800fb86:	5949      	ldr	r1, [r1, r5]
 800fb88:	b941      	cbnz	r1, 800fb9c <_reclaim_reent+0xa0>
 800fb8a:	3504      	adds	r5, #4
 800fb8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb8e:	2d80      	cmp	r5, #128	; 0x80
 800fb90:	68d9      	ldr	r1, [r3, #12]
 800fb92:	d1f8      	bne.n	800fb86 <_reclaim_reent+0x8a>
 800fb94:	4620      	mov	r0, r4
 800fb96:	f7ff ff57 	bl	800fa48 <_free_r>
 800fb9a:	e7ba      	b.n	800fb12 <_reclaim_reent+0x16>
 800fb9c:	680e      	ldr	r6, [r1, #0]
 800fb9e:	4620      	mov	r0, r4
 800fba0:	f7ff ff52 	bl	800fa48 <_free_r>
 800fba4:	4631      	mov	r1, r6
 800fba6:	e7ef      	b.n	800fb88 <_reclaim_reent+0x8c>
 800fba8:	2500      	movs	r5, #0
 800fbaa:	e7ef      	b.n	800fb8c <_reclaim_reent+0x90>
 800fbac:	bd70      	pop	{r4, r5, r6, pc}
 800fbae:	bf00      	nop
 800fbb0:	20000014 	.word	0x20000014

0800fbb4 <_strtol_l.constprop.0>:
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbba:	d001      	beq.n	800fbc0 <_strtol_l.constprop.0+0xc>
 800fbbc:	2b24      	cmp	r3, #36	; 0x24
 800fbbe:	d906      	bls.n	800fbce <_strtol_l.constprop.0+0x1a>
 800fbc0:	f7ff ff02 	bl	800f9c8 <__errno>
 800fbc4:	2316      	movs	r3, #22
 800fbc6:	6003      	str	r3, [r0, #0]
 800fbc8:	2000      	movs	r0, #0
 800fbca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fcb4 <_strtol_l.constprop.0+0x100>
 800fbd2:	460d      	mov	r5, r1
 800fbd4:	462e      	mov	r6, r5
 800fbd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fbda:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fbde:	f017 0708 	ands.w	r7, r7, #8
 800fbe2:	d1f7      	bne.n	800fbd4 <_strtol_l.constprop.0+0x20>
 800fbe4:	2c2d      	cmp	r4, #45	; 0x2d
 800fbe6:	d132      	bne.n	800fc4e <_strtol_l.constprop.0+0x9a>
 800fbe8:	782c      	ldrb	r4, [r5, #0]
 800fbea:	2701      	movs	r7, #1
 800fbec:	1cb5      	adds	r5, r6, #2
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d05b      	beq.n	800fcaa <_strtol_l.constprop.0+0xf6>
 800fbf2:	2b10      	cmp	r3, #16
 800fbf4:	d109      	bne.n	800fc0a <_strtol_l.constprop.0+0x56>
 800fbf6:	2c30      	cmp	r4, #48	; 0x30
 800fbf8:	d107      	bne.n	800fc0a <_strtol_l.constprop.0+0x56>
 800fbfa:	782c      	ldrb	r4, [r5, #0]
 800fbfc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fc00:	2c58      	cmp	r4, #88	; 0x58
 800fc02:	d14d      	bne.n	800fca0 <_strtol_l.constprop.0+0xec>
 800fc04:	786c      	ldrb	r4, [r5, #1]
 800fc06:	2310      	movs	r3, #16
 800fc08:	3502      	adds	r5, #2
 800fc0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fc0e:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc12:	f04f 0c00 	mov.w	ip, #0
 800fc16:	fbb8 f9f3 	udiv	r9, r8, r3
 800fc1a:	4666      	mov	r6, ip
 800fc1c:	fb03 8a19 	mls	sl, r3, r9, r8
 800fc20:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fc24:	f1be 0f09 	cmp.w	lr, #9
 800fc28:	d816      	bhi.n	800fc58 <_strtol_l.constprop.0+0xa4>
 800fc2a:	4674      	mov	r4, lr
 800fc2c:	42a3      	cmp	r3, r4
 800fc2e:	dd24      	ble.n	800fc7a <_strtol_l.constprop.0+0xc6>
 800fc30:	f1bc 0f00 	cmp.w	ip, #0
 800fc34:	db1e      	blt.n	800fc74 <_strtol_l.constprop.0+0xc0>
 800fc36:	45b1      	cmp	r9, r6
 800fc38:	d31c      	bcc.n	800fc74 <_strtol_l.constprop.0+0xc0>
 800fc3a:	d101      	bne.n	800fc40 <_strtol_l.constprop.0+0x8c>
 800fc3c:	45a2      	cmp	sl, r4
 800fc3e:	db19      	blt.n	800fc74 <_strtol_l.constprop.0+0xc0>
 800fc40:	fb06 4603 	mla	r6, r6, r3, r4
 800fc44:	f04f 0c01 	mov.w	ip, #1
 800fc48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc4c:	e7e8      	b.n	800fc20 <_strtol_l.constprop.0+0x6c>
 800fc4e:	2c2b      	cmp	r4, #43	; 0x2b
 800fc50:	bf04      	itt	eq
 800fc52:	782c      	ldrbeq	r4, [r5, #0]
 800fc54:	1cb5      	addeq	r5, r6, #2
 800fc56:	e7ca      	b.n	800fbee <_strtol_l.constprop.0+0x3a>
 800fc58:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fc5c:	f1be 0f19 	cmp.w	lr, #25
 800fc60:	d801      	bhi.n	800fc66 <_strtol_l.constprop.0+0xb2>
 800fc62:	3c37      	subs	r4, #55	; 0x37
 800fc64:	e7e2      	b.n	800fc2c <_strtol_l.constprop.0+0x78>
 800fc66:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fc6a:	f1be 0f19 	cmp.w	lr, #25
 800fc6e:	d804      	bhi.n	800fc7a <_strtol_l.constprop.0+0xc6>
 800fc70:	3c57      	subs	r4, #87	; 0x57
 800fc72:	e7db      	b.n	800fc2c <_strtol_l.constprop.0+0x78>
 800fc74:	f04f 3cff 	mov.w	ip, #4294967295
 800fc78:	e7e6      	b.n	800fc48 <_strtol_l.constprop.0+0x94>
 800fc7a:	f1bc 0f00 	cmp.w	ip, #0
 800fc7e:	da05      	bge.n	800fc8c <_strtol_l.constprop.0+0xd8>
 800fc80:	2322      	movs	r3, #34	; 0x22
 800fc82:	6003      	str	r3, [r0, #0]
 800fc84:	4646      	mov	r6, r8
 800fc86:	b942      	cbnz	r2, 800fc9a <_strtol_l.constprop.0+0xe6>
 800fc88:	4630      	mov	r0, r6
 800fc8a:	e79e      	b.n	800fbca <_strtol_l.constprop.0+0x16>
 800fc8c:	b107      	cbz	r7, 800fc90 <_strtol_l.constprop.0+0xdc>
 800fc8e:	4276      	negs	r6, r6
 800fc90:	2a00      	cmp	r2, #0
 800fc92:	d0f9      	beq.n	800fc88 <_strtol_l.constprop.0+0xd4>
 800fc94:	f1bc 0f00 	cmp.w	ip, #0
 800fc98:	d000      	beq.n	800fc9c <_strtol_l.constprop.0+0xe8>
 800fc9a:	1e69      	subs	r1, r5, #1
 800fc9c:	6011      	str	r1, [r2, #0]
 800fc9e:	e7f3      	b.n	800fc88 <_strtol_l.constprop.0+0xd4>
 800fca0:	2430      	movs	r4, #48	; 0x30
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d1b1      	bne.n	800fc0a <_strtol_l.constprop.0+0x56>
 800fca6:	2308      	movs	r3, #8
 800fca8:	e7af      	b.n	800fc0a <_strtol_l.constprop.0+0x56>
 800fcaa:	2c30      	cmp	r4, #48	; 0x30
 800fcac:	d0a5      	beq.n	800fbfa <_strtol_l.constprop.0+0x46>
 800fcae:	230a      	movs	r3, #10
 800fcb0:	e7ab      	b.n	800fc0a <_strtol_l.constprop.0+0x56>
 800fcb2:	bf00      	nop
 800fcb4:	080118dd 	.word	0x080118dd

0800fcb8 <strtol>:
 800fcb8:	4613      	mov	r3, r2
 800fcba:	460a      	mov	r2, r1
 800fcbc:	4601      	mov	r1, r0
 800fcbe:	4802      	ldr	r0, [pc, #8]	; (800fcc8 <strtol+0x10>)
 800fcc0:	6800      	ldr	r0, [r0, #0]
 800fcc2:	f7ff bf77 	b.w	800fbb4 <_strtol_l.constprop.0>
 800fcc6:	bf00      	nop
 800fcc8:	20000014 	.word	0x20000014

0800fccc <__malloc_lock>:
 800fccc:	4801      	ldr	r0, [pc, #4]	; (800fcd4 <__malloc_lock+0x8>)
 800fcce:	f7f3 bd2c 	b.w	800372a <__retarget_lock_acquire_recursive>
 800fcd2:	bf00      	nop
 800fcd4:	20000ab8 	.word	0x20000ab8

0800fcd8 <__malloc_unlock>:
 800fcd8:	4801      	ldr	r0, [pc, #4]	; (800fce0 <__malloc_unlock+0x8>)
 800fcda:	f7f3 bd3a 	b.w	8003752 <__retarget_lock_release_recursive>
 800fcde:	bf00      	nop
 800fce0:	20000ab8 	.word	0x20000ab8

0800fce4 <_init>:
 800fce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fce6:	bf00      	nop
 800fce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcea:	bc08      	pop	{r3}
 800fcec:	469e      	mov	lr, r3
 800fcee:	4770      	bx	lr

0800fcf0 <_fini>:
 800fcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcf2:	bf00      	nop
 800fcf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcf6:	bc08      	pop	{r3}
 800fcf8:	469e      	mov	lr, r3
 800fcfa:	4770      	bx	lr
