
I4_BCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e494  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  0800e634  0800e634  0001e634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec3c  0800ec3c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec3c  0800ec3c  0001ec3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec44  0800ec44  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec44  0800ec44  0001ec44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec48  0800ec48  0001ec48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800ec4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a4e8  20000090  0800ecdc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a578  0800ecdc  0002a578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002af60  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a05  00000000  00000000  0004b020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002388  00000000  00000000  00051a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002060  00000000  00000000  00053db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224fc  00000000  00000000  00055e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003b3bf  00000000  00000000  0007830c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae5e4  00000000  00000000  000b36cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161caf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093a8  00000000  00000000  00161d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e61c 	.word	0x0800e61c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800e61c 	.word	0x0800e61c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2uiz>:
 800098c:	004a      	lsls	r2, r1, #1
 800098e:	d211      	bcs.n	80009b4 <__aeabi_d2uiz+0x28>
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d211      	bcs.n	80009ba <__aeabi_d2uiz+0x2e>
 8000996:	d50d      	bpl.n	80009b4 <__aeabi_d2uiz+0x28>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d40e      	bmi.n	80009c0 <__aeabi_d2uiz+0x34>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009be:	d102      	bne.n	80009c6 <__aeabi_d2uiz+0x3a>
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr

080009cc <__aeabi_uldivmod>:
 80009cc:	b953      	cbnz	r3, 80009e4 <__aeabi_uldivmod+0x18>
 80009ce:	b94a      	cbnz	r2, 80009e4 <__aeabi_uldivmod+0x18>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	bf08      	it	eq
 80009d4:	2800      	cmpeq	r0, #0
 80009d6:	bf1c      	itt	ne
 80009d8:	f04f 31ff 	movne.w	r1, #4294967295
 80009dc:	f04f 30ff 	movne.w	r0, #4294967295
 80009e0:	f000 b974 	b.w	8000ccc <__aeabi_idiv0>
 80009e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ec:	f000 f806 	bl	80009fc <__udivmoddi4>
 80009f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f8:	b004      	add	sp, #16
 80009fa:	4770      	bx	lr

080009fc <__udivmoddi4>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	9d08      	ldr	r5, [sp, #32]
 8000a02:	4604      	mov	r4, r0
 8000a04:	468e      	mov	lr, r1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d14d      	bne.n	8000aa6 <__udivmoddi4+0xaa>
 8000a0a:	428a      	cmp	r2, r1
 8000a0c:	4694      	mov	ip, r2
 8000a0e:	d969      	bls.n	8000ae4 <__udivmoddi4+0xe8>
 8000a10:	fab2 f282 	clz	r2, r2
 8000a14:	b152      	cbz	r2, 8000a2c <__udivmoddi4+0x30>
 8000a16:	fa01 f302 	lsl.w	r3, r1, r2
 8000a1a:	f1c2 0120 	rsb	r1, r2, #32
 8000a1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a26:	ea41 0e03 	orr.w	lr, r1, r3
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a30:	0c21      	lsrs	r1, r4, #16
 8000a32:	fbbe f6f8 	udiv	r6, lr, r8
 8000a36:	fa1f f78c 	uxth.w	r7, ip
 8000a3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a42:	fb06 f107 	mul.w	r1, r6, r7
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d90a      	bls.n	8000a60 <__udivmoddi4+0x64>
 8000a4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a52:	f080 811f 	bcs.w	8000c94 <__udivmoddi4+0x298>
 8000a56:	4299      	cmp	r1, r3
 8000a58:	f240 811c 	bls.w	8000c94 <__udivmoddi4+0x298>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a68:	fb08 3310 	mls	r3, r8, r0, r3
 8000a6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a70:	fb00 f707 	mul.w	r7, r0, r7
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	d90a      	bls.n	8000a8e <__udivmoddi4+0x92>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a80:	f080 810a 	bcs.w	8000c98 <__udivmoddi4+0x29c>
 8000a84:	42a7      	cmp	r7, r4
 8000a86:	f240 8107 	bls.w	8000c98 <__udivmoddi4+0x29c>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a92:	1be4      	subs	r4, r4, r7
 8000a94:	2600      	movs	r6, #0
 8000a96:	b11d      	cbz	r5, 8000aa0 <__udivmoddi4+0xa4>
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d909      	bls.n	8000abe <__udivmoddi4+0xc2>
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	f000 80ef 	beq.w	8000c8e <__udivmoddi4+0x292>
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ab6:	4630      	mov	r0, r6
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	fab3 f683 	clz	r6, r3
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d14a      	bne.n	8000b5c <__udivmoddi4+0x160>
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d302      	bcc.n	8000ad0 <__udivmoddi4+0xd4>
 8000aca:	4282      	cmp	r2, r0
 8000acc:	f200 80f9 	bhi.w	8000cc2 <__udivmoddi4+0x2c6>
 8000ad0:	1a84      	subs	r4, r0, r2
 8000ad2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	469e      	mov	lr, r3
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d0e0      	beq.n	8000aa0 <__udivmoddi4+0xa4>
 8000ade:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ae2:	e7dd      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000ae4:	b902      	cbnz	r2, 8000ae8 <__udivmoddi4+0xec>
 8000ae6:	deff      	udf	#255	; 0xff
 8000ae8:	fab2 f282 	clz	r2, r2
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	f040 8092 	bne.w	8000c16 <__udivmoddi4+0x21a>
 8000af2:	eba1 010c 	sub.w	r1, r1, ip
 8000af6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afa:	fa1f fe8c 	uxth.w	lr, ip
 8000afe:	2601      	movs	r6, #1
 8000b00:	0c20      	lsrs	r0, r4, #16
 8000b02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b06:	fb07 1113 	mls	r1, r7, r3, r1
 8000b0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b0e:	fb0e f003 	mul.w	r0, lr, r3
 8000b12:	4288      	cmp	r0, r1
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x12c>
 8000b16:	eb1c 0101 	adds.w	r1, ip, r1
 8000b1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x12a>
 8000b20:	4288      	cmp	r0, r1
 8000b22:	f200 80cb 	bhi.w	8000cbc <__udivmoddi4+0x2c0>
 8000b26:	4643      	mov	r3, r8
 8000b28:	1a09      	subs	r1, r1, r0
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b30:	fb07 1110 	mls	r1, r7, r0, r1
 8000b34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b38:	fb0e fe00 	mul.w	lr, lr, r0
 8000b3c:	45a6      	cmp	lr, r4
 8000b3e:	d908      	bls.n	8000b52 <__udivmoddi4+0x156>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b48:	d202      	bcs.n	8000b50 <__udivmoddi4+0x154>
 8000b4a:	45a6      	cmp	lr, r4
 8000b4c:	f200 80bb 	bhi.w	8000cc6 <__udivmoddi4+0x2ca>
 8000b50:	4608      	mov	r0, r1
 8000b52:	eba4 040e 	sub.w	r4, r4, lr
 8000b56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b5a:	e79c      	b.n	8000a96 <__udivmoddi4+0x9a>
 8000b5c:	f1c6 0720 	rsb	r7, r6, #32
 8000b60:	40b3      	lsls	r3, r6
 8000b62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b72:	431c      	orrs	r4, r3
 8000b74:	40f9      	lsrs	r1, r7
 8000b76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b82:	0c20      	lsrs	r0, r4, #16
 8000b84:	fa1f fe8c 	uxth.w	lr, ip
 8000b88:	fb09 1118 	mls	r1, r9, r8, r1
 8000b8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b90:	fb08 f00e 	mul.w	r0, r8, lr
 8000b94:	4288      	cmp	r0, r1
 8000b96:	fa02 f206 	lsl.w	r2, r2, r6
 8000b9a:	d90b      	bls.n	8000bb4 <__udivmoddi4+0x1b8>
 8000b9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ba4:	f080 8088 	bcs.w	8000cb8 <__udivmoddi4+0x2bc>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f240 8085 	bls.w	8000cb8 <__udivmoddi4+0x2bc>
 8000bae:	f1a8 0802 	sub.w	r8, r8, #2
 8000bb2:	4461      	add	r1, ip
 8000bb4:	1a09      	subs	r1, r1, r0
 8000bb6:	b2a4      	uxth	r4, r4
 8000bb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000bc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc8:	458e      	cmp	lr, r1
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x1e2>
 8000bcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bd4:	d26c      	bcs.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bd6:	458e      	cmp	lr, r1
 8000bd8:	d96a      	bls.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bda:	3802      	subs	r0, #2
 8000bdc:	4461      	add	r1, ip
 8000bde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000be2:	fba0 9402 	umull	r9, r4, r0, r2
 8000be6:	eba1 010e 	sub.w	r1, r1, lr
 8000bea:	42a1      	cmp	r1, r4
 8000bec:	46c8      	mov	r8, r9
 8000bee:	46a6      	mov	lr, r4
 8000bf0:	d356      	bcc.n	8000ca0 <__udivmoddi4+0x2a4>
 8000bf2:	d053      	beq.n	8000c9c <__udivmoddi4+0x2a0>
 8000bf4:	b15d      	cbz	r5, 8000c0e <__udivmoddi4+0x212>
 8000bf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000bfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000c02:	fa22 f306 	lsr.w	r3, r2, r6
 8000c06:	40f1      	lsrs	r1, r6
 8000c08:	431f      	orrs	r7, r3
 8000c0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c0e:	2600      	movs	r6, #0
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	f1c2 0320 	rsb	r3, r2, #32
 8000c1a:	40d8      	lsrs	r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	fa21 f303 	lsr.w	r3, r1, r3
 8000c24:	4091      	lsls	r1, r2
 8000c26:	4301      	orrs	r1, r0
 8000c28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2c:	fa1f fe8c 	uxth.w	lr, ip
 8000c30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c34:	fb07 3610 	mls	r6, r7, r0, r3
 8000c38:	0c0b      	lsrs	r3, r1, #16
 8000c3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c42:	429e      	cmp	r6, r3
 8000c44:	fa04 f402 	lsl.w	r4, r4, r2
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x260>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c52:	d22f      	bcs.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c54:	429e      	cmp	r6, r3
 8000c56:	d92d      	bls.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1b9b      	subs	r3, r3, r6
 8000c5e:	b289      	uxth	r1, r1
 8000c60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c64:	fb07 3316 	mls	r3, r7, r6, r3
 8000c68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c70:	428b      	cmp	r3, r1
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x28a>
 8000c74:	eb1c 0101 	adds.w	r1, ip, r1
 8000c78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c7c:	d216      	bcs.n	8000cac <__udivmoddi4+0x2b0>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d914      	bls.n	8000cac <__udivmoddi4+0x2b0>
 8000c82:	3e02      	subs	r6, #2
 8000c84:	4461      	add	r1, ip
 8000c86:	1ac9      	subs	r1, r1, r3
 8000c88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c8c:	e738      	b.n	8000b00 <__udivmoddi4+0x104>
 8000c8e:	462e      	mov	r6, r5
 8000c90:	4628      	mov	r0, r5
 8000c92:	e705      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000c94:	4606      	mov	r6, r0
 8000c96:	e6e3      	b.n	8000a60 <__udivmoddi4+0x64>
 8000c98:	4618      	mov	r0, r3
 8000c9a:	e6f8      	b.n	8000a8e <__udivmoddi4+0x92>
 8000c9c:	454b      	cmp	r3, r9
 8000c9e:	d2a9      	bcs.n	8000bf4 <__udivmoddi4+0x1f8>
 8000ca0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ca4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ca8:	3801      	subs	r0, #1
 8000caa:	e7a3      	b.n	8000bf4 <__udivmoddi4+0x1f8>
 8000cac:	4646      	mov	r6, r8
 8000cae:	e7ea      	b.n	8000c86 <__udivmoddi4+0x28a>
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	e794      	b.n	8000bde <__udivmoddi4+0x1e2>
 8000cb4:	4640      	mov	r0, r8
 8000cb6:	e7d1      	b.n	8000c5c <__udivmoddi4+0x260>
 8000cb8:	46d0      	mov	r8, sl
 8000cba:	e77b      	b.n	8000bb4 <__udivmoddi4+0x1b8>
 8000cbc:	3b02      	subs	r3, #2
 8000cbe:	4461      	add	r1, ip
 8000cc0:	e732      	b.n	8000b28 <__udivmoddi4+0x12c>
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	e709      	b.n	8000ada <__udivmoddi4+0xde>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	e742      	b.n	8000b52 <__udivmoddi4+0x156>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <main>:
/***********************************************************************************
* Function: main														   		   *
* Description: Defined in the linker file as the start of the application.         *
************************************************************************************/
int main()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	/* Calls for system initialization. */
	SystemManager_Init();
 8000cd4:	f00d f9de 	bl	800e094 <SystemManager_Init>
	/* Initialize the kernel of FreeRTOS. */
	osKernelInitialize();
 8000cd8:	f009 f936 	bl	8009f48 <osKernelInitialize>
	/* Initialize the FreeRTOS with all its objects.*/
	MX_FREERTOS_Init();
 8000cdc:	f001 fe62 	bl	80029a4 <MX_FREERTOS_Init>
	/* Start the kernel and the scheduler and FreeRTOS takes
	 * control of the application execution. */
	osKernelStart();
 8000ce0:	f009 f956 	bl	8009f90 <osKernelStart>
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <Btc_RequestState>:
/***********************************************************************************
* Function: Btc_RequestState													   *
* Description: Process bluetooth command for request state 					       *
************************************************************************************/
VOID Btc_RequestState()
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	if(Btc_ReceivedDataOnBluetooth == 99)
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <Btc_RequestState+0x14>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b63      	cmp	r3, #99	; 0x63
 8000cf6:	d101      	bne.n	8000cfc <Btc_RequestState+0x10>
	{
		SystemManager_PerformReset();
 8000cf8:	f00d fa04 	bl	800e104 <SystemManager_PerformReset>
	}
	else
	{
		/* do nothing */
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200000b2 	.word	0x200000b2

08000d04 <Btc_RxVal>:
/***********************************************************************************
* Function: Btc_RxVal													   		   *
* Description: Process bluetooth commands.	 		   							   *
************************************************************************************/
VOID Btc_RxVal()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	if(Rte_Call_Crc_R_CrcPort_Crc_VerifyUartData() == E_OK)
 8000d08:	f00c fcd6 	bl	800d6b8 <Crc_VerifyUartData>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 81a7 	bne.w	8001062 <Btc_RxVal+0x35e>
	{
		/* Process the command on each case and update the respective variable. */
		switch(Btc_ReceivedDataOnBluetooth)
 8000d14:	4bb0      	ldr	r3, [pc, #704]	; (8000fd8 <Btc_RxVal+0x2d4>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	2b19      	cmp	r3, #25
 8000d1c:	f200 8157 	bhi.w	8000fce <Btc_RxVal+0x2ca>
 8000d20:	a201      	add	r2, pc, #4	; (adr r2, 8000d28 <Btc_RxVal+0x24>)
 8000d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d26:	bf00      	nop
 8000d28:	08000e21 	.word	0x08000e21
 8000d2c:	08000e2f 	.word	0x08000e2f
 8000d30:	08000e3d 	.word	0x08000e3d
 8000d34:	08000e5b 	.word	0x08000e5b
 8000d38:	08000fcf 	.word	0x08000fcf
 8000d3c:	08000fcf 	.word	0x08000fcf
 8000d40:	08000e73 	.word	0x08000e73
 8000d44:	08000e97 	.word	0x08000e97
 8000d48:	08000eaf 	.word	0x08000eaf
 8000d4c:	08000ed3 	.word	0x08000ed3
 8000d50:	08000eeb 	.word	0x08000eeb
 8000d54:	08000f03 	.word	0x08000f03
 8000d58:	08000f1b 	.word	0x08000f1b
 8000d5c:	08000f33 	.word	0x08000f33
 8000d60:	08000f4b 	.word	0x08000f4b
 8000d64:	08000f61 	.word	0x08000f61
 8000d68:	08000f77 	.word	0x08000f77
 8000d6c:	08000f8d 	.word	0x08000f8d
 8000d70:	08000fa3 	.word	0x08000fa3
 8000d74:	08000fb9 	.word	0x08000fb9
 8000d78:	08000d91 	.word	0x08000d91
 8000d7c:	08000da9 	.word	0x08000da9
 8000d80:	08000dc1 	.word	0x08000dc1
 8000d84:	08000dd9 	.word	0x08000dd9
 8000d88:	08000df1 	.word	0x08000df1
 8000d8c:	08000e09 	.word	0x08000e09
		{
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000d90:	4b92      	ldr	r3, [pc, #584]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	f040 811c 	bne.w	8000fd2 <Btc_RxVal+0x2ce>
				{
					Btc_ReverseLight = STD_HIGH;
 8000d9a:	4b91      	ldr	r3, [pc, #580]	; (8000fe0 <Btc_RxVal+0x2dc>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 8000da0:	488f      	ldr	r0, [pc, #572]	; (8000fe0 <Btc_RxVal+0x2dc>)
 8000da2:	f00c fb2f 	bl	800d404 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000da6:	e114      	b.n	8000fd2 <Btc_RxVal+0x2ce>
			case BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000da8:	4b8c      	ldr	r3, [pc, #560]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	f040 812f 	bne.w	8001010 <Btc_RxVal+0x30c>
				{
					Btc_ReverseLight = STD_LOW;
 8000db2:	4b8b      	ldr	r3, [pc, #556]	; (8000fe0 <Btc_RxVal+0x2dc>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(&Btc_ReverseLight);
 8000db8:	4889      	ldr	r0, [pc, #548]	; (8000fe0 <Btc_RxVal+0x2dc>)
 8000dba:	f00c fb23 	bl	800d404 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000dbe:	e127      	b.n	8001010 <Btc_RxVal+0x30c>
			case BTC_RX_EXTLIGHTS_POSITIONZERO:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000dc0:	4b86      	ldr	r3, [pc, #536]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	f040 8125 	bne.w	8001014 <Btc_RxVal+0x310>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONZERO;
 8000dca:	4b86      	ldr	r3, [pc, #536]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000dcc:	2217      	movs	r2, #23
 8000dce:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000dd0:	4884      	ldr	r0, [pc, #528]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000dd2:	f00c fb37 	bl	800d444 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000dd6:	e11d      	b.n	8001014 <Btc_RxVal+0x310>
			case BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000dd8:	4b80      	ldr	r3, [pc, #512]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	f040 811b 	bne.w	8001018 <Btc_RxVal+0x314>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 8000de2:	4b80      	ldr	r3, [pc, #512]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000de4:	2218      	movs	r2, #24
 8000de6:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000de8:	487e      	ldr	r0, [pc, #504]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000dea:	f00c fb2b 	bl	800d444 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000dee:	e113      	b.n	8001018 <Btc_RxVal+0x314>
			case BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000df0:	4b7a      	ldr	r3, [pc, #488]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	f040 8111 	bne.w	800101c <Btc_RxVal+0x318>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 8000dfa:	4b7a      	ldr	r3, [pc, #488]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000dfc:	2219      	movs	r2, #25
 8000dfe:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000e00:	4878      	ldr	r0, [pc, #480]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000e02:	f00c fb1f 	bl	800d444 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000e06:	e109      	b.n	800101c <Btc_RxVal+0x318>
			case BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000e08:	4b74      	ldr	r3, [pc, #464]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	f040 8107 	bne.w	8001020 <Btc_RxVal+0x31c>
				{
					Btc_LightSwitch = BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 8000e12:	4b74      	ldr	r3, [pc, #464]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000e14:	221a      	movs	r2, #26
 8000e16:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(&Btc_LightSwitch);
 8000e18:	4872      	ldr	r0, [pc, #456]	; (8000fe4 <Btc_RxVal+0x2e0>)
 8000e1a:	f00c fb13 	bl	800d444 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000e1e:	e0ff      	b.n	8001020 <Btc_RxVal+0x31c>
			case BTC_RX_CENLOC_ON:
				Btc_CenLoc = STD_HIGH;
 8000e20:	4b71      	ldr	r3, [pc, #452]	; (8000fe8 <Btc_RxVal+0x2e4>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 8000e26:	4870      	ldr	r0, [pc, #448]	; (8000fe8 <Btc_RxVal+0x2e4>)
 8000e28:	f00c facc 	bl	800d3c4 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 8000e2c:	e119      	b.n	8001062 <Btc_RxVal+0x35e>
			case BTC_RX_CENLOC_OFF:
				Btc_CenLoc = STD_LOW;
 8000e2e:	4b6e      	ldr	r3, [pc, #440]	; (8000fe8 <Btc_RxVal+0x2e4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
				Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(&Btc_CenLoc);
 8000e34:	486c      	ldr	r0, [pc, #432]	; (8000fe8 <Btc_RxVal+0x2e4>)
 8000e36:	f00c fac5 	bl	800d3c4 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>
				break;
 8000e3a:	e112      	b.n	8001062 <Btc_RxVal+0x35e>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000e3c:	4b67      	ldr	r3, [pc, #412]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	f040 80ef 	bne.w	8001024 <Btc_RxVal+0x320>
				{
					Btc_HighBeam = STD_HIGH;
 8000e46:	4b69      	ldr	r3, [pc, #420]	; (8000fec <Btc_RxVal+0x2e8>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
					Btc_FlashHighBeam = STD_LOW;
 8000e4c:	4b68      	ldr	r3, [pc, #416]	; (8000ff0 <Btc_RxVal+0x2ec>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 8000e52:	4866      	ldr	r0, [pc, #408]	; (8000fec <Btc_RxVal+0x2e8>)
 8000e54:	f00c fb06 	bl	800d464 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000e58:	e0e4      	b.n	8001024 <Btc_RxVal+0x320>
			case BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000e5a:	4b60      	ldr	r3, [pc, #384]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	f040 80e2 	bne.w	8001028 <Btc_RxVal+0x324>
				{
					Btc_HighBeam = STD_LOW;
 8000e64:	4b61      	ldr	r3, [pc, #388]	; (8000fec <Btc_RxVal+0x2e8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(&Btc_HighBeam);
 8000e6a:	4860      	ldr	r0, [pc, #384]	; (8000fec <Btc_RxVal+0x2e8>)
 8000e6c:	f00c fafa 	bl	800d464 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000e70:	e0da      	b.n	8001028 <Btc_RxVal+0x324>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000e72:	4b5a      	ldr	r3, [pc, #360]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	f040 80d8 	bne.w	800102c <Btc_RxVal+0x328>
				{
					Btc_TurnSignalLeft = STD_HIGH;
 8000e7c:	4b5d      	ldr	r3, [pc, #372]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalRight = STD_LOW;
 8000e82:	4b5d      	ldr	r3, [pc, #372]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8000e88:	485a      	ldr	r0, [pc, #360]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000e8a:	f00c fb0b 	bl	800d4a4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8000e8e:	485a      	ldr	r0, [pc, #360]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000e90:	f00c fb18 	bl	800d4c4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000e94:	e0ca      	b.n	800102c <Btc_RxVal+0x328>
			case BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000e96:	4b51      	ldr	r3, [pc, #324]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	f040 80c8 	bne.w	8001030 <Btc_RxVal+0x32c>
				{
					Btc_TurnSignalLeft = STD_LOW;
 8000ea0:	4b54      	ldr	r3, [pc, #336]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8000ea6:	4853      	ldr	r0, [pc, #332]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000ea8:	f00c fafc 	bl	800d4a4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000eac:	e0c0      	b.n	8001030 <Btc_RxVal+0x32c>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000eae:	4b4b      	ldr	r3, [pc, #300]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	f040 80be 	bne.w	8001034 <Btc_RxVal+0x330>
				{
					Btc_TurnSignalRight = STD_HIGH;
 8000eb8:	4b4f      	ldr	r3, [pc, #316]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
					Btc_TurnSignalLeft = STD_LOW;
 8000ebe:	4b4d      	ldr	r3, [pc, #308]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(&Btc_TurnSignalLeft);
 8000ec4:	484b      	ldr	r0, [pc, #300]	; (8000ff4 <Btc_RxVal+0x2f0>)
 8000ec6:	f00c faed 	bl	800d4a4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8000eca:	484b      	ldr	r0, [pc, #300]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000ecc:	f00c fafa 	bl	800d4c4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000ed0:	e0b0      	b.n	8001034 <Btc_RxVal+0x330>
			case BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000ed2:	4b42      	ldr	r3, [pc, #264]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	f040 80ae 	bne.w	8001038 <Btc_RxVal+0x334>
				{
					Btc_TurnSignalRight = STD_LOW;
 8000edc:	4b46      	ldr	r3, [pc, #280]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(&Btc_TurnSignalRight);
 8000ee2:	4845      	ldr	r0, [pc, #276]	; (8000ff8 <Btc_RxVal+0x2f4>)
 8000ee4:	f00c faee 	bl	800d4c4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000ee8:	e0a6      	b.n	8001038 <Btc_RxVal+0x334>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000eea:	4b3c      	ldr	r3, [pc, #240]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	f040 80a4 	bne.w	800103c <Btc_RxVal+0x338>
				{
					Btc_HazardLight = STD_HIGH;
 8000ef4:	4b41      	ldr	r3, [pc, #260]	; (8000ffc <Btc_RxVal+0x2f8>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 8000efa:	4840      	ldr	r0, [pc, #256]	; (8000ffc <Btc_RxVal+0x2f8>)
 8000efc:	f00c faf2 	bl	800d4e4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f00:	e09c      	b.n	800103c <Btc_RxVal+0x338>
			case BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f02:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	f040 809a 	bne.w	8001040 <Btc_RxVal+0x33c>
				{
					Btc_HazardLight = STD_LOW;
 8000f0c:	4b3b      	ldr	r3, [pc, #236]	; (8000ffc <Btc_RxVal+0x2f8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(&Btc_HazardLight);
 8000f12:	483a      	ldr	r0, [pc, #232]	; (8000ffc <Btc_RxVal+0x2f8>)
 8000f14:	f00c fae6 	bl	800d4e4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f18:	e092      	b.n	8001040 <Btc_RxVal+0x33c>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f1a:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	f040 8090 	bne.w	8001044 <Btc_RxVal+0x340>
				{
					Btc_FrontFogLight = STD_HIGH;
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <Btc_RxVal+0x2fc>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 8000f2a:	4835      	ldr	r0, [pc, #212]	; (8001000 <Btc_RxVal+0x2fc>)
 8000f2c:	f00c faaa 	bl	800d484 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f30:	e088      	b.n	8001044 <Btc_RxVal+0x340>
			case BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f32:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	f040 8086 	bne.w	8001048 <Btc_RxVal+0x344>
				{
					Btc_FrontFogLight = STD_LOW;
 8000f3c:	4b30      	ldr	r3, [pc, #192]	; (8001000 <Btc_RxVal+0x2fc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(&Btc_FrontFogLight);
 8000f42:	482f      	ldr	r0, [pc, #188]	; (8001000 <Btc_RxVal+0x2fc>)
 8000f44:	f00c fa9e 	bl	800d484 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f48:	e07e      	b.n	8001048 <Btc_RxVal+0x344>
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d17c      	bne.n	800104c <Btc_RxVal+0x348>
				{
					Btc_RearFogLight = STD_HIGH;
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <Btc_RxVal+0x300>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 8000f58:	482a      	ldr	r0, [pc, #168]	; (8001004 <Btc_RxVal+0x300>)
 8000f5a:	f00c fad3 	bl	800d504 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f5e:	e075      	b.n	800104c <Btc_RxVal+0x348>
			case BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d173      	bne.n	8001050 <Btc_RxVal+0x34c>
				{
					Btc_RearFogLight = STD_LOW;
 8000f68:	4b26      	ldr	r3, [pc, #152]	; (8001004 <Btc_RxVal+0x300>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(&Btc_RearFogLight);
 8000f6e:	4825      	ldr	r0, [pc, #148]	; (8001004 <Btc_RxVal+0x300>)
 8000f70:	f00c fac8 	bl	800d504 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f74:	e06c      	b.n	8001050 <Btc_RxVal+0x34c>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d16a      	bne.n	8001054 <Btc_RxVal+0x350>
				{
					Btc_BrakeLight = STD_HIGH;
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <Btc_RxVal+0x304>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 8000f84:	4820      	ldr	r0, [pc, #128]	; (8001008 <Btc_RxVal+0x304>)
 8000f86:	f00c fa4d 	bl	800d424 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000f8a:	e063      	b.n	8001054 <Btc_RxVal+0x350>
			case BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d161      	bne.n	8001058 <Btc_RxVal+0x354>
				{
					Btc_BrakeLight = STD_LOW;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <Btc_RxVal+0x304>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
					Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(&Btc_BrakeLight);
 8000f9a:	481b      	ldr	r0, [pc, #108]	; (8001008 <Btc_RxVal+0x304>)
 8000f9c:	f00c fa42 	bl	800d424 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fa0:	e05a      	b.n	8001058 <Btc_RxVal+0x354>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d158      	bne.n	800105c <Btc_RxVal+0x358>
				{
					Btc_IntLights = STD_HIGH;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <Btc_RxVal+0x308>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8000fb0:	4816      	ldr	r0, [pc, #88]	; (800100c <Btc_RxVal+0x308>)
 8000fb2:	f00c fae7 	bl	800d584 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fb6:	e051      	b.n	800105c <Btc_RxVal+0x358>
			case BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
				if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH)
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <Btc_RxVal+0x2d8>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d14f      	bne.n	8001060 <Btc_RxVal+0x35c>
				{
					Btc_IntLights = STD_LOW;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <Btc_RxVal+0x308>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
					Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(&Btc_IntLights);
 8000fc6:	4811      	ldr	r0, [pc, #68]	; (800100c <Btc_RxVal+0x308>)
 8000fc8:	f00c fadc 	bl	800d584 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>
				}
				else
				{
					/* do nothing */
				}
				break;
 8000fcc:	e048      	b.n	8001060 <Btc_RxVal+0x35c>
			default:
				break;
 8000fce:	bf00      	nop
 8000fd0:	e047      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8000fd2:	bf00      	nop
 8000fd4:	e045      	b.n	8001062 <Btc_RxVal+0x35e>
 8000fd6:	bf00      	nop
 8000fd8:	200000b2 	.word	0x200000b2
 8000fdc:	200000bf 	.word	0x200000bf
 8000fe0:	200000bd 	.word	0x200000bd
 8000fe4:	200000b4 	.word	0x200000b4
 8000fe8:	200000b3 	.word	0x200000b3
 8000fec:	200000b5 	.word	0x200000b5
 8000ff0:	200000b6 	.word	0x200000b6
 8000ff4:	200000b8 	.word	0x200000b8
 8000ff8:	200000b9 	.word	0x200000b9
 8000ffc:	200000ba 	.word	0x200000ba
 8001000:	200000b7 	.word	0x200000b7
 8001004:	200000bc 	.word	0x200000bc
 8001008:	200000bb 	.word	0x200000bb
 800100c:	200000be 	.word	0x200000be
				break;
 8001010:	bf00      	nop
 8001012:	e026      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001014:	bf00      	nop
 8001016:	e024      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001018:	bf00      	nop
 800101a:	e022      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 800101c:	bf00      	nop
 800101e:	e020      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001020:	bf00      	nop
 8001022:	e01e      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001024:	bf00      	nop
 8001026:	e01c      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001028:	bf00      	nop
 800102a:	e01a      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 800102c:	bf00      	nop
 800102e:	e018      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001030:	bf00      	nop
 8001032:	e016      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001034:	bf00      	nop
 8001036:	e014      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001038:	bf00      	nop
 800103a:	e012      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 800103c:	bf00      	nop
 800103e:	e010      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001040:	bf00      	nop
 8001042:	e00e      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001044:	bf00      	nop
 8001046:	e00c      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001048:	bf00      	nop
 800104a:	e00a      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 800104c:	bf00      	nop
 800104e:	e008      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001050:	bf00      	nop
 8001052:	e006      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001054:	bf00      	nop
 8001056:	e004      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001058:	bf00      	nop
 800105a:	e002      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 800105c:	bf00      	nop
 800105e:	e000      	b.n	8001062 <Btc_RxVal+0x35e>
				break;
 8001060:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop

08001068 <Btc_MainFunction>:
/***********************************************************************************
* Function: Btc_MainFunction											 		   *
* Description: Process bluetooth communication states.					           *
************************************************************************************/
VOID Btc_MainFunction()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	Btc_RxVal();
 800106c:	f7ff fe4a 	bl	8000d04 <Btc_RxVal>
	Btc_RequestState();
 8001070:	f7ff fe3c 	bl	8000cec <Btc_RequestState>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <CenLoc_State>:
/***********************************************************************************
* Function: CenLoc_State													   	   *
* Description: Process the current and previous state of the central lock.		   *
************************************************************************************/
VOID CenLoc_State()
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	/* Every time the state of the central lock changes
	 * set the alarm to off. */
	CenLoc_SecAlmStateToOff();
 800107c:	f000 f854 	bl	8001128 <CenLoc_SecAlmStateToOff>
	/* If the current state is different than the previous state
	 * update the variables respectively.
	 * Initialize the security alarm application.
	 * Calls for start of OS timer for lock unlock sequence.*/
	if(CenLoc_PreviousState != CenLoc_CurrentState)
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <CenLoc_State+0x88>)
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <CenLoc_State+0x8c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d036      	beq.n	80010fa <CenLoc_State+0x82>
	{
		CenLoc_PreviousStateFlag 	= CenLoc_PreviousState;
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <CenLoc_State+0x88>)
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <CenLoc_State+0x90>)
 8001092:	701a      	strb	r2, [r3, #0]
		CenLoc_PreviousState 		= CenLoc_CurrentState;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <CenLoc_State+0x8c>)
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <CenLoc_State+0x88>)
 800109a:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter 		= STD_LOW;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <CenLoc_State+0x94>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter 	= STD_LOW;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <CenLoc_State+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
		CenLoc_CyclicAlarmCounter	= STD_LOW;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <CenLoc_State+0x9c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
		CenLoc_TurnOnLedCounter		= STD_LOW;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <CenLoc_State+0xa0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 80010b4:	f001 f942 	bl	800233c <SecAlm_Init>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_CenLoc_LockUnlockSequence_TimerHandle, 250);
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <CenLoc_State+0xa4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	21fa      	movs	r1, #250	; 0xfa
 80010be:	4618      	mov	r0, r3
 80010c0:	f00c fad0 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 80010c4:	4811      	ldr	r0, [pc, #68]	; (800110c <CenLoc_State+0x94>)
 80010c6:	f00c f861 	bl	800d18c <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 80010ca:	4812      	ldr	r0, [pc, #72]	; (8001114 <CenLoc_State+0x9c>)
 80010cc:	f00c f86e 	bl	800d1ac <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
		Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 80010d0:	4811      	ldr	r0, [pc, #68]	; (8001118 <CenLoc_State+0xa0>)
 80010d2:	f00c f87b 	bl	800d1cc <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(CenLoc_FollowMeHomeCounter);
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <CenLoc_State+0x98>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f00c f886 	bl	800d1ec <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLed_TurnOnCyclic_TimerHandle);
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <CenLoc_State+0xa8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00c faca 	bl	800d67e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <CenLoc_State+0xac>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f00c fac5 	bl	800d67e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f001 f95f 	bl	80023b8 <SecAlm_ToggleAlarmLed>
	}
	else
	{
		/* do nothing */
	}
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000c0 	.word	0x200000c0
 8001104:	200000bf 	.word	0x200000bf
 8001108:	200000c7 	.word	0x200000c7
 800110c:	200000c3 	.word	0x200000c3
 8001110:	200000c5 	.word	0x200000c5
 8001114:	200000c4 	.word	0x200000c4
 8001118:	200000c6 	.word	0x200000c6
 800111c:	20000268 	.word	0x20000268
 8001120:	2000026c 	.word	0x2000026c
 8001124:	20000270 	.word	0x20000270

08001128 <CenLoc_SecAlmStateToOff>:
/***********************************************************************************
* Function: CenLoc_SecAlmStateToOff												   *
* Description: Turn off the security alarm.										   *
************************************************************************************/
VOID CenLoc_SecAlmStateToOff()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	/* The central lock is on, the security alarm goes off. */
	if(CenLoc_CurrentState == STD_HIGH)
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <CenLoc_SecAlmStateToOff+0x14>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d101      	bne.n	8001138 <CenLoc_SecAlmStateToOff+0x10>
	{
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_Init();
 8001134:	f001 f902 	bl	800233c <SecAlm_Init>
	}
	else
	{
		/* do nothing */
	}
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200000bf 	.word	0x200000bf

08001140 <CenLoc_FollowMeHome>:
/***********************************************************************************
* Function: CenLoc_FollowMeHome												       *
* Description: Process the state of the follow me home.					 		   *
************************************************************************************/
VOID CenLoc_FollowMeHome()
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	/* Follow me home is on as long as the timer is on. */
	if(CenLoc_FollowMeHomeCounter == 1)
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <CenLoc_FollowMeHome+0x40>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d103      	bne.n	8001154 <CenLoc_FollowMeHome+0x14>
	{
		CenLoc_FollowMeHomeState = STD_HIGH;
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <CenLoc_FollowMeHome+0x44>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001152:	e013      	b.n	800117c <CenLoc_FollowMeHome+0x3c>
	else if(CenLoc_FollowMeHomeCounter == 2)
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <CenLoc_FollowMeHome+0x40>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d10f      	bne.n	800117c <CenLoc_FollowMeHome+0x3c>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_FollowMeHome_TimerHandle);
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <CenLoc_FollowMeHome+0x48>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f00c fa8c 	bl	800d67e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		CenLoc_FollowMeHomeState = STD_LOW;
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <CenLoc_FollowMeHome+0x44>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
		CenLoc_FollowMeHomeCounter = 2;
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <CenLoc_FollowMeHome+0x40>)
 800116e:	2202      	movs	r2, #2
 8001170:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(CenLoc_FollowMeHomeCounter);
 8001172:	4b03      	ldr	r3, [pc, #12]	; (8001180 <CenLoc_FollowMeHome+0x40>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f00c f838 	bl	800d1ec <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200000c5 	.word	0x200000c5
 8001184:	200000c1 	.word	0x200000c1
 8001188:	20000274 	.word	0x20000274

0800118c <CenLoc_UnlockSequence>:
/***********************************************************************************
* Function: CenLoc_UnlockSequence												   *
* Description: Process the unlock sequence. 		   							   *
************************************************************************************/
VOID CenLoc_UnlockSequence()
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	/* Stop the timer used for the security alarm LED. */
	Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLed_TurnOnCyclic_TimerHandle);
 8001190:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <CenLoc_UnlockSequence+0x12c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f00c fa72 	bl	800d67e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	/* Process follow me home state. */
	CenLoc_FollowMeHome();
 800119a:	f7ff ffd1 	bl	8001140 <CenLoc_FollowMeHome>
	/* Sets previous state to high so that on locking it is taken into consideration. */
	localPreviousState = STD_HIGH;
 800119e:	4b47      	ldr	r3, [pc, #284]	; (80012bc <CenLoc_UnlockSequence+0x130>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
	/* Unlocking sequence consists of triggering the hazard lights twice on and twice off.*/
	if(CenLoc_BlinkCounter <= 3)
 80011a4:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <CenLoc_UnlockSequence+0x134>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d871      	bhi.n	8001290 <CenLoc_UnlockSequence+0x104>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80011ac:	4b45      	ldr	r3, [pc, #276]	; (80012c4 <CenLoc_UnlockSequence+0x138>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00c fa55 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == STD_LOW)
 80011ba:	4b43      	ldr	r3, [pc, #268]	; (80012c8 <CenLoc_UnlockSequence+0x13c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f009 f895 	bl	800a2ee <osTimerIsRunning>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d106      	bne.n	80011d8 <CenLoc_UnlockSequence+0x4c>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 20000);
 80011ca:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <CenLoc_UnlockSequence+0x13c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f644 6120 	movw	r1, #20000	; 0x4e20
 80011d2:	4618      	mov	r0, r3
 80011d4:	f00c fa46 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = STD_HIGH;
 80011d8:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <CenLoc_UnlockSequence+0x140>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(CenLoc_FollowMeHomeCounter);
 80011de:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <CenLoc_UnlockSequence+0x140>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f00c f802 	bl	800d1ec <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and the buzzer. */
		switch(CenLoc_BlinkCounter)
 80011e8:	4b35      	ldr	r3, [pc, #212]	; (80012c0 <CenLoc_UnlockSequence+0x134>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d85f      	bhi.n	80012b0 <CenLoc_UnlockSequence+0x124>
 80011f0:	a201      	add	r2, pc, #4	; (adr r2, 80011f8 <CenLoc_UnlockSequence+0x6c>)
 80011f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f6:	bf00      	nop
 80011f8:	08001209 	.word	0x08001209
 80011fc:	0800122b 	.word	0x0800122b
 8001200:	0800124d 	.word	0x0800124d
 8001204:	0800126f 	.word	0x0800126f
		{
			case 0:
				CenLoc_BlinkState = STD_HIGH;
 8001208:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 800120e:	2108      	movs	r1, #8
 8001210:	4830      	ldr	r0, [pc, #192]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 8001212:	f00c f865 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001216:	210c      	movs	r1, #12
 8001218:	482e      	ldr	r0, [pc, #184]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 800121a:	f00c f861 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f964 	bl	80014f0 <CenLoc_ToggleBuzzer>
				break;
 8001228:	e043      	b.n	80012b2 <CenLoc_UnlockSequence+0x126>
			case 1:
				CenLoc_BlinkState = STD_LOW;
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001230:	2108      	movs	r1, #8
 8001232:	4828      	ldr	r0, [pc, #160]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 8001234:	f00c f854 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001238:	210c      	movs	r1, #12
 800123a:	4826      	ldr	r0, [pc, #152]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 800123c:	f00c f850 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001240:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f953 	bl	80014f0 <CenLoc_ToggleBuzzer>
				break;
 800124a:	e032      	b.n	80012b2 <CenLoc_UnlockSequence+0x126>
			case 2:
				CenLoc_BlinkState = STD_HIGH;
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001252:	2108      	movs	r1, #8
 8001254:	481f      	ldr	r0, [pc, #124]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 8001256:	f00c f843 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800125a:	210c      	movs	r1, #12
 800125c:	481d      	ldr	r0, [pc, #116]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 800125e:	f00c f83f 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f942 	bl	80014f0 <CenLoc_ToggleBuzzer>
				break;
 800126c:	e021      	b.n	80012b2 <CenLoc_UnlockSequence+0x126>
			case 3:
				CenLoc_BlinkState = STD_LOW;
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001274:	2108      	movs	r1, #8
 8001276:	4817      	ldr	r0, [pc, #92]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 8001278:	f00c f832 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800127c:	210c      	movs	r1, #12
 800127e:	4815      	ldr	r0, [pc, #84]	; (80012d4 <CenLoc_UnlockSequence+0x148>)
 8001280:	f00c f82e 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f931 	bl	80014f0 <CenLoc_ToggleBuzzer>
				break;
 800128e:	e010      	b.n	80012b2 <CenLoc_UnlockSequence+0x126>
			default:
				break;
		}
	}/* After the sequence is completed, stop the timers and set the variables related to this sequence to out of bounds values to prevent triggering when not requested. */
	else if(CenLoc_BlinkCounter >= 3)
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <CenLoc_UnlockSequence+0x134>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d90c      	bls.n	80012b2 <CenLoc_UnlockSequence+0x126>
	{
		CenLoc_BlinkState = 2;
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <CenLoc_UnlockSequence+0x144>)
 800129a:	2202      	movs	r2, #2
 800129c:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 6;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <CenLoc_UnlockSequence+0x134>)
 80012a0:	2206      	movs	r2, #6
 80012a2:	701a      	strb	r2, [r3, #0]
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <CenLoc_UnlockSequence+0x14c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f00c f9e8 	bl	800d67e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
	}
	else
	{
		/* do nothing */
	}
}
 80012ae:	e000      	b.n	80012b2 <CenLoc_UnlockSequence+0x126>
				break;
 80012b0:	bf00      	nop
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000026c 	.word	0x2000026c
 80012bc:	200000c8 	.word	0x200000c8
 80012c0:	200000c3 	.word	0x200000c3
 80012c4:	20000278 	.word	0x20000278
 80012c8:	20000274 	.word	0x20000274
 80012cc:	200000c5 	.word	0x200000c5
 80012d0:	200000c2 	.word	0x200000c2
 80012d4:	200004b0 	.word	0x200004b0
 80012d8:	20000268 	.word	0x20000268

080012dc <CenLoc_LockSequence>:
/***********************************************************************************
* Function: CenLoc_LockSequence													   *
* Description: Process the lock sequence.								 		   *
************************************************************************************/
VOID CenLoc_LockSequence()
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	/* Process follow me home state.*/
	CenLoc_FollowMeHome();
 80012e0:	f7ff ff2e 	bl	8001140 <CenLoc_FollowMeHome>
	/* If the central lock has been on previously
	 * and the variable related to the state of the timer is less than the value of
	 * how many times the hazard lights should turn on on locking, proceed with the processing. */
	if(CenLoc_BlinkCounter <= STD_HIGH && localPreviousState == STD_HIGH)
 80012e4:	4b33      	ldr	r3, [pc, #204]	; (80013b4 <CenLoc_LockSequence+0xd8>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d84f      	bhi.n	800138c <CenLoc_LockSequence+0xb0>
 80012ec:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <CenLoc_LockSequence+0xdc>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d14b      	bne.n	800138c <CenLoc_LockSequence+0xb0>
	{
		/* On and off period for the hazard lights and buzzer is defined in the OS timer start call. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80012f4:	4b31      	ldr	r3, [pc, #196]	; (80013bc <CenLoc_LockSequence+0xe0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00c f9b1 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		/* Start the OS timer for the follow me home. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_FollowMeHome_TimerHandle) == STD_LOW)
 8001302:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <CenLoc_LockSequence+0xe4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f008 fff1 	bl	800a2ee <osTimerIsRunning>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d106      	bne.n	8001320 <CenLoc_LockSequence+0x44>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_FollowMeHome_TimerHandle, 20000);
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <CenLoc_LockSequence+0xe4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f644 6120 	movw	r1, #20000	; 0x4e20
 800131a:	4618      	mov	r0, r3
 800131c:	f00c f9a2 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		{
			/* do nothing */
		}
		/* Set the follow me home timer state variable to one to prevent activation of the follow me home
		 * when it is not requested. Upon expiration, the timer callback increments this variable. */
		CenLoc_FollowMeHomeCounter = STD_HIGH;
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <CenLoc_LockSequence+0xe8>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(CenLoc_FollowMeHomeCounter);
 8001326:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <CenLoc_LockSequence+0xe8>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f00b ff5e 	bl	800d1ec <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
		/* Process the on off states of the hazard lights and buzzer. */
		switch(CenLoc_BlinkCounter)
 8001330:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <CenLoc_LockSequence+0xd8>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <CenLoc_LockSequence+0x62>
 8001338:	2b01      	cmp	r3, #1
 800133a:	d011      	beq.n	8001360 <CenLoc_LockSequence+0x84>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
				localPreviousState = STD_LOW;
				break;
			default:
				break;
 800133c:	e024      	b.n	8001388 <CenLoc_LockSequence+0xac>
				CenLoc_BlinkState = STD_HIGH;
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <CenLoc_LockSequence+0xec>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001344:	2108      	movs	r1, #8
 8001346:	4821      	ldr	r0, [pc, #132]	; (80013cc <CenLoc_LockSequence+0xf0>)
 8001348:	f00b ffca 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800134c:	210c      	movs	r1, #12
 800134e:	481f      	ldr	r0, [pc, #124]	; (80013cc <CenLoc_LockSequence+0xf0>)
 8001350:	f00b ffc6 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001354:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <CenLoc_LockSequence+0xec>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f8c9 	bl	80014f0 <CenLoc_ToggleBuzzer>
				break;
 800135e:	e013      	b.n	8001388 <CenLoc_LockSequence+0xac>
				CenLoc_BlinkState = STD_LOW;
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <CenLoc_LockSequence+0xec>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001366:	2108      	movs	r1, #8
 8001368:	4818      	ldr	r0, [pc, #96]	; (80013cc <CenLoc_LockSequence+0xf0>)
 800136a:	f00b ffb9 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800136e:	210c      	movs	r1, #12
 8001370:	4816      	ldr	r0, [pc, #88]	; (80013cc <CenLoc_LockSequence+0xf0>)
 8001372:	f00b ffb5 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				CenLoc_ToggleBuzzer(CenLoc_BlinkState);
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <CenLoc_LockSequence+0xec>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f8b8 	bl	80014f0 <CenLoc_ToggleBuzzer>
				localPreviousState = STD_LOW;
 8001380:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <CenLoc_LockSequence+0xdc>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
				break;
 8001386:	bf00      	nop
		switch(CenLoc_BlinkCounter)
 8001388:	bf00      	nop
	}
	else
	{
		/* do nothing */
	}
}
 800138a:	e011      	b.n	80013b0 <CenLoc_LockSequence+0xd4>
	else if(CenLoc_BlinkCounter == 2)
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <CenLoc_LockSequence+0xd8>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d10d      	bne.n	80013b0 <CenLoc_LockSequence+0xd4>
		CenLoc_BlinkState = 2;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <CenLoc_LockSequence+0xec>)
 8001396:	2202      	movs	r2, #2
 8001398:	701a      	strb	r2, [r3, #0]
		CenLoc_BlinkCounter = 4;
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <CenLoc_LockSequence+0xd8>)
 800139c:	2204      	movs	r2, #4
 800139e:	701a      	strb	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(&CenLoc_BlinkCounter);
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <CenLoc_LockSequence+0xd8>)
 80013a2:	f00b fef3 	bl	800d18c <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_CenLoc_LockUnlockSequence_TimerHandle);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <CenLoc_LockSequence+0xf4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f00c f967 	bl	800d67e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200000c3 	.word	0x200000c3
 80013b8:	200000c8 	.word	0x200000c8
 80013bc:	20000278 	.word	0x20000278
 80013c0:	20000274 	.word	0x20000274
 80013c4:	200000c5 	.word	0x200000c5
 80013c8:	200000c2 	.word	0x200000c2
 80013cc:	200004b0 	.word	0x200004b0
 80013d0:	20000268 	.word	0x20000268

080013d4 <CenLoc_ControlAlarmLed>:
/***********************************************************************************
* Function: CenLoc_ControlAlarmLed												   *
* Description: Controls the security alarm LED 		   							   *
************************************************************************************/
VOID CenLoc_ControlAlarmLed()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	/* Check if the central lock state is set to high. */
	if(CenLoc_CurrentState == STD_HIGH)
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <CenLoc_ControlAlarmLed+0xc4>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d10b      	bne.n	80013f8 <CenLoc_ControlAlarmLed+0x24>
	{
		/* Set the security alarm LED to off. */
		Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 ffe9 	bl	80023b8 <SecAlm_ToggleAlarmLed>
		/* Set the timer flag to 0. */
		CenLoc_TurnOnLedCounter = STD_LOW;
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <CenLoc_ControlAlarmLed+0xc8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
		/* Stop the timer related to the LED cyclic trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <CenLoc_ControlAlarmLed+0xcc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f00c f944 	bl	800d67e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		else
		{
			/* do nothing */
		}
	}
}
 80013f6:	e04c      	b.n	8001492 <CenLoc_ControlAlarmLed+0xbe>
	else if(CenLoc_CurrentState == STD_LOW)
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <CenLoc_ControlAlarmLed+0xc4>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d148      	bne.n	8001492 <CenLoc_ControlAlarmLed+0xbe>
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLed_TurnOnCyclic_TimerHandle) == STD_LOW && Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == STD_LOW)
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <CenLoc_ControlAlarmLed+0xd0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f008 ff72 	bl	800a2ee <osTimerIsRunning>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10e      	bne.n	800142e <CenLoc_ControlAlarmLed+0x5a>
 8001410:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <CenLoc_ControlAlarmLed+0xcc>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f008 ff6a 	bl	800a2ee <osTimerIsRunning>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d106      	bne.n	800142e <CenLoc_ControlAlarmLed+0x5a>
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLed_TurnOnCyclic_TimerHandle, 3750);
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <CenLoc_ControlAlarmLed+0xd0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f640 61a6 	movw	r1, #3750	; 0xea6
 8001428:	4618      	mov	r0, r3
 800142a:	f00c f91b 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		if(CenLoc_CyclicAlarmCounter == STD_HIGH)
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <CenLoc_ControlAlarmLed+0xd4>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d12d      	bne.n	8001492 <CenLoc_ControlAlarmLed+0xbe>
			if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmLedTurnOn_TimerHandle) == STD_LOW)
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <CenLoc_ControlAlarmLed+0xcc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f008 ff57 	bl	800a2ee <osTimerIsRunning>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d105      	bne.n	8001452 <CenLoc_ControlAlarmLed+0x7e>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmLedTurnOn_TimerHandle, 250);
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <CenLoc_ControlAlarmLed+0xcc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	21fa      	movs	r1, #250	; 0xfa
 800144c:	4618      	mov	r0, r3
 800144e:	f00c f909 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
			if(CenLoc_TurnOnLedCounter < STD_HIGH)
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <CenLoc_ControlAlarmLed+0xc8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d103      	bne.n	8001462 <CenLoc_ControlAlarmLed+0x8e>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_HIGH);
 800145a:	2001      	movs	r0, #1
 800145c:	f000 ffac 	bl	80023b8 <SecAlm_ToggleAlarmLed>
}
 8001460:	e017      	b.n	8001492 <CenLoc_ControlAlarmLed+0xbe>
			else if(CenLoc_TurnOnLedCounter == STD_HIGH)
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <CenLoc_ControlAlarmLed+0xc8>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d113      	bne.n	8001492 <CenLoc_ControlAlarmLed+0xbe>
				Rte_Call_SecAlm_R_SecAlmPort_SecAlm_ToggleAlarmLed(STD_LOW);
 800146a:	2000      	movs	r0, #0
 800146c:	f000 ffa4 	bl	80023b8 <SecAlm_ToggleAlarmLed>
				CenLoc_TurnOnLedCounter = STD_LOW;
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <CenLoc_ControlAlarmLed+0xc8>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
				CenLoc_CyclicAlarmCounter = STD_LOW;
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <CenLoc_ControlAlarmLed+0xd4>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
				Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(&CenLoc_CyclicAlarmCounter);
 800147c:	480a      	ldr	r0, [pc, #40]	; (80014a8 <CenLoc_ControlAlarmLed+0xd4>)
 800147e:	f00b fe95 	bl	800d1ac <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>
				Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(&CenLoc_TurnOnLedCounter);
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <CenLoc_ControlAlarmLed+0xc8>)
 8001484:	f00b fea2 	bl	800d1cc <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmLedTurnOn_TimerHandle);
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <CenLoc_ControlAlarmLed+0xcc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f00c f8f6 	bl	800d67e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200000bf 	.word	0x200000bf
 800149c:	200000c6 	.word	0x200000c6
 80014a0:	20000270 	.word	0x20000270
 80014a4:	2000026c 	.word	0x2000026c
 80014a8:	200000c4 	.word	0x200000c4

080014ac <CenLoc_LockUnlockStates>:
/***********************************************************************************
* Function: CenLoc_LockUnlockStates												   *
* Description: Check for the state of the central lock.					 		   *
************************************************************************************/
VOID CenLoc_LockUnlockStates()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	/* If the central lock state is set to high and the security alarm is set to off. */
	if(CenLoc_CurrentState == STD_HIGH && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <CenLoc_LockUnlockStates+0x3c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d108      	bne.n	80014ca <CenLoc_LockUnlockStates+0x1e>
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <CenLoc_LockUnlockStates+0x40>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d104      	bne.n	80014ca <CenLoc_LockUnlockStates+0x1e>
	{
		/* Perform the related activities. */
		CenLoc_UnlockSequence();
 80014c0:	f7ff fe64 	bl	800118c <CenLoc_UnlockSequence>
		CenLoc_ControlAlarmLed();
 80014c4:	f7ff ff86 	bl	80013d4 <CenLoc_ControlAlarmLed>
	}
	else
	{
		/* do nothing */
	}
}
 80014c8:	e00b      	b.n	80014e2 <CenLoc_LockUnlockStates+0x36>
	else if(CenLoc_CurrentState == STD_LOW && Rte_P_SecAlm_SecAlmPort_SecAlm_Trigger == STD_LOW)
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <CenLoc_LockUnlockStates+0x3c>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d107      	bne.n	80014e2 <CenLoc_LockUnlockStates+0x36>
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <CenLoc_LockUnlockStates+0x40>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d103      	bne.n	80014e2 <CenLoc_LockUnlockStates+0x36>
		CenLoc_LockSequence();
 80014da:	f7ff feff 	bl	80012dc <CenLoc_LockSequence>
		CenLoc_ControlAlarmLed();
 80014de:	f7ff ff79 	bl	80013d4 <CenLoc_ControlAlarmLed>
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200000bf 	.word	0x200000bf
 80014ec:	20000110 	.word	0x20000110

080014f0 <CenLoc_ToggleBuzzer>:
/***********************************************************************************
* Function: CenLoc_ToggleBuzzer													   *
* Description: Trigger central lock buzzer. 		   							   *
************************************************************************************/
VOID CenLoc_ToggleBuzzer(uint8 PinState)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(CENLOC_BUZZER_PORT, CENLOC_BUZZER_PIN, PinState);
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	461a      	mov	r2, r3
 80014fe:	2104      	movs	r1, #4
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <CenLoc_ToggleBuzzer+0x20>)
 8001502:	f00c f89d 	bl	800d640 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40020400 	.word	0x40020400

08001514 <CenLoc_MainFunction>:
/***********************************************************************************
* Function: CenLoc_MainFunction													   *
* Description: Central lock main function. Process the states of the application.  *
************************************************************************************/
VOID CenLoc_MainFunction()
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	CenLoc_State();
 8001518:	f7ff fdae 	bl	8001078 <CenLoc_State>
	CenLoc_LockUnlockStates();
 800151c:	f7ff ffc6 	bl	80014ac <CenLoc_LockUnlockStates>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <DiagCtrl_MainFunction>:
/***********************************************************************************
* Function: DiagCtrl_MainFunction										   		   *
* Description: Application main function.		 		   						   *
************************************************************************************/
VOID DiagCtrl_MainFunction()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	DiagCtrl_ProcessRequestedData();
 8001528:	f000 f802 	bl	8001530 <DiagCtrl_ProcessRequestedData>
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <DiagCtrl_ProcessRequestedData>:
/***********************************************************************************
* Function: DiagCtrl_ProcessRequestedData										   *
* Description: Process the measured requested data.		 		   				   *
************************************************************************************/
VOID DiagCtrl_ProcessRequestedData()
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	static uint8 I2cOneLcd_FaultValue_Four = 0;
	static uint8 I2cOneLcd_FaultValue_Five = 0;
	static uint8 I2cOneLcd_FaultValue_Six = 0;
	static uint8 I2cOneLcd_FaultValue_Seven = 0;
	static uint8 I2cOneLcd_FaultValue_Eight = 0;
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&LightSensor_RequestedValue, 0);
 8001534:	2100      	movs	r1, #0
 8001536:	4845      	ldr	r0, [pc, #276]	; (800164c <DiagCtrl_ProcessRequestedData+0x11c>)
 8001538:	f00b ff20 	bl	800d37c <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(&VibrationSensor_RequestedValue, 1);
 800153c:	2101      	movs	r1, #1
 800153e:	4844      	ldr	r0, [pc, #272]	; (8001650 <DiagCtrl_ProcessRequestedData+0x120>)
 8001540:	f00b ff1c 	bl	800d37c <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_One, 17);
 8001544:	2111      	movs	r1, #17
 8001546:	4843      	ldr	r0, [pc, #268]	; (8001654 <DiagCtrl_ProcessRequestedData+0x124>)
 8001548:	f00b fd8e 	bl	800d068 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Two, 18);
 800154c:	2112      	movs	r1, #18
 800154e:	4842      	ldr	r0, [pc, #264]	; (8001658 <DiagCtrl_ProcessRequestedData+0x128>)
 8001550:	f00b fd8a 	bl	800d068 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Three, 19);
 8001554:	2113      	movs	r1, #19
 8001556:	4841      	ldr	r0, [pc, #260]	; (800165c <DiagCtrl_ProcessRequestedData+0x12c>)
 8001558:	f00b fd86 	bl	800d068 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&BtcUart_FaultValue_Four, 20);
 800155c:	2114      	movs	r1, #20
 800155e:	4840      	ldr	r0, [pc, #256]	; (8001660 <DiagCtrl_ProcessRequestedData+0x130>)
 8001560:	f00b fd82 	bl	800d068 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_One, 33);
 8001564:	2121      	movs	r1, #33	; 0x21
 8001566:	483f      	ldr	r0, [pc, #252]	; (8001664 <DiagCtrl_ProcessRequestedData+0x134>)
 8001568:	f00b fd7e 	bl	800d068 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Two, 34);
 800156c:	2122      	movs	r1, #34	; 0x22
 800156e:	483e      	ldr	r0, [pc, #248]	; (8001668 <DiagCtrl_ProcessRequestedData+0x138>)
 8001570:	f00b fd7a 	bl	800d068 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Three, 35);
 8001574:	2123      	movs	r1, #35	; 0x23
 8001576:	483d      	ldr	r0, [pc, #244]	; (800166c <DiagCtrl_ProcessRequestedData+0x13c>)
 8001578:	f00b fd76 	bl	800d068 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Four, 36);
 800157c:	2124      	movs	r1, #36	; 0x24
 800157e:	483c      	ldr	r0, [pc, #240]	; (8001670 <DiagCtrl_ProcessRequestedData+0x140>)
 8001580:	f00b fd72 	bl	800d068 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Five, 37);
 8001584:	2125      	movs	r1, #37	; 0x25
 8001586:	483b      	ldr	r0, [pc, #236]	; (8001674 <DiagCtrl_ProcessRequestedData+0x144>)
 8001588:	f00b fd6e 	bl	800d068 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Six, 38);
 800158c:	2126      	movs	r1, #38	; 0x26
 800158e:	483a      	ldr	r0, [pc, #232]	; (8001678 <DiagCtrl_ProcessRequestedData+0x148>)
 8001590:	f00b fd6a 	bl	800d068 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Seven, 39);
 8001594:	2127      	movs	r1, #39	; 0x27
 8001596:	4839      	ldr	r0, [pc, #228]	; (800167c <DiagCtrl_ProcessRequestedData+0x14c>)
 8001598:	f00b fd66 	bl	800d068 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>
	Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(&I2cOneLcd_FaultValue_Eight, 40);
 800159c:	2128      	movs	r1, #40	; 0x28
 800159e:	4838      	ldr	r0, [pc, #224]	; (8001680 <DiagCtrl_ProcessRequestedData+0x150>)
 80015a0:	f00b fd62 	bl	800d068 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>

	if(BtcUart_FaultValue_One != 0 ||
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <DiagCtrl_ProcessRequestedData+0x124>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10b      	bne.n	80015c4 <DiagCtrl_ProcessRequestedData+0x94>
			BtcUart_FaultValue_Two != 0 ||
 80015ac:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <DiagCtrl_ProcessRequestedData+0x128>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
	if(BtcUart_FaultValue_One != 0 ||
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d107      	bne.n	80015c4 <DiagCtrl_ProcessRequestedData+0x94>
			BtcUart_FaultValue_Three != 0 ||
 80015b4:	4b29      	ldr	r3, [pc, #164]	; (800165c <DiagCtrl_ProcessRequestedData+0x12c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Two != 0 ||
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d103      	bne.n	80015c4 <DiagCtrl_ProcessRequestedData+0x94>
			BtcUart_FaultValue_Four != 0)
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <DiagCtrl_ProcessRequestedData+0x130>)
 80015be:	781b      	ldrb	r3, [r3, #0]
			BtcUart_FaultValue_Three != 0 ||
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <DiagCtrl_ProcessRequestedData+0x9a>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_BLUETOOTH_MODULE_MALFUNCTION);
 80015c4:	2022      	movs	r0, #34	; 0x22
 80015c6:	f002 faa3 	bl	8003b10 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(I2cOneLcd_FaultValue_One != 0 ||
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <DiagCtrl_ProcessRequestedData+0x134>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d11b      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Two != 0 ||
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <DiagCtrl_ProcessRequestedData+0x138>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
	if(I2cOneLcd_FaultValue_One != 0 ||
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d117      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Three != 0 ||
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <DiagCtrl_ProcessRequestedData+0x13c>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Two != 0 ||
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d113      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Four != 0 ||
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <DiagCtrl_ProcessRequestedData+0x140>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Three != 0 ||
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10f      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Five != 0 ||
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <DiagCtrl_ProcessRequestedData+0x144>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Four != 0 ||
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10b      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Six != 0 ||
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <DiagCtrl_ProcessRequestedData+0x148>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Five != 0 ||
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d107      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Seven != 0 ||
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <DiagCtrl_ProcessRequestedData+0x14c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Six != 0 ||
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d103      	bne.n	800160a <DiagCtrl_ProcessRequestedData+0xda>
			I2cOneLcd_FaultValue_Eight != 0)
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <DiagCtrl_ProcessRequestedData+0x150>)
 8001604:	781b      	ldrb	r3, [r3, #0]
			I2cOneLcd_FaultValue_Seven != 0 ||
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <DiagCtrl_ProcessRequestedData+0xe0>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LCD_MODULE_MALFUNCTION);
 800160a:	2062      	movs	r0, #98	; 0x62
 800160c:	f002 fa80 	bl	8003b10 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(LightSensor_RequestedValue < 100)
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <DiagCtrl_ProcessRequestedData+0x11c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b63      	cmp	r3, #99	; 0x63
 8001616:	d802      	bhi.n	800161e <DiagCtrl_ProcessRequestedData+0xee>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_LIGHT_SENSOR_MALFUNCTION);
 8001618:	2003      	movs	r0, #3
 800161a:	f002 fa79 	bl	8003b10 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(VibrationSensor_RequestedValue < 100)
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <DiagCtrl_ProcessRequestedData+0x120>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b63      	cmp	r3, #99	; 0x63
 8001624:	d802      	bhi.n	800162c <DiagCtrl_ProcessRequestedData+0xfc>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_VIBRATION_SENSOR_MALFUNCTION);
 8001626:	2013      	movs	r0, #19
 8001628:	f002 fa72 	bl	8003b10 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree == 0)
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <DiagCtrl_ProcessRequestedData+0x154>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <DiagCtrl_ProcessRequestedData+0x10a>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 8001634:	2012      	movs	r0, #18
 8001636:	f002 fa6b 	bl	8003b10 <Dem_ReceiveFault>
	else
	{
		/* do nothing */
	}

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour == 0)
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <DiagCtrl_ProcessRequestedData+0x158>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <DiagCtrl_ProcessRequestedData+0x118>
	{
		Rte_Call_Dem_P_DemPort_Dem_ReceiveFault(DIAGCTRL_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION);
 8001642:	2002      	movs	r0, #2
 8001644:	f002 fa64 	bl	8003b10 <Dem_ReceiveFault>
	}
	else
	{
		/* do nothing */
	}
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200000cc 	.word	0x200000cc
 8001650:	200000d0 	.word	0x200000d0
 8001654:	200000d4 	.word	0x200000d4
 8001658:	200000d5 	.word	0x200000d5
 800165c:	200000d6 	.word	0x200000d6
 8001660:	200000d7 	.word	0x200000d7
 8001664:	200000d8 	.word	0x200000d8
 8001668:	200000d9 	.word	0x200000d9
 800166c:	200000da 	.word	0x200000da
 8001670:	200000db 	.word	0x200000db
 8001674:	200000dc 	.word	0x200000dc
 8001678:	200000dd 	.word	0x200000dd
 800167c:	200000de 	.word	0x200000de
 8001680:	200000df 	.word	0x200000df
 8001684:	200006d9 	.word	0x200006d9
 8001688:	200006e9 	.word	0x200006e9

0800168c <ExtLights_TurnSignalHazardLight>:
/***********************************************************************************
* Function: ExtLights_TurnSignalHazardLight										   *
* Description: Process the turn signals and hazard lights states. 		   		   *
************************************************************************************/
VOID ExtLights_TurnSignalHazardLight()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	/* If the turn signal left is set on. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8001690:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <ExtLights_TurnSignalHazardLight+0x138>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d123      	bne.n	80016e0 <ExtLights_TurnSignalHazardLight+0x54>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 8001698:	4b4b      	ldr	r3, [pc, #300]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f008 fe26 	bl	800a2ee <osTimerIsRunning>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d106      	bne.n	80016b6 <ExtLights_TurnSignalHazardLight+0x2a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80016a8:	4b47      	ldr	r3, [pc, #284]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00b ffd7 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_LTSFlag % 2 == 1)
 80016b6:	4b45      	ldr	r3, [pc, #276]	; (80017cc <ExtLights_TurnSignalHazardLight+0x140>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d004      	beq.n	80016cc <ExtLights_TurnSignalHazardLight+0x40>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80016c2:	2108      	movs	r1, #8
 80016c4:	4842      	ldr	r0, [pc, #264]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 80016c6:	f00b fe0b 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80016ca:	e009      	b.n	80016e0 <ExtLights_TurnSignalHazardLight+0x54>
		}
		else if(ExtLights_LTSFlag % 2 == 0)
 80016cc:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <ExtLights_TurnSignalHazardLight+0x140>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d103      	bne.n	80016e0 <ExtLights_TurnSignalHazardLight+0x54>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80016d8:	2108      	movs	r1, #8
 80016da:	483d      	ldr	r0, [pc, #244]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 80016dc:	f00b fe0d 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the turn signal right is set on. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 80016e0:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <ExtLights_TurnSignalHazardLight+0x148>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d123      	bne.n	8001730 <ExtLights_TurnSignalHazardLight+0xa4>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 80016e8:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f008 fdfe 	bl	800a2ee <osTimerIsRunning>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d106      	bne.n	8001706 <ExtLights_TurnSignalHazardLight+0x7a>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 80016f8:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001700:	4618      	mov	r0, r3
 8001702:	f00b ffaf 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_RTSFlag % 2 == 1)
 8001706:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <ExtLights_TurnSignalHazardLight+0x14c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d004      	beq.n	800171c <ExtLights_TurnSignalHazardLight+0x90>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001712:	210c      	movs	r1, #12
 8001714:	482e      	ldr	r0, [pc, #184]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 8001716:	f00b fde3 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 800171a:	e009      	b.n	8001730 <ExtLights_TurnSignalHazardLight+0xa4>
		}
		else if(ExtLights_RTSFlag % 2 == 0)
 800171c:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <ExtLights_TurnSignalHazardLight+0x14c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d103      	bne.n	8001730 <ExtLights_TurnSignalHazardLight+0xa4>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001728:	210c      	movs	r1, #12
 800172a:	4829      	ldr	r0, [pc, #164]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 800172c:	f00b fde5 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* If the hazard light is set on. */
	if(ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001730:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <ExtLights_TurnSignalHazardLight+0x150>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d12b      	bne.n	8001790 <ExtLights_TurnSignalHazardLight+0x104>
	{
		/* Check if the timer related to the turn signals is off. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_TurnSignals_TimerHandle) == 0)
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f008 fdd6 	bl	800a2ee <osTimerIsRunning>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d106      	bne.n	8001756 <ExtLights_TurnSignalHazardLight+0xca>
		{
			/* Start the timer with the designated period counter value. */
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_TurnSignals_TimerHandle, 500);
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <ExtLights_TurnSignalHazardLight+0x13c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001750:	4618      	mov	r0, r3
 8001752:	f00b ff87 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Turn on and off the turn signal. */
		if(ExtLights_HLFlag % 2 == 1)
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <ExtLights_TurnSignalHazardLight+0x154>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d008      	beq.n	8001774 <ExtLights_TurnSignalHazardLight+0xe8>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001762:	2108      	movs	r1, #8
 8001764:	481a      	ldr	r0, [pc, #104]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 8001766:	f00b fdbb 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800176a:	210c      	movs	r1, #12
 800176c:	4818      	ldr	r0, [pc, #96]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 800176e:	f00b fdb7 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001772:	e00d      	b.n	8001790 <ExtLights_TurnSignalHazardLight+0x104>
		}
		else if(ExtLights_HLFlag % 2 == 0)
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <ExtLights_TurnSignalHazardLight+0x154>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <ExtLights_TurnSignalHazardLight+0x104>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001780:	2108      	movs	r1, #8
 8001782:	4813      	ldr	r0, [pc, #76]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 8001784:	f00b fdb9 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001788:	210c      	movs	r1, #12
 800178a:	4811      	ldr	r0, [pc, #68]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 800178c:	f00b fdb5 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalRight_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <ExtLights_TurnSignalHazardLight+0x148>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <ExtLights_TurnSignalHazardLight+0x11c>
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <ExtLights_TurnSignalHazardLight+0x150>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d103      	bne.n	80017a8 <ExtLights_TurnSignalHazardLight+0x11c>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80017a0:	210c      	movs	r1, #12
 80017a2:	480b      	ldr	r0, [pc, #44]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 80017a4:	f00b fda9 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Only one pair of turn signals can be on at a time. Set on one pair and the other off. */
	if(ExtLights_TurnSignalLeft_CurrentState == STD_LOW && ExtLights_HazardLight_CurrentState == STD_LOW)
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <ExtLights_TurnSignalHazardLight+0x138>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d107      	bne.n	80017c0 <ExtLights_TurnSignalHazardLight+0x134>
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <ExtLights_TurnSignalHazardLight+0x150>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d103      	bne.n	80017c0 <ExtLights_TurnSignalHazardLight+0x134>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80017b8:	2108      	movs	r1, #8
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <ExtLights_TurnSignalHazardLight+0x144>)
 80017bc:	f00b fd9d 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	else
	{
		/* do nothing */
	}
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200000e6 	.word	0x200000e6
 80017c8:	20000278 	.word	0x20000278
 80017cc:	200000f4 	.word	0x200000f4
 80017d0:	200004b0 	.word	0x200004b0
 80017d4:	200000e7 	.word	0x200000e7
 80017d8:	200000f0 	.word	0x200000f0
 80017dc:	200000ea 	.word	0x200000ea
 80017e0:	200000f8 	.word	0x200000f8

080017e4 <ExtLights_PrevStateTSHL>:
* Function: ExtLights_PrevStateTSHL										           *
* Description: Checks the current state and previous state of turn signals and     *
* 			   hazard lights. 		   											   *
************************************************************************************/
VOID ExtLights_PrevStateTSHL()
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalLeft_CurrentState != ExtLights_LTS_PrevState)
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <ExtLights_PrevStateTSHL+0x68>)
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <ExtLights_PrevStateTSHL+0x6c>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d009      	beq.n	8001808 <ExtLights_PrevStateTSHL+0x24>
	{
		ExtLights_LTS_PrevState = ExtLights_TurnSignalLeft_CurrentState;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <ExtLights_PrevStateTSHL+0x68>)
 80017f6:	781a      	ldrb	r2, [r3, #0]
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <ExtLights_PrevStateTSHL+0x6c>)
 80017fa:	701a      	strb	r2, [r3, #0]
		ExtLights_LTSFlag = 0;
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <ExtLights_PrevStateTSHL+0x70>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Lts_Counter(&ExtLights_LTSFlag);
 8001802:	4814      	ldr	r0, [pc, #80]	; (8001854 <ExtLights_PrevStateTSHL+0x70>)
 8001804:	f00b fd02 	bl	800d20c <Rte_Write_Os_R_OsPort_Os_Lts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_TurnSignalRight_CurrentState != ExtLights_RTS_PrevState)
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <ExtLights_PrevStateTSHL+0x74>)
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <ExtLights_PrevStateTSHL+0x78>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d009      	beq.n	8001828 <ExtLights_PrevStateTSHL+0x44>
	{
		ExtLights_RTS_PrevState = ExtLights_TurnSignalRight_CurrentState;
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <ExtLights_PrevStateTSHL+0x74>)
 8001816:	781a      	ldrb	r2, [r3, #0]
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <ExtLights_PrevStateTSHL+0x78>)
 800181a:	701a      	strb	r2, [r3, #0]
		ExtLights_RTSFlag = 0;
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <ExtLights_PrevStateTSHL+0x7c>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_Rts_Counter(&ExtLights_RTSFlag);
 8001822:	480f      	ldr	r0, [pc, #60]	; (8001860 <ExtLights_PrevStateTSHL+0x7c>)
 8001824:	f00b fd02 	bl	800d22c <Rte_Write_Os_R_OsPort_Os_Rts_Counter>
	else
	{
		/* do nothing */
	}
	/* Change the variables related to states. */
	if(ExtLights_HazardLight_CurrentState != ExtLights_HL_PrevState)
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <ExtLights_PrevStateTSHL+0x80>)
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <ExtLights_PrevStateTSHL+0x84>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d009      	beq.n	8001848 <ExtLights_PrevStateTSHL+0x64>
	{
		ExtLights_HL_PrevState = ExtLights_HazardLight_CurrentState;
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <ExtLights_PrevStateTSHL+0x80>)
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <ExtLights_PrevStateTSHL+0x84>)
 800183a:	701a      	strb	r2, [r3, #0]
		ExtLights_HLFlag = 0;
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <ExtLights_PrevStateTSHL+0x88>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
		Rte_Write_Os_R_OsPort_Os_HL_Counter(&ExtLights_HLFlag);
 8001842:	480a      	ldr	r0, [pc, #40]	; (800186c <ExtLights_PrevStateTSHL+0x88>)
 8001844:	f00b fd02 	bl	800d24c <Rte_Write_Os_R_OsPort_Os_HL_Counter>
	}
	else
	{
		/* do nothing */
	}
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200000e6 	.word	0x200000e6
 8001850:	200000ed 	.word	0x200000ed
 8001854:	200000f4 	.word	0x200000f4
 8001858:	200000e7 	.word	0x200000e7
 800185c:	200000ec 	.word	0x200000ec
 8001860:	200000f0 	.word	0x200000f0
 8001864:	200000ea 	.word	0x200000ea
 8001868:	200000ee 	.word	0x200000ee
 800186c:	200000f8 	.word	0x200000f8

08001870 <ExtLights_LightState>:
/***********************************************************************************
* Function: ExtLights_LightState										   		   *
* Description: Controls the lights states.								 		   *
************************************************************************************/
VOID ExtLights_LightState()
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	/* Process turn signals state. */
	ExtLights_PrevStateTSHL();
 8001874:	f7ff ffb6 	bl	80017e4 <ExtLights_PrevStateTSHL>
	/* Follow me home is on, then turn on the respective lights. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8001878:	4b9d      	ldr	r3, [pc, #628]	; (8001af0 <ExtLights_LightState+0x280>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d110      	bne.n	80018a2 <ExtLights_LightState+0x32>
	{
		ExtLights_LightSwitchMode();
 8001880:	f000 f966 	bl	8001b50 <ExtLights_LightSwitchMode>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001884:	2100      	movs	r1, #0
 8001886:	489b      	ldr	r0, [pc, #620]	; (8001af4 <ExtLights_LightState+0x284>)
 8001888:	f00b fd2a 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 800188c:	2104      	movs	r1, #4
 800188e:	4899      	ldr	r0, [pc, #612]	; (8001af4 <ExtLights_LightState+0x284>)
 8001890:	f00b fd26 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		ExtLights_LowBeam_CurrentState = STD_HIGH;
 8001894:	4b98      	ldr	r3, [pc, #608]	; (8001af8 <ExtLights_LightState+0x288>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
		ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 800189a:	4b98      	ldr	r3, [pc, #608]	; (8001afc <ExtLights_LightState+0x28c>)
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	e017      	b.n	80018d2 <ExtLights_LightState+0x62>
	}/* Follow me home is off, turn off the lights.*/
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW)
 80018a2:	4b93      	ldr	r3, [pc, #588]	; (8001af0 <ExtLights_LightState+0x280>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d113      	bne.n	80018d2 <ExtLights_LightState+0x62>
	{
		ExtLights_LightSwitchMode();
 80018aa:	f000 f951 	bl	8001b50 <ExtLights_LightSwitchMode>
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 80018ae:	4b94      	ldr	r3, [pc, #592]	; (8001b00 <ExtLights_LightState+0x290>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10d      	bne.n	80018d2 <ExtLights_LightState+0x62>
		{
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80018b6:	2100      	movs	r1, #0
 80018b8:	488e      	ldr	r0, [pc, #568]	; (8001af4 <ExtLights_LightState+0x284>)
 80018ba:	f00b fd1e 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80018be:	2104      	movs	r1, #4
 80018c0:	488c      	ldr	r0, [pc, #560]	; (8001af4 <ExtLights_LightState+0x284>)
 80018c2:	f00b fd1a 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 80018c6:	4b8c      	ldr	r3, [pc, #560]	; (8001af8 <ExtLights_LightState+0x288>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 80018cc:	4b8b      	ldr	r3, [pc, #556]	; (8001afc <ExtLights_LightState+0x28c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If any light state is set to on, then stop the follow me home. */
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 80018d2:	4b8c      	ldr	r3, [pc, #560]	; (8001b04 <ExtLights_LightState+0x294>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d017      	beq.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 80018da:	4b8b      	ldr	r3, [pc, #556]	; (8001b08 <ExtLights_LightState+0x298>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH ||
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d013      	beq.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 80018e2:	4b87      	ldr	r3, [pc, #540]	; (8001b00 <ExtLights_LightState+0x290>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
		ExtLights_FlashHighBeam_CurrentState == STD_HIGH ||
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10f      	bne.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 80018ea:	4b88      	ldr	r3, [pc, #544]	; (8001b0c <ExtLights_LightState+0x29c>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
		ExtLights_LightsSwitch_CurrentState != STD_LOW ||
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d00b      	beq.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 80018f2:	4b87      	ldr	r3, [pc, #540]	; (8001b10 <ExtLights_LightState+0x2a0>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
		ExtLights_HighBeam_CurrentState == STD_HIGH ||
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d007      	beq.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 80018fa:	4b86      	ldr	r3, [pc, #536]	; (8001b14 <ExtLights_LightState+0x2a4>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalLeft_CurrentState == STD_HIGH ||
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d003      	beq.n	800190a <ExtLights_LightState+0x9a>
		ExtLights_HazardLight_CurrentState == STD_HIGH)
 8001902:	4b85      	ldr	r3, [pc, #532]	; (8001b18 <ExtLights_LightState+0x2a8>)
 8001904:	781b      	ldrb	r3, [r3, #0]
		ExtLights_TurnSignalRight_CurrentState == STD_HIGH ||
 8001906:	2b01      	cmp	r3, #1
 8001908:	d11a      	bne.n	8001940 <ExtLights_LightState+0xd0>
	{
		if(ExtLights_LightsSwitch_CurrentState == STD_LOW)
 800190a:	4b7d      	ldr	r3, [pc, #500]	; (8001b00 <ExtLights_LightState+0x290>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d116      	bne.n	8001940 <ExtLights_LightState+0xd0>
		{
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(STD_LOW);
 8001912:	2000      	movs	r0, #0
 8001914:	f00b fd66 	bl	800d3e4 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>
			Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(2);
 8001918:	2002      	movs	r0, #2
 800191a:	f00b fbf7 	bl	800d10c <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
			Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(2);
 800191e:	2002      	movs	r0, #2
 8001920:	f00b fc64 	bl	800d1ec <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001924:	2100      	movs	r1, #0
 8001926:	4873      	ldr	r0, [pc, #460]	; (8001af4 <ExtLights_LightState+0x284>)
 8001928:	f00b fce7 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 800192c:	2104      	movs	r1, #4
 800192e:	4871      	ldr	r0, [pc, #452]	; (8001af4 <ExtLights_LightState+0x284>)
 8001930:	f00b fce3 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8001934:	4b70      	ldr	r3, [pc, #448]	; (8001af8 <ExtLights_LightState+0x288>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 800193a:	4b70      	ldr	r3, [pc, #448]	; (8001afc <ExtLights_LightState+0x28c>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* Control the turn signals for the central lock lock unlock sequence when requested. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_HIGH)
 8001940:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <ExtLights_LightState+0x2ac>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d108      	bne.n	800195a <ExtLights_LightState+0xea>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001948:	2108      	movs	r1, #8
 800194a:	4875      	ldr	r0, [pc, #468]	; (8001b20 <ExtLights_LightState+0x2b0>)
 800194c:	f00b fcc8 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 8001950:	210c      	movs	r1, #12
 8001952:	4873      	ldr	r0, [pc, #460]	; (8001b20 <ExtLights_LightState+0x2b0>)
 8001954:	f00b fcc4 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001958:	e016      	b.n	8001988 <ExtLights_LightState+0x118>
	}
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == STD_LOW)
 800195a:	4b70      	ldr	r3, [pc, #448]	; (8001b1c <ExtLights_LightState+0x2ac>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d108      	bne.n	8001974 <ExtLights_LightState+0x104>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8001962:	2108      	movs	r1, #8
 8001964:	486e      	ldr	r0, [pc, #440]	; (8001b20 <ExtLights_LightState+0x2b0>)
 8001966:	f00b fcc8 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800196a:	210c      	movs	r1, #12
 800196c:	486c      	ldr	r0, [pc, #432]	; (8001b20 <ExtLights_LightState+0x2b0>)
 800196e:	f00b fcc4 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
 8001972:	e009      	b.n	8001988 <ExtLights_LightState+0x118>
	}/* Allows for turning on the hazard lights or turn signals independently of other states in the system. */
	else if(Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 2 || Rte_P_CenLoc_CenLocPort_CenLoc_BlinkState == 4)
 8001974:	4b69      	ldr	r3, [pc, #420]	; (8001b1c <ExtLights_LightState+0x2ac>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d003      	beq.n	8001984 <ExtLights_LightState+0x114>
 800197c:	4b67      	ldr	r3, [pc, #412]	; (8001b1c <ExtLights_LightState+0x2ac>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b04      	cmp	r3, #4
 8001982:	d101      	bne.n	8001988 <ExtLights_LightState+0x118>
	{
		ExtLights_TurnSignalHazardLight();
 8001984:	f7ff fe82 	bl	800168c <ExtLights_TurnSignalHazardLight>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_FlashHighBeam_CurrentState == STD_HIGH)
 8001988:	4b5f      	ldr	r3, [pc, #380]	; (8001b08 <ExtLights_LightState+0x298>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d103      	bne.n	8001998 <ExtLights_LightState+0x128>
	{
		ExtLights_HighBeam(STD_HIGH);
 8001990:	2001      	movs	r0, #1
 8001992:	f000 f9cd 	bl	8001d30 <ExtLights_HighBeam>
 8001996:	e006      	b.n	80019a6 <ExtLights_LightState+0x136>
	}
	else if(ExtLights_FlashHighBeam_CurrentState == STD_LOW)
 8001998:	4b5b      	ldr	r3, [pc, #364]	; (8001b08 <ExtLights_LightState+0x298>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <ExtLights_LightState+0x136>
	{
		ExtLights_HighBeam(STD_LOW);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f000 f9c5 	bl	8001d30 <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on/off high beam. */
	if(ExtLights_HighBeam_CurrentState == STD_HIGH)
 80019a6:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <ExtLights_LightState+0x29c>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d103      	bne.n	80019b6 <ExtLights_LightState+0x146>
	{
		ExtLights_HighBeam(STD_HIGH);
 80019ae:	2001      	movs	r0, #1
 80019b0:	f000 f9be 	bl	8001d30 <ExtLights_HighBeam>
 80019b4:	e006      	b.n	80019c4 <ExtLights_LightState+0x154>
	}
	else if(ExtLights_HighBeam_CurrentState == STD_LOW)
 80019b6:	4b55      	ldr	r3, [pc, #340]	; (8001b0c <ExtLights_LightState+0x29c>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <ExtLights_LightState+0x154>
	{
		ExtLights_HighBeam(STD_LOW);
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 f9b6 	bl	8001d30 <ExtLights_HighBeam>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the brake lights. */
	if(ExtLights_BrakeLight_CurrentState == STD_HIGH)
 80019c4:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <ExtLights_LightState+0x294>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d111      	bne.n	80019f0 <ExtLights_LightState+0x180>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 80019cc:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <ExtLights_LightState+0x294>)
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	4b54      	ldr	r3, [pc, #336]	; (8001b24 <ExtLights_LightState+0x2b4>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d006      	beq.n	80019e6 <ExtLights_LightState+0x176>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 80019d8:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <ExtLights_LightState+0x294>)
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	4b51      	ldr	r3, [pc, #324]	; (8001b24 <ExtLights_LightState+0x2b4>)
 80019de:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 80019e0:	2000      	movs	r0, #0
 80019e2:	f00b faf3 	bl	800cfcc <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 80019e6:	2104      	movs	r1, #4
 80019e8:	484f      	ldr	r0, [pc, #316]	; (8001b28 <ExtLights_LightState+0x2b8>)
 80019ea:	f00b fc79 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80019ee:	e014      	b.n	8001a1a <ExtLights_LightState+0x1aa>
	}
	else if(ExtLights_BrakeLight_CurrentState == STD_LOW)
 80019f0:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <ExtLights_LightState+0x294>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d110      	bne.n	8001a1a <ExtLights_LightState+0x1aa>
	{
		if(ExtLights_BrakeLight_CurrentState != ExtLights_Previous_BrakeLight_CurrentState)
 80019f8:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <ExtLights_LightState+0x294>)
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <ExtLights_LightState+0x2b4>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d006      	beq.n	8001a12 <ExtLights_LightState+0x1a2>
		{
			ExtLights_Previous_BrakeLight_CurrentState = ExtLights_BrakeLight_CurrentState;
 8001a04:	4b3f      	ldr	r3, [pc, #252]	; (8001b04 <ExtLights_LightState+0x294>)
 8001a06:	781a      	ldrb	r2, [r3, #0]
 8001a08:	4b46      	ldr	r3, [pc, #280]	; (8001b24 <ExtLights_LightState+0x2b4>)
 8001a0a:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr2(0);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f00b fadd 	bl	800cfcc <Rte_Write_TimH_TimHPort_Tim3Ccr2>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel2);
 8001a12:	2104      	movs	r1, #4
 8001a14:	4844      	ldr	r0, [pc, #272]	; (8001b28 <ExtLights_LightState+0x2b8>)
 8001a16:	f00b fc70 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the rear fog lights. */
	if(ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8001a1a:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d111      	bne.n	8001a46 <ExtLights_LightState+0x1d6>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 8001a22:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a24:	781a      	ldrb	r2, [r3, #0]
 8001a26:	4b42      	ldr	r3, [pc, #264]	; (8001b30 <ExtLights_LightState+0x2c0>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d006      	beq.n	8001a3c <ExtLights_LightState+0x1cc>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 8001a2e:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a30:	781a      	ldrb	r2, [r3, #0]
 8001a32:	4b3f      	ldr	r3, [pc, #252]	; (8001b30 <ExtLights_LightState+0x2c0>)
 8001a34:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f00b fae8 	bl	800d00c <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8001a3c:	210c      	movs	r1, #12
 8001a3e:	483a      	ldr	r0, [pc, #232]	; (8001b28 <ExtLights_LightState+0x2b8>)
 8001a40:	f00b fc4e 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001a44:	e014      	b.n	8001a70 <ExtLights_LightState+0x200>
	}
	else if(ExtLights_RearFogLight_CurrentState == STD_LOW)
 8001a46:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d110      	bne.n	8001a70 <ExtLights_LightState+0x200>
	{
		if(ExtLights_RearFogLight_CurrentState != ExtLights_Previous_RearFogLight_CurrentState)
 8001a4e:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <ExtLights_LightState+0x2c0>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d006      	beq.n	8001a68 <ExtLights_LightState+0x1f8>
		{
			ExtLights_Previous_RearFogLight_CurrentState = ExtLights_RearFogLight_CurrentState;
 8001a5a:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <ExtLights_LightState+0x2c0>)
 8001a60:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr4(0);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f00b fad2 	bl	800d00c <Rte_Write_TimH_TimHPort_Tim3Ccr4>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 8001a68:	210c      	movs	r1, #12
 8001a6a:	482f      	ldr	r0, [pc, #188]	; (8001b28 <ExtLights_LightState+0x2b8>)
 8001a6c:	f00b fc45 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on or off the front fog lights. */
	if(ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 8001a70:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d111      	bne.n	8001a9c <ExtLights_LightState+0x22c>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 8001a78:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001a7a:	781a      	ldrb	r2, [r3, #0]
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <ExtLights_LightState+0x2c8>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d006      	beq.n	8001a92 <ExtLights_LightState+0x222>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <ExtLights_LightState+0x2c8>)
 8001a8a:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f00b faad 	bl	800cfec <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8001a92:	2108      	movs	r1, #8
 8001a94:	4824      	ldr	r0, [pc, #144]	; (8001b28 <ExtLights_LightState+0x2b8>)
 8001a96:	f00b fc23 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 8001a9a:	e014      	b.n	8001ac6 <ExtLights_LightState+0x256>
	}
	else if(ExtLights_FrontFogLight_CurrentState == STD_LOW)
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d110      	bne.n	8001ac6 <ExtLights_LightState+0x256>
	{
		if(ExtLights_FrontFogLight_CurrentState != ExtLights_Previous_FrontFogLight_CurrentState)
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001aa6:	781a      	ldrb	r2, [r3, #0]
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <ExtLights_LightState+0x2c8>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d006      	beq.n	8001abe <ExtLights_LightState+0x24e>
		{
			ExtLights_Previous_FrontFogLight_CurrentState = ExtLights_FrontFogLight_CurrentState;
 8001ab0:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <ExtLights_LightState+0x2c8>)
 8001ab6:	701a      	strb	r2, [r3, #0]
			Rte_Write_TimH_TimHPort_Tim3Ccr3(0);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f00b fa97 	bl	800cfec <Rte_Write_TimH_TimHPort_Tim3Ccr3>
		}
		else
		{
			/* do nothing */
		}
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 8001abe:	2108      	movs	r1, #8
 8001ac0:	4819      	ldr	r0, [pc, #100]	; (8001b28 <ExtLights_LightState+0x2b8>)
 8001ac2:	f00b fc1a 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	else
	{
		/* do nothing */
	}
	/* Turn on the reverse light. */
	ExtLights_ReverseLight(ExtLights_ReverseLight_CurrentState);
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <ExtLights_LightState+0x2cc>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f942 	bl	8001d54 <ExtLights_ReverseLight>

	if(Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW)
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <ExtLights_LightState+0x2d0>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d108      	bne.n	8001aea <ExtLights_LightState+0x27a>
	{
		ExtLights_ReverseLight_CurrentState = STD_LOW;
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <ExtLights_LightState+0x2cc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
		ExtLights_RearFogLight_CurrentState = STD_LOW;
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <ExtLights_LightState+0x2bc>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
		ExtLights_FrontFogLight_CurrentState = STD_LOW;
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <ExtLights_LightState+0x2c4>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200000c1 	.word	0x200000c1
 8001af4:	20000348 	.word	0x20000348
 8001af8:	200000e8 	.word	0x200000e8
 8001afc:	200000e9 	.word	0x200000e9
 8001b00:	200000e3 	.word	0x200000e3
 8001b04:	200000e2 	.word	0x200000e2
 8001b08:	200000e1 	.word	0x200000e1
 8001b0c:	200000e4 	.word	0x200000e4
 8001b10:	200000e6 	.word	0x200000e6
 8001b14:	200000e7 	.word	0x200000e7
 8001b18:	200000ea 	.word	0x200000ea
 8001b1c:	200000c2 	.word	0x200000c2
 8001b20:	200004b0 	.word	0x200004b0
 8001b24:	20000102 	.word	0x20000102
 8001b28:	200003fc 	.word	0x200003fc
 8001b2c:	200000eb 	.word	0x200000eb
 8001b30:	20000100 	.word	0x20000100
 8001b34:	200000e5 	.word	0x200000e5
 8001b38:	20000101 	.word	0x20000101
 8001b3c:	200000e0 	.word	0x200000e0
 8001b40:	200000bf 	.word	0x200000bf

08001b44 <ExtLights_MainFunction>:
* Function: ExtLights_MainFunction										   		   *
* Description: Exterior lights application main function. Controls application	   *
* 			   states. 		   													   *
************************************************************************************/
VOID ExtLights_MainFunction()
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	ExtLights_LightState();
 8001b48:	f7ff fe92 	bl	8001870 <ExtLights_LightState>
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <ExtLights_LightSwitchMode>:
/***********************************************************************************
* Function: ExtLights_LightSwitchMode										   	   *
* Description: Control the light switch.								 		   *
************************************************************************************/
VOID ExtLights_LightSwitchMode()
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	/* Switch through the light switch states. */
	switch(ExtLights_LightsSwitch_CurrentState)
 8001b54:	4b6e      	ldr	r3, [pc, #440]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	3b17      	subs	r3, #23
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	f200 80d3 	bhi.w	8001d06 <ExtLights_LightSwitchMode+0x1b6>
 8001b60:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <ExtLights_LightSwitchMode+0x18>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b79 	.word	0x08001b79
 8001b6c:	08001bc3 	.word	0x08001bc3
 8001b70:	08001c63 	.word	0x08001c63
 8001b74:	08001cbd 	.word	0x08001cbd
	{
		/* Switch is on position zero, turn off the lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATEZERO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001b78:	4b66      	ldr	r3, [pc, #408]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	4b64      	ldr	r3, [pc, #400]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d00f      	beq.n	8001ba4 <ExtLights_LightSwitchMode+0x54>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001b84:	4b62      	ldr	r3, [pc, #392]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	4b62      	ldr	r3, [pc, #392]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001b8a:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f00b fa4d 	bl	800d02c <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001b92:	2000      	movs	r0, #0
 8001b94:	f00b fa59 	bl	800d04a <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001b98:	4b5f      	ldr	r3, [pc, #380]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001b9e:	4b5f      	ldr	r3, [pc, #380]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	485e      	ldr	r0, [pc, #376]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001ba8:	f00b fba7 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001bac:	2104      	movs	r1, #4
 8001bae:	485c      	ldr	r0, [pc, #368]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001bb0:	f00b fba3 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8001bb4:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001bba:	4b58      	ldr	r3, [pc, #352]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
			break;
 8001bc0:	e0a4      	b.n	8001d0c <ExtLights_LightSwitchMode+0x1bc>
		/* Switch is on position one, turn automatic lights controlled by sensor's input. */
		case EXTLIGHTS_LIGHTSWITCH_STATEONE:
			/* Read the sensor status. */
			if(Rte_P_Os_OsPort_Os_Counter % 39 == 0)
 8001bc2:	4b58      	ldr	r3, [pc, #352]	; (8001d24 <ExtLights_LightSwitchMode+0x1d4>)
 8001bc4:	6819      	ldr	r1, [r3, #0]
 8001bc6:	4b58      	ldr	r3, [pc, #352]	; (8001d28 <ExtLights_LightSwitchMode+0x1d8>)
 8001bc8:	fba3 2301 	umull	r2, r3, r3, r1
 8001bcc:	1aca      	subs	r2, r1, r3
 8001bce:	0852      	lsrs	r2, r2, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	095a      	lsrs	r2, r3, #5
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	1aca      	subs	r2, r1, r3
 8001be0:	2a00      	cmp	r2, #0
 8001be2:	d102      	bne.n	8001bea <ExtLights_LightSwitchMode+0x9a>
			{
				Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(EXTLIGHTS_LS_REQUEST);
 8001be4:	2000      	movs	r0, #0
 8001be6:	f000 fbf9 	bl	80023dc <SenCtrl_ProcessSensorValue>
			}
			else
			{
				/* do nothing */
			}
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001bea:	4b4a      	ldr	r3, [pc, #296]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	4b48      	ldr	r3, [pc, #288]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d00f      	beq.n	8001c16 <ExtLights_LightSwitchMode+0xc6>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001bf6:	4b46      	ldr	r3, [pc, #280]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	4b46      	ldr	r3, [pc, #280]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001bfc:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f00b fa14 	bl	800d02c <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001c04:	2000      	movs	r0, #0
 8001c06:	f00b fa20 	bl	800d04a <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001c0a:	4b43      	ldr	r3, [pc, #268]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001c10:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
			else
			{
				/* do nothing */
			}
			/* If the sensor status is on, turn on the lights to on. */
			if(ExtLights_LightSensorState == 1)
 8001c16:	4b45      	ldr	r3, [pc, #276]	; (8001d2c <ExtLights_LightSwitchMode+0x1dc>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d10e      	bne.n	8001c3c <ExtLights_LightSwitchMode+0xec>
			{
				ExtLights_LowBeam_CurrentState = STD_HIGH;
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8001c24:	4b3d      	ldr	r3, [pc, #244]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	483c      	ldr	r0, [pc, #240]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c2e:	f00b fb57 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001c32:	2104      	movs	r1, #4
 8001c34:	483a      	ldr	r0, [pc, #232]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c36:	f00b fb53 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
				ExtLights_LowBeam_CurrentState = STD_LOW;
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
			}
			break;
 8001c3a:	e066      	b.n	8001d0a <ExtLights_LightSwitchMode+0x1ba>
			else if(ExtLights_LightSensorState != 1)
 8001c3c:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <ExtLights_LightSwitchMode+0x1dc>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d062      	beq.n	8001d0a <ExtLights_LightSwitchMode+0x1ba>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001c44:	4b34      	ldr	r3, [pc, #208]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001c4a:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001c50:	2100      	movs	r1, #0
 8001c52:	4833      	ldr	r0, [pc, #204]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c54:	f00b fb51 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
				Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001c58:	2104      	movs	r1, #4
 8001c5a:	4831      	ldr	r0, [pc, #196]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c5c:	f00b fb4d 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
			break;
 8001c60:	e053      	b.n	8001d0a <ExtLights_LightSwitchMode+0x1ba>
		/* Switch is on position three, turn on position lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETWO:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001c62:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001c64:	781a      	ldrb	r2, [r3, #0]
 8001c66:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d00f      	beq.n	8001c8e <ExtLights_LightSwitchMode+0x13e>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001c6e:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001c74:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f00b f9d8 	bl	800d02c <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f00b f9e4 	bl	800d04a <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001c82:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4823      	ldr	r0, [pc, #140]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c92:	f00b fb25 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001c96:	2104      	movs	r1, #4
 8001c98:	4821      	ldr	r0, [pc, #132]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001c9a:	f00b fb21 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Write_TimH_TimHPort_Tim2Ccr1(500);
 8001c9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ca2:	f00b f9c3 	bl	800d02c <Rte_Write_TimH_TimHPort_Tim2Ccr1>
			Rte_Write_TimH_TimHPort_Tim2Ccr2(1500);
 8001ca6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001caa:	f00b f9ce 	bl	800d04a <Rte_Write_TimH_TimHPort_Tim2Ccr2>
			ExtLights_LowBeam_CurrentState = STD_LOW;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
			break;
 8001cba:	e027      	b.n	8001d0c <ExtLights_LightSwitchMode+0x1bc>
		/* Switch is on position four, turn on night time lights. */
		case EXTLIGHTS_LIGHTSWITCH_STATETHREE:
			if(ExtLights_Previous_LightSwitchState != ExtLights_LightsSwitch_CurrentState)
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001cbe:	781a      	ldrb	r2, [r3, #0]
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d00f      	beq.n	8001ce8 <ExtLights_LightSwitchMode+0x198>
			{
				ExtLights_Previous_LightSwitchState = ExtLights_LightsSwitch_CurrentState;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <ExtLights_LightSwitchMode+0x1c0>)
 8001cca:	781a      	ldrb	r2, [r3, #0]
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <ExtLights_LightSwitchMode+0x1c4>)
 8001cce:	701a      	strb	r2, [r3, #0]
				Rte_Write_TimH_TimHPort_Tim2Ccr1(0);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f00b f9ab 	bl	800d02c <Rte_Write_TimH_TimHPort_Tim2Ccr1>
				Rte_Write_TimH_TimHPort_Tim2Ccr2(0);
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f00b f9b7 	bl	800d04a <Rte_Write_TimH_TimHPort_Tim2Ccr2>
				ExtLights_LowBeam_CurrentState = STD_LOW;
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
				ExtLights_RearPositionLights_CurrentState = STD_LOW;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				/* do nothing */
			}
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 8001ce8:	2100      	movs	r1, #0
 8001cea:	480d      	ldr	r0, [pc, #52]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001cec:	f00b faf8 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 8001cf0:	2104      	movs	r1, #4
 8001cf2:	480b      	ldr	r0, [pc, #44]	; (8001d20 <ExtLights_LightSwitchMode+0x1d0>)
 8001cf4:	f00b faf4 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
			ExtLights_LowBeam_CurrentState = STD_HIGH;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <ExtLights_LightSwitchMode+0x1c8>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
			ExtLights_RearPositionLights_CurrentState = STD_HIGH;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <ExtLights_LightSwitchMode+0x1cc>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
			break;
 8001d04:	e002      	b.n	8001d0c <ExtLights_LightSwitchMode+0x1bc>
		default:
			break;
 8001d06:	bf00      	nop
 8001d08:	e000      	b.n	8001d0c <ExtLights_LightSwitchMode+0x1bc>
			break;
 8001d0a:	bf00      	nop
	}
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200000e3 	.word	0x200000e3
 8001d14:	20000103 	.word	0x20000103
 8001d18:	200000e8 	.word	0x200000e8
 8001d1c:	200000e9 	.word	0x200000e9
 8001d20:	20000348 	.word	0x20000348
 8001d24:	200001f8 	.word	0x200001f8
 8001d28:	a41a41a5 	.word	0xa41a41a5
 8001d2c:	200000fc 	.word	0x200000fc

08001d30 <ExtLights_HighBeam>:
/***********************************************************************************
* Function: ExtLights_HighBeam										   			   *
* Description: High beam trigger. 		  										   *
************************************************************************************/
VOID ExtLights_HighBeam(uint8 PinState)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_HIGHBEAM_PORT, EXTLIGHTS_HIGHBEAM_PIN, PinState);
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d42:	4803      	ldr	r0, [pc, #12]	; (8001d50 <ExtLights_HighBeam+0x20>)
 8001d44:	f00b fc7c 	bl	800d640 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40020000 	.word	0x40020000

08001d54 <ExtLights_ReverseLight>:
/***********************************************************************************
* Function: ExtLights_ReverseLight										   		   *
* Description: Reverse light trigger. 		   									   *
************************************************************************************/
VOID ExtLights_ReverseLight(uint8 PinState)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(EXTLIGHTS_REVERSELIGHT_PORT, EXTLIGHTS_REVERSELIGHT_PIN, PinState);
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	461a      	mov	r2, r3
 8001d62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d66:	4803      	ldr	r0, [pc, #12]	; (8001d74 <ExtLights_ReverseLight+0x20>)
 8001d68:	f00b fc6a 	bl	800d640 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40020400 	.word	0x40020400

08001d78 <IntLights_RxBtcState>:
/***********************************************************************************
* Function: IntLights_RxBtcState										   		   *
* Description: Process command. 		   		   						           *
************************************************************************************/
VOID IntLights_RxBtcState()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
	/* Process the state of the interior lights according to system state. */
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_HIGH)
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <IntLights_RxBtcState+0x4c>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d102      	bne.n	8001d8a <IntLights_RxBtcState+0x12>
	{
		IntLights_CurrentState = STD_HIGH;
 8001d84:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <IntLights_RxBtcState+0x50>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_LOW)
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <IntLights_RxBtcState+0x4c>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <IntLights_RxBtcState+0x28>
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <IntLights_RxBtcState+0x54>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d102      	bne.n	8001da0 <IntLights_RxBtcState+0x28>
	{
		IntLights_CurrentState = STD_LOW;
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <IntLights_RxBtcState+0x50>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_CenLoc_CenLocPort_CenLoc_FollowMeHomeState == STD_LOW && Rte_P_Btc_BtcPort_Btc_IntLights == STD_HIGH)
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <IntLights_RxBtcState+0x4c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d106      	bne.n	8001db6 <IntLights_RxBtcState+0x3e>
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <IntLights_RxBtcState+0x54>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d102      	bne.n	8001db6 <IntLights_RxBtcState+0x3e>
	{
		IntLights_CurrentState = STD_HIGH;
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <IntLights_RxBtcState+0x50>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
	Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel3);
 8001db6:	2108      	movs	r1, #8
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <IntLights_RxBtcState+0x58>)
 8001dba:	f00b fa91 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200000c1 	.word	0x200000c1
 8001dc8:	20000104 	.word	0x20000104
 8001dcc:	200000be 	.word	0x200000be
 8001dd0:	20000348 	.word	0x20000348

08001dd4 <IntLights_MainFunction>:
/***********************************************************************************
* Function: IntLights_MainFunction										           *
* Description: Interior lights main function for the application and state process.*
************************************************************************************/
VOID IntLights_MainFunction()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	IntLights_RxBtcState();
 8001dd8:	f7ff ffce 	bl	8001d78 <IntLights_RxBtcState>
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <Pdc_MainFunction>:
/***********************************************************************************
* Function: Pdc_MainFunction													   *
* Description: Main function application. 		   			                       *
************************************************************************************/
VOID Pdc_MainFunction()
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	if(Rte_P_Btc_BtcPort_Btc_ReverseLight == STD_HIGH)
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <Pdc_MainFunction+0x58>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d104      	bne.n	8001df6 <Pdc_MainFunction+0x16>
	{
		Pdc_Front_ProcessData();
 8001dec:	f000 f864 	bl	8001eb8 <Pdc_Front_ProcessData>
		Pdc_Rear_ProcessData();
 8001df0:	f000 f830 	bl	8001e54 <Pdc_Rear_ProcessData>
	}
	else
	{
		/* do nothing */
	}
}
 8001df4:	e01e      	b.n	8001e34 <Pdc_MainFunction+0x54>
	else if(Rte_P_Btc_BtcPort_Btc_ReverseLight == STD_LOW)
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <Pdc_MainFunction+0x58>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d11a      	bne.n	8001e34 <Pdc_MainFunction+0x54>
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN, STD_LOW);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2120      	movs	r1, #32
 8001e02:	480e      	ldr	r0, [pc, #56]	; (8001e3c <Pdc_MainFunction+0x5c>)
 8001e04:	f00b fc1c 	bl	800d640 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcR_Buzzer_TimerHandle);
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <Pdc_MainFunction+0x60>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f00b fc36 	bl	800d67e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcR_DistanceRange = 0;
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <Pdc_MainFunction+0x64>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN, STD_LOW);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e1e:	480a      	ldr	r0, [pc, #40]	; (8001e48 <Pdc_MainFunction+0x68>)
 8001e20:	f00b fc0e 	bl	800d640 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcF_Buzzer_TimerHandle);
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <Pdc_MainFunction+0x6c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f00b fc28 	bl	800d67e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcF_DistanceRange = 0;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <Pdc_MainFunction+0x70>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200000bd 	.word	0x200000bd
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	20000280 	.word	0x20000280
 8001e44:	20000108 	.word	0x20000108
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	20000284 	.word	0x20000284
 8001e50:	2000010c 	.word	0x2000010c

08001e54 <Pdc_Rear_ProcessData>:
/***********************************************************************************
* Function: Pdc_Rear_ProcessData												   *
* Description: Process distance data.		   			                           *
************************************************************************************/
VOID Pdc_Rear_ProcessData()
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Rear_Distance = (3 * Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour) / 4;
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <Pdc_Rear_ProcessData+0x50>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	da00      	bge.n	8001e6a <Pdc_Rear_ProcessData+0x16>
 8001e68:	3303      	adds	r3, #3
 8001e6a:	109b      	asrs	r3, r3, #2
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <Pdc_Rear_ProcessData+0x54>)
 8001e70:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE)
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <Pdc_Rear_ProcessData+0x54>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b14      	cmp	r3, #20
 8001e78:	d801      	bhi.n	8001e7e <Pdc_Rear_ProcessData+0x2a>
	{
		Pdc_Rear_TriggerBuzzer();
 8001e7a:	f000 f851 	bl	8001f20 <Pdc_Rear_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance >= PDC_MAX_DISTANCE)
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <Pdc_Rear_ProcessData+0x54>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b13      	cmp	r3, #19
 8001e84:	d90c      	bls.n	8001ea0 <Pdc_Rear_ProcessData+0x4c>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN, STD_LOW);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2120      	movs	r1, #32
 8001e8a:	4808      	ldr	r0, [pc, #32]	; (8001eac <Pdc_Rear_ProcessData+0x58>)
 8001e8c:	f00b fbd8 	bl	800d640 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcR_Buzzer_TimerHandle);
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <Pdc_Rear_ProcessData+0x5c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f00b fbf2 	bl	800d67e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcR_DistanceRange = 0;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <Pdc_Rear_ProcessData+0x60>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200006e9 	.word	0x200006e9
 8001ea8:	20000105 	.word	0x20000105
 8001eac:	40020400 	.word	0x40020400
 8001eb0:	20000280 	.word	0x20000280
 8001eb4:	20000108 	.word	0x20000108

08001eb8 <Pdc_Front_ProcessData>:
/***********************************************************************************
* Function: Pdc_Front_ProcessData												   *
* Description: Process distance data. 		   			                           *
************************************************************************************/
VOID Pdc_Front_ProcessData()
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	/* Store the distance measured. */
	Pdc_Front_Distance = (3 * Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree) / 4;
 8001ebc:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <Pdc_Front_ProcessData+0x54>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	da00      	bge.n	8001ece <Pdc_Front_ProcessData+0x16>
 8001ecc:	3303      	adds	r3, #3
 8001ece:	109b      	asrs	r3, r3, #2
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <Pdc_Front_ProcessData+0x58>)
 8001ed4:	701a      	strb	r2, [r3, #0]
	/* Trigger the buzzer according to the distance measured. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE)
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <Pdc_Front_ProcessData+0x58>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b14      	cmp	r3, #20
 8001edc:	d801      	bhi.n	8001ee2 <Pdc_Front_ProcessData+0x2a>
	{
		Pdc_Front_TriggerBuzzer();
 8001ede:	f000 f897 	bl	8002010 <Pdc_Front_TriggerBuzzer>
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance >= PDC_MAX_DISTANCE)
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <Pdc_Front_ProcessData+0x58>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b13      	cmp	r3, #19
 8001ee8:	d90d      	bls.n	8001f06 <Pdc_Front_ProcessData+0x4e>
	{
		Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN, STD_LOW);
 8001eea:	2200      	movs	r2, #0
 8001eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef0:	4808      	ldr	r0, [pc, #32]	; (8001f14 <Pdc_Front_ProcessData+0x5c>)
 8001ef2:	f00b fba5 	bl	800d640 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_PdcF_Buzzer_TimerHandle);
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <Pdc_Front_ProcessData+0x60>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f00b fbbf 	bl	800d67e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		PdcF_DistanceRange = 0;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <Pdc_Front_ProcessData+0x64>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200006d9 	.word	0x200006d9
 8001f10:	20000106 	.word	0x20000106
 8001f14:	40020800 	.word	0x40020800
 8001f18:	20000284 	.word	0x20000284
 8001f1c:	2000010c 	.word	0x2000010c

08001f20 <Pdc_Rear_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Rear_TriggerBuzzer												   *
* Description: Control buzzer.		   			                                   *
************************************************************************************/
VOID Pdc_Rear_TriggerBuzzer()
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcR_Buzzer_TimerHandle) == 0)
 8001f24:	4b37      	ldr	r3, [pc, #220]	; (8002004 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f008 f9e0 	bl	800a2ee <osTimerIsRunning>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d139      	bne.n	8001fa8 <Pdc_Rear_TriggerBuzzer+0x88>
	{
		switch(PdcR_DistanceRange)
 8001f34:	4b34      	ldr	r3, [pc, #208]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d833      	bhi.n	8001fa6 <Pdc_Rear_TriggerBuzzer+0x86>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <Pdc_Rear_TriggerBuzzer+0x24>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f55 	.word	0x08001f55
 8001f48:	08001f6b 	.word	0x08001f6b
 8001f4c:	08001f7f 	.word	0x08001f7f
 8001f50:	08001f93 	.word	0x08001f93
		{
			case 1:
				PdcR_DistanceRange = 0;
 8001f54:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f62:	4618      	mov	r0, r3
 8001f64:	f00b fb7e 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8001f68:	e01e      	b.n	8001fa8 <Pdc_Rear_TriggerBuzzer+0x88>
			case 2:
				PdcR_DistanceRange = 0;
 8001f6a:	4b27      	ldr	r3, [pc, #156]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 8001f70:	4b24      	ldr	r3, [pc, #144]	; (8002004 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	21fa      	movs	r1, #250	; 0xfa
 8001f76:	4618      	mov	r0, r3
 8001f78:	f00b fb74 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8001f7c:	e014      	b.n	8001fa8 <Pdc_Rear_TriggerBuzzer+0x88>
			case 3:
				PdcR_DistanceRange = 0;
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 8001f84:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	217d      	movs	r1, #125	; 0x7d
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f00b fb6a 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8001f90:	e00a      	b.n	8001fa8 <Pdc_Rear_TriggerBuzzer+0x88>
			case 4:
				PdcR_DistanceRange = 0;
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcR_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <Pdc_Rear_TriggerBuzzer+0xe4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	214b      	movs	r1, #75	; 0x4b
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f00b fb60 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8001fa4:	e000      	b.n	8001fa8 <Pdc_Rear_TriggerBuzzer+0x88>
			default:
				break;
 8001fa6:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Rear_Distance <= PDC_MAX_DISTANCE && Pdc_Rear_Distance >= PDC_FIRST_SAFE_DISTANCE)
 8001fa8:	4b18      	ldr	r3, [pc, #96]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b14      	cmp	r3, #20
 8001fae:	d806      	bhi.n	8001fbe <Pdc_Rear_TriggerBuzzer+0x9e>
 8001fb0:	4b16      	ldr	r3, [pc, #88]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b10      	cmp	r3, #16
 8001fb6:	d902      	bls.n	8001fbe <Pdc_Rear_TriggerBuzzer+0x9e>
	{
		PdcR_DistanceRange = 1;
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_SECOND_SAFE_DISTANCE)
 8001fbe:	4b13      	ldr	r3, [pc, #76]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b11      	cmp	r3, #17
 8001fc4:	d806      	bhi.n	8001fd4 <Pdc_Rear_TriggerBuzzer+0xb4>
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b0d      	cmp	r3, #13
 8001fcc:	d902      	bls.n	8001fd4 <Pdc_Rear_TriggerBuzzer+0xb4>
	{
		PdcR_DistanceRange = 2;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Rear_Distance >= PDC_THIRD_SAFE_DISTANCE)
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b0e      	cmp	r3, #14
 8001fda:	d806      	bhi.n	8001fea <Pdc_Rear_TriggerBuzzer+0xca>
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b0a      	cmp	r3, #10
 8001fe2:	d902      	bls.n	8001fea <Pdc_Rear_TriggerBuzzer+0xca>
	{
		PdcR_DistanceRange = 3;
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Rear_Distance <= PDC_THIRD_SAFE_DISTANCE && Pdc_Rear_Distance != 0)
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b0b      	cmp	r3, #11
 8001ff0:	d806      	bhi.n	8002000 <Pdc_Rear_TriggerBuzzer+0xe0>
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <Pdc_Rear_TriggerBuzzer+0xec>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <Pdc_Rear_TriggerBuzzer+0xe0>
	{
		PdcR_DistanceRange = 4;
 8001ffa:	4b03      	ldr	r3, [pc, #12]	; (8002008 <Pdc_Rear_TriggerBuzzer+0xe8>)
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000280 	.word	0x20000280
 8002008:	20000108 	.word	0x20000108
 800200c:	20000105 	.word	0x20000105

08002010 <Pdc_Front_TriggerBuzzer>:
/***********************************************************************************
* Function: Pdc_Front_TriggerBuzzer												   *
* Description: Control buzzer		   			   								   *
************************************************************************************/
VOID Pdc_Front_TriggerBuzzer()
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_PdcF_Buzzer_TimerHandle) == 0)
 8002014:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <Pdc_Front_TriggerBuzzer+0xe4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f008 f968 	bl	800a2ee <osTimerIsRunning>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d139      	bne.n	8002098 <Pdc_Front_TriggerBuzzer+0x88>
	{
		switch(PdcF_DistanceRange)
 8002024:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3b01      	subs	r3, #1
 800202a:	2b03      	cmp	r3, #3
 800202c:	d833      	bhi.n	8002096 <Pdc_Front_TriggerBuzzer+0x86>
 800202e:	a201      	add	r2, pc, #4	; (adr r2, 8002034 <Pdc_Front_TriggerBuzzer+0x24>)
 8002030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002034:	08002045 	.word	0x08002045
 8002038:	0800205b 	.word	0x0800205b
 800203c:	0800206f 	.word	0x0800206f
 8002040:	08002083 	.word	0x08002083
		{
			case 1:
				PdcF_DistanceRange = 0;
 8002044:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_ONE);
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <Pdc_Front_TriggerBuzzer+0xe4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002052:	4618      	mov	r0, r3
 8002054:	f00b fb06 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002058:	e01e      	b.n	8002098 <Pdc_Front_TriggerBuzzer+0x88>
			case 2:
				PdcF_DistanceRange = 0;
 800205a:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_TWO);
 8002060:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <Pdc_Front_TriggerBuzzer+0xe4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	21fa      	movs	r1, #250	; 0xfa
 8002066:	4618      	mov	r0, r3
 8002068:	f00b fafc 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 800206c:	e014      	b.n	8002098 <Pdc_Front_TriggerBuzzer+0x88>
			case 3:
				PdcF_DistanceRange = 0;
 800206e:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_THREE);
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <Pdc_Front_TriggerBuzzer+0xe4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	217d      	movs	r1, #125	; 0x7d
 800207a:	4618      	mov	r0, r3
 800207c:	f00b faf2 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002080:	e00a      	b.n	8002098 <Pdc_Front_TriggerBuzzer+0x88>
			case 4:
				PdcF_DistanceRange = 0;
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
				Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_PdcF_Buzzer_TimerHandle, PDC_BUZZER_PERIOD_FOUR);
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <Pdc_Front_TriggerBuzzer+0xe4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	214b      	movs	r1, #75	; 0x4b
 800208e:	4618      	mov	r0, r3
 8002090:	f00b fae8 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
				break;
 8002094:	e000      	b.n	8002098 <Pdc_Front_TriggerBuzzer+0x88>
			default:
				break;
 8002096:	bf00      	nop
	else
	{
		/* do nothing */
	}
	/* Trigger the buzzer for each case and type of safety distance. */
	if(Pdc_Front_Distance <= PDC_MAX_DISTANCE && Pdc_Front_Distance >= PDC_FIRST_SAFE_DISTANCE)
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b14      	cmp	r3, #20
 800209e:	d806      	bhi.n	80020ae <Pdc_Front_TriggerBuzzer+0x9e>
 80020a0:	4b16      	ldr	r3, [pc, #88]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b10      	cmp	r3, #16
 80020a6:	d902      	bls.n	80020ae <Pdc_Front_TriggerBuzzer+0x9e>
	{
		PdcF_DistanceRange = 1;
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_FIRST_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_SECOND_SAFE_DISTANCE)
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b11      	cmp	r3, #17
 80020b4:	d806      	bhi.n	80020c4 <Pdc_Front_TriggerBuzzer+0xb4>
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b0d      	cmp	r3, #13
 80020bc:	d902      	bls.n	80020c4 <Pdc_Front_TriggerBuzzer+0xb4>
	{
		PdcF_DistanceRange = 2;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 80020c0:	2202      	movs	r2, #2
 80020c2:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_SECOND_SAFE_DISTANCE && Pdc_Front_Distance >= PDC_THIRD_SAFE_DISTANCE)
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b0e      	cmp	r3, #14
 80020ca:	d806      	bhi.n	80020da <Pdc_Front_TriggerBuzzer+0xca>
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b0a      	cmp	r3, #10
 80020d2:	d902      	bls.n	80020da <Pdc_Front_TriggerBuzzer+0xca>
	{
		PdcF_DistanceRange = 3;
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 80020d6:	2203      	movs	r2, #3
 80020d8:	601a      	str	r2, [r3, #0]
	else
	{
		/* do nothing */
	}

	if(Pdc_Front_Distance <= PDC_THIRD_SAFE_DISTANCE && Pdc_Front_Distance != 0)
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b0b      	cmp	r3, #11
 80020e0:	d806      	bhi.n	80020f0 <Pdc_Front_TriggerBuzzer+0xe0>
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <Pdc_Front_TriggerBuzzer+0xec>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <Pdc_Front_TriggerBuzzer+0xe0>
	{
		PdcF_DistanceRange = 4;
 80020ea:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <Pdc_Front_TriggerBuzzer+0xe8>)
 80020ec:	2204      	movs	r2, #4
 80020ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000284 	.word	0x20000284
 80020f8:	2000010c 	.word	0x2000010c
 80020fc:	20000106 	.word	0x20000106

08002100 <SecAlm_LightsBuzzerControl>:
/***********************************************************************************
* Function: SecAlm_LightsBuzzerControl										       *
* Description: Controls the lights and buzzer in case of alarm trigger. 		   *
************************************************************************************/
VOID SecAlm_LightsBuzzerControl()
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint32 sensorStatus = STD_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
	/* Get the sensor status. */
	sensorStatus = SecAlm_VibSenStatus();
 800210a:	f000 f893 	bl	8002234 <SecAlm_VibSenStatus>
 800210e:	4603      	mov	r3, r0
 8002110:	607b      	str	r3, [r7, #4]
	/* If the trigger was previously on and now it is off. */
	if(SecAlm_TriggerPreviousState != SecAlm_Trigger && !SecAlm_Trigger)
 8002112:	4b3f      	ldr	r3, [pc, #252]	; (8002210 <SecAlm_LightsBuzzerControl+0x110>)
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	4b3f      	ldr	r3, [pc, #252]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d006      	beq.n	800212c <SecAlm_LightsBuzzerControl+0x2c>
 800211e:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <SecAlm_LightsBuzzerControl+0x2c>
	{
		/* Reset the counter. */
		SecAlm_TriggerIRQCounterForTimer4 = STD_LOW;
 8002126:	4b3c      	ldr	r3, [pc, #240]	; (8002218 <SecAlm_LightsBuzzerControl+0x118>)
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the counter exceeded the maximum value, reset the variables. */
	if(SecAlm_TriggerIRQCounterForTimer4 >= 20)
 800212c:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <SecAlm_LightsBuzzerControl+0x118>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b13      	cmp	r3, #19
 8002132:	d922      	bls.n	800217a <SecAlm_LightsBuzzerControl+0x7a>
	{
		SecAlm_TriggerPreviousState 						= SecAlm_Trigger;
 8002134:	4b37      	ldr	r3, [pc, #220]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	4b35      	ldr	r3, [pc, #212]	; (8002210 <SecAlm_LightsBuzzerControl+0x110>)
 800213a:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter	= STD_HIGH;
 800213c:	4b37      	ldr	r3, [pc, #220]	; (800221c <SecAlm_LightsBuzzerControl+0x11c>)
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
		Rte_P_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter 	= STD_LOW;
 8002142:	4b37      	ldr	r3, [pc, #220]	; (8002220 <SecAlm_LightsBuzzerControl+0x120>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
		SecAlm_Trigger 										= STD_LOW;
 8002148:	4b32      	ldr	r3, [pc, #200]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange 								= STD_LOW;
 800214e:	4b35      	ldr	r3, [pc, #212]	; (8002224 <SecAlm_LightsBuzzerControl+0x124>)
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
		SecAlm_TriggerIRQCounterForTimer4 					= STD_LOW;
 8002154:	4b30      	ldr	r3, [pc, #192]	; (8002218 <SecAlm_LightsBuzzerControl+0x118>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 800215a:	4b33      	ldr	r3, [pc, #204]	; (8002228 <SecAlm_LightsBuzzerControl+0x128>)
 800215c:	2200      	movs	r2, #0
 800215e:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatus 								= STD_LOW;
 8002160:	4b32      	ldr	r3, [pc, #200]	; (800222c <SecAlm_LightsBuzzerControl+0x12c>)
 8002162:	2200      	movs	r2, #0
 8002164:	801a      	strh	r2, [r3, #0]
		SecAlm_SensorStatusCounter 							= STD_LOW;
 8002166:	4b30      	ldr	r3, [pc, #192]	; (8002228 <SecAlm_LightsBuzzerControl+0x128>)
 8002168:	2200      	movs	r2, #0
 800216a:	801a      	strh	r2, [r3, #0]
		/* Stop the os timer assigned to security alarm trigger. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(Os_SecAlmAlarm_TimerHandle);
 800216c:	4b30      	ldr	r3, [pc, #192]	; (8002230 <SecAlm_LightsBuzzerControl+0x130>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f00b fa84 	bl	800d67e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>
		/* Turn off the lights to make sure their state is off before any other action. */
		SecAlm_TurnOnExtLights();
 8002176:	f000 f891 	bl	800229c <SecAlm_TurnOnExtLights>
		/* do nothing */
	}
	/* The counter resets every 10 seconds, if a reset of the timer
	 * occurs, then reset the variables related to the security
	 * alarm trigger. */
	if(SecAlm_SensorStatusCounter == STD_LOW)
 800217a:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <SecAlm_LightsBuzzerControl+0x128>)
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d107      	bne.n	8002192 <SecAlm_LightsBuzzerControl+0x92>
	{
		sensorStatus 	= STD_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
		SecAlm_Trigger 	= STD_LOW;
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
		SecAlm_PinStateChange = STD_LOW;
 800218c:	4b25      	ldr	r3, [pc, #148]	; (8002224 <SecAlm_LightsBuzzerControl+0x124>)
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the sensor status is high, trigger the alarm. */
	if(sensorStatus == STD_HIGH)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d102      	bne.n	800219e <SecAlm_LightsBuzzerControl+0x9e>
	{
		SecAlm_Trigger = STD_HIGH;
 8002198:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
	else
	{
		/* do nothing */
	}
	/* If the trigger is set to high, perform alarm triggering. */
	if(SecAlm_Trigger == STD_HIGH)
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d128      	bne.n	80021f8 <SecAlm_LightsBuzzerControl+0xf8>
	{
		/* One alarm cycle is performed consisting of 10 seconds. */
		if(Rte_Call_Os_R_OsPort_OsTimerIsRunning(Os_SecAlmAlarm_TimerHandle) == 0)
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <SecAlm_LightsBuzzerControl+0x130>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f008 f89f 	bl	800a2ee <osTimerIsRunning>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <SecAlm_LightsBuzzerControl+0xc4>
		{
			Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlmAlarm_TimerHandle, 500);
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <SecAlm_LightsBuzzerControl+0x130>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80021be:	4618      	mov	r0, r3
 80021c0:	f00b fa50 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
		else
		{
			/* do nothing */
		}
		/* Cycle between on and off states of buzzer and lights. */
		if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 1)
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <SecAlm_LightsBuzzerControl+0x118>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <SecAlm_LightsBuzzerControl+0xde>
		{
			SecAlm_PinStateChange = STD_HIGH;
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <SecAlm_LightsBuzzerControl+0x124>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 80021d8:	f000 f860 	bl	800229c <SecAlm_TurnOnExtLights>
	}
	else
	{
		/* do nothing */
	}
}
 80021dc:	e013      	b.n	8002206 <SecAlm_LightsBuzzerControl+0x106>
		else if(SecAlm_TriggerIRQCounterForTimer4 % 2 == 0)
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <SecAlm_LightsBuzzerControl+0x118>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10c      	bne.n	8002206 <SecAlm_LightsBuzzerControl+0x106>
			SecAlm_PinStateChange = STD_LOW;
 80021ec:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <SecAlm_LightsBuzzerControl+0x124>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
			SecAlm_TurnOnExtLights();
 80021f2:	f000 f853 	bl	800229c <SecAlm_TurnOnExtLights>
}
 80021f6:	e006      	b.n	8002206 <SecAlm_LightsBuzzerControl+0x106>
	else if(SecAlm_Trigger == STD_LOW)
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <SecAlm_LightsBuzzerControl+0x114>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <SecAlm_LightsBuzzerControl+0x106>
		SecAlm_ToggleAlarmBuzzer(STD_LOW);
 8002200:	2000      	movs	r0, #0
 8002202:	f000 f8c7 	bl	8002394 <SecAlm_ToggleAlarmBuzzer>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000119 	.word	0x20000119
 8002214:	20000110 	.word	0x20000110
 8002218:	20000112 	.word	0x20000112
 800221c:	200000c4 	.word	0x200000c4
 8002220:	200000c6 	.word	0x200000c6
 8002224:	20000111 	.word	0x20000111
 8002228:	20000114 	.word	0x20000114
 800222c:	20000116 	.word	0x20000116
 8002230:	2000027c 	.word	0x2000027c

08002234 <SecAlm_VibSenStatus>:
/***********************************************************************************
* Function: SecAlm_VibSenStatus										               *
* Description: Updates the vibration sensor status based on measurements.		   *
************************************************************************************/
StdReturnType SecAlm_VibSenStatus()
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
	/* Local variable for sensor status. */
	uint16 sensorStatus = STD_LOW;
 800223a:	2300      	movs	r3, #0
 800223c:	80fb      	strh	r3, [r7, #6]
	/* Read the sensor value. */
	Rte_Call_SenCtrl_P_SenCtrlPort_SenCtrl_ProcessSensorValue(SECALM_VS_REQUEST);
 800223e:	2002      	movs	r0, #2
 8002240:	f000 f8cc 	bl	80023dc <SenCtrl_ProcessSensorValue>
	/* If the sensor was triggered. */
	if(SecAlm_SensorState == STD_HIGH)
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <SecAlm_VibSenStatus+0x5c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d10c      	bne.n	8002266 <SecAlm_VibSenStatus+0x32>
	{
		/* Count for how long it has been triggered. */
		SecAlm_SensorStatusCounter = SecAlm_SensorStatusCounter + 1;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <SecAlm_VibSenStatus+0x60>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	3301      	adds	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <SecAlm_VibSenStatus+0x60>)
 8002256:	801a      	strh	r2, [r3, #0]
		/* Start the reset timer for the counter variable. */
		Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(Os_SecAlm_AlarmResetHandle, 10000);
 8002258:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <SecAlm_VibSenStatus+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f242 7110 	movw	r1, #10000	; 0x2710
 8002260:	4618      	mov	r0, r3
 8002262:	f00b f9ff 	bl	800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>
	else
	{
		/* do nothing */
	}
	/* If the sensor was triggered enough times. */
	if(SecAlm_SensorStatusCounter >= 300)
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <SecAlm_VibSenStatus+0x60>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800226e:	d302      	bcc.n	8002276 <SecAlm_VibSenStatus+0x42>
	{
		/* Set the sensor status to high. */
		sensorStatus = STD_HIGH;
 8002270:	2301      	movs	r3, #1
 8002272:	80fb      	strh	r3, [r7, #6]
 8002274:	e006      	b.n	8002284 <SecAlm_VibSenStatus+0x50>
	}
	else if(SecAlm_SensorStatusCounter < 300)
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <SecAlm_VibSenStatus+0x60>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800227e:	d201      	bcs.n	8002284 <SecAlm_VibSenStatus+0x50>
	{
		/* Set the sensor status to low. */
		sensorStatus = STD_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	80fb      	strh	r3, [r7, #6]
	else
	{
		/* do nothing */
	}
	/* Return sensor status. */
	return sensorStatus;
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	b2db      	uxtb	r3, r3
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000118 	.word	0x20000118
 8002294:	20000114 	.word	0x20000114
 8002298:	20000264 	.word	0x20000264

0800229c <SecAlm_TurnOnExtLights>:
/***********************************************************************************
* Function: SecAlm_TurnOnExtLights										           *
* Description: Trigger the exterior lights and buzzer.							   *
************************************************************************************/
VOID SecAlm_TurnOnExtLights()
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
	/* Turn on the lights and the buzzer. */
	if(SecAlm_PinStateChange == STD_HIGH)
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <SecAlm_TurnOnExtLights+0x84>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d118      	bne.n	80022da <SecAlm_TurnOnExtLights+0x3e>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80022a8:	2100      	movs	r1, #0
 80022aa:	481e      	ldr	r0, [pc, #120]	; (8002324 <SecAlm_TurnOnExtLights+0x88>)
 80022ac:	f00b f818 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80022b0:	2104      	movs	r1, #4
 80022b2:	481c      	ldr	r0, [pc, #112]	; (8002324 <SecAlm_TurnOnExtLights+0x88>)
 80022b4:	f00b f814 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 80022b8:	2108      	movs	r1, #8
 80022ba:	481b      	ldr	r0, [pc, #108]	; (8002328 <SecAlm_TurnOnExtLights+0x8c>)
 80022bc:	f00b f810 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 80022c0:	210c      	movs	r1, #12
 80022c2:	4819      	ldr	r0, [pc, #100]	; (8002328 <SecAlm_TurnOnExtLights+0x8c>)
 80022c4:	f00b f80c 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 80022c8:	2108      	movs	r1, #8
 80022ca:	4818      	ldr	r0, [pc, #96]	; (800232c <SecAlm_TurnOnExtLights+0x90>)
 80022cc:	f00b f808 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 80022d0:	210c      	movs	r1, #12
 80022d2:	4816      	ldr	r0, [pc, #88]	; (800232c <SecAlm_TurnOnExtLights+0x90>)
 80022d4:	f00b f804 	bl	800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>
 80022d8:	e01b      	b.n	8002312 <SecAlm_TurnOnExtLights+0x76>
	}
	else if(SecAlm_PinStateChange == STD_LOW)
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <SecAlm_TurnOnExtLights+0x84>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d117      	bne.n	8002312 <SecAlm_TurnOnExtLights+0x76>
	{
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel1);
 80022e2:	2100      	movs	r1, #0
 80022e4:	480f      	ldr	r0, [pc, #60]	; (8002324 <SecAlm_TurnOnExtLights+0x88>)
 80022e6:	f00b f808 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim2, Rte_P_Tim_TimPort_TimChannel2);
 80022ea:	2104      	movs	r1, #4
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <SecAlm_TurnOnExtLights+0x88>)
 80022ee:	f00b f804 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel3);
 80022f2:	2108      	movs	r1, #8
 80022f4:	480c      	ldr	r0, [pc, #48]	; (8002328 <SecAlm_TurnOnExtLights+0x8c>)
 80022f6:	f00b f800 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim3, Rte_P_Tim_TimPort_TimChannel4);
 80022fa:	210c      	movs	r1, #12
 80022fc:	480a      	ldr	r0, [pc, #40]	; (8002328 <SecAlm_TurnOnExtLights+0x8c>)
 80022fe:	f00a fffc 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel3);
 8002302:	2108      	movs	r1, #8
 8002304:	4809      	ldr	r0, [pc, #36]	; (800232c <SecAlm_TurnOnExtLights+0x90>)
 8002306:	f00a fff8 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
		Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(Rte_P_Tim_TimPort_Htim4, Rte_P_Tim_TimPort_TimChannel4);
 800230a:	210c      	movs	r1, #12
 800230c:	4807      	ldr	r0, [pc, #28]	; (800232c <SecAlm_TurnOnExtLights+0x90>)
 800230e:	f00a fff4 	bl	800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>
	}
	SecAlm_ToggleAlarmBuzzer(SecAlm_PinStateChange);
 8002312:	4b03      	ldr	r3, [pc, #12]	; (8002320 <SecAlm_TurnOnExtLights+0x84>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f83c 	bl	8002394 <SecAlm_ToggleAlarmBuzzer>
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000111 	.word	0x20000111
 8002324:	20000348 	.word	0x20000348
 8002328:	200003fc 	.word	0x200003fc
 800232c:	200004b0 	.word	0x200004b0

08002330 <SecAlm_MainFunction>:
/***********************************************************************************
* Function: SecAlm_MainFunction										           	   *
* Description: Process application states.										   *
************************************************************************************/
VOID SecAlm_MainFunction()
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	SecAlm_LightsBuzzerControl();
 8002334:	f7ff fee4 	bl	8002100 <SecAlm_LightsBuzzerControl>
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}

0800233c <SecAlm_Init>:
/***********************************************************************************
* Function: SecAlm_Init										                       *
* Description: Initialize the application.										   *
************************************************************************************/
StdReturnType SecAlm_Init()
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
	/* Set the variables to 0. */
	SecAlm_Trigger 						= STD_LOW;
 8002340:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <SecAlm_Init+0x3c>)
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
	SecAlm_PinStateChange 				= STD_LOW;
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <SecAlm_Init+0x40>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerIRQCounterForTimer4 	= STD_LOW;
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <SecAlm_Init+0x44>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
	SecAlm_SensorStatusCounter 			= STD_LOW;
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <SecAlm_Init+0x48>)
 8002354:	2200      	movs	r2, #0
 8002356:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorStatus					= STD_LOW;
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <SecAlm_Init+0x4c>)
 800235a:	2200      	movs	r2, #0
 800235c:	801a      	strh	r2, [r3, #0]
	SecAlm_SensorState 					= STD_LOW;
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <SecAlm_Init+0x50>)
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
	SecAlm_TriggerPreviousState 		= STD_LOW;
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <SecAlm_Init+0x54>)
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
	Rte_Write_Os_R_OsPort_Os_Alarm_Counter(&SecAlm_TriggerIRQCounterForTimer4);
 800236a:	4805      	ldr	r0, [pc, #20]	; (8002380 <SecAlm_Init+0x44>)
 800236c:	f00a ff7e 	bl	800d26c <Rte_Write_Os_R_OsPort_Os_Alarm_Counter>
	return E_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000110 	.word	0x20000110
 800237c:	20000111 	.word	0x20000111
 8002380:	20000112 	.word	0x20000112
 8002384:	20000114 	.word	0x20000114
 8002388:	20000116 	.word	0x20000116
 800238c:	20000118 	.word	0x20000118
 8002390:	20000119 	.word	0x20000119

08002394 <SecAlm_ToggleAlarmBuzzer>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmBuzzer										       *
* Description: Alarm buzzer trigger.                                               *
************************************************************************************/
VOID SecAlm_ToggleAlarmBuzzer(uint8 PinState)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_BUZZER_PORT, SECALM_BUZZER_PIN, PinState);
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	461a      	mov	r2, r3
 80023a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023a6:	4803      	ldr	r0, [pc, #12]	; (80023b4 <SecAlm_ToggleAlarmBuzzer+0x20>)
 80023a8:	f00b f94a 	bl	800d640 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40020400 	.word	0x40020400

080023b8 <SecAlm_ToggleAlarmLed>:
/***********************************************************************************
* Function: SecAlm_ToggleAlarmLed										           *
* Description: Alarm LED trigger.												   *
************************************************************************************/
VOID SecAlm_ToggleAlarmLed(uint8 PinState)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
	Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(SECALM_LED_PORT, SECALM_LED_PIN, PinState);
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	461a      	mov	r2, r3
 80023c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023ca:	4803      	ldr	r0, [pc, #12]	; (80023d8 <SecAlm_ToggleAlarmLed+0x20>)
 80023cc:	f00b f938 	bl	800d640 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40020400 	.word	0x40020400

080023dc <SenCtrl_ProcessSensorValue>:
/***********************************************************************************
* Function: SenCtrl_ProcessSensorValue									   	       *
* Description: Process the request for the sensor value. 	                       *
************************************************************************************/
VOID SenCtrl_ProcessSensorValue(uint8 request)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
	/* Store request into local variable. */
	uint8 localRequest = request;
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	77fb      	strb	r3, [r7, #31]
	/* Process sensor request. */
	switch(localRequest)
 80023ea:	7ffb      	ldrb	r3, [r7, #31]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <SenCtrl_ProcessSensorValue+0x1a>
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d01c      	beq.n	800242e <SenCtrl_ProcessSensorValue+0x52>
			{
				/* do nothing */
			}
			break;
		default:
			break;
 80023f4:	e03a      	b.n	800246c <SenCtrl_ProcessSensorValue+0x90>
			if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] == 4095)
 80023f6:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <SenCtrl_ProcessSensorValue+0x98>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80023fe:	4293      	cmp	r3, r2
 8002400:	d107      	bne.n	8002412 <SenCtrl_ProcessSensorValue+0x36>
				uint32 localls = 1;
 8002402:	2301      	movs	r3, #1
 8002404:	61bb      	str	r3, [r7, #24]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 8002406:	f107 0318 	add.w	r3, r7, #24
 800240a:	4618      	mov	r0, r3
 800240c:	f00a fe54 	bl	800d0b8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			break;
 8002410:	e029      	b.n	8002466 <SenCtrl_ProcessSensorValue+0x8a>
			else if(SenCtrl_MeasuredValues[SENCTRL_EXTLIGHTS_LS_POSITION] < 4095)
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <SenCtrl_ProcessSensorValue+0x98>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f640 72fe 	movw	r2, #4094	; 0xffe
 800241a:	4293      	cmp	r3, r2
 800241c:	d823      	bhi.n	8002466 <SenCtrl_ProcessSensorValue+0x8a>
				uint32 localls = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
				Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(&localls);
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4618      	mov	r0, r3
 8002428:	f00a fe46 	bl	800d0b8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>
			break;
 800242c:	e01b      	b.n	8002466 <SenCtrl_ProcessSensorValue+0x8a>
			if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] == 4095)
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <SenCtrl_ProcessSensorValue+0x98>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002436:	4293      	cmp	r3, r2
 8002438:	d107      	bne.n	800244a <SenCtrl_ProcessSensorValue+0x6e>
				uint32 localvs = STD_HIGH;
 800243a:	2301      	movs	r3, #1
 800243c:	613b      	str	r3, [r7, #16]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	4618      	mov	r0, r3
 8002444:	f00a fe26 	bl	800d094 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			break;
 8002448:	e00f      	b.n	800246a <SenCtrl_ProcessSensorValue+0x8e>
			else if(SenCtrl_MeasuredValues[SENCTRL_SECALM_VS_REQUEST] < 4095)
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <SenCtrl_ProcessSensorValue+0x98>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002452:	4293      	cmp	r3, r2
 8002454:	d809      	bhi.n	800246a <SenCtrl_ProcessSensorValue+0x8e>
				uint32 localvs = STD_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
				Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(&localvs);
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	4618      	mov	r0, r3
 8002460:	f00a fe18 	bl	800d094 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>
			break;
 8002464:	e001      	b.n	800246a <SenCtrl_ProcessSensorValue+0x8e>
			break;
 8002466:	bf00      	nop
 8002468:	e000      	b.n	800246c <SenCtrl_ProcessSensorValue+0x90>
			break;
 800246a:	bf00      	nop
	}
}
 800246c:	bf00      	nop
 800246e:	3720      	adds	r7, #32
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	2000011c 	.word	0x2000011c

08002478 <Uart_Init>:
/***********************************************************************************
* Function: Uart_Init										       				   *
* Description: Initialize the protocol.									 		   *
************************************************************************************/
StdReturnType Uart_Init()
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
	/* Set the instance. */
	huart1.Instance = USART1;
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <Uart_Init+0x50>)
 800247e:	4a13      	ldr	r2, [pc, #76]	; (80024cc <Uart_Init+0x54>)
 8002480:	601a      	str	r2, [r3, #0]
	/* Set the baud rate for the protocol. */
	huart1.Init.BaudRate = 9600;
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <Uart_Init+0x50>)
 8002484:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002488:	605a      	str	r2, [r3, #4]
	/* Set the number of data bits transmitted or received. */
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <Uart_Init+0x50>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
	/* Set the number of stop bits transmitted. */
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002490:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <Uart_Init+0x50>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
	/* Set the parity mode. */
	huart1.Init.Parity = UART_PARITY_NONE;
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <Uart_Init+0x50>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
	/* Set the protocol mode. */
	huart1.Init.Mode = UART_MODE_TX_RX;
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <Uart_Init+0x50>)
 800249e:	220c      	movs	r2, #12
 80024a0:	615a      	str	r2, [r3, #20]
	/* Set the hardware flow control. */
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <Uart_Init+0x50>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
	/* Set the over sampling value. */
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a8:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <Uart_Init+0x50>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
	/* Call for error callback if the initialization is not performed accordingly. */
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80024ae:	4806      	ldr	r0, [pc, #24]	; (80024c8 <Uart_Init+0x50>)
 80024b0:	f005 fdc8 	bl	8008044 <HAL_UART_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <Uart_Init+0x48>
	{
		HAL_UART_ErrorCallback(&huart1);
 80024ba:	4803      	ldr	r0, [pc, #12]	; (80024c8 <Uart_Init+0x50>)
 80024bc:	f000 f8b2 	bl	8002624 <HAL_UART_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	return E_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000618 	.word	0x20000618
 80024cc:	40011000 	.word	0x40011000

080024d0 <Uart_DeInit>:
/***********************************************************************************
* Function: Uart_DeInit										   					   *
* Description: De-initialize the protocol.									       *
************************************************************************************/
StdReturnType Uart_DeInit()
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	/* Call for protocol de-init function. */
	HAL_UART_DeInit(&huart1);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <Uart_DeInit+0x10>)
 80024d6:	f005 fe0f 	bl	80080f8 <HAL_UART_DeInit>
	return E_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000618 	.word	0x20000618

080024e4 <Uart_MainFunction>:
/***********************************************************************************
* Function: Uart_MainFunction										   			   *
* Description: Protocol main function.									           *
************************************************************************************/
VOID Uart_MainFunction()
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
	/* Get the error status in local variable. */
	uint32 localState = HAL_UART_GetState(&huart1);
 80024ea:	484b      	ldr	r0, [pc, #300]	; (8002618 <Uart_MainFunction+0x134>)
 80024ec:	f006 f98e 	bl	800880c <HAL_UART_GetState>
 80024f0:	4603      	mov	r3, r0
 80024f2:	607b      	str	r3, [r7, #4]
	switch(localState)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2be0      	cmp	r3, #224	; 0xe0
 80024f8:	f000 8082 	beq.w	8002600 <Uart_MainFunction+0x11c>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2be0      	cmp	r3, #224	; 0xe0
 8002500:	f200 8085 	bhi.w	800260e <Uart_MainFunction+0x12a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b24      	cmp	r3, #36	; 0x24
 8002508:	d850      	bhi.n	80025ac <Uart_MainFunction+0xc8>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b24      	cmp	r3, #36	; 0x24
 800250e:	d87e      	bhi.n	800260e <Uart_MainFunction+0x12a>
 8002510:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <Uart_MainFunction+0x34>)
 8002512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002516:	bf00      	nop
 8002518:	080025b5 	.word	0x080025b5
 800251c:	0800260f 	.word	0x0800260f
 8002520:	0800260f 	.word	0x0800260f
 8002524:	0800260f 	.word	0x0800260f
 8002528:	0800260f 	.word	0x0800260f
 800252c:	0800260f 	.word	0x0800260f
 8002530:	0800260f 	.word	0x0800260f
 8002534:	0800260f 	.word	0x0800260f
 8002538:	0800260f 	.word	0x0800260f
 800253c:	0800260f 	.word	0x0800260f
 8002540:	0800260f 	.word	0x0800260f
 8002544:	0800260f 	.word	0x0800260f
 8002548:	0800260f 	.word	0x0800260f
 800254c:	0800260f 	.word	0x0800260f
 8002550:	0800260f 	.word	0x0800260f
 8002554:	0800260f 	.word	0x0800260f
 8002558:	0800260f 	.word	0x0800260f
 800255c:	0800260f 	.word	0x0800260f
 8002560:	0800260f 	.word	0x0800260f
 8002564:	0800260f 	.word	0x0800260f
 8002568:	0800260f 	.word	0x0800260f
 800256c:	0800260f 	.word	0x0800260f
 8002570:	0800260f 	.word	0x0800260f
 8002574:	0800260f 	.word	0x0800260f
 8002578:	0800260f 	.word	0x0800260f
 800257c:	0800260f 	.word	0x0800260f
 8002580:	0800260f 	.word	0x0800260f
 8002584:	0800260f 	.word	0x0800260f
 8002588:	0800260f 	.word	0x0800260f
 800258c:	0800260f 	.word	0x0800260f
 8002590:	0800260f 	.word	0x0800260f
 8002594:	0800260f 	.word	0x0800260f
 8002598:	080025c1 	.word	0x080025c1
 800259c:	080025db 	.word	0x080025db
 80025a0:	080025e3 	.word	0x080025e3
 80025a4:	080025eb 	.word	0x080025eb
 80025a8:	080025d3 	.word	0x080025d3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2ba0      	cmp	r3, #160	; 0xa0
 80025b0:	d01f      	beq.n	80025f2 <Uart_MainFunction+0x10e>
		case HAL_UART_STATE_ERROR:
			Uart_BswState = localState;
			HAL_UART_ErrorCallback(&huart1);
			break;
		default:
			break;
 80025b2:	e02c      	b.n	800260e <Uart_MainFunction+0x12a>
			Uart_BswState = localState;
 80025b4:	4a19      	ldr	r2, [pc, #100]	; (800261c <Uart_MainFunction+0x138>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6013      	str	r3, [r2, #0]
			Uart_Init();
 80025ba:	f7ff ff5d 	bl	8002478 <Uart_Init>
			break;
 80025be:	e027      	b.n	8002610 <Uart_MainFunction+0x12c>
			HAL_UART_Receive_IT(&huart1, &Rte_P_Btc_BtcPort_Btc_RxData, 1);
 80025c0:	2201      	movs	r2, #1
 80025c2:	4917      	ldr	r1, [pc, #92]	; (8002620 <Uart_MainFunction+0x13c>)
 80025c4:	4814      	ldr	r0, [pc, #80]	; (8002618 <Uart_MainFunction+0x134>)
 80025c6:	f005 fe16 	bl	80081f6 <HAL_UART_Receive_IT>
			Uart_BswState = localState;
 80025ca:	4a14      	ldr	r2, [pc, #80]	; (800261c <Uart_MainFunction+0x138>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6013      	str	r3, [r2, #0]
			break;
 80025d0:	e01e      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 80025d2:	4a12      	ldr	r2, [pc, #72]	; (800261c <Uart_MainFunction+0x138>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6013      	str	r3, [r2, #0]
			break;
 80025d8:	e01a      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 80025da:	4a10      	ldr	r2, [pc, #64]	; (800261c <Uart_MainFunction+0x138>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6013      	str	r3, [r2, #0]
			break;
 80025e0:	e016      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 80025e2:	4a0e      	ldr	r2, [pc, #56]	; (800261c <Uart_MainFunction+0x138>)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6013      	str	r3, [r2, #0]
			break;
 80025e8:	e012      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 80025ea:	4a0c      	ldr	r2, [pc, #48]	; (800261c <Uart_MainFunction+0x138>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6013      	str	r3, [r2, #0]
			break;
 80025f0:	e00e      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <Uart_MainFunction+0x138>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 80025f8:	4807      	ldr	r0, [pc, #28]	; (8002618 <Uart_MainFunction+0x134>)
 80025fa:	f000 f813 	bl	8002624 <HAL_UART_ErrorCallback>
			break;
 80025fe:	e007      	b.n	8002610 <Uart_MainFunction+0x12c>
			Uart_BswState = localState;
 8002600:	4a06      	ldr	r2, [pc, #24]	; (800261c <Uart_MainFunction+0x138>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6013      	str	r3, [r2, #0]
			HAL_UART_ErrorCallback(&huart1);
 8002606:	4804      	ldr	r0, [pc, #16]	; (8002618 <Uart_MainFunction+0x134>)
 8002608:	f000 f80c 	bl	8002624 <HAL_UART_ErrorCallback>
			break;
 800260c:	e000      	b.n	8002610 <Uart_MainFunction+0x12c>
			break;
 800260e:	bf00      	nop
	}
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000618 	.word	0x20000618
 800261c:	20000124 	.word	0x20000124
 8002620:	200000b0 	.word	0x200000b0

08002624 <HAL_UART_ErrorCallback>:
/***********************************************************************************
* Function: HAL_UART_ErrorCallback										   		   *
* Description: Process error callback.								               *
************************************************************************************/
VOID HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	/* Get error status in local variable. */
	uint32 receivedValue = HAL_UART_GetError(huart);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f006 f90b 	bl	8008848 <HAL_UART_GetError>
 8002632:	60f8      	str	r0, [r7, #12]
	/* Process each error.
	 * Store each in error in the system manager fault array.
	 * In case of DMA error re-initialize the protocol. */
	switch(receivedValue)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b10      	cmp	r3, #16
 8002638:	d846      	bhi.n	80026c8 <HAL_UART_ErrorCallback+0xa4>
 800263a:	a201      	add	r2, pc, #4	; (adr r2, 8002640 <HAL_UART_ErrorCallback+0x1c>)
 800263c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002640:	080026c9 	.word	0x080026c9
 8002644:	08002685 	.word	0x08002685
 8002648:	08002691 	.word	0x08002691
 800264c:	080026c9 	.word	0x080026c9
 8002650:	0800269d 	.word	0x0800269d
 8002654:	080026c9 	.word	0x080026c9
 8002658:	080026c9 	.word	0x080026c9
 800265c:	080026c9 	.word	0x080026c9
 8002660:	080026a9 	.word	0x080026a9
 8002664:	080026c9 	.word	0x080026c9
 8002668:	080026c9 	.word	0x080026c9
 800266c:	080026c9 	.word	0x080026c9
 8002670:	080026c9 	.word	0x080026c9
 8002674:	080026c9 	.word	0x080026c9
 8002678:	080026c9 	.word	0x080026c9
 800267c:	080026c9 	.word	0x080026c9
 8002680:	080026b5 	.word	0x080026b5
	{
		case HAL_UART_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_UART_ERROR_PE:
			SystemManager_Fault[UART_ERROR_PE]++;
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	3301      	adds	r3, #1
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 800268c:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 800268e:	e01c      	b.n	80026ca <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_NE:
			SystemManager_Fault[UART_ERROR_NE]++;
 8002690:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 8002692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002694:	3301      	adds	r3, #1
 8002696:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 8002698:	6493      	str	r3, [r2, #72]	; 0x48
			break;
 800269a:	e016      	b.n	80026ca <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_FE:
			SystemManager_Fault[UART_ERROR_FE]++;
 800269c:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 800269e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a0:	3301      	adds	r3, #1
 80026a2:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 80026a4:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 80026a6:	e010      	b.n	80026ca <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_ORE:
			SystemManager_Fault[UART_ERROR_ORE]++;
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 80026aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ac:	3301      	adds	r3, #1
 80026ae:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 80026b0:	6513      	str	r3, [r2, #80]	; 0x50
			break;
 80026b2:	e00a      	b.n	80026ca <HAL_UART_ErrorCallback+0xa6>
		case HAL_UART_ERROR_DMA:
			SystemManager_Fault[UART_ERROR_ORE]++;
 80026b4:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 80026b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b8:	3301      	adds	r3, #1
 80026ba:	4a06      	ldr	r2, [pc, #24]	; (80026d4 <HAL_UART_ErrorCallback+0xb0>)
 80026bc:	6513      	str	r3, [r2, #80]	; 0x50
			Uart_Init();
 80026be:	f7ff fedb 	bl	8002478 <Uart_Init>
			Uart_DeInit();
 80026c2:	f7ff ff05 	bl	80024d0 <Uart_DeInit>
			break;
 80026c6:	e000      	b.n	80026ca <HAL_UART_ErrorCallback+0xa6>
		default:
			break;
 80026c8:	bf00      	nop
	}
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000a508 	.word	0x2000a508

080026d8 <HAL_UART_RxCpltCallback>:
/***********************************************************************************
* Function: HAL_UART_RxCpltCallback										           *
* Description: Process received data.									   		   *
************************************************************************************/
VOID HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	/* If the UART 1 is calling the callback. */
	if(huart->Instance == USART1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a20      	ldr	r2, [pc, #128]	; (8002768 <HAL_UART_RxCpltCallback+0x90>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d13a      	bne.n	8002760 <HAL_UART_RxCpltCallback+0x88>
	{
		/* If the data received is not nullptr. */
		if(Rte_P_Btc_BtcPort_Btc_RxData == '\n')
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_UART_RxCpltCallback+0x94>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b0a      	cmp	r3, #10
 80026f0:	d11a      	bne.n	8002728 <HAL_UART_RxCpltCallback+0x50>
		{
			/* If the buffer length counter is less than maximum value. */
			if(Rte_P_Btc_BtcPort_Btc_RxCount <= 3)
 80026f2:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <HAL_UART_RxCpltCallback+0x98>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d80f      	bhi.n	800271a <HAL_UART_RxCpltCallback+0x42>
			{
				/* Convert the data received to uint8.*/
				uint8 asciiToUint = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
				asciiToUint = atoi((char*)Rte_P_Btc_BtcPort_Btc_DataBuffer);
 80026fe:	481d      	ldr	r0, [pc, #116]	; (8002774 <HAL_UART_RxCpltCallback+0x9c>)
 8002700:	f00b fdf8 	bl	800e2f4 <atoi>
 8002704:	4603      	mov	r3, r0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	73fb      	strb	r3, [r7, #15]
				Rte_Write_Btc_BtcPort_Btc_RxData(&asciiToUint);
 800270a:	f107 030f 	add.w	r3, r7, #15
 800270e:	4618      	mov	r0, r3
 8002710:	f00a fe00 	bl	800d314 <Rte_Write_Btc_BtcPort_Btc_RxData>
				Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&Rte_P_Btc_BtcPort_Btc_RxData);
 8002714:	4815      	ldr	r0, [pc, #84]	; (800276c <HAL_UART_RxCpltCallback+0x94>)
 8002716:	f00a fe45 	bl	800d3a4 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
			else
			{
				/* do nothing */
			}
			/* Set the counter to 0 if it is more than maximum value. */
			UartCounter_Btc_RxCount = 0;
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 8002720:	4815      	ldr	r0, [pc, #84]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 8002722:	f00a fe07 	bl	800d334 <Rte_Write_Btc_BtcPort_Btc_RxCount>
 8002726:	e016      	b.n	8002756 <HAL_UART_RxCpltCallback+0x7e>
		}/* If the message was not fully processed, continue with the processing into the buffer. */
		else if(Rte_P_Btc_BtcPort_Btc_RxCount < 3)
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_UART_RxCpltCallback+0x98>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d80c      	bhi.n	800274a <HAL_UART_RxCpltCallback+0x72>
		{
			Rte_Write_Btc_BtcPort_Btc_DataBuffer(&Rte_P_Btc_BtcPort_Btc_RxData, UartCounter_Btc_RxCount);
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	480d      	ldr	r0, [pc, #52]	; (800276c <HAL_UART_RxCpltCallback+0x94>)
 8002738:	f00a fe0c 	bl	800d354 <Rte_Write_Btc_BtcPort_Btc_DataBuffer>
			UartCounter_Btc_RxCount++;
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	3301      	adds	r3, #1
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e005      	b.n	8002756 <HAL_UART_RxCpltCallback+0x7e>
		}
		else
		{
			/* Set the counter to 0 otherwise. */
			UartCounter_Btc_RxCount = 0;
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
			Rte_Write_Btc_BtcPort_Btc_RxCount(&UartCounter_Btc_RxCount);
 8002750:	4809      	ldr	r0, [pc, #36]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 8002752:	f00a fdef 	bl	800d334 <Rte_Write_Btc_BtcPort_Btc_RxCount>
		}
		/* Re-enable data transmission throuhg the protocol in interrupt mode. */
		HAL_UART_Receive_IT(&huart1, &Btc_RxData, 1);
 8002756:	2201      	movs	r2, #1
 8002758:	4904      	ldr	r1, [pc, #16]	; (800276c <HAL_UART_RxCpltCallback+0x94>)
 800275a:	4808      	ldr	r0, [pc, #32]	; (800277c <HAL_UART_RxCpltCallback+0xa4>)
 800275c:	f005 fd4b 	bl	80081f6 <HAL_UART_Receive_IT>
	}
	else
	{
		/* do nothing */
	}
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40011000 	.word	0x40011000
 800276c:	200000b0 	.word	0x200000b0
 8002770:	200000b1 	.word	0x200000b1
 8002774:	200000ac 	.word	0x200000ac
 8002778:	20000128 	.word	0x20000128
 800277c:	20000618 	.word	0x20000618

08002780 <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a34      	ldr	r2, [pc, #208]	; (8002870 <HAL_ADC_MspInit+0xf0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d161      	bne.n	8002866 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b33      	ldr	r3, [pc, #204]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a32      	ldr	r2, [pc, #200]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b30      	ldr	r3, [pc, #192]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a2b      	ldr	r2, [pc, #172]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b29      	ldr	r3, [pc, #164]	; (8002874 <HAL_ADC_MspInit+0xf4>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = VS_Pin|LS_Pin;
 80027da:	230c      	movs	r3, #12
 80027dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027de:	2303      	movs	r3, #3
 80027e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4619      	mov	r1, r3
 80027ec:	4822      	ldr	r0, [pc, #136]	; (8002878 <HAL_ADC_MspInit+0xf8>)
 80027ee:	f002 ff4f 	bl	8005690 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80027f2:	4b22      	ldr	r3, [pc, #136]	; (800287c <HAL_ADC_MspInit+0xfc>)
 80027f4:	4a22      	ldr	r2, [pc, #136]	; (8002880 <HAL_ADC_MspInit+0x100>)
 80027f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027f8:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_ADC_MspInit+0xfc>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027fe:	4b1f      	ldr	r3, [pc, #124]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002804:	4b1d      	ldr	r3, [pc, #116]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800280a:	4b1c      	ldr	r3, [pc, #112]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800280c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002810:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002812:	4b1a      	ldr	r3, [pc, #104]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002814:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002818:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800281c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002820:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002828:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800282c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002830:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002832:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002834:	2204      	movs	r2, #4
 8002836:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800283a:	2203      	movs	r2, #3
 800283c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800283e:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002840:	2200      	movs	r2, #0
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002844:	4b0d      	ldr	r3, [pc, #52]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002846:	2200      	movs	r2, #0
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800284a:	480c      	ldr	r0, [pc, #48]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800284c:	f002 f918 	bl	8004a80 <HAL_DMA_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_ADC_MspInit+0xda>
    {
      Error_Handler();
 8002856:	f00b fd21 	bl	800e29c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a07      	ldr	r2, [pc, #28]	; (800287c <HAL_ADC_MspInit+0xfc>)
 800285e:	639a      	str	r2, [r3, #56]	; 0x38
 8002860:	4a06      	ldr	r2, [pc, #24]	; (800287c <HAL_ADC_MspInit+0xfc>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002866:	bf00      	nop
 8002868:	3728      	adds	r7, #40	; 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40012000 	.word	0x40012000
 8002874:	40023800 	.word	0x40023800
 8002878:	40020800 	.word	0x40020800
 800287c:	20000190 	.word	0x20000190
 8002880:	40026410 	.word	0x40026410

08002884 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <HAL_ADC_MspDeInit+0x38>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d10e      	bne.n	80028b4 <HAL_ADC_MspDeInit+0x30>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_ADC_MspDeInit+0x3c>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <HAL_ADC_MspDeInit+0x3c>)
 800289c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028a0:	6453      	str	r3, [r2, #68]	; 0x44

    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    HAL_GPIO_DeInit(GPIOC, VS_Pin|LS_Pin);
 80028a2:	210c      	movs	r1, #12
 80028a4:	4807      	ldr	r0, [pc, #28]	; (80028c4 <HAL_ADC_MspDeInit+0x40>)
 80028a6:	f003 f877 	bl	8005998 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	4618      	mov	r0, r3
 80028b0:	f002 f994 	bl	8004bdc <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40012000 	.word	0x40012000
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020800 	.word	0x40020800

080028c8 <HAL_CRC_MspInit>:
  /* USER CODE END CRC_Init 2 */

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <HAL_CRC_MspInit+0x3c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d10d      	bne.n	80028f6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <HAL_CRC_MspInit+0x40>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a09      	ldr	r2, [pc, #36]	; (8002908 <HAL_CRC_MspInit+0x40>)
 80028e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b07      	ldr	r3, [pc, #28]	; (8002908 <HAL_CRC_MspInit+0x40>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40023000 	.word	0x40023000
 8002908:	40023800 	.word	0x40023800

0800290c <HAL_CRC_MspDeInit>:

void HAL_CRC_MspDeInit(CRC_HandleTypeDef* crcHandle)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a07      	ldr	r2, [pc, #28]	; (8002938 <HAL_CRC_MspDeInit+0x2c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d105      	bne.n	800292a <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 800291e:	4b07      	ldr	r3, [pc, #28]	; (800293c <HAL_CRC_MspDeInit+0x30>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a06      	ldr	r2, [pc, #24]	; (800293c <HAL_CRC_MspDeInit+0x30>)
 8002924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40023000 	.word	0x40023000
 800293c:	40023800 	.word	0x40023800

08002940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <MX_DMA_Init+0x30>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a08      	ldr	r2, [pc, #32]	; (8002970 <MX_DMA_Init+0x30>)
 8002950:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <MX_DMA_Init+0x30>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	687b      	ldr	r3, [r7, #4]

}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800

08002974 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
   SystemManager_SetFault(STACK_OVERFLOW_RESET);
 800297e:	200c      	movs	r0, #12
 8002980:	f00b fb96 	bl	800e0b0 <SystemManager_SetFault>
   SystemManager_PerformReset();
 8002984:	f00b fbbe 	bl	800e104 <SystemManager_PerformReset>
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
	SystemManager_SetFault(MALLOC_FAILED_RESET);
 8002994:	200d      	movs	r0, #13
 8002996:	f00b fb8b 	bl	800e0b0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 800299a:	f00b fbb3 	bl	800e104 <SystemManager_PerformReset>
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Os_SecAlm_AlarmReset */
  Os_SecAlm_AlarmResetHandle = osTimerNew(Os_SecAlm_AlarmReset_Callback, osTimerPeriodic, NULL, &Os_SecAlm_AlarmReset_attributes);
 80029a8:	4b55      	ldr	r3, [pc, #340]	; (8002b00 <MX_FREERTOS_Init+0x15c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	2101      	movs	r1, #1
 80029ae:	4855      	ldr	r0, [pc, #340]	; (8002b04 <MX_FREERTOS_Init+0x160>)
 80029b0:	f007 fbbc 	bl	800a12c <osTimerNew>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4a54      	ldr	r2, [pc, #336]	; (8002b08 <MX_FREERTOS_Init+0x164>)
 80029b8:	6013      	str	r3, [r2, #0]

  /* creation of Os_CenLoc_LockUnlockSequence_Timer */
  Os_CenLoc_LockUnlockSequence_TimerHandle = osTimerNew(Os_CenLoc_LockUnlockSequence_Timer_Callback, osTimerPeriodic, NULL, &Os_CenLoc_LockUnlockSequence_Timer_attributes);
 80029ba:	4b54      	ldr	r3, [pc, #336]	; (8002b0c <MX_FREERTOS_Init+0x168>)
 80029bc:	2200      	movs	r2, #0
 80029be:	2101      	movs	r1, #1
 80029c0:	4853      	ldr	r0, [pc, #332]	; (8002b10 <MX_FREERTOS_Init+0x16c>)
 80029c2:	f007 fbb3 	bl	800a12c <osTimerNew>
 80029c6:	4603      	mov	r3, r0
 80029c8:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <MX_FREERTOS_Init+0x170>)
 80029ca:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLed_TurnOnCyclic_Timer */
  Os_SecAlmLed_TurnOnCyclic_TimerHandle = osTimerNew(Os_SecAlmLed_TurnOnCyclic_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLed_TurnOnCyclic_Timer_attributes);
 80029cc:	4b52      	ldr	r3, [pc, #328]	; (8002b18 <MX_FREERTOS_Init+0x174>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	2101      	movs	r1, #1
 80029d2:	4852      	ldr	r0, [pc, #328]	; (8002b1c <MX_FREERTOS_Init+0x178>)
 80029d4:	f007 fbaa 	bl	800a12c <osTimerNew>
 80029d8:	4603      	mov	r3, r0
 80029da:	4a51      	ldr	r2, [pc, #324]	; (8002b20 <MX_FREERTOS_Init+0x17c>)
 80029dc:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmLedTurnOn_Timer */
  Os_SecAlmLedTurnOn_TimerHandle = osTimerNew(Os_SecAlmLedTurnOn_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmLedTurnOn_Timer_attributes);
 80029de:	4b51      	ldr	r3, [pc, #324]	; (8002b24 <MX_FREERTOS_Init+0x180>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	2101      	movs	r1, #1
 80029e4:	4850      	ldr	r0, [pc, #320]	; (8002b28 <MX_FREERTOS_Init+0x184>)
 80029e6:	f007 fba1 	bl	800a12c <osTimerNew>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4a4f      	ldr	r2, [pc, #316]	; (8002b2c <MX_FREERTOS_Init+0x188>)
 80029ee:	6013      	str	r3, [r2, #0]

  /* creation of Os_FollowMeHome_Timer */
  Os_FollowMeHome_TimerHandle = osTimerNew(Os_FollowMeHome_Timer_Callback, osTimerPeriodic, NULL, &Os_FollowMeHome_Timer_attributes);
 80029f0:	4b4f      	ldr	r3, [pc, #316]	; (8002b30 <MX_FREERTOS_Init+0x18c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	2101      	movs	r1, #1
 80029f6:	484f      	ldr	r0, [pc, #316]	; (8002b34 <MX_FREERTOS_Init+0x190>)
 80029f8:	f007 fb98 	bl	800a12c <osTimerNew>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4a4e      	ldr	r2, [pc, #312]	; (8002b38 <MX_FREERTOS_Init+0x194>)
 8002a00:	6013      	str	r3, [r2, #0]

  /* creation of Os_TurnSignals_Timer */
  Os_TurnSignals_TimerHandle = osTimerNew(Os_TurnSignals_Timer_Callback, osTimerPeriodic, NULL, &Os_TurnSignals_Timer_attributes);
 8002a02:	4b4e      	ldr	r3, [pc, #312]	; (8002b3c <MX_FREERTOS_Init+0x198>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	2101      	movs	r1, #1
 8002a08:	484d      	ldr	r0, [pc, #308]	; (8002b40 <MX_FREERTOS_Init+0x19c>)
 8002a0a:	f007 fb8f 	bl	800a12c <osTimerNew>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	4a4c      	ldr	r2, [pc, #304]	; (8002b44 <MX_FREERTOS_Init+0x1a0>)
 8002a12:	6013      	str	r3, [r2, #0]

  /* creation of Os_SecAlmAlarm_Timer */
  Os_SecAlmAlarm_TimerHandle = osTimerNew(Os_SecAlmAlarm_Timer_Callback, osTimerPeriodic, NULL, &Os_SecAlmAlarm_Timer_attributes);
 8002a14:	4b4c      	ldr	r3, [pc, #304]	; (8002b48 <MX_FREERTOS_Init+0x1a4>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	2101      	movs	r1, #1
 8002a1a:	484c      	ldr	r0, [pc, #304]	; (8002b4c <MX_FREERTOS_Init+0x1a8>)
 8002a1c:	f007 fb86 	bl	800a12c <osTimerNew>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4a4b      	ldr	r2, [pc, #300]	; (8002b50 <MX_FREERTOS_Init+0x1ac>)
 8002a24:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcR_Buzzer_Timer */
  Os_PdcR_Buzzer_TimerHandle = osTimerNew(Os_PdcR_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcR_Buzzer_Timer_attributes);
 8002a26:	4b4b      	ldr	r3, [pc, #300]	; (8002b54 <MX_FREERTOS_Init+0x1b0>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	484a      	ldr	r0, [pc, #296]	; (8002b58 <MX_FREERTOS_Init+0x1b4>)
 8002a2e:	f007 fb7d 	bl	800a12c <osTimerNew>
 8002a32:	4603      	mov	r3, r0
 8002a34:	4a49      	ldr	r2, [pc, #292]	; (8002b5c <MX_FREERTOS_Init+0x1b8>)
 8002a36:	6013      	str	r3, [r2, #0]

  /* creation of Os_PdcF_Buzzer_Timer */
  Os_PdcF_Buzzer_TimerHandle = osTimerNew(Os_PdcF_Buzzer_Timer_Callback, osTimerOnce, NULL, &Os_PdcF_Buzzer_Timer_attributes);
 8002a38:	4b49      	ldr	r3, [pc, #292]	; (8002b60 <MX_FREERTOS_Init+0x1bc>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4849      	ldr	r0, [pc, #292]	; (8002b64 <MX_FREERTOS_Init+0x1c0>)
 8002a40:	f007 fb74 	bl	800a12c <osTimerNew>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4a48      	ldr	r2, [pc, #288]	; (8002b68 <MX_FREERTOS_Init+0x1c4>)
 8002a48:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OS_Init */
  OS_InitHandle = osThreadNew(OS_TASK_OS_INIT, NULL, &OS_Init_attributes);
 8002a4a:	4a48      	ldr	r2, [pc, #288]	; (8002b6c <MX_FREERTOS_Init+0x1c8>)
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4848      	ldr	r0, [pc, #288]	; (8002b70 <MX_FREERTOS_Init+0x1cc>)
 8002a50:	f007 fac4 	bl	8009fdc <osThreadNew>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4a47      	ldr	r2, [pc, #284]	; (8002b74 <MX_FREERTOS_Init+0x1d0>)
 8002a58:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_Main */
  ASIL_APPL_MainHandle = osThreadNew(OS_TASK_ASIL_APPL_Main, NULL, &ASIL_APPL_Main_attributes);
 8002a5a:	4a47      	ldr	r2, [pc, #284]	; (8002b78 <MX_FREERTOS_Init+0x1d4>)
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4847      	ldr	r0, [pc, #284]	; (8002b7c <MX_FREERTOS_Init+0x1d8>)
 8002a60:	f007 fabc 	bl	8009fdc <osThreadNew>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4a46      	ldr	r2, [pc, #280]	; (8002b80 <MX_FREERTOS_Init+0x1dc>)
 8002a68:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_APPL_PostMain */
  ASIL_APPL_PostMainHandle = osThreadNew(OS_TASK_ASIL_APPL_PostMain, NULL, &ASIL_APPL_PostMain_attributes);
 8002a6a:	4a46      	ldr	r2, [pc, #280]	; (8002b84 <MX_FREERTOS_Init+0x1e0>)
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4846      	ldr	r0, [pc, #280]	; (8002b88 <MX_FREERTOS_Init+0x1e4>)
 8002a70:	f007 fab4 	bl	8009fdc <osThreadNew>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4a45      	ldr	r2, [pc, #276]	; (8002b8c <MX_FREERTOS_Init+0x1e8>)
 8002a78:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_PreMain */
  QM_APPL_PreMainHandle = osThreadNew(OS_TASK_QM_APPL_PreMain, NULL, &QM_APPL_PreMain_attributes);
 8002a7a:	4a45      	ldr	r2, [pc, #276]	; (8002b90 <MX_FREERTOS_Init+0x1ec>)
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4845      	ldr	r0, [pc, #276]	; (8002b94 <MX_FREERTOS_Init+0x1f0>)
 8002a80:	f007 faac 	bl	8009fdc <osThreadNew>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4a44      	ldr	r2, [pc, #272]	; (8002b98 <MX_FREERTOS_Init+0x1f4>)
 8002a88:	6013      	str	r3, [r2, #0]

  /* creation of QM_APPL_Main */
  QM_APPL_MainHandle = osThreadNew(OS_TASK_QM_APPL_Main, NULL, &QM_APPL_Main_attributes);
 8002a8a:	4a44      	ldr	r2, [pc, #272]	; (8002b9c <MX_FREERTOS_Init+0x1f8>)
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4844      	ldr	r0, [pc, #272]	; (8002ba0 <MX_FREERTOS_Init+0x1fc>)
 8002a90:	f007 faa4 	bl	8009fdc <osThreadNew>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4a43      	ldr	r2, [pc, #268]	; (8002ba4 <MX_FREERTOS_Init+0x200>)
 8002a98:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_PreMain */
  ASIL_BSW_PreMainHandle = osThreadNew(OS_TASK_ASIL_BSW_PreMain, NULL, &ASIL_BSW_PreMain_attributes);
 8002a9a:	4a43      	ldr	r2, [pc, #268]	; (8002ba8 <MX_FREERTOS_Init+0x204>)
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4843      	ldr	r0, [pc, #268]	; (8002bac <MX_FREERTOS_Init+0x208>)
 8002aa0:	f007 fa9c 	bl	8009fdc <osThreadNew>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4a42      	ldr	r2, [pc, #264]	; (8002bb0 <MX_FREERTOS_Init+0x20c>)
 8002aa8:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_Main */
  ASIL_BSW_MainHandle = osThreadNew(OS_TASK_ASIL_BSW_Main, NULL, &ASIL_BSW_Main_attributes);
 8002aaa:	4a42      	ldr	r2, [pc, #264]	; (8002bb4 <MX_FREERTOS_Init+0x210>)
 8002aac:	2100      	movs	r1, #0
 8002aae:	4842      	ldr	r0, [pc, #264]	; (8002bb8 <MX_FREERTOS_Init+0x214>)
 8002ab0:	f007 fa94 	bl	8009fdc <osThreadNew>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4a41      	ldr	r2, [pc, #260]	; (8002bbc <MX_FREERTOS_Init+0x218>)
 8002ab8:	6013      	str	r3, [r2, #0]

  /* creation of ASIL_BSW_PostMain */
  ASIL_BSW_PostMainHandle = osThreadNew(OS_TASK_ASIL_BSW_PostMain, NULL, &ASIL_BSW_PostMain_attributes);
 8002aba:	4a41      	ldr	r2, [pc, #260]	; (8002bc0 <MX_FREERTOS_Init+0x21c>)
 8002abc:	2100      	movs	r1, #0
 8002abe:	4841      	ldr	r0, [pc, #260]	; (8002bc4 <MX_FREERTOS_Init+0x220>)
 8002ac0:	f007 fa8c 	bl	8009fdc <osThreadNew>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4a40      	ldr	r2, [pc, #256]	; (8002bc8 <MX_FREERTOS_Init+0x224>)
 8002ac8:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_PreMain */
  QM_BSW_PreMainHandle = osThreadNew(OS_TASK_QM_BSW_PreMain, NULL, &QM_BSW_PreMain_attributes);
 8002aca:	4a40      	ldr	r2, [pc, #256]	; (8002bcc <MX_FREERTOS_Init+0x228>)
 8002acc:	2100      	movs	r1, #0
 8002ace:	4840      	ldr	r0, [pc, #256]	; (8002bd0 <MX_FREERTOS_Init+0x22c>)
 8002ad0:	f007 fa84 	bl	8009fdc <osThreadNew>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4a3f      	ldr	r2, [pc, #252]	; (8002bd4 <MX_FREERTOS_Init+0x230>)
 8002ad8:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_Main */
  QM_BSW_MainHandle = osThreadNew(OS_TASK_QM_BSW_Main, NULL, &QM_BSW_Main_attributes);
 8002ada:	4a3f      	ldr	r2, [pc, #252]	; (8002bd8 <MX_FREERTOS_Init+0x234>)
 8002adc:	2100      	movs	r1, #0
 8002ade:	483f      	ldr	r0, [pc, #252]	; (8002bdc <MX_FREERTOS_Init+0x238>)
 8002ae0:	f007 fa7c 	bl	8009fdc <osThreadNew>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	4a3e      	ldr	r2, [pc, #248]	; (8002be0 <MX_FREERTOS_Init+0x23c>)
 8002ae8:	6013      	str	r3, [r2, #0]

  /* creation of QM_BSW_PostMain */
  QM_BSW_PostMainHandle = osThreadNew(OS_TASK_QM_BSW_PostMain, NULL, &QM_BSW_PostMain_attributes);
 8002aea:	4a3e      	ldr	r2, [pc, #248]	; (8002be4 <MX_FREERTOS_Init+0x240>)
 8002aec:	2100      	movs	r1, #0
 8002aee:	483e      	ldr	r0, [pc, #248]	; (8002be8 <MX_FREERTOS_Init+0x244>)
 8002af0:	f007 fa74 	bl	8009fdc <osThreadNew>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4a3d      	ldr	r2, [pc, #244]	; (8002bec <MX_FREERTOS_Init+0x248>)
 8002af8:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	0800ea28 	.word	0x0800ea28
 8002b04:	08002d31 	.word	0x08002d31
 8002b08:	20000264 	.word	0x20000264
 8002b0c:	0800ea38 	.word	0x0800ea38
 8002b10:	08002d49 	.word	0x08002d49
 8002b14:	20000268 	.word	0x20000268
 8002b18:	0800ea48 	.word	0x0800ea48
 8002b1c:	08002db1 	.word	0x08002db1
 8002b20:	2000026c 	.word	0x2000026c
 8002b24:	0800ea58 	.word	0x0800ea58
 8002b28:	08002dd9 	.word	0x08002dd9
 8002b2c:	20000270 	.word	0x20000270
 8002b30:	0800ea68 	.word	0x0800ea68
 8002b34:	08002e01 	.word	0x08002e01
 8002b38:	20000274 	.word	0x20000274
 8002b3c:	0800ea78 	.word	0x0800ea78
 8002b40:	08002e2d 	.word	0x08002e2d
 8002b44:	20000278 	.word	0x20000278
 8002b48:	0800ea88 	.word	0x0800ea88
 8002b4c:	08002e9d 	.word	0x08002e9d
 8002b50:	2000027c 	.word	0x2000027c
 8002b54:	0800ea98 	.word	0x0800ea98
 8002b58:	08002ec5 	.word	0x08002ec5
 8002b5c:	20000280 	.word	0x20000280
 8002b60:	0800eaa8 	.word	0x0800eaa8
 8002b64:	08002ee1 	.word	0x08002ee1
 8002b68:	20000284 	.word	0x20000284
 8002b6c:	0800e89c 	.word	0x0800e89c
 8002b70:	08002bf1 	.word	0x08002bf1
 8002b74:	20000238 	.word	0x20000238
 8002b78:	0800e8c0 	.word	0x0800e8c0
 8002b7c:	08002c05 	.word	0x08002c05
 8002b80:	2000023c 	.word	0x2000023c
 8002b84:	0800e8e4 	.word	0x0800e8e4
 8002b88:	08002c2d 	.word	0x08002c2d
 8002b8c:	20000240 	.word	0x20000240
 8002b90:	0800e908 	.word	0x0800e908
 8002b94:	08002c49 	.word	0x08002c49
 8002b98:	20000244 	.word	0x20000244
 8002b9c:	0800e92c 	.word	0x0800e92c
 8002ba0:	08002c65 	.word	0x08002c65
 8002ba4:	20000248 	.word	0x20000248
 8002ba8:	0800e950 	.word	0x0800e950
 8002bac:	08002c81 	.word	0x08002c81
 8002bb0:	2000024c 	.word	0x2000024c
 8002bb4:	0800e974 	.word	0x0800e974
 8002bb8:	08002c9d 	.word	0x08002c9d
 8002bbc:	20000250 	.word	0x20000250
 8002bc0:	0800e998 	.word	0x0800e998
 8002bc4:	08002cbd 	.word	0x08002cbd
 8002bc8:	20000254 	.word	0x20000254
 8002bcc:	0800e9bc 	.word	0x0800e9bc
 8002bd0:	08002cd9 	.word	0x08002cd9
 8002bd4:	20000258 	.word	0x20000258
 8002bd8:	0800e9e0 	.word	0x0800e9e0
 8002bdc:	08002cf5 	.word	0x08002cf5
 8002be0:	2000025c 	.word	0x2000025c
 8002be4:	0800ea04 	.word	0x0800ea04
 8002be8:	08002d15 	.word	0x08002d15
 8002bec:	20000260 	.word	0x20000260

08002bf0 <OS_TASK_OS_INIT>:

/* USER CODE BEGIN Header_OS_TASK_OS_INIT */
/* USER CODE END Header_OS_TASK_OS_INIT */
void OS_TASK_OS_INIT(void *argument)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_OS_INIT */
	for(;;)
	{
		EcuM_DriverInit();
 8002bf8:	f00b f962 	bl	800dec0 <EcuM_DriverInit>
		vTaskSuspend(NULL);
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f008 ffcd 	bl	800bb9c <vTaskSuspend>
		EcuM_DriverInit();
 8002c02:	e7f9      	b.n	8002bf8 <OS_TASK_OS_INIT+0x8>

08002c04 <OS_TASK_ASIL_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_Main */
/* USER CODE END Header_OS_TASK_ASIL_APPL_Main */
void OS_TASK_ASIL_APPL_Main(void *argument)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_Main */
	for(;;)
	{
		Rte_Runnable_Btc_MainFunction();
 8002c0c:	f00a fcea 	bl	800d5e4 <Rte_Runnable_Btc_MainFunction>
		Rte_Runnable_CenLoc_MainFunction();
 8002c10:	f00a fcee 	bl	800d5f0 <Rte_Runnable_CenLoc_MainFunction>
		Rte_Runnable_ExtLights_MainFunction();
 8002c14:	f00a fcf2 	bl	800d5fc <Rte_Runnable_ExtLights_MainFunction>
		Rte_Runnable_IntLights_MainFunction();
 8002c18:	f00a fcf6 	bl	800d608 <Rte_Runnable_IntLights_MainFunction>
		vTaskDelayUntil(&ASIL_APPL_Main, pdMS_TO_TICKS(5));
 8002c1c:	2105      	movs	r1, #5
 8002c1e:	4802      	ldr	r0, [pc, #8]	; (8002c28 <OS_TASK_ASIL_APPL_Main+0x24>)
 8002c20:	f008 ff3e 	bl	800baa0 <vTaskDelayUntil>
		Rte_Runnable_Btc_MainFunction();
 8002c24:	e7f2      	b.n	8002c0c <OS_TASK_ASIL_APPL_Main+0x8>
 8002c26:	bf00      	nop
 8002c28:	20000210 	.word	0x20000210

08002c2c <OS_TASK_ASIL_APPL_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_APPL_PostMain */
/* USER CODE END Header_OS_TASK_ASIL_APPL_PostMain */
void OS_TASK_ASIL_APPL_PostMain(void *argument)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_APPL_PostMain */
	for(;;)
	{
		Rte_Runnable_DiagCtrl_MainFunction();
 8002c34:	f00a fd2e 	bl	800d694 <Rte_Runnable_DiagCtrl_MainFunction>
		vTaskDelayUntil(&ASIL_APPL_PostMain, pdMS_TO_TICKS(5));
 8002c38:	2105      	movs	r1, #5
 8002c3a:	4802      	ldr	r0, [pc, #8]	; (8002c44 <OS_TASK_ASIL_APPL_PostMain+0x18>)
 8002c3c:	f008 ff30 	bl	800baa0 <vTaskDelayUntil>
		Rte_Runnable_DiagCtrl_MainFunction();
 8002c40:	e7f8      	b.n	8002c34 <OS_TASK_ASIL_APPL_PostMain+0x8>
 8002c42:	bf00      	nop
 8002c44:	20000214 	.word	0x20000214

08002c48 <OS_TASK_QM_APPL_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_PreMain */
/* USER CODE END Header_OS_TASK_QM_APPL_PreMain */
void OS_TASK_QM_APPL_PreMain(void *argument)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_PreMain */
	for(;;)
	{
		Rte_Runnable_SecAlm_MainFunction();
 8002c50:	f00a fce0 	bl	800d614 <Rte_Runnable_SecAlm_MainFunction>
		vTaskDelayUntil(&QM_APPL_PreMain, pdMS_TO_TICKS(5));
 8002c54:	2105      	movs	r1, #5
 8002c56:	4802      	ldr	r0, [pc, #8]	; (8002c60 <OS_TASK_QM_APPL_PreMain+0x18>)
 8002c58:	f008 ff22 	bl	800baa0 <vTaskDelayUntil>
		Rte_Runnable_SecAlm_MainFunction();
 8002c5c:	e7f8      	b.n	8002c50 <OS_TASK_QM_APPL_PreMain+0x8>
 8002c5e:	bf00      	nop
 8002c60:	20000218 	.word	0x20000218

08002c64 <OS_TASK_QM_APPL_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_APPL_Main */
/* USER CODE END Header_OS_TASK_QM_APPL_Main */
void OS_TASK_QM_APPL_Main(void *argument)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_APPL_Main */
	for(;;)
	{
		Rte_Runnable_Pdc_MainFunction();
 8002c6c:	f00a fd18 	bl	800d6a0 <Rte_Runnable_Pdc_MainFunction>
		vTaskDelayUntil(&QM_APPL_Main, pdMS_TO_TICKS(100));
 8002c70:	2164      	movs	r1, #100	; 0x64
 8002c72:	4802      	ldr	r0, [pc, #8]	; (8002c7c <OS_TASK_QM_APPL_Main+0x18>)
 8002c74:	f008 ff14 	bl	800baa0 <vTaskDelayUntil>
		Rte_Runnable_Pdc_MainFunction();
 8002c78:	e7f8      	b.n	8002c6c <OS_TASK_QM_APPL_Main+0x8>
 8002c7a:	bf00      	nop
 8002c7c:	2000021c 	.word	0x2000021c

08002c80 <OS_TASK_ASIL_BSW_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_PreMain */
/* USER CODE END Header_OS_TASK_ASIL_BSW_PreMain */
void OS_TASK_ASIL_BSW_PreMain(void *argument)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_PreMain */
	for(;;)
	{
		Rte_Runnable_Wdg_MainFunction();
 8002c88:	f00a fb12 	bl	800d2b0 <Rte_Runnable_Wdg_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_PreMain, pdMS_TO_TICKS(5));
 8002c8c:	2105      	movs	r1, #5
 8002c8e:	4802      	ldr	r0, [pc, #8]	; (8002c98 <OS_TASK_ASIL_BSW_PreMain+0x18>)
 8002c90:	f008 ff06 	bl	800baa0 <vTaskDelayUntil>
		Rte_Runnable_Wdg_MainFunction();
 8002c94:	e7f8      	b.n	8002c88 <OS_TASK_ASIL_BSW_PreMain+0x8>
 8002c96:	bf00      	nop
 8002c98:	20000220 	.word	0x20000220

08002c9c <OS_TASK_ASIL_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_Main */
/* USER CODE END Header_OS_TASK_ASIL_BSW_Main */
void OS_TASK_ASIL_BSW_Main(void *argument)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_Main */
	for(;;)
	{
		Rte_Runnable_Uart_MainFunction();
 8002ca4:	f00a fb16 	bl	800d2d4 <Rte_Runnable_Uart_MainFunction>
		Rte_Runnable_Crc_MainFunction();
 8002ca8:	f00a fafc 	bl	800d2a4 <Rte_Runnable_Crc_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_Main, pdMS_TO_TICKS(5));
 8002cac:	2105      	movs	r1, #5
 8002cae:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <OS_TASK_ASIL_BSW_Main+0x1c>)
 8002cb0:	f008 fef6 	bl	800baa0 <vTaskDelayUntil>
		Rte_Runnable_Uart_MainFunction();
 8002cb4:	e7f6      	b.n	8002ca4 <OS_TASK_ASIL_BSW_Main+0x8>
 8002cb6:	bf00      	nop
 8002cb8:	20000224 	.word	0x20000224

08002cbc <OS_TASK_ASIL_BSW_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_ASIL_BSW_PostMain */
/* USER CODE END Header_OS_TASK_ASIL_BSW_PostMain */
void OS_TASK_ASIL_BSW_PostMain(void *argument)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_ASIL_BSW_PostMain */
	for(;;)
	{
		Rte_Runnable_Tim_MainFunction();
 8002cc4:	f00a fb00 	bl	800d2c8 <Rte_Runnable_Tim_MainFunction>
		vTaskDelayUntil(&ASIL_BSW_PostMain, pdMS_TO_TICKS(5));
 8002cc8:	2105      	movs	r1, #5
 8002cca:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <OS_TASK_ASIL_BSW_PostMain+0x18>)
 8002ccc:	f008 fee8 	bl	800baa0 <vTaskDelayUntil>
		Rte_Runnable_Tim_MainFunction();
 8002cd0:	e7f8      	b.n	8002cc4 <OS_TASK_ASIL_BSW_PostMain+0x8>
 8002cd2:	bf00      	nop
 8002cd4:	20000228 	.word	0x20000228

08002cd8 <OS_TASK_QM_BSW_PreMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_PreMain */
/* USER CODE END Header_OS_TASK_QM_BSW_PreMain */
void OS_TASK_QM_BSW_PreMain(void *argument)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_PreMain */
	for(;;)
	{
		Rte_Runnable_Adc_MainFunction();
 8002ce0:	f00a faec 	bl	800d2bc <Rte_Runnable_Adc_MainFunction>
		vTaskDelayUntil(&QM_BSW_Main, pdMS_TO_TICKS(5));
 8002ce4:	2105      	movs	r1, #5
 8002ce6:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <OS_TASK_QM_BSW_PreMain+0x18>)
 8002ce8:	f008 feda 	bl	800baa0 <vTaskDelayUntil>
		Rte_Runnable_Adc_MainFunction();
 8002cec:	e7f8      	b.n	8002ce0 <OS_TASK_QM_BSW_PreMain+0x8>
 8002cee:	bf00      	nop
 8002cf0:	20000230 	.word	0x20000230

08002cf4 <OS_TASK_QM_BSW_Main>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_Main */
/* USER CODE END Header_OS_TASK_QM_BSW_Main */
void OS_TASK_QM_BSW_Main(void *argument)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_Main */
	for(;;)
	{
		Rte_Runnable_EcuM_MainFunction();
 8002cfc:	f00a fac6 	bl	800d28c <Rte_Runnable_EcuM_MainFunction>
		Rte_Runnable_SystemManager_MainFunction();
 8002d00:	f00a faca 	bl	800d298 <Rte_Runnable_SystemManager_MainFunction>
		vTaskDelayUntil(&QM_BSW_PreMain, pdMS_TO_TICKS(5));
 8002d04:	2105      	movs	r1, #5
 8002d06:	4802      	ldr	r0, [pc, #8]	; (8002d10 <OS_TASK_QM_BSW_Main+0x1c>)
 8002d08:	f008 feca 	bl	800baa0 <vTaskDelayUntil>
		Rte_Runnable_EcuM_MainFunction();
 8002d0c:	e7f6      	b.n	8002cfc <OS_TASK_QM_BSW_Main+0x8>
 8002d0e:	bf00      	nop
 8002d10:	2000022c 	.word	0x2000022c

08002d14 <OS_TASK_QM_BSW_PostMain>:
}

/* USER CODE BEGIN Header_OS_TASK_QM_BSW_PostMain */
/* USER CODE END Header_OS_TASK_QM_BSW_PostMain */
void OS_TASK_QM_BSW_PostMain(void *argument)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OS_TASK_QM_BSW_PostMain */
  for(;;)
  {
	  Rte_Runnable_Dem_MainFunction();
 8002d1c:	f00a fcc6 	bl	800d6ac <Rte_Runnable_Dem_MainFunction>
	  vTaskDelayUntil(&QM_BSW_PostMain, pdMS_TO_TICKS(5));
 8002d20:	2105      	movs	r1, #5
 8002d22:	4802      	ldr	r0, [pc, #8]	; (8002d2c <OS_TASK_QM_BSW_PostMain+0x18>)
 8002d24:	f008 febc 	bl	800baa0 <vTaskDelayUntil>
	  Rte_Runnable_Dem_MainFunction();
 8002d28:	e7f8      	b.n	8002d1c <OS_TASK_QM_BSW_PostMain+0x8>
 8002d2a:	bf00      	nop
 8002d2c:	20000234 	.word	0x20000234

08002d30 <Os_SecAlm_AlarmReset_Callback>:
  /* USER CODE END OS_TASK_QM_BSW_PostMain */
}

/* Os_SecAlm_AlarmReset_Callback function */
void Os_SecAlm_AlarmReset_Callback(void *argument)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlm_AlarmReset_Callback */
	/* Reset the security alarm counter trigger. */
	Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(0);
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f00a fc43 	bl	800d5c4 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>
  /* USER CODE END Os_SecAlm_AlarmReset_Callback */
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <Os_CenLoc_LockUnlockSequence_Timer_Callback>:

/* Os_CenLoc_LockUnlockSequence_Timer_Callback function */
void Os_CenLoc_LockUnlockSequence_Timer_Callback(void *argument)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_CenLoc_LockUnlockSequence_Timer_Callback */
	/* If the counter variable for the lock unlock turn signals sequence is less than or equal to 6
	 * Then if there is either a lock or an unlock sequence increase the counter to process the states
	 * in the application. */
	if(Os_LockUnlockSequence_Counter <= 6
 8002d50:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b06      	cmp	r3, #6
 8002d56:	d819      	bhi.n	8002d8c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
		&& ((Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_LOW && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_HIGH)
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d103      	bne.n	8002d68 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x20>
 8002d60:	4b12      	ldr	r3, [pc, #72]	; (8002dac <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d007      	beq.n	8002d78 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x30>
		|| (Rte_P_CenLoc_CenLocPort_CenLoc_CurrentState == STD_HIGH && Rte_P_CenLoc_CenLocPort_CenLoc_PreviousStateFlag == STD_LOW)))
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x60>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d10d      	bne.n	8002d8c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
 8002d70:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x64>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x44>
	{
		Os_LockUnlockSequence_Counter = Os_LockUnlockSequence_Counter + 1;
 8002d78:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002d82:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 8002d84:	4807      	ldr	r0, [pc, #28]	; (8002da4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002d86:	f00a f9f1 	bl	800d16c <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
 8002d8a:	e006      	b.n	8002d9a <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x52>
	}
	else
	{
		/* Update the counter with out of bounds value to prevent unexpected triggering. */
		Os_LockUnlockSequence_Counter = 7;
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002d8e:	2207      	movs	r2, #7
 8002d90:	701a      	strb	r2, [r3, #0]
		Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(&Os_LockUnlockSequence_Counter);
 8002d92:	4804      	ldr	r0, [pc, #16]	; (8002da4 <Os_CenLoc_LockUnlockSequence_Timer_Callback+0x5c>)
 8002d94:	f00a f9ea 	bl	800d16c <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>
	}

  /* USER CODE END Os_CenLoc_LockUnlockSequence_Timer_Callback */
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	200001fc 	.word	0x200001fc
 8002da8:	200000bf 	.word	0x200000bf
 8002dac:	200000c7 	.word	0x200000c7

08002db0 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback>:

/* Os_SecAlmLed_TurnOnCyclic_Timer_Callback function */
void Os_SecAlmLed_TurnOnCyclic_Timer_Callback(void *argument)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
	/* Increase the counter variable used in the timer for the alarm LED
	 * that expires every 3,75 seconds. */
	Os_TurnOnCyclic_Counter = Os_TurnOnCyclic_Counter + 1;
 8002db8:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8002dc2:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(&Os_TurnOnCyclic_Counter);
 8002dc4:	4803      	ldr	r0, [pc, #12]	; (8002dd4 <Os_SecAlmLed_TurnOnCyclic_Timer_Callback+0x24>)
 8002dc6:	f00a f9c1 	bl	800d14c <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>
  /* USER CODE END Os_SecAlmLed_TurnOnCyclic_Timer_Callback */
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200001fd 	.word	0x200001fd

08002dd8 <Os_SecAlmLedTurnOn_Timer_Callback>:

/* Os_SecAlmLedTurnOn_Timer_Callback function */
void Os_SecAlmLedTurnOn_Timer_Callback(void *argument)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmLedTurnOn_Timer_Callback */
	/* Increase the counter variable used in the turning on the alarm LED for 0,25 seconds. */
	Os_TurnOnLed_Counter = Os_TurnOnLed_Counter + 1;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	3301      	adds	r3, #1
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8002dea:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(&Os_TurnOnLed_Counter);
 8002dec:	4803      	ldr	r0, [pc, #12]	; (8002dfc <Os_SecAlmLedTurnOn_Timer_Callback+0x24>)
 8002dee:	f00a f99d 	bl	800d12c <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>
  /* USER CODE END Os_SecAlmLedTurnOn_Timer_Callback */
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200001fe 	.word	0x200001fe

08002e00 <Os_FollowMeHome_Timer_Callback>:

/* Os_FollowMeHome_Timer_Callback function */
void Os_FollowMeHome_Timer_Callback(void *argument)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_FollowMeHome_Timer_Callback */
	/* Increase the counter variable used in the follow me home concept when the timer
	 * period expires for the lights to go off. */
	Os_FollowMeHome_Counter = Os_FollowMeHome_Counter + 1;
 8002e08:	4b07      	ldr	r3, [pc, #28]	; (8002e28 <Os_FollowMeHome_Timer_Callback+0x28>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <Os_FollowMeHome_Timer_Callback+0x28>)
 8002e12:	701a      	strb	r2, [r3, #0]
	Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(Os_FollowMeHome_Counter);
 8002e14:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <Os_FollowMeHome_Timer_Callback+0x28>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f00a f977 	bl	800d10c <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>
  /* USER CODE END Os_FollowMeHome_Timer_Callback */
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	200001ff 	.word	0x200001ff

08002e2c <Os_TurnSignals_Timer_Callback>:

/* Os_TurnSignals_Timer_Callback function */
void Os_TurnSignals_Timer_Callback(void *argument)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_TurnSignals_Timer_Callback */
	/* Increase the respective counter on request from the specific light in turn signals. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState == STD_HIGH)
 8002e34:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <Os_TurnSignals_Timer_Callback+0x58>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d107      	bne.n	8002e4c <Os_TurnSignals_Timer_Callback+0x20>
	{
		Os_Lts_Counter = Os_Lts_Counter + 1;
 8002e3c:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <Os_TurnSignals_Timer_Callback+0x5c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	4a11      	ldr	r2, [pc, #68]	; (8002e88 <Os_TurnSignals_Timer_Callback+0x5c>)
 8002e44:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(&Os_Lts_Counter);
 8002e46:	4810      	ldr	r0, [pc, #64]	; (8002e88 <Os_TurnSignals_Timer_Callback+0x5c>)
 8002e48:	f00a fb7c 	bl	800d544 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState == STD_HIGH)
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <Os_TurnSignals_Timer_Callback+0x60>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d107      	bne.n	8002e64 <Os_TurnSignals_Timer_Callback+0x38>
	{
		Os_Rts_Counter = Os_Rts_Counter + 1;
 8002e54:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <Os_TurnSignals_Timer_Callback+0x64>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	4a0d      	ldr	r2, [pc, #52]	; (8002e90 <Os_TurnSignals_Timer_Callback+0x64>)
 8002e5c:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(&Os_Rts_Counter);
 8002e5e:	480c      	ldr	r0, [pc, #48]	; (8002e90 <Os_TurnSignals_Timer_Callback+0x64>)
 8002e60:	f00a fb60 	bl	800d524 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>
	else
	{
		/* do nothing */
	}

	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState == STD_HIGH)
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <Os_TurnSignals_Timer_Callback+0x68>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d107      	bne.n	8002e7c <Os_TurnSignals_Timer_Callback+0x50>
	{
		Os_HL_Counter = Os_HL_Counter + 1;
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <Os_TurnSignals_Timer_Callback+0x6c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3301      	adds	r3, #1
 8002e72:	4a09      	ldr	r2, [pc, #36]	; (8002e98 <Os_TurnSignals_Timer_Callback+0x6c>)
 8002e74:	6013      	str	r3, [r2, #0]
		Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(&Os_HL_Counter);
 8002e76:	4808      	ldr	r0, [pc, #32]	; (8002e98 <Os_TurnSignals_Timer_Callback+0x6c>)
 8002e78:	f00a fb74 	bl	800d564 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>
	else
	{
		/* do nothing */
	}
  /* USER CODE END Os_TurnSignals_Timer_Callback */
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	200000e6 	.word	0x200000e6
 8002e88:	20000200 	.word	0x20000200
 8002e8c:	200000e7 	.word	0x200000e7
 8002e90:	20000204 	.word	0x20000204
 8002e94:	200000ea 	.word	0x200000ea
 8002e98:	20000208 	.word	0x20000208

08002e9c <Os_SecAlmAlarm_Timer_Callback>:

/* Os_SecAlmAlarm_Timer_Callback function */
void Os_SecAlmAlarm_Timer_Callback(void *argument)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_SecAlmAlarm_Timer_Callback */
	/* Increase the security alarm trigger counter when the alarm is on. */
	Os_Alarm_Counter = Os_Alarm_Counter + 1;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <Os_SecAlmAlarm_Timer_Callback+0x24>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <Os_SecAlmAlarm_Timer_Callback+0x24>)
 8002eae:	701a      	strb	r2, [r3, #0]
	Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(&Os_Alarm_Counter);
 8002eb0:	4803      	ldr	r0, [pc, #12]	; (8002ec0 <Os_SecAlmAlarm_Timer_Callback+0x24>)
 8002eb2:	f00a fb77 	bl	800d5a4 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>
  /* USER CODE END Os_SecAlmAlarm_Timer_Callback */
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	2000020c 	.word	0x2000020c

08002ec4 <Os_PdcR_Buzzer_Timer_Callback>:

/* Os_PdcR_Buzzer_Timer_Callback function */
void Os_PdcR_Buzzer_Timer_Callback(void *argument)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcR_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCR_BUZZER_PORT, PDCR_BUZZER_PIN);
 8002ecc:	2120      	movs	r1, #32
 8002ece:	4803      	ldr	r0, [pc, #12]	; (8002edc <Os_PdcR_Buzzer_Timer_Callback+0x18>)
 8002ed0:	f002 fe5f 	bl	8005b92 <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcR_Buzzer_Timer_Callback */
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40020400 	.word	0x40020400

08002ee0 <Os_PdcF_Buzzer_Timer_Callback>:

/* Os_PdcF_Buzzer_Timer_Callback function */
void Os_PdcF_Buzzer_Timer_Callback(void *argument)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Os_PdcF_Buzzer_Timer_Callback */
	HAL_GPIO_TogglePin(PDCF_BUZZER_PORT, PDCF_BUZZER_PIN);
 8002ee8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002eec:	4803      	ldr	r0, [pc, #12]	; (8002efc <Os_PdcF_Buzzer_Timer_Callback+0x1c>)
 8002eee:	f002 fe50 	bl	8005b92 <HAL_GPIO_TogglePin>
  /* USER CODE END Os_PdcF_Buzzer_Timer_Callback */
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40020800 	.word	0x40020800

08002f00 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	; 0x28
 8002f04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f06:	f107 0314 	add.w	r3, r7, #20
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	605a      	str	r2, [r3, #4]
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	60da      	str	r2, [r3, #12]
 8002f14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	4b4d      	ldr	r3, [pc, #308]	; (8003050 <MX_GPIO_Init+0x150>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a4c      	ldr	r2, [pc, #304]	; (8003050 <MX_GPIO_Init+0x150>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b4a      	ldr	r3, [pc, #296]	; (8003050 <MX_GPIO_Init+0x150>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	4b46      	ldr	r3, [pc, #280]	; (8003050 <MX_GPIO_Init+0x150>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4a45      	ldr	r2, [pc, #276]	; (8003050 <MX_GPIO_Init+0x150>)
 8002f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f40:	6313      	str	r3, [r2, #48]	; 0x30
 8002f42:	4b43      	ldr	r3, [pc, #268]	; (8003050 <MX_GPIO_Init+0x150>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	4b3f      	ldr	r3, [pc, #252]	; (8003050 <MX_GPIO_Init+0x150>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	4a3e      	ldr	r2, [pc, #248]	; (8003050 <MX_GPIO_Init+0x150>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5e:	4b3c      	ldr	r3, [pc, #240]	; (8003050 <MX_GPIO_Init+0x150>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	4b38      	ldr	r3, [pc, #224]	; (8003050 <MX_GPIO_Init+0x150>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	4a37      	ldr	r2, [pc, #220]	; (8003050 <MX_GPIO_Init+0x150>)
 8002f74:	f043 0302 	orr.w	r3, r3, #2
 8002f78:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7a:	4b35      	ldr	r3, [pc, #212]	; (8003050 <MX_GPIO_Init+0x150>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	4b31      	ldr	r3, [pc, #196]	; (8003050 <MX_GPIO_Init+0x150>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a30      	ldr	r2, [pc, #192]	; (8003050 <MX_GPIO_Init+0x150>)
 8002f90:	f043 0308 	orr.w	r3, r3, #8
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b2e      	ldr	r3, [pc, #184]	; (8003050 <MX_GPIO_Init+0x150>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PDCF_BUZZER_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f64f 4173 	movw	r1, #64627	; 0xfc73
 8002fa8:	482a      	ldr	r0, [pc, #168]	; (8003054 <MX_GPIO_Init+0x154>)
 8002faa:	f002 fdd9 	bl	8005b60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f641 11fc 	movw	r1, #6652	; 0x19fc
 8002fb4:	4828      	ldr	r0, [pc, #160]	; (8003058 <MX_GPIO_Init+0x158>)
 8002fb6:	f002 fdd3 	bl	8005b60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|PDCF_TRIG_Pin
                          |HB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f24f 01f7 	movw	r1, #61687	; 0xf0f7
 8002fc0:	4826      	ldr	r0, [pc, #152]	; (800305c <MX_GPIO_Init+0x15c>)
 8002fc2:	f002 fdcd 	bl	8005b60 <HAL_GPIO_WritePin>
                          |PDCR_TRIG_Pin|AL_Pin|RL_Pin|GPIO_PIN_4
                          |PDCR_BUZZER_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2104      	movs	r1, #4
 8002fca:	4825      	ldr	r0, [pc, #148]	; (8003060 <MX_GPIO_Init+0x160>)
 8002fcc:	f002 fdc8 	bl	8005b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC14 PC15 PC0
                           PC1 PC4 PC5 PC6
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = PDCF_BUZZER_Pin|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8002fd0:	f64f 4373 	movw	r3, #64627	; 0xfc73
 8002fd4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe2:	f107 0314 	add.w	r3, r7, #20
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	481a      	ldr	r0, [pc, #104]	; (8003054 <MX_GPIO_Init+0x154>)
 8002fea:	f002 fb51 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA8 PAPin
                           PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002fee:	f641 13fc 	movw	r3, #6652	; 0x19fc
 8002ff2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|PDCF_TRIG_Pin
                          |HB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	4619      	mov	r1, r3
 8003006:	4814      	ldr	r0, [pc, #80]	; (8003058 <MX_GPIO_Init+0x158>)
 8003008:	f002 fb42 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PBPin PBPin
                           PBPin PBPin PBPin PB4
                           PBPin PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|CENLOC_BUZZER_Pin|SECALM_BUZZER_Pin
 800300c:	f24f 03f7 	movw	r3, #61687	; 0xf0f7
 8003010:	617b      	str	r3, [r7, #20]
                          |PDCR_TRIG_Pin|AL_Pin|RL_Pin|GPIO_PIN_4
                          |PDCR_BUZZER_Pin|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003012:	2301      	movs	r3, #1
 8003014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301a:	2300      	movs	r3, #0
 800301c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301e:	f107 0314 	add.w	r3, r7, #20
 8003022:	4619      	mov	r1, r3
 8003024:	480d      	ldr	r0, [pc, #52]	; (800305c <MX_GPIO_Init+0x15c>)
 8003026:	f002 fb33 	bl	8005690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800302a:	2304      	movs	r3, #4
 800302c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302e:	2301      	movs	r3, #1
 8003030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003036:	2300      	movs	r3, #0
 8003038:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800303a:	f107 0314 	add.w	r3, r7, #20
 800303e:	4619      	mov	r1, r3
 8003040:	4807      	ldr	r0, [pc, #28]	; (8003060 <MX_GPIO_Init+0x160>)
 8003042:	f002 fb25 	bl	8005690 <HAL_GPIO_Init>

}
 8003046:	bf00      	nop
 8003048:	3728      	adds	r7, #40	; 0x28
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	40020800 	.word	0x40020800
 8003058:	40020000 	.word	0x40020000
 800305c:	40020400 	.word	0x40020400
 8003060:	40020c00 	.word	0x40020c00

08003064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <HAL_MspInit+0x90>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	4a20      	ldr	r2, [pc, #128]	; (80030f4 <HAL_MspInit+0x90>)
 8003074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003078:	6453      	str	r3, [r2, #68]	; 0x44
 800307a:	4b1e      	ldr	r3, [pc, #120]	; (80030f4 <HAL_MspInit+0x90>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003082:	607b      	str	r3, [r7, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_MspInit+0x90>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <HAL_MspInit+0x90>)
 8003090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003094:	6413      	str	r3, [r2, #64]	; 0x40
 8003096:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <HAL_MspInit+0x90>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 80030a2:	2200      	movs	r2, #0
 80030a4:	210f      	movs	r1, #15
 80030a6:	f06f 000b 	mvn.w	r0, #11
 80030aa:	f001 fc20 	bl	80048ee <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 80030ae:	2200      	movs	r2, #0
 80030b0:	210f      	movs	r1, #15
 80030b2:	f06f 000a 	mvn.w	r0, #10
 80030b6:	f001 fc1a 	bl	80048ee <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 80030ba:	2200      	movs	r2, #0
 80030bc:	210f      	movs	r1, #15
 80030be:	f06f 0009 	mvn.w	r0, #9
 80030c2:	f001 fc14 	bl	80048ee <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 80030c6:	2200      	movs	r2, #0
 80030c8:	210f      	movs	r1, #15
 80030ca:	f06f 0004 	mvn.w	r0, #4
 80030ce:	f001 fc0e 	bl	80048ee <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 80030d2:	2200      	movs	r2, #0
 80030d4:	210f      	movs	r1, #15
 80030d6:	f06f 0003 	mvn.w	r0, #3
 80030da:	f001 fc08 	bl	80048ee <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030de:	2200      	movs	r2, #0
 80030e0:	210f      	movs	r1, #15
 80030e2:	f06f 0001 	mvn.w	r0, #1
 80030e6:	f001 fc02 	bl	80048ee <HAL_NVIC_SetPriority>
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800

080030f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08c      	sub	sp, #48	; 0x30
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003108:	2300      	movs	r3, #0
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	4b2e      	ldr	r3, [pc, #184]	; (80031c8 <HAL_InitTick+0xd0>)
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	4a2d      	ldr	r2, [pc, #180]	; (80031c8 <HAL_InitTick+0xd0>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6453      	str	r3, [r2, #68]	; 0x44
 8003118:	4b2b      	ldr	r3, [pc, #172]	; (80031c8 <HAL_InitTick+0xd0>)
 800311a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003124:	f107 020c 	add.w	r2, r7, #12
 8003128:	f107 0310 	add.w	r3, r7, #16
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f003 fa4e 	bl	80065d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003134:	f003 fa38 	bl	80065a8 <HAL_RCC_GetPCLK2Freq>
 8003138:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	4a23      	ldr	r2, [pc, #140]	; (80031cc <HAL_InitTick+0xd4>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	0c9b      	lsrs	r3, r3, #18
 8003144:	3b01      	subs	r3, #1
 8003146:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003148:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <HAL_InitTick+0xd8>)
 800314a:	4a22      	ldr	r2, [pc, #136]	; (80031d4 <HAL_InitTick+0xdc>)
 800314c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800314e:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <HAL_InitTick+0xd8>)
 8003150:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003154:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003156:	4a1e      	ldr	r2, [pc, #120]	; (80031d0 <HAL_InitTick+0xd8>)
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800315c:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <HAL_InitTick+0xd8>)
 800315e:	2200      	movs	r2, #0
 8003160:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <HAL_InitTick+0xd8>)
 8003164:	2200      	movs	r2, #0
 8003166:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_InitTick+0xd8>)
 800316a:	2200      	movs	r2, #0
 800316c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800316e:	4818      	ldr	r0, [pc, #96]	; (80031d0 <HAL_InitTick+0xd8>)
 8003170:	f003 fa60 	bl	8006634 <HAL_TIM_Base_Init>
 8003174:	4603      	mov	r3, r0
 8003176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800317a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800317e:	2b00      	cmp	r3, #0
 8003180:	d11b      	bne.n	80031ba <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003182:	4813      	ldr	r0, [pc, #76]	; (80031d0 <HAL_InitTick+0xd8>)
 8003184:	f003 fab2 	bl	80066ec <HAL_TIM_Base_Start_IT>
 8003188:	4603      	mov	r3, r0
 800318a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800318e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003192:	2b00      	cmp	r3, #0
 8003194:	d111      	bne.n	80031ba <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003196:	2019      	movs	r0, #25
 8003198:	f001 fbc5 	bl	8004926 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b0f      	cmp	r3, #15
 80031a0:	d808      	bhi.n	80031b4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80031a2:	2200      	movs	r2, #0
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	2019      	movs	r0, #25
 80031a8:	f001 fba1 	bl	80048ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031ac:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <HAL_InitTick+0xe0>)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e002      	b.n	80031ba <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80031ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3730      	adds	r7, #48	; 0x30
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	431bde83 	.word	0x431bde83
 80031d0:	20000294 	.word	0x20000294
 80031d4:	40010000 	.word	0x40010000
 80031d8:	20000020 	.word	0x20000020

080031dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	SystemManager_SetFault(NMI_RESET);
 80031e0:	2008      	movs	r0, #8
 80031e2:	f00a ff65 	bl	800e0b0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80031e6:	f00a ff8d 	bl	800e104 <SystemManager_PerformReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031ea:	e7fe      	b.n	80031ea <NMI_Handler+0xe>

080031ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	SystemManager_SetFault(HARDWARE_RESET);
 80031f0:	2006      	movs	r0, #6
 80031f2:	f00a ff5d 	bl	800e0b0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 80031f6:	f00a ff85 	bl	800e104 <SystemManager_PerformReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031fa:	e7fe      	b.n	80031fa <HardFault_Handler+0xe>

080031fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	SystemManager_SetFault(MEMORY_FAULT_RESET);
 8003200:	2009      	movs	r0, #9
 8003202:	f00a ff55 	bl	800e0b0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8003206:	f00a ff7d 	bl	800e104 <SystemManager_PerformReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800320a:	e7fe      	b.n	800320a <MemManage_Handler+0xe>

0800320c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	SystemManager_SetFault(BUS_FAULT_RESET);
 8003210:	200b      	movs	r0, #11
 8003212:	f00a ff4d 	bl	800e0b0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8003216:	f00a ff75 	bl	800e104 <SystemManager_PerformReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800321a:	e7fe      	b.n	800321a <BusFault_Handler+0xe>

0800321c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	SystemManager_SetFault(USAGE_FAULT_RESET);
 8003220:	200a      	movs	r0, #10
 8003222:	f00a ff45 	bl	800e0b0 <SystemManager_SetFault>
	SystemManager_PerformReset();
 8003226:	f00a ff6d 	bl	800e104 <SystemManager_PerformReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800322a:	e7fe      	b.n	800322a <UsageFault_Handler+0xe>

0800322c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800323e:	f002 fd15 	bl	8005c6c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}

08003246 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800324a:	f002 f879 	bl	8005340 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}

08003252 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_IRQn 0 */
  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */
  /* USER CODE END RCC_IRQn 1 */
}
 8003256:	bf00      	nop
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003264:	4802      	ldr	r0, [pc, #8]	; (8003270 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003266:	f003 fe39 	bl	8006edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20000294 	.word	0x20000294

08003274 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	/* When alarm is on turn on the LEDs at full duty cycle for the designated time. */
	if(Rte_P_SecAlm_SecAlmPort_SecAlm_PinStateChange == STD_HIGH)
 8003278:	4b46      	ldr	r3, [pc, #280]	; (8003394 <TIM2_IRQHandler+0x120>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d10b      	bne.n	8003298 <TIM2_IRQHandler+0x24>
	{
		TIM2->CCR1 = TIM2->ARR;
 8003280:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003284:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR2 = TIM2->ARR;
 800328c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003290:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	6393      	str	r3, [r2, #56]	; 0x38
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the low beam light until 75%. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_LowBeam_CurrentState == STD_HIGH)
 8003298:	4b3f      	ldr	r3, [pc, #252]	; (8003398 <TIM2_IRQHandler+0x124>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d11a      	bne.n	80032d6 <TIM2_IRQHandler+0x62>
	{
		if(TIM2->CCR1 < 1999)
 80032a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a6:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d807      	bhi.n	80032be <TIM2_IRQHandler+0x4a>
		{
			TIM2->CCR1 = TIM2->CCR1 + 20;
 80032ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032b8:	3314      	adds	r3, #20
 80032ba:	6353      	str	r3, [r2, #52]	; 0x34
 80032bc:	e00b      	b.n	80032d6 <TIM2_IRQHandler+0x62>
		}
		else if(TIM2->CCR1 >= 1999)
 80032be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c4:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d904      	bls.n	80032d6 <TIM2_IRQHandler+0x62>
		{
			TIM2->CCR1 = 1999;
 80032cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032d0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80032d4:	635a      	str	r2, [r3, #52]	; 0x34
		/* do nothing */
	}
	/* Upon timer interrupt generation
	 * proceed to increase the PWM duty cycle
	 * for the rear position light until 75%. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearPositionLights_CurrentState == STD_HIGH)
 80032d6:	4b31      	ldr	r3, [pc, #196]	; (800339c <TIM2_IRQHandler+0x128>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d11a      	bne.n	8003314 <TIM2_IRQHandler+0xa0>
	{
		if(TIM2->CCR2 < 1999)
 80032de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d807      	bhi.n	80032fc <TIM2_IRQHandler+0x88>
		{
			TIM2->CCR2 = TIM2->CCR2 + 1;
 80032ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032f6:	3301      	adds	r3, #1
 80032f8:	6393      	str	r3, [r2, #56]	; 0x38
 80032fa:	e00b      	b.n	8003314 <TIM2_IRQHandler+0xa0>
		}
		else if(TIM2->CCR2 >= 1999)
 80032fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003306:	4293      	cmp	r3, r2
 8003308:	d904      	bls.n	8003314 <TIM2_IRQHandler+0xa0>
		{
			TIM2->CCR2 = 1999;
 800330a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800330e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003312:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_HIGH)
 8003314:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <TIM2_IRQHandler+0x12c>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d11b      	bne.n	8003354 <TIM2_IRQHandler+0xe0>
	{
		if(TIM2->CCR3 < 1999)
 800331c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003322:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003326:	4293      	cmp	r3, r2
 8003328:	d807      	bhi.n	800333a <TIM2_IRQHandler+0xc6>
		{
			TIM2->CCR3 = TIM2->CCR3 + 20;
 800332a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800332e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003330:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003334:	3314      	adds	r3, #20
 8003336:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003338:	e026      	b.n	8003388 <TIM2_IRQHandler+0x114>
		}
		else if(TIM2->CCR3 >= 1999)
 800333a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800333e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003340:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003344:	4293      	cmp	r3, r2
 8003346:	d91f      	bls.n	8003388 <TIM2_IRQHandler+0x114>
		{
			TIM2->CCR3 = 1999;
 8003348:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800334c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003350:	63da      	str	r2, [r3, #60]	; 0x3c
 8003352:	e019      	b.n	8003388 <TIM2_IRQHandler+0x114>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_IntLights_IntLightsPort_IntLights_CurrentState == STD_LOW)
 8003354:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <TIM2_IRQHandler+0x12c>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d115      	bne.n	8003388 <TIM2_IRQHandler+0x114>
	{
		if(TIM2->CCR3 > 20)
 800335c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003362:	2b14      	cmp	r3, #20
 8003364:	d907      	bls.n	8003376 <TIM2_IRQHandler+0x102>
		{
			TIM2->CCR3 = TIM2->CCR3 - 20;
 8003366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800336a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003370:	3b14      	subs	r3, #20
 8003372:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003374:	e008      	b.n	8003388 <TIM2_IRQHandler+0x114>
		}
		else if(TIM2->CCR3 <= 20)
 8003376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800337a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337c:	2b14      	cmp	r3, #20
 800337e:	d803      	bhi.n	8003388 <TIM2_IRQHandler+0x114>
		{
			TIM2->CCR3 = 0;
 8003380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003384:	2200      	movs	r2, #0
 8003386:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003388:	4806      	ldr	r0, [pc, #24]	; (80033a4 <TIM2_IRQHandler+0x130>)
 800338a:	f003 fda7 	bl	8006edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000111 	.word	0x20000111
 8003398:	200000e8 	.word	0x200000e8
 800339c:	200000e9 	.word	0x200000e9
 80033a0:	20000104 	.word	0x20000104
 80033a4:	20000348 	.word	0x20000348

080033a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
	/* On brake lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the brake lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_HIGH)
 80033ac:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <TIM3_IRQHandler+0xb8>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d104      	bne.n	80033be <TIM3_IRQHandler+0x16>
	{
		TIM3->CCR2 = TIM3->ARR;
 80033b4:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <TIM3_IRQHandler+0xbc>)
 80033b6:	4a2b      	ldr	r2, [pc, #172]	; (8003464 <TIM3_IRQHandler+0xbc>)
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	6393      	str	r3, [r2, #56]	; 0x38
 80033bc:	e006      	b.n	80033cc <TIM3_IRQHandler+0x24>
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState == STD_LOW)
 80033be:	4b28      	ldr	r3, [pc, #160]	; (8003460 <TIM3_IRQHandler+0xb8>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d102      	bne.n	80033cc <TIM3_IRQHandler+0x24>
	{
		TIM3->CCR2 = 0;
 80033c6:	4b27      	ldr	r3, [pc, #156]	; (8003464 <TIM3_IRQHandler+0xbc>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	639a      	str	r2, [r3, #56]	; 0x38
	/* On front fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the front fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_HIGH)
 80033cc:	4b26      	ldr	r3, [pc, #152]	; (8003468 <TIM3_IRQHandler+0xc0>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d116      	bne.n	8003402 <TIM3_IRQHandler+0x5a>
	{
		if(TIM3->CCR3 < 1999)
 80033d4:	4b23      	ldr	r3, [pc, #140]	; (8003464 <TIM3_IRQHandler+0xbc>)
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80033dc:	4293      	cmp	r3, r2
 80033de:	d805      	bhi.n	80033ec <TIM3_IRQHandler+0x44>
		{
			TIM3->CCR3 = TIM3->CCR3 + 20;
 80033e0:	4b20      	ldr	r3, [pc, #128]	; (8003464 <TIM3_IRQHandler+0xbc>)
 80033e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e4:	4a1f      	ldr	r2, [pc, #124]	; (8003464 <TIM3_IRQHandler+0xbc>)
 80033e6:	3314      	adds	r3, #20
 80033e8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80033ea:	e011      	b.n	8003410 <TIM3_IRQHandler+0x68>
		}
		else if(TIM3->CCR3 >= 1999)
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <TIM3_IRQHandler+0xbc>)
 80033ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f0:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d90b      	bls.n	8003410 <TIM3_IRQHandler+0x68>
		{
			TIM3->CCR3 = 1999;
 80033f8:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <TIM3_IRQHandler+0xbc>)
 80033fa:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80033fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8003400:	e006      	b.n	8003410 <TIM3_IRQHandler+0x68>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState == STD_LOW)
 8003402:	4b19      	ldr	r3, [pc, #100]	; (8003468 <TIM3_IRQHandler+0xc0>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d102      	bne.n	8003410 <TIM3_IRQHandler+0x68>
	{
		TIM3->CCR3 = 0;
 800340a:	4b16      	ldr	r3, [pc, #88]	; (8003464 <TIM3_IRQHandler+0xbc>)
 800340c:	2200      	movs	r2, #0
 800340e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* On rear fog lights set to high
	 * increase the PWM duty cycle of the
	 * door led's brightness up to 100% gradually.
	 * Set it to 100% upon reaching maximum value.
	 * If the rear fog lights are set to low, set duty cycle to 0. */
	if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_HIGH)
 8003410:	4b16      	ldr	r3, [pc, #88]	; (800346c <TIM3_IRQHandler+0xc4>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d116      	bne.n	8003446 <TIM3_IRQHandler+0x9e>
	{
		if(TIM3->CCR4 < 1999)
 8003418:	4b12      	ldr	r3, [pc, #72]	; (8003464 <TIM3_IRQHandler+0xbc>)
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003420:	4293      	cmp	r3, r2
 8003422:	d805      	bhi.n	8003430 <TIM3_IRQHandler+0x88>
		{
			TIM3->CCR4 = TIM3->CCR4 + 20;
 8003424:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <TIM3_IRQHandler+0xbc>)
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	4a0e      	ldr	r2, [pc, #56]	; (8003464 <TIM3_IRQHandler+0xbc>)
 800342a:	3314      	adds	r3, #20
 800342c:	6413      	str	r3, [r2, #64]	; 0x40
 800342e:	e011      	b.n	8003454 <TIM3_IRQHandler+0xac>
		}
		else if(TIM3->CCR4 >= 1999)
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <TIM3_IRQHandler+0xbc>)
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8003438:	4293      	cmp	r3, r2
 800343a:	d90b      	bls.n	8003454 <TIM3_IRQHandler+0xac>
		{
			TIM3->CCR4 = 1999;
 800343c:	4b09      	ldr	r3, [pc, #36]	; (8003464 <TIM3_IRQHandler+0xbc>)
 800343e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
 8003444:	e006      	b.n	8003454 <TIM3_IRQHandler+0xac>
		else
		{
			/* do nothing */
		}
	}
	else if(Rte_P_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState == STD_LOW)
 8003446:	4b09      	ldr	r3, [pc, #36]	; (800346c <TIM3_IRQHandler+0xc4>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d102      	bne.n	8003454 <TIM3_IRQHandler+0xac>
	{
		TIM3->CCR4 = 0;
 800344e:	4b05      	ldr	r3, [pc, #20]	; (8003464 <TIM3_IRQHandler+0xbc>)
 8003450:	2200      	movs	r2, #0
 8003452:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		/* do nothing */
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003454:	4806      	ldr	r0, [pc, #24]	; (8003470 <TIM3_IRQHandler+0xc8>)
 8003456:	f003 fd41 	bl	8006edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	200000e2 	.word	0x200000e2
 8003464:	40000400 	.word	0x40000400
 8003468:	200000e5 	.word	0x200000e5
 800346c:	200000eb 	.word	0x200000eb
 8003470:	200003fc 	.word	0x200003fc

08003474 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <TIM4_IRQHandler+0x10>)
 800347a:	f003 fd2f 	bl	8006edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  /* USER CODE END TIM4_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200004b0 	.word	0x200004b0

08003488 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800348c:	4802      	ldr	r0, [pc, #8]	; (8003498 <USART1_IRQHandler+0x10>)
 800348e:	f004 fee3 	bl	8008258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000618 	.word	0x20000618

0800349c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <TIM5_IRQHandler+0x10>)
 80034a2:	f003 fd1b 	bl	8006edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  /* USER CODE END TIM5_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000564 	.word	0x20000564

080034b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034b4:	4802      	ldr	r0, [pc, #8]	; (80034c0 <DMA2_Stream0_IRQHandler+0x10>)
 80034b6:	f001 fcd9 	bl	8004e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000190 	.word	0x20000190

080034c4 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <SystemInit+0x20>)
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034de:	4a05      	ldr	r2, [pc, #20]	; (80034f4 <SystemInit+0x20>)
 80034e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM5_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08c      	sub	sp, #48	; 0x30
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003500:	f107 031c 	add.w	r3, r7, #28
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	60da      	str	r2, [r3, #12]
 800350e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003518:	d10e      	bne.n	8003538 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	4b35      	ldr	r3, [pc, #212]	; (80035f4 <HAL_TIM_Base_MspInit+0xfc>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	4a34      	ldr	r2, [pc, #208]	; (80035f4 <HAL_TIM_Base_MspInit+0xfc>)
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	6413      	str	r3, [r2, #64]	; 0x40
 800352a:	4b32      	ldr	r3, [pc, #200]	; (80035f4 <HAL_TIM_Base_MspInit+0xfc>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003536:	e058      	b.n	80035ea <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM3)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a2e      	ldr	r2, [pc, #184]	; (80035f8 <HAL_TIM_Base_MspInit+0x100>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10e      	bne.n	8003560 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <HAL_TIM_Base_MspInit+0xfc>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	4a2a      	ldr	r2, [pc, #168]	; (80035f4 <HAL_TIM_Base_MspInit+0xfc>)
 800354c:	f043 0302 	orr.w	r3, r3, #2
 8003550:	6413      	str	r3, [r2, #64]	; 0x40
 8003552:	4b28      	ldr	r3, [pc, #160]	; (80035f4 <HAL_TIM_Base_MspInit+0xfc>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	697b      	ldr	r3, [r7, #20]
}
 800355e:	e044      	b.n	80035ea <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM4)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a25      	ldr	r2, [pc, #148]	; (80035fc <HAL_TIM_Base_MspInit+0x104>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10e      	bne.n	8003588 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800356a:	2300      	movs	r3, #0
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	4b21      	ldr	r3, [pc, #132]	; (80035f4 <HAL_TIM_Base_MspInit+0xfc>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	4a20      	ldr	r2, [pc, #128]	; (80035f4 <HAL_TIM_Base_MspInit+0xfc>)
 8003574:	f043 0304 	orr.w	r3, r3, #4
 8003578:	6413      	str	r3, [r2, #64]	; 0x40
 800357a:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <HAL_TIM_Base_MspInit+0xfc>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	693b      	ldr	r3, [r7, #16]
}
 8003586:	e030      	b.n	80035ea <HAL_TIM_Base_MspInit+0xf2>
  else if(tim_baseHandle->Instance==TIM5)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1c      	ldr	r2, [pc, #112]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d12b      	bne.n	80035ea <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <HAL_TIM_Base_MspInit+0xfc>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <HAL_TIM_Base_MspInit+0xfc>)
 800359c:	f043 0308 	orr.w	r3, r3, #8
 80035a0:	6413      	str	r3, [r2, #64]	; 0x40
 80035a2:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <HAL_TIM_Base_MspInit+0xfc>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_TIM_Base_MspInit+0xfc>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a0f      	ldr	r2, [pc, #60]	; (80035f4 <HAL_TIM_Base_MspInit+0xfc>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	6313      	str	r3, [r2, #48]	; 0x30
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <HAL_TIM_Base_MspInit+0xfc>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PDCF_IC_Pin|PDCR_IC_Pin;
 80035ca:	2303      	movs	r3, #3
 80035cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ce:	2302      	movs	r3, #2
 80035d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	2300      	movs	r3, #0
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80035da:	2302      	movs	r3, #2
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035de:	f107 031c 	add.w	r3, r7, #28
 80035e2:	4619      	mov	r1, r3
 80035e4:	4807      	ldr	r0, [pc, #28]	; (8003604 <HAL_TIM_Base_MspInit+0x10c>)
 80035e6:	f002 f853 	bl	8005690 <HAL_GPIO_Init>
}
 80035ea:	bf00      	nop
 80035ec:	3730      	adds	r7, #48	; 0x30
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40000400 	.word	0x40000400
 80035fc:	40000800 	.word	0x40000800
 8003600:	40000c00 	.word	0x40000c00
 8003604:	40020000 	.word	0x40020000

08003608 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08c      	sub	sp, #48	; 0x30
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003610:	f107 031c 	add.w	r3, r7, #28
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	609a      	str	r2, [r3, #8]
 800361c:	60da      	str	r2, [r3, #12]
 800361e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003628:	d13e      	bne.n	80036a8 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	4b45      	ldr	r3, [pc, #276]	; (8003744 <HAL_TIM_MspPostInit+0x13c>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a44      	ldr	r2, [pc, #272]	; (8003744 <HAL_TIM_MspPostInit+0x13c>)
 8003634:	f043 0302 	orr.w	r3, r3, #2
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b42      	ldr	r3, [pc, #264]	; (8003744 <HAL_TIM_MspPostInit+0x13c>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	61bb      	str	r3, [r7, #24]
 8003644:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	4b3e      	ldr	r3, [pc, #248]	; (8003744 <HAL_TIM_MspPostInit+0x13c>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4a3d      	ldr	r2, [pc, #244]	; (8003744 <HAL_TIM_MspPostInit+0x13c>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6313      	str	r3, [r2, #48]	; 0x30
 8003656:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <HAL_TIM_MspPostInit+0x13c>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = IL_PWM_Pin|RPL_PWM_Pin;
 8003662:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8003666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003668:	2302      	movs	r3, #2
 800366a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366c:	2300      	movs	r3, #0
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003670:	2300      	movs	r3, #0
 8003672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003674:	2301      	movs	r3, #1
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003678:	f107 031c 	add.w	r3, r7, #28
 800367c:	4619      	mov	r1, r3
 800367e:	4832      	ldr	r0, [pc, #200]	; (8003748 <HAL_TIM_MspPostInit+0x140>)
 8003680:	f002 f806 	bl	8005690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LB_PWM_Pin;
 8003684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368a:	2302      	movs	r3, #2
 800368c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003692:	2300      	movs	r3, #0
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003696:	2301      	movs	r3, #1
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LB_PWM_GPIO_Port, &GPIO_InitStruct);
 800369a:	f107 031c 	add.w	r3, r7, #28
 800369e:	4619      	mov	r1, r3
 80036a0:	482a      	ldr	r0, [pc, #168]	; (800374c <HAL_TIM_MspPostInit+0x144>)
 80036a2:	f001 fff5 	bl	8005690 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80036a6:	e048      	b.n	800373a <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM3)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a28      	ldr	r2, [pc, #160]	; (8003750 <HAL_TIM_MspPostInit+0x148>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d11f      	bne.n	80036f2 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	4b23      	ldr	r3, [pc, #140]	; (8003744 <HAL_TIM_MspPostInit+0x13c>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	4a22      	ldr	r2, [pc, #136]	; (8003744 <HAL_TIM_MspPostInit+0x13c>)
 80036bc:	f043 0304 	orr.w	r3, r3, #4
 80036c0:	6313      	str	r3, [r2, #48]	; 0x30
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_TIM_MspPostInit+0x13c>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BL_PWM_Pin|FFL_PWM_Pin|RFL_PWM_Pin;
 80036ce:	f44f 7360 	mov.w	r3, #896	; 0x380
 80036d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d4:	2302      	movs	r3, #2
 80036d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036dc:	2300      	movs	r3, #0
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036e0:	2302      	movs	r3, #2
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e4:	f107 031c 	add.w	r3, r7, #28
 80036e8:	4619      	mov	r1, r3
 80036ea:	481a      	ldr	r0, [pc, #104]	; (8003754 <HAL_TIM_MspPostInit+0x14c>)
 80036ec:	f001 ffd0 	bl	8005690 <HAL_GPIO_Init>
}
 80036f0:	e023      	b.n	800373a <HAL_TIM_MspPostInit+0x132>
  else if(timHandle->Instance==TIM4)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a18      	ldr	r2, [pc, #96]	; (8003758 <HAL_TIM_MspPostInit+0x150>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d11e      	bne.n	800373a <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	4b10      	ldr	r3, [pc, #64]	; (8003744 <HAL_TIM_MspPostInit+0x13c>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	4a0f      	ldr	r2, [pc, #60]	; (8003744 <HAL_TIM_MspPostInit+0x13c>)
 8003706:	f043 0302 	orr.w	r3, r3, #2
 800370a:	6313      	str	r3, [r2, #48]	; 0x30
 800370c:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <HAL_TIM_MspPostInit+0x13c>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LTS_PWM_Pin|RTS_PWM_Pin;
 8003718:	f44f 7340 	mov.w	r3, #768	; 0x300
 800371c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371e:	2302      	movs	r3, #2
 8003720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	2300      	movs	r3, #0
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003726:	2300      	movs	r3, #0
 8003728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800372a:	2302      	movs	r3, #2
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372e:	f107 031c 	add.w	r3, r7, #28
 8003732:	4619      	mov	r1, r3
 8003734:	4804      	ldr	r0, [pc, #16]	; (8003748 <HAL_TIM_MspPostInit+0x140>)
 8003736:	f001 ffab 	bl	8005690 <HAL_GPIO_Init>
}
 800373a:	bf00      	nop
 800373c:	3730      	adds	r7, #48	; 0x30
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800
 8003748:	40020400 	.word	0x40020400
 800374c:	40020000 	.word	0x40020000
 8003750:	40000400 	.word	0x40000400
 8003754:	40020800 	.word	0x40020800
 8003758:	40000800 	.word	0x40000800

0800375c <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376c:	d109      	bne.n	8003782 <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 800376e:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <HAL_TIM_Base_MspDeInit+0x90>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a1e      	ldr	r2, [pc, #120]	; (80037ec <HAL_TIM_Base_MspDeInit+0x90>)
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 800377a:	201c      	movs	r0, #28
 800377c:	f001 f8e1 	bl	8004942 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspDeInit 1 */

  /* USER CODE END TIM5_MspDeInit 1 */
  }
}
 8003780:	e02f      	b.n	80037e2 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM3)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1a      	ldr	r2, [pc, #104]	; (80037f0 <HAL_TIM_Base_MspDeInit+0x94>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d109      	bne.n	80037a0 <HAL_TIM_Base_MspDeInit+0x44>
    __HAL_RCC_TIM3_CLK_DISABLE();
 800378c:	4b17      	ldr	r3, [pc, #92]	; (80037ec <HAL_TIM_Base_MspDeInit+0x90>)
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	4a16      	ldr	r2, [pc, #88]	; (80037ec <HAL_TIM_Base_MspDeInit+0x90>)
 8003792:	f023 0302 	bic.w	r3, r3, #2
 8003796:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8003798:	201d      	movs	r0, #29
 800379a:	f001 f8d2 	bl	8004942 <HAL_NVIC_DisableIRQ>
}
 800379e:	e020      	b.n	80037e2 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM4)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a13      	ldr	r2, [pc, #76]	; (80037f4 <HAL_TIM_Base_MspDeInit+0x98>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d109      	bne.n	80037be <HAL_TIM_Base_MspDeInit+0x62>
    __HAL_RCC_TIM4_CLK_DISABLE();
 80037aa:	4b10      	ldr	r3, [pc, #64]	; (80037ec <HAL_TIM_Base_MspDeInit+0x90>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	4a0f      	ldr	r2, [pc, #60]	; (80037ec <HAL_TIM_Base_MspDeInit+0x90>)
 80037b0:	f023 0304 	bic.w	r3, r3, #4
 80037b4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 80037b6:	201e      	movs	r0, #30
 80037b8:	f001 f8c3 	bl	8004942 <HAL_NVIC_DisableIRQ>
}
 80037bc:	e011      	b.n	80037e2 <HAL_TIM_Base_MspDeInit+0x86>
  else if(tim_baseHandle->Instance==TIM5)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a0d      	ldr	r2, [pc, #52]	; (80037f8 <HAL_TIM_Base_MspDeInit+0x9c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d10c      	bne.n	80037e2 <HAL_TIM_Base_MspDeInit+0x86>
    __HAL_RCC_TIM5_CLK_DISABLE();
 80037c8:	4b08      	ldr	r3, [pc, #32]	; (80037ec <HAL_TIM_Base_MspDeInit+0x90>)
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	4a07      	ldr	r2, [pc, #28]	; (80037ec <HAL_TIM_Base_MspDeInit+0x90>)
 80037ce:	f023 0308 	bic.w	r3, r3, #8
 80037d2:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PDCF_IC_Pin|PDCR_IC_Pin);
 80037d4:	2103      	movs	r1, #3
 80037d6:	4809      	ldr	r0, [pc, #36]	; (80037fc <HAL_TIM_Base_MspDeInit+0xa0>)
 80037d8:	f002 f8de 	bl	8005998 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(TIM5_IRQn);
 80037dc:	2032      	movs	r0, #50	; 0x32
 80037de:	f001 f8b0 	bl	8004942 <HAL_NVIC_DisableIRQ>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40000400 	.word	0x40000400
 80037f4:	40000800 	.word	0x40000800
 80037f8:	40000c00 	.word	0x40000c00
 80037fc:	40020000 	.word	0x40020000

08003800 <HAL_UART_MspInit>:
  /* USER CODE END USART1_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	; 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	f107 0314 	add.w	r3, r7, #20
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a19      	ldr	r2, [pc, #100]	; (8003884 <HAL_UART_MspInit+0x84>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d12c      	bne.n	800387c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	4b18      	ldr	r3, [pc, #96]	; (8003888 <HAL_UART_MspInit+0x88>)
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	4a17      	ldr	r2, [pc, #92]	; (8003888 <HAL_UART_MspInit+0x88>)
 800382c:	f043 0310 	orr.w	r3, r3, #16
 8003830:	6453      	str	r3, [r2, #68]	; 0x44
 8003832:	4b15      	ldr	r3, [pc, #84]	; (8003888 <HAL_UART_MspInit+0x88>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	f003 0310 	and.w	r3, r3, #16
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	4b11      	ldr	r3, [pc, #68]	; (8003888 <HAL_UART_MspInit+0x88>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	4a10      	ldr	r2, [pc, #64]	; (8003888 <HAL_UART_MspInit+0x88>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6313      	str	r3, [r2, #48]	; 0x30
 800384e:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <HAL_UART_MspInit+0x88>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800385a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800385e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003860:	2302      	movs	r3, #2
 8003862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003864:	2300      	movs	r3, #0
 8003866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003868:	2303      	movs	r3, #3
 800386a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800386c:	2307      	movs	r3, #7
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	4619      	mov	r1, r3
 8003876:	4805      	ldr	r0, [pc, #20]	; (800388c <HAL_UART_MspInit+0x8c>)
 8003878:	f001 ff0a 	bl	8005690 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800387c:	bf00      	nop
 800387e:	3728      	adds	r7, #40	; 0x28
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40011000 	.word	0x40011000
 8003888:	40023800 	.word	0x40023800
 800388c:	40020000 	.word	0x40020000

08003890 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0a      	ldr	r2, [pc, #40]	; (80038c8 <HAL_UART_MspDeInit+0x38>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d10d      	bne.n	80038be <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <HAL_UART_MspDeInit+0x3c>)
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	4a09      	ldr	r2, [pc, #36]	; (80038cc <HAL_UART_MspDeInit+0x3c>)
 80038a8:	f023 0310 	bic.w	r3, r3, #16
 80038ac:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80038ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80038b2:	4807      	ldr	r0, [pc, #28]	; (80038d0 <HAL_UART_MspDeInit+0x40>)
 80038b4:	f002 f870 	bl	8005998 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80038b8:	2025      	movs	r0, #37	; 0x25
 80038ba:	f001 f842 	bl	8004942 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40011000 	.word	0x40011000
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020000 	.word	0x40020000

080038d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80038d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800390c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038d8:	480d      	ldr	r0, [pc, #52]	; (8003910 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038da:	490e      	ldr	r1, [pc, #56]	; (8003914 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80038dc:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038e0:	e002      	b.n	80038e8 <LoopCopyDataInit>

080038e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038e6:	3304      	adds	r3, #4

080038e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038ec:	d3f9      	bcc.n	80038e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038ee:	4a0b      	ldr	r2, [pc, #44]	; (800391c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80038f0:	4c0b      	ldr	r4, [pc, #44]	; (8003920 <LoopFillZerobss+0x26>)
  movs r3, #0
 80038f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038f4:	e001      	b.n	80038fa <LoopFillZerobss>

080038f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038f8:	3204      	adds	r2, #4

080038fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038fc:	d3fb      	bcc.n	80038f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80038fe:	f7ff fde9 	bl	80034d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003902:	f00a fd01 	bl	800e308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003906:	f7fd f9e3 	bl	8000cd0 <main>
  bx  lr    
 800390a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800390c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003914:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003918:	0800ec4c 	.word	0x0800ec4c
  ldr r2, =_sbss
 800391c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003920:	2000a578 	.word	0x2000a578

08003924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003924:	e7fe      	b.n	8003924 <ADC_IRQHandler>

08003926 <Dem_MainFunction>:
/***********************************************************************************
* Function: Dem_MainFunction													   *
* Description: Module main function.									 		   *
************************************************************************************/
VOID Dem_MainFunction()
{
 8003926:	b580      	push	{r7, lr}
 8003928:	af00      	add	r7, sp, #0
	Dem_ProcessFault();
 800392a:	f000 f803 	bl	8003934 <Dem_ProcessFault>
}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <Dem_ProcessFault>:
/***********************************************************************************
* Function: Dem_ProcessFault													   *
* Description: Process fault from application.							 		   *
************************************************************************************/
VOID Dem_ProcessFault()
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
	uint8 local = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	707b      	strb	r3, [r7, #1]
	uint16 msg_length = strlen(Dem_DtcMessage);
 800393e:	4b67      	ldr	r3, [pc, #412]	; (8003adc <Dem_ProcessFault+0x1a8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fc fc4c 	bl	80001e0 <strlen>
 8003948:	4603      	mov	r3, r0
 800394a:	81fb      	strh	r3, [r7, #14]
	uint16 ls_length = strlen(Dem_DtcLs);
 800394c:	4b64      	ldr	r3, [pc, #400]	; (8003ae0 <Dem_ProcessFault+0x1ac>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f7fc fc45 	bl	80001e0 <strlen>
 8003956:	4603      	mov	r3, r0
 8003958:	81bb      	strh	r3, [r7, #12]
	uint16 vs_length = strlen(Dem_DtcVs);
 800395a:	4b62      	ldr	r3, [pc, #392]	; (8003ae4 <Dem_ProcessFault+0x1b0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7fc fc3e 	bl	80001e0 <strlen>
 8003964:	4603      	mov	r3, r0
 8003966:	817b      	strh	r3, [r7, #10]
	uint16 pdcr_length = strlen(Dem_DtcPdcr);
 8003968:	4b5f      	ldr	r3, [pc, #380]	; (8003ae8 <Dem_ProcessFault+0x1b4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fc fc37 	bl	80001e0 <strlen>
 8003972:	4603      	mov	r3, r0
 8003974:	813b      	strh	r3, [r7, #8]
	uint16 pdcf_length = strlen(Dem_DtcPdcf);
 8003976:	4b5d      	ldr	r3, [pc, #372]	; (8003aec <Dem_ProcessFault+0x1b8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fc fc30 	bl	80001e0 <strlen>
 8003980:	4603      	mov	r3, r0
 8003982:	80fb      	strh	r3, [r7, #6]
	uint16 bt_length = strlen(Dem_DtcBt);
 8003984:	4b5a      	ldr	r3, [pc, #360]	; (8003af0 <Dem_ProcessFault+0x1bc>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f7fc fc29 	bl	80001e0 <strlen>
 800398e:	4603      	mov	r3, r0
 8003990:	80bb      	strh	r3, [r7, #4]
	uint16 hw_length = strlen(Dem_DtcHw);
 8003992:	4b58      	ldr	r3, [pc, #352]	; (8003af4 <Dem_ProcessFault+0x1c0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fc fc22 	bl	80001e0 <strlen>
 800399c:	4603      	mov	r3, r0
 800399e:	807b      	strh	r3, [r7, #2]

	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelFour != STD_LOW || Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
 80039a0:	4b55      	ldr	r3, [pc, #340]	; (8003af8 <Dem_ProcessFault+0x1c4>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d103      	bne.n	80039b0 <Dem_ProcessFault+0x7c>
 80039a8:	4b54      	ldr	r3, [pc, #336]	; (8003afc <Dem_ProcessFault+0x1c8>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d102      	bne.n	80039b6 <Dem_ProcessFault+0x82>
	{
		Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = STD_LOW;
 80039b0:	4b53      	ldr	r3, [pc, #332]	; (8003b00 <Dem_ProcessFault+0x1cc>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	709a      	strb	r2, [r3, #2]
	}
	else
	{
		/* do nothing */
	}
	if(Rte_P_Tim_TimPort_Tim5_CalculatedDistance_ChannelThree != STD_LOW || Rte_P_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState == STD_LOW)
 80039b6:	4b53      	ldr	r3, [pc, #332]	; (8003b04 <Dem_ProcessFault+0x1d0>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d103      	bne.n	80039c6 <Dem_ProcessFault+0x92>
 80039be:	4b4f      	ldr	r3, [pc, #316]	; (8003afc <Dem_ProcessFault+0x1c8>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d102      	bne.n	80039cc <Dem_ProcessFault+0x98>
	{
		Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = STD_LOW;
 80039c6:	4b4e      	ldr	r3, [pc, #312]	; (8003b00 <Dem_ProcessFault+0x1cc>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	70da      	strb	r2, [r3, #3]
	else
	{
		/* do nothing */
	}

	if(Rte_P_Btc_BtcPort_Btc_ReceivedDataOnBluetooth == 90)
 80039cc:	4b4e      	ldr	r3, [pc, #312]	; (8003b08 <Dem_ProcessFault+0x1d4>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b5a      	cmp	r3, #90	; 0x5a
 80039d2:	d17e      	bne.n	8003ad2 <Dem_ProcessFault+0x19e>
	{
		while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcMessage, msg_length) == HAL_BUSY);
 80039d4:	bf00      	nop
 80039d6:	4b41      	ldr	r3, [pc, #260]	; (8003adc <Dem_ProcessFault+0x1a8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	89fa      	ldrh	r2, [r7, #14]
 80039dc:	4619      	mov	r1, r3
 80039de:	484b      	ldr	r0, [pc, #300]	; (8003b0c <Dem_ProcessFault+0x1d8>)
 80039e0:	f004 fbc4 	bl	800816c <HAL_UART_Transmit_IT>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d0f5      	beq.n	80039d6 <Dem_ProcessFault+0xa2>
		Rte_Runnable_Wdg_MainFunction();
 80039ea:	f009 fc61 	bl	800d2b0 <Rte_Runnable_Wdg_MainFunction>
		if(Dem_DtcArray[0])
 80039ee:	4b44      	ldr	r3, [pc, #272]	; (8003b00 <Dem_ProcessFault+0x1cc>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00c      	beq.n	8003a10 <Dem_ProcessFault+0xdc>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcLs, ls_length) == HAL_BUSY);
 80039f6:	bf00      	nop
 80039f8:	4b39      	ldr	r3, [pc, #228]	; (8003ae0 <Dem_ProcessFault+0x1ac>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	89ba      	ldrh	r2, [r7, #12]
 80039fe:	4619      	mov	r1, r3
 8003a00:	4842      	ldr	r0, [pc, #264]	; (8003b0c <Dem_ProcessFault+0x1d8>)
 8003a02:	f004 fbb3 	bl	800816c <HAL_UART_Transmit_IT>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d0f5      	beq.n	80039f8 <Dem_ProcessFault+0xc4>
			Rte_Runnable_Wdg_MainFunction();
 8003a0c:	f009 fc50 	bl	800d2b0 <Rte_Runnable_Wdg_MainFunction>
		}

		if(Dem_DtcArray[1])
 8003a10:	4b3b      	ldr	r3, [pc, #236]	; (8003b00 <Dem_ProcessFault+0x1cc>)
 8003a12:	785b      	ldrb	r3, [r3, #1]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00c      	beq.n	8003a32 <Dem_ProcessFault+0xfe>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcVs, vs_length) == HAL_BUSY);
 8003a18:	bf00      	nop
 8003a1a:	4b32      	ldr	r3, [pc, #200]	; (8003ae4 <Dem_ProcessFault+0x1b0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	897a      	ldrh	r2, [r7, #10]
 8003a20:	4619      	mov	r1, r3
 8003a22:	483a      	ldr	r0, [pc, #232]	; (8003b0c <Dem_ProcessFault+0x1d8>)
 8003a24:	f004 fba2 	bl	800816c <HAL_UART_Transmit_IT>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d0f5      	beq.n	8003a1a <Dem_ProcessFault+0xe6>
			Rte_Runnable_Wdg_MainFunction();
 8003a2e:	f009 fc3f 	bl	800d2b0 <Rte_Runnable_Wdg_MainFunction>
		}

		if(Dem_DtcArray[2])
 8003a32:	4b33      	ldr	r3, [pc, #204]	; (8003b00 <Dem_ProcessFault+0x1cc>)
 8003a34:	789b      	ldrb	r3, [r3, #2]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00c      	beq.n	8003a54 <Dem_ProcessFault+0x120>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcPdcr, pdcr_length) == HAL_BUSY);
 8003a3a:	bf00      	nop
 8003a3c:	4b2a      	ldr	r3, [pc, #168]	; (8003ae8 <Dem_ProcessFault+0x1b4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	893a      	ldrh	r2, [r7, #8]
 8003a42:	4619      	mov	r1, r3
 8003a44:	4831      	ldr	r0, [pc, #196]	; (8003b0c <Dem_ProcessFault+0x1d8>)
 8003a46:	f004 fb91 	bl	800816c <HAL_UART_Transmit_IT>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d0f5      	beq.n	8003a3c <Dem_ProcessFault+0x108>
			Rte_Runnable_Wdg_MainFunction();
 8003a50:	f009 fc2e 	bl	800d2b0 <Rte_Runnable_Wdg_MainFunction>
		}

		if(Dem_DtcArray[3])
 8003a54:	4b2a      	ldr	r3, [pc, #168]	; (8003b00 <Dem_ProcessFault+0x1cc>)
 8003a56:	78db      	ldrb	r3, [r3, #3]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00c      	beq.n	8003a76 <Dem_ProcessFault+0x142>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcPdcf, pdcf_length) == HAL_BUSY);
 8003a5c:	bf00      	nop
 8003a5e:	4b23      	ldr	r3, [pc, #140]	; (8003aec <Dem_ProcessFault+0x1b8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	88fa      	ldrh	r2, [r7, #6]
 8003a64:	4619      	mov	r1, r3
 8003a66:	4829      	ldr	r0, [pc, #164]	; (8003b0c <Dem_ProcessFault+0x1d8>)
 8003a68:	f004 fb80 	bl	800816c <HAL_UART_Transmit_IT>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d0f5      	beq.n	8003a5e <Dem_ProcessFault+0x12a>
			Rte_Runnable_Wdg_MainFunction();
 8003a72:	f009 fc1d 	bl	800d2b0 <Rte_Runnable_Wdg_MainFunction>
		}

		if(Dem_DtcArray[4])
 8003a76:	4b22      	ldr	r3, [pc, #136]	; (8003b00 <Dem_ProcessFault+0x1cc>)
 8003a78:	791b      	ldrb	r3, [r3, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00c      	beq.n	8003a98 <Dem_ProcessFault+0x164>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcBt, bt_length) == HAL_BUSY);
 8003a7e:	bf00      	nop
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <Dem_ProcessFault+0x1bc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	88ba      	ldrh	r2, [r7, #4]
 8003a86:	4619      	mov	r1, r3
 8003a88:	4820      	ldr	r0, [pc, #128]	; (8003b0c <Dem_ProcessFault+0x1d8>)
 8003a8a:	f004 fb6f 	bl	800816c <HAL_UART_Transmit_IT>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d0f5      	beq.n	8003a80 <Dem_ProcessFault+0x14c>
			Rte_Runnable_Wdg_MainFunction();
 8003a94:	f009 fc0c 	bl	800d2b0 <Rte_Runnable_Wdg_MainFunction>
		}

		if(Dem_DtcArray[5] != 0 || Dem_DtcArray[6] != 0 || Dem_DtcArray[7] != 0)
 8003a98:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <Dem_ProcessFault+0x1cc>)
 8003a9a:	795b      	ldrb	r3, [r3, #5]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d107      	bne.n	8003ab0 <Dem_ProcessFault+0x17c>
 8003aa0:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <Dem_ProcessFault+0x1cc>)
 8003aa2:	799b      	ldrb	r3, [r3, #6]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d103      	bne.n	8003ab0 <Dem_ProcessFault+0x17c>
 8003aa8:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <Dem_ProcessFault+0x1cc>)
 8003aaa:	79db      	ldrb	r3, [r3, #7]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00c      	beq.n	8003aca <Dem_ProcessFault+0x196>
		{
			while(HAL_UART_Transmit_IT(&huart1, (uint8*)Dem_DtcHw, hw_length) == HAL_BUSY);
 8003ab0:	bf00      	nop
 8003ab2:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <Dem_ProcessFault+0x1c0>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	887a      	ldrh	r2, [r7, #2]
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4814      	ldr	r0, [pc, #80]	; (8003b0c <Dem_ProcessFault+0x1d8>)
 8003abc:	f004 fb56 	bl	800816c <HAL_UART_Transmit_IT>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d0f5      	beq.n	8003ab2 <Dem_ProcessFault+0x17e>
			Rte_Runnable_Wdg_MainFunction();
 8003ac6:	f009 fbf3 	bl	800d2b0 <Rte_Runnable_Wdg_MainFunction>
		}
		Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&local);
 8003aca:	1c7b      	adds	r3, r7, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f009 fc69 	bl	800d3a4 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
	}
}
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000004 	.word	0x20000004
 8003ae0:	20000008 	.word	0x20000008
 8003ae4:	2000000c 	.word	0x2000000c
 8003ae8:	20000010 	.word	0x20000010
 8003aec:	20000014 	.word	0x20000014
 8003af0:	20000018 	.word	0x20000018
 8003af4:	2000001c 	.word	0x2000001c
 8003af8:	200006e9 	.word	0x200006e9
 8003afc:	200000e0 	.word	0x200000e0
 8003b00:	2000068c 	.word	0x2000068c
 8003b04:	200006d9 	.word	0x200006d9
 8003b08:	200000b2 	.word	0x200000b2
 8003b0c:	20000618 	.word	0x20000618

08003b10 <Dem_ReceiveFault>:
/***********************************************************************************
* Function: Dem_ReceiveFault													   *
* Description: Receives fault from application.							 		   *
************************************************************************************/
VOID Dem_ReceiveFault(uint8 faultValue)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	71fb      	strb	r3, [r7, #7]
	switch(faultValue)
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	2b99      	cmp	r3, #153	; 0x99
 8003b1e:	d070      	beq.n	8003c02 <Dem_ReceiveFault+0xf2>
 8003b20:	2b99      	cmp	r3, #153	; 0x99
 8003b22:	dc72      	bgt.n	8003c0a <Dem_ReceiveFault+0xfa>
 8003b24:	2b56      	cmp	r3, #86	; 0x56
 8003b26:	d068      	beq.n	8003bfa <Dem_ReceiveFault+0xea>
 8003b28:	2b56      	cmp	r3, #86	; 0x56
 8003b2a:	dc6e      	bgt.n	8003c0a <Dem_ReceiveFault+0xfa>
 8003b2c:	2b22      	cmp	r3, #34	; 0x22
 8003b2e:	dc49      	bgt.n	8003bc4 <Dem_ReceiveFault+0xb4>
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	db6a      	blt.n	8003c0a <Dem_ReceiveFault+0xfa>
 8003b34:	3b02      	subs	r3, #2
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d867      	bhi.n	8003c0a <Dem_ReceiveFault+0xfa>
 8003b3a:	a201      	add	r2, pc, #4	; (adr r2, 8003b40 <Dem_ReceiveFault+0x30>)
 8003b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b40:	08003bdb 	.word	0x08003bdb
 8003b44:	08003bcb 	.word	0x08003bcb
 8003b48:	08003c0b 	.word	0x08003c0b
 8003b4c:	08003c0b 	.word	0x08003c0b
 8003b50:	08003c0b 	.word	0x08003c0b
 8003b54:	08003c0b 	.word	0x08003c0b
 8003b58:	08003c0b 	.word	0x08003c0b
 8003b5c:	08003c0b 	.word	0x08003c0b
 8003b60:	08003c0b 	.word	0x08003c0b
 8003b64:	08003c0b 	.word	0x08003c0b
 8003b68:	08003c0b 	.word	0x08003c0b
 8003b6c:	08003c0b 	.word	0x08003c0b
 8003b70:	08003c0b 	.word	0x08003c0b
 8003b74:	08003c0b 	.word	0x08003c0b
 8003b78:	08003c0b 	.word	0x08003c0b
 8003b7c:	08003c0b 	.word	0x08003c0b
 8003b80:	08003be3 	.word	0x08003be3
 8003b84:	08003bd3 	.word	0x08003bd3
 8003b88:	08003c0b 	.word	0x08003c0b
 8003b8c:	08003c0b 	.word	0x08003c0b
 8003b90:	08003c0b 	.word	0x08003c0b
 8003b94:	08003c0b 	.word	0x08003c0b
 8003b98:	08003c0b 	.word	0x08003c0b
 8003b9c:	08003c0b 	.word	0x08003c0b
 8003ba0:	08003c0b 	.word	0x08003c0b
 8003ba4:	08003c0b 	.word	0x08003c0b
 8003ba8:	08003c0b 	.word	0x08003c0b
 8003bac:	08003c0b 	.word	0x08003c0b
 8003bb0:	08003c0b 	.word	0x08003c0b
 8003bb4:	08003c0b 	.word	0x08003c0b
 8003bb8:	08003c0b 	.word	0x08003c0b
 8003bbc:	08003c0b 	.word	0x08003c0b
 8003bc0:	08003beb 	.word	0x08003beb
 8003bc4:	2b35      	cmp	r3, #53	; 0x35
 8003bc6:	d014      	beq.n	8003bf2 <Dem_ReceiveFault+0xe2>
			break;
		case DTC_PERIPHERAL_ERROR:
			Dem_DtcArray[POSITION_DTC_PERIPHERAL_ERROR] = DTC_PERIPHERAL_ERROR;
			break;
		default:
			break;
 8003bc8:	e01f      	b.n	8003c0a <Dem_ReceiveFault+0xfa>
			Dem_DtcArray[POSITION_DTC_LIGHT_SENSOR_MALFUNCTION] = DTC_LIGHT_SENSOR_MALFUNCTION;
 8003bca:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <Dem_ReceiveFault+0x108>)
 8003bcc:	2203      	movs	r2, #3
 8003bce:	701a      	strb	r2, [r3, #0]
			break;
 8003bd0:	e01c      	b.n	8003c0c <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_VIBRATION_SENSOR_MALFUNCTION] = DTC_VIBRATION_SENSOR_MALFUNCTION;
 8003bd2:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <Dem_ReceiveFault+0x108>)
 8003bd4:	2213      	movs	r2, #19
 8003bd6:	705a      	strb	r2, [r3, #1]
			break;
 8003bd8:	e018      	b.n	8003c0c <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_REAR_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 8003bda:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <Dem_ReceiveFault+0x108>)
 8003bdc:	2202      	movs	r2, #2
 8003bde:	709a      	strb	r2, [r3, #2]
			break;
 8003be0:	e014      	b.n	8003c0c <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION] = DTC_FRONT_PARKING_DISTANCE_SENSOR_MALFUNCTION;
 8003be2:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <Dem_ReceiveFault+0x108>)
 8003be4:	2212      	movs	r2, #18
 8003be6:	70da      	strb	r2, [r3, #3]
			break;
 8003be8:	e010      	b.n	8003c0c <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_BLUETOOTH_MODULE_MALFUNCTION] = DTC_BLUETOOTH_MODULE_MALFUNCTION;
 8003bea:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <Dem_ReceiveFault+0x108>)
 8003bec:	2222      	movs	r2, #34	; 0x22
 8003bee:	711a      	strb	r2, [r3, #4]
			break;
 8003bf0:	e00c      	b.n	8003c0c <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_SOFTWARE_RESET] = DTC_SOFTWARE_RESET;
 8003bf2:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <Dem_ReceiveFault+0x108>)
 8003bf4:	2235      	movs	r2, #53	; 0x35
 8003bf6:	715a      	strb	r2, [r3, #5]
			break;
 8003bf8:	e008      	b.n	8003c0c <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_HARDWARE_RESET] = DTC_HARDWARE_RESET;
 8003bfa:	4b07      	ldr	r3, [pc, #28]	; (8003c18 <Dem_ReceiveFault+0x108>)
 8003bfc:	2256      	movs	r2, #86	; 0x56
 8003bfe:	719a      	strb	r2, [r3, #6]
			break;
 8003c00:	e004      	b.n	8003c0c <Dem_ReceiveFault+0xfc>
			Dem_DtcArray[POSITION_DTC_PERIPHERAL_ERROR] = DTC_PERIPHERAL_ERROR;
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <Dem_ReceiveFault+0x108>)
 8003c04:	2299      	movs	r2, #153	; 0x99
 8003c06:	71da      	strb	r2, [r3, #7]
			break;
 8003c08:	e000      	b.n	8003c0c <Dem_ReceiveFault+0xfc>
			break;
 8003c0a:	bf00      	nop
	}
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	2000068c 	.word	0x2000068c

08003c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c20:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <HAL_Init+0x40>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a0d      	ldr	r2, [pc, #52]	; (8003c5c <HAL_Init+0x40>)
 8003c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <HAL_Init+0x40>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <HAL_Init+0x40>)
 8003c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c38:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <HAL_Init+0x40>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a07      	ldr	r2, [pc, #28]	; (8003c5c <HAL_Init+0x40>)
 8003c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c44:	2003      	movs	r0, #3
 8003c46:	f000 fe47 	bl	80048d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c4a:	200f      	movs	r0, #15
 8003c4c:	f7ff fa54 	bl	80030f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c50:	f7ff fa08 	bl	8003064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40023c00 	.word	0x40023c00

08003c60 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8003c64:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <HAL_DeInit+0x54>)
 8003c66:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <HAL_DeInit+0x54>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8003c72:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <HAL_DeInit+0x54>)
 8003c74:	f04f 32ff 	mov.w	r2, #4294967295
 8003c78:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <HAL_DeInit+0x54>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8003c80:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <HAL_DeInit+0x54>)
 8003c82:	f04f 32ff 	mov.w	r2, #4294967295
 8003c86:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8003c88:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <HAL_DeInit+0x54>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8003c8e:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <HAL_DeInit+0x54>)
 8003c90:	f04f 32ff 	mov.w	r2, #4294967295
 8003c94:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8003c96:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <HAL_DeInit+0x54>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <HAL_DeInit+0x54>)
 8003c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca2:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_DeInit+0x54>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8003caa:	f000 f805 	bl	8003cb8 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800

08003cb8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_IncTick+0x20>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_IncTick+0x24>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	4a04      	ldr	r2, [pc, #16]	; (8003cec <HAL_IncTick+0x24>)
 8003cda:	6013      	str	r3, [r2, #0]
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	20000024 	.word	0x20000024
 8003cec:	20000694 	.word	0x20000694

08003cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8003cf4:	4b03      	ldr	r3, [pc, #12]	; (8003d04 <HAL_GetTick+0x14>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20000694 	.word	0x20000694

08003d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d10:	f7ff ffee 	bl	8003cf0 <HAL_GetTick>
 8003d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d005      	beq.n	8003d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d22:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <HAL_Delay+0x44>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d2e:	bf00      	nop
 8003d30:	f7ff ffde 	bl	8003cf0 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d8f7      	bhi.n	8003d30 <HAL_Delay+0x28>
  {
  }
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000024 	.word	0x20000024

08003d50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e04a      	b.n	8003dfc <HAL_ADC_Init+0xac>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d120      	bne.n	8003db0 <HAL_ADC_Init+0x60>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a24      	ldr	r2, [pc, #144]	; (8003e04 <HAL_ADC_Init+0xb4>)
 8003d72:	649a      	str	r2, [r3, #72]	; 0x48
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a24      	ldr	r2, [pc, #144]	; (8003e08 <HAL_ADC_Init+0xb8>)
 8003d78:	64da      	str	r2, [r3, #76]	; 0x4c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a23      	ldr	r2, [pc, #140]	; (8003e0c <HAL_ADC_Init+0xbc>)
 8003d7e:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a23      	ldr	r2, [pc, #140]	; (8003e10 <HAL_ADC_Init+0xc0>)
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a22      	ldr	r2, [pc, #136]	; (8003e14 <HAL_ADC_Init+0xc4>)
 8003d8a:	659a      	str	r2, [r3, #88]	; 0x58
    if (hadc->MspInitCallback == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d102      	bne.n	8003d9a <HAL_ADC_Init+0x4a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a20      	ldr	r2, [pc, #128]	; (8003e18 <HAL_ADC_Init+0xc8>)
 8003d98:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d118      	bne.n	8003dee <HAL_ADC_Init+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003dc4:	f023 0302 	bic.w	r3, r3, #2
 8003dc8:	f043 0202 	orr.w	r2, r3, #2
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fb0d 	bl	80043f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	f023 0303 	bic.w	r3, r3, #3
 8003de4:	f043 0201 	orr.w	r2, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	641a      	str	r2, [r3, #64]	; 0x40
 8003dec:	e001      	b.n	8003df2 <HAL_ADC_Init+0xa2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	08009171 	.word	0x08009171
 8003e08:	08004075 	.word	0x08004075
 8003e0c:	08004089 	.word	0x08004089
 8003e10:	080091ad 	.word	0x080091ad
 8003e14:	080046f5 	.word	0x080046f5
 8003e18:	08002781 	.word	0x08002781

08003e1c <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e02a      	b.n	8003e88 <HAL_ADC_DeInit+0x6c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f043 0202 	orr.w	r2, r3, #2
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0201 	bic.w	r2, r2, #1
 8003e4c:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d110      	bne.n	8003e7e <HAL_ADC_DeInit+0x62>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  if (hadc->MspDeInitCallback == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d102      	bne.n	8003e6a <HAL_ADC_DeInit+0x4e>
  {
    hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <HAL_ADC_DeInit+0x74>)
 8003e68:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	08002885 	.word	0x08002885

08003e94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_ADC_Start_DMA+0x1e>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e0ce      	b.n	8004050 <HAL_ADC_Start_DMA+0x1bc>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d018      	beq.n	8003efa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ed8:	4b5f      	ldr	r3, [pc, #380]	; (8004058 <HAL_ADC_Start_DMA+0x1c4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a5f      	ldr	r2, [pc, #380]	; (800405c <HAL_ADC_Start_DMA+0x1c8>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	0c9a      	lsrs	r2, r3, #18
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	4413      	add	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003eec:	e002      	b.n	8003ef4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f9      	bne.n	8003eee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f08:	d107      	bne.n	8003f1a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f18:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	f040 8086 	bne.w	8004036 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d007      	beq.n	8003f5c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f68:	d106      	bne.n	8003f78 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	f023 0206 	bic.w	r2, r3, #6
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	645a      	str	r2, [r3, #68]	; 0x44
 8003f76:	e002      	b.n	8003f7e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f86:	4b36      	ldr	r3, [pc, #216]	; (8004060 <HAL_ADC_Start_DMA+0x1cc>)
 8003f88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	4a35      	ldr	r2, [pc, #212]	; (8004064 <HAL_ADC_Start_DMA+0x1d0>)
 8003f90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	4a34      	ldr	r2, [pc, #208]	; (8004068 <HAL_ADC_Start_DMA+0x1d4>)
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	4a33      	ldr	r2, [pc, #204]	; (800406c <HAL_ADC_Start_DMA+0x1d8>)
 8003fa0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003faa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003fba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	334c      	adds	r3, #76	; 0x4c
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f000 fe5c 	bl	8004c98 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10f      	bne.n	800400c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d129      	bne.n	800404e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004008:	609a      	str	r2, [r3, #8]
 800400a:	e020      	b.n	800404e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a17      	ldr	r2, [pc, #92]	; (8004070 <HAL_ADC_Start_DMA+0x1dc>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d11b      	bne.n	800404e <HAL_ADC_Start_DMA+0x1ba>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d114      	bne.n	800404e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	e00b      	b.n	800404e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f043 0210 	orr.w	r2, r3, #16
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	f043 0201 	orr.w	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000000 	.word	0x20000000
 800405c:	431bde83 	.word	0x431bde83
 8004060:	40012300 	.word	0x40012300
 8004064:	080045e9 	.word	0x080045e9
 8004068:	080046a7 	.word	0x080046a7
 800406c:	080046c5 	.word	0x080046c5
 8004070:	40012000 	.word	0x40012000

08004074 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x1c>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e113      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x244>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b09      	cmp	r3, #9
 80040c6:	d925      	bls.n	8004114 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68d9      	ldr	r1, [r3, #12]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	4613      	mov	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4413      	add	r3, r2
 80040dc:	3b1e      	subs	r3, #30
 80040de:	2207      	movs	r2, #7
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	43da      	mvns	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	400a      	ands	r2, r1
 80040ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68d9      	ldr	r1, [r3, #12]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	4618      	mov	r0, r3
 8004100:	4603      	mov	r3, r0
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	4403      	add	r3, r0
 8004106:	3b1e      	subs	r3, #30
 8004108:	409a      	lsls	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	60da      	str	r2, [r3, #12]
 8004112:	e022      	b.n	800415a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6919      	ldr	r1, [r3, #16]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	b29b      	uxth	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	4613      	mov	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	4413      	add	r3, r2
 8004128:	2207      	movs	r2, #7
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43da      	mvns	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	400a      	ands	r2, r1
 8004136:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6919      	ldr	r1, [r3, #16]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	4618      	mov	r0, r3
 800414a:	4603      	mov	r3, r0
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	4403      	add	r3, r0
 8004150:	409a      	lsls	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b06      	cmp	r3, #6
 8004160:	d824      	bhi.n	80041ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	3b05      	subs	r3, #5
 8004174:	221f      	movs	r2, #31
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43da      	mvns	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	400a      	ands	r2, r1
 8004182:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	4618      	mov	r0, r3
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	3b05      	subs	r3, #5
 800419e:	fa00 f203 	lsl.w	r2, r0, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	635a      	str	r2, [r3, #52]	; 0x34
 80041aa:	e04c      	b.n	8004246 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b0c      	cmp	r3, #12
 80041b2:	d824      	bhi.n	80041fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	3b23      	subs	r3, #35	; 0x23
 80041c6:	221f      	movs	r2, #31
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43da      	mvns	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	400a      	ands	r2, r1
 80041d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	4618      	mov	r0, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	3b23      	subs	r3, #35	; 0x23
 80041f0:	fa00 f203 	lsl.w	r2, r0, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	631a      	str	r2, [r3, #48]	; 0x30
 80041fc:	e023      	b.n	8004246 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	3b41      	subs	r3, #65	; 0x41
 8004210:	221f      	movs	r2, #31
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43da      	mvns	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	400a      	ands	r2, r1
 800421e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	b29b      	uxth	r3, r3
 800422c:	4618      	mov	r0, r3
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	3b41      	subs	r3, #65	; 0x41
 800423a:	fa00 f203 	lsl.w	r2, r0, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004246:	4b29      	ldr	r3, [pc, #164]	; (80042ec <HAL_ADC_ConfigChannel+0x250>)
 8004248:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a28      	ldr	r2, [pc, #160]	; (80042f0 <HAL_ADC_ConfigChannel+0x254>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d10f      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x1d8>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b12      	cmp	r3, #18
 800425a:	d10b      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1d      	ldr	r2, [pc, #116]	; (80042f0 <HAL_ADC_ConfigChannel+0x254>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d12b      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x23a>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1c      	ldr	r2, [pc, #112]	; (80042f4 <HAL_ADC_ConfigChannel+0x258>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <HAL_ADC_ConfigChannel+0x1f4>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b11      	cmp	r3, #17
 800428e:	d122      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a11      	ldr	r2, [pc, #68]	; (80042f4 <HAL_ADC_ConfigChannel+0x258>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d111      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042b2:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <HAL_ADC_ConfigChannel+0x25c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a11      	ldr	r2, [pc, #68]	; (80042fc <HAL_ADC_ConfigChannel+0x260>)
 80042b8:	fba2 2303 	umull	r2, r3, r2, r3
 80042bc:	0c9a      	lsrs	r2, r3, #18
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042c8:	e002      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f9      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	40012300 	.word	0x40012300
 80042f0:	40012000 	.word	0x40012000
 80042f4:	10000012 	.word	0x10000012
 80042f8:	20000000 	.word	0x20000000
 80042fc:	431bde83 	.word	0x431bde83

08004300 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_ADC_AnalogWDGConfig+0x18>
 8004314:	2302      	movs	r3, #2
 8004316:	e04d      	b.n	80043b4 <HAL_ADC_AnalogWDGConfig+0xb4>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	7c1b      	ldrb	r3, [r3, #16]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d108      	bne.n	800433a <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004336:	605a      	str	r2, [r3, #4]
 8004338:	e007      	b.n	800434a <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004348:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800435c:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	6852      	ldr	r2, [r2, #4]
 8004378:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	6892      	ldr	r2, [r2, #8]
 8004382:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 021f 	bic.w	r2, r2, #31
 8004392:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	4619      	mov	r1, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_ADC_GetError>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043f8:	4b79      	ldr	r3, [pc, #484]	; (80045e0 <ADC_Init+0x1f0>)
 80043fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	431a      	orrs	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004424:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6859      	ldr	r1, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	021a      	lsls	r2, r3, #8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6859      	ldr	r1, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800446a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6899      	ldr	r1, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	4a58      	ldr	r2, [pc, #352]	; (80045e4 <ADC_Init+0x1f4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d022      	beq.n	80044ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004496:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6899      	ldr	r1, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6899      	ldr	r1, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	609a      	str	r2, [r3, #8]
 80044cc:	e00f      	b.n	80044ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0202 	bic.w	r2, r2, #2
 80044fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6899      	ldr	r1, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	7e1b      	ldrb	r3, [r3, #24]
 8004508:	005a      	lsls	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d01b      	beq.n	8004554 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800452a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800453a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6859      	ldr	r1, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	3b01      	subs	r3, #1
 8004548:	035a      	lsls	r2, r3, #13
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	e007      	b.n	8004564 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004562:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004572:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	3b01      	subs	r3, #1
 8004580:	051a      	lsls	r2, r3, #20
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6899      	ldr	r1, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045a6:	025a      	lsls	r2, r3, #9
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6899      	ldr	r1, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	029a      	lsls	r2, r3, #10
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	609a      	str	r2, [r3, #8]
}
 80045d4:	bf00      	nop
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	40012300 	.word	0x40012300
 80045e4:	0f000001 	.word	0x0f000001

080045e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d13d      	bne.n	800467e <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d12b      	bne.n	8004674 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004620:	2b00      	cmp	r3, #0
 8004622:	d127      	bne.n	8004674 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800462e:	2b00      	cmp	r3, #0
 8004630:	d006      	beq.n	8004640 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800463c:	2b00      	cmp	r3, #0
 800463e:	d119      	bne.n	8004674 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0220 	bic.w	r2, r2, #32
 800464e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d105      	bne.n	8004674 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	f043 0201 	orr.w	r2, r3, #1
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	4798      	blx	r3
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800467c:	e00f      	b.n	800469e <ADC_DMAConvCplt+0xb6>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b00      	cmp	r3, #0
 8004688:	d004      	beq.n	8004694 <ADC_DMAConvCplt+0xac>
      hadc->ErrorCallback(hadc);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	4798      	blx	r3
}
 8004692:	e004      	b.n	800469e <ADC_DMAConvCplt+0xb6>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	4798      	blx	r3
}
 800469e:	bf00      	nop
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046bc:	bf00      	nop
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2240      	movs	r2, #64	; 0x40
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046dc:	f043 0204 	orr.w	r2, r3, #4
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046ec:	bf00      	nop
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <__NVIC_SetPriorityGrouping+0x44>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004724:	4013      	ands	r3, r2
 8004726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800473a:	4a04      	ldr	r2, [pc, #16]	; (800474c <__NVIC_SetPriorityGrouping+0x44>)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	60d3      	str	r3, [r2, #12]
}
 8004740:	bf00      	nop
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	e000ed00 	.word	0xe000ed00

08004750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004754:	4b04      	ldr	r3, [pc, #16]	; (8004768 <__NVIC_GetPriorityGrouping+0x18>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	0a1b      	lsrs	r3, r3, #8
 800475a:	f003 0307 	and.w	r3, r3, #7
}
 800475e:	4618      	mov	r0, r3
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	e000ed00 	.word	0xe000ed00

0800476c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477a:	2b00      	cmp	r3, #0
 800477c:	db0b      	blt.n	8004796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	f003 021f 	and.w	r2, r3, #31
 8004784:	4907      	ldr	r1, [pc, #28]	; (80047a4 <__NVIC_EnableIRQ+0x38>)
 8004786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	2001      	movs	r0, #1
 800478e:	fa00 f202 	lsl.w	r2, r0, r2
 8004792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	e000e100 	.word	0xe000e100

080047a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	4603      	mov	r3, r0
 80047b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	db12      	blt.n	80047e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	f003 021f 	and.w	r2, r3, #31
 80047c0:	490a      	ldr	r1, [pc, #40]	; (80047ec <__NVIC_DisableIRQ+0x44>)
 80047c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	2001      	movs	r0, #1
 80047ca:	fa00 f202 	lsl.w	r2, r0, r2
 80047ce:	3320      	adds	r3, #32
 80047d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80047d4:	f3bf 8f4f 	dsb	sy
}
 80047d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80047da:	f3bf 8f6f 	isb	sy
}
 80047de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	e000e100 	.word	0xe000e100

080047f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	6039      	str	r1, [r7, #0]
 80047fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004800:	2b00      	cmp	r3, #0
 8004802:	db0a      	blt.n	800481a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	b2da      	uxtb	r2, r3
 8004808:	490c      	ldr	r1, [pc, #48]	; (800483c <__NVIC_SetPriority+0x4c>)
 800480a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480e:	0112      	lsls	r2, r2, #4
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	440b      	add	r3, r1
 8004814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004818:	e00a      	b.n	8004830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	b2da      	uxtb	r2, r3
 800481e:	4908      	ldr	r1, [pc, #32]	; (8004840 <__NVIC_SetPriority+0x50>)
 8004820:	79fb      	ldrb	r3, [r7, #7]
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	3b04      	subs	r3, #4
 8004828:	0112      	lsls	r2, r2, #4
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	440b      	add	r3, r1
 800482e:	761a      	strb	r2, [r3, #24]
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	e000e100 	.word	0xe000e100
 8004840:	e000ed00 	.word	0xe000ed00

08004844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004844:	b480      	push	{r7}
 8004846:	b089      	sub	sp, #36	; 0x24
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f1c3 0307 	rsb	r3, r3, #7
 800485e:	2b04      	cmp	r3, #4
 8004860:	bf28      	it	cs
 8004862:	2304      	movcs	r3, #4
 8004864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	3304      	adds	r3, #4
 800486a:	2b06      	cmp	r3, #6
 800486c:	d902      	bls.n	8004874 <NVIC_EncodePriority+0x30>
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	3b03      	subs	r3, #3
 8004872:	e000      	b.n	8004876 <NVIC_EncodePriority+0x32>
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004878:	f04f 32ff 	mov.w	r2, #4294967295
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	43da      	mvns	r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	401a      	ands	r2, r3
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800488c:	f04f 31ff 	mov.w	r1, #4294967295
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	fa01 f303 	lsl.w	r3, r1, r3
 8004896:	43d9      	mvns	r1, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800489c:	4313      	orrs	r3, r2
         );
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3724      	adds	r7, #36	; 0x24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80048b0:	f3bf 8f4f 	dsb	sy
}
 80048b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80048b6:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <__NVIC_SystemReset+0x24>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80048be:	4904      	ldr	r1, [pc, #16]	; (80048d0 <__NVIC_SystemReset+0x24>)
 80048c0:	4b04      	ldr	r3, [pc, #16]	; (80048d4 <__NVIC_SystemReset+0x28>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80048c6:	f3bf 8f4f 	dsb	sy
}
 80048ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80048cc:	bf00      	nop
 80048ce:	e7fd      	b.n	80048cc <__NVIC_SystemReset+0x20>
 80048d0:	e000ed00 	.word	0xe000ed00
 80048d4:	05fa0004 	.word	0x05fa0004

080048d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff ff11 	bl	8004708 <__NVIC_SetPriorityGrouping>
}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b086      	sub	sp, #24
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	4603      	mov	r3, r0
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607a      	str	r2, [r7, #4]
 80048fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004900:	f7ff ff26 	bl	8004750 <__NVIC_GetPriorityGrouping>
 8004904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	6978      	ldr	r0, [r7, #20]
 800490c:	f7ff ff9a 	bl	8004844 <NVIC_EncodePriority>
 8004910:	4602      	mov	r2, r0
 8004912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004916:	4611      	mov	r1, r2
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff ff69 	bl	80047f0 <__NVIC_SetPriority>
}
 800491e:	bf00      	nop
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	4603      	mov	r3, r0
 800492e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff ff19 	bl	800476c <__NVIC_EnableIRQ>
}
 800493a:	bf00      	nop
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b082      	sub	sp, #8
 8004946:	af00      	add	r7, sp, #0
 8004948:	4603      	mov	r3, r0
 800494a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800494c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff ff29 	bl	80047a8 <__NVIC_DisableIRQ>
}
 8004956:	bf00      	nop
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004962:	f7ff ffa3 	bl	80048ac <__NVIC_SystemReset>

08004966 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e00e      	b.n	8004996 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	795b      	ldrb	r3, [r3, #5]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d105      	bne.n	800498e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7fd ff9d 	bl	80028c8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b082      	sub	sp, #8
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e022      	b.n	80049f6 <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	795b      	ldrb	r3, [r3, #5]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d101      	bne.n	80049be <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 80049ba:	2302      	movs	r3, #2
 80049bc:	e01b      	b.n	80049f6 <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2202      	movs	r2, #2
 80049c2:	715a      	strb	r2, [r3, #5]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	791b      	ldrb	r3, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2200      	movs	r2, #0
 80049e0:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7fd ff92 	bl	800290c <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	715a      	strb	r2, [r3, #5]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b087      	sub	sp, #28
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2202      	movs	r2, #2
 8004a12:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8004a24:	2300      	movs	r3, #0
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	e00a      	b.n	8004a40 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	441a      	add	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d3f0      	bcc.n	8004a2a <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8004a56:	693b      	ldr	r3, [r7, #16]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_CRC_GetState>:
  * @brief  Return the CRC handle state.
  * @param  hcrc CRC handle
  * @retval HAL state
  */
HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Return CRC handle state */
  return hcrc->State;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	795b      	ldrb	r3, [r3, #5]
 8004a70:	b2db      	uxtb	r3, r3
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a8c:	f7ff f930 	bl	8003cf0 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e099      	b.n	8004bd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004abc:	e00f      	b.n	8004ade <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004abe:	f7ff f917 	bl	8003cf0 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b05      	cmp	r3, #5
 8004aca:	d908      	bls.n	8004ade <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e078      	b.n	8004bd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e8      	bne.n	8004abe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	4b38      	ldr	r3, [pc, #224]	; (8004bd8 <HAL_DMA_Init+0x158>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d107      	bne.n	8004b48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	4313      	orrs	r3, r2
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f023 0307 	bic.w	r3, r3, #7
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d117      	bne.n	8004ba2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00e      	beq.n	8004ba2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fb5f 	bl	8005248 <DMA_CheckFifoParam>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2240      	movs	r2, #64	; 0x40
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e016      	b.n	8004bd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fb16 	bl	80051dc <DMA_CalcBaseAndBitshift>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb8:	223f      	movs	r2, #63	; 0x3f
 8004bba:	409a      	lsls	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	f010803f 	.word	0xf010803f

08004bdc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e050      	b.n	8004c90 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d101      	bne.n	8004bfe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e048      	b.n	8004c90 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2200      	movs	r2, #0
 8004c24:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2200      	movs	r2, #0
 8004c34:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2221      	movs	r2, #33	; 0x21
 8004c3c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 facc 	bl	80051dc <DMA_CalcBaseAndBitshift>
 8004c44:	4603      	mov	r3, r0
 8004c46:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c70:	223f      	movs	r2, #63	; 0x3f
 8004c72:	409a      	lsls	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_DMA_Start_IT+0x26>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e040      	b.n	8004d40 <HAL_DMA_Start_IT+0xa8>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d12f      	bne.n	8004d32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	68b9      	ldr	r1, [r7, #8]
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 fa4a 	bl	8005180 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf0:	223f      	movs	r2, #63	; 0x3f
 8004cf2:	409a      	lsls	r2, r3
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0216 	orr.w	r2, r2, #22
 8004d06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d007      	beq.n	8004d20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0208 	orr.w	r2, r2, #8
 8004d1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	e005      	b.n	8004d3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004d56:	f7fe ffcb 	bl	8003cf0 <HAL_GetTick>
 8004d5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d008      	beq.n	8004d7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2280      	movs	r2, #128	; 0x80
 8004d6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e052      	b.n	8004e20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0216 	bic.w	r2, r2, #22
 8004d88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695a      	ldr	r2, [r3, #20]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d103      	bne.n	8004daa <HAL_DMA_Abort+0x62>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d007      	beq.n	8004dba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0208 	bic.w	r2, r2, #8
 8004db8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0201 	bic.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dca:	e013      	b.n	8004df4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dcc:	f7fe ff90 	bl	8003cf0 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b05      	cmp	r3, #5
 8004dd8:	d90c      	bls.n	8004df4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2203      	movs	r2, #3
 8004de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e015      	b.n	8004e20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1e4      	bne.n	8004dcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e06:	223f      	movs	r2, #63	; 0x3f
 8004e08:	409a      	lsls	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d004      	beq.n	8004e46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2280      	movs	r2, #128	; 0x80
 8004e40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e00c      	b.n	8004e60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2205      	movs	r2, #5
 8004e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e78:	4b8e      	ldr	r3, [pc, #568]	; (80050b4 <HAL_DMA_IRQHandler+0x248>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a8e      	ldr	r2, [pc, #568]	; (80050b8 <HAL_DMA_IRQHandler+0x24c>)
 8004e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e82:	0a9b      	lsrs	r3, r3, #10
 8004e84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e96:	2208      	movs	r2, #8
 8004e98:	409a      	lsls	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01a      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d013      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0204 	bic.w	r2, r2, #4
 8004ebe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec4:	2208      	movs	r2, #8
 8004ec6:	409a      	lsls	r2, r3
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed0:	f043 0201 	orr.w	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004edc:	2201      	movs	r2, #1
 8004ede:	409a      	lsls	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d012      	beq.n	8004f0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00b      	beq.n	8004f0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efa:	2201      	movs	r2, #1
 8004efc:	409a      	lsls	r2, r3
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f06:	f043 0202 	orr.w	r2, r3, #2
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f12:	2204      	movs	r2, #4
 8004f14:	409a      	lsls	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d012      	beq.n	8004f44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00b      	beq.n	8004f44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f30:	2204      	movs	r2, #4
 8004f32:	409a      	lsls	r2, r3
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3c:	f043 0204 	orr.w	r2, r3, #4
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f48:	2210      	movs	r2, #16
 8004f4a:	409a      	lsls	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d043      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d03c      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f66:	2210      	movs	r2, #16
 8004f68:	409a      	lsls	r2, r3
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d018      	beq.n	8004fae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d108      	bne.n	8004f9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d024      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	4798      	blx	r3
 8004f9a:	e01f      	b.n	8004fdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01b      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	4798      	blx	r3
 8004fac:	e016      	b.n	8004fdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d107      	bne.n	8004fcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0208 	bic.w	r2, r2, #8
 8004fca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	409a      	lsls	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 808f 	beq.w	800510c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0310 	and.w	r3, r3, #16
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8087 	beq.w	800510c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005002:	2220      	movs	r2, #32
 8005004:	409a      	lsls	r2, r3
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b05      	cmp	r3, #5
 8005014:	d136      	bne.n	8005084 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0216 	bic.w	r2, r2, #22
 8005024:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695a      	ldr	r2, [r3, #20]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005034:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d103      	bne.n	8005046 <HAL_DMA_IRQHandler+0x1da>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005042:	2b00      	cmp	r3, #0
 8005044:	d007      	beq.n	8005056 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0208 	bic.w	r2, r2, #8
 8005054:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505a:	223f      	movs	r2, #63	; 0x3f
 800505c:	409a      	lsls	r2, r3
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005076:	2b00      	cmp	r3, #0
 8005078:	d07e      	beq.n	8005178 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	4798      	blx	r3
        }
        return;
 8005082:	e079      	b.n	8005178 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d01d      	beq.n	80050ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10d      	bne.n	80050bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d031      	beq.n	800510c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	4798      	blx	r3
 80050b0:	e02c      	b.n	800510c <HAL_DMA_IRQHandler+0x2a0>
 80050b2:	bf00      	nop
 80050b4:	20000000 	.word	0x20000000
 80050b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d023      	beq.n	800510c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	4798      	blx	r3
 80050cc:	e01e      	b.n	800510c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10f      	bne.n	80050fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0210 	bic.w	r2, r2, #16
 80050ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005110:	2b00      	cmp	r3, #0
 8005112:	d032      	beq.n	800517a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d022      	beq.n	8005166 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2205      	movs	r2, #5
 8005124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0201 	bic.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	3301      	adds	r3, #1
 800513c:	60bb      	str	r3, [r7, #8]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	429a      	cmp	r2, r3
 8005142:	d307      	bcc.n	8005154 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1f2      	bne.n	8005138 <HAL_DMA_IRQHandler+0x2cc>
 8005152:	e000      	b.n	8005156 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005154:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	4798      	blx	r3
 8005176:	e000      	b.n	800517a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005178:	bf00      	nop
    }
  }
}
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800519c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	2b40      	cmp	r3, #64	; 0x40
 80051ac:	d108      	bne.n	80051c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80051be:	e007      	b.n	80051d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	60da      	str	r2, [r3, #12]
}
 80051d0:	bf00      	nop
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	3b10      	subs	r3, #16
 80051ec:	4a14      	ldr	r2, [pc, #80]	; (8005240 <DMA_CalcBaseAndBitshift+0x64>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	091b      	lsrs	r3, r3, #4
 80051f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051f6:	4a13      	ldr	r2, [pc, #76]	; (8005244 <DMA_CalcBaseAndBitshift+0x68>)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b03      	cmp	r3, #3
 8005208:	d909      	bls.n	800521e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005212:	f023 0303 	bic.w	r3, r3, #3
 8005216:	1d1a      	adds	r2, r3, #4
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	659a      	str	r2, [r3, #88]	; 0x58
 800521c:	e007      	b.n	800522e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005226:	f023 0303 	bic.w	r3, r3, #3
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	aaaaaaab 	.word	0xaaaaaaab
 8005244:	0800ead0 	.word	0x0800ead0

08005248 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005250:	2300      	movs	r3, #0
 8005252:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d11f      	bne.n	80052a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b03      	cmp	r3, #3
 8005266:	d856      	bhi.n	8005316 <DMA_CheckFifoParam+0xce>
 8005268:	a201      	add	r2, pc, #4	; (adr r2, 8005270 <DMA_CheckFifoParam+0x28>)
 800526a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526e:	bf00      	nop
 8005270:	08005281 	.word	0x08005281
 8005274:	08005293 	.word	0x08005293
 8005278:	08005281 	.word	0x08005281
 800527c:	08005317 	.word	0x08005317
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d046      	beq.n	800531a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005290:	e043      	b.n	800531a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005296:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800529a:	d140      	bne.n	800531e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052a0:	e03d      	b.n	800531e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052aa:	d121      	bne.n	80052f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	d837      	bhi.n	8005322 <DMA_CheckFifoParam+0xda>
 80052b2:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <DMA_CheckFifoParam+0x70>)
 80052b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b8:	080052c9 	.word	0x080052c9
 80052bc:	080052cf 	.word	0x080052cf
 80052c0:	080052c9 	.word	0x080052c9
 80052c4:	080052e1 	.word	0x080052e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	73fb      	strb	r3, [r7, #15]
      break;
 80052cc:	e030      	b.n	8005330 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d025      	beq.n	8005326 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052de:	e022      	b.n	8005326 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052e8:	d11f      	bne.n	800532a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80052ee:	e01c      	b.n	800532a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d903      	bls.n	80052fe <DMA_CheckFifoParam+0xb6>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d003      	beq.n	8005304 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80052fc:	e018      	b.n	8005330 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	73fb      	strb	r3, [r7, #15]
      break;
 8005302:	e015      	b.n	8005330 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00e      	beq.n	800532e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
      break;
 8005314:	e00b      	b.n	800532e <DMA_CheckFifoParam+0xe6>
      break;
 8005316:	bf00      	nop
 8005318:	e00a      	b.n	8005330 <DMA_CheckFifoParam+0xe8>
      break;
 800531a:	bf00      	nop
 800531c:	e008      	b.n	8005330 <DMA_CheckFifoParam+0xe8>
      break;
 800531e:	bf00      	nop
 8005320:	e006      	b.n	8005330 <DMA_CheckFifoParam+0xe8>
      break;
 8005322:	bf00      	nop
 8005324:	e004      	b.n	8005330 <DMA_CheckFifoParam+0xe8>
      break;
 8005326:	bf00      	nop
 8005328:	e002      	b.n	8005330 <DMA_CheckFifoParam+0xe8>
      break;   
 800532a:	bf00      	nop
 800532c:	e000      	b.n	8005330 <DMA_CheckFifoParam+0xe8>
      break;
 800532e:	bf00      	nop
    }
  } 
  
  return status; 
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop

08005340 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800534a:	4b4b      	ldr	r3, [pc, #300]	; (8005478 <HAL_FLASH_IRQHandler+0x138>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d020      	beq.n	8005398 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8005356:	4b49      	ldr	r3, [pc, #292]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	d107      	bne.n	8005370 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8005360:	4b46      	ldr	r3, [pc, #280]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8005366:	4b45      	ldr	r3, [pc, #276]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 8005368:	f04f 32ff 	mov.w	r2, #4294967295
 800536c:	60da      	str	r2, [r3, #12]
 800536e:	e00b      	b.n	8005388 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8005370:	4b42      	ldr	r3, [pc, #264]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d103      	bne.n	8005382 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800537a:	4b40      	ldr	r3, [pc, #256]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	607b      	str	r3, [r7, #4]
 8005380:	e002      	b.n	8005388 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8005382:	4b3e      	ldr	r3, [pc, #248]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8005388:	f000 f88e 	bl	80054a8 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f881 	bl	8005494 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005392:	4b3a      	ldr	r3, [pc, #232]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005398:	4b37      	ldr	r3, [pc, #220]	; (8005478 <HAL_FLASH_IRQHandler+0x138>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d04a      	beq.n	800543a <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80053a4:	4b34      	ldr	r3, [pc, #208]	; (8005478 <HAL_FLASH_IRQHandler+0x138>)
 80053a6:	2201      	movs	r2, #1
 80053a8:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80053aa:	4b34      	ldr	r3, [pc, #208]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d12d      	bne.n	8005410 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 80053b4:	4b31      	ldr	r3, [pc, #196]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	4a30      	ldr	r2, [pc, #192]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 80053bc:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 80053be:	4b2f      	ldr	r3, [pc, #188]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d015      	beq.n	80053f2 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 80053c6:	4b2d      	ldr	r3, [pc, #180]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f857 	bl	8005480 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 80053d2:	4b2a      	ldr	r3, [pc, #168]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	3301      	adds	r3, #1
 80053d8:	4a28      	ldr	r2, [pc, #160]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 80053da:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 80053dc:	4b27      	ldr	r3, [pc, #156]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 80053e2:	4b26      	ldr	r3, [pc, #152]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 80053e4:	7a1b      	ldrb	r3, [r3, #8]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	4619      	mov	r1, r3
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f8c2 	bl	8005574 <FLASH_Erase_Sector>
 80053f0:	e023      	b.n	800543a <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 80053f2:	f04f 33ff 	mov.w	r3, #4294967295
 80053f6:	607b      	str	r3, [r7, #4]
 80053f8:	4a20      	ldr	r2, [pc, #128]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80053fe:	4b1f      	ldr	r3, [pc, #124]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 8005400:	2200      	movs	r2, #0
 8005402:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8005404:	f000 f8fe 	bl	8005604 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f839 	bl	8005480 <HAL_FLASH_EndOfOperationCallback>
 800540e:	e014      	b.n	800543a <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8005410:	4b1a      	ldr	r3, [pc, #104]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d107      	bne.n	800542a <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800541a:	f000 f8f3 	bl	8005604 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800541e:	4b17      	ldr	r3, [pc, #92]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 f82c 	bl	8005480 <HAL_FLASH_EndOfOperationCallback>
 8005428:	e004      	b.n	8005434 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800542a:	4b14      	ldr	r3, [pc, #80]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 f826 	bl	8005480 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005434:	4b11      	ldr	r3, [pc, #68]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800543a:	4b10      	ldr	r3, [pc, #64]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d114      	bne.n	800546e <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8005444:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <HAL_FLASH_IRQHandler+0x138>)
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	4a0b      	ldr	r2, [pc, #44]	; (8005478 <HAL_FLASH_IRQHandler+0x138>)
 800544a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800544e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8005450:	4b09      	ldr	r3, [pc, #36]	; (8005478 <HAL_FLASH_IRQHandler+0x138>)
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	4a08      	ldr	r2, [pc, #32]	; (8005478 <HAL_FLASH_IRQHandler+0x138>)
 8005456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800545a:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800545c:	4b06      	ldr	r3, [pc, #24]	; (8005478 <HAL_FLASH_IRQHandler+0x138>)
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	4a05      	ldr	r2, [pc, #20]	; (8005478 <HAL_FLASH_IRQHandler+0x138>)
 8005462:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005466:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005468:	4b04      	ldr	r3, [pc, #16]	; (800547c <HAL_FLASH_IRQHandler+0x13c>)
 800546a:	2200      	movs	r2, #0
 800546c:	761a      	strb	r2, [r3, #24]
  }
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40023c00 	.word	0x40023c00
 800547c:	20000698 	.word	0x20000698

08005480 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80054ac:	4b2f      	ldr	r3, [pc, #188]	; (800556c <FLASH_SetErrorCode+0xc4>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80054b8:	4b2d      	ldr	r3, [pc, #180]	; (8005570 <FLASH_SetErrorCode+0xc8>)
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f043 0310 	orr.w	r3, r3, #16
 80054c0:	4a2b      	ldr	r2, [pc, #172]	; (8005570 <FLASH_SetErrorCode+0xc8>)
 80054c2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80054c4:	4b29      	ldr	r3, [pc, #164]	; (800556c <FLASH_SetErrorCode+0xc4>)
 80054c6:	2210      	movs	r2, #16
 80054c8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80054ca:	4b28      	ldr	r3, [pc, #160]	; (800556c <FLASH_SetErrorCode+0xc4>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d008      	beq.n	80054e8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80054d6:	4b26      	ldr	r3, [pc, #152]	; (8005570 <FLASH_SetErrorCode+0xc8>)
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f043 0308 	orr.w	r3, r3, #8
 80054de:	4a24      	ldr	r2, [pc, #144]	; (8005570 <FLASH_SetErrorCode+0xc8>)
 80054e0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80054e2:	4b22      	ldr	r3, [pc, #136]	; (800556c <FLASH_SetErrorCode+0xc4>)
 80054e4:	2220      	movs	r2, #32
 80054e6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80054e8:	4b20      	ldr	r3, [pc, #128]	; (800556c <FLASH_SetErrorCode+0xc4>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d008      	beq.n	8005506 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80054f4:	4b1e      	ldr	r3, [pc, #120]	; (8005570 <FLASH_SetErrorCode+0xc8>)
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f043 0304 	orr.w	r3, r3, #4
 80054fc:	4a1c      	ldr	r2, [pc, #112]	; (8005570 <FLASH_SetErrorCode+0xc8>)
 80054fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005500:	4b1a      	ldr	r3, [pc, #104]	; (800556c <FLASH_SetErrorCode+0xc4>)
 8005502:	2240      	movs	r2, #64	; 0x40
 8005504:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005506:	4b19      	ldr	r3, [pc, #100]	; (800556c <FLASH_SetErrorCode+0xc4>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550e:	2b00      	cmp	r3, #0
 8005510:	d008      	beq.n	8005524 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005512:	4b17      	ldr	r3, [pc, #92]	; (8005570 <FLASH_SetErrorCode+0xc8>)
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f043 0302 	orr.w	r3, r3, #2
 800551a:	4a15      	ldr	r2, [pc, #84]	; (8005570 <FLASH_SetErrorCode+0xc8>)
 800551c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800551e:	4b13      	ldr	r3, [pc, #76]	; (800556c <FLASH_SetErrorCode+0xc4>)
 8005520:	2280      	movs	r2, #128	; 0x80
 8005522:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005524:	4b11      	ldr	r3, [pc, #68]	; (800556c <FLASH_SetErrorCode+0xc4>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d009      	beq.n	8005544 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005530:	4b0f      	ldr	r3, [pc, #60]	; (8005570 <FLASH_SetErrorCode+0xc8>)
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	4a0d      	ldr	r2, [pc, #52]	; (8005570 <FLASH_SetErrorCode+0xc8>)
 800553a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800553c:	4b0b      	ldr	r3, [pc, #44]	; (800556c <FLASH_SetErrorCode+0xc4>)
 800553e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005542:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005544:	4b09      	ldr	r3, [pc, #36]	; (800556c <FLASH_SetErrorCode+0xc4>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d008      	beq.n	8005562 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <FLASH_SetErrorCode+0xc8>)
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	f043 0320 	orr.w	r3, r3, #32
 8005558:	4a05      	ldr	r2, [pc, #20]	; (8005570 <FLASH_SetErrorCode+0xc8>)
 800555a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800555c:	4b03      	ldr	r3, [pc, #12]	; (800556c <FLASH_SetErrorCode+0xc4>)
 800555e:	2202      	movs	r2, #2
 8005560:	60da      	str	r2, [r3, #12]
  }
}
 8005562:	bf00      	nop
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	40023c00 	.word	0x40023c00
 8005570:	20000698 	.word	0x20000698

08005574 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d102      	bne.n	8005590 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	e010      	b.n	80055b2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d103      	bne.n	800559e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	e009      	b.n	80055b2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d103      	bne.n	80055ac <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80055a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	e002      	b.n	80055b2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80055ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80055b0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80055b2:	4b13      	ldr	r3, [pc, #76]	; (8005600 <FLASH_Erase_Sector+0x8c>)
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	4a12      	ldr	r2, [pc, #72]	; (8005600 <FLASH_Erase_Sector+0x8c>)
 80055b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80055be:	4b10      	ldr	r3, [pc, #64]	; (8005600 <FLASH_Erase_Sector+0x8c>)
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	490f      	ldr	r1, [pc, #60]	; (8005600 <FLASH_Erase_Sector+0x8c>)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80055ca:	4b0d      	ldr	r3, [pc, #52]	; (8005600 <FLASH_Erase_Sector+0x8c>)
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	4a0c      	ldr	r2, [pc, #48]	; (8005600 <FLASH_Erase_Sector+0x8c>)
 80055d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80055d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80055d6:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <FLASH_Erase_Sector+0x8c>)
 80055d8:	691a      	ldr	r2, [r3, #16]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	4313      	orrs	r3, r2
 80055e0:	4a07      	ldr	r2, [pc, #28]	; (8005600 <FLASH_Erase_Sector+0x8c>)
 80055e2:	f043 0302 	orr.w	r3, r3, #2
 80055e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80055e8:	4b05      	ldr	r3, [pc, #20]	; (8005600 <FLASH_Erase_Sector+0x8c>)
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	4a04      	ldr	r2, [pc, #16]	; (8005600 <FLASH_Erase_Sector+0x8c>)
 80055ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f2:	6113      	str	r3, [r2, #16]
}
 80055f4:	bf00      	nop
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	40023c00 	.word	0x40023c00

08005604 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005608:	4b20      	ldr	r3, [pc, #128]	; (800568c <FLASH_FlushCaches+0x88>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005610:	2b00      	cmp	r3, #0
 8005612:	d017      	beq.n	8005644 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005614:	4b1d      	ldr	r3, [pc, #116]	; (800568c <FLASH_FlushCaches+0x88>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a1c      	ldr	r2, [pc, #112]	; (800568c <FLASH_FlushCaches+0x88>)
 800561a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800561e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005620:	4b1a      	ldr	r3, [pc, #104]	; (800568c <FLASH_FlushCaches+0x88>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a19      	ldr	r2, [pc, #100]	; (800568c <FLASH_FlushCaches+0x88>)
 8005626:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	4b17      	ldr	r3, [pc, #92]	; (800568c <FLASH_FlushCaches+0x88>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a16      	ldr	r2, [pc, #88]	; (800568c <FLASH_FlushCaches+0x88>)
 8005632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005636:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005638:	4b14      	ldr	r3, [pc, #80]	; (800568c <FLASH_FlushCaches+0x88>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a13      	ldr	r2, [pc, #76]	; (800568c <FLASH_FlushCaches+0x88>)
 800563e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005642:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005644:	4b11      	ldr	r3, [pc, #68]	; (800568c <FLASH_FlushCaches+0x88>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800564c:	2b00      	cmp	r3, #0
 800564e:	d017      	beq.n	8005680 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005650:	4b0e      	ldr	r3, [pc, #56]	; (800568c <FLASH_FlushCaches+0x88>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a0d      	ldr	r2, [pc, #52]	; (800568c <FLASH_FlushCaches+0x88>)
 8005656:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800565a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800565c:	4b0b      	ldr	r3, [pc, #44]	; (800568c <FLASH_FlushCaches+0x88>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a0a      	ldr	r2, [pc, #40]	; (800568c <FLASH_FlushCaches+0x88>)
 8005662:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	4b08      	ldr	r3, [pc, #32]	; (800568c <FLASH_FlushCaches+0x88>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a07      	ldr	r2, [pc, #28]	; (800568c <FLASH_FlushCaches+0x88>)
 800566e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005672:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <FLASH_FlushCaches+0x88>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a04      	ldr	r2, [pc, #16]	; (800568c <FLASH_FlushCaches+0x88>)
 800567a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800567e:	6013      	str	r3, [r2, #0]
  }
}
 8005680:	bf00      	nop
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40023c00 	.word	0x40023c00

08005690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005690:	b480      	push	{r7}
 8005692:	b089      	sub	sp, #36	; 0x24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800569a:	2300      	movs	r3, #0
 800569c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800569e:	2300      	movs	r3, #0
 80056a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	61fb      	str	r3, [r7, #28]
 80056aa:	e159      	b.n	8005960 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056ac:	2201      	movs	r2, #1
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4013      	ands	r3, r2
 80056be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	f040 8148 	bne.w	800595a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d005      	beq.n	80056e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d130      	bne.n	8005744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	2203      	movs	r2, #3
 80056ee:	fa02 f303 	lsl.w	r3, r2, r3
 80056f2:	43db      	mvns	r3, r3
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	4013      	ands	r3, r2
 80056f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	4313      	orrs	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005718:	2201      	movs	r2, #1
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	43db      	mvns	r3, r3
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	4013      	ands	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	091b      	lsrs	r3, r3, #4
 800572e:	f003 0201 	and.w	r2, r3, #1
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	4313      	orrs	r3, r2
 800573c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f003 0303 	and.w	r3, r3, #3
 800574c:	2b03      	cmp	r3, #3
 800574e:	d017      	beq.n	8005780 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	2203      	movs	r2, #3
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	43db      	mvns	r3, r3
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	4013      	ands	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	4313      	orrs	r3, r2
 8005778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f003 0303 	and.w	r3, r3, #3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d123      	bne.n	80057d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	08da      	lsrs	r2, r3, #3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3208      	adds	r2, #8
 8005794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	220f      	movs	r2, #15
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	43db      	mvns	r3, r3
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	4013      	ands	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	08da      	lsrs	r2, r3, #3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3208      	adds	r2, #8
 80057ce:	69b9      	ldr	r1, [r7, #24]
 80057d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	2203      	movs	r2, #3
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	43db      	mvns	r3, r3
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	4013      	ands	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f003 0203 	and.w	r2, r3, #3
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	4313      	orrs	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 80a2 	beq.w	800595a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	4b57      	ldr	r3, [pc, #348]	; (8005978 <HAL_GPIO_Init+0x2e8>)
 800581c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581e:	4a56      	ldr	r2, [pc, #344]	; (8005978 <HAL_GPIO_Init+0x2e8>)
 8005820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005824:	6453      	str	r3, [r2, #68]	; 0x44
 8005826:	4b54      	ldr	r3, [pc, #336]	; (8005978 <HAL_GPIO_Init+0x2e8>)
 8005828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005832:	4a52      	ldr	r2, [pc, #328]	; (800597c <HAL_GPIO_Init+0x2ec>)
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	089b      	lsrs	r3, r3, #2
 8005838:	3302      	adds	r3, #2
 800583a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800583e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	220f      	movs	r2, #15
 800584a:	fa02 f303 	lsl.w	r3, r2, r3
 800584e:	43db      	mvns	r3, r3
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	4013      	ands	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a49      	ldr	r2, [pc, #292]	; (8005980 <HAL_GPIO_Init+0x2f0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d019      	beq.n	8005892 <HAL_GPIO_Init+0x202>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a48      	ldr	r2, [pc, #288]	; (8005984 <HAL_GPIO_Init+0x2f4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d013      	beq.n	800588e <HAL_GPIO_Init+0x1fe>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a47      	ldr	r2, [pc, #284]	; (8005988 <HAL_GPIO_Init+0x2f8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00d      	beq.n	800588a <HAL_GPIO_Init+0x1fa>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a46      	ldr	r2, [pc, #280]	; (800598c <HAL_GPIO_Init+0x2fc>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d007      	beq.n	8005886 <HAL_GPIO_Init+0x1f6>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a45      	ldr	r2, [pc, #276]	; (8005990 <HAL_GPIO_Init+0x300>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d101      	bne.n	8005882 <HAL_GPIO_Init+0x1f2>
 800587e:	2304      	movs	r3, #4
 8005880:	e008      	b.n	8005894 <HAL_GPIO_Init+0x204>
 8005882:	2307      	movs	r3, #7
 8005884:	e006      	b.n	8005894 <HAL_GPIO_Init+0x204>
 8005886:	2303      	movs	r3, #3
 8005888:	e004      	b.n	8005894 <HAL_GPIO_Init+0x204>
 800588a:	2302      	movs	r3, #2
 800588c:	e002      	b.n	8005894 <HAL_GPIO_Init+0x204>
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <HAL_GPIO_Init+0x204>
 8005892:	2300      	movs	r3, #0
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	f002 0203 	and.w	r2, r2, #3
 800589a:	0092      	lsls	r2, r2, #2
 800589c:	4093      	lsls	r3, r2
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058a4:	4935      	ldr	r1, [pc, #212]	; (800597c <HAL_GPIO_Init+0x2ec>)
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	089b      	lsrs	r3, r3, #2
 80058aa:	3302      	adds	r3, #2
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058b2:	4b38      	ldr	r3, [pc, #224]	; (8005994 <HAL_GPIO_Init+0x304>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	43db      	mvns	r3, r3
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4013      	ands	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058d6:	4a2f      	ldr	r2, [pc, #188]	; (8005994 <HAL_GPIO_Init+0x304>)
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058dc:	4b2d      	ldr	r3, [pc, #180]	; (8005994 <HAL_GPIO_Init+0x304>)
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	43db      	mvns	r3, r3
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	4013      	ands	r3, r2
 80058ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005900:	4a24      	ldr	r2, [pc, #144]	; (8005994 <HAL_GPIO_Init+0x304>)
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005906:	4b23      	ldr	r3, [pc, #140]	; (8005994 <HAL_GPIO_Init+0x304>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	43db      	mvns	r3, r3
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	4013      	ands	r3, r2
 8005914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800592a:	4a1a      	ldr	r2, [pc, #104]	; (8005994 <HAL_GPIO_Init+0x304>)
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005930:	4b18      	ldr	r3, [pc, #96]	; (8005994 <HAL_GPIO_Init+0x304>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	43db      	mvns	r3, r3
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	4013      	ands	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005954:	4a0f      	ldr	r2, [pc, #60]	; (8005994 <HAL_GPIO_Init+0x304>)
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	3301      	adds	r3, #1
 800595e:	61fb      	str	r3, [r7, #28]
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	2b0f      	cmp	r3, #15
 8005964:	f67f aea2 	bls.w	80056ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005968:	bf00      	nop
 800596a:	bf00      	nop
 800596c:	3724      	adds	r7, #36	; 0x24
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800
 800597c:	40013800 	.word	0x40013800
 8005980:	40020000 	.word	0x40020000
 8005984:	40020400 	.word	0x40020400
 8005988:	40020800 	.word	0x40020800
 800598c:	40020c00 	.word	0x40020c00
 8005990:	40021000 	.word	0x40021000
 8005994:	40013c00 	.word	0x40013c00

08005998 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	e0bb      	b.n	8005b2c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059b4:	2201      	movs	r2, #1
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4013      	ands	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	f040 80ab 	bne.w	8005b26 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80059d0:	4a5c      	ldr	r2, [pc, #368]	; (8005b44 <HAL_GPIO_DeInit+0x1ac>)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	089b      	lsrs	r3, r3, #2
 80059d6:	3302      	adds	r3, #2
 80059d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059dc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f003 0303 	and.w	r3, r3, #3
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	220f      	movs	r2, #15
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	4013      	ands	r3, r2
 80059f0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a54      	ldr	r2, [pc, #336]	; (8005b48 <HAL_GPIO_DeInit+0x1b0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d019      	beq.n	8005a2e <HAL_GPIO_DeInit+0x96>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a53      	ldr	r2, [pc, #332]	; (8005b4c <HAL_GPIO_DeInit+0x1b4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <HAL_GPIO_DeInit+0x92>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a52      	ldr	r2, [pc, #328]	; (8005b50 <HAL_GPIO_DeInit+0x1b8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00d      	beq.n	8005a26 <HAL_GPIO_DeInit+0x8e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a51      	ldr	r2, [pc, #324]	; (8005b54 <HAL_GPIO_DeInit+0x1bc>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d007      	beq.n	8005a22 <HAL_GPIO_DeInit+0x8a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a50      	ldr	r2, [pc, #320]	; (8005b58 <HAL_GPIO_DeInit+0x1c0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d101      	bne.n	8005a1e <HAL_GPIO_DeInit+0x86>
 8005a1a:	2304      	movs	r3, #4
 8005a1c:	e008      	b.n	8005a30 <HAL_GPIO_DeInit+0x98>
 8005a1e:	2307      	movs	r3, #7
 8005a20:	e006      	b.n	8005a30 <HAL_GPIO_DeInit+0x98>
 8005a22:	2303      	movs	r3, #3
 8005a24:	e004      	b.n	8005a30 <HAL_GPIO_DeInit+0x98>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e002      	b.n	8005a30 <HAL_GPIO_DeInit+0x98>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <HAL_GPIO_DeInit+0x98>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	f002 0203 	and.w	r2, r2, #3
 8005a36:	0092      	lsls	r2, r2, #2
 8005a38:	4093      	lsls	r3, r2
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d132      	bne.n	8005aa6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005a40:	4b46      	ldr	r3, [pc, #280]	; (8005b5c <HAL_GPIO_DeInit+0x1c4>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	43db      	mvns	r3, r3
 8005a48:	4944      	ldr	r1, [pc, #272]	; (8005b5c <HAL_GPIO_DeInit+0x1c4>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005a4e:	4b43      	ldr	r3, [pc, #268]	; (8005b5c <HAL_GPIO_DeInit+0x1c4>)
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	43db      	mvns	r3, r3
 8005a56:	4941      	ldr	r1, [pc, #260]	; (8005b5c <HAL_GPIO_DeInit+0x1c4>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005a5c:	4b3f      	ldr	r3, [pc, #252]	; (8005b5c <HAL_GPIO_DeInit+0x1c4>)
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	43db      	mvns	r3, r3
 8005a64:	493d      	ldr	r1, [pc, #244]	; (8005b5c <HAL_GPIO_DeInit+0x1c4>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005a6a:	4b3c      	ldr	r3, [pc, #240]	; (8005b5c <HAL_GPIO_DeInit+0x1c4>)
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	43db      	mvns	r3, r3
 8005a72:	493a      	ldr	r1, [pc, #232]	; (8005b5c <HAL_GPIO_DeInit+0x1c4>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	220f      	movs	r2, #15
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005a88:	4a2e      	ldr	r2, [pc, #184]	; (8005b44 <HAL_GPIO_DeInit+0x1ac>)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	089b      	lsrs	r3, r3, #2
 8005a8e:	3302      	adds	r3, #2
 8005a90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	43da      	mvns	r2, r3
 8005a98:	482a      	ldr	r0, [pc, #168]	; (8005b44 <HAL_GPIO_DeInit+0x1ac>)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	089b      	lsrs	r3, r3, #2
 8005a9e:	400a      	ands	r2, r1
 8005aa0:	3302      	adds	r3, #2
 8005aa2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	2103      	movs	r1, #3
 8005ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	401a      	ands	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	08da      	lsrs	r2, r3, #3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3208      	adds	r2, #8
 8005ac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	220f      	movs	r2, #15
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	43db      	mvns	r3, r3
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	08d2      	lsrs	r2, r2, #3
 8005adc:	4019      	ands	r1, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	3208      	adds	r2, #8
 8005ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	2103      	movs	r1, #3
 8005af0:	fa01 f303 	lsl.w	r3, r1, r3
 8005af4:	43db      	mvns	r3, r3
 8005af6:	401a      	ands	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	2101      	movs	r1, #1
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	fa01 f303 	lsl.w	r3, r1, r3
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	401a      	ands	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	2103      	movs	r1, #3
 8005b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	401a      	ands	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2b0f      	cmp	r3, #15
 8005b30:	f67f af40 	bls.w	80059b4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40013800 	.word	0x40013800
 8005b48:	40020000 	.word	0x40020000
 8005b4c:	40020400 	.word	0x40020400
 8005b50:	40020800 	.word	0x40020800
 8005b54:	40020c00 	.word	0x40020c00
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	40013c00 	.word	0x40013c00

08005b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	807b      	strh	r3, [r7, #2]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b70:	787b      	ldrb	r3, [r7, #1]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b76:	887a      	ldrh	r2, [r7, #2]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b7c:	e003      	b.n	8005b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b7e:	887b      	ldrh	r3, [r7, #2]
 8005b80:	041a      	lsls	r2, r3, #16
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	619a      	str	r2, [r3, #24]
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ba4:	887a      	ldrh	r2, [r7, #2]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	041a      	lsls	r2, r3, #16
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	43d9      	mvns	r1, r3
 8005bb0:	887b      	ldrh	r3, [r7, #2]
 8005bb2:	400b      	ands	r3, r1
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	619a      	str	r2, [r3, #24]
}
 8005bba:	bf00      	nop
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e034      	b.n	8005c42 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005be0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f245 5255 	movw	r2, #21845	; 0x5555
 8005bea:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6852      	ldr	r2, [r2, #4]
 8005bf4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	6892      	ldr	r2, [r2, #8]
 8005bfe:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005c00:	f7fe f876 	bl	8003cf0 <HAL_GetTick>
 8005c04:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005c06:	e00f      	b.n	8005c28 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005c08:	f7fe f872 	bl	8003cf0 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b31      	cmp	r3, #49	; 0x31
 8005c14:	d908      	bls.n	8005c28 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e00c      	b.n	8005c42 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e8      	bne.n	8005c08 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005c3e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005c5a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
	...

08005c6c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8005c70:	4b06      	ldr	r3, [pc, #24]	; (8005c8c <HAL_PWR_PVD_IRQHandler+0x20>)
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8005c7c:	f000 f808 	bl	8005c90 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005c80:	4b02      	ldr	r3, [pc, #8]	; (8005c8c <HAL_PWR_PVD_IRQHandler+0x20>)
 8005c82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005c86:	615a      	str	r2, [r3, #20]
  }
}
 8005c88:	bf00      	nop
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40013c00 	.word	0x40013c00

08005c90 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005c90:	b480      	push	{r7}
 8005c92:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8005c94:	bf00      	nop
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
	...

08005ca0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e267      	b.n	8006182 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d075      	beq.n	8005daa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cbe:	4b88      	ldr	r3, [pc, #544]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 030c 	and.w	r3, r3, #12
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d00c      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cca:	4b85      	ldr	r3, [pc, #532]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cd2:	2b08      	cmp	r3, #8
 8005cd4:	d112      	bne.n	8005cfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cd6:	4b82      	ldr	r3, [pc, #520]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ce2:	d10b      	bne.n	8005cfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce4:	4b7e      	ldr	r3, [pc, #504]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d05b      	beq.n	8005da8 <HAL_RCC_OscConfig+0x108>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d157      	bne.n	8005da8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e242      	b.n	8006182 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d04:	d106      	bne.n	8005d14 <HAL_RCC_OscConfig+0x74>
 8005d06:	4b76      	ldr	r3, [pc, #472]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a75      	ldr	r2, [pc, #468]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	e01d      	b.n	8005d50 <HAL_RCC_OscConfig+0xb0>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d1c:	d10c      	bne.n	8005d38 <HAL_RCC_OscConfig+0x98>
 8005d1e:	4b70      	ldr	r3, [pc, #448]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a6f      	ldr	r2, [pc, #444]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	4b6d      	ldr	r3, [pc, #436]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a6c      	ldr	r2, [pc, #432]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	e00b      	b.n	8005d50 <HAL_RCC_OscConfig+0xb0>
 8005d38:	4b69      	ldr	r3, [pc, #420]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a68      	ldr	r2, [pc, #416]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	4b66      	ldr	r3, [pc, #408]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a65      	ldr	r2, [pc, #404]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d013      	beq.n	8005d80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d58:	f7fd ffca 	bl	8003cf0 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d60:	f7fd ffc6 	bl	8003cf0 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b64      	cmp	r3, #100	; 0x64
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e207      	b.n	8006182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d72:	4b5b      	ldr	r3, [pc, #364]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d0f0      	beq.n	8005d60 <HAL_RCC_OscConfig+0xc0>
 8005d7e:	e014      	b.n	8005daa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d80:	f7fd ffb6 	bl	8003cf0 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d88:	f7fd ffb2 	bl	8003cf0 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b64      	cmp	r3, #100	; 0x64
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e1f3      	b.n	8006182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d9a:	4b51      	ldr	r3, [pc, #324]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f0      	bne.n	8005d88 <HAL_RCC_OscConfig+0xe8>
 8005da6:	e000      	b.n	8005daa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d063      	beq.n	8005e7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005db6:	4b4a      	ldr	r3, [pc, #296]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 030c 	and.w	r3, r3, #12
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00b      	beq.n	8005dda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dc2:	4b47      	ldr	r3, [pc, #284]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d11c      	bne.n	8005e08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dce:	4b44      	ldr	r3, [pc, #272]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d116      	bne.n	8005e08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dda:	4b41      	ldr	r3, [pc, #260]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d005      	beq.n	8005df2 <HAL_RCC_OscConfig+0x152>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d001      	beq.n	8005df2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e1c7      	b.n	8006182 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005df2:	4b3b      	ldr	r3, [pc, #236]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	4937      	ldr	r1, [pc, #220]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e06:	e03a      	b.n	8005e7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d020      	beq.n	8005e52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e10:	4b34      	ldr	r3, [pc, #208]	; (8005ee4 <HAL_RCC_OscConfig+0x244>)
 8005e12:	2201      	movs	r2, #1
 8005e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e16:	f7fd ff6b 	bl	8003cf0 <HAL_GetTick>
 8005e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e1c:	e008      	b.n	8005e30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e1e:	f7fd ff67 	bl	8003cf0 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e1a8      	b.n	8006182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e30:	4b2b      	ldr	r3, [pc, #172]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0f0      	beq.n	8005e1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e3c:	4b28      	ldr	r3, [pc, #160]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	4925      	ldr	r1, [pc, #148]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	600b      	str	r3, [r1, #0]
 8005e50:	e015      	b.n	8005e7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e52:	4b24      	ldr	r3, [pc, #144]	; (8005ee4 <HAL_RCC_OscConfig+0x244>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e58:	f7fd ff4a 	bl	8003cf0 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e60:	f7fd ff46 	bl	8003cf0 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e187      	b.n	8006182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e72:	4b1b      	ldr	r3, [pc, #108]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1f0      	bne.n	8005e60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0308 	and.w	r3, r3, #8
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d036      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d016      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e92:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <HAL_RCC_OscConfig+0x248>)
 8005e94:	2201      	movs	r2, #1
 8005e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e98:	f7fd ff2a 	bl	8003cf0 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ea0:	f7fd ff26 	bl	8003cf0 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e167      	b.n	8006182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eb2:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f0      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x200>
 8005ebe:	e01b      	b.n	8005ef8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ec0:	4b09      	ldr	r3, [pc, #36]	; (8005ee8 <HAL_RCC_OscConfig+0x248>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ec6:	f7fd ff13 	bl	8003cf0 <HAL_GetTick>
 8005eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ecc:	e00e      	b.n	8005eec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ece:	f7fd ff0f 	bl	8003cf0 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d907      	bls.n	8005eec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e150      	b.n	8006182 <HAL_RCC_OscConfig+0x4e2>
 8005ee0:	40023800 	.word	0x40023800
 8005ee4:	42470000 	.word	0x42470000
 8005ee8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eec:	4b88      	ldr	r3, [pc, #544]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8005eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1ea      	bne.n	8005ece <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 8097 	beq.w	8006034 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f06:	2300      	movs	r3, #0
 8005f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f0a:	4b81      	ldr	r3, [pc, #516]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10f      	bne.n	8005f36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f16:	2300      	movs	r3, #0
 8005f18:	60bb      	str	r3, [r7, #8]
 8005f1a:	4b7d      	ldr	r3, [pc, #500]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	4a7c      	ldr	r2, [pc, #496]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8005f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f24:	6413      	str	r3, [r2, #64]	; 0x40
 8005f26:	4b7a      	ldr	r3, [pc, #488]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2e:	60bb      	str	r3, [r7, #8]
 8005f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f32:	2301      	movs	r3, #1
 8005f34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f36:	4b77      	ldr	r3, [pc, #476]	; (8006114 <HAL_RCC_OscConfig+0x474>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d118      	bne.n	8005f74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f42:	4b74      	ldr	r3, [pc, #464]	; (8006114 <HAL_RCC_OscConfig+0x474>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a73      	ldr	r2, [pc, #460]	; (8006114 <HAL_RCC_OscConfig+0x474>)
 8005f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f4e:	f7fd fecf 	bl	8003cf0 <HAL_GetTick>
 8005f52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f54:	e008      	b.n	8005f68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f56:	f7fd fecb 	bl	8003cf0 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e10c      	b.n	8006182 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f68:	4b6a      	ldr	r3, [pc, #424]	; (8006114 <HAL_RCC_OscConfig+0x474>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0f0      	beq.n	8005f56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d106      	bne.n	8005f8a <HAL_RCC_OscConfig+0x2ea>
 8005f7c:	4b64      	ldr	r3, [pc, #400]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8005f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f80:	4a63      	ldr	r2, [pc, #396]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8005f82:	f043 0301 	orr.w	r3, r3, #1
 8005f86:	6713      	str	r3, [r2, #112]	; 0x70
 8005f88:	e01c      	b.n	8005fc4 <HAL_RCC_OscConfig+0x324>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	2b05      	cmp	r3, #5
 8005f90:	d10c      	bne.n	8005fac <HAL_RCC_OscConfig+0x30c>
 8005f92:	4b5f      	ldr	r3, [pc, #380]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8005f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f96:	4a5e      	ldr	r2, [pc, #376]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8005f98:	f043 0304 	orr.w	r3, r3, #4
 8005f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f9e:	4b5c      	ldr	r3, [pc, #368]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8005fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa2:	4a5b      	ldr	r2, [pc, #364]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8005fa4:	f043 0301 	orr.w	r3, r3, #1
 8005fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8005faa:	e00b      	b.n	8005fc4 <HAL_RCC_OscConfig+0x324>
 8005fac:	4b58      	ldr	r3, [pc, #352]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8005fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb0:	4a57      	ldr	r2, [pc, #348]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8005fb2:	f023 0301 	bic.w	r3, r3, #1
 8005fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb8:	4b55      	ldr	r3, [pc, #340]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8005fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbc:	4a54      	ldr	r2, [pc, #336]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8005fbe:	f023 0304 	bic.w	r3, r3, #4
 8005fc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d015      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fcc:	f7fd fe90 	bl	8003cf0 <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fd2:	e00a      	b.n	8005fea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fd4:	f7fd fe8c 	bl	8003cf0 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e0cb      	b.n	8006182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fea:	4b49      	ldr	r3, [pc, #292]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8005fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0ee      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x334>
 8005ff6:	e014      	b.n	8006022 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ff8:	f7fd fe7a 	bl	8003cf0 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ffe:	e00a      	b.n	8006016 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006000:	f7fd fe76 	bl	8003cf0 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	f241 3288 	movw	r2, #5000	; 0x1388
 800600e:	4293      	cmp	r3, r2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e0b5      	b.n	8006182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006016:	4b3e      	ldr	r3, [pc, #248]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8006018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1ee      	bne.n	8006000 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006022:	7dfb      	ldrb	r3, [r7, #23]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d105      	bne.n	8006034 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006028:	4b39      	ldr	r3, [pc, #228]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	4a38      	ldr	r2, [pc, #224]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 800602e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006032:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 80a1 	beq.w	8006180 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800603e:	4b34      	ldr	r3, [pc, #208]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 030c 	and.w	r3, r3, #12
 8006046:	2b08      	cmp	r3, #8
 8006048:	d05c      	beq.n	8006104 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	2b02      	cmp	r3, #2
 8006050:	d141      	bne.n	80060d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006052:	4b31      	ldr	r3, [pc, #196]	; (8006118 <HAL_RCC_OscConfig+0x478>)
 8006054:	2200      	movs	r2, #0
 8006056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006058:	f7fd fe4a 	bl	8003cf0 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006060:	f7fd fe46 	bl	8003cf0 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e087      	b.n	8006182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006072:	4b27      	ldr	r3, [pc, #156]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1f0      	bne.n	8006060 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	69da      	ldr	r2, [r3, #28]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	019b      	lsls	r3, r3, #6
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006094:	085b      	lsrs	r3, r3, #1
 8006096:	3b01      	subs	r3, #1
 8006098:	041b      	lsls	r3, r3, #16
 800609a:	431a      	orrs	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	061b      	lsls	r3, r3, #24
 80060a2:	491b      	ldr	r1, [pc, #108]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060a8:	4b1b      	ldr	r3, [pc, #108]	; (8006118 <HAL_RCC_OscConfig+0x478>)
 80060aa:	2201      	movs	r2, #1
 80060ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ae:	f7fd fe1f 	bl	8003cf0 <HAL_GetTick>
 80060b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060b4:	e008      	b.n	80060c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060b6:	f7fd fe1b 	bl	8003cf0 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d901      	bls.n	80060c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e05c      	b.n	8006182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060c8:	4b11      	ldr	r3, [pc, #68]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0f0      	beq.n	80060b6 <HAL_RCC_OscConfig+0x416>
 80060d4:	e054      	b.n	8006180 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d6:	4b10      	ldr	r3, [pc, #64]	; (8006118 <HAL_RCC_OscConfig+0x478>)
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060dc:	f7fd fe08 	bl	8003cf0 <HAL_GetTick>
 80060e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060e4:	f7fd fe04 	bl	8003cf0 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e045      	b.n	8006182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060f6:	4b06      	ldr	r3, [pc, #24]	; (8006110 <HAL_RCC_OscConfig+0x470>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1f0      	bne.n	80060e4 <HAL_RCC_OscConfig+0x444>
 8006102:	e03d      	b.n	8006180 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d107      	bne.n	800611c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e038      	b.n	8006182 <HAL_RCC_OscConfig+0x4e2>
 8006110:	40023800 	.word	0x40023800
 8006114:	40007000 	.word	0x40007000
 8006118:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800611c:	4b1b      	ldr	r3, [pc, #108]	; (800618c <HAL_RCC_OscConfig+0x4ec>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d028      	beq.n	800617c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006134:	429a      	cmp	r2, r3
 8006136:	d121      	bne.n	800617c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006142:	429a      	cmp	r2, r3
 8006144:	d11a      	bne.n	800617c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800614c:	4013      	ands	r3, r2
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006152:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006154:	4293      	cmp	r3, r2
 8006156:	d111      	bne.n	800617c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006162:	085b      	lsrs	r3, r3, #1
 8006164:	3b01      	subs	r3, #1
 8006166:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006168:	429a      	cmp	r2, r3
 800616a:	d107      	bne.n	800617c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006176:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006178:	429a      	cmp	r2, r3
 800617a:	d001      	beq.n	8006180 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e000      	b.n	8006182 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	40023800 	.word	0x40023800

08006190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e0cc      	b.n	800633e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061a4:	4b68      	ldr	r3, [pc, #416]	; (8006348 <HAL_RCC_ClockConfig+0x1b8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d90c      	bls.n	80061cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061b2:	4b65      	ldr	r3, [pc, #404]	; (8006348 <HAL_RCC_ClockConfig+0x1b8>)
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ba:	4b63      	ldr	r3, [pc, #396]	; (8006348 <HAL_RCC_ClockConfig+0x1b8>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d001      	beq.n	80061cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e0b8      	b.n	800633e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d020      	beq.n	800621a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061e4:	4b59      	ldr	r3, [pc, #356]	; (800634c <HAL_RCC_ClockConfig+0x1bc>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	4a58      	ldr	r2, [pc, #352]	; (800634c <HAL_RCC_ClockConfig+0x1bc>)
 80061ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0308 	and.w	r3, r3, #8
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061fc:	4b53      	ldr	r3, [pc, #332]	; (800634c <HAL_RCC_ClockConfig+0x1bc>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	4a52      	ldr	r2, [pc, #328]	; (800634c <HAL_RCC_ClockConfig+0x1bc>)
 8006202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006206:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006208:	4b50      	ldr	r3, [pc, #320]	; (800634c <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	494d      	ldr	r1, [pc, #308]	; (800634c <HAL_RCC_ClockConfig+0x1bc>)
 8006216:	4313      	orrs	r3, r2
 8006218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d044      	beq.n	80062b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d107      	bne.n	800623e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800622e:	4b47      	ldr	r3, [pc, #284]	; (800634c <HAL_RCC_ClockConfig+0x1bc>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d119      	bne.n	800626e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e07f      	b.n	800633e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b02      	cmp	r3, #2
 8006244:	d003      	beq.n	800624e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800624a:	2b03      	cmp	r3, #3
 800624c:	d107      	bne.n	800625e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800624e:	4b3f      	ldr	r3, [pc, #252]	; (800634c <HAL_RCC_ClockConfig+0x1bc>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d109      	bne.n	800626e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e06f      	b.n	800633e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800625e:	4b3b      	ldr	r3, [pc, #236]	; (800634c <HAL_RCC_ClockConfig+0x1bc>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e067      	b.n	800633e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800626e:	4b37      	ldr	r3, [pc, #220]	; (800634c <HAL_RCC_ClockConfig+0x1bc>)
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f023 0203 	bic.w	r2, r3, #3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	4934      	ldr	r1, [pc, #208]	; (800634c <HAL_RCC_ClockConfig+0x1bc>)
 800627c:	4313      	orrs	r3, r2
 800627e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006280:	f7fd fd36 	bl	8003cf0 <HAL_GetTick>
 8006284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006286:	e00a      	b.n	800629e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006288:	f7fd fd32 	bl	8003cf0 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	f241 3288 	movw	r2, #5000	; 0x1388
 8006296:	4293      	cmp	r3, r2
 8006298:	d901      	bls.n	800629e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e04f      	b.n	800633e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800629e:	4b2b      	ldr	r3, [pc, #172]	; (800634c <HAL_RCC_ClockConfig+0x1bc>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 020c 	and.w	r2, r3, #12
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d1eb      	bne.n	8006288 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062b0:	4b25      	ldr	r3, [pc, #148]	; (8006348 <HAL_RCC_ClockConfig+0x1b8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d20c      	bcs.n	80062d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062be:	4b22      	ldr	r3, [pc, #136]	; (8006348 <HAL_RCC_ClockConfig+0x1b8>)
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062c6:	4b20      	ldr	r3, [pc, #128]	; (8006348 <HAL_RCC_ClockConfig+0x1b8>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d001      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e032      	b.n	800633e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d008      	beq.n	80062f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062e4:	4b19      	ldr	r3, [pc, #100]	; (800634c <HAL_RCC_ClockConfig+0x1bc>)
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	4916      	ldr	r1, [pc, #88]	; (800634c <HAL_RCC_ClockConfig+0x1bc>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0308 	and.w	r3, r3, #8
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d009      	beq.n	8006316 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006302:	4b12      	ldr	r3, [pc, #72]	; (800634c <HAL_RCC_ClockConfig+0x1bc>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	490e      	ldr	r1, [pc, #56]	; (800634c <HAL_RCC_ClockConfig+0x1bc>)
 8006312:	4313      	orrs	r3, r2
 8006314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006316:	f000 f821 	bl	800635c <HAL_RCC_GetSysClockFreq>
 800631a:	4602      	mov	r2, r0
 800631c:	4b0b      	ldr	r3, [pc, #44]	; (800634c <HAL_RCC_ClockConfig+0x1bc>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	091b      	lsrs	r3, r3, #4
 8006322:	f003 030f 	and.w	r3, r3, #15
 8006326:	490a      	ldr	r1, [pc, #40]	; (8006350 <HAL_RCC_ClockConfig+0x1c0>)
 8006328:	5ccb      	ldrb	r3, [r1, r3]
 800632a:	fa22 f303 	lsr.w	r3, r2, r3
 800632e:	4a09      	ldr	r2, [pc, #36]	; (8006354 <HAL_RCC_ClockConfig+0x1c4>)
 8006330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006332:	4b09      	ldr	r3, [pc, #36]	; (8006358 <HAL_RCC_ClockConfig+0x1c8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	f7fc fede 	bl	80030f8 <HAL_InitTick>

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40023c00 	.word	0x40023c00
 800634c:	40023800 	.word	0x40023800
 8006350:	0800eab8 	.word	0x0800eab8
 8006354:	20000000 	.word	0x20000000
 8006358:	20000020 	.word	0x20000020

0800635c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800635c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006360:	b094      	sub	sp, #80	; 0x50
 8006362:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	647b      	str	r3, [r7, #68]	; 0x44
 8006368:	2300      	movs	r3, #0
 800636a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800636c:	2300      	movs	r3, #0
 800636e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006374:	4b79      	ldr	r3, [pc, #484]	; (800655c <HAL_RCC_GetSysClockFreq+0x200>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f003 030c 	and.w	r3, r3, #12
 800637c:	2b08      	cmp	r3, #8
 800637e:	d00d      	beq.n	800639c <HAL_RCC_GetSysClockFreq+0x40>
 8006380:	2b08      	cmp	r3, #8
 8006382:	f200 80e1 	bhi.w	8006548 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <HAL_RCC_GetSysClockFreq+0x34>
 800638a:	2b04      	cmp	r3, #4
 800638c:	d003      	beq.n	8006396 <HAL_RCC_GetSysClockFreq+0x3a>
 800638e:	e0db      	b.n	8006548 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006390:	4b73      	ldr	r3, [pc, #460]	; (8006560 <HAL_RCC_GetSysClockFreq+0x204>)
 8006392:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006394:	e0db      	b.n	800654e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006396:	4b73      	ldr	r3, [pc, #460]	; (8006564 <HAL_RCC_GetSysClockFreq+0x208>)
 8006398:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800639a:	e0d8      	b.n	800654e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800639c:	4b6f      	ldr	r3, [pc, #444]	; (800655c <HAL_RCC_GetSysClockFreq+0x200>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063a6:	4b6d      	ldr	r3, [pc, #436]	; (800655c <HAL_RCC_GetSysClockFreq+0x200>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d063      	beq.n	800647a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063b2:	4b6a      	ldr	r3, [pc, #424]	; (800655c <HAL_RCC_GetSysClockFreq+0x200>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	099b      	lsrs	r3, r3, #6
 80063b8:	2200      	movs	r2, #0
 80063ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80063bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c4:	633b      	str	r3, [r7, #48]	; 0x30
 80063c6:	2300      	movs	r3, #0
 80063c8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80063ce:	4622      	mov	r2, r4
 80063d0:	462b      	mov	r3, r5
 80063d2:	f04f 0000 	mov.w	r0, #0
 80063d6:	f04f 0100 	mov.w	r1, #0
 80063da:	0159      	lsls	r1, r3, #5
 80063dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063e0:	0150      	lsls	r0, r2, #5
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4621      	mov	r1, r4
 80063e8:	1a51      	subs	r1, r2, r1
 80063ea:	6139      	str	r1, [r7, #16]
 80063ec:	4629      	mov	r1, r5
 80063ee:	eb63 0301 	sbc.w	r3, r3, r1
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006400:	4659      	mov	r1, fp
 8006402:	018b      	lsls	r3, r1, #6
 8006404:	4651      	mov	r1, sl
 8006406:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800640a:	4651      	mov	r1, sl
 800640c:	018a      	lsls	r2, r1, #6
 800640e:	4651      	mov	r1, sl
 8006410:	ebb2 0801 	subs.w	r8, r2, r1
 8006414:	4659      	mov	r1, fp
 8006416:	eb63 0901 	sbc.w	r9, r3, r1
 800641a:	f04f 0200 	mov.w	r2, #0
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006426:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800642a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800642e:	4690      	mov	r8, r2
 8006430:	4699      	mov	r9, r3
 8006432:	4623      	mov	r3, r4
 8006434:	eb18 0303 	adds.w	r3, r8, r3
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	462b      	mov	r3, r5
 800643c:	eb49 0303 	adc.w	r3, r9, r3
 8006440:	60fb      	str	r3, [r7, #12]
 8006442:	f04f 0200 	mov.w	r2, #0
 8006446:	f04f 0300 	mov.w	r3, #0
 800644a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800644e:	4629      	mov	r1, r5
 8006450:	024b      	lsls	r3, r1, #9
 8006452:	4621      	mov	r1, r4
 8006454:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006458:	4621      	mov	r1, r4
 800645a:	024a      	lsls	r2, r1, #9
 800645c:	4610      	mov	r0, r2
 800645e:	4619      	mov	r1, r3
 8006460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006462:	2200      	movs	r2, #0
 8006464:	62bb      	str	r3, [r7, #40]	; 0x28
 8006466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006468:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800646c:	f7fa faae 	bl	80009cc <__aeabi_uldivmod>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4613      	mov	r3, r2
 8006476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006478:	e058      	b.n	800652c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800647a:	4b38      	ldr	r3, [pc, #224]	; (800655c <HAL_RCC_GetSysClockFreq+0x200>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	099b      	lsrs	r3, r3, #6
 8006480:	2200      	movs	r2, #0
 8006482:	4618      	mov	r0, r3
 8006484:	4611      	mov	r1, r2
 8006486:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800648a:	623b      	str	r3, [r7, #32]
 800648c:	2300      	movs	r3, #0
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
 8006490:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006494:	4642      	mov	r2, r8
 8006496:	464b      	mov	r3, r9
 8006498:	f04f 0000 	mov.w	r0, #0
 800649c:	f04f 0100 	mov.w	r1, #0
 80064a0:	0159      	lsls	r1, r3, #5
 80064a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064a6:	0150      	lsls	r0, r2, #5
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4641      	mov	r1, r8
 80064ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80064b2:	4649      	mov	r1, r9
 80064b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80064b8:	f04f 0200 	mov.w	r2, #0
 80064bc:	f04f 0300 	mov.w	r3, #0
 80064c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064cc:	ebb2 040a 	subs.w	r4, r2, sl
 80064d0:	eb63 050b 	sbc.w	r5, r3, fp
 80064d4:	f04f 0200 	mov.w	r2, #0
 80064d8:	f04f 0300 	mov.w	r3, #0
 80064dc:	00eb      	lsls	r3, r5, #3
 80064de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064e2:	00e2      	lsls	r2, r4, #3
 80064e4:	4614      	mov	r4, r2
 80064e6:	461d      	mov	r5, r3
 80064e8:	4643      	mov	r3, r8
 80064ea:	18e3      	adds	r3, r4, r3
 80064ec:	603b      	str	r3, [r7, #0]
 80064ee:	464b      	mov	r3, r9
 80064f0:	eb45 0303 	adc.w	r3, r5, r3
 80064f4:	607b      	str	r3, [r7, #4]
 80064f6:	f04f 0200 	mov.w	r2, #0
 80064fa:	f04f 0300 	mov.w	r3, #0
 80064fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006502:	4629      	mov	r1, r5
 8006504:	028b      	lsls	r3, r1, #10
 8006506:	4621      	mov	r1, r4
 8006508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800650c:	4621      	mov	r1, r4
 800650e:	028a      	lsls	r2, r1, #10
 8006510:	4610      	mov	r0, r2
 8006512:	4619      	mov	r1, r3
 8006514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006516:	2200      	movs	r2, #0
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	61fa      	str	r2, [r7, #28]
 800651c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006520:	f7fa fa54 	bl	80009cc <__aeabi_uldivmod>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4613      	mov	r3, r2
 800652a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800652c:	4b0b      	ldr	r3, [pc, #44]	; (800655c <HAL_RCC_GetSysClockFreq+0x200>)
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	0c1b      	lsrs	r3, r3, #16
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	3301      	adds	r3, #1
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800653c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800653e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006540:	fbb2 f3f3 	udiv	r3, r2, r3
 8006544:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006546:	e002      	b.n	800654e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006548:	4b05      	ldr	r3, [pc, #20]	; (8006560 <HAL_RCC_GetSysClockFreq+0x204>)
 800654a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800654c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800654e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006550:	4618      	mov	r0, r3
 8006552:	3750      	adds	r7, #80	; 0x50
 8006554:	46bd      	mov	sp, r7
 8006556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800655a:	bf00      	nop
 800655c:	40023800 	.word	0x40023800
 8006560:	00f42400 	.word	0x00f42400
 8006564:	007a1200 	.word	0x007a1200

08006568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800656c:	4b03      	ldr	r3, [pc, #12]	; (800657c <HAL_RCC_GetHCLKFreq+0x14>)
 800656e:	681b      	ldr	r3, [r3, #0]
}
 8006570:	4618      	mov	r0, r3
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	20000000 	.word	0x20000000

08006580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006584:	f7ff fff0 	bl	8006568 <HAL_RCC_GetHCLKFreq>
 8006588:	4602      	mov	r2, r0
 800658a:	4b05      	ldr	r3, [pc, #20]	; (80065a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	0a9b      	lsrs	r3, r3, #10
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	4903      	ldr	r1, [pc, #12]	; (80065a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006596:	5ccb      	ldrb	r3, [r1, r3]
 8006598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800659c:	4618      	mov	r0, r3
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	40023800 	.word	0x40023800
 80065a4:	0800eac8 	.word	0x0800eac8

080065a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065ac:	f7ff ffdc 	bl	8006568 <HAL_RCC_GetHCLKFreq>
 80065b0:	4602      	mov	r2, r0
 80065b2:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	0b5b      	lsrs	r3, r3, #13
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	4903      	ldr	r1, [pc, #12]	; (80065cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80065be:	5ccb      	ldrb	r3, [r1, r3]
 80065c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	40023800 	.word	0x40023800
 80065cc:	0800eac8 	.word	0x0800eac8

080065d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	220f      	movs	r2, #15
 80065de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065e0:	4b12      	ldr	r3, [pc, #72]	; (800662c <HAL_RCC_GetClockConfig+0x5c>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f003 0203 	and.w	r2, r3, #3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80065ec:	4b0f      	ldr	r3, [pc, #60]	; (800662c <HAL_RCC_GetClockConfig+0x5c>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80065f8:	4b0c      	ldr	r3, [pc, #48]	; (800662c <HAL_RCC_GetClockConfig+0x5c>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006604:	4b09      	ldr	r3, [pc, #36]	; (800662c <HAL_RCC_GetClockConfig+0x5c>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	08db      	lsrs	r3, r3, #3
 800660a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006612:	4b07      	ldr	r3, [pc, #28]	; (8006630 <HAL_RCC_GetClockConfig+0x60>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0207 	and.w	r2, r3, #7
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	601a      	str	r2, [r3, #0]
}
 800661e:	bf00      	nop
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	40023800 	.word	0x40023800
 8006630:	40023c00 	.word	0x40023c00

08006634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e04c      	b.n	80066e0 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d111      	bne.n	8006676 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f001 fc0e 	bl	8007e7c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006664:	2b00      	cmp	r3, #0
 8006666:	d102      	bne.n	800666e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a1f      	ldr	r2, [pc, #124]	; (80066e8 <HAL_TIM_Base_Init+0xb4>)
 800666c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2202      	movs	r2, #2
 800667a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3304      	adds	r3, #4
 8006686:	4619      	mov	r1, r3
 8006688:	4610      	mov	r0, r2
 800668a:	f001 f80d 	bl	80076a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	080034f9 	.word	0x080034f9

080066ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d001      	beq.n	8006704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e044      	b.n	800678e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0201 	orr.w	r2, r2, #1
 800671a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a1e      	ldr	r2, [pc, #120]	; (800679c <HAL_TIM_Base_Start_IT+0xb0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d018      	beq.n	8006758 <HAL_TIM_Base_Start_IT+0x6c>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800672e:	d013      	beq.n	8006758 <HAL_TIM_Base_Start_IT+0x6c>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a1a      	ldr	r2, [pc, #104]	; (80067a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d00e      	beq.n	8006758 <HAL_TIM_Base_Start_IT+0x6c>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a19      	ldr	r2, [pc, #100]	; (80067a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d009      	beq.n	8006758 <HAL_TIM_Base_Start_IT+0x6c>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a17      	ldr	r2, [pc, #92]	; (80067a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d004      	beq.n	8006758 <HAL_TIM_Base_Start_IT+0x6c>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a16      	ldr	r2, [pc, #88]	; (80067ac <HAL_TIM_Base_Start_IT+0xc0>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d111      	bne.n	800677c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b06      	cmp	r3, #6
 8006768:	d010      	beq.n	800678c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 0201 	orr.w	r2, r2, #1
 8006778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800677a:	e007      	b.n	800678c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0201 	orr.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40010000 	.word	0x40010000
 80067a0:	40000400 	.word	0x40000400
 80067a4:	40000800 	.word	0x40000800
 80067a8:	40000c00 	.word	0x40000c00
 80067ac:	40014000 	.word	0x40014000

080067b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e04c      	b.n	800685c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d111      	bne.n	80067f2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f001 fb50 	bl	8007e7c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d102      	bne.n	80067ea <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a1f      	ldr	r2, [pc, #124]	; (8006864 <HAL_TIM_PWM_Init+0xb4>)
 80067e8:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2202      	movs	r2, #2
 80067f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3304      	adds	r3, #4
 8006802:	4619      	mov	r1, r3
 8006804:	4610      	mov	r0, r2
 8006806:	f000 ff4f 	bl	80076a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	08006869 	.word	0x08006869

08006868 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d109      	bne.n	80068a4 <HAL_TIM_PWM_Start_IT+0x28>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b01      	cmp	r3, #1
 800689a:	bf14      	ite	ne
 800689c:	2301      	movne	r3, #1
 800689e:	2300      	moveq	r3, #0
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	e022      	b.n	80068ea <HAL_TIM_PWM_Start_IT+0x6e>
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	d109      	bne.n	80068be <HAL_TIM_PWM_Start_IT+0x42>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	bf14      	ite	ne
 80068b6:	2301      	movne	r3, #1
 80068b8:	2300      	moveq	r3, #0
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	e015      	b.n	80068ea <HAL_TIM_PWM_Start_IT+0x6e>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d109      	bne.n	80068d8 <HAL_TIM_PWM_Start_IT+0x5c>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	bf14      	ite	ne
 80068d0:	2301      	movne	r3, #1
 80068d2:	2300      	moveq	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	e008      	b.n	80068ea <HAL_TIM_PWM_Start_IT+0x6e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	bf14      	ite	ne
 80068e4:	2301      	movne	r3, #1
 80068e6:	2300      	moveq	r3, #0
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e0b3      	b.n	8006a5a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d104      	bne.n	8006902 <HAL_TIM_PWM_Start_IT+0x86>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006900:	e013      	b.n	800692a <HAL_TIM_PWM_Start_IT+0xae>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b04      	cmp	r3, #4
 8006906:	d104      	bne.n	8006912 <HAL_TIM_PWM_Start_IT+0x96>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006910:	e00b      	b.n	800692a <HAL_TIM_PWM_Start_IT+0xae>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b08      	cmp	r3, #8
 8006916:	d104      	bne.n	8006922 <HAL_TIM_PWM_Start_IT+0xa6>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006920:	e003      	b.n	800692a <HAL_TIM_PWM_Start_IT+0xae>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2202      	movs	r2, #2
 8006926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b0c      	cmp	r3, #12
 800692e:	d841      	bhi.n	80069b4 <HAL_TIM_PWM_Start_IT+0x138>
 8006930:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <HAL_TIM_PWM_Start_IT+0xbc>)
 8006932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006936:	bf00      	nop
 8006938:	0800696d 	.word	0x0800696d
 800693c:	080069b5 	.word	0x080069b5
 8006940:	080069b5 	.word	0x080069b5
 8006944:	080069b5 	.word	0x080069b5
 8006948:	0800697f 	.word	0x0800697f
 800694c:	080069b5 	.word	0x080069b5
 8006950:	080069b5 	.word	0x080069b5
 8006954:	080069b5 	.word	0x080069b5
 8006958:	08006991 	.word	0x08006991
 800695c:	080069b5 	.word	0x080069b5
 8006960:	080069b5 	.word	0x080069b5
 8006964:	080069b5 	.word	0x080069b5
 8006968:	080069a3 	.word	0x080069a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0202 	orr.w	r2, r2, #2
 800697a:	60da      	str	r2, [r3, #12]
      break;
 800697c:	e01d      	b.n	80069ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f042 0204 	orr.w	r2, r2, #4
 800698c:	60da      	str	r2, [r3, #12]
      break;
 800698e:	e014      	b.n	80069ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f042 0208 	orr.w	r2, r2, #8
 800699e:	60da      	str	r2, [r3, #12]
      break;
 80069a0:	e00b      	b.n	80069ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f042 0210 	orr.w	r2, r2, #16
 80069b0:	60da      	str	r2, [r3, #12]
      break;
 80069b2:	e002      	b.n	80069ba <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	73fb      	strb	r3, [r7, #15]
      break;
 80069b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d14b      	bne.n	8006a58 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2201      	movs	r2, #1
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f001 fa31 	bl	8007e30 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a24      	ldr	r2, [pc, #144]	; (8006a64 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d107      	bne.n	80069e8 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069e6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a1d      	ldr	r2, [pc, #116]	; (8006a64 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d018      	beq.n	8006a24 <HAL_TIM_PWM_Start_IT+0x1a8>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fa:	d013      	beq.n	8006a24 <HAL_TIM_PWM_Start_IT+0x1a8>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a19      	ldr	r2, [pc, #100]	; (8006a68 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00e      	beq.n	8006a24 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a18      	ldr	r2, [pc, #96]	; (8006a6c <HAL_TIM_PWM_Start_IT+0x1f0>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d009      	beq.n	8006a24 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a16      	ldr	r2, [pc, #88]	; (8006a70 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d004      	beq.n	8006a24 <HAL_TIM_PWM_Start_IT+0x1a8>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a15      	ldr	r2, [pc, #84]	; (8006a74 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d111      	bne.n	8006a48 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2b06      	cmp	r3, #6
 8006a34:	d010      	beq.n	8006a58 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f042 0201 	orr.w	r2, r2, #1
 8006a44:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a46:	e007      	b.n	8006a58 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0201 	orr.w	r2, r2, #1
 8006a56:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	40010000 	.word	0x40010000
 8006a68:	40000400 	.word	0x40000400
 8006a6c:	40000800 	.word	0x40000800
 8006a70:	40000c00 	.word	0x40000c00
 8006a74:	40014000 	.word	0x40014000

08006a78 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b0c      	cmp	r3, #12
 8006a8a:	d841      	bhi.n	8006b10 <HAL_TIM_PWM_Stop_IT+0x98>
 8006a8c:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8006a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a92:	bf00      	nop
 8006a94:	08006ac9 	.word	0x08006ac9
 8006a98:	08006b11 	.word	0x08006b11
 8006a9c:	08006b11 	.word	0x08006b11
 8006aa0:	08006b11 	.word	0x08006b11
 8006aa4:	08006adb 	.word	0x08006adb
 8006aa8:	08006b11 	.word	0x08006b11
 8006aac:	08006b11 	.word	0x08006b11
 8006ab0:	08006b11 	.word	0x08006b11
 8006ab4:	08006aed 	.word	0x08006aed
 8006ab8:	08006b11 	.word	0x08006b11
 8006abc:	08006b11 	.word	0x08006b11
 8006ac0:	08006b11 	.word	0x08006b11
 8006ac4:	08006aff 	.word	0x08006aff
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0202 	bic.w	r2, r2, #2
 8006ad6:	60da      	str	r2, [r3, #12]
      break;
 8006ad8:	e01d      	b.n	8006b16 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68da      	ldr	r2, [r3, #12]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0204 	bic.w	r2, r2, #4
 8006ae8:	60da      	str	r2, [r3, #12]
      break;
 8006aea:	e014      	b.n	8006b16 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0208 	bic.w	r2, r2, #8
 8006afa:	60da      	str	r2, [r3, #12]
      break;
 8006afc:	e00b      	b.n	8006b16 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0210 	bic.w	r2, r2, #16
 8006b0c:	60da      	str	r2, [r3, #12]
      break;
 8006b0e:	e002      	b.n	8006b16 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	73fb      	strb	r3, [r7, #15]
      break;
 8006b14:	bf00      	nop
  }

  if (status == HAL_OK)
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d157      	bne.n	8006bcc <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2200      	movs	r2, #0
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f001 f983 	bl	8007e30 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a2a      	ldr	r2, [pc, #168]	; (8006bd8 <HAL_TIM_PWM_Stop_IT+0x160>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d117      	bne.n	8006b64 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6a1a      	ldr	r2, [r3, #32]
 8006b3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b3e:	4013      	ands	r3, r2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10f      	bne.n	8006b64 <HAL_TIM_PWM_Stop_IT+0xec>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6a1a      	ldr	r2, [r3, #32]
 8006b4a:	f240 4344 	movw	r3, #1092	; 0x444
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d107      	bne.n	8006b64 <HAL_TIM_PWM_Stop_IT+0xec>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b62:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6a1a      	ldr	r2, [r3, #32]
 8006b6a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b6e:	4013      	ands	r3, r2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10f      	bne.n	8006b94 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6a1a      	ldr	r2, [r3, #32]
 8006b7a:	f240 4344 	movw	r3, #1092	; 0x444
 8006b7e:	4013      	ands	r3, r2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d107      	bne.n	8006b94 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0201 	bic.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d104      	bne.n	8006ba4 <HAL_TIM_PWM_Stop_IT+0x12c>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ba2:	e013      	b.n	8006bcc <HAL_TIM_PWM_Stop_IT+0x154>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d104      	bne.n	8006bb4 <HAL_TIM_PWM_Stop_IT+0x13c>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bb2:	e00b      	b.n	8006bcc <HAL_TIM_PWM_Stop_IT+0x154>
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	d104      	bne.n	8006bc4 <HAL_TIM_PWM_Stop_IT+0x14c>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bc2:	e003      	b.n	8006bcc <HAL_TIM_PWM_Stop_IT+0x154>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	40010000 	.word	0x40010000

08006bdc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e04c      	b.n	8006c88 <HAL_TIM_IC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d111      	bne.n	8006c1e <HAL_TIM_IC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f001 f93a 	bl	8007e7c <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d102      	bne.n	8006c16 <HAL_TIM_IC_Init+0x3a>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a1f      	ldr	r2, [pc, #124]	; (8006c90 <HAL_TIM_IC_Init+0xb4>)
 8006c14:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2202      	movs	r2, #2
 8006c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4610      	mov	r0, r2
 8006c32:	f000 fd39 	bl	80076a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	08006c95 	.word	0x08006c95

08006c94 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d104      	bne.n	8006cc6 <HAL_TIM_IC_Start_IT+0x1e>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	e013      	b.n	8006cee <HAL_TIM_IC_Start_IT+0x46>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d104      	bne.n	8006cd6 <HAL_TIM_IC_Start_IT+0x2e>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	e00b      	b.n	8006cee <HAL_TIM_IC_Start_IT+0x46>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d104      	bne.n	8006ce6 <HAL_TIM_IC_Start_IT+0x3e>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	e003      	b.n	8006cee <HAL_TIM_IC_Start_IT+0x46>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d104      	bne.n	8006d00 <HAL_TIM_IC_Start_IT+0x58>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	e013      	b.n	8006d28 <HAL_TIM_IC_Start_IT+0x80>
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d104      	bne.n	8006d10 <HAL_TIM_IC_Start_IT+0x68>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	e00b      	b.n	8006d28 <HAL_TIM_IC_Start_IT+0x80>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2b08      	cmp	r3, #8
 8006d14:	d104      	bne.n	8006d20 <HAL_TIM_IC_Start_IT+0x78>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	e003      	b.n	8006d28 <HAL_TIM_IC_Start_IT+0x80>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d102      	bne.n	8006d36 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d30:	7b7b      	ldrb	r3, [r7, #13]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d001      	beq.n	8006d3a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e0c2      	b.n	8006ec0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d104      	bne.n	8006d4a <HAL_TIM_IC_Start_IT+0xa2>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2202      	movs	r2, #2
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d48:	e013      	b.n	8006d72 <HAL_TIM_IC_Start_IT+0xca>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d104      	bne.n	8006d5a <HAL_TIM_IC_Start_IT+0xb2>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d58:	e00b      	b.n	8006d72 <HAL_TIM_IC_Start_IT+0xca>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d104      	bne.n	8006d6a <HAL_TIM_IC_Start_IT+0xc2>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2202      	movs	r2, #2
 8006d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d68:	e003      	b.n	8006d72 <HAL_TIM_IC_Start_IT+0xca>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d104      	bne.n	8006d82 <HAL_TIM_IC_Start_IT+0xda>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d80:	e013      	b.n	8006daa <HAL_TIM_IC_Start_IT+0x102>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d104      	bne.n	8006d92 <HAL_TIM_IC_Start_IT+0xea>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d90:	e00b      	b.n	8006daa <HAL_TIM_IC_Start_IT+0x102>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d104      	bne.n	8006da2 <HAL_TIM_IC_Start_IT+0xfa>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006da0:	e003      	b.n	8006daa <HAL_TIM_IC_Start_IT+0x102>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2202      	movs	r2, #2
 8006da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b0c      	cmp	r3, #12
 8006dae:	d841      	bhi.n	8006e34 <HAL_TIM_IC_Start_IT+0x18c>
 8006db0:	a201      	add	r2, pc, #4	; (adr r2, 8006db8 <HAL_TIM_IC_Start_IT+0x110>)
 8006db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db6:	bf00      	nop
 8006db8:	08006ded 	.word	0x08006ded
 8006dbc:	08006e35 	.word	0x08006e35
 8006dc0:	08006e35 	.word	0x08006e35
 8006dc4:	08006e35 	.word	0x08006e35
 8006dc8:	08006dff 	.word	0x08006dff
 8006dcc:	08006e35 	.word	0x08006e35
 8006dd0:	08006e35 	.word	0x08006e35
 8006dd4:	08006e35 	.word	0x08006e35
 8006dd8:	08006e11 	.word	0x08006e11
 8006ddc:	08006e35 	.word	0x08006e35
 8006de0:	08006e35 	.word	0x08006e35
 8006de4:	08006e35 	.word	0x08006e35
 8006de8:	08006e23 	.word	0x08006e23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0202 	orr.w	r2, r2, #2
 8006dfa:	60da      	str	r2, [r3, #12]
      break;
 8006dfc:	e01d      	b.n	8006e3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f042 0204 	orr.w	r2, r2, #4
 8006e0c:	60da      	str	r2, [r3, #12]
      break;
 8006e0e:	e014      	b.n	8006e3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0208 	orr.w	r2, r2, #8
 8006e1e:	60da      	str	r2, [r3, #12]
      break;
 8006e20:	e00b      	b.n	8006e3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f042 0210 	orr.w	r2, r2, #16
 8006e30:	60da      	str	r2, [r3, #12]
      break;
 8006e32:	e002      	b.n	8006e3a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	73fb      	strb	r3, [r7, #15]
      break;
 8006e38:	bf00      	nop
  }

  if (status == HAL_OK)
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d13e      	bne.n	8006ebe <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2201      	movs	r2, #1
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 fff1 	bl	8007e30 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a1d      	ldr	r2, [pc, #116]	; (8006ec8 <HAL_TIM_IC_Start_IT+0x220>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d018      	beq.n	8006e8a <HAL_TIM_IC_Start_IT+0x1e2>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e60:	d013      	beq.n	8006e8a <HAL_TIM_IC_Start_IT+0x1e2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a19      	ldr	r2, [pc, #100]	; (8006ecc <HAL_TIM_IC_Start_IT+0x224>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00e      	beq.n	8006e8a <HAL_TIM_IC_Start_IT+0x1e2>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a17      	ldr	r2, [pc, #92]	; (8006ed0 <HAL_TIM_IC_Start_IT+0x228>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d009      	beq.n	8006e8a <HAL_TIM_IC_Start_IT+0x1e2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a16      	ldr	r2, [pc, #88]	; (8006ed4 <HAL_TIM_IC_Start_IT+0x22c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d004      	beq.n	8006e8a <HAL_TIM_IC_Start_IT+0x1e2>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a14      	ldr	r2, [pc, #80]	; (8006ed8 <HAL_TIM_IC_Start_IT+0x230>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d111      	bne.n	8006eae <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2b06      	cmp	r3, #6
 8006e9a:	d010      	beq.n	8006ebe <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 0201 	orr.w	r2, r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eac:	e007      	b.n	8006ebe <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f042 0201 	orr.w	r2, r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	40010000 	.word	0x40010000
 8006ecc:	40000400 	.word	0x40000400
 8006ed0:	40000800 	.word	0x40000800
 8006ed4:	40000c00 	.word	0x40000c00
 8006ed8:	40014000 	.word	0x40014000

08006edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d128      	bne.n	8006f44 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d121      	bne.n	8006f44 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f06f 0202 	mvn.w	r2, #2
 8006f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d005      	beq.n	8006f2a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	4798      	blx	r3
 8006f28:	e009      	b.n	8006f3e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	f003 0304 	and.w	r3, r3, #4
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d128      	bne.n	8006fa4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	f003 0304 	and.w	r3, r3, #4
 8006f5c:	2b04      	cmp	r3, #4
 8006f5e:	d121      	bne.n	8006fa4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f06f 0204 	mvn.w	r2, #4
 8006f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d005      	beq.n	8006f8a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	4798      	blx	r3
 8006f88:	e009      	b.n	8006f9e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	f003 0308 	and.w	r3, r3, #8
 8006fae:	2b08      	cmp	r3, #8
 8006fb0:	d128      	bne.n	8007004 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	f003 0308 	and.w	r3, r3, #8
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d121      	bne.n	8007004 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f06f 0208 	mvn.w	r2, #8
 8006fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2204      	movs	r2, #4
 8006fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d005      	beq.n	8006fea <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	4798      	blx	r3
 8006fe8:	e009      	b.n	8006ffe <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 0310 	and.w	r3, r3, #16
 800700e:	2b10      	cmp	r3, #16
 8007010:	d128      	bne.n	8007064 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f003 0310 	and.w	r3, r3, #16
 800701c:	2b10      	cmp	r3, #16
 800701e:	d121      	bne.n	8007064 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f06f 0210 	mvn.w	r2, #16
 8007028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2208      	movs	r2, #8
 800702e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800703a:	2b00      	cmp	r3, #0
 800703c:	d005      	beq.n	800704a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	4798      	blx	r3
 8007048:	e009      	b.n	800705e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b01      	cmp	r3, #1
 8007070:	d110      	bne.n	8007094 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b01      	cmp	r3, #1
 800707e:	d109      	bne.n	8007094 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f06f 0201 	mvn.w	r2, #1
 8007088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800709e:	2b80      	cmp	r3, #128	; 0x80
 80070a0:	d110      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ac:	2b80      	cmp	r3, #128	; 0x80
 80070ae:	d109      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ce:	2b40      	cmp	r3, #64	; 0x40
 80070d0:	d110      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070dc:	2b40      	cmp	r3, #64	; 0x40
 80070de:	d109      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b20      	cmp	r3, #32
 8007100:	d110      	bne.n	8007124 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f003 0320 	and.w	r3, r3, #32
 800710c:	2b20      	cmp	r3, #32
 800710e:	d109      	bne.n	8007124 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f06f 0220 	mvn.w	r2, #32
 8007118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007124:	bf00      	nop
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007142:	2b01      	cmp	r3, #1
 8007144:	d101      	bne.n	800714a <HAL_TIM_IC_ConfigChannel+0x1e>
 8007146:	2302      	movs	r3, #2
 8007148:	e088      	b.n	800725c <HAL_TIM_IC_ConfigChannel+0x130>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d11b      	bne.n	8007190 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6818      	ldr	r0, [r3, #0]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	6819      	ldr	r1, [r3, #0]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f000 fcaa 	bl	8007ac0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 020c 	bic.w	r2, r2, #12
 800717a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6999      	ldr	r1, [r3, #24]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	619a      	str	r2, [r3, #24]
 800718e:	e060      	b.n	8007252 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b04      	cmp	r3, #4
 8007194:	d11c      	bne.n	80071d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6818      	ldr	r0, [r3, #0]
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	6819      	ldr	r1, [r3, #0]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	f000 fd22 	bl	8007bee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	699a      	ldr	r2, [r3, #24]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80071b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6999      	ldr	r1, [r3, #24]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	021a      	lsls	r2, r3, #8
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	619a      	str	r2, [r3, #24]
 80071ce:	e040      	b.n	8007252 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b08      	cmp	r3, #8
 80071d4:	d11b      	bne.n	800720e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	6819      	ldr	r1, [r3, #0]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f000 fd6f 	bl	8007cc8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69da      	ldr	r2, [r3, #28]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 020c 	bic.w	r2, r2, #12
 80071f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69d9      	ldr	r1, [r3, #28]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	61da      	str	r2, [r3, #28]
 800720c:	e021      	b.n	8007252 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b0c      	cmp	r3, #12
 8007212:	d11c      	bne.n	800724e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	6819      	ldr	r1, [r3, #0]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f000 fd8c 	bl	8007d40 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	69da      	ldr	r2, [r3, #28]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007236:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69d9      	ldr	r1, [r3, #28]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	021a      	lsls	r2, r3, #8
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	61da      	str	r2, [r3, #28]
 800724c:	e001      	b.n	8007252 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800725a:	7dfb      	ldrb	r3, [r7, #23]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007270:	2300      	movs	r3, #0
 8007272:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800727a:	2b01      	cmp	r3, #1
 800727c:	d101      	bne.n	8007282 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800727e:	2302      	movs	r3, #2
 8007280:	e0ae      	b.n	80073e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b0c      	cmp	r3, #12
 800728e:	f200 809f 	bhi.w	80073d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007292:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007298:	080072cd 	.word	0x080072cd
 800729c:	080073d1 	.word	0x080073d1
 80072a0:	080073d1 	.word	0x080073d1
 80072a4:	080073d1 	.word	0x080073d1
 80072a8:	0800730d 	.word	0x0800730d
 80072ac:	080073d1 	.word	0x080073d1
 80072b0:	080073d1 	.word	0x080073d1
 80072b4:	080073d1 	.word	0x080073d1
 80072b8:	0800734f 	.word	0x0800734f
 80072bc:	080073d1 	.word	0x080073d1
 80072c0:	080073d1 	.word	0x080073d1
 80072c4:	080073d1 	.word	0x080073d1
 80072c8:	0800738f 	.word	0x0800738f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68b9      	ldr	r1, [r7, #8]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fa68 	bl	80077a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0208 	orr.w	r2, r2, #8
 80072e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699a      	ldr	r2, [r3, #24]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0204 	bic.w	r2, r2, #4
 80072f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6999      	ldr	r1, [r3, #24]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	691a      	ldr	r2, [r3, #16]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	619a      	str	r2, [r3, #24]
      break;
 800730a:	e064      	b.n	80073d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68b9      	ldr	r1, [r7, #8]
 8007312:	4618      	mov	r0, r3
 8007314:	f000 faae 	bl	8007874 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	699a      	ldr	r2, [r3, #24]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699a      	ldr	r2, [r3, #24]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6999      	ldr	r1, [r3, #24]
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	021a      	lsls	r2, r3, #8
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	619a      	str	r2, [r3, #24]
      break;
 800734c:	e043      	b.n	80073d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68b9      	ldr	r1, [r7, #8]
 8007354:	4618      	mov	r0, r3
 8007356:	f000 faf9 	bl	800794c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	69da      	ldr	r2, [r3, #28]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f042 0208 	orr.w	r2, r2, #8
 8007368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69da      	ldr	r2, [r3, #28]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 0204 	bic.w	r2, r2, #4
 8007378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69d9      	ldr	r1, [r3, #28]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	61da      	str	r2, [r3, #28]
      break;
 800738c:	e023      	b.n	80073d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	4618      	mov	r0, r3
 8007396:	f000 fb43 	bl	8007a20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	69da      	ldr	r2, [r3, #28]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69da      	ldr	r2, [r3, #28]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69d9      	ldr	r1, [r3, #28]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	021a      	lsls	r2, r3, #8
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	61da      	str	r2, [r3, #28]
      break;
 80073ce:	e002      	b.n	80073d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	75fb      	strb	r3, [r7, #23]
      break;
 80073d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073de:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d101      	bne.n	8007404 <HAL_TIM_ConfigClockSource+0x1c>
 8007400:	2302      	movs	r3, #2
 8007402:	e0b4      	b.n	800756e <HAL_TIM_ConfigClockSource+0x186>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800742a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800743c:	d03e      	beq.n	80074bc <HAL_TIM_ConfigClockSource+0xd4>
 800743e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007442:	f200 8087 	bhi.w	8007554 <HAL_TIM_ConfigClockSource+0x16c>
 8007446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800744a:	f000 8086 	beq.w	800755a <HAL_TIM_ConfigClockSource+0x172>
 800744e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007452:	d87f      	bhi.n	8007554 <HAL_TIM_ConfigClockSource+0x16c>
 8007454:	2b70      	cmp	r3, #112	; 0x70
 8007456:	d01a      	beq.n	800748e <HAL_TIM_ConfigClockSource+0xa6>
 8007458:	2b70      	cmp	r3, #112	; 0x70
 800745a:	d87b      	bhi.n	8007554 <HAL_TIM_ConfigClockSource+0x16c>
 800745c:	2b60      	cmp	r3, #96	; 0x60
 800745e:	d050      	beq.n	8007502 <HAL_TIM_ConfigClockSource+0x11a>
 8007460:	2b60      	cmp	r3, #96	; 0x60
 8007462:	d877      	bhi.n	8007554 <HAL_TIM_ConfigClockSource+0x16c>
 8007464:	2b50      	cmp	r3, #80	; 0x50
 8007466:	d03c      	beq.n	80074e2 <HAL_TIM_ConfigClockSource+0xfa>
 8007468:	2b50      	cmp	r3, #80	; 0x50
 800746a:	d873      	bhi.n	8007554 <HAL_TIM_ConfigClockSource+0x16c>
 800746c:	2b40      	cmp	r3, #64	; 0x40
 800746e:	d058      	beq.n	8007522 <HAL_TIM_ConfigClockSource+0x13a>
 8007470:	2b40      	cmp	r3, #64	; 0x40
 8007472:	d86f      	bhi.n	8007554 <HAL_TIM_ConfigClockSource+0x16c>
 8007474:	2b30      	cmp	r3, #48	; 0x30
 8007476:	d064      	beq.n	8007542 <HAL_TIM_ConfigClockSource+0x15a>
 8007478:	2b30      	cmp	r3, #48	; 0x30
 800747a:	d86b      	bhi.n	8007554 <HAL_TIM_ConfigClockSource+0x16c>
 800747c:	2b20      	cmp	r3, #32
 800747e:	d060      	beq.n	8007542 <HAL_TIM_ConfigClockSource+0x15a>
 8007480:	2b20      	cmp	r3, #32
 8007482:	d867      	bhi.n	8007554 <HAL_TIM_ConfigClockSource+0x16c>
 8007484:	2b00      	cmp	r3, #0
 8007486:	d05c      	beq.n	8007542 <HAL_TIM_ConfigClockSource+0x15a>
 8007488:	2b10      	cmp	r3, #16
 800748a:	d05a      	beq.n	8007542 <HAL_TIM_ConfigClockSource+0x15a>
 800748c:	e062      	b.n	8007554 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6818      	ldr	r0, [r3, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	6899      	ldr	r1, [r3, #8]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f000 fca7 	bl	8007df0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	609a      	str	r2, [r3, #8]
      break;
 80074ba:	e04f      	b.n	800755c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6818      	ldr	r0, [r3, #0]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	6899      	ldr	r1, [r3, #8]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f000 fc90 	bl	8007df0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689a      	ldr	r2, [r3, #8]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074de:	609a      	str	r2, [r3, #8]
      break;
 80074e0:	e03c      	b.n	800755c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6818      	ldr	r0, [r3, #0]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	6859      	ldr	r1, [r3, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	461a      	mov	r2, r3
 80074f0:	f000 fb4e 	bl	8007b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2150      	movs	r1, #80	; 0x50
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fc5d 	bl	8007dba <TIM_ITRx_SetConfig>
      break;
 8007500:	e02c      	b.n	800755c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6818      	ldr	r0, [r3, #0]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	6859      	ldr	r1, [r3, #4]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	461a      	mov	r2, r3
 8007510:	f000 fbaa 	bl	8007c68 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2160      	movs	r1, #96	; 0x60
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fc4d 	bl	8007dba <TIM_ITRx_SetConfig>
      break;
 8007520:	e01c      	b.n	800755c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6818      	ldr	r0, [r3, #0]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	6859      	ldr	r1, [r3, #4]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	461a      	mov	r2, r3
 8007530:	f000 fb2e 	bl	8007b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2140      	movs	r1, #64	; 0x40
 800753a:	4618      	mov	r0, r3
 800753c:	f000 fc3d 	bl	8007dba <TIM_ITRx_SetConfig>
      break;
 8007540:	e00c      	b.n	800755c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4619      	mov	r1, r3
 800754c:	4610      	mov	r0, r2
 800754e:	f000 fc34 	bl	8007dba <TIM_ITRx_SetConfig>
      break;
 8007552:	e003      	b.n	800755c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	73fb      	strb	r3, [r7, #15]
      break;
 8007558:	e000      	b.n	800755c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800755a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b0c      	cmp	r3, #12
 800758a:	d831      	bhi.n	80075f0 <HAL_TIM_ReadCapturedValue+0x78>
 800758c:	a201      	add	r2, pc, #4	; (adr r2, 8007594 <HAL_TIM_ReadCapturedValue+0x1c>)
 800758e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007592:	bf00      	nop
 8007594:	080075c9 	.word	0x080075c9
 8007598:	080075f1 	.word	0x080075f1
 800759c:	080075f1 	.word	0x080075f1
 80075a0:	080075f1 	.word	0x080075f1
 80075a4:	080075d3 	.word	0x080075d3
 80075a8:	080075f1 	.word	0x080075f1
 80075ac:	080075f1 	.word	0x080075f1
 80075b0:	080075f1 	.word	0x080075f1
 80075b4:	080075dd 	.word	0x080075dd
 80075b8:	080075f1 	.word	0x080075f1
 80075bc:	080075f1 	.word	0x080075f1
 80075c0:	080075f1 	.word	0x080075f1
 80075c4:	080075e7 	.word	0x080075e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ce:	60fb      	str	r3, [r7, #12]

      break;
 80075d0:	e00f      	b.n	80075f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	60fb      	str	r3, [r7, #12]

      break;
 80075da:	e00a      	b.n	80075f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e2:	60fb      	str	r3, [r7, #12]

      break;
 80075e4:	e005      	b.n	80075f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ec:	60fb      	str	r3, [r7, #12]

      break;
 80075ee:	e000      	b.n	80075f2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80075f0:	bf00      	nop
  }

  return tmpreg;
 80075f2:	68fb      	ldr	r3, [r7, #12]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  return htim->State;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800769a:	b2db      	uxtb	r3, r3
}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a34      	ldr	r2, [pc, #208]	; (800778c <TIM_Base_SetConfig+0xe4>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d00f      	beq.n	80076e0 <TIM_Base_SetConfig+0x38>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c6:	d00b      	beq.n	80076e0 <TIM_Base_SetConfig+0x38>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a31      	ldr	r2, [pc, #196]	; (8007790 <TIM_Base_SetConfig+0xe8>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d007      	beq.n	80076e0 <TIM_Base_SetConfig+0x38>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a30      	ldr	r2, [pc, #192]	; (8007794 <TIM_Base_SetConfig+0xec>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d003      	beq.n	80076e0 <TIM_Base_SetConfig+0x38>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a2f      	ldr	r2, [pc, #188]	; (8007798 <TIM_Base_SetConfig+0xf0>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d108      	bne.n	80076f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a25      	ldr	r2, [pc, #148]	; (800778c <TIM_Base_SetConfig+0xe4>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d01b      	beq.n	8007732 <TIM_Base_SetConfig+0x8a>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007700:	d017      	beq.n	8007732 <TIM_Base_SetConfig+0x8a>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a22      	ldr	r2, [pc, #136]	; (8007790 <TIM_Base_SetConfig+0xe8>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d013      	beq.n	8007732 <TIM_Base_SetConfig+0x8a>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a21      	ldr	r2, [pc, #132]	; (8007794 <TIM_Base_SetConfig+0xec>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d00f      	beq.n	8007732 <TIM_Base_SetConfig+0x8a>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a20      	ldr	r2, [pc, #128]	; (8007798 <TIM_Base_SetConfig+0xf0>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00b      	beq.n	8007732 <TIM_Base_SetConfig+0x8a>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a1f      	ldr	r2, [pc, #124]	; (800779c <TIM_Base_SetConfig+0xf4>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d007      	beq.n	8007732 <TIM_Base_SetConfig+0x8a>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a1e      	ldr	r2, [pc, #120]	; (80077a0 <TIM_Base_SetConfig+0xf8>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d003      	beq.n	8007732 <TIM_Base_SetConfig+0x8a>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a1d      	ldr	r2, [pc, #116]	; (80077a4 <TIM_Base_SetConfig+0xfc>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d108      	bne.n	8007744 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	4313      	orrs	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	4313      	orrs	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a08      	ldr	r2, [pc, #32]	; (800778c <TIM_Base_SetConfig+0xe4>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d103      	bne.n	8007778 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	691a      	ldr	r2, [r3, #16]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	615a      	str	r2, [r3, #20]
}
 800777e:	bf00      	nop
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40010000 	.word	0x40010000
 8007790:	40000400 	.word	0x40000400
 8007794:	40000800 	.word	0x40000800
 8007798:	40000c00 	.word	0x40000c00
 800779c:	40014000 	.word	0x40014000
 80077a0:	40014400 	.word	0x40014400
 80077a4:	40014800 	.word	0x40014800

080077a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	f023 0201 	bic.w	r2, r3, #1
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f023 0303 	bic.w	r3, r3, #3
 80077de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f023 0302 	bic.w	r3, r3, #2
 80077f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a1c      	ldr	r2, [pc, #112]	; (8007870 <TIM_OC1_SetConfig+0xc8>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d10c      	bne.n	800781e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f023 0308 	bic.w	r3, r3, #8
 800780a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	4313      	orrs	r3, r2
 8007814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f023 0304 	bic.w	r3, r3, #4
 800781c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a13      	ldr	r2, [pc, #76]	; (8007870 <TIM_OC1_SetConfig+0xc8>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d111      	bne.n	800784a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800782c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	4313      	orrs	r3, r2
 800783e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	4313      	orrs	r3, r2
 8007848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	621a      	str	r2, [r3, #32]
}
 8007864:	bf00      	nop
 8007866:	371c      	adds	r7, #28
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	40010000 	.word	0x40010000

08007874 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	f023 0210 	bic.w	r2, r3, #16
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	021b      	lsls	r3, r3, #8
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f023 0320 	bic.w	r3, r3, #32
 80078be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	011b      	lsls	r3, r3, #4
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a1e      	ldr	r2, [pc, #120]	; (8007948 <TIM_OC2_SetConfig+0xd4>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d10d      	bne.n	80078f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	011b      	lsls	r3, r3, #4
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a15      	ldr	r2, [pc, #84]	; (8007948 <TIM_OC2_SetConfig+0xd4>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d113      	bne.n	8007920 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	4313      	orrs	r3, r2
 8007912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	621a      	str	r2, [r3, #32]
}
 800793a:	bf00      	nop
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	40010000 	.word	0x40010000

0800794c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f023 0303 	bic.w	r3, r3, #3
 8007982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	021b      	lsls	r3, r3, #8
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	4313      	orrs	r3, r2
 80079a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a1d      	ldr	r2, [pc, #116]	; (8007a1c <TIM_OC3_SetConfig+0xd0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d10d      	bne.n	80079c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	021b      	lsls	r3, r3, #8
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a14      	ldr	r2, [pc, #80]	; (8007a1c <TIM_OC3_SetConfig+0xd0>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d113      	bne.n	80079f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	621a      	str	r2, [r3, #32]
}
 8007a10:	bf00      	nop
 8007a12:	371c      	adds	r7, #28
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	40010000 	.word	0x40010000

08007a20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	021b      	lsls	r3, r3, #8
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	031b      	lsls	r3, r3, #12
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a10      	ldr	r2, [pc, #64]	; (8007abc <TIM_OC4_SetConfig+0x9c>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d109      	bne.n	8007a94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	019b      	lsls	r3, r3, #6
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	621a      	str	r2, [r3, #32]
}
 8007aae:	bf00      	nop
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	40010000 	.word	0x40010000

08007ac0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
 8007acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	f023 0201 	bic.w	r2, r3, #1
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4a24      	ldr	r2, [pc, #144]	; (8007b7c <TIM_TI1_SetConfig+0xbc>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d013      	beq.n	8007b16 <TIM_TI1_SetConfig+0x56>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af4:	d00f      	beq.n	8007b16 <TIM_TI1_SetConfig+0x56>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4a21      	ldr	r2, [pc, #132]	; (8007b80 <TIM_TI1_SetConfig+0xc0>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d00b      	beq.n	8007b16 <TIM_TI1_SetConfig+0x56>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4a20      	ldr	r2, [pc, #128]	; (8007b84 <TIM_TI1_SetConfig+0xc4>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d007      	beq.n	8007b16 <TIM_TI1_SetConfig+0x56>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4a1f      	ldr	r2, [pc, #124]	; (8007b88 <TIM_TI1_SetConfig+0xc8>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d003      	beq.n	8007b16 <TIM_TI1_SetConfig+0x56>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	4a1e      	ldr	r2, [pc, #120]	; (8007b8c <TIM_TI1_SetConfig+0xcc>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d101      	bne.n	8007b1a <TIM_TI1_SetConfig+0x5a>
 8007b16:	2301      	movs	r3, #1
 8007b18:	e000      	b.n	8007b1c <TIM_TI1_SetConfig+0x5c>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d008      	beq.n	8007b32 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f023 0303 	bic.w	r3, r3, #3
 8007b26:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	e003      	b.n	8007b3a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f043 0301 	orr.w	r3, r3, #1
 8007b38:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	011b      	lsls	r3, r3, #4
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	f023 030a 	bic.w	r3, r3, #10
 8007b54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	f003 030a 	and.w	r3, r3, #10
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	621a      	str	r2, [r3, #32]
}
 8007b6e:	bf00      	nop
 8007b70:	371c      	adds	r7, #28
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	40010000 	.word	0x40010000
 8007b80:	40000400 	.word	0x40000400
 8007b84:	40000800 	.word	0x40000800
 8007b88:	40000c00 	.word	0x40000c00
 8007b8c:	40014000 	.word	0x40014000

08007b90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b087      	sub	sp, #28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	f023 0201 	bic.w	r2, r3, #1
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	011b      	lsls	r3, r3, #4
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f023 030a 	bic.w	r3, r3, #10
 8007bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	621a      	str	r2, [r3, #32]
}
 8007be2:	bf00      	nop
 8007be4:	371c      	adds	r7, #28
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b087      	sub	sp, #28
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	607a      	str	r2, [r7, #4]
 8007bfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
 8007c00:	f023 0210 	bic.w	r2, r3, #16
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	021b      	lsls	r3, r3, #8
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	031b      	lsls	r3, r3, #12
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c40:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	011b      	lsls	r3, r3, #4
 8007c46:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	621a      	str	r2, [r3, #32]
}
 8007c5c:	bf00      	nop
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	f023 0210 	bic.w	r2, r3, #16
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	031b      	lsls	r3, r3, #12
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ca4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	011b      	lsls	r3, r3, #4
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	621a      	str	r2, [r3, #32]
}
 8007cbc:	bf00      	nop
 8007cbe:	371c      	adds	r7, #28
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b087      	sub	sp, #28
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f023 0303 	bic.w	r3, r3, #3
 8007cf4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	011b      	lsls	r3, r3, #4
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007d18:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	021b      	lsls	r3, r3, #8
 8007d1e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	621a      	str	r2, [r3, #32]
}
 8007d34:	bf00      	nop
 8007d36:	371c      	adds	r7, #28
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d7e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	031b      	lsls	r3, r3, #12
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007d92:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	031b      	lsls	r3, r3, #12
 8007d98:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	621a      	str	r2, [r3, #32]
}
 8007dae:	bf00      	nop
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b085      	sub	sp, #20
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	f043 0307 	orr.w	r3, r3, #7
 8007ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	609a      	str	r2, [r3, #8]
}
 8007de4:	bf00      	nop
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	021a      	lsls	r2, r3, #8
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	431a      	orrs	r2, r3
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	609a      	str	r2, [r3, #8]
}
 8007e24:	bf00      	nop
 8007e26:	371c      	adds	r7, #28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f003 031f 	and.w	r3, r3, #31
 8007e42:	2201      	movs	r2, #1
 8007e44:	fa02 f303 	lsl.w	r3, r2, r3
 8007e48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6a1a      	ldr	r2, [r3, #32]
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	43db      	mvns	r3, r3
 8007e52:	401a      	ands	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6a1a      	ldr	r2, [r3, #32]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f003 031f 	and.w	r3, r3, #31
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	fa01 f303 	lsl.w	r3, r1, r3
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	621a      	str	r2, [r3, #32]
}
 8007e6e:	bf00      	nop
 8007e70:	371c      	adds	r7, #28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
	...

08007e7c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a1c      	ldr	r2, [pc, #112]	; (8007ef8 <TIM_ResetCallback+0x7c>)
 8007e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a1b      	ldr	r2, [pc, #108]	; (8007efc <TIM_ResetCallback+0x80>)
 8007e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a1a      	ldr	r2, [pc, #104]	; (8007f00 <TIM_ResetCallback+0x84>)
 8007e98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a19      	ldr	r2, [pc, #100]	; (8007f04 <TIM_ResetCallback+0x88>)
 8007ea0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a18      	ldr	r2, [pc, #96]	; (8007f08 <TIM_ResetCallback+0x8c>)
 8007ea8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a17      	ldr	r2, [pc, #92]	; (8007f0c <TIM_ResetCallback+0x90>)
 8007eb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a16      	ldr	r2, [pc, #88]	; (8007f10 <TIM_ResetCallback+0x94>)
 8007eb8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a15      	ldr	r2, [pc, #84]	; (8007f14 <TIM_ResetCallback+0x98>)
 8007ec0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a14      	ldr	r2, [pc, #80]	; (8007f18 <TIM_ResetCallback+0x9c>)
 8007ec8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a13      	ldr	r2, [pc, #76]	; (8007f1c <TIM_ResetCallback+0xa0>)
 8007ed0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a12      	ldr	r2, [pc, #72]	; (8007f20 <TIM_ResetCallback+0xa4>)
 8007ed8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a11      	ldr	r2, [pc, #68]	; (8007f24 <TIM_ResetCallback+0xa8>)
 8007ee0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a10      	ldr	r2, [pc, #64]	; (8007f28 <TIM_ResetCallback+0xac>)
 8007ee8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	08009ea5 	.word	0x08009ea5
 8007efc:	08007601 	.word	0x08007601
 8007f00:	08007665 	.word	0x08007665
 8007f04:	08007679 	.word	0x08007679
 8007f08:	08009481 	.word	0x08009481
 8007f0c:	08007629 	.word	0x08007629
 8007f10:	08007615 	.word	0x08007615
 8007f14:	0800763d 	.word	0x0800763d
 8007f18:	08007651 	.word	0x08007651
 8007f1c:	08009b81 	.word	0x08009b81
 8007f20:	08008009 	.word	0x08008009
 8007f24:	0800801d 	.word	0x0800801d
 8007f28:	08008031 	.word	0x08008031

08007f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d101      	bne.n	8007f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e050      	b.n	8007fe6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a1c      	ldr	r2, [pc, #112]	; (8007ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d018      	beq.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f90:	d013      	beq.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a18      	ldr	r2, [pc, #96]	; (8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d00e      	beq.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a16      	ldr	r2, [pc, #88]	; (8007ffc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d009      	beq.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a15      	ldr	r2, [pc, #84]	; (8008000 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d004      	beq.n	8007fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a13      	ldr	r2, [pc, #76]	; (8008004 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d10c      	bne.n	8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	40010000 	.word	0x40010000
 8007ff8:	40000400 	.word	0x40000400
 8007ffc:	40000800 	.word	0x40000800
 8008000:	40000c00 	.word	0x40000c00
 8008004:	40014000 	.word	0x40014000

08008008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e04a      	b.n	80080ec <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d111      	bne.n	8008086 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fbf8 	bl	8008860 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008074:	2b00      	cmp	r3, #0
 8008076:	d102      	bne.n	800807e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a1e      	ldr	r2, [pc, #120]	; (80080f4 <HAL_UART_Init+0xb0>)
 800807c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2224      	movs	r2, #36	; 0x24
 800808a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68da      	ldr	r2, [r3, #12]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800809c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fdf2 	bl	8008c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	691a      	ldr	r2, [r3, #16]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	695a      	ldr	r2, [r3, #20]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080c2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68da      	ldr	r2, [r3, #12]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080d2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2220      	movs	r2, #32
 80080de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2220      	movs	r2, #32
 80080e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	08003801 	.word	0x08003801

080080f8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e029      	b.n	800815e <HAL_UART_DeInit+0x66>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2224      	movs	r2, #36	; 0x24
 800810e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68da      	ldr	r2, [r3, #12]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008120:	60da      	str	r2, [r3, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if (huart->MspDeInitCallback == NULL)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008126:	2b00      	cmp	r3, #0
 8008128:	d102      	bne.n	8008130 <HAL_UART_DeInit+0x38>
  {
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a0e      	ldr	r2, [pc, #56]	; (8008168 <HAL_UART_DeInit+0x70>)
 800812e:	671a      	str	r2, [r3, #112]	; 0x70
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	4798      	blx	r3
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	08003891 	.word	0x08003891

0800816c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	4613      	mov	r3, r2
 8008178:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b20      	cmp	r3, #32
 8008184:	d130      	bne.n	80081e8 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <HAL_UART_Transmit_IT+0x26>
 800818c:	88fb      	ldrh	r3, [r7, #6]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e029      	b.n	80081ea <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800819c:	2b01      	cmp	r3, #1
 800819e:	d101      	bne.n	80081a4 <HAL_UART_Transmit_IT+0x38>
 80081a0:	2302      	movs	r3, #2
 80081a2:	e022      	b.n	80081ea <HAL_UART_Transmit_IT+0x7e>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	88fa      	ldrh	r2, [r7, #6]
 80081b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	88fa      	ldrh	r2, [r7, #6]
 80081bc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2221      	movs	r2, #33	; 0x21
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68da      	ldr	r2, [r3, #12]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081e2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	e000      	b.n	80081ea <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80081e8:	2302      	movs	r3, #2
  }
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	60b9      	str	r1, [r7, #8]
 8008200:	4613      	mov	r3, r2
 8008202:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b20      	cmp	r3, #32
 800820e:	d11d      	bne.n	800824c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <HAL_UART_Receive_IT+0x26>
 8008216:	88fb      	ldrh	r3, [r7, #6]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e016      	b.n	800824e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008226:	2b01      	cmp	r3, #1
 8008228:	d101      	bne.n	800822e <HAL_UART_Receive_IT+0x38>
 800822a:	2302      	movs	r3, #2
 800822c:	e00f      	b.n	800824e <HAL_UART_Receive_IT+0x58>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800823c:	88fb      	ldrh	r3, [r7, #6]
 800823e:	461a      	mov	r2, r3
 8008240:	68b9      	ldr	r1, [r7, #8]
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f000 fb44 	bl	80088d0 <UART_Start_Receive_IT>
 8008248:	4603      	mov	r3, r0
 800824a:	e000      	b.n	800824e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800824c:	2302      	movs	r3, #2
  }
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
	...

08008258 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b0ba      	sub	sp, #232	; 0xe8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800827e:	2300      	movs	r3, #0
 8008280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008284:	2300      	movs	r3, #0
 8008286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800828a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800828e:	f003 030f 	and.w	r3, r3, #15
 8008292:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008296:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10f      	bne.n	80082be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800829e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a2:	f003 0320 	and.w	r3, r3, #32
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d009      	beq.n	80082be <HAL_UART_IRQHandler+0x66>
 80082aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ae:	f003 0320 	and.w	r3, r3, #32
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fc29 	bl	8008b0e <UART_Receive_IT>
      return;
 80082bc:	e25b      	b.n	8008776 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80082be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 80e1 	beq.w	800848a <HAL_UART_IRQHandler+0x232>
 80082c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d106      	bne.n	80082e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80082d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 80d4 	beq.w	800848a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80082e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00b      	beq.n	8008306 <HAL_UART_IRQHandler+0xae>
 80082ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d005      	beq.n	8008306 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fe:	f043 0201 	orr.w	r2, r3, #1
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800830a:	f003 0304 	and.w	r3, r3, #4
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00b      	beq.n	800832a <HAL_UART_IRQHandler+0xd2>
 8008312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d005      	beq.n	800832a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008322:	f043 0202 	orr.w	r2, r3, #2
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800832a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00b      	beq.n	800834e <HAL_UART_IRQHandler+0xf6>
 8008336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b00      	cmp	r3, #0
 8008340:	d005      	beq.n	800834e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008346:	f043 0204 	orr.w	r2, r3, #4
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800834e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008352:	f003 0308 	and.w	r3, r3, #8
 8008356:	2b00      	cmp	r3, #0
 8008358:	d011      	beq.n	800837e <HAL_UART_IRQHandler+0x126>
 800835a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b00      	cmp	r3, #0
 8008364:	d105      	bne.n	8008372 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b00      	cmp	r3, #0
 8008370:	d005      	beq.n	800837e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008376:	f043 0208 	orr.w	r2, r3, #8
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 81f2 	beq.w	800876c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800838c:	f003 0320 	and.w	r3, r3, #32
 8008390:	2b00      	cmp	r3, #0
 8008392:	d008      	beq.n	80083a6 <HAL_UART_IRQHandler+0x14e>
 8008394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008398:	f003 0320 	and.w	r3, r3, #32
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fbb4 	bl	8008b0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b0:	2b40      	cmp	r3, #64	; 0x40
 80083b2:	bf0c      	ite	eq
 80083b4:	2301      	moveq	r3, #1
 80083b6:	2300      	movne	r3, #0
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c2:	f003 0308 	and.w	r3, r3, #8
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d103      	bne.n	80083d2 <HAL_UART_IRQHandler+0x17a>
 80083ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d051      	beq.n	8008476 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 faba 	bl	800894c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e2:	2b40      	cmp	r3, #64	; 0x40
 80083e4:	d142      	bne.n	800846c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3314      	adds	r3, #20
 80083ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083f4:	e853 3f00 	ldrex	r3, [r3]
 80083f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80083fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008404:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3314      	adds	r3, #20
 800840e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008412:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800841e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800842a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1d9      	bne.n	80083e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008436:	2b00      	cmp	r3, #0
 8008438:	d013      	beq.n	8008462 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843e:	4a7f      	ldr	r2, [pc, #508]	; (800863c <HAL_UART_IRQHandler+0x3e4>)
 8008440:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008446:	4618      	mov	r0, r3
 8008448:	f7fc fcee 	bl	8004e28 <HAL_DMA_Abort_IT>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d019      	beq.n	8008486 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800845c:	4610      	mov	r0, r2
 800845e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008460:	e011      	b.n	8008486 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800846a:	e00c      	b.n	8008486 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008474:	e007      	b.n	8008486 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008484:	e172      	b.n	800876c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008486:	bf00      	nop
    return;
 8008488:	e170      	b.n	800876c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848e:	2b01      	cmp	r3, #1
 8008490:	f040 814c 	bne.w	800872c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008498:	f003 0310 	and.w	r3, r3, #16
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 8145 	beq.w	800872c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80084a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084a6:	f003 0310 	and.w	r3, r3, #16
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 813e 	beq.w	800872c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084b0:	2300      	movs	r3, #0
 80084b2:	60bb      	str	r3, [r7, #8]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60bb      	str	r3, [r7, #8]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	60bb      	str	r3, [r7, #8]
 80084c4:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d0:	2b40      	cmp	r3, #64	; 0x40
 80084d2:	f040 80b5 	bne.w	8008640 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80084e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 8142 	beq.w	8008770 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084f4:	429a      	cmp	r2, r3
 80084f6:	f080 813b 	bcs.w	8008770 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008500:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800850c:	f000 8088 	beq.w	8008620 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	330c      	adds	r3, #12
 8008516:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800851e:	e853 3f00 	ldrex	r3, [r3]
 8008522:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800852a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800852e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	330c      	adds	r3, #12
 8008538:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800853c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008540:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008548:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800854c:	e841 2300 	strex	r3, r2, [r1]
 8008550:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008554:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1d9      	bne.n	8008510 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3314      	adds	r3, #20
 8008562:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008566:	e853 3f00 	ldrex	r3, [r3]
 800856a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800856c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800856e:	f023 0301 	bic.w	r3, r3, #1
 8008572:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	3314      	adds	r3, #20
 800857c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008580:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008584:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008586:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008588:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800858c:	e841 2300 	strex	r3, r2, [r1]
 8008590:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1e1      	bne.n	800855c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	3314      	adds	r3, #20
 800859e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085a2:	e853 3f00 	ldrex	r3, [r3]
 80085a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80085a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3314      	adds	r3, #20
 80085b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80085bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80085be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80085c4:	e841 2300 	strex	r3, r2, [r1]
 80085c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80085ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1e3      	bne.n	8008598 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2220      	movs	r2, #32
 80085d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	330c      	adds	r3, #12
 80085e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e8:	e853 3f00 	ldrex	r3, [r3]
 80085ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085f0:	f023 0310 	bic.w	r3, r3, #16
 80085f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	330c      	adds	r3, #12
 80085fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008602:	65ba      	str	r2, [r7, #88]	; 0x58
 8008604:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008608:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e3      	bne.n	80085de <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861a:	4618      	mov	r0, r3
 800861c:	f7fc fb94 	bl	8004d48 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800862c:	b292      	uxth	r2, r2
 800862e:	1a8a      	subs	r2, r1, r2
 8008630:	b292      	uxth	r2, r2
 8008632:	4611      	mov	r1, r2
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008638:	e09a      	b.n	8008770 <HAL_UART_IRQHandler+0x518>
 800863a:	bf00      	nop
 800863c:	08008a13 	.word	0x08008a13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008648:	b29b      	uxth	r3, r3
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008654:	b29b      	uxth	r3, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 808c 	beq.w	8008774 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800865c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 8087 	beq.w	8008774 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	330c      	adds	r3, #12
 800866c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008670:	e853 3f00 	ldrex	r3, [r3]
 8008674:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008678:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800867c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	330c      	adds	r3, #12
 8008686:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800868a:	647a      	str	r2, [r7, #68]	; 0x44
 800868c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008690:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008692:	e841 2300 	strex	r3, r2, [r1]
 8008696:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1e3      	bne.n	8008666 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3314      	adds	r3, #20
 80086a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	623b      	str	r3, [r7, #32]
   return(result);
 80086ae:	6a3b      	ldr	r3, [r7, #32]
 80086b0:	f023 0301 	bic.w	r3, r3, #1
 80086b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3314      	adds	r3, #20
 80086be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80086c2:	633a      	str	r2, [r7, #48]	; 0x30
 80086c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ca:	e841 2300 	strex	r3, r2, [r1]
 80086ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e3      	bne.n	800869e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2220      	movs	r2, #32
 80086da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	330c      	adds	r3, #12
 80086ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	e853 3f00 	ldrex	r3, [r3]
 80086f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f023 0310 	bic.w	r3, r3, #16
 80086fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	330c      	adds	r3, #12
 8008704:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008708:	61fa      	str	r2, [r7, #28]
 800870a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870c:	69b9      	ldr	r1, [r7, #24]
 800870e:	69fa      	ldr	r2, [r7, #28]
 8008710:	e841 2300 	strex	r3, r2, [r1]
 8008714:	617b      	str	r3, [r7, #20]
   return(result);
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1e3      	bne.n	80086e4 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008720:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8008724:	4611      	mov	r1, r2
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800872a:	e023      	b.n	8008774 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800872c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008734:	2b00      	cmp	r3, #0
 8008736:	d009      	beq.n	800874c <HAL_UART_IRQHandler+0x4f4>
 8008738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800873c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008740:	2b00      	cmp	r3, #0
 8008742:	d003      	beq.n	800874c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f979 	bl	8008a3c <UART_Transmit_IT>
    return;
 800874a:	e014      	b.n	8008776 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800874c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00e      	beq.n	8008776 <HAL_UART_IRQHandler+0x51e>
 8008758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800875c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008760:	2b00      	cmp	r3, #0
 8008762:	d008      	beq.n	8008776 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f9b9 	bl	8008adc <UART_EndTransmit_IT>
    return;
 800876a:	e004      	b.n	8008776 <HAL_UART_IRQHandler+0x51e>
    return;
 800876c:	bf00      	nop
 800876e:	e002      	b.n	8008776 <HAL_UART_IRQHandler+0x51e>
      return;
 8008770:	bf00      	nop
 8008772:	e000      	b.n	8008776 <HAL_UART_IRQHandler+0x51e>
      return;
 8008774:	bf00      	nop
  }
}
 8008776:	37e8      	adds	r7, #232	; 0xe8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8008814:	2300      	movs	r3, #0
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	2300      	movs	r3, #0
 800881a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008822:	b2db      	uxtb	r3, r3
 8008824:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800882c:	b2db      	uxtb	r3, r3
 800882e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	b2da      	uxtb	r2, r3
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	b2db      	uxtb	r3, r3
 8008838:	4313      	orrs	r3, r2
 800883a:	b2db      	uxtb	r3, r3
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a10      	ldr	r2, [pc, #64]	; (80088ac <UART_InitCallbacksToDefault+0x4c>)
 800886c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a0f      	ldr	r2, [pc, #60]	; (80088b0 <UART_InitCallbacksToDefault+0x50>)
 8008872:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a0f      	ldr	r2, [pc, #60]	; (80088b4 <UART_InitCallbacksToDefault+0x54>)
 8008878:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a0e      	ldr	r2, [pc, #56]	; (80088b8 <UART_InitCallbacksToDefault+0x58>)
 800887e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a0e      	ldr	r2, [pc, #56]	; (80088bc <UART_InitCallbacksToDefault+0x5c>)
 8008884:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a0d      	ldr	r2, [pc, #52]	; (80088c0 <UART_InitCallbacksToDefault+0x60>)
 800888a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a0d      	ldr	r2, [pc, #52]	; (80088c4 <UART_InitCallbacksToDefault+0x64>)
 8008890:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a0c      	ldr	r2, [pc, #48]	; (80088c8 <UART_InitCallbacksToDefault+0x68>)
 8008896:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a0c      	ldr	r2, [pc, #48]	; (80088cc <UART_InitCallbacksToDefault+0x6c>)
 800889c:	669a      	str	r2, [r3, #104]	; 0x68

}
 800889e:	bf00      	nop
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	08008791 	.word	0x08008791
 80088b0:	0800877d 	.word	0x0800877d
 80088b4:	080087a5 	.word	0x080087a5
 80088b8:	080026d9 	.word	0x080026d9
 80088bc:	08002625 	.word	0x08002625
 80088c0:	080087b9 	.word	0x080087b9
 80088c4:	080087cd 	.word	0x080087cd
 80088c8:	080087e1 	.word	0x080087e1
 80088cc:	080087f5 	.word	0x080087f5

080088d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	4613      	mov	r3, r2
 80088dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	88fa      	ldrh	r2, [r7, #6]
 80088e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	88fa      	ldrh	r2, [r7, #6]
 80088ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2222      	movs	r2, #34	; 0x22
 80088fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d007      	beq.n	800891e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68da      	ldr	r2, [r3, #12]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800891c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	695a      	ldr	r2, [r3, #20]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f042 0201 	orr.w	r2, r2, #1
 800892c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68da      	ldr	r2, [r3, #12]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f042 0220 	orr.w	r2, r2, #32
 800893c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800894c:	b480      	push	{r7}
 800894e:	b095      	sub	sp, #84	; 0x54
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	330c      	adds	r3, #12
 800895a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008966:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800896a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	330c      	adds	r3, #12
 8008972:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008974:	643a      	str	r2, [r7, #64]	; 0x40
 8008976:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800897a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e5      	bne.n	8008954 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3314      	adds	r3, #20
 800898e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	61fb      	str	r3, [r7, #28]
   return(result);
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	f023 0301 	bic.w	r3, r3, #1
 800899e:	64bb      	str	r3, [r7, #72]	; 0x48
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3314      	adds	r3, #20
 80089a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e5      	bne.n	8008988 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d119      	bne.n	80089f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	330c      	adds	r3, #12
 80089ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	e853 3f00 	ldrex	r3, [r3]
 80089d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f023 0310 	bic.w	r3, r3, #16
 80089da:	647b      	str	r3, [r7, #68]	; 0x44
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	330c      	adds	r3, #12
 80089e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089e4:	61ba      	str	r2, [r7, #24]
 80089e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e8:	6979      	ldr	r1, [r7, #20]
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	e841 2300 	strex	r3, r2, [r1]
 80089f0:	613b      	str	r3, [r7, #16]
   return(result);
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1e5      	bne.n	80089c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2220      	movs	r2, #32
 80089fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008a06:	bf00      	nop
 8008a08:	3754      	adds	r7, #84	; 0x54
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b084      	sub	sp, #16
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2200      	movs	r2, #0
 8008a24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a34:	bf00      	nop
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b21      	cmp	r3, #33	; 0x21
 8008a4e:	d13e      	bne.n	8008ace <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a58:	d114      	bne.n	8008a84 <UART_Transmit_IT+0x48>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d110      	bne.n	8008a84 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	881b      	ldrh	r3, [r3, #0]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a76:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
 8008a7c:	1c9a      	adds	r2, r3, #2
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	621a      	str	r2, [r3, #32]
 8008a82:	e008      	b.n	8008a96 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a1b      	ldr	r3, [r3, #32]
 8008a88:	1c59      	adds	r1, r3, #1
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6211      	str	r1, [r2, #32]
 8008a8e:	781a      	ldrb	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10f      	bne.n	8008aca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68da      	ldr	r2, [r3, #12]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ab8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68da      	ldr	r2, [r3, #12]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ac8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	e000      	b.n	8008ad0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ace:	2302      	movs	r3, #2
  }
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68da      	ldr	r2, [r3, #12]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008af2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2220      	movs	r2, #32
 8008af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b08c      	sub	sp, #48	; 0x30
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b22      	cmp	r3, #34	; 0x22
 8008b20:	f040 80ad 	bne.w	8008c7e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b2c:	d117      	bne.n	8008b5e <UART_Receive_IT+0x50>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d113      	bne.n	8008b5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008b36:	2300      	movs	r3, #0
 8008b38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b56:	1c9a      	adds	r2, r3, #2
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	629a      	str	r2, [r3, #40]	; 0x28
 8008b5c:	e026      	b.n	8008bac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008b64:	2300      	movs	r3, #0
 8008b66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b70:	d007      	beq.n	8008b82 <UART_Receive_IT+0x74>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10a      	bne.n	8008b90 <UART_Receive_IT+0x82>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d106      	bne.n	8008b90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8c:	701a      	strb	r2, [r3, #0]
 8008b8e:	e008      	b.n	8008ba2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d15c      	bne.n	8008c7a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68da      	ldr	r2, [r3, #12]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f022 0220 	bic.w	r2, r2, #32
 8008bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68da      	ldr	r2, [r3, #12]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	695a      	ldr	r2, [r3, #20]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f022 0201 	bic.w	r2, r2, #1
 8008bee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2220      	movs	r2, #32
 8008bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d136      	bne.n	8008c6e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	330c      	adds	r3, #12
 8008c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	e853 3f00 	ldrex	r3, [r3]
 8008c14:	613b      	str	r3, [r7, #16]
   return(result);
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	f023 0310 	bic.w	r3, r3, #16
 8008c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	330c      	adds	r3, #12
 8008c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c26:	623a      	str	r2, [r7, #32]
 8008c28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2a:	69f9      	ldr	r1, [r7, #28]
 8008c2c:	6a3a      	ldr	r2, [r7, #32]
 8008c2e:	e841 2300 	strex	r3, r2, [r1]
 8008c32:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1e5      	bne.n	8008c06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 0310 	and.w	r3, r3, #16
 8008c44:	2b10      	cmp	r3, #16
 8008c46:	d10a      	bne.n	8008c5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	60fb      	str	r3, [r7, #12]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008c66:	4611      	mov	r1, r2
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	4798      	blx	r3
 8008c6c:	e003      	b.n	8008c76 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	e002      	b.n	8008c80 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	e000      	b.n	8008c80 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8008c7e:	2302      	movs	r3, #2
  }
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3730      	adds	r7, #48	; 0x30
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c8c:	b0c0      	sub	sp, #256	; 0x100
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca4:	68d9      	ldr	r1, [r3, #12]
 8008ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	ea40 0301 	orr.w	r3, r0, r1
 8008cb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	431a      	orrs	r2, r3
 8008cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	431a      	orrs	r2, r3
 8008cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ce0:	f021 010c 	bic.w	r1, r1, #12
 8008ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008cee:	430b      	orrs	r3, r1
 8008cf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	695b      	ldr	r3, [r3, #20]
 8008cfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d02:	6999      	ldr	r1, [r3, #24]
 8008d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	ea40 0301 	orr.w	r3, r0, r1
 8008d0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	4b8f      	ldr	r3, [pc, #572]	; (8008f54 <UART_SetConfig+0x2cc>)
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d005      	beq.n	8008d28 <UART_SetConfig+0xa0>
 8008d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	4b8d      	ldr	r3, [pc, #564]	; (8008f58 <UART_SetConfig+0x2d0>)
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d104      	bne.n	8008d32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d28:	f7fd fc3e 	bl	80065a8 <HAL_RCC_GetPCLK2Freq>
 8008d2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008d30:	e003      	b.n	8008d3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d32:	f7fd fc25 	bl	8006580 <HAL_RCC_GetPCLK1Freq>
 8008d36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d44:	f040 810c 	bne.w	8008f60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008d56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008d5a:	4622      	mov	r2, r4
 8008d5c:	462b      	mov	r3, r5
 8008d5e:	1891      	adds	r1, r2, r2
 8008d60:	65b9      	str	r1, [r7, #88]	; 0x58
 8008d62:	415b      	adcs	r3, r3
 8008d64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	eb12 0801 	adds.w	r8, r2, r1
 8008d70:	4629      	mov	r1, r5
 8008d72:	eb43 0901 	adc.w	r9, r3, r1
 8008d76:	f04f 0200 	mov.w	r2, #0
 8008d7a:	f04f 0300 	mov.w	r3, #0
 8008d7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d8a:	4690      	mov	r8, r2
 8008d8c:	4699      	mov	r9, r3
 8008d8e:	4623      	mov	r3, r4
 8008d90:	eb18 0303 	adds.w	r3, r8, r3
 8008d94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d98:	462b      	mov	r3, r5
 8008d9a:	eb49 0303 	adc.w	r3, r9, r3
 8008d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008dae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008db2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008db6:	460b      	mov	r3, r1
 8008db8:	18db      	adds	r3, r3, r3
 8008dba:	653b      	str	r3, [r7, #80]	; 0x50
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	eb42 0303 	adc.w	r3, r2, r3
 8008dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8008dc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008dc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008dcc:	f7f7 fdfe 	bl	80009cc <__aeabi_uldivmod>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4b61      	ldr	r3, [pc, #388]	; (8008f5c <UART_SetConfig+0x2d4>)
 8008dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8008dda:	095b      	lsrs	r3, r3, #5
 8008ddc:	011c      	lsls	r4, r3, #4
 8008dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008de2:	2200      	movs	r2, #0
 8008de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008de8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008dec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008df0:	4642      	mov	r2, r8
 8008df2:	464b      	mov	r3, r9
 8008df4:	1891      	adds	r1, r2, r2
 8008df6:	64b9      	str	r1, [r7, #72]	; 0x48
 8008df8:	415b      	adcs	r3, r3
 8008dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008e00:	4641      	mov	r1, r8
 8008e02:	eb12 0a01 	adds.w	sl, r2, r1
 8008e06:	4649      	mov	r1, r9
 8008e08:	eb43 0b01 	adc.w	fp, r3, r1
 8008e0c:	f04f 0200 	mov.w	r2, #0
 8008e10:	f04f 0300 	mov.w	r3, #0
 8008e14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e20:	4692      	mov	sl, r2
 8008e22:	469b      	mov	fp, r3
 8008e24:	4643      	mov	r3, r8
 8008e26:	eb1a 0303 	adds.w	r3, sl, r3
 8008e2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e2e:	464b      	mov	r3, r9
 8008e30:	eb4b 0303 	adc.w	r3, fp, r3
 8008e34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008e48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	18db      	adds	r3, r3, r3
 8008e50:	643b      	str	r3, [r7, #64]	; 0x40
 8008e52:	4613      	mov	r3, r2
 8008e54:	eb42 0303 	adc.w	r3, r2, r3
 8008e58:	647b      	str	r3, [r7, #68]	; 0x44
 8008e5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008e5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008e62:	f7f7 fdb3 	bl	80009cc <__aeabi_uldivmod>
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	4b3b      	ldr	r3, [pc, #236]	; (8008f5c <UART_SetConfig+0x2d4>)
 8008e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8008e72:	095b      	lsrs	r3, r3, #5
 8008e74:	2264      	movs	r2, #100	; 0x64
 8008e76:	fb02 f303 	mul.w	r3, r2, r3
 8008e7a:	1acb      	subs	r3, r1, r3
 8008e7c:	00db      	lsls	r3, r3, #3
 8008e7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008e82:	4b36      	ldr	r3, [pc, #216]	; (8008f5c <UART_SetConfig+0x2d4>)
 8008e84:	fba3 2302 	umull	r2, r3, r3, r2
 8008e88:	095b      	lsrs	r3, r3, #5
 8008e8a:	005b      	lsls	r3, r3, #1
 8008e8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e90:	441c      	add	r4, r3
 8008e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e96:	2200      	movs	r2, #0
 8008e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ea0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ea4:	4642      	mov	r2, r8
 8008ea6:	464b      	mov	r3, r9
 8008ea8:	1891      	adds	r1, r2, r2
 8008eaa:	63b9      	str	r1, [r7, #56]	; 0x38
 8008eac:	415b      	adcs	r3, r3
 8008eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008eb4:	4641      	mov	r1, r8
 8008eb6:	1851      	adds	r1, r2, r1
 8008eb8:	6339      	str	r1, [r7, #48]	; 0x30
 8008eba:	4649      	mov	r1, r9
 8008ebc:	414b      	adcs	r3, r1
 8008ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8008ec0:	f04f 0200 	mov.w	r2, #0
 8008ec4:	f04f 0300 	mov.w	r3, #0
 8008ec8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008ecc:	4659      	mov	r1, fp
 8008ece:	00cb      	lsls	r3, r1, #3
 8008ed0:	4651      	mov	r1, sl
 8008ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ed6:	4651      	mov	r1, sl
 8008ed8:	00ca      	lsls	r2, r1, #3
 8008eda:	4610      	mov	r0, r2
 8008edc:	4619      	mov	r1, r3
 8008ede:	4603      	mov	r3, r0
 8008ee0:	4642      	mov	r2, r8
 8008ee2:	189b      	adds	r3, r3, r2
 8008ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ee8:	464b      	mov	r3, r9
 8008eea:	460a      	mov	r2, r1
 8008eec:	eb42 0303 	adc.w	r3, r2, r3
 8008ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008f04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f08:	460b      	mov	r3, r1
 8008f0a:	18db      	adds	r3, r3, r3
 8008f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f0e:	4613      	mov	r3, r2
 8008f10:	eb42 0303 	adc.w	r3, r2, r3
 8008f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008f1e:	f7f7 fd55 	bl	80009cc <__aeabi_uldivmod>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	4b0d      	ldr	r3, [pc, #52]	; (8008f5c <UART_SetConfig+0x2d4>)
 8008f28:	fba3 1302 	umull	r1, r3, r3, r2
 8008f2c:	095b      	lsrs	r3, r3, #5
 8008f2e:	2164      	movs	r1, #100	; 0x64
 8008f30:	fb01 f303 	mul.w	r3, r1, r3
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	3332      	adds	r3, #50	; 0x32
 8008f3a:	4a08      	ldr	r2, [pc, #32]	; (8008f5c <UART_SetConfig+0x2d4>)
 8008f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f40:	095b      	lsrs	r3, r3, #5
 8008f42:	f003 0207 	and.w	r2, r3, #7
 8008f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4422      	add	r2, r4
 8008f4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f50:	e105      	b.n	800915e <UART_SetConfig+0x4d6>
 8008f52:	bf00      	nop
 8008f54:	40011000 	.word	0x40011000
 8008f58:	40011400 	.word	0x40011400
 8008f5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f64:	2200      	movs	r2, #0
 8008f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008f6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008f72:	4642      	mov	r2, r8
 8008f74:	464b      	mov	r3, r9
 8008f76:	1891      	adds	r1, r2, r2
 8008f78:	6239      	str	r1, [r7, #32]
 8008f7a:	415b      	adcs	r3, r3
 8008f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f82:	4641      	mov	r1, r8
 8008f84:	1854      	adds	r4, r2, r1
 8008f86:	4649      	mov	r1, r9
 8008f88:	eb43 0501 	adc.w	r5, r3, r1
 8008f8c:	f04f 0200 	mov.w	r2, #0
 8008f90:	f04f 0300 	mov.w	r3, #0
 8008f94:	00eb      	lsls	r3, r5, #3
 8008f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f9a:	00e2      	lsls	r2, r4, #3
 8008f9c:	4614      	mov	r4, r2
 8008f9e:	461d      	mov	r5, r3
 8008fa0:	4643      	mov	r3, r8
 8008fa2:	18e3      	adds	r3, r4, r3
 8008fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008fa8:	464b      	mov	r3, r9
 8008faa:	eb45 0303 	adc.w	r3, r5, r3
 8008fae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008fc2:	f04f 0200 	mov.w	r2, #0
 8008fc6:	f04f 0300 	mov.w	r3, #0
 8008fca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008fce:	4629      	mov	r1, r5
 8008fd0:	008b      	lsls	r3, r1, #2
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fd8:	4621      	mov	r1, r4
 8008fda:	008a      	lsls	r2, r1, #2
 8008fdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008fe0:	f7f7 fcf4 	bl	80009cc <__aeabi_uldivmod>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4b60      	ldr	r3, [pc, #384]	; (800916c <UART_SetConfig+0x4e4>)
 8008fea:	fba3 2302 	umull	r2, r3, r3, r2
 8008fee:	095b      	lsrs	r3, r3, #5
 8008ff0:	011c      	lsls	r4, r3, #4
 8008ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ffc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009000:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009004:	4642      	mov	r2, r8
 8009006:	464b      	mov	r3, r9
 8009008:	1891      	adds	r1, r2, r2
 800900a:	61b9      	str	r1, [r7, #24]
 800900c:	415b      	adcs	r3, r3
 800900e:	61fb      	str	r3, [r7, #28]
 8009010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009014:	4641      	mov	r1, r8
 8009016:	1851      	adds	r1, r2, r1
 8009018:	6139      	str	r1, [r7, #16]
 800901a:	4649      	mov	r1, r9
 800901c:	414b      	adcs	r3, r1
 800901e:	617b      	str	r3, [r7, #20]
 8009020:	f04f 0200 	mov.w	r2, #0
 8009024:	f04f 0300 	mov.w	r3, #0
 8009028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800902c:	4659      	mov	r1, fp
 800902e:	00cb      	lsls	r3, r1, #3
 8009030:	4651      	mov	r1, sl
 8009032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009036:	4651      	mov	r1, sl
 8009038:	00ca      	lsls	r2, r1, #3
 800903a:	4610      	mov	r0, r2
 800903c:	4619      	mov	r1, r3
 800903e:	4603      	mov	r3, r0
 8009040:	4642      	mov	r2, r8
 8009042:	189b      	adds	r3, r3, r2
 8009044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009048:	464b      	mov	r3, r9
 800904a:	460a      	mov	r2, r1
 800904c:	eb42 0303 	adc.w	r3, r2, r3
 8009050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	67bb      	str	r3, [r7, #120]	; 0x78
 800905e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009060:	f04f 0200 	mov.w	r2, #0
 8009064:	f04f 0300 	mov.w	r3, #0
 8009068:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800906c:	4649      	mov	r1, r9
 800906e:	008b      	lsls	r3, r1, #2
 8009070:	4641      	mov	r1, r8
 8009072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009076:	4641      	mov	r1, r8
 8009078:	008a      	lsls	r2, r1, #2
 800907a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800907e:	f7f7 fca5 	bl	80009cc <__aeabi_uldivmod>
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	4b39      	ldr	r3, [pc, #228]	; (800916c <UART_SetConfig+0x4e4>)
 8009088:	fba3 1302 	umull	r1, r3, r3, r2
 800908c:	095b      	lsrs	r3, r3, #5
 800908e:	2164      	movs	r1, #100	; 0x64
 8009090:	fb01 f303 	mul.w	r3, r1, r3
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	011b      	lsls	r3, r3, #4
 8009098:	3332      	adds	r3, #50	; 0x32
 800909a:	4a34      	ldr	r2, [pc, #208]	; (800916c <UART_SetConfig+0x4e4>)
 800909c:	fba2 2303 	umull	r2, r3, r2, r3
 80090a0:	095b      	lsrs	r3, r3, #5
 80090a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090a6:	441c      	add	r4, r3
 80090a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090ac:	2200      	movs	r2, #0
 80090ae:	673b      	str	r3, [r7, #112]	; 0x70
 80090b0:	677a      	str	r2, [r7, #116]	; 0x74
 80090b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80090b6:	4642      	mov	r2, r8
 80090b8:	464b      	mov	r3, r9
 80090ba:	1891      	adds	r1, r2, r2
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	415b      	adcs	r3, r3
 80090c0:	60fb      	str	r3, [r7, #12]
 80090c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090c6:	4641      	mov	r1, r8
 80090c8:	1851      	adds	r1, r2, r1
 80090ca:	6039      	str	r1, [r7, #0]
 80090cc:	4649      	mov	r1, r9
 80090ce:	414b      	adcs	r3, r1
 80090d0:	607b      	str	r3, [r7, #4]
 80090d2:	f04f 0200 	mov.w	r2, #0
 80090d6:	f04f 0300 	mov.w	r3, #0
 80090da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80090de:	4659      	mov	r1, fp
 80090e0:	00cb      	lsls	r3, r1, #3
 80090e2:	4651      	mov	r1, sl
 80090e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090e8:	4651      	mov	r1, sl
 80090ea:	00ca      	lsls	r2, r1, #3
 80090ec:	4610      	mov	r0, r2
 80090ee:	4619      	mov	r1, r3
 80090f0:	4603      	mov	r3, r0
 80090f2:	4642      	mov	r2, r8
 80090f4:	189b      	adds	r3, r3, r2
 80090f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80090f8:	464b      	mov	r3, r9
 80090fa:	460a      	mov	r2, r1
 80090fc:	eb42 0303 	adc.w	r3, r2, r3
 8009100:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	663b      	str	r3, [r7, #96]	; 0x60
 800910c:	667a      	str	r2, [r7, #100]	; 0x64
 800910e:	f04f 0200 	mov.w	r2, #0
 8009112:	f04f 0300 	mov.w	r3, #0
 8009116:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800911a:	4649      	mov	r1, r9
 800911c:	008b      	lsls	r3, r1, #2
 800911e:	4641      	mov	r1, r8
 8009120:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009124:	4641      	mov	r1, r8
 8009126:	008a      	lsls	r2, r1, #2
 8009128:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800912c:	f7f7 fc4e 	bl	80009cc <__aeabi_uldivmod>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4b0d      	ldr	r3, [pc, #52]	; (800916c <UART_SetConfig+0x4e4>)
 8009136:	fba3 1302 	umull	r1, r3, r3, r2
 800913a:	095b      	lsrs	r3, r3, #5
 800913c:	2164      	movs	r1, #100	; 0x64
 800913e:	fb01 f303 	mul.w	r3, r1, r3
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	011b      	lsls	r3, r3, #4
 8009146:	3332      	adds	r3, #50	; 0x32
 8009148:	4a08      	ldr	r2, [pc, #32]	; (800916c <UART_SetConfig+0x4e4>)
 800914a:	fba2 2303 	umull	r2, r3, r2, r3
 800914e:	095b      	lsrs	r3, r3, #5
 8009150:	f003 020f 	and.w	r2, r3, #15
 8009154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4422      	add	r2, r4
 800915c:	609a      	str	r2, [r3, #8]
}
 800915e:	bf00      	nop
 8009160:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009164:	46bd      	mov	sp, r7
 8009166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800916a:	bf00      	nop
 800916c:	51eb851f 	.word	0x51eb851f

08009170 <HAL_ADC_ConvCpltCallback>:
* Function: HAL_ADC_ConvCpltCallback										   	   *
* Description: Conversion callback to process conversion complete in the 		   *
* 			   peripheral.														   *
************************************************************************************/
VOID HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
	if(Rte_P_Os_OsPort_Os_Counter % 200 == 0)
 8009178:	4b09      	ldr	r3, [pc, #36]	; (80091a0 <HAL_ADC_ConvCpltCallback+0x30>)
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	4b09      	ldr	r3, [pc, #36]	; (80091a4 <HAL_ADC_ConvCpltCallback+0x34>)
 800917e:	fba3 1302 	umull	r1, r3, r3, r2
 8009182:	099b      	lsrs	r3, r3, #6
 8009184:	21c8      	movs	r1, #200	; 0xc8
 8009186:	fb01 f303 	mul.w	r3, r1, r3
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	d102      	bne.n	8009196 <HAL_ADC_ConvCpltCallback+0x26>
	{
		Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(Adc_ChannelOne_Buffer);
 8009190:	4805      	ldr	r0, [pc, #20]	; (80091a8 <HAL_ADC_ConvCpltCallback+0x38>)
 8009192:	f003 ffa1 	bl	800d0d8 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>
	}
	else
	{
		/* do nothing */
	}
}
 8009196:	bf00      	nop
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	200001f8 	.word	0x200001f8
 80091a4:	51eb851f 	.word	0x51eb851f
 80091a8:	200006bc 	.word	0x200006bc

080091ac <HAL_ADC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_ADC_ErrorCallback										   		   *
* Description: Error callback to process fault in the peripheral.		 		   *
************************************************************************************/
VOID HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
	/* Local variable to store error status. */
	uint32 receivedStatus = HAL_ADC_GetError(&hadc1);
 80091b4:	481b      	ldr	r0, [pc, #108]	; (8009224 <HAL_ADC_ErrorCallback+0x78>)
 80091b6:	f7fb f90f 	bl	80043d8 <HAL_ADC_GetError>
 80091ba:	60f8      	str	r0, [r7, #12]
	/* Process error status.
	 * Perform re-initialization on each error to prevent faults in the peripheral. */
	switch(receivedStatus)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b04      	cmp	r3, #4
 80091c0:	d82a      	bhi.n	8009218 <HAL_ADC_ErrorCallback+0x6c>
 80091c2:	a201      	add	r2, pc, #4	; (adr r2, 80091c8 <HAL_ADC_ErrorCallback+0x1c>)
 80091c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c8:	08009219 	.word	0x08009219
 80091cc:	080091dd 	.word	0x080091dd
 80091d0:	080091f1 	.word	0x080091f1
 80091d4:	08009219 	.word	0x08009219
 80091d8:	08009205 	.word	0x08009205
	{
		case HAL_ADC_ERROR_NONE:
			/* do nothing */
			break;
		case HAL_ADC_ERROR_INTERNAL:
			SystemManager_Fault[ADC_ERROR_INTERNAL]++;
 80091dc:	4b12      	ldr	r3, [pc, #72]	; (8009228 <HAL_ADC_ErrorCallback+0x7c>)
 80091de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e0:	3301      	adds	r3, #1
 80091e2:	4a11      	ldr	r2, [pc, #68]	; (8009228 <HAL_ADC_ErrorCallback+0x7c>)
 80091e4:	6393      	str	r3, [r2, #56]	; 0x38
			Adc_DeInit();
 80091e6:	f000 f897 	bl	8009318 <Adc_DeInit>
			Adc_Init();
 80091ea:	f000 f89f 	bl	800932c <Adc_Init>
			break;
 80091ee:	e014      	b.n	800921a <HAL_ADC_ErrorCallback+0x6e>
		case HAL_ADC_ERROR_OVR:
			SystemManager_Fault[ADC_ERROR_OVR]++;
 80091f0:	4b0d      	ldr	r3, [pc, #52]	; (8009228 <HAL_ADC_ErrorCallback+0x7c>)
 80091f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091f4:	3301      	adds	r3, #1
 80091f6:	4a0c      	ldr	r2, [pc, #48]	; (8009228 <HAL_ADC_ErrorCallback+0x7c>)
 80091f8:	63d3      	str	r3, [r2, #60]	; 0x3c
			Adc_DeInit();
 80091fa:	f000 f88d 	bl	8009318 <Adc_DeInit>
			Adc_Init();
 80091fe:	f000 f895 	bl	800932c <Adc_Init>
			break;
 8009202:	e00a      	b.n	800921a <HAL_ADC_ErrorCallback+0x6e>
		case HAL_ADC_ERROR_DMA:
			SystemManager_Fault[ADC_ERROR_DMA]++;
 8009204:	4b08      	ldr	r3, [pc, #32]	; (8009228 <HAL_ADC_ErrorCallback+0x7c>)
 8009206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009208:	3301      	adds	r3, #1
 800920a:	4a07      	ldr	r2, [pc, #28]	; (8009228 <HAL_ADC_ErrorCallback+0x7c>)
 800920c:	6413      	str	r3, [r2, #64]	; 0x40
			Adc_DeInit();
 800920e:	f000 f883 	bl	8009318 <Adc_DeInit>
			Adc_Init();
 8009212:	f000 f88b 	bl	800932c <Adc_Init>
			break;
 8009216:	e000      	b.n	800921a <HAL_ADC_ErrorCallback+0x6e>
		default:
			break;
 8009218:	bf00      	nop
	}
}
 800921a:	bf00      	nop
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	2000012c 	.word	0x2000012c
 8009228:	2000a508 	.word	0x2000a508

0800922c <Adc_MainFunction>:
/***********************************************************************************
* Function: Adc_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Adc_MainFunction()
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
	/* Local variable to store the error status. */
	uint32 statusValue = STD_LOW;
 8009232:	2300      	movs	r3, #0
 8009234:	607b      	str	r3, [r7, #4]
	/* Get error status. */
	statusValue = HAL_ADC_GetState(&hadc1);
 8009236:	4836      	ldr	r0, [pc, #216]	; (8009310 <Adc_MainFunction+0xe4>)
 8009238:	f7fb f8c2 	bl	80043c0 <HAL_ADC_GetState>
 800923c:	6078      	str	r0, [r7, #4]

	/* Process module states. */
	switch(statusValue)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009244:	d049      	beq.n	80092da <Adc_MainFunction+0xae>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800924c:	d85a      	bhi.n	8009304 <Adc_MainFunction+0xd8>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b10      	cmp	r3, #16
 8009252:	d827      	bhi.n	80092a4 <Adc_MainFunction+0x78>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b10      	cmp	r3, #16
 8009258:	d854      	bhi.n	8009304 <Adc_MainFunction+0xd8>
 800925a:	a201      	add	r2, pc, #4	; (adr r2, 8009260 <Adc_MainFunction+0x34>)
 800925c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009260:	080092af 	.word	0x080092af
 8009264:	080092bd 	.word	0x080092bd
 8009268:	080092c7 	.word	0x080092c7
 800926c:	08009305 	.word	0x08009305
 8009270:	080092e5 	.word	0x080092e5
 8009274:	08009305 	.word	0x08009305
 8009278:	08009305 	.word	0x08009305
 800927c:	08009305 	.word	0x08009305
 8009280:	08009305 	.word	0x08009305
 8009284:	08009305 	.word	0x08009305
 8009288:	08009305 	.word	0x08009305
 800928c:	08009305 	.word	0x08009305
 8009290:	08009305 	.word	0x08009305
 8009294:	08009305 	.word	0x08009305
 8009298:	08009305 	.word	0x08009305
 800929c:	08009305 	.word	0x08009305
 80092a0:	080092f5 	.word	0x080092f5
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092aa:	d011      	beq.n	80092d0 <Adc_MainFunction+0xa4>
		case HAL_ADC_STATE_ERROR:
			Adc_BswState = statusValue;
			HAL_ADC_ErrorCallback(&hadc1);
			break;
		default:
			break;
 80092ac:	e02a      	b.n	8009304 <Adc_MainFunction+0xd8>
			Adc_BswState = statusValue;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	4b18      	ldr	r3, [pc, #96]	; (8009314 <Adc_MainFunction+0xe8>)
 80092b4:	701a      	strb	r2, [r3, #0]
			Adc_Init();
 80092b6:	f000 f839 	bl	800932c <Adc_Init>
			break;
 80092ba:	e024      	b.n	8009306 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	4b14      	ldr	r3, [pc, #80]	; (8009314 <Adc_MainFunction+0xe8>)
 80092c2:	701a      	strb	r2, [r3, #0]
			break;
 80092c4:	e01f      	b.n	8009306 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	4b12      	ldr	r3, [pc, #72]	; (8009314 <Adc_MainFunction+0xe8>)
 80092cc:	701a      	strb	r2, [r3, #0]
			break;
 80092ce:	e01a      	b.n	8009306 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	4b0f      	ldr	r3, [pc, #60]	; (8009314 <Adc_MainFunction+0xe8>)
 80092d6:	701a      	strb	r2, [r3, #0]
			break;
 80092d8:	e015      	b.n	8009306 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	4b0d      	ldr	r3, [pc, #52]	; (8009314 <Adc_MainFunction+0xe8>)
 80092e0:	701a      	strb	r2, [r3, #0]
			break;
 80092e2:	e010      	b.n	8009306 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	4b0a      	ldr	r3, [pc, #40]	; (8009314 <Adc_MainFunction+0xe8>)
 80092ea:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 80092ec:	4808      	ldr	r0, [pc, #32]	; (8009310 <Adc_MainFunction+0xe4>)
 80092ee:	f7ff ff5d 	bl	80091ac <HAL_ADC_ErrorCallback>
			break;
 80092f2:	e008      	b.n	8009306 <Adc_MainFunction+0xda>
			Adc_BswState = statusValue;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	4b06      	ldr	r3, [pc, #24]	; (8009314 <Adc_MainFunction+0xe8>)
 80092fa:	701a      	strb	r2, [r3, #0]
			HAL_ADC_ErrorCallback(&hadc1);
 80092fc:	4804      	ldr	r0, [pc, #16]	; (8009310 <Adc_MainFunction+0xe4>)
 80092fe:	f7ff ff55 	bl	80091ac <HAL_ADC_ErrorCallback>
			break;
 8009302:	e000      	b.n	8009306 <Adc_MainFunction+0xda>
			break;
 8009304:	bf00      	nop
	}
}
 8009306:	bf00      	nop
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	2000012c 	.word	0x2000012c
 8009314:	200006b8 	.word	0x200006b8

08009318 <Adc_DeInit>:
/***********************************************************************************
* Function: Adc_DeInit										   					   *
* Description: De-initialize the peripheral.									   *
************************************************************************************/
StdReturnType Adc_DeInit()
{
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
	/* Call for de-intialization function. */
	HAL_ADC_DeInit(&hadc1);
 800931c:	4802      	ldr	r0, [pc, #8]	; (8009328 <Adc_DeInit+0x10>)
 800931e:	f7fa fd7d 	bl	8003e1c <HAL_ADC_DeInit>
	return E_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	bd80      	pop	{r7, pc}
 8009328:	2000012c 	.word	0x2000012c

0800932c <Adc_Init>:
/***********************************************************************************
* Function: Adc_Init										   					   *
* Description: Initialize the protocol.									       	   *
************************************************************************************/
StdReturnType Adc_Init()
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08a      	sub	sp, #40	; 0x28
 8009330:	af00      	add	r7, sp, #0
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8009332:	f107 0310 	add.w	r3, r7, #16
 8009336:	2200      	movs	r2, #0
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	605a      	str	r2, [r3, #4]
 800933c:	609a      	str	r2, [r3, #8]
 800933e:	60da      	str	r2, [r3, #12]
 8009340:	611a      	str	r2, [r3, #16]
 8009342:	615a      	str	r2, [r3, #20]
	ADC_ChannelConfTypeDef sConfig = {0};
 8009344:	463b      	mov	r3, r7
 8009346:	2200      	movs	r2, #0
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	605a      	str	r2, [r3, #4]
 800934c:	609a      	str	r2, [r3, #8]
 800934e:	60da      	str	r2, [r3, #12]
	hadc1.Instance = ADC1;
 8009350:	4b40      	ldr	r3, [pc, #256]	; (8009454 <Adc_Init+0x128>)
 8009352:	4a41      	ldr	r2, [pc, #260]	; (8009458 <Adc_Init+0x12c>)
 8009354:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8009356:	4b3f      	ldr	r3, [pc, #252]	; (8009454 <Adc_Init+0x128>)
 8009358:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800935c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800935e:	4b3d      	ldr	r3, [pc, #244]	; (8009454 <Adc_Init+0x128>)
 8009360:	2200      	movs	r2, #0
 8009362:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8009364:	4b3b      	ldr	r3, [pc, #236]	; (8009454 <Adc_Init+0x128>)
 8009366:	2201      	movs	r2, #1
 8009368:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800936a:	4b3a      	ldr	r3, [pc, #232]	; (8009454 <Adc_Init+0x128>)
 800936c:	2201      	movs	r2, #1
 800936e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009370:	4b38      	ldr	r3, [pc, #224]	; (8009454 <Adc_Init+0x128>)
 8009372:	2200      	movs	r2, #0
 8009374:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009378:	4b36      	ldr	r3, [pc, #216]	; (8009454 <Adc_Init+0x128>)
 800937a:	2200      	movs	r2, #0
 800937c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800937e:	4b35      	ldr	r3, [pc, #212]	; (8009454 <Adc_Init+0x128>)
 8009380:	4a36      	ldr	r2, [pc, #216]	; (800945c <Adc_Init+0x130>)
 8009382:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009384:	4b33      	ldr	r3, [pc, #204]	; (8009454 <Adc_Init+0x128>)
 8009386:	2200      	movs	r2, #0
 8009388:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 3;
 800938a:	4b32      	ldr	r3, [pc, #200]	; (8009454 <Adc_Init+0x128>)
 800938c:	2203      	movs	r2, #3
 800938e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8009390:	4b30      	ldr	r3, [pc, #192]	; (8009454 <Adc_Init+0x128>)
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009398:	4b2e      	ldr	r3, [pc, #184]	; (8009454 <Adc_Init+0x128>)
 800939a:	2201      	movs	r2, #1
 800939c:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800939e:	482d      	ldr	r0, [pc, #180]	; (8009454 <Adc_Init+0x128>)
 80093a0:	f7fa fcd6 	bl	8003d50 <HAL_ADC_Init>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d002      	beq.n	80093b0 <Adc_Init+0x84>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 80093aa:	482a      	ldr	r0, [pc, #168]	; (8009454 <Adc_Init+0x128>)
 80093ac:	f7ff fefe 	bl	80091ac <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80093b0:	4b2b      	ldr	r3, [pc, #172]	; (8009460 <Adc_Init+0x134>)
 80093b2:	613b      	str	r3, [r7, #16]
	AnalogWDGConfig.HighThreshold = 4095;
 80093b4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80093b8:	617b      	str	r3, [r7, #20]
	AnalogWDGConfig.LowThreshold = 0;
 80093ba:	2300      	movs	r3, #0
 80093bc:	61bb      	str	r3, [r7, #24]
	AnalogWDGConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80093be:	4b29      	ldr	r3, [pc, #164]	; (8009464 <Adc_Init+0x138>)
 80093c0:	61fb      	str	r3, [r7, #28]
	AnalogWDGConfig.ITMode = ENABLE;
 80093c2:	2301      	movs	r3, #1
 80093c4:	f887 3020 	strb.w	r3, [r7, #32]
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80093c8:	f107 0310 	add.w	r3, r7, #16
 80093cc:	4619      	mov	r1, r3
 80093ce:	4821      	ldr	r0, [pc, #132]	; (8009454 <Adc_Init+0x128>)
 80093d0:	f7fa ff96 	bl	8004300 <HAL_ADC_AnalogWDGConfig>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <Adc_Init+0xb4>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 80093da:	481e      	ldr	r0, [pc, #120]	; (8009454 <Adc_Init+0x128>)
 80093dc:	f7ff fee6 	bl	80091ac <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_13;
 80093e0:	230d      	movs	r3, #13
 80093e2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80093e4:	2301      	movs	r3, #1
 80093e6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80093e8:	2307      	movs	r3, #7
 80093ea:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80093ec:	463b      	mov	r3, r7
 80093ee:	4619      	mov	r1, r3
 80093f0:	4818      	ldr	r0, [pc, #96]	; (8009454 <Adc_Init+0x128>)
 80093f2:	f7fa fe53 	bl	800409c <HAL_ADC_ConfigChannel>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d002      	beq.n	8009402 <Adc_Init+0xd6>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 80093fc:	4815      	ldr	r0, [pc, #84]	; (8009454 <Adc_Init+0x128>)
 80093fe:	f7ff fed5 	bl	80091ac <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_12;
 8009402:	230c      	movs	r3, #12
 8009404:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8009406:	2302      	movs	r3, #2
 8009408:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800940a:	463b      	mov	r3, r7
 800940c:	4619      	mov	r1, r3
 800940e:	4811      	ldr	r0, [pc, #68]	; (8009454 <Adc_Init+0x128>)
 8009410:	f7fa fe44 	bl	800409c <HAL_ADC_ConfigChannel>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d002      	beq.n	8009420 <Adc_Init+0xf4>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 800941a:	480e      	ldr	r0, [pc, #56]	; (8009454 <Adc_Init+0x128>)
 800941c:	f7ff fec6 	bl	80091ac <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8009420:	4b10      	ldr	r3, [pc, #64]	; (8009464 <Adc_Init+0x138>)
 8009422:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8009424:	2303      	movs	r3, #3
 8009426:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009428:	463b      	mov	r3, r7
 800942a:	4619      	mov	r1, r3
 800942c:	4809      	ldr	r0, [pc, #36]	; (8009454 <Adc_Init+0x128>)
 800942e:	f7fa fe35 	bl	800409c <HAL_ADC_ConfigChannel>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <Adc_Init+0x112>
	{
		HAL_ADC_ErrorCallback(&hadc1);
 8009438:	4806      	ldr	r0, [pc, #24]	; (8009454 <Adc_Init+0x128>)
 800943a:	f7ff feb7 	bl	80091ac <HAL_ADC_ErrorCallback>
	}
	else
	{
		/* do nothing */
	}
	HAL_ADC_Start_DMA(&hadc1, Adc_ChannelOne_Buffer, ADC_BUFFER_LENGTH);
 800943e:	2203      	movs	r2, #3
 8009440:	4909      	ldr	r1, [pc, #36]	; (8009468 <Adc_Init+0x13c>)
 8009442:	4804      	ldr	r0, [pc, #16]	; (8009454 <Adc_Init+0x128>)
 8009444:	f7fa fd26 	bl	8003e94 <HAL_ADC_Start_DMA>
	return E_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3728      	adds	r7, #40	; 0x28
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	2000012c 	.word	0x2000012c
 8009458:	40012000 	.word	0x40012000
 800945c:	0f000001 	.word	0x0f000001
 8009460:	00800200 	.word	0x00800200
 8009464:	10000012 	.word	0x10000012
 8009468:	200006bc 	.word	0x200006bc

0800946c <Port_Init>:
/***********************************************************************************
* Function: Port_Init										       				   *
* Description: Initialize the peripheral.									 	   *
************************************************************************************/
StdReturnType Port_Init()
{
 800946c:	b580      	push	{r7, lr}
 800946e:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8009470:	f7f9 fd46 	bl	8002f00 <MX_GPIO_Init>
	return E_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	bd80      	pop	{r7, pc}
 800947a:	0000      	movs	r0, r0
 800947c:	0000      	movs	r0, r0
	...

08009480 <HAL_TIM_IC_CaptureCallback>:
/***********************************************************************************
* Function: HAL_TIM_IC_CaptureCallback										   	   *
* Description: Input capture callback to process information received.		 	   *
************************************************************************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
	/* If channel 3 requests. */
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	7f1b      	ldrb	r3, [r3, #28]
 800948c:	2b01      	cmp	r3, #1
 800948e:	f040 8081 	bne.w	8009594 <HAL_TIM_IC_CaptureCallback+0x114>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelThree == STD_LOW)
 8009492:	4b87      	ldr	r3, [pc, #540]	; (80096b0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d11a      	bne.n	80094d0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800949a:	2100      	movs	r1, #0
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7fe f86b 	bl	8007578 <HAL_TIM_ReadCapturedValue>
 80094a2:	4603      	mov	r3, r0
 80094a4:	4a83      	ldr	r2, [pc, #524]	; (80096b4 <HAL_TIM_IC_CaptureCallback+0x234>)
 80094a6:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelThree = STD_HIGH;
 80094a8:	4b81      	ldr	r3, [pc, #516]	; (80096b0 <HAL_TIM_IC_CaptureCallback+0x230>)
 80094aa:	2201      	movs	r2, #1
 80094ac:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6a1a      	ldr	r2, [r3, #32]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f022 020a 	bic.w	r2, r2, #10
 80094bc:	621a      	str	r2, [r3, #32]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6a1a      	ldr	r2, [r3, #32]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f042 0202 	orr.w	r2, r2, #2
 80094cc:	621a      	str	r2, [r3, #32]
 80094ce:	e061      	b.n	8009594 <HAL_TIM_IC_CaptureCallback+0x114>
		}/* If the first input capture has been stored. */
		else if(Tim5_InputCaptureFlag_ChannelThree == STD_HIGH)
 80094d0:	4b77      	ldr	r3, [pc, #476]	; (80096b0 <HAL_TIM_IC_CaptureCallback+0x230>)
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d15d      	bne.n	8009594 <HAL_TIM_IC_CaptureCallback+0x114>
		{
			/* Store the second input capture. */
			Tim5_InputCompare_ValueTwo_ChannelThree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80094d8:	2100      	movs	r1, #0
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7fe f84c 	bl	8007578 <HAL_TIM_ReadCapturedValue>
 80094e0:	4603      	mov	r3, r0
 80094e2:	4a75      	ldr	r2, [pc, #468]	; (80096b8 <HAL_TIM_IC_CaptureCallback+0x238>)
 80094e4:	6013      	str	r3, [r2, #0]
			/* Set the timer counter to 0. */
			__HAL_TIM_SET_COUNTER(htim, 0);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2200      	movs	r2, #0
 80094ec:	625a      	str	r2, [r3, #36]	; 0x24
			/* If the second input capture is greater than the first, then subtract the first one from the second one. */
			if (Tim5_InputCompare_ValueTwo_ChannelThree > Tim5_InputCompare_ValueOne_ChannelThree)
 80094ee:	4b72      	ldr	r3, [pc, #456]	; (80096b8 <HAL_TIM_IC_CaptureCallback+0x238>)
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	4b70      	ldr	r3, [pc, #448]	; (80096b4 <HAL_TIM_IC_CaptureCallback+0x234>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d907      	bls.n	800950a <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				Tim5_Difference_ChannelThree = Tim5_InputCompare_ValueTwo_ChannelThree - Tim5_InputCompare_ValueOne_ChannelThree;
 80094fa:	4b6f      	ldr	r3, [pc, #444]	; (80096b8 <HAL_TIM_IC_CaptureCallback+0x238>)
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	4b6d      	ldr	r3, [pc, #436]	; (80096b4 <HAL_TIM_IC_CaptureCallback+0x234>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	4a6d      	ldr	r2, [pc, #436]	; (80096bc <HAL_TIM_IC_CaptureCallback+0x23c>)
 8009506:	6013      	str	r3, [r2, #0]
 8009508:	e00d      	b.n	8009526 <HAL_TIM_IC_CaptureCallback+0xa6>
			}/* Else subtract the first value from maximum uint32 value and add the second value. */
			else if(Tim5_InputCompare_ValueOne_ChannelThree > Tim5_InputCompare_ValueTwo_ChannelThree)
 800950a:	4b6a      	ldr	r3, [pc, #424]	; (80096b4 <HAL_TIM_IC_CaptureCallback+0x234>)
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	4b6a      	ldr	r3, [pc, #424]	; (80096b8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	429a      	cmp	r2, r3
 8009514:	d907      	bls.n	8009526 <HAL_TIM_IC_CaptureCallback+0xa6>
			{
				Tim5_Difference_ChannelThree = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelThree) + Tim5_InputCompare_ValueTwo_ChannelThree;
 8009516:	4b68      	ldr	r3, [pc, #416]	; (80096b8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	4b66      	ldr	r3, [pc, #408]	; (80096b4 <HAL_TIM_IC_CaptureCallback+0x234>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	3b01      	subs	r3, #1
 8009522:	4a66      	ldr	r2, [pc, #408]	; (80096bc <HAL_TIM_IC_CaptureCallback+0x23c>)
 8009524:	6013      	str	r3, [r2, #0]
			else
			{
				/* do nothing */
			}
			/* Calculate the distance the sound traveled between the first measurement and the second. */
			Tim5_CalculatedDistance_ChannelThree = Tim5_Difference_ChannelThree * 0.034 / 2;
 8009526:	4b65      	ldr	r3, [pc, #404]	; (80096bc <HAL_TIM_IC_CaptureCallback+0x23c>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4618      	mov	r0, r3
 800952c:	f7f6 ffa2 	bl	8000474 <__aeabi_ui2d>
 8009530:	a35d      	add	r3, pc, #372	; (adr r3, 80096a8 <HAL_TIM_IC_CaptureCallback+0x228>)
 8009532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009536:	f7f7 f817 	bl	8000568 <__aeabi_dmul>
 800953a:	4602      	mov	r2, r0
 800953c:	460b      	mov	r3, r1
 800953e:	4610      	mov	r0, r2
 8009540:	4619      	mov	r1, r3
 8009542:	f04f 0200 	mov.w	r2, #0
 8009546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800954a:	f7f7 f937 	bl	80007bc <__aeabi_ddiv>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4610      	mov	r0, r2
 8009554:	4619      	mov	r1, r3
 8009556:	f7f7 fa19 	bl	800098c <__aeabi_d2uiz>
 800955a:	4603      	mov	r3, r0
 800955c:	b2da      	uxtb	r2, r3
 800955e:	4b58      	ldr	r3, [pc, #352]	; (80096c0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8009560:	701a      	strb	r2, [r3, #0]
			/* Set the flag to low. */
			Tim5_InputCaptureFlag_ChannelThree = STD_LOW;
 8009562:	4b53      	ldr	r3, [pc, #332]	; (80096b0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8009564:	2200      	movs	r2, #0
 8009566:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6a1a      	ldr	r2, [r3, #32]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f022 020a 	bic.w	r2, r2, #10
 8009576:	621a      	str	r2, [r3, #32]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6a12      	ldr	r2, [r2, #32]
 8009582:	621a      	str	r2, [r3, #32]
			/* Disable the interrupt for the timer 5 channel 3. */
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC1);
 8009584:	4b4f      	ldr	r3, [pc, #316]	; (80096c4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68da      	ldr	r2, [r3, #12]
 800958a:	4b4e      	ldr	r3, [pc, #312]	; (80096c4 <HAL_TIM_IC_CaptureCallback+0x244>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f022 0202 	bic.w	r2, r2, #2
 8009592:	60da      	str	r2, [r3, #12]
		{
			/* do nothing */
		}
	}
	/* If channel 4 requests. */
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	7f1b      	ldrb	r3, [r3, #28]
 8009598:	2b02      	cmp	r3, #2
 800959a:	f040 8081 	bne.w	80096a0 <HAL_TIM_IC_CaptureCallback+0x220>
	{
		/* Check if the first input capture has been received. */
		if (Tim5_InputCaptureFlag_ChannelFour == STD_LOW)
 800959e:	4b4a      	ldr	r3, [pc, #296]	; (80096c8 <HAL_TIM_IC_CaptureCallback+0x248>)
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d11a      	bne.n	80095dc <HAL_TIM_IC_CaptureCallback+0x15c>
		{
			/* Store the input capture value. */
			Tim5_InputCompare_ValueOne_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80095a6:	2104      	movs	r1, #4
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7fd ffe5 	bl	8007578 <HAL_TIM_ReadCapturedValue>
 80095ae:	4603      	mov	r3, r0
 80095b0:	4a46      	ldr	r2, [pc, #280]	; (80096cc <HAL_TIM_IC_CaptureCallback+0x24c>)
 80095b2:	6013      	str	r3, [r2, #0]
			/* Set the flag to high. */
			Tim5_InputCaptureFlag_ChannelFour = STD_HIGH;
 80095b4:	4b44      	ldr	r3, [pc, #272]	; (80096c8 <HAL_TIM_IC_CaptureCallback+0x248>)
 80095b6:	2201      	movs	r2, #1
 80095b8:	701a      	strb	r2, [r3, #0]
			/* Change the polarity of the input channel. */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6a1a      	ldr	r2, [r3, #32]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80095c8:	621a      	str	r2, [r3, #32]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6a1a      	ldr	r2, [r3, #32]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f042 0220 	orr.w	r2, r2, #32
 80095d8:	621a      	str	r2, [r3, #32]
	}
	else
	{
		/* do nothing */
	}
}
 80095da:	e061      	b.n	80096a0 <HAL_TIM_IC_CaptureCallback+0x220>
		else if(Tim5_InputCaptureFlag_ChannelFour == STD_HIGH)
 80095dc:	4b3a      	ldr	r3, [pc, #232]	; (80096c8 <HAL_TIM_IC_CaptureCallback+0x248>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d15d      	bne.n	80096a0 <HAL_TIM_IC_CaptureCallback+0x220>
			Tim5_InputCompare_ValueTwo_ChannelFour = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80095e4:	2104      	movs	r1, #4
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7fd ffc6 	bl	8007578 <HAL_TIM_ReadCapturedValue>
 80095ec:	4603      	mov	r3, r0
 80095ee:	4a38      	ldr	r2, [pc, #224]	; (80096d0 <HAL_TIM_IC_CaptureCallback+0x250>)
 80095f0:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2200      	movs	r2, #0
 80095f8:	625a      	str	r2, [r3, #36]	; 0x24
			if (Tim5_InputCompare_ValueTwo_ChannelFour > Tim5_InputCompare_ValueOne_ChannelFour)
 80095fa:	4b35      	ldr	r3, [pc, #212]	; (80096d0 <HAL_TIM_IC_CaptureCallback+0x250>)
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	4b33      	ldr	r3, [pc, #204]	; (80096cc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	429a      	cmp	r2, r3
 8009604:	d907      	bls.n	8009616 <HAL_TIM_IC_CaptureCallback+0x196>
				Tim5_Difference_ChannelFour = Tim5_InputCompare_ValueTwo_ChannelFour - Tim5_InputCompare_ValueOne_ChannelFour;
 8009606:	4b32      	ldr	r3, [pc, #200]	; (80096d0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	4b30      	ldr	r3, [pc, #192]	; (80096cc <HAL_TIM_IC_CaptureCallback+0x24c>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	4a30      	ldr	r2, [pc, #192]	; (80096d4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8009612:	6013      	str	r3, [r2, #0]
 8009614:	e00d      	b.n	8009632 <HAL_TIM_IC_CaptureCallback+0x1b2>
			else if(Tim5_InputCompare_ValueOne_ChannelFour > Tim5_InputCompare_ValueTwo_ChannelFour)
 8009616:	4b2d      	ldr	r3, [pc, #180]	; (80096cc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	4b2d      	ldr	r3, [pc, #180]	; (80096d0 <HAL_TIM_IC_CaptureCallback+0x250>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	429a      	cmp	r2, r3
 8009620:	d907      	bls.n	8009632 <HAL_TIM_IC_CaptureCallback+0x1b2>
				Tim5_Difference_ChannelFour = (0xFFFFFFFF - Tim5_InputCompare_ValueOne_ChannelFour) + Tim5_InputCompare_ValueTwo_ChannelFour;
 8009622:	4b2b      	ldr	r3, [pc, #172]	; (80096d0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	4b29      	ldr	r3, [pc, #164]	; (80096cc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	3b01      	subs	r3, #1
 800962e:	4a29      	ldr	r2, [pc, #164]	; (80096d4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8009630:	6013      	str	r3, [r2, #0]
			Tim5_CalculatedDistance_ChannelFour = Tim5_Difference_ChannelFour * 0.034 / 2;
 8009632:	4b28      	ldr	r3, [pc, #160]	; (80096d4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4618      	mov	r0, r3
 8009638:	f7f6 ff1c 	bl	8000474 <__aeabi_ui2d>
 800963c:	a31a      	add	r3, pc, #104	; (adr r3, 80096a8 <HAL_TIM_IC_CaptureCallback+0x228>)
 800963e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009642:	f7f6 ff91 	bl	8000568 <__aeabi_dmul>
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	4610      	mov	r0, r2
 800964c:	4619      	mov	r1, r3
 800964e:	f04f 0200 	mov.w	r2, #0
 8009652:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009656:	f7f7 f8b1 	bl	80007bc <__aeabi_ddiv>
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	4610      	mov	r0, r2
 8009660:	4619      	mov	r1, r3
 8009662:	f7f7 f993 	bl	800098c <__aeabi_d2uiz>
 8009666:	4603      	mov	r3, r0
 8009668:	b2da      	uxtb	r2, r3
 800966a:	4b1b      	ldr	r3, [pc, #108]	; (80096d8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800966c:	701a      	strb	r2, [r3, #0]
			Tim5_InputCaptureFlag_ChannelFour = 0;
 800966e:	4b16      	ldr	r3, [pc, #88]	; (80096c8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8009670:	2200      	movs	r2, #0
 8009672:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	6a1a      	ldr	r2, [r3, #32]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009682:	621a      	str	r2, [r3, #32]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6a12      	ldr	r2, [r2, #32]
 800968e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
 8009690:	4b0c      	ldr	r3, [pc, #48]	; (80096c4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68da      	ldr	r2, [r3, #12]
 8009696:	4b0b      	ldr	r3, [pc, #44]	; (80096c4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f022 0204 	bic.w	r2, r2, #4
 800969e:	60da      	str	r2, [r3, #12]
}
 80096a0:	bf00      	nop
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	b020c49c 	.word	0xb020c49c
 80096ac:	3fa16872 	.word	0x3fa16872
 80096b0:	200006d8 	.word	0x200006d8
 80096b4:	200006cc 	.word	0x200006cc
 80096b8:	200006d0 	.word	0x200006d0
 80096bc:	200006d4 	.word	0x200006d4
 80096c0:	200006d9 	.word	0x200006d9
 80096c4:	20000564 	.word	0x20000564
 80096c8:	200006e8 	.word	0x200006e8
 80096cc:	200006dc 	.word	0x200006dc
 80096d0:	200006e0 	.word	0x200006e0
 80096d4:	200006e4 	.word	0x200006e4
 80096d8:	200006e9 	.word	0x200006e9

080096dc <Tim_Init>:
/***********************************************************************************
* Function: Tim_Init										   			           *
* Description: Peripheral initialization.									       *
************************************************************************************/
StdReturnType Tim_Init(uint8 TimerChannel)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	4603      	mov	r3, r0
 80096e4:	71fb      	strb	r3, [r7, #7]
	/* Set the timer channel value into a local variable. */
	uint8 localValue = TimerChannel;
 80096e6:	79fb      	ldrb	r3, [r7, #7]
 80096e8:	73fb      	strb	r3, [r7, #15]
	switch(localValue)
 80096ea:	7bfb      	ldrb	r3, [r7, #15]
 80096ec:	3b02      	subs	r3, #2
 80096ee:	2b03      	cmp	r3, #3
 80096f0:	f200 81f4 	bhi.w	8009adc <Tim_Init+0x400>
 80096f4:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <Tim_Init+0x20>)
 80096f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fa:	bf00      	nop
 80096fc:	0800970d 	.word	0x0800970d
 8009700:	080097f9 	.word	0x080097f9
 8009704:	0800991d 	.word	0x0800991d
 8009708:	080099f3 	.word	0x080099f3
	{
		/* Initialize the timer two. */
		case TIMER_TWO:
			/* Configure the timer parameters. */
			htim2.Instance = TIM2;
 800970c:	4b7a      	ldr	r3, [pc, #488]	; (80098f8 <Tim_Init+0x21c>)
 800970e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009712:	601a      	str	r2, [r3, #0]
			htim2.Init.Prescaler = 1000-1;
 8009714:	4b78      	ldr	r3, [pc, #480]	; (80098f8 <Tim_Init+0x21c>)
 8009716:	f240 32e7 	movw	r2, #999	; 0x3e7
 800971a:	605a      	str	r2, [r3, #4]
			htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800971c:	4b76      	ldr	r3, [pc, #472]	; (80098f8 <Tim_Init+0x21c>)
 800971e:	2200      	movs	r2, #0
 8009720:	609a      	str	r2, [r3, #8]
			htim2.Init.Period = 2000-1;
 8009722:	4b75      	ldr	r3, [pc, #468]	; (80098f8 <Tim_Init+0x21c>)
 8009724:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8009728:	60da      	str	r2, [r3, #12]
			htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800972a:	4b73      	ldr	r3, [pc, #460]	; (80098f8 <Tim_Init+0x21c>)
 800972c:	2200      	movs	r2, #0
 800972e:	611a      	str	r2, [r3, #16]
			htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009730:	4b71      	ldr	r3, [pc, #452]	; (80098f8 <Tim_Init+0x21c>)
 8009732:	2200      	movs	r2, #0
 8009734:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009736:	4870      	ldr	r0, [pc, #448]	; (80098f8 <Tim_Init+0x21c>)
 8009738:	f7fc ff7c 	bl	8006634 <HAL_TIM_Base_Init>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d002      	beq.n	8009748 <Tim_Init+0x6c>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8009742:	486d      	ldr	r0, [pc, #436]	; (80098f8 <Tim_Init+0x21c>)
 8009744:	f000 fa1c 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the timer clock source. */
			sClockSourceConfig2.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009748:	4b6c      	ldr	r3, [pc, #432]	; (80098fc <Tim_Init+0x220>)
 800974a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800974e:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig2) != HAL_OK)
 8009750:	496a      	ldr	r1, [pc, #424]	; (80098fc <Tim_Init+0x220>)
 8009752:	4869      	ldr	r0, [pc, #420]	; (80098f8 <Tim_Init+0x21c>)
 8009754:	f7fd fe48 	bl	80073e8 <HAL_TIM_ConfigClockSource>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d002      	beq.n	8009764 <Tim_Init+0x88>
			{
				HAL_TIM_ErrorCallback(&htim2);
 800975e:	4866      	ldr	r0, [pc, #408]	; (80098f8 <Tim_Init+0x21c>)
 8009760:	f000 fa0e 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009764:	4864      	ldr	r0, [pc, #400]	; (80098f8 <Tim_Init+0x21c>)
 8009766:	f7fd f823 	bl	80067b0 <HAL_TIM_PWM_Init>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d002      	beq.n	8009776 <Tim_Init+0x9a>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8009770:	4861      	ldr	r0, [pc, #388]	; (80098f8 <Tim_Init+0x21c>)
 8009772:	f000 fa05 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the master slave mode and output trigger. */
			sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 8009776:	4b62      	ldr	r3, [pc, #392]	; (8009900 <Tim_Init+0x224>)
 8009778:	2200      	movs	r2, #0
 800977a:	601a      	str	r2, [r3, #0]
			sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800977c:	4b60      	ldr	r3, [pc, #384]	; (8009900 <Tim_Init+0x224>)
 800977e:	2200      	movs	r2, #0
 8009780:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig2) != HAL_OK)
 8009782:	495f      	ldr	r1, [pc, #380]	; (8009900 <Tim_Init+0x224>)
 8009784:	485c      	ldr	r0, [pc, #368]	; (80098f8 <Tim_Init+0x21c>)
 8009786:	f7fe fbd1 	bl	8007f2c <HAL_TIMEx_MasterConfigSynchronization>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d002      	beq.n	8009796 <Tim_Init+0xba>
			{
				HAL_TIM_ErrorCallback(&htim2);
 8009790:	4859      	ldr	r0, [pc, #356]	; (80098f8 <Tim_Init+0x21c>)
 8009792:	f000 f9f5 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Set the PWM parameters. */
			sConfigOC2.OCMode = TIM_OCMODE_PWM1;
 8009796:	4b5b      	ldr	r3, [pc, #364]	; (8009904 <Tim_Init+0x228>)
 8009798:	2260      	movs	r2, #96	; 0x60
 800979a:	601a      	str	r2, [r3, #0]
			sConfigOC2.Pulse = 0;
 800979c:	4b59      	ldr	r3, [pc, #356]	; (8009904 <Tim_Init+0x228>)
 800979e:	2200      	movs	r2, #0
 80097a0:	605a      	str	r2, [r3, #4]
			sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 80097a2:	4b58      	ldr	r3, [pc, #352]	; (8009904 <Tim_Init+0x228>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	609a      	str	r2, [r3, #8]
			sConfigOC2.OCFastMode = TIM_OCFAST_ENABLE;
 80097a8:	4b56      	ldr	r3, [pc, #344]	; (8009904 <Tim_Init+0x228>)
 80097aa:	2204      	movs	r2, #4
 80097ac:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_1) != HAL_OK)
 80097ae:	2200      	movs	r2, #0
 80097b0:	4954      	ldr	r1, [pc, #336]	; (8009904 <Tim_Init+0x228>)
 80097b2:	4851      	ldr	r0, [pc, #324]	; (80098f8 <Tim_Init+0x21c>)
 80097b4:	f7fd fd56 	bl	8007264 <HAL_TIM_PWM_ConfigChannel>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d002      	beq.n	80097c4 <Tim_Init+0xe8>
			{
				HAL_TIM_ErrorCallback(&htim2);
 80097be:	484e      	ldr	r0, [pc, #312]	; (80098f8 <Tim_Init+0x21c>)
 80097c0:	f000 f9de 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_2) != HAL_OK)
 80097c4:	2204      	movs	r2, #4
 80097c6:	494f      	ldr	r1, [pc, #316]	; (8009904 <Tim_Init+0x228>)
 80097c8:	484b      	ldr	r0, [pc, #300]	; (80098f8 <Tim_Init+0x21c>)
 80097ca:	f7fd fd4b 	bl	8007264 <HAL_TIM_PWM_ConfigChannel>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d002      	beq.n	80097da <Tim_Init+0xfe>
			{
				HAL_TIM_ErrorCallback(&htim2);
 80097d4:	4848      	ldr	r0, [pc, #288]	; (80098f8 <Tim_Init+0x21c>)
 80097d6:	f000 f9d3 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC2, TIM_CHANNEL_3) != HAL_OK)
 80097da:	2208      	movs	r2, #8
 80097dc:	4949      	ldr	r1, [pc, #292]	; (8009904 <Tim_Init+0x228>)
 80097de:	4846      	ldr	r0, [pc, #280]	; (80098f8 <Tim_Init+0x21c>)
 80097e0:	f7fd fd40 	bl	8007264 <HAL_TIM_PWM_ConfigChannel>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d002      	beq.n	80097f0 <Tim_Init+0x114>
			{
				HAL_TIM_ErrorCallback(&htim2);
 80097ea:	4843      	ldr	r0, [pc, #268]	; (80098f8 <Tim_Init+0x21c>)
 80097ec:	f000 f9c8 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the GPIO. */
			HAL_TIM_MspPostInit(&htim2);
 80097f0:	4841      	ldr	r0, [pc, #260]	; (80098f8 <Tim_Init+0x21c>)
 80097f2:	f7f9 ff09 	bl	8003608 <HAL_TIM_MspPostInit>

			break;
 80097f6:	e174      	b.n	8009ae2 <Tim_Init+0x406>
		/* Initialize the timer three. */
		case TIMER_THREE:
			/* Configure the timer parameters. */
			htim3.Instance = TIM3;
 80097f8:	4b43      	ldr	r3, [pc, #268]	; (8009908 <Tim_Init+0x22c>)
 80097fa:	4a44      	ldr	r2, [pc, #272]	; (800990c <Tim_Init+0x230>)
 80097fc:	601a      	str	r2, [r3, #0]
			htim3.Init.Prescaler = 1000-1;
 80097fe:	4b42      	ldr	r3, [pc, #264]	; (8009908 <Tim_Init+0x22c>)
 8009800:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009804:	605a      	str	r2, [r3, #4]
			htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009806:	4b40      	ldr	r3, [pc, #256]	; (8009908 <Tim_Init+0x22c>)
 8009808:	2200      	movs	r2, #0
 800980a:	609a      	str	r2, [r3, #8]
			htim3.Init.Period = 2000-1;
 800980c:	4b3e      	ldr	r3, [pc, #248]	; (8009908 <Tim_Init+0x22c>)
 800980e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8009812:	60da      	str	r2, [r3, #12]
			htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009814:	4b3c      	ldr	r3, [pc, #240]	; (8009908 <Tim_Init+0x22c>)
 8009816:	2200      	movs	r2, #0
 8009818:	611a      	str	r2, [r3, #16]
			htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800981a:	4b3b      	ldr	r3, [pc, #236]	; (8009908 <Tim_Init+0x22c>)
 800981c:	2200      	movs	r2, #0
 800981e:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009820:	4839      	ldr	r0, [pc, #228]	; (8009908 <Tim_Init+0x22c>)
 8009822:	f7fc ff07 	bl	8006634 <HAL_TIM_Base_Init>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d002      	beq.n	8009832 <Tim_Init+0x156>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800982c:	4836      	ldr	r0, [pc, #216]	; (8009908 <Tim_Init+0x22c>)
 800982e:	f000 f9a7 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Set the clock source. */
			sClockSourceConfig3.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009832:	4b37      	ldr	r3, [pc, #220]	; (8009910 <Tim_Init+0x234>)
 8009834:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009838:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig3) != HAL_OK)
 800983a:	4935      	ldr	r1, [pc, #212]	; (8009910 <Tim_Init+0x234>)
 800983c:	4832      	ldr	r0, [pc, #200]	; (8009908 <Tim_Init+0x22c>)
 800983e:	f7fd fdd3 	bl	80073e8 <HAL_TIM_ConfigClockSource>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d002      	beq.n	800984e <Tim_Init+0x172>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 8009848:	482f      	ldr	r0, [pc, #188]	; (8009908 <Tim_Init+0x22c>)
 800984a:	f000 f999 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800984e:	482e      	ldr	r0, [pc, #184]	; (8009908 <Tim_Init+0x22c>)
 8009850:	f7fc ffae 	bl	80067b0 <HAL_TIM_PWM_Init>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d002      	beq.n	8009860 <Tim_Init+0x184>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800985a:	482b      	ldr	r0, [pc, #172]	; (8009908 <Tim_Init+0x22c>)
 800985c:	f000 f990 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure master slave mode. */
			sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 8009860:	4b2c      	ldr	r3, [pc, #176]	; (8009914 <Tim_Init+0x238>)
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]
			sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009866:	4b2b      	ldr	r3, [pc, #172]	; (8009914 <Tim_Init+0x238>)
 8009868:	2200      	movs	r2, #0
 800986a:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig3) != HAL_OK)
 800986c:	4929      	ldr	r1, [pc, #164]	; (8009914 <Tim_Init+0x238>)
 800986e:	4826      	ldr	r0, [pc, #152]	; (8009908 <Tim_Init+0x22c>)
 8009870:	f7fe fb5c 	bl	8007f2c <HAL_TIMEx_MasterConfigSynchronization>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d002      	beq.n	8009880 <Tim_Init+0x1a4>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 800987a:	4823      	ldr	r0, [pc, #140]	; (8009908 <Tim_Init+0x22c>)
 800987c:	f000 f980 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure PWM parameters. */
			sConfigOC3.OCMode = TIM_OCMODE_PWM1;
 8009880:	4b25      	ldr	r3, [pc, #148]	; (8009918 <Tim_Init+0x23c>)
 8009882:	2260      	movs	r2, #96	; 0x60
 8009884:	601a      	str	r2, [r3, #0]
			sConfigOC3.Pulse = 0;
 8009886:	4b24      	ldr	r3, [pc, #144]	; (8009918 <Tim_Init+0x23c>)
 8009888:	2200      	movs	r2, #0
 800988a:	605a      	str	r2, [r3, #4]
			sConfigOC3.OCPolarity = TIM_OCPOLARITY_HIGH;
 800988c:	4b22      	ldr	r3, [pc, #136]	; (8009918 <Tim_Init+0x23c>)
 800988e:	2200      	movs	r2, #0
 8009890:	609a      	str	r2, [r3, #8]
			sConfigOC3.OCFastMode = TIM_OCFAST_ENABLE;
 8009892:	4b21      	ldr	r3, [pc, #132]	; (8009918 <Tim_Init+0x23c>)
 8009894:	2204      	movs	r2, #4
 8009896:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_1) != HAL_OK)
 8009898:	2200      	movs	r2, #0
 800989a:	491f      	ldr	r1, [pc, #124]	; (8009918 <Tim_Init+0x23c>)
 800989c:	481a      	ldr	r0, [pc, #104]	; (8009908 <Tim_Init+0x22c>)
 800989e:	f7fd fce1 	bl	8007264 <HAL_TIM_PWM_ConfigChannel>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d002      	beq.n	80098ae <Tim_Init+0x1d2>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 80098a8:	4817      	ldr	r0, [pc, #92]	; (8009908 <Tim_Init+0x22c>)
 80098aa:	f000 f969 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_2) != HAL_OK)
 80098ae:	2204      	movs	r2, #4
 80098b0:	4919      	ldr	r1, [pc, #100]	; (8009918 <Tim_Init+0x23c>)
 80098b2:	4815      	ldr	r0, [pc, #84]	; (8009908 <Tim_Init+0x22c>)
 80098b4:	f7fd fcd6 	bl	8007264 <HAL_TIM_PWM_ConfigChannel>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d002      	beq.n	80098c4 <Tim_Init+0x1e8>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 80098be:	4812      	ldr	r0, [pc, #72]	; (8009908 <Tim_Init+0x22c>)
 80098c0:	f000 f95e 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_3) != HAL_OK)
 80098c4:	2208      	movs	r2, #8
 80098c6:	4914      	ldr	r1, [pc, #80]	; (8009918 <Tim_Init+0x23c>)
 80098c8:	480f      	ldr	r0, [pc, #60]	; (8009908 <Tim_Init+0x22c>)
 80098ca:	f7fd fccb 	bl	8007264 <HAL_TIM_PWM_ConfigChannel>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d002      	beq.n	80098da <Tim_Init+0x1fe>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 80098d4:	480c      	ldr	r0, [pc, #48]	; (8009908 <Tim_Init+0x22c>)
 80098d6:	f000 f953 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC3, TIM_CHANNEL_4) != HAL_OK)
 80098da:	220c      	movs	r2, #12
 80098dc:	490e      	ldr	r1, [pc, #56]	; (8009918 <Tim_Init+0x23c>)
 80098de:	480a      	ldr	r0, [pc, #40]	; (8009908 <Tim_Init+0x22c>)
 80098e0:	f7fd fcc0 	bl	8007264 <HAL_TIM_PWM_ConfigChannel>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <Tim_Init+0x214>
			{
			  HAL_TIM_ErrorCallback(&htim3);
 80098ea:	4807      	ldr	r0, [pc, #28]	; (8009908 <Tim_Init+0x22c>)
 80098ec:	f000 f948 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
			  /* do nothing */
			}
			/* Configure timer GPIO. */
			HAL_TIM_MspPostInit(&htim3);
 80098f0:	4805      	ldr	r0, [pc, #20]	; (8009908 <Tim_Init+0x22c>)
 80098f2:	f7f9 fe89 	bl	8003608 <HAL_TIM_MspPostInit>
			break;
 80098f6:	e0f4      	b.n	8009ae2 <Tim_Init+0x406>
 80098f8:	20000348 	.word	0x20000348
 80098fc:	200006ec 	.word	0x200006ec
 8009900:	200006fc 	.word	0x200006fc
 8009904:	20000704 	.word	0x20000704
 8009908:	200003fc 	.word	0x200003fc
 800990c:	40000400 	.word	0x40000400
 8009910:	20000758 	.word	0x20000758
 8009914:	20000768 	.word	0x20000768
 8009918:	20000720 	.word	0x20000720
		/* Initialize the timer four. */
		case TIMER_FOUR:
			/* Configure timer parameters. */
			htim4.Instance = TIM4;
 800991c:	4b73      	ldr	r3, [pc, #460]	; (8009aec <Tim_Init+0x410>)
 800991e:	4a74      	ldr	r2, [pc, #464]	; (8009af0 <Tim_Init+0x414>)
 8009920:	601a      	str	r2, [r3, #0]
			htim4.Init.Prescaler = 10000-1;
 8009922:	4b72      	ldr	r3, [pc, #456]	; (8009aec <Tim_Init+0x410>)
 8009924:	f242 720f 	movw	r2, #9999	; 0x270f
 8009928:	605a      	str	r2, [r3, #4]
			htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800992a:	4b70      	ldr	r3, [pc, #448]	; (8009aec <Tim_Init+0x410>)
 800992c:	2200      	movs	r2, #0
 800992e:	609a      	str	r2, [r3, #8]
			htim4.Init.Period = 1000-1;
 8009930:	4b6e      	ldr	r3, [pc, #440]	; (8009aec <Tim_Init+0x410>)
 8009932:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009936:	60da      	str	r2, [r3, #12]
			htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009938:	4b6c      	ldr	r3, [pc, #432]	; (8009aec <Tim_Init+0x410>)
 800993a:	2200      	movs	r2, #0
 800993c:	611a      	str	r2, [r3, #16]
			htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800993e:	4b6b      	ldr	r3, [pc, #428]	; (8009aec <Tim_Init+0x410>)
 8009940:	2200      	movs	r2, #0
 8009942:	619a      	str	r2, [r3, #24]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009944:	4869      	ldr	r0, [pc, #420]	; (8009aec <Tim_Init+0x410>)
 8009946:	f7fc fe75 	bl	8006634 <HAL_TIM_Base_Init>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <Tim_Init+0x27a>
			{
				HAL_TIM_ErrorCallback(&htim4);
 8009950:	4866      	ldr	r0, [pc, #408]	; (8009aec <Tim_Init+0x410>)
 8009952:	f000 f915 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the clock source. */
			sClockSourceConfig4.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009956:	4b67      	ldr	r3, [pc, #412]	; (8009af4 <Tim_Init+0x418>)
 8009958:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800995c:	601a      	str	r2, [r3, #0]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig4) != HAL_OK)
 800995e:	4965      	ldr	r1, [pc, #404]	; (8009af4 <Tim_Init+0x418>)
 8009960:	4862      	ldr	r0, [pc, #392]	; (8009aec <Tim_Init+0x410>)
 8009962:	f7fd fd41 	bl	80073e8 <HAL_TIM_ConfigClockSource>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d002      	beq.n	8009972 <Tim_Init+0x296>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800996c:	485f      	ldr	r0, [pc, #380]	; (8009aec <Tim_Init+0x410>)
 800996e:	f000 f907 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009972:	485e      	ldr	r0, [pc, #376]	; (8009aec <Tim_Init+0x410>)
 8009974:	f7fc ff1c 	bl	80067b0 <HAL_TIM_PWM_Init>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d002      	beq.n	8009984 <Tim_Init+0x2a8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800997e:	485b      	ldr	r0, [pc, #364]	; (8009aec <Tim_Init+0x410>)
 8009980:	f000 f8fe 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the master slave mode. */
			sMasterConfig4.MasterOutputTrigger = TIM_TRGO_RESET;
 8009984:	4b5c      	ldr	r3, [pc, #368]	; (8009af8 <Tim_Init+0x41c>)
 8009986:	2200      	movs	r2, #0
 8009988:	601a      	str	r2, [r3, #0]
			sMasterConfig4.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800998a:	4b5b      	ldr	r3, [pc, #364]	; (8009af8 <Tim_Init+0x41c>)
 800998c:	2200      	movs	r2, #0
 800998e:	605a      	str	r2, [r3, #4]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig4) != HAL_OK)
 8009990:	4959      	ldr	r1, [pc, #356]	; (8009af8 <Tim_Init+0x41c>)
 8009992:	4856      	ldr	r0, [pc, #344]	; (8009aec <Tim_Init+0x410>)
 8009994:	f7fe faca 	bl	8007f2c <HAL_TIMEx_MasterConfigSynchronization>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d002      	beq.n	80099a4 <Tim_Init+0x2c8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 800999e:	4853      	ldr	r0, [pc, #332]	; (8009aec <Tim_Init+0x410>)
 80099a0:	f000 f8ee 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the PWM parameters. */
			sConfigOC4.OCMode = TIM_OCMODE_PWM1;
 80099a4:	4b55      	ldr	r3, [pc, #340]	; (8009afc <Tim_Init+0x420>)
 80099a6:	2260      	movs	r2, #96	; 0x60
 80099a8:	601a      	str	r2, [r3, #0]
			sConfigOC4.Pulse = 999;
 80099aa:	4b54      	ldr	r3, [pc, #336]	; (8009afc <Tim_Init+0x420>)
 80099ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80099b0:	605a      	str	r2, [r3, #4]
			sConfigOC4.OCPolarity = TIM_OCPOLARITY_HIGH;
 80099b2:	4b52      	ldr	r3, [pc, #328]	; (8009afc <Tim_Init+0x420>)
 80099b4:	2200      	movs	r2, #0
 80099b6:	609a      	str	r2, [r3, #8]
			sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 80099b8:	4b50      	ldr	r3, [pc, #320]	; (8009afc <Tim_Init+0x420>)
 80099ba:	2200      	movs	r2, #0
 80099bc:	611a      	str	r2, [r3, #16]
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_3) != HAL_OK)
 80099be:	2208      	movs	r2, #8
 80099c0:	494e      	ldr	r1, [pc, #312]	; (8009afc <Tim_Init+0x420>)
 80099c2:	484a      	ldr	r0, [pc, #296]	; (8009aec <Tim_Init+0x410>)
 80099c4:	f7fd fc4e 	bl	8007264 <HAL_TIM_PWM_ConfigChannel>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d002      	beq.n	80099d4 <Tim_Init+0x2f8>
			{
				HAL_TIM_ErrorCallback(&htim4);
 80099ce:	4847      	ldr	r0, [pc, #284]	; (8009aec <Tim_Init+0x410>)
 80099d0:	f000 f8d6 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* If initialization is inadequate, call for the error callback. */
			if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC4, TIM_CHANNEL_4) != HAL_OK)
 80099d4:	220c      	movs	r2, #12
 80099d6:	4949      	ldr	r1, [pc, #292]	; (8009afc <Tim_Init+0x420>)
 80099d8:	4844      	ldr	r0, [pc, #272]	; (8009aec <Tim_Init+0x410>)
 80099da:	f7fd fc43 	bl	8007264 <HAL_TIM_PWM_ConfigChannel>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <Tim_Init+0x30e>
			{
				HAL_TIM_ErrorCallback(&htim4);
 80099e4:	4841      	ldr	r0, [pc, #260]	; (8009aec <Tim_Init+0x410>)
 80099e6:	f000 f8cb 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}
			/* Configure the timer GPIO. */
			HAL_TIM_MspPostInit(&htim4);
 80099ea:	4840      	ldr	r0, [pc, #256]	; (8009aec <Tim_Init+0x410>)
 80099ec:	f7f9 fe0c 	bl	8003608 <HAL_TIM_MspPostInit>
			break;
 80099f0:	e077      	b.n	8009ae2 <Tim_Init+0x406>
		/* Initialize the timer five. */
		case TIMER_FIVE:
			htim5.Instance = TIM5;
 80099f2:	4b43      	ldr	r3, [pc, #268]	; (8009b00 <Tim_Init+0x424>)
 80099f4:	4a43      	ldr	r2, [pc, #268]	; (8009b04 <Tim_Init+0x428>)
 80099f6:	601a      	str	r2, [r3, #0]
			htim5.Init.Prescaler = 100-1;
 80099f8:	4b41      	ldr	r3, [pc, #260]	; (8009b00 <Tim_Init+0x424>)
 80099fa:	2263      	movs	r2, #99	; 0x63
 80099fc:	605a      	str	r2, [r3, #4]
			htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099fe:	4b40      	ldr	r3, [pc, #256]	; (8009b00 <Tim_Init+0x424>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	609a      	str	r2, [r3, #8]
			htim5.Init.Period = 0xffffffff;
 8009a04:	4b3e      	ldr	r3, [pc, #248]	; (8009b00 <Tim_Init+0x424>)
 8009a06:	f04f 32ff 	mov.w	r2, #4294967295
 8009a0a:	60da      	str	r2, [r3, #12]
			htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a0c:	4b3c      	ldr	r3, [pc, #240]	; (8009b00 <Tim_Init+0x424>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	611a      	str	r2, [r3, #16]
			htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a12:	4b3b      	ldr	r3, [pc, #236]	; (8009b00 <Tim_Init+0x424>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	619a      	str	r2, [r3, #24]
			if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009a18:	4839      	ldr	r0, [pc, #228]	; (8009b00 <Tim_Init+0x424>)
 8009a1a:	f7fc fe0b 	bl	8006634 <HAL_TIM_Base_Init>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d002      	beq.n	8009a2a <Tim_Init+0x34e>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009a24:	4836      	ldr	r0, [pc, #216]	; (8009b00 <Tim_Init+0x424>)
 8009a26:	f000 f8ab 	bl	8009b80 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sClockSourceConfig5.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a2a:	4b37      	ldr	r3, [pc, #220]	; (8009b08 <Tim_Init+0x42c>)
 8009a2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009a30:	601a      	str	r2, [r3, #0]
			if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig5) != HAL_OK)
 8009a32:	4935      	ldr	r1, [pc, #212]	; (8009b08 <Tim_Init+0x42c>)
 8009a34:	4832      	ldr	r0, [pc, #200]	; (8009b00 <Tim_Init+0x424>)
 8009a36:	f7fd fcd7 	bl	80073e8 <HAL_TIM_ConfigClockSource>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d002      	beq.n	8009a46 <Tim_Init+0x36a>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009a40:	482f      	ldr	r0, [pc, #188]	; (8009b00 <Tim_Init+0x424>)
 8009a42:	f000 f89d 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8009a46:	482e      	ldr	r0, [pc, #184]	; (8009b00 <Tim_Init+0x424>)
 8009a48:	f7fd f8c8 	bl	8006bdc <HAL_TIM_IC_Init>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d002      	beq.n	8009a58 <Tim_Init+0x37c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009a52:	482b      	ldr	r0, [pc, #172]	; (8009b00 <Tim_Init+0x424>)
 8009a54:	f000 f894 	bl	8009b80 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sMasterConfig5.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a58:	4b2c      	ldr	r3, [pc, #176]	; (8009b0c <Tim_Init+0x430>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]
			sMasterConfig5.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a5e:	4b2b      	ldr	r3, [pc, #172]	; (8009b0c <Tim_Init+0x430>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	605a      	str	r2, [r3, #4]
			if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig5) != HAL_OK)
 8009a64:	4929      	ldr	r1, [pc, #164]	; (8009b0c <Tim_Init+0x430>)
 8009a66:	4826      	ldr	r0, [pc, #152]	; (8009b00 <Tim_Init+0x424>)
 8009a68:	f7fe fa60 	bl	8007f2c <HAL_TIMEx_MasterConfigSynchronization>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d002      	beq.n	8009a78 <Tim_Init+0x39c>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009a72:	4823      	ldr	r0, [pc, #140]	; (8009b00 <Tim_Init+0x424>)
 8009a74:	f000 f884 	bl	8009b80 <HAL_TIM_ErrorCallback>
			}
			else
			{
				/* do nothing */
			}
			sConfigIC5.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8009a78:	4b25      	ldr	r3, [pc, #148]	; (8009b10 <Tim_Init+0x434>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	601a      	str	r2, [r3, #0]
			sConfigIC5.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8009a7e:	4b24      	ldr	r3, [pc, #144]	; (8009b10 <Tim_Init+0x434>)
 8009a80:	2201      	movs	r2, #1
 8009a82:	605a      	str	r2, [r3, #4]
			sConfigIC5.ICPrescaler = TIM_ICPSC_DIV1;
 8009a84:	4b22      	ldr	r3, [pc, #136]	; (8009b10 <Tim_Init+0x434>)
 8009a86:	2200      	movs	r2, #0
 8009a88:	609a      	str	r2, [r3, #8]
			sConfigIC5.ICFilter = 0;
 8009a8a:	4b21      	ldr	r3, [pc, #132]	; (8009b10 <Tim_Init+0x434>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	60da      	str	r2, [r3, #12]
			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_1) != HAL_OK)
 8009a90:	2200      	movs	r2, #0
 8009a92:	491f      	ldr	r1, [pc, #124]	; (8009b10 <Tim_Init+0x434>)
 8009a94:	481a      	ldr	r0, [pc, #104]	; (8009b00 <Tim_Init+0x424>)
 8009a96:	f7fd fb49 	bl	800712c <HAL_TIM_IC_ConfigChannel>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d002      	beq.n	8009aa6 <Tim_Init+0x3ca>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009aa0:	4817      	ldr	r0, [pc, #92]	; (8009b00 <Tim_Init+0x424>)
 8009aa2:	f000 f86d 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC5, TIM_CHANNEL_2) != HAL_OK)
 8009aa6:	2204      	movs	r2, #4
 8009aa8:	4919      	ldr	r1, [pc, #100]	; (8009b10 <Tim_Init+0x434>)
 8009aaa:	4815      	ldr	r0, [pc, #84]	; (8009b00 <Tim_Init+0x424>)
 8009aac:	f7fd fb3e 	bl	800712c <HAL_TIM_IC_ConfigChannel>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d002      	beq.n	8009abc <Tim_Init+0x3e0>
			{
				HAL_TIM_ErrorCallback(&htim5);
 8009ab6:	4812      	ldr	r0, [pc, #72]	; (8009b00 <Tim_Init+0x424>)
 8009ab8:	f000 f862 	bl	8009b80 <HAL_TIM_ErrorCallback>
			else
			{
				/* do nothing */
			}

			if(TimH_MainFunctionFirstCall == STD_LOW)
 8009abc:	4b15      	ldr	r3, [pc, #84]	; (8009b14 <Tim_Init+0x438>)
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10d      	bne.n	8009ae0 <Tim_Init+0x404>
			{
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	480e      	ldr	r0, [pc, #56]	; (8009b00 <Tim_Init+0x424>)
 8009ac8:	f7fd f8ee 	bl	8006ca8 <HAL_TIM_IC_Start_IT>
				HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 8009acc:	2104      	movs	r1, #4
 8009ace:	480c      	ldr	r0, [pc, #48]	; (8009b00 <Tim_Init+0x424>)
 8009ad0:	f7fd f8ea 	bl	8006ca8 <HAL_TIM_IC_Start_IT>
				TimH_MainFunctionFirstCall = STD_HIGH;
 8009ad4:	4b0f      	ldr	r3, [pc, #60]	; (8009b14 <Tim_Init+0x438>)
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	701a      	strb	r2, [r3, #0]
			else
			{
				/* do nothing */
			}

			break;
 8009ada:	e001      	b.n	8009ae0 <Tim_Init+0x404>
		default:
			break;
 8009adc:	bf00      	nop
 8009ade:	e000      	b.n	8009ae2 <Tim_Init+0x406>
			break;
 8009ae0:	bf00      	nop
	}
	return E_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	200004b0 	.word	0x200004b0
 8009af0:	40000800 	.word	0x40000800
 8009af4:	20000770 	.word	0x20000770
 8009af8:	20000780 	.word	0x20000780
 8009afc:	2000073c 	.word	0x2000073c
 8009b00:	20000564 	.word	0x20000564
 8009b04:	40000c00 	.word	0x40000c00
 8009b08:	20000788 	.word	0x20000788
 8009b0c:	20000798 	.word	0x20000798
 8009b10:	200007a0 	.word	0x200007a0
 8009b14:	200006ea 	.word	0x200006ea

08009b18 <Tim_DeInit>:
/***********************************************************************************
* Function: Tim_DeInit										   			           *
* Description: Peripheral de-initialization.									   *
************************************************************************************/
StdReturnType Tim_DeInit(uint8 TimerChannel)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	4603      	mov	r3, r0
 8009b20:	71fb      	strb	r3, [r7, #7]
	/* Store the timer channel value into a local variable. */
	uint8 localVariable = TimerChannel;
 8009b22:	79fb      	ldrb	r3, [r7, #7]
 8009b24:	73fb      	strb	r3, [r7, #15]
	/* Process the request for timer de-init. */
	switch(localVariable)
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
 8009b28:	3b02      	subs	r3, #2
 8009b2a:	2b03      	cmp	r3, #3
 8009b2c:	d81a      	bhi.n	8009b64 <Tim_DeInit+0x4c>
 8009b2e:	a201      	add	r2, pc, #4	; (adr r2, 8009b34 <Tim_DeInit+0x1c>)
 8009b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b34:	08009b45 	.word	0x08009b45
 8009b38:	08009b4d 	.word	0x08009b4d
 8009b3c:	08009b55 	.word	0x08009b55
 8009b40:	08009b5d 	.word	0x08009b5d
	{
		case TIMER_TWO:
			HAL_TIM_Base_MspDeInit(&htim2);
 8009b44:	480a      	ldr	r0, [pc, #40]	; (8009b70 <Tim_DeInit+0x58>)
 8009b46:	f7f9 fe09 	bl	800375c <HAL_TIM_Base_MspDeInit>
			break;
 8009b4a:	e00c      	b.n	8009b66 <Tim_DeInit+0x4e>
		case TIMER_THREE:
			HAL_TIM_Base_MspDeInit(&htim3);
 8009b4c:	4809      	ldr	r0, [pc, #36]	; (8009b74 <Tim_DeInit+0x5c>)
 8009b4e:	f7f9 fe05 	bl	800375c <HAL_TIM_Base_MspDeInit>
			break;
 8009b52:	e008      	b.n	8009b66 <Tim_DeInit+0x4e>
		case TIMER_FOUR:
			HAL_TIM_Base_MspDeInit(&htim4);
 8009b54:	4808      	ldr	r0, [pc, #32]	; (8009b78 <Tim_DeInit+0x60>)
 8009b56:	f7f9 fe01 	bl	800375c <HAL_TIM_Base_MspDeInit>
			break;
 8009b5a:	e004      	b.n	8009b66 <Tim_DeInit+0x4e>
		case TIMER_FIVE:
			HAL_TIM_Base_MspDeInit(&htim5);
 8009b5c:	4807      	ldr	r0, [pc, #28]	; (8009b7c <Tim_DeInit+0x64>)
 8009b5e:	f7f9 fdfd 	bl	800375c <HAL_TIM_Base_MspDeInit>
			break;
 8009b62:	e000      	b.n	8009b66 <Tim_DeInit+0x4e>
		default:
			break;
 8009b64:	bf00      	nop
	}
	return E_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	20000348 	.word	0x20000348
 8009b74:	200003fc 	.word	0x200003fc
 8009b78:	200004b0 	.word	0x200004b0
 8009b7c:	20000564 	.word	0x20000564

08009b80 <HAL_TIM_ErrorCallback>:
/***********************************************************************************
* Function: HAL_TIM_ErrorCallback										   		   *
* Description: Error callback called when timer fault occurs.					   *
************************************************************************************/
VOID HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization of the peripheral in case of error. */
	if(htim->Instance == TIM2)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b90:	d10b      	bne.n	8009baa <HAL_TIM_ErrorCallback+0x2a>
	{
		SystemManager_Fault[TIMER2_ERROR]++;
 8009b92:	4b21      	ldr	r3, [pc, #132]	; (8009c18 <HAL_TIM_ErrorCallback+0x98>)
 8009b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b96:	3301      	adds	r3, #1
 8009b98:	4a1f      	ldr	r2, [pc, #124]	; (8009c18 <HAL_TIM_ErrorCallback+0x98>)
 8009b9a:	6593      	str	r3, [r2, #88]	; 0x58
		Tim_DeInit(TIMER_TWO);
 8009b9c:	2002      	movs	r0, #2
 8009b9e:	f7ff ffbb 	bl	8009b18 <Tim_DeInit>
		Tim_Init(TIMER_TWO);
 8009ba2:	2002      	movs	r0, #2
 8009ba4:	f7ff fd9a 	bl	80096dc <Tim_Init>
	}
	else
	{
		/* do nothing */
	}
}
 8009ba8:	e031      	b.n	8009c0e <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM3)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a1b      	ldr	r2, [pc, #108]	; (8009c1c <HAL_TIM_ErrorCallback+0x9c>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d10b      	bne.n	8009bcc <HAL_TIM_ErrorCallback+0x4c>
		SystemManager_Fault[TIMER3_ERROR]++;
 8009bb4:	4b18      	ldr	r3, [pc, #96]	; (8009c18 <HAL_TIM_ErrorCallback+0x98>)
 8009bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bb8:	3301      	adds	r3, #1
 8009bba:	4a17      	ldr	r2, [pc, #92]	; (8009c18 <HAL_TIM_ErrorCallback+0x98>)
 8009bbc:	65d3      	str	r3, [r2, #92]	; 0x5c
		Tim_DeInit(TIMER_THREE);
 8009bbe:	2003      	movs	r0, #3
 8009bc0:	f7ff ffaa 	bl	8009b18 <Tim_DeInit>
		Tim_Init(TIMER_THREE);
 8009bc4:	2003      	movs	r0, #3
 8009bc6:	f7ff fd89 	bl	80096dc <Tim_Init>
}
 8009bca:	e020      	b.n	8009c0e <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM4)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a13      	ldr	r2, [pc, #76]	; (8009c20 <HAL_TIM_ErrorCallback+0xa0>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d10b      	bne.n	8009bee <HAL_TIM_ErrorCallback+0x6e>
		SystemManager_Fault[TIMER4_ERROR]++;
 8009bd6:	4b10      	ldr	r3, [pc, #64]	; (8009c18 <HAL_TIM_ErrorCallback+0x98>)
 8009bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bda:	3301      	adds	r3, #1
 8009bdc:	4a0e      	ldr	r2, [pc, #56]	; (8009c18 <HAL_TIM_ErrorCallback+0x98>)
 8009bde:	6613      	str	r3, [r2, #96]	; 0x60
		Tim_DeInit(TIMER_FOUR);
 8009be0:	2004      	movs	r0, #4
 8009be2:	f7ff ff99 	bl	8009b18 <Tim_DeInit>
		Tim_Init(TIMER_FOUR);
 8009be6:	2004      	movs	r0, #4
 8009be8:	f7ff fd78 	bl	80096dc <Tim_Init>
}
 8009bec:	e00f      	b.n	8009c0e <HAL_TIM_ErrorCallback+0x8e>
	else if(htim->Instance == TIM5)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a0c      	ldr	r2, [pc, #48]	; (8009c24 <HAL_TIM_ErrorCallback+0xa4>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d10a      	bne.n	8009c0e <HAL_TIM_ErrorCallback+0x8e>
		SystemManager_Fault[TIMER5_ERROR]++;
 8009bf8:	4b07      	ldr	r3, [pc, #28]	; (8009c18 <HAL_TIM_ErrorCallback+0x98>)
 8009bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	4a06      	ldr	r2, [pc, #24]	; (8009c18 <HAL_TIM_ErrorCallback+0x98>)
 8009c00:	6653      	str	r3, [r2, #100]	; 0x64
		Tim_DeInit(TIMER_FIVE);
 8009c02:	2005      	movs	r0, #5
 8009c04:	f7ff ff88 	bl	8009b18 <Tim_DeInit>
		Tim_Init(TIMER_FIVE);
 8009c08:	2005      	movs	r0, #5
 8009c0a:	f7ff fd67 	bl	80096dc <Tim_Init>
}
 8009c0e:	bf00      	nop
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	2000a508 	.word	0x2000a508
 8009c1c:	40000400 	.word	0x40000400
 8009c20:	40000800 	.word	0x40000800
 8009c24:	40000c00 	.word	0x40000c00

08009c28 <Tim_MainFunction>:
/***********************************************************************************
* Function: Tim_MainFunction										   			   *
* Description: Peripheral main function.									       *
************************************************************************************/
VOID Tim_MainFunction()
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
	/* Check each timer for error status into local variables. */
	uint32 localStateTimerTwo = HAL_TIM_Base_GetState(&htim2);
 8009c2e:	4891      	ldr	r0, [pc, #580]	; (8009e74 <Tim_MainFunction+0x24c>)
 8009c30:	f7fd fd2c 	bl	800768c <HAL_TIM_Base_GetState>
 8009c34:	4603      	mov	r3, r0
 8009c36:	60fb      	str	r3, [r7, #12]
	uint32 localStateTimerThree = HAL_TIM_Base_GetState(&htim3);
 8009c38:	488f      	ldr	r0, [pc, #572]	; (8009e78 <Tim_MainFunction+0x250>)
 8009c3a:	f7fd fd27 	bl	800768c <HAL_TIM_Base_GetState>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	60bb      	str	r3, [r7, #8]
	uint32 localStateTimerFour = HAL_TIM_Base_GetState(&htim4);
 8009c42:	488e      	ldr	r0, [pc, #568]	; (8009e7c <Tim_MainFunction+0x254>)
 8009c44:	f7fd fd22 	bl	800768c <HAL_TIM_Base_GetState>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	607b      	str	r3, [r7, #4]
	uint32 localStateTimerFive = HAL_TIM_Base_GetState(&htim5);
 8009c4c:	488c      	ldr	r0, [pc, #560]	; (8009e80 <Tim_MainFunction+0x258>)
 8009c4e:	f7fd fd1d 	bl	800768c <HAL_TIM_Base_GetState>
 8009c52:	4603      	mov	r3, r0
 8009c54:	603b      	str	r3, [r7, #0]
	/* Process timers state. */
	switch(localStateTimerFive)
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2b04      	cmp	r3, #4
 8009c5a:	d869      	bhi.n	8009d30 <Tim_MainFunction+0x108>
 8009c5c:	a201      	add	r2, pc, #4	; (adr r2, 8009c64 <Tim_MainFunction+0x3c>)
 8009c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c62:	bf00      	nop
 8009c64:	08009c79 	.word	0x08009c79
 8009c68:	08009c89 	.word	0x08009c89
 8009c6c:	08009d07 	.word	0x08009d07
 8009c70:	08009d11 	.word	0x08009d11
 8009c74:	08009d21 	.word	0x08009d21
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	b2da      	uxtb	r2, r3
 8009c7c:	4b81      	ldr	r3, [pc, #516]	; (8009e84 <Tim_MainFunction+0x25c>)
 8009c7e:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FIVE);
 8009c80:	2005      	movs	r0, #5
 8009c82:	f7ff fd2b 	bl	80096dc <Tim_Init>
			break;
 8009c86:	e054      	b.n	8009d32 <Tim_MainFunction+0x10a>
		case HAL_TIM_STATE_READY:
			if(Os_Counter % 100 == 0)
 8009c88:	4b7f      	ldr	r3, [pc, #508]	; (8009e88 <Tim_MainFunction+0x260>)
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	4b7f      	ldr	r3, [pc, #508]	; (8009e8c <Tim_MainFunction+0x264>)
 8009c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8009c92:	095b      	lsrs	r3, r3, #5
 8009c94:	2164      	movs	r1, #100	; 0x64
 8009c96:	fb01 f303 	mul.w	r3, r1, r3
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d12d      	bne.n	8009cfc <Tim_MainFunction+0xd4>
			{
				HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_SET);
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009ca6:	487a      	ldr	r0, [pc, #488]	; (8009e90 <Tim_MainFunction+0x268>)
 8009ca8:	f7fb ff5a 	bl	8005b60 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 8009cac:	2001      	movs	r0, #1
 8009cae:	f7fa f82b 	bl	8003d08 <HAL_Delay>
				HAL_GPIO_WritePin(PDCR_TRIG_PORT, PDCR_TRIG_PIN, GPIO_PIN_RESET);
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009cb8:	4875      	ldr	r0, [pc, #468]	; (8009e90 <Tim_MainFunction+0x268>)
 8009cba:	f7fb ff51 	bl	8005b60 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);
 8009cbe:	4b70      	ldr	r3, [pc, #448]	; (8009e80 <Tim_MainFunction+0x258>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68da      	ldr	r2, [r3, #12]
 8009cc4:	4b6e      	ldr	r3, [pc, #440]	; (8009e80 <Tim_MainFunction+0x258>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f042 0204 	orr.w	r2, r2, #4
 8009ccc:	60da      	str	r2, [r3, #12]
				HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_SET);
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009cd4:	486f      	ldr	r0, [pc, #444]	; (8009e94 <Tim_MainFunction+0x26c>)
 8009cd6:	f7fb ff43 	bl	8005b60 <HAL_GPIO_WritePin>
				HAL_Delay(1);
 8009cda:	2001      	movs	r0, #1
 8009cdc:	f7fa f814 	bl	8003d08 <HAL_Delay>
				HAL_GPIO_WritePin(PDCF_TRIG_PORT, PDCF_TRIG_PIN, GPIO_PIN_RESET);
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009ce6:	486b      	ldr	r0, [pc, #428]	; (8009e94 <Tim_MainFunction+0x26c>)
 8009ce8:	f7fb ff3a 	bl	8005b60 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC1);
 8009cec:	4b64      	ldr	r3, [pc, #400]	; (8009e80 <Tim_MainFunction+0x258>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68da      	ldr	r2, [r3, #12]
 8009cf2:	4b63      	ldr	r3, [pc, #396]	; (8009e80 <Tim_MainFunction+0x258>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f042 0202 	orr.w	r2, r2, #2
 8009cfa:	60da      	str	r2, [r3, #12]
			}
			else
			{
				/* do nothing */
			}
			TimH_BswState_TimerFive = localStateTimerFive;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	b2da      	uxtb	r2, r3
 8009d00:	4b60      	ldr	r3, [pc, #384]	; (8009e84 <Tim_MainFunction+0x25c>)
 8009d02:	701a      	strb	r2, [r3, #0]
			break;
 8009d04:	e015      	b.n	8009d32 <Tim_MainFunction+0x10a>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	4b5e      	ldr	r3, [pc, #376]	; (8009e84 <Tim_MainFunction+0x25c>)
 8009d0c:	701a      	strb	r2, [r3, #0]
			break;
 8009d0e:	e010      	b.n	8009d32 <Tim_MainFunction+0x10a>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	b2da      	uxtb	r2, r3
 8009d14:	4b5b      	ldr	r3, [pc, #364]	; (8009e84 <Tim_MainFunction+0x25c>)
 8009d16:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 8009d18:	4859      	ldr	r0, [pc, #356]	; (8009e80 <Tim_MainFunction+0x258>)
 8009d1a:	f7ff ff31 	bl	8009b80 <HAL_TIM_ErrorCallback>
			break;
 8009d1e:	e008      	b.n	8009d32 <Tim_MainFunction+0x10a>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFive = localStateTimerFive;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	b2da      	uxtb	r2, r3
 8009d24:	4b57      	ldr	r3, [pc, #348]	; (8009e84 <Tim_MainFunction+0x25c>)
 8009d26:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim5);
 8009d28:	4855      	ldr	r0, [pc, #340]	; (8009e80 <Tim_MainFunction+0x258>)
 8009d2a:	f7ff ff29 	bl	8009b80 <HAL_TIM_ErrorCallback>
			break;
 8009d2e:	e000      	b.n	8009d32 <Tim_MainFunction+0x10a>
		default:
			break;
 8009d30:	bf00      	nop
	}
	switch(localStateTimerTwo)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2b04      	cmp	r3, #4
 8009d36:	d82f      	bhi.n	8009d98 <Tim_MainFunction+0x170>
 8009d38:	a201      	add	r2, pc, #4	; (adr r2, 8009d40 <Tim_MainFunction+0x118>)
 8009d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3e:	bf00      	nop
 8009d40:	08009d55 	.word	0x08009d55
 8009d44:	08009d65 	.word	0x08009d65
 8009d48:	08009d6f 	.word	0x08009d6f
 8009d4c:	08009d79 	.word	0x08009d79
 8009d50:	08009d89 	.word	0x08009d89
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	4b4f      	ldr	r3, [pc, #316]	; (8009e98 <Tim_MainFunction+0x270>)
 8009d5a:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_TWO);
 8009d5c:	2002      	movs	r0, #2
 8009d5e:	f7ff fcbd 	bl	80096dc <Tim_Init>
			break;
 8009d62:	e01a      	b.n	8009d9a <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	b2da      	uxtb	r2, r3
 8009d68:	4b4b      	ldr	r3, [pc, #300]	; (8009e98 <Tim_MainFunction+0x270>)
 8009d6a:	701a      	strb	r2, [r3, #0]
			break;
 8009d6c:	e015      	b.n	8009d9a <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	4b49      	ldr	r3, [pc, #292]	; (8009e98 <Tim_MainFunction+0x270>)
 8009d74:	701a      	strb	r2, [r3, #0]
			break;
 8009d76:	e010      	b.n	8009d9a <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	b2da      	uxtb	r2, r3
 8009d7c:	4b46      	ldr	r3, [pc, #280]	; (8009e98 <Tim_MainFunction+0x270>)
 8009d7e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 8009d80:	483c      	ldr	r0, [pc, #240]	; (8009e74 <Tim_MainFunction+0x24c>)
 8009d82:	f7ff fefd 	bl	8009b80 <HAL_TIM_ErrorCallback>
			break;
 8009d86:	e008      	b.n	8009d9a <Tim_MainFunction+0x172>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerTwo = localStateTimerTwo;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	4b42      	ldr	r3, [pc, #264]	; (8009e98 <Tim_MainFunction+0x270>)
 8009d8e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim2);
 8009d90:	4838      	ldr	r0, [pc, #224]	; (8009e74 <Tim_MainFunction+0x24c>)
 8009d92:	f7ff fef5 	bl	8009b80 <HAL_TIM_ErrorCallback>
			break;
 8009d96:	e000      	b.n	8009d9a <Tim_MainFunction+0x172>
		default:
			break;
 8009d98:	bf00      	nop
	}
	switch(localStateTimerThree)
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2b04      	cmp	r3, #4
 8009d9e:	d82f      	bhi.n	8009e00 <Tim_MainFunction+0x1d8>
 8009da0:	a201      	add	r2, pc, #4	; (adr r2, 8009da8 <Tim_MainFunction+0x180>)
 8009da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da6:	bf00      	nop
 8009da8:	08009dbd 	.word	0x08009dbd
 8009dac:	08009dcd 	.word	0x08009dcd
 8009db0:	08009dd7 	.word	0x08009dd7
 8009db4:	08009de1 	.word	0x08009de1
 8009db8:	08009df1 	.word	0x08009df1
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	4b36      	ldr	r3, [pc, #216]	; (8009e9c <Tim_MainFunction+0x274>)
 8009dc2:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_THREE);
 8009dc4:	2003      	movs	r0, #3
 8009dc6:	f7ff fc89 	bl	80096dc <Tim_Init>
			break;
 8009dca:	e01a      	b.n	8009e02 <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	4b32      	ldr	r3, [pc, #200]	; (8009e9c <Tim_MainFunction+0x274>)
 8009dd2:	701a      	strb	r2, [r3, #0]
			break;
 8009dd4:	e015      	b.n	8009e02 <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	b2da      	uxtb	r2, r3
 8009dda:	4b30      	ldr	r3, [pc, #192]	; (8009e9c <Tim_MainFunction+0x274>)
 8009ddc:	701a      	strb	r2, [r3, #0]
			break;
 8009dde:	e010      	b.n	8009e02 <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	4b2d      	ldr	r3, [pc, #180]	; (8009e9c <Tim_MainFunction+0x274>)
 8009de6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 8009de8:	4823      	ldr	r0, [pc, #140]	; (8009e78 <Tim_MainFunction+0x250>)
 8009dea:	f7ff fec9 	bl	8009b80 <HAL_TIM_ErrorCallback>
			break;
 8009dee:	e008      	b.n	8009e02 <Tim_MainFunction+0x1da>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerThree = localStateTimerThree;
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	b2da      	uxtb	r2, r3
 8009df4:	4b29      	ldr	r3, [pc, #164]	; (8009e9c <Tim_MainFunction+0x274>)
 8009df6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim3);
 8009df8:	481f      	ldr	r0, [pc, #124]	; (8009e78 <Tim_MainFunction+0x250>)
 8009dfa:	f7ff fec1 	bl	8009b80 <HAL_TIM_ErrorCallback>
			break;
 8009dfe:	e000      	b.n	8009e02 <Tim_MainFunction+0x1da>
		default:
			break;
 8009e00:	bf00      	nop
	}
	switch(localStateTimerFour)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b04      	cmp	r3, #4
 8009e06:	d82f      	bhi.n	8009e68 <Tim_MainFunction+0x240>
 8009e08:	a201      	add	r2, pc, #4	; (adr r2, 8009e10 <Tim_MainFunction+0x1e8>)
 8009e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0e:	bf00      	nop
 8009e10:	08009e25 	.word	0x08009e25
 8009e14:	08009e35 	.word	0x08009e35
 8009e18:	08009e3f 	.word	0x08009e3f
 8009e1c:	08009e49 	.word	0x08009e49
 8009e20:	08009e59 	.word	0x08009e59
	{
		case HAL_TIM_STATE_RESET:
			TimH_BswState_TimerFour = localStateTimerFour;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	b2da      	uxtb	r2, r3
 8009e28:	4b1d      	ldr	r3, [pc, #116]	; (8009ea0 <Tim_MainFunction+0x278>)
 8009e2a:	701a      	strb	r2, [r3, #0]
			Tim_Init(TIMER_FOUR);
 8009e2c:	2004      	movs	r0, #4
 8009e2e:	f7ff fc55 	bl	80096dc <Tim_Init>
			break;
 8009e32:	e01a      	b.n	8009e6a <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_READY:
			TimH_BswState_TimerFour = localStateTimerFour;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	4b19      	ldr	r3, [pc, #100]	; (8009ea0 <Tim_MainFunction+0x278>)
 8009e3a:	701a      	strb	r2, [r3, #0]
			break;
 8009e3c:	e015      	b.n	8009e6a <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_BUSY:
			TimH_BswState_TimerFour = localStateTimerFour;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	4b17      	ldr	r3, [pc, #92]	; (8009ea0 <Tim_MainFunction+0x278>)
 8009e44:	701a      	strb	r2, [r3, #0]
			break;
 8009e46:	e010      	b.n	8009e6a <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_TIMEOUT:
			TimH_BswState_TimerFour = localStateTimerFour;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	4b14      	ldr	r3, [pc, #80]	; (8009ea0 <Tim_MainFunction+0x278>)
 8009e4e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 8009e50:	480a      	ldr	r0, [pc, #40]	; (8009e7c <Tim_MainFunction+0x254>)
 8009e52:	f7ff fe95 	bl	8009b80 <HAL_TIM_ErrorCallback>
			break;
 8009e56:	e008      	b.n	8009e6a <Tim_MainFunction+0x242>
		case HAL_TIM_STATE_ERROR:
			TimH_BswState_TimerFour = localStateTimerFour;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	b2da      	uxtb	r2, r3
 8009e5c:	4b10      	ldr	r3, [pc, #64]	; (8009ea0 <Tim_MainFunction+0x278>)
 8009e5e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_ErrorCallback(&htim4);
 8009e60:	4806      	ldr	r0, [pc, #24]	; (8009e7c <Tim_MainFunction+0x254>)
 8009e62:	f7ff fe8d 	bl	8009b80 <HAL_TIM_ErrorCallback>
			break;
 8009e66:	e000      	b.n	8009e6a <Tim_MainFunction+0x242>
		default:
			break;
 8009e68:	bf00      	nop
	}
}
 8009e6a:	bf00      	nop
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	20000348 	.word	0x20000348
 8009e78:	200003fc 	.word	0x200003fc
 8009e7c:	200004b0 	.word	0x200004b0
 8009e80:	20000564 	.word	0x20000564
 8009e84:	200006cb 	.word	0x200006cb
 8009e88:	200001f8 	.word	0x200001f8
 8009e8c:	51eb851f 	.word	0x51eb851f
 8009e90:	40020400 	.word	0x40020400
 8009e94:	40020000 	.word	0x40020000
 8009e98:	200006c8 	.word	0x200006c8
 8009e9c:	200006c9 	.word	0x200006c9
 8009ea0:	200006ca 	.word	0x200006ca

08009ea4 <HAL_TIM_PeriodElapsedCallback>:
* Function: HAL_TIM_PeriodElapsedCallback										   *
* Description: Peripheral period elapsed callback to process system state          *
* 			   when timer expires.									               *
************************************************************************************/
VOID HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
	/* Timer 1 is used for the time base source of FreeRTOS. Upon expiration increase the clock counter of the system. */
	if (htim->Instance == TIM1)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a04      	ldr	r2, [pc, #16]	; (8009ec4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d101      	bne.n	8009eba <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8009eb6:	f7f9 ff07 	bl	8003cc8 <HAL_IncTick>
	}
	else
	{
		/* do nothing */
	}
}
 8009eba:	bf00      	nop
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	40010000 	.word	0x40010000

08009ec8 <__NVIC_SetPriority>:
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	4603      	mov	r3, r0
 8009ed0:	6039      	str	r1, [r7, #0]
 8009ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	db0a      	blt.n	8009ef2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	490c      	ldr	r1, [pc, #48]	; (8009f14 <__NVIC_SetPriority+0x4c>)
 8009ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ee6:	0112      	lsls	r2, r2, #4
 8009ee8:	b2d2      	uxtb	r2, r2
 8009eea:	440b      	add	r3, r1
 8009eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009ef0:	e00a      	b.n	8009f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	b2da      	uxtb	r2, r3
 8009ef6:	4908      	ldr	r1, [pc, #32]	; (8009f18 <__NVIC_SetPriority+0x50>)
 8009ef8:	79fb      	ldrb	r3, [r7, #7]
 8009efa:	f003 030f 	and.w	r3, r3, #15
 8009efe:	3b04      	subs	r3, #4
 8009f00:	0112      	lsls	r2, r2, #4
 8009f02:	b2d2      	uxtb	r2, r2
 8009f04:	440b      	add	r3, r1
 8009f06:	761a      	strb	r2, [r3, #24]
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	e000e100 	.word	0xe000e100
 8009f18:	e000ed00 	.word	0xe000ed00

08009f1c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009f1c:	b480      	push	{r7}
 8009f1e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009f20:	4b03      	ldr	r3, [pc, #12]	; (8009f30 <SysTick_Handler+0x14>)
 8009f22:	681b      	ldr	r3, [r3, #0]


}
 8009f24:	bf00      	nop
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	e000e010 	.word	0xe000e010

08009f34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009f34:	b580      	push	{r7, lr}
 8009f36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009f38:	2100      	movs	r1, #0
 8009f3a:	f06f 0004 	mvn.w	r0, #4
 8009f3e:	f7ff ffc3 	bl	8009ec8 <__NVIC_SetPriority>
#endif
}
 8009f42:	bf00      	nop
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f4e:	f3ef 8305 	mrs	r3, IPSR
 8009f52:	603b      	str	r3, [r7, #0]
  return(result);
 8009f54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d003      	beq.n	8009f62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009f5a:	f06f 0305 	mvn.w	r3, #5
 8009f5e:	607b      	str	r3, [r7, #4]
 8009f60:	e00c      	b.n	8009f7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009f62:	4b0a      	ldr	r3, [pc, #40]	; (8009f8c <osKernelInitialize+0x44>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d105      	bne.n	8009f76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009f6a:	4b08      	ldr	r3, [pc, #32]	; (8009f8c <osKernelInitialize+0x44>)
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	607b      	str	r3, [r7, #4]
 8009f74:	e002      	b.n	8009f7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009f76:	f04f 33ff 	mov.w	r3, #4294967295
 8009f7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009f7c:	687b      	ldr	r3, [r7, #4]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	370c      	adds	r7, #12
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	200007b0 	.word	0x200007b0

08009f90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f96:	f3ef 8305 	mrs	r3, IPSR
 8009f9a:	603b      	str	r3, [r7, #0]
  return(result);
 8009f9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d003      	beq.n	8009faa <osKernelStart+0x1a>
    stat = osErrorISR;
 8009fa2:	f06f 0305 	mvn.w	r3, #5
 8009fa6:	607b      	str	r3, [r7, #4]
 8009fa8:	e010      	b.n	8009fcc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009faa:	4b0b      	ldr	r3, [pc, #44]	; (8009fd8 <osKernelStart+0x48>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d109      	bne.n	8009fc6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009fb2:	f7ff ffbf 	bl	8009f34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009fb6:	4b08      	ldr	r3, [pc, #32]	; (8009fd8 <osKernelStart+0x48>)
 8009fb8:	2202      	movs	r2, #2
 8009fba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009fbc:	f001 fe64 	bl	800bc88 <vTaskStartScheduler>
      stat = osOK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	607b      	str	r3, [r7, #4]
 8009fc4:	e002      	b.n	8009fcc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009fcc:	687b      	ldr	r3, [r7, #4]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	200007b0 	.word	0x200007b0

08009fdc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08e      	sub	sp, #56	; 0x38
 8009fe0:	af04      	add	r7, sp, #16
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fec:	f3ef 8305 	mrs	r3, IPSR
 8009ff0:	617b      	str	r3, [r7, #20]
  return(result);
 8009ff2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d17f      	bne.n	800a0f8 <osThreadNew+0x11c>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d07c      	beq.n	800a0f8 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8009ffe:	2380      	movs	r3, #128	; 0x80
 800a000:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a002:	2318      	movs	r3, #24
 800a004:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a006:	2300      	movs	r3, #0
 800a008:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a00a:	f04f 33ff 	mov.w	r3, #4294967295
 800a00e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d046      	beq.n	800a0a4 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d002      	beq.n	800a024 <osThreadNew+0x48>
        name = attr->name;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	699b      	ldr	r3, [r3, #24]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d008      	beq.n	800a04a <osThreadNew+0x6e>
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	2b38      	cmp	r3, #56	; 0x38
 800a03c:	d805      	bhi.n	800a04a <osThreadNew+0x6e>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <osThreadNew+0x72>
        return (NULL);
 800a04a:	2300      	movs	r3, #0
 800a04c:	e055      	b.n	800a0fa <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	089b      	lsrs	r3, r3, #2
 800a05c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00f      	beq.n	800a086 <osThreadNew+0xaa>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800a06e:	d30a      	bcc.n	800a086 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a074:	2b00      	cmp	r3, #0
 800a076:	d006      	beq.n	800a086 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	695b      	ldr	r3, [r3, #20]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d002      	beq.n	800a086 <osThreadNew+0xaa>
        mem = 1;
 800a080:	2301      	movs	r3, #1
 800a082:	61bb      	str	r3, [r7, #24]
 800a084:	e010      	b.n	800a0a8 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10c      	bne.n	800a0a8 <osThreadNew+0xcc>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d108      	bne.n	800a0a8 <osThreadNew+0xcc>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d104      	bne.n	800a0a8 <osThreadNew+0xcc>
          mem = 0;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	61bb      	str	r3, [r7, #24]
 800a0a2:	e001      	b.n	800a0a8 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d110      	bne.n	800a0d0 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a0b6:	9202      	str	r2, [sp, #8]
 800a0b8:	9301      	str	r3, [sp, #4]
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	6a3a      	ldr	r2, [r7, #32]
 800a0c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f001 fb21 	bl	800b70c <xTaskCreateStatic>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	613b      	str	r3, [r7, #16]
 800a0ce:	e013      	b.n	800a0f8 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d110      	bne.n	800a0f8 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a0d6:	6a3b      	ldr	r3, [r7, #32]
 800a0d8:	b29a      	uxth	r2, r3
 800a0da:	f107 0310 	add.w	r3, r7, #16
 800a0de:	9301      	str	r3, [sp, #4]
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f001 fb6e 	bl	800b7ca <xTaskCreate>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d001      	beq.n	800a0f8 <osThreadNew+0x11c>
            hTask = NULL;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a0f8:	693b      	ldr	r3, [r7, #16]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3728      	adds	r7, #40	; 0x28
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800a102:	b580      	push	{r7, lr}
 800a104:	b084      	sub	sp, #16
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f002 ff3d 	bl	800cf8a <pvTimerGetTimerID>
 800a110:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d005      	beq.n	800a124 <TimerCallback+0x22>
    callb->func (callb->arg);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	6852      	ldr	r2, [r2, #4]
 800a120:	4610      	mov	r0, r2
 800a122:	4798      	blx	r3
  }
}
 800a124:	bf00      	nop
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b08c      	sub	sp, #48	; 0x30
 800a130:	af02      	add	r7, sp, #8
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	607a      	str	r2, [r7, #4]
 800a136:	603b      	str	r3, [r7, #0]
 800a138:	460b      	mov	r3, r1
 800a13a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a13c:	2300      	movs	r3, #0
 800a13e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a140:	f3ef 8305 	mrs	r3, IPSR
 800a144:	613b      	str	r3, [r7, #16]
  return(result);
 800a146:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d163      	bne.n	800a214 <osTimerNew+0xe8>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d060      	beq.n	800a214 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a152:	2008      	movs	r0, #8
 800a154:	f000 f91c 	bl	800a390 <pvPortMalloc>
 800a158:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d059      	beq.n	800a214 <osTimerNew+0xe8>
      callb->func = func;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a16c:	7afb      	ldrb	r3, [r7, #11]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d102      	bne.n	800a178 <osTimerNew+0x4c>
        reload = pdFALSE;
 800a172:	2300      	movs	r3, #0
 800a174:	61fb      	str	r3, [r7, #28]
 800a176:	e001      	b.n	800a17c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800a178:	2301      	movs	r3, #1
 800a17a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800a17c:	f04f 33ff 	mov.w	r3, #4294967295
 800a180:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800a182:	2300      	movs	r3, #0
 800a184:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d01c      	beq.n	800a1c6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d002      	beq.n	800a19a <osTimerNew+0x6e>
          name = attr->name;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d006      	beq.n	800a1b0 <osTimerNew+0x84>
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	2b2b      	cmp	r3, #43	; 0x2b
 800a1a8:	d902      	bls.n	800a1b0 <osTimerNew+0x84>
          mem = 1;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	61bb      	str	r3, [r7, #24]
 800a1ae:	e00c      	b.n	800a1ca <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d108      	bne.n	800a1ca <osTimerNew+0x9e>
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d104      	bne.n	800a1ca <osTimerNew+0x9e>
            mem = 0;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	61bb      	str	r3, [r7, #24]
 800a1c4:	e001      	b.n	800a1ca <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d10c      	bne.n	800a1ea <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	9301      	str	r3, [sp, #4]
 800a1d6:	4b12      	ldr	r3, [pc, #72]	; (800a220 <osTimerNew+0xf4>)
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	69fa      	ldr	r2, [r7, #28]
 800a1de:	2101      	movs	r1, #1
 800a1e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1e2:	f002 fb2a 	bl	800c83a <xTimerCreateStatic>
 800a1e6:	6238      	str	r0, [r7, #32]
 800a1e8:	e00b      	b.n	800a202 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d108      	bne.n	800a202 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a1f0:	4b0b      	ldr	r3, [pc, #44]	; (800a220 <osTimerNew+0xf4>)
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	69fa      	ldr	r2, [r7, #28]
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1fc:	f002 fafc 	bl	800c7f8 <xTimerCreate>
 800a200:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d105      	bne.n	800a214 <osTimerNew+0xe8>
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d002      	beq.n	800a214 <osTimerNew+0xe8>
        vPortFree (callb);
 800a20e:	6978      	ldr	r0, [r7, #20]
 800a210:	f000 f98e 	bl	800a530 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a214:	6a3b      	ldr	r3, [r7, #32]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3728      	adds	r7, #40	; 0x28
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	0800a103 	.word	0x0800a103

0800a224 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a224:	b580      	push	{r7, lr}
 800a226:	b088      	sub	sp, #32
 800a228:	af02      	add	r7, sp, #8
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a232:	f3ef 8305 	mrs	r3, IPSR
 800a236:	60fb      	str	r3, [r7, #12]
  return(result);
 800a238:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <osTimerStart+0x22>
    stat = osErrorISR;
 800a23e:	f06f 0305 	mvn.w	r3, #5
 800a242:	617b      	str	r3, [r7, #20]
 800a244:	e017      	b.n	800a276 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d103      	bne.n	800a254 <osTimerStart+0x30>
    stat = osErrorParameter;
 800a24c:	f06f 0303 	mvn.w	r3, #3
 800a250:	617b      	str	r3, [r7, #20]
 800a252:	e010      	b.n	800a276 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a254:	2300      	movs	r3, #0
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	2300      	movs	r3, #0
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	2104      	movs	r1, #4
 800a25e:	6938      	ldr	r0, [r7, #16]
 800a260:	f002 fb64 	bl	800c92c <xTimerGenericCommand>
 800a264:	4603      	mov	r3, r0
 800a266:	2b01      	cmp	r3, #1
 800a268:	d102      	bne.n	800a270 <osTimerStart+0x4c>
      stat = osOK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	617b      	str	r3, [r7, #20]
 800a26e:	e002      	b.n	800a276 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800a270:	f06f 0302 	mvn.w	r3, #2
 800a274:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a276:	697b      	ldr	r3, [r7, #20]
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3718      	adds	r7, #24
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800a280:	b580      	push	{r7, lr}
 800a282:	b088      	sub	sp, #32
 800a284:	af02      	add	r7, sp, #8
 800a286:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a28c:	f3ef 8305 	mrs	r3, IPSR
 800a290:	60fb      	str	r3, [r7, #12]
  return(result);
 800a292:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a294:	2b00      	cmp	r3, #0
 800a296:	d003      	beq.n	800a2a0 <osTimerStop+0x20>
    stat = osErrorISR;
 800a298:	f06f 0305 	mvn.w	r3, #5
 800a29c:	617b      	str	r3, [r7, #20]
 800a29e:	e021      	b.n	800a2e4 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d103      	bne.n	800a2ae <osTimerStop+0x2e>
    stat = osErrorParameter;
 800a2a6:	f06f 0303 	mvn.w	r3, #3
 800a2aa:	617b      	str	r3, [r7, #20]
 800a2ac:	e01a      	b.n	800a2e4 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800a2ae:	6938      	ldr	r0, [r7, #16]
 800a2b0:	f002 fe42 	bl	800cf38 <xTimerIsTimerActive>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d103      	bne.n	800a2c2 <osTimerStop+0x42>
      stat = osErrorResource;
 800a2ba:	f06f 0302 	mvn.w	r3, #2
 800a2be:	617b      	str	r3, [r7, #20]
 800a2c0:	e010      	b.n	800a2e4 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2103      	movs	r1, #3
 800a2cc:	6938      	ldr	r0, [r7, #16]
 800a2ce:	f002 fb2d 	bl	800c92c <xTimerGenericCommand>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d102      	bne.n	800a2de <osTimerStop+0x5e>
        stat = osOK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	617b      	str	r3, [r7, #20]
 800a2dc:	e002      	b.n	800a2e4 <osTimerStop+0x64>
      } else {
        stat = osError;
 800a2de:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a2e4:	697b      	ldr	r3, [r7, #20]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3718      	adds	r7, #24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b086      	sub	sp, #24
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2fa:	f3ef 8305 	mrs	r3, IPSR
 800a2fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800a300:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 800a302:	2b00      	cmp	r3, #0
 800a304:	d102      	bne.n	800a30c <osTimerIsRunning+0x1e>
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d102      	bne.n	800a312 <osTimerIsRunning+0x24>
    running = 0U;
 800a30c:	2300      	movs	r3, #0
 800a30e:	617b      	str	r3, [r7, #20]
 800a310:	e004      	b.n	800a31c <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 800a312:	6938      	ldr	r0, [r7, #16]
 800a314:	f002 fe10 	bl	800cf38 <xTimerIsTimerActive>
 800a318:	4603      	mov	r3, r0
 800a31a:	617b      	str	r3, [r7, #20]
  }

  return (running);
 800a31c:	697b      	ldr	r3, [r7, #20]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3718      	adds	r7, #24
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
	...

0800a328 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	4a07      	ldr	r2, [pc, #28]	; (800a354 <vApplicationGetIdleTaskMemory+0x2c>)
 800a338:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	4a06      	ldr	r2, [pc, #24]	; (800a358 <vApplicationGetIdleTaskMemory+0x30>)
 800a33e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2280      	movs	r2, #128	; 0x80
 800a344:	601a      	str	r2, [r3, #0]
}
 800a346:	bf00      	nop
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	200007b4 	.word	0x200007b4
 800a358:	20000964 	.word	0x20000964

0800a35c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	4a07      	ldr	r2, [pc, #28]	; (800a388 <vApplicationGetTimerTaskMemory+0x2c>)
 800a36c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	4a06      	ldr	r2, [pc, #24]	; (800a38c <vApplicationGetTimerTaskMemory+0x30>)
 800a372:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a37a:	601a      	str	r2, [r3, #0]
}
 800a37c:	bf00      	nop
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr
 800a388:	20000b64 	.word	0x20000b64
 800a38c:	20000d14 	.word	0x20000d14

0800a390 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b08a      	sub	sp, #40	; 0x28
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a398:	2300      	movs	r3, #0
 800a39a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a39c:	f001 fce4 	bl	800bd68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3a0:	4b5d      	ldr	r3, [pc, #372]	; (800a518 <pvPortMalloc+0x188>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d101      	bne.n	800a3ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3a8:	f000 f924 	bl	800a5f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3ac:	4b5b      	ldr	r3, [pc, #364]	; (800a51c <pvPortMalloc+0x18c>)
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4013      	ands	r3, r2
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f040 8093 	bne.w	800a4e0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d01d      	beq.n	800a3fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a3c0:	2208      	movs	r2, #8
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f003 0307 	and.w	r3, r3, #7
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d014      	beq.n	800a3fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f023 0307 	bic.w	r3, r3, #7
 800a3d8:	3308      	adds	r3, #8
 800a3da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f003 0307 	and.w	r3, r3, #7
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00a      	beq.n	800a3fc <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a3e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a3ea:	f383 8811 	msr	BASEPRI, r3
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	f3bf 8f4f 	dsb	sy
 800a3f6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a3f8:	bf00      	nop
 800a3fa:	e7fe      	b.n	800a3fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d06e      	beq.n	800a4e0 <pvPortMalloc+0x150>
 800a402:	4b47      	ldr	r3, [pc, #284]	; (800a520 <pvPortMalloc+0x190>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d869      	bhi.n	800a4e0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a40c:	4b45      	ldr	r3, [pc, #276]	; (800a524 <pvPortMalloc+0x194>)
 800a40e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a410:	4b44      	ldr	r3, [pc, #272]	; (800a524 <pvPortMalloc+0x194>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a416:	e004      	b.n	800a422 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d903      	bls.n	800a434 <pvPortMalloc+0xa4>
 800a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1f1      	bne.n	800a418 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a434:	4b38      	ldr	r3, [pc, #224]	; (800a518 <pvPortMalloc+0x188>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d050      	beq.n	800a4e0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a43e:	6a3b      	ldr	r3, [r7, #32]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2208      	movs	r2, #8
 800a444:	4413      	add	r3, r2
 800a446:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	6a3b      	ldr	r3, [r7, #32]
 800a44e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	1ad2      	subs	r2, r2, r3
 800a458:	2308      	movs	r3, #8
 800a45a:	005b      	lsls	r3, r3, #1
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d91f      	bls.n	800a4a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4413      	add	r3, r2
 800a466:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	f003 0307 	and.w	r3, r3, #7
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00a      	beq.n	800a488 <pvPortMalloc+0xf8>
	__asm volatile
 800a472:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a476:	f383 8811 	msr	BASEPRI, r3
 800a47a:	f3bf 8f6f 	isb	sy
 800a47e:	f3bf 8f4f 	dsb	sy
 800a482:	613b      	str	r3, [r7, #16]
}
 800a484:	bf00      	nop
 800a486:	e7fe      	b.n	800a486 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	1ad2      	subs	r2, r2, r3
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a49a:	69b8      	ldr	r0, [r7, #24]
 800a49c:	f000 f90c 	bl	800a6b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4a0:	4b1f      	ldr	r3, [pc, #124]	; (800a520 <pvPortMalloc+0x190>)
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	4a1d      	ldr	r2, [pc, #116]	; (800a520 <pvPortMalloc+0x190>)
 800a4ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4ae:	4b1c      	ldr	r3, [pc, #112]	; (800a520 <pvPortMalloc+0x190>)
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	4b1d      	ldr	r3, [pc, #116]	; (800a528 <pvPortMalloc+0x198>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d203      	bcs.n	800a4c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4ba:	4b19      	ldr	r3, [pc, #100]	; (800a520 <pvPortMalloc+0x190>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a1a      	ldr	r2, [pc, #104]	; (800a528 <pvPortMalloc+0x198>)
 800a4c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	4b15      	ldr	r3, [pc, #84]	; (800a51c <pvPortMalloc+0x18c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	431a      	orrs	r2, r3
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a4d6:	4b15      	ldr	r3, [pc, #84]	; (800a52c <pvPortMalloc+0x19c>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	4a13      	ldr	r2, [pc, #76]	; (800a52c <pvPortMalloc+0x19c>)
 800a4de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4e0:	f001 fc50 	bl	800bd84 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d101      	bne.n	800a4ee <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a4ea:	f7f8 fa51 	bl	8002990 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	f003 0307 	and.w	r3, r3, #7
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00a      	beq.n	800a50e <pvPortMalloc+0x17e>
	__asm volatile
 800a4f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a4fc:	f383 8811 	msr	BASEPRI, r3
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	60fb      	str	r3, [r7, #12]
}
 800a50a:	bf00      	nop
 800a50c:	e7fe      	b.n	800a50c <pvPortMalloc+0x17c>
	return pvReturn;
 800a50e:	69fb      	ldr	r3, [r7, #28]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3728      	adds	r7, #40	; 0x28
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	20008ec4 	.word	0x20008ec4
 800a51c:	20008ed8 	.word	0x20008ed8
 800a520:	20008ec8 	.word	0x20008ec8
 800a524:	20008ebc 	.word	0x20008ebc
 800a528:	20008ecc 	.word	0x20008ecc
 800a52c:	20008ed0 	.word	0x20008ed0

0800a530 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d04d      	beq.n	800a5de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a542:	2308      	movs	r3, #8
 800a544:	425b      	negs	r3, r3
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	4413      	add	r3, r2
 800a54a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	4b24      	ldr	r3, [pc, #144]	; (800a5e8 <vPortFree+0xb8>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4013      	ands	r3, r2
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d10a      	bne.n	800a574 <vPortFree+0x44>
	__asm volatile
 800a55e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	60fb      	str	r3, [r7, #12]
}
 800a570:	bf00      	nop
 800a572:	e7fe      	b.n	800a572 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00a      	beq.n	800a592 <vPortFree+0x62>
	__asm volatile
 800a57c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	60bb      	str	r3, [r7, #8]
}
 800a58e:	bf00      	nop
 800a590:	e7fe      	b.n	800a590 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	685a      	ldr	r2, [r3, #4]
 800a596:	4b14      	ldr	r3, [pc, #80]	; (800a5e8 <vPortFree+0xb8>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4013      	ands	r3, r2
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d01e      	beq.n	800a5de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d11a      	bne.n	800a5de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	685a      	ldr	r2, [r3, #4]
 800a5ac:	4b0e      	ldr	r3, [pc, #56]	; (800a5e8 <vPortFree+0xb8>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	43db      	mvns	r3, r3
 800a5b2:	401a      	ands	r2, r3
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5b8:	f001 fbd6 	bl	800bd68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	4b0a      	ldr	r3, [pc, #40]	; (800a5ec <vPortFree+0xbc>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	4a09      	ldr	r2, [pc, #36]	; (800a5ec <vPortFree+0xbc>)
 800a5c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5ca:	6938      	ldr	r0, [r7, #16]
 800a5cc:	f000 f874 	bl	800a6b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a5d0:	4b07      	ldr	r3, [pc, #28]	; (800a5f0 <vPortFree+0xc0>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	4a06      	ldr	r2, [pc, #24]	; (800a5f0 <vPortFree+0xc0>)
 800a5d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a5da:	f001 fbd3 	bl	800bd84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5de:	bf00      	nop
 800a5e0:	3718      	adds	r7, #24
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20008ed8 	.word	0x20008ed8
 800a5ec:	20008ec8 	.word	0x20008ec8
 800a5f0:	20008ed4 	.word	0x20008ed4

0800a5f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5fa:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800a5fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a600:	4b27      	ldr	r3, [pc, #156]	; (800a6a0 <prvHeapInit+0xac>)
 800a602:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f003 0307 	and.w	r3, r3, #7
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00c      	beq.n	800a628 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	3307      	adds	r3, #7
 800a612:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f023 0307 	bic.w	r3, r3, #7
 800a61a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	4a1f      	ldr	r2, [pc, #124]	; (800a6a0 <prvHeapInit+0xac>)
 800a624:	4413      	add	r3, r2
 800a626:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a62c:	4a1d      	ldr	r2, [pc, #116]	; (800a6a4 <prvHeapInit+0xb0>)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a632:	4b1c      	ldr	r3, [pc, #112]	; (800a6a4 <prvHeapInit+0xb0>)
 800a634:	2200      	movs	r2, #0
 800a636:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	68ba      	ldr	r2, [r7, #8]
 800a63c:	4413      	add	r3, r2
 800a63e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a640:	2208      	movs	r2, #8
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	1a9b      	subs	r3, r3, r2
 800a646:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f023 0307 	bic.w	r3, r3, #7
 800a64e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	4a15      	ldr	r2, [pc, #84]	; (800a6a8 <prvHeapInit+0xb4>)
 800a654:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a656:	4b14      	ldr	r3, [pc, #80]	; (800a6a8 <prvHeapInit+0xb4>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2200      	movs	r2, #0
 800a65c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a65e:	4b12      	ldr	r3, [pc, #72]	; (800a6a8 <prvHeapInit+0xb4>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	1ad2      	subs	r2, r2, r3
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a674:	4b0c      	ldr	r3, [pc, #48]	; (800a6a8 <prvHeapInit+0xb4>)
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	4a0a      	ldr	r2, [pc, #40]	; (800a6ac <prvHeapInit+0xb8>)
 800a682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	4a09      	ldr	r2, [pc, #36]	; (800a6b0 <prvHeapInit+0xbc>)
 800a68a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a68c:	4b09      	ldr	r3, [pc, #36]	; (800a6b4 <prvHeapInit+0xc0>)
 800a68e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a692:	601a      	str	r2, [r3, #0]
}
 800a694:	bf00      	nop
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	20002d14 	.word	0x20002d14
 800a6a4:	20008ebc 	.word	0x20008ebc
 800a6a8:	20008ec4 	.word	0x20008ec4
 800a6ac:	20008ecc 	.word	0x20008ecc
 800a6b0:	20008ec8 	.word	0x20008ec8
 800a6b4:	20008ed8 	.word	0x20008ed8

0800a6b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6c0:	4b28      	ldr	r3, [pc, #160]	; (800a764 <prvInsertBlockIntoFreeList+0xac>)
 800a6c2:	60fb      	str	r3, [r7, #12]
 800a6c4:	e002      	b.n	800a6cc <prvInsertBlockIntoFreeList+0x14>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	60fb      	str	r3, [r7, #12]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d8f7      	bhi.n	800a6c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d108      	bne.n	800a6fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	441a      	add	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	441a      	add	r2, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d118      	bne.n	800a740 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	4b15      	ldr	r3, [pc, #84]	; (800a768 <prvInsertBlockIntoFreeList+0xb0>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	429a      	cmp	r2, r3
 800a718:	d00d      	beq.n	800a736 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	441a      	add	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	601a      	str	r2, [r3, #0]
 800a734:	e008      	b.n	800a748 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a736:	4b0c      	ldr	r3, [pc, #48]	; (800a768 <prvInsertBlockIntoFreeList+0xb0>)
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	e003      	b.n	800a748 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d002      	beq.n	800a756 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a756:	bf00      	nop
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	20008ebc 	.word	0x20008ebc
 800a768:	20008ec4 	.word	0x20008ec4

0800a76c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f103 0208 	add.w	r2, r3, #8
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f04f 32ff 	mov.w	r2, #4294967295
 800a784:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f103 0208 	add.w	r2, r3, #8
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f103 0208 	add.w	r2, r3, #8
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a7ba:	bf00      	nop
 800a7bc:	370c      	adds	r7, #12
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b085      	sub	sp, #20
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	689a      	ldr	r2, [r3, #8]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	683a      	ldr	r2, [r7, #0]
 800a7ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	1c5a      	adds	r2, r3, #1
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	601a      	str	r2, [r3, #0]
}
 800a802:	bf00      	nop
 800a804:	3714      	adds	r7, #20
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a80e:	b480      	push	{r7}
 800a810:	b085      	sub	sp, #20
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a824:	d103      	bne.n	800a82e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	691b      	ldr	r3, [r3, #16]
 800a82a:	60fb      	str	r3, [r7, #12]
 800a82c:	e00c      	b.n	800a848 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	3308      	adds	r3, #8
 800a832:	60fb      	str	r3, [r7, #12]
 800a834:	e002      	b.n	800a83c <vListInsert+0x2e>
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	60fb      	str	r3, [r7, #12]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	429a      	cmp	r2, r3
 800a846:	d2f6      	bcs.n	800a836 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	685a      	ldr	r2, [r3, #4]
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	1c5a      	adds	r2, r3, #1
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	601a      	str	r2, [r3, #0]
}
 800a874:	bf00      	nop
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	6892      	ldr	r2, [r2, #8]
 800a896:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	6852      	ldr	r2, [r2, #4]
 800a8a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d103      	bne.n	800a8b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	689a      	ldr	r2, [r3, #8]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	1e5a      	subs	r2, r3, #1
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3714      	adds	r7, #20
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	3b04      	subs	r3, #4
 800a8e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a8ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	3b04      	subs	r3, #4
 800a8f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	f023 0201 	bic.w	r2, r3, #1
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	3b04      	subs	r3, #4
 800a902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a904:	4a0c      	ldr	r2, [pc, #48]	; (800a938 <pxPortInitialiseStack+0x64>)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	3b14      	subs	r3, #20
 800a90e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	3b04      	subs	r3, #4
 800a91a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f06f 0202 	mvn.w	r2, #2
 800a922:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	3b20      	subs	r3, #32
 800a928:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a92a:	68fb      	ldr	r3, [r7, #12]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3714      	adds	r7, #20
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr
 800a938:	0800a93d 	.word	0x0800a93d

0800a93c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a942:	2300      	movs	r3, #0
 800a944:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a946:	4b12      	ldr	r3, [pc, #72]	; (800a990 <prvTaskExitError+0x54>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a94e:	d00a      	beq.n	800a966 <prvTaskExitError+0x2a>
	__asm volatile
 800a950:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	60fb      	str	r3, [r7, #12]
}
 800a962:	bf00      	nop
 800a964:	e7fe      	b.n	800a964 <prvTaskExitError+0x28>
	__asm volatile
 800a966:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a96a:	f383 8811 	msr	BASEPRI, r3
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	60bb      	str	r3, [r7, #8]
}
 800a978:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a97a:	bf00      	nop
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d0fc      	beq.n	800a97c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a982:	bf00      	nop
 800a984:	bf00      	nop
 800a986:	3714      	adds	r7, #20
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	20000028 	.word	0x20000028
	...

0800a9a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9a0:	4b07      	ldr	r3, [pc, #28]	; (800a9c0 <pxCurrentTCBConst2>)
 800a9a2:	6819      	ldr	r1, [r3, #0]
 800a9a4:	6808      	ldr	r0, [r1, #0]
 800a9a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9aa:	f380 8809 	msr	PSP, r0
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f04f 0000 	mov.w	r0, #0
 800a9b6:	f380 8811 	msr	BASEPRI, r0
 800a9ba:	4770      	bx	lr
 800a9bc:	f3af 8000 	nop.w

0800a9c0 <pxCurrentTCBConst2>:
 800a9c0:	20008f24 	.word	0x20008f24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a9c4:	bf00      	nop
 800a9c6:	bf00      	nop

0800a9c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a9c8:	4808      	ldr	r0, [pc, #32]	; (800a9ec <prvPortStartFirstTask+0x24>)
 800a9ca:	6800      	ldr	r0, [r0, #0]
 800a9cc:	6800      	ldr	r0, [r0, #0]
 800a9ce:	f380 8808 	msr	MSP, r0
 800a9d2:	f04f 0000 	mov.w	r0, #0
 800a9d6:	f380 8814 	msr	CONTROL, r0
 800a9da:	b662      	cpsie	i
 800a9dc:	b661      	cpsie	f
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	df00      	svc	0
 800a9e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a9ea:	bf00      	nop
 800a9ec:	e000ed08 	.word	0xe000ed08

0800a9f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a9f6:	4b46      	ldr	r3, [pc, #280]	; (800ab10 <xPortStartScheduler+0x120>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a46      	ldr	r2, [pc, #280]	; (800ab14 <xPortStartScheduler+0x124>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d10a      	bne.n	800aa16 <xPortStartScheduler+0x26>
	__asm volatile
 800aa00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	613b      	str	r3, [r7, #16]
}
 800aa12:	bf00      	nop
 800aa14:	e7fe      	b.n	800aa14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa16:	4b3e      	ldr	r3, [pc, #248]	; (800ab10 <xPortStartScheduler+0x120>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a3f      	ldr	r2, [pc, #252]	; (800ab18 <xPortStartScheduler+0x128>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d10a      	bne.n	800aa36 <xPortStartScheduler+0x46>
	__asm volatile
 800aa20:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aa24:	f383 8811 	msr	BASEPRI, r3
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	60fb      	str	r3, [r7, #12]
}
 800aa32:	bf00      	nop
 800aa34:	e7fe      	b.n	800aa34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa36:	4b39      	ldr	r3, [pc, #228]	; (800ab1c <xPortStartScheduler+0x12c>)
 800aa38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	22ff      	movs	r2, #255	; 0xff
 800aa46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa50:	78fb      	ldrb	r3, [r7, #3]
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 800aa58:	b2da      	uxtb	r2, r3
 800aa5a:	4b31      	ldr	r3, [pc, #196]	; (800ab20 <xPortStartScheduler+0x130>)
 800aa5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa5e:	4b31      	ldr	r3, [pc, #196]	; (800ab24 <xPortStartScheduler+0x134>)
 800aa60:	2207      	movs	r2, #7
 800aa62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa64:	e009      	b.n	800aa7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aa66:	4b2f      	ldr	r3, [pc, #188]	; (800ab24 <xPortStartScheduler+0x134>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	4a2d      	ldr	r2, [pc, #180]	; (800ab24 <xPortStartScheduler+0x134>)
 800aa6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa70:	78fb      	ldrb	r3, [r7, #3]
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	005b      	lsls	r3, r3, #1
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa7a:	78fb      	ldrb	r3, [r7, #3]
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa82:	2b80      	cmp	r3, #128	; 0x80
 800aa84:	d0ef      	beq.n	800aa66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa86:	4b27      	ldr	r3, [pc, #156]	; (800ab24 <xPortStartScheduler+0x134>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f1c3 0307 	rsb	r3, r3, #7
 800aa8e:	2b04      	cmp	r3, #4
 800aa90:	d00a      	beq.n	800aaa8 <xPortStartScheduler+0xb8>
	__asm volatile
 800aa92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	60bb      	str	r3, [r7, #8]
}
 800aaa4:	bf00      	nop
 800aaa6:	e7fe      	b.n	800aaa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aaa8:	4b1e      	ldr	r3, [pc, #120]	; (800ab24 <xPortStartScheduler+0x134>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	021b      	lsls	r3, r3, #8
 800aaae:	4a1d      	ldr	r2, [pc, #116]	; (800ab24 <xPortStartScheduler+0x134>)
 800aab0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aab2:	4b1c      	ldr	r3, [pc, #112]	; (800ab24 <xPortStartScheduler+0x134>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aaba:	4a1a      	ldr	r2, [pc, #104]	; (800ab24 <xPortStartScheduler+0x134>)
 800aabc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aac6:	4b18      	ldr	r3, [pc, #96]	; (800ab28 <xPortStartScheduler+0x138>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a17      	ldr	r2, [pc, #92]	; (800ab28 <xPortStartScheduler+0x138>)
 800aacc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aad2:	4b15      	ldr	r3, [pc, #84]	; (800ab28 <xPortStartScheduler+0x138>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a14      	ldr	r2, [pc, #80]	; (800ab28 <xPortStartScheduler+0x138>)
 800aad8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aadc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aade:	f000 f8bb 	bl	800ac58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aae2:	4b12      	ldr	r3, [pc, #72]	; (800ab2c <xPortStartScheduler+0x13c>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aae8:	f000 f8da 	bl	800aca0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aaec:	4b10      	ldr	r3, [pc, #64]	; (800ab30 <xPortStartScheduler+0x140>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a0f      	ldr	r2, [pc, #60]	; (800ab30 <xPortStartScheduler+0x140>)
 800aaf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aaf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aaf8:	f7ff ff66 	bl	800a9c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aafc:	f001 faaa 	bl	800c054 <vTaskSwitchContext>
	prvTaskExitError();
 800ab00:	f7ff ff1c 	bl	800a93c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3718      	adds	r7, #24
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	e000ed00 	.word	0xe000ed00
 800ab14:	410fc271 	.word	0x410fc271
 800ab18:	410fc270 	.word	0x410fc270
 800ab1c:	e000e400 	.word	0xe000e400
 800ab20:	20008edc 	.word	0x20008edc
 800ab24:	20008ee0 	.word	0x20008ee0
 800ab28:	e000ed20 	.word	0xe000ed20
 800ab2c:	20000028 	.word	0x20000028
 800ab30:	e000ef34 	.word	0xe000ef34

0800ab34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
	__asm volatile
 800ab3a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ab3e:	f383 8811 	msr	BASEPRI, r3
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	607b      	str	r3, [r7, #4]
}
 800ab4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab4e:	4b0f      	ldr	r3, [pc, #60]	; (800ab8c <vPortEnterCritical+0x58>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3301      	adds	r3, #1
 800ab54:	4a0d      	ldr	r2, [pc, #52]	; (800ab8c <vPortEnterCritical+0x58>)
 800ab56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab58:	4b0c      	ldr	r3, [pc, #48]	; (800ab8c <vPortEnterCritical+0x58>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d10f      	bne.n	800ab80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab60:	4b0b      	ldr	r3, [pc, #44]	; (800ab90 <vPortEnterCritical+0x5c>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00a      	beq.n	800ab80 <vPortEnterCritical+0x4c>
	__asm volatile
 800ab6a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	603b      	str	r3, [r7, #0]
}
 800ab7c:	bf00      	nop
 800ab7e:	e7fe      	b.n	800ab7e <vPortEnterCritical+0x4a>
	}
}
 800ab80:	bf00      	nop
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr
 800ab8c:	20000028 	.word	0x20000028
 800ab90:	e000ed04 	.word	0xe000ed04

0800ab94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab9a:	4b12      	ldr	r3, [pc, #72]	; (800abe4 <vPortExitCritical+0x50>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10a      	bne.n	800abb8 <vPortExitCritical+0x24>
	__asm volatile
 800aba2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	607b      	str	r3, [r7, #4]
}
 800abb4:	bf00      	nop
 800abb6:	e7fe      	b.n	800abb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800abb8:	4b0a      	ldr	r3, [pc, #40]	; (800abe4 <vPortExitCritical+0x50>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	3b01      	subs	r3, #1
 800abbe:	4a09      	ldr	r2, [pc, #36]	; (800abe4 <vPortExitCritical+0x50>)
 800abc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800abc2:	4b08      	ldr	r3, [pc, #32]	; (800abe4 <vPortExitCritical+0x50>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d105      	bne.n	800abd6 <vPortExitCritical+0x42>
 800abca:	2300      	movs	r3, #0
 800abcc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800abd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800abd6:	bf00      	nop
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	20000028 	.word	0x20000028
	...

0800abf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800abf0:	f3ef 8009 	mrs	r0, PSP
 800abf4:	f3bf 8f6f 	isb	sy
 800abf8:	4b15      	ldr	r3, [pc, #84]	; (800ac50 <pxCurrentTCBConst>)
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	f01e 0f10 	tst.w	lr, #16
 800ac00:	bf08      	it	eq
 800ac02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0a:	6010      	str	r0, [r2, #0]
 800ac0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac10:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800ac14:	f380 8811 	msr	BASEPRI, r0
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	f001 fa18 	bl	800c054 <vTaskSwitchContext>
 800ac24:	f04f 0000 	mov.w	r0, #0
 800ac28:	f380 8811 	msr	BASEPRI, r0
 800ac2c:	bc09      	pop	{r0, r3}
 800ac2e:	6819      	ldr	r1, [r3, #0]
 800ac30:	6808      	ldr	r0, [r1, #0]
 800ac32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac36:	f01e 0f10 	tst.w	lr, #16
 800ac3a:	bf08      	it	eq
 800ac3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac40:	f380 8809 	msr	PSP, r0
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	f3af 8000 	nop.w

0800ac50 <pxCurrentTCBConst>:
 800ac50:	20008f24 	.word	0x20008f24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac54:	bf00      	nop
 800ac56:	bf00      	nop

0800ac58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac58:	b480      	push	{r7}
 800ac5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac5c:	4b0b      	ldr	r3, [pc, #44]	; (800ac8c <vPortSetupTimerInterrupt+0x34>)
 800ac5e:	2200      	movs	r2, #0
 800ac60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac62:	4b0b      	ldr	r3, [pc, #44]	; (800ac90 <vPortSetupTimerInterrupt+0x38>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac68:	4b0a      	ldr	r3, [pc, #40]	; (800ac94 <vPortSetupTimerInterrupt+0x3c>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a0a      	ldr	r2, [pc, #40]	; (800ac98 <vPortSetupTimerInterrupt+0x40>)
 800ac6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac72:	099b      	lsrs	r3, r3, #6
 800ac74:	4a09      	ldr	r2, [pc, #36]	; (800ac9c <vPortSetupTimerInterrupt+0x44>)
 800ac76:	3b01      	subs	r3, #1
 800ac78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac7a:	4b04      	ldr	r3, [pc, #16]	; (800ac8c <vPortSetupTimerInterrupt+0x34>)
 800ac7c:	2207      	movs	r2, #7
 800ac7e:	601a      	str	r2, [r3, #0]
}
 800ac80:	bf00      	nop
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	e000e010 	.word	0xe000e010
 800ac90:	e000e018 	.word	0xe000e018
 800ac94:	20000000 	.word	0x20000000
 800ac98:	10624dd3 	.word	0x10624dd3
 800ac9c:	e000e014 	.word	0xe000e014

0800aca0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aca0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800acb0 <vPortEnableVFP+0x10>
 800aca4:	6801      	ldr	r1, [r0, #0]
 800aca6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800acaa:	6001      	str	r1, [r0, #0]
 800acac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800acae:	bf00      	nop
 800acb0:	e000ed88 	.word	0xe000ed88

0800acb4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800acba:	f3ef 8305 	mrs	r3, IPSR
 800acbe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2b0f      	cmp	r3, #15
 800acc4:	d914      	bls.n	800acf0 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800acc6:	4a17      	ldr	r2, [pc, #92]	; (800ad24 <vPortValidateInterruptPriority+0x70>)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	4413      	add	r3, r2
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800acd0:	4b15      	ldr	r3, [pc, #84]	; (800ad28 <vPortValidateInterruptPriority+0x74>)
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	7afa      	ldrb	r2, [r7, #11]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d20a      	bcs.n	800acf0 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800acda:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	607b      	str	r3, [r7, #4]
}
 800acec:	bf00      	nop
 800acee:	e7fe      	b.n	800acee <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800acf0:	4b0e      	ldr	r3, [pc, #56]	; (800ad2c <vPortValidateInterruptPriority+0x78>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800acf8:	4b0d      	ldr	r3, [pc, #52]	; (800ad30 <vPortValidateInterruptPriority+0x7c>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d90a      	bls.n	800ad16 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ad00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	603b      	str	r3, [r7, #0]
}
 800ad12:	bf00      	nop
 800ad14:	e7fe      	b.n	800ad14 <vPortValidateInterruptPriority+0x60>
	}
 800ad16:	bf00      	nop
 800ad18:	3714      	adds	r7, #20
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	e000e3f0 	.word	0xe000e3f0
 800ad28:	20008edc 	.word	0x20008edc
 800ad2c:	e000ed0c 	.word	0xe000ed0c
 800ad30:	20008ee0 	.word	0x20008ee0

0800ad34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10a      	bne.n	800ad5e <xQueueGenericReset+0x2a>
	__asm volatile
 800ad48:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ad4c:	f383 8811 	msr	BASEPRI, r3
 800ad50:	f3bf 8f6f 	isb	sy
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	60bb      	str	r3, [r7, #8]
}
 800ad5a:	bf00      	nop
 800ad5c:	e7fe      	b.n	800ad5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ad5e:	f7ff fee9 	bl	800ab34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad6a:	68f9      	ldr	r1, [r7, #12]
 800ad6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ad6e:	fb01 f303 	mul.w	r3, r1, r3
 800ad72:	441a      	add	r2, r3
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	68f9      	ldr	r1, [r7, #12]
 800ad92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ad94:	fb01 f303 	mul.w	r3, r1, r3
 800ad98:	441a      	add	r2, r3
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	22ff      	movs	r2, #255	; 0xff
 800ada2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	22ff      	movs	r2, #255	; 0xff
 800adaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d114      	bne.n	800adde <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d01a      	beq.n	800adf2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	3310      	adds	r3, #16
 800adc0:	4618      	mov	r0, r3
 800adc2:	f001 fa21 	bl	800c208 <xTaskRemoveFromEventList>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d012      	beq.n	800adf2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800adcc:	4b0c      	ldr	r3, [pc, #48]	; (800ae00 <xQueueGenericReset+0xcc>)
 800adce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800add2:	601a      	str	r2, [r3, #0]
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	e009      	b.n	800adf2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3310      	adds	r3, #16
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7ff fcc2 	bl	800a76c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	3324      	adds	r3, #36	; 0x24
 800adec:	4618      	mov	r0, r3
 800adee:	f7ff fcbd 	bl	800a76c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800adf2:	f7ff fecf 	bl	800ab94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800adf6:	2301      	movs	r3, #1
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	e000ed04 	.word	0xe000ed04

0800ae04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b08e      	sub	sp, #56	; 0x38
 800ae08:	af02      	add	r7, sp, #8
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
 800ae10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d10a      	bne.n	800ae2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ae18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ae1c:	f383 8811 	msr	BASEPRI, r3
 800ae20:	f3bf 8f6f 	isb	sy
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae2a:	bf00      	nop
 800ae2c:	e7fe      	b.n	800ae2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10a      	bne.n	800ae4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ae34:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae46:	bf00      	nop
 800ae48:	e7fe      	b.n	800ae48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <xQueueGenericCreateStatic+0x52>
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d001      	beq.n	800ae5a <xQueueGenericCreateStatic+0x56>
 800ae56:	2301      	movs	r3, #1
 800ae58:	e000      	b.n	800ae5c <xQueueGenericCreateStatic+0x58>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10a      	bne.n	800ae76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ae60:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	623b      	str	r3, [r7, #32]
}
 800ae72:	bf00      	nop
 800ae74:	e7fe      	b.n	800ae74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d102      	bne.n	800ae82 <xQueueGenericCreateStatic+0x7e>
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d101      	bne.n	800ae86 <xQueueGenericCreateStatic+0x82>
 800ae82:	2301      	movs	r3, #1
 800ae84:	e000      	b.n	800ae88 <xQueueGenericCreateStatic+0x84>
 800ae86:	2300      	movs	r3, #0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10a      	bne.n	800aea2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ae8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	61fb      	str	r3, [r7, #28]
}
 800ae9e:	bf00      	nop
 800aea0:	e7fe      	b.n	800aea0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aea2:	2350      	movs	r3, #80	; 0x50
 800aea4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	2b50      	cmp	r3, #80	; 0x50
 800aeaa:	d00a      	beq.n	800aec2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800aeac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	61bb      	str	r3, [r7, #24]
}
 800aebe:	bf00      	nop
 800aec0:	e7fe      	b.n	800aec0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aec2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00d      	beq.n	800aeea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed0:	2201      	movs	r2, #1
 800aed2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aed6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	4613      	mov	r3, r2
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	68b9      	ldr	r1, [r7, #8]
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f000 f805 	bl	800aef4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3730      	adds	r7, #48	; 0x30
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
 800af00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d103      	bne.n	800af10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	69ba      	ldr	r2, [r7, #24]
 800af0c:	601a      	str	r2, [r3, #0]
 800af0e:	e002      	b.n	800af16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	68ba      	ldr	r2, [r7, #8]
 800af20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800af22:	2101      	movs	r1, #1
 800af24:	69b8      	ldr	r0, [r7, #24]
 800af26:	f7ff ff05 	bl	800ad34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	78fa      	ldrb	r2, [r7, #3]
 800af2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800af32:	bf00      	nop
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
	...

0800af3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b08e      	sub	sp, #56	; 0x38
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
 800af48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800af4a:	2300      	movs	r3, #0
 800af4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10a      	bne.n	800af6e <xQueueGenericSend+0x32>
	__asm volatile
 800af58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af6a:	bf00      	nop
 800af6c:	e7fe      	b.n	800af6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d103      	bne.n	800af7c <xQueueGenericSend+0x40>
 800af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d101      	bne.n	800af80 <xQueueGenericSend+0x44>
 800af7c:	2301      	movs	r3, #1
 800af7e:	e000      	b.n	800af82 <xQueueGenericSend+0x46>
 800af80:	2300      	movs	r3, #0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10a      	bne.n	800af9c <xQueueGenericSend+0x60>
	__asm volatile
 800af86:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800af8a:	f383 8811 	msr	BASEPRI, r3
 800af8e:	f3bf 8f6f 	isb	sy
 800af92:	f3bf 8f4f 	dsb	sy
 800af96:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af98:	bf00      	nop
 800af9a:	e7fe      	b.n	800af9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d103      	bne.n	800afaa <xQueueGenericSend+0x6e>
 800afa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d101      	bne.n	800afae <xQueueGenericSend+0x72>
 800afaa:	2301      	movs	r3, #1
 800afac:	e000      	b.n	800afb0 <xQueueGenericSend+0x74>
 800afae:	2300      	movs	r3, #0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d10a      	bne.n	800afca <xQueueGenericSend+0x8e>
	__asm volatile
 800afb4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800afb8:	f383 8811 	msr	BASEPRI, r3
 800afbc:	f3bf 8f6f 	isb	sy
 800afc0:	f3bf 8f4f 	dsb	sy
 800afc4:	623b      	str	r3, [r7, #32]
}
 800afc6:	bf00      	nop
 800afc8:	e7fe      	b.n	800afc8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afca:	f001 fae1 	bl	800c590 <xTaskGetSchedulerState>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d102      	bne.n	800afda <xQueueGenericSend+0x9e>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d101      	bne.n	800afde <xQueueGenericSend+0xa2>
 800afda:	2301      	movs	r3, #1
 800afdc:	e000      	b.n	800afe0 <xQueueGenericSend+0xa4>
 800afde:	2300      	movs	r3, #0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d10a      	bne.n	800affa <xQueueGenericSend+0xbe>
	__asm volatile
 800afe4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800afe8:	f383 8811 	msr	BASEPRI, r3
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	f3bf 8f4f 	dsb	sy
 800aff4:	61fb      	str	r3, [r7, #28]
}
 800aff6:	bf00      	nop
 800aff8:	e7fe      	b.n	800aff8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800affa:	f7ff fd9b 	bl	800ab34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b006:	429a      	cmp	r2, r3
 800b008:	d302      	bcc.n	800b010 <xQueueGenericSend+0xd4>
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d129      	bne.n	800b064 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b010:	683a      	ldr	r2, [r7, #0]
 800b012:	68b9      	ldr	r1, [r7, #8]
 800b014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b016:	f000 fa0b 	bl	800b430 <prvCopyDataToQueue>
 800b01a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b020:	2b00      	cmp	r3, #0
 800b022:	d010      	beq.n	800b046 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b026:	3324      	adds	r3, #36	; 0x24
 800b028:	4618      	mov	r0, r3
 800b02a:	f001 f8ed 	bl	800c208 <xTaskRemoveFromEventList>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d013      	beq.n	800b05c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b034:	4b3f      	ldr	r3, [pc, #252]	; (800b134 <xQueueGenericSend+0x1f8>)
 800b036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	e00a      	b.n	800b05c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d007      	beq.n	800b05c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b04c:	4b39      	ldr	r3, [pc, #228]	; (800b134 <xQueueGenericSend+0x1f8>)
 800b04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b05c:	f7ff fd9a 	bl	800ab94 <vPortExitCritical>
				return pdPASS;
 800b060:	2301      	movs	r3, #1
 800b062:	e063      	b.n	800b12c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d103      	bne.n	800b072 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b06a:	f7ff fd93 	bl	800ab94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b06e:	2300      	movs	r3, #0
 800b070:	e05c      	b.n	800b12c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b074:	2b00      	cmp	r3, #0
 800b076:	d106      	bne.n	800b086 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b078:	f107 0314 	add.w	r3, r7, #20
 800b07c:	4618      	mov	r0, r3
 800b07e:	f001 f927 	bl	800c2d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b082:	2301      	movs	r3, #1
 800b084:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b086:	f7ff fd85 	bl	800ab94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b08a:	f000 fe6d 	bl	800bd68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b08e:	f7ff fd51 	bl	800ab34 <vPortEnterCritical>
 800b092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b094:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b098:	b25b      	sxtb	r3, r3
 800b09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09e:	d103      	bne.n	800b0a8 <xQueueGenericSend+0x16c>
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0ae:	b25b      	sxtb	r3, r3
 800b0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b4:	d103      	bne.n	800b0be <xQueueGenericSend+0x182>
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0be:	f7ff fd69 	bl	800ab94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0c2:	1d3a      	adds	r2, r7, #4
 800b0c4:	f107 0314 	add.w	r3, r7, #20
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f001 f916 	bl	800c2fc <xTaskCheckForTimeOut>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d124      	bne.n	800b120 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b0d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0d8:	f000 faa2 	bl	800b620 <prvIsQueueFull>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d018      	beq.n	800b114 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e4:	3310      	adds	r3, #16
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f001 f83c 	bl	800c168 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b0f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0f2:	f000 fa2d 	bl	800b550 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b0f6:	f000 fe45 	bl	800bd84 <xTaskResumeAll>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	f47f af7c 	bne.w	800affa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b102:	4b0c      	ldr	r3, [pc, #48]	; (800b134 <xQueueGenericSend+0x1f8>)
 800b104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b108:	601a      	str	r2, [r3, #0]
 800b10a:	f3bf 8f4f 	dsb	sy
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	e772      	b.n	800affa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b116:	f000 fa1b 	bl	800b550 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b11a:	f000 fe33 	bl	800bd84 <xTaskResumeAll>
 800b11e:	e76c      	b.n	800affa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b122:	f000 fa15 	bl	800b550 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b126:	f000 fe2d 	bl	800bd84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b12a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3738      	adds	r7, #56	; 0x38
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	e000ed04 	.word	0xe000ed04

0800b138 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b090      	sub	sp, #64	; 0x40
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
 800b144:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d10a      	bne.n	800b166 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b150:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b162:	bf00      	nop
 800b164:	e7fe      	b.n	800b164 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d103      	bne.n	800b174 <xQueueGenericSendFromISR+0x3c>
 800b16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b170:	2b00      	cmp	r3, #0
 800b172:	d101      	bne.n	800b178 <xQueueGenericSendFromISR+0x40>
 800b174:	2301      	movs	r3, #1
 800b176:	e000      	b.n	800b17a <xQueueGenericSendFromISR+0x42>
 800b178:	2300      	movs	r3, #0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10a      	bne.n	800b194 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b17e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b190:	bf00      	nop
 800b192:	e7fe      	b.n	800b192 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	2b02      	cmp	r3, #2
 800b198:	d103      	bne.n	800b1a2 <xQueueGenericSendFromISR+0x6a>
 800b19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d101      	bne.n	800b1a6 <xQueueGenericSendFromISR+0x6e>
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e000      	b.n	800b1a8 <xQueueGenericSendFromISR+0x70>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10a      	bne.n	800b1c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b1ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	623b      	str	r3, [r7, #32]
}
 800b1be:	bf00      	nop
 800b1c0:	e7fe      	b.n	800b1c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1c2:	f7ff fd77 	bl	800acb4 <vPortValidateInterruptPriority>
	__asm volatile
 800b1c6:	f3ef 8211 	mrs	r2, BASEPRI
 800b1ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	61fa      	str	r2, [r7, #28]
 800b1dc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b1de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d302      	bcc.n	800b1f4 <xQueueGenericSendFromISR+0xbc>
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d12f      	bne.n	800b254 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b202:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b204:	683a      	ldr	r2, [r7, #0]
 800b206:	68b9      	ldr	r1, [r7, #8]
 800b208:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b20a:	f000 f911 	bl	800b430 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b20e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b212:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b216:	d112      	bne.n	800b23e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d016      	beq.n	800b24e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b222:	3324      	adds	r3, #36	; 0x24
 800b224:	4618      	mov	r0, r3
 800b226:	f000 ffef 	bl	800c208 <xTaskRemoveFromEventList>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00e      	beq.n	800b24e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00b      	beq.n	800b24e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	601a      	str	r2, [r3, #0]
 800b23c:	e007      	b.n	800b24e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b23e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b242:	3301      	adds	r3, #1
 800b244:	b2db      	uxtb	r3, r3
 800b246:	b25a      	sxtb	r2, r3
 800b248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b24e:	2301      	movs	r3, #1
 800b250:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b252:	e001      	b.n	800b258 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b254:	2300      	movs	r3, #0
 800b256:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	f383 8811 	msr	BASEPRI, r3
}
 800b262:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b266:	4618      	mov	r0, r3
 800b268:	3740      	adds	r7, #64	; 0x40
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
	...

0800b270 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b08c      	sub	sp, #48	; 0x30
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b27c:	2300      	movs	r3, #0
 800b27e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b286:	2b00      	cmp	r3, #0
 800b288:	d10a      	bne.n	800b2a0 <xQueueReceive+0x30>
	__asm volatile
 800b28a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b28e:	f383 8811 	msr	BASEPRI, r3
 800b292:	f3bf 8f6f 	isb	sy
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	623b      	str	r3, [r7, #32]
}
 800b29c:	bf00      	nop
 800b29e:	e7fe      	b.n	800b29e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d103      	bne.n	800b2ae <xQueueReceive+0x3e>
 800b2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d101      	bne.n	800b2b2 <xQueueReceive+0x42>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e000      	b.n	800b2b4 <xQueueReceive+0x44>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10a      	bne.n	800b2ce <xQueueReceive+0x5e>
	__asm volatile
 800b2b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b2bc:	f383 8811 	msr	BASEPRI, r3
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	61fb      	str	r3, [r7, #28]
}
 800b2ca:	bf00      	nop
 800b2cc:	e7fe      	b.n	800b2cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2ce:	f001 f95f 	bl	800c590 <xTaskGetSchedulerState>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d102      	bne.n	800b2de <xQueueReceive+0x6e>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d101      	bne.n	800b2e2 <xQueueReceive+0x72>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e000      	b.n	800b2e4 <xQueueReceive+0x74>
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d10a      	bne.n	800b2fe <xQueueReceive+0x8e>
	__asm volatile
 800b2e8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b2ec:	f383 8811 	msr	BASEPRI, r3
 800b2f0:	f3bf 8f6f 	isb	sy
 800b2f4:	f3bf 8f4f 	dsb	sy
 800b2f8:	61bb      	str	r3, [r7, #24]
}
 800b2fa:	bf00      	nop
 800b2fc:	e7fe      	b.n	800b2fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2fe:	f7ff fc19 	bl	800ab34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b306:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d01f      	beq.n	800b34e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b30e:	68b9      	ldr	r1, [r7, #8]
 800b310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b312:	f000 f8f7 	bl	800b504 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b318:	1e5a      	subs	r2, r3, #1
 800b31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b320:	691b      	ldr	r3, [r3, #16]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00f      	beq.n	800b346 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b328:	3310      	adds	r3, #16
 800b32a:	4618      	mov	r0, r3
 800b32c:	f000 ff6c 	bl	800c208 <xTaskRemoveFromEventList>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d007      	beq.n	800b346 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b336:	4b3d      	ldr	r3, [pc, #244]	; (800b42c <xQueueReceive+0x1bc>)
 800b338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b33c:	601a      	str	r2, [r3, #0]
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b346:	f7ff fc25 	bl	800ab94 <vPortExitCritical>
				return pdPASS;
 800b34a:	2301      	movs	r3, #1
 800b34c:	e069      	b.n	800b422 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d103      	bne.n	800b35c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b354:	f7ff fc1e 	bl	800ab94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b358:	2300      	movs	r3, #0
 800b35a:	e062      	b.n	800b422 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d106      	bne.n	800b370 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b362:	f107 0310 	add.w	r3, r7, #16
 800b366:	4618      	mov	r0, r3
 800b368:	f000 ffb2 	bl	800c2d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b36c:	2301      	movs	r3, #1
 800b36e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b370:	f7ff fc10 	bl	800ab94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b374:	f000 fcf8 	bl	800bd68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b378:	f7ff fbdc 	bl	800ab34 <vPortEnterCritical>
 800b37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b382:	b25b      	sxtb	r3, r3
 800b384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b388:	d103      	bne.n	800b392 <xQueueReceive+0x122>
 800b38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b398:	b25b      	sxtb	r3, r3
 800b39a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b39e:	d103      	bne.n	800b3a8 <xQueueReceive+0x138>
 800b3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3a8:	f7ff fbf4 	bl	800ab94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3ac:	1d3a      	adds	r2, r7, #4
 800b3ae:	f107 0310 	add.w	r3, r7, #16
 800b3b2:	4611      	mov	r1, r2
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f000 ffa1 	bl	800c2fc <xTaskCheckForTimeOut>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d123      	bne.n	800b408 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3c2:	f000 f917 	bl	800b5f4 <prvIsQueueEmpty>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d017      	beq.n	800b3fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ce:	3324      	adds	r3, #36	; 0x24
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	4611      	mov	r1, r2
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 fec7 	bl	800c168 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3dc:	f000 f8b8 	bl	800b550 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3e0:	f000 fcd0 	bl	800bd84 <xTaskResumeAll>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d189      	bne.n	800b2fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b3ea:	4b10      	ldr	r3, [pc, #64]	; (800b42c <xQueueReceive+0x1bc>)
 800b3ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3f0:	601a      	str	r2, [r3, #0]
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	e780      	b.n	800b2fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b3fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3fe:	f000 f8a7 	bl	800b550 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b402:	f000 fcbf 	bl	800bd84 <xTaskResumeAll>
 800b406:	e77a      	b.n	800b2fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b40a:	f000 f8a1 	bl	800b550 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b40e:	f000 fcb9 	bl	800bd84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b414:	f000 f8ee 	bl	800b5f4 <prvIsQueueEmpty>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	f43f af6f 	beq.w	800b2fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b420:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b422:	4618      	mov	r0, r3
 800b424:	3730      	adds	r7, #48	; 0x30
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	e000ed04 	.word	0xe000ed04

0800b430 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b086      	sub	sp, #24
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b43c:	2300      	movs	r3, #0
 800b43e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b444:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10d      	bne.n	800b46a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d14d      	bne.n	800b4f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f001 f8b6 	bl	800c5cc <xTaskPriorityDisinherit>
 800b460:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2200      	movs	r2, #0
 800b466:	609a      	str	r2, [r3, #8]
 800b468:	e043      	b.n	800b4f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d119      	bne.n	800b4a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6858      	ldr	r0, [r3, #4]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b478:	461a      	mov	r2, r3
 800b47a:	68b9      	ldr	r1, [r7, #8]
 800b47c:	f002 ff6a 	bl	800e354 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	685a      	ldr	r2, [r3, #4]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b488:	441a      	add	r2, r3
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	685a      	ldr	r2, [r3, #4]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	429a      	cmp	r2, r3
 800b498:	d32b      	bcc.n	800b4f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	605a      	str	r2, [r3, #4]
 800b4a2:	e026      	b.n	800b4f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	68d8      	ldr	r0, [r3, #12]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	68b9      	ldr	r1, [r7, #8]
 800b4b0:	f002 ff50 	bl	800e354 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	68da      	ldr	r2, [r3, #12]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4bc:	425b      	negs	r3, r3
 800b4be:	441a      	add	r2, r3
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	68da      	ldr	r2, [r3, #12]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d207      	bcs.n	800b4e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	689a      	ldr	r2, [r3, #8]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d8:	425b      	negs	r3, r3
 800b4da:	441a      	add	r2, r3
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	d105      	bne.n	800b4f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d002      	beq.n	800b4f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	1c5a      	adds	r2, r3, #1
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b4fa:	697b      	ldr	r3, [r7, #20]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3718      	adds	r7, #24
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b512:	2b00      	cmp	r3, #0
 800b514:	d018      	beq.n	800b548 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	68da      	ldr	r2, [r3, #12]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b51e:	441a      	add	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	68da      	ldr	r2, [r3, #12]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d303      	bcc.n	800b538 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	68d9      	ldr	r1, [r3, #12]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b540:	461a      	mov	r2, r3
 800b542:	6838      	ldr	r0, [r7, #0]
 800b544:	f002 ff06 	bl	800e354 <memcpy>
	}
}
 800b548:	bf00      	nop
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b558:	f7ff faec 	bl	800ab34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b562:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b564:	e011      	b.n	800b58a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d012      	beq.n	800b594 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	3324      	adds	r3, #36	; 0x24
 800b572:	4618      	mov	r0, r3
 800b574:	f000 fe48 	bl	800c208 <xTaskRemoveFromEventList>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d001      	beq.n	800b582 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b57e:	f000 ff2f 	bl	800c3e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b582:	7bfb      	ldrb	r3, [r7, #15]
 800b584:	3b01      	subs	r3, #1
 800b586:	b2db      	uxtb	r3, r3
 800b588:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b58a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	dce9      	bgt.n	800b566 <prvUnlockQueue+0x16>
 800b592:	e000      	b.n	800b596 <prvUnlockQueue+0x46>
					break;
 800b594:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	22ff      	movs	r2, #255	; 0xff
 800b59a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b59e:	f7ff faf9 	bl	800ab94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b5a2:	f7ff fac7 	bl	800ab34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b5ae:	e011      	b.n	800b5d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	691b      	ldr	r3, [r3, #16]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d012      	beq.n	800b5de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	3310      	adds	r3, #16
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f000 fe23 	bl	800c208 <xTaskRemoveFromEventList>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d001      	beq.n	800b5cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b5c8:	f000 ff0a 	bl	800c3e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b5cc:	7bbb      	ldrb	r3, [r7, #14]
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b5d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	dce9      	bgt.n	800b5b0 <prvUnlockQueue+0x60>
 800b5dc:	e000      	b.n	800b5e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b5de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	22ff      	movs	r2, #255	; 0xff
 800b5e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b5e8:	f7ff fad4 	bl	800ab94 <vPortExitCritical>
}
 800b5ec:	bf00      	nop
 800b5ee:	3710      	adds	r7, #16
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b5fc:	f7ff fa9a 	bl	800ab34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b604:	2b00      	cmp	r3, #0
 800b606:	d102      	bne.n	800b60e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b608:	2301      	movs	r3, #1
 800b60a:	60fb      	str	r3, [r7, #12]
 800b60c:	e001      	b.n	800b612 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b60e:	2300      	movs	r3, #0
 800b610:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b612:	f7ff fabf 	bl	800ab94 <vPortExitCritical>

	return xReturn;
 800b616:	68fb      	ldr	r3, [r7, #12]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3710      	adds	r7, #16
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b628:	f7ff fa84 	bl	800ab34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b634:	429a      	cmp	r2, r3
 800b636:	d102      	bne.n	800b63e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b638:	2301      	movs	r3, #1
 800b63a:	60fb      	str	r3, [r7, #12]
 800b63c:	e001      	b.n	800b642 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b63e:	2300      	movs	r3, #0
 800b640:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b642:	f7ff faa7 	bl	800ab94 <vPortExitCritical>

	return xReturn;
 800b646:	68fb      	ldr	r3, [r7, #12]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b65a:	2300      	movs	r3, #0
 800b65c:	60fb      	str	r3, [r7, #12]
 800b65e:	e014      	b.n	800b68a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b660:	4a0f      	ldr	r2, [pc, #60]	; (800b6a0 <vQueueAddToRegistry+0x50>)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10b      	bne.n	800b684 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b66c:	490c      	ldr	r1, [pc, #48]	; (800b6a0 <vQueueAddToRegistry+0x50>)
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	683a      	ldr	r2, [r7, #0]
 800b672:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b676:	4a0a      	ldr	r2, [pc, #40]	; (800b6a0 <vQueueAddToRegistry+0x50>)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	00db      	lsls	r3, r3, #3
 800b67c:	4413      	add	r3, r2
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b682:	e006      	b.n	800b692 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	3301      	adds	r3, #1
 800b688:	60fb      	str	r3, [r7, #12]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2b07      	cmp	r3, #7
 800b68e:	d9e7      	bls.n	800b660 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b690:	bf00      	nop
 800b692:	bf00      	nop
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	20008ee4 	.word	0x20008ee4

0800b6a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b086      	sub	sp, #24
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b6b4:	f7ff fa3e 	bl	800ab34 <vPortEnterCritical>
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6be:	b25b      	sxtb	r3, r3
 800b6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c4:	d103      	bne.n	800b6ce <vQueueWaitForMessageRestricted+0x2a>
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6d4:	b25b      	sxtb	r3, r3
 800b6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6da:	d103      	bne.n	800b6e4 <vQueueWaitForMessageRestricted+0x40>
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6e4:	f7ff fa56 	bl	800ab94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d106      	bne.n	800b6fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	3324      	adds	r3, #36	; 0x24
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	68b9      	ldr	r1, [r7, #8]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f000 fd59 	bl	800c1b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b6fe:	6978      	ldr	r0, [r7, #20]
 800b700:	f7ff ff26 	bl	800b550 <prvUnlockQueue>
	}
 800b704:	bf00      	nop
 800b706:	3718      	adds	r7, #24
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b08e      	sub	sp, #56	; 0x38
 800b710:	af04      	add	r7, sp, #16
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
 800b718:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d10a      	bne.n	800b736 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b720:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b724:	f383 8811 	msr	BASEPRI, r3
 800b728:	f3bf 8f6f 	isb	sy
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	623b      	str	r3, [r7, #32]
}
 800b732:	bf00      	nop
 800b734:	e7fe      	b.n	800b734 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d10a      	bne.n	800b752 <xTaskCreateStatic+0x46>
	__asm volatile
 800b73c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b740:	f383 8811 	msr	BASEPRI, r3
 800b744:	f3bf 8f6f 	isb	sy
 800b748:	f3bf 8f4f 	dsb	sy
 800b74c:	61fb      	str	r3, [r7, #28]
}
 800b74e:	bf00      	nop
 800b750:	e7fe      	b.n	800b750 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b752:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800b756:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800b75e:	d00a      	beq.n	800b776 <xTaskCreateStatic+0x6a>
	__asm volatile
 800b760:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b764:	f383 8811 	msr	BASEPRI, r3
 800b768:	f3bf 8f6f 	isb	sy
 800b76c:	f3bf 8f4f 	dsb	sy
 800b770:	61bb      	str	r3, [r7, #24]
}
 800b772:	bf00      	nop
 800b774:	e7fe      	b.n	800b774 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b776:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d01e      	beq.n	800b7bc <xTaskCreateStatic+0xb0>
 800b77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b780:	2b00      	cmp	r3, #0
 800b782:	d01b      	beq.n	800b7bc <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b786:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b78c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b790:	2202      	movs	r2, #2
 800b792:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b796:	2300      	movs	r3, #0
 800b798:	9303      	str	r3, [sp, #12]
 800b79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79c:	9302      	str	r3, [sp, #8]
 800b79e:	f107 0314 	add.w	r3, r7, #20
 800b7a2:	9301      	str	r3, [sp, #4]
 800b7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	68b9      	ldr	r1, [r7, #8]
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f000 f852 	bl	800b858 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b7b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7b6:	f000 f903 	bl	800b9c0 <prvAddNewTaskToReadyList>
 800b7ba:	e001      	b.n	800b7c0 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b7c0:	697b      	ldr	r3, [r7, #20]
	}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3728      	adds	r7, #40	; 0x28
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b08c      	sub	sp, #48	; 0x30
 800b7ce:	af04      	add	r7, sp, #16
 800b7d0:	60f8      	str	r0, [r7, #12]
 800b7d2:	60b9      	str	r1, [r7, #8]
 800b7d4:	603b      	str	r3, [r7, #0]
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b7da:	88fb      	ldrh	r3, [r7, #6]
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fe fdd6 	bl	800a390 <pvPortMalloc>
 800b7e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00f      	beq.n	800b80c <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b7ec:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
 800b7f0:	f7fe fdce 	bl	800a390 <pvPortMalloc>
 800b7f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d003      	beq.n	800b804 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	697a      	ldr	r2, [r7, #20]
 800b800:	631a      	str	r2, [r3, #48]	; 0x30
 800b802:	e005      	b.n	800b810 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b804:	6978      	ldr	r0, [r7, #20]
 800b806:	f7fe fe93 	bl	800a530 <vPortFree>
 800b80a:	e001      	b.n	800b810 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b80c:	2300      	movs	r3, #0
 800b80e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d017      	beq.n	800b846 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b81e:	88fa      	ldrh	r2, [r7, #6]
 800b820:	2300      	movs	r3, #0
 800b822:	9303      	str	r3, [sp, #12]
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	9302      	str	r3, [sp, #8]
 800b828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82a:	9301      	str	r3, [sp, #4]
 800b82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	68b9      	ldr	r1, [r7, #8]
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f000 f80f 	bl	800b858 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b83a:	69f8      	ldr	r0, [r7, #28]
 800b83c:	f000 f8c0 	bl	800b9c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b840:	2301      	movs	r3, #1
 800b842:	61bb      	str	r3, [r7, #24]
 800b844:	e002      	b.n	800b84c <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b846:	f04f 33ff 	mov.w	r3, #4294967295
 800b84a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b84c:	69bb      	ldr	r3, [r7, #24]
	}
 800b84e:	4618      	mov	r0, r3
 800b850:	3720      	adds	r7, #32
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
	...

0800b858 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b088      	sub	sp, #32
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	607a      	str	r2, [r7, #4]
 800b864:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b868:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	461a      	mov	r2, r3
 800b870:	21a5      	movs	r1, #165	; 0xa5
 800b872:	f002 fd7d 	bl	800e370 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b880:	3b01      	subs	r3, #1
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	4413      	add	r3, r2
 800b886:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	f023 0307 	bic.w	r3, r3, #7
 800b88e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b890:	69bb      	ldr	r3, [r7, #24]
 800b892:	f003 0307 	and.w	r3, r3, #7
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00a      	beq.n	800b8b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b89a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	617b      	str	r3, [r7, #20]
}
 800b8ac:	bf00      	nop
 800b8ae:	e7fe      	b.n	800b8ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d01f      	beq.n	800b8f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	61fb      	str	r3, [r7, #28]
 800b8ba:	e012      	b.n	800b8e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b8bc:	68ba      	ldr	r2, [r7, #8]
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	7819      	ldrb	r1, [r3, #0]
 800b8c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	3334      	adds	r3, #52	; 0x34
 800b8cc:	460a      	mov	r2, r1
 800b8ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	69fb      	ldr	r3, [r7, #28]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d006      	beq.n	800b8ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	61fb      	str	r3, [r7, #28]
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	2bfe      	cmp	r3, #254	; 0xfe
 800b8e6:	d9e9      	bls.n	800b8bc <prvInitialiseNewTask+0x64>
 800b8e8:	e000      	b.n	800b8ec <prvInitialiseNewTask+0x94>
			{
				break;
 800b8ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800b8f4:	e003      	b.n	800b8fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b900:	2b37      	cmp	r3, #55	; 0x37
 800b902:	d901      	bls.n	800b908 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b904:	2337      	movs	r3, #55	; 0x37
 800b906:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b90c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b912:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		pxNewTCB->uxMutexesHeld = 0;
 800b916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b918:	2200      	movs	r2, #0
 800b91a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b920:	3304      	adds	r3, #4
 800b922:	4618      	mov	r0, r3
 800b924:	f7fe ff42 	bl	800a7ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92a:	3318      	adds	r3, #24
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7fe ff3d 	bl	800a7ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b936:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b940:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b946:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94a:	2200      	movs	r2, #0
 800b94c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b952:	2200      	movs	r2, #0
 800b954:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95a:	2200      	movs	r2, #0
 800b95c:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b962:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800b966:	2260      	movs	r2, #96	; 0x60
 800b968:	2100      	movs	r1, #0
 800b96a:	4618      	mov	r0, r3
 800b96c:	f002 fd00 	bl	800e370 <memset>
 800b970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b972:	4a10      	ldr	r2, [pc, #64]	; (800b9b4 <prvInitialiseNewTask+0x15c>)
 800b974:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 800b978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97a:	4a0f      	ldr	r2, [pc, #60]	; (800b9b8 <prvInitialiseNewTask+0x160>)
 800b97c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800b980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b982:	4a0e      	ldr	r2, [pc, #56]	; (800b9bc <prvInitialiseNewTask+0x164>)
 800b984:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800b988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98a:	2200      	movs	r2, #0
 800b98c:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	68f9      	ldr	r1, [r7, #12]
 800b994:	69b8      	ldr	r0, [r7, #24]
 800b996:	f7fe ff9d 	bl	800a8d4 <pxPortInitialiseStack>
 800b99a:	4602      	mov	r2, r0
 800b99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d002      	beq.n	800b9ac <prvInitialiseNewTask+0x154>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9ac:	bf00      	nop
 800b9ae:	3720      	adds	r7, #32
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	0800eaf8 	.word	0x0800eaf8
 800b9b8:	0800eb18 	.word	0x0800eb18
 800b9bc:	0800ead8 	.word	0x0800ead8

0800b9c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b9c8:	f7ff f8b4 	bl	800ab34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b9cc:	4b2d      	ldr	r3, [pc, #180]	; (800ba84 <prvAddNewTaskToReadyList+0xc4>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	4a2c      	ldr	r2, [pc, #176]	; (800ba84 <prvAddNewTaskToReadyList+0xc4>)
 800b9d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b9d6:	4b2c      	ldr	r3, [pc, #176]	; (800ba88 <prvAddNewTaskToReadyList+0xc8>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d109      	bne.n	800b9f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b9de:	4a2a      	ldr	r2, [pc, #168]	; (800ba88 <prvAddNewTaskToReadyList+0xc8>)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b9e4:	4b27      	ldr	r3, [pc, #156]	; (800ba84 <prvAddNewTaskToReadyList+0xc4>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d110      	bne.n	800ba0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b9ec:	f000 fd0c 	bl	800c408 <prvInitialiseTaskLists>
 800b9f0:	e00d      	b.n	800ba0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b9f2:	4b26      	ldr	r3, [pc, #152]	; (800ba8c <prvAddNewTaskToReadyList+0xcc>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d109      	bne.n	800ba0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b9fa:	4b23      	ldr	r3, [pc, #140]	; (800ba88 <prvAddNewTaskToReadyList+0xc8>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d802      	bhi.n	800ba0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba08:	4a1f      	ldr	r2, [pc, #124]	; (800ba88 <prvAddNewTaskToReadyList+0xc8>)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba0e:	4b20      	ldr	r3, [pc, #128]	; (800ba90 <prvAddNewTaskToReadyList+0xd0>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	3301      	adds	r3, #1
 800ba14:	4a1e      	ldr	r2, [pc, #120]	; (800ba90 <prvAddNewTaskToReadyList+0xd0>)
 800ba16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ba18:	4b1d      	ldr	r3, [pc, #116]	; (800ba90 <prvAddNewTaskToReadyList+0xd0>)
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba26:	4b1b      	ldr	r3, [pc, #108]	; (800ba94 <prvAddNewTaskToReadyList+0xd4>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d903      	bls.n	800ba36 <prvAddNewTaskToReadyList+0x76>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba32:	4a18      	ldr	r2, [pc, #96]	; (800ba94 <prvAddNewTaskToReadyList+0xd4>)
 800ba34:	6013      	str	r3, [r2, #0]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	4413      	add	r3, r2
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	4a15      	ldr	r2, [pc, #84]	; (800ba98 <prvAddNewTaskToReadyList+0xd8>)
 800ba44:	441a      	add	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	3304      	adds	r3, #4
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	f7fe feba 	bl	800a7c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ba52:	f7ff f89f 	bl	800ab94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ba56:	4b0d      	ldr	r3, [pc, #52]	; (800ba8c <prvAddNewTaskToReadyList+0xcc>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00e      	beq.n	800ba7c <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba5e:	4b0a      	ldr	r3, [pc, #40]	; (800ba88 <prvAddNewTaskToReadyList+0xc8>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d207      	bcs.n	800ba7c <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ba6c:	4b0b      	ldr	r3, [pc, #44]	; (800ba9c <prvAddNewTaskToReadyList+0xdc>)
 800ba6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba72:	601a      	str	r2, [r3, #0]
 800ba74:	f3bf 8f4f 	dsb	sy
 800ba78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba7c:	bf00      	nop
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	200093f8 	.word	0x200093f8
 800ba88:	20008f24 	.word	0x20008f24
 800ba8c:	20009404 	.word	0x20009404
 800ba90:	20009414 	.word	0x20009414
 800ba94:	20009400 	.word	0x20009400
 800ba98:	20008f28 	.word	0x20008f28
 800ba9c:	e000ed04 	.word	0xe000ed04

0800baa0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b08a      	sub	sp, #40	; 0x28
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800baaa:	2300      	movs	r3, #0
 800baac:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d10a      	bne.n	800baca <vTaskDelayUntil+0x2a>
	__asm volatile
 800bab4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bab8:	f383 8811 	msr	BASEPRI, r3
 800babc:	f3bf 8f6f 	isb	sy
 800bac0:	f3bf 8f4f 	dsb	sy
 800bac4:	617b      	str	r3, [r7, #20]
}
 800bac6:	bf00      	nop
 800bac8:	e7fe      	b.n	800bac8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d10a      	bne.n	800bae6 <vTaskDelayUntil+0x46>
	__asm volatile
 800bad0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bad4:	f383 8811 	msr	BASEPRI, r3
 800bad8:	f3bf 8f6f 	isb	sy
 800badc:	f3bf 8f4f 	dsb	sy
 800bae0:	613b      	str	r3, [r7, #16]
}
 800bae2:	bf00      	nop
 800bae4:	e7fe      	b.n	800bae4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800bae6:	4b2a      	ldr	r3, [pc, #168]	; (800bb90 <vTaskDelayUntil+0xf0>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00a      	beq.n	800bb04 <vTaskDelayUntil+0x64>
	__asm volatile
 800baee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	60fb      	str	r3, [r7, #12]
}
 800bb00:	bf00      	nop
 800bb02:	e7fe      	b.n	800bb02 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800bb04:	f000 f930 	bl	800bd68 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800bb08:	4b22      	ldr	r3, [pc, #136]	; (800bb94 <vTaskDelayUntil+0xf4>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	4413      	add	r3, r2
 800bb16:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	6a3a      	ldr	r2, [r7, #32]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d20b      	bcs.n	800bb3a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	69fa      	ldr	r2, [r7, #28]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d211      	bcs.n	800bb50 <vTaskDelayUntil+0xb0>
 800bb2c:	69fa      	ldr	r2, [r7, #28]
 800bb2e:	6a3b      	ldr	r3, [r7, #32]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d90d      	bls.n	800bb50 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800bb34:	2301      	movs	r3, #1
 800bb36:	627b      	str	r3, [r7, #36]	; 0x24
 800bb38:	e00a      	b.n	800bb50 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	69fa      	ldr	r2, [r7, #28]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d303      	bcc.n	800bb4c <vTaskDelayUntil+0xac>
 800bb44:	69fa      	ldr	r2, [r7, #28]
 800bb46:	6a3b      	ldr	r3, [r7, #32]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d901      	bls.n	800bb50 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	69fa      	ldr	r2, [r7, #28]
 800bb54:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800bb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d006      	beq.n	800bb6a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800bb5c:	69fa      	ldr	r2, [r7, #28]
 800bb5e:	6a3b      	ldr	r3, [r7, #32]
 800bb60:	1ad3      	subs	r3, r2, r3
 800bb62:	2100      	movs	r1, #0
 800bb64:	4618      	mov	r0, r3
 800bb66:	f000 fda5 	bl	800c6b4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800bb6a:	f000 f90b 	bl	800bd84 <xTaskResumeAll>
 800bb6e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d107      	bne.n	800bb86 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800bb76:	4b08      	ldr	r3, [pc, #32]	; (800bb98 <vTaskDelayUntil+0xf8>)
 800bb78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb7c:	601a      	str	r2, [r3, #0]
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb86:	bf00      	nop
 800bb88:	3728      	adds	r7, #40	; 0x28
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	20009420 	.word	0x20009420
 800bb94:	200093fc 	.word	0x200093fc
 800bb98:	e000ed04 	.word	0xe000ed04

0800bb9c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800bba4:	f7fe ffc6 	bl	800ab34 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d102      	bne.n	800bbb4 <vTaskSuspend+0x18>
 800bbae:	4b30      	ldr	r3, [pc, #192]	; (800bc70 <vTaskSuspend+0xd4>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	e000      	b.n	800bbb6 <vTaskSuspend+0x1a>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	3304      	adds	r3, #4
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7fe fe5f 	bl	800a880 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d004      	beq.n	800bbd4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	3318      	adds	r3, #24
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7fe fe56 	bl	800a880 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4826      	ldr	r0, [pc, #152]	; (800bc74 <vTaskSuspend+0xd8>)
 800bbdc:	f7fe fdf3 	bl	800a7c6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d103      	bne.n	800bbf4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800bbf4:	f7fe ffce 	bl	800ab94 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800bbf8:	4b1f      	ldr	r3, [pc, #124]	; (800bc78 <vTaskSuspend+0xdc>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d005      	beq.n	800bc0c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800bc00:	f7fe ff98 	bl	800ab34 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800bc04:	f000 fca4 	bl	800c550 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800bc08:	f7fe ffc4 	bl	800ab94 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800bc0c:	4b18      	ldr	r3, [pc, #96]	; (800bc70 <vTaskSuspend+0xd4>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d127      	bne.n	800bc66 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800bc16:	4b18      	ldr	r3, [pc, #96]	; (800bc78 <vTaskSuspend+0xdc>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d017      	beq.n	800bc4e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800bc1e:	4b17      	ldr	r3, [pc, #92]	; (800bc7c <vTaskSuspend+0xe0>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00a      	beq.n	800bc3c <vTaskSuspend+0xa0>
	__asm volatile
 800bc26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	60bb      	str	r3, [r7, #8]
}
 800bc38:	bf00      	nop
 800bc3a:	e7fe      	b.n	800bc3a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800bc3c:	4b10      	ldr	r3, [pc, #64]	; (800bc80 <vTaskSuspend+0xe4>)
 800bc3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc42:	601a      	str	r2, [r3, #0]
 800bc44:	f3bf 8f4f 	dsb	sy
 800bc48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc4c:	e00b      	b.n	800bc66 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800bc4e:	4b09      	ldr	r3, [pc, #36]	; (800bc74 <vTaskSuspend+0xd8>)
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	4b0c      	ldr	r3, [pc, #48]	; (800bc84 <vTaskSuspend+0xe8>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d103      	bne.n	800bc62 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800bc5a:	4b05      	ldr	r3, [pc, #20]	; (800bc70 <vTaskSuspend+0xd4>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	601a      	str	r2, [r3, #0]
	}
 800bc60:	e001      	b.n	800bc66 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800bc62:	f000 f9f7 	bl	800c054 <vTaskSwitchContext>
	}
 800bc66:	bf00      	nop
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	20008f24 	.word	0x20008f24
 800bc74:	200093e4 	.word	0x200093e4
 800bc78:	20009404 	.word	0x20009404
 800bc7c:	20009420 	.word	0x20009420
 800bc80:	e000ed04 	.word	0xe000ed04
 800bc84:	200093f8 	.word	0x200093f8

0800bc88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b08a      	sub	sp, #40	; 0x28
 800bc8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bc92:	2300      	movs	r3, #0
 800bc94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc96:	463a      	mov	r2, r7
 800bc98:	1d39      	adds	r1, r7, #4
 800bc9a:	f107 0308 	add.w	r3, r7, #8
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7fe fb42 	bl	800a328 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bca4:	6839      	ldr	r1, [r7, #0]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	9202      	str	r2, [sp, #8]
 800bcac:	9301      	str	r3, [sp, #4]
 800bcae:	2300      	movs	r3, #0
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	460a      	mov	r2, r1
 800bcb6:	4924      	ldr	r1, [pc, #144]	; (800bd48 <vTaskStartScheduler+0xc0>)
 800bcb8:	4824      	ldr	r0, [pc, #144]	; (800bd4c <vTaskStartScheduler+0xc4>)
 800bcba:	f7ff fd27 	bl	800b70c <xTaskCreateStatic>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	4a23      	ldr	r2, [pc, #140]	; (800bd50 <vTaskStartScheduler+0xc8>)
 800bcc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bcc4:	4b22      	ldr	r3, [pc, #136]	; (800bd50 <vTaskStartScheduler+0xc8>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bccc:	2301      	movs	r3, #1
 800bcce:	617b      	str	r3, [r7, #20]
 800bcd0:	e001      	b.n	800bcd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d102      	bne.n	800bce2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bcdc:	f000 fd44 	bl	800c768 <xTimerCreateTimerTask>
 800bce0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d11c      	bne.n	800bd22 <vTaskStartScheduler+0x9a>
	__asm volatile
 800bce8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	613b      	str	r3, [r7, #16]
}
 800bcfa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bcfc:	4b15      	ldr	r3, [pc, #84]	; (800bd54 <vTaskStartScheduler+0xcc>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800bd04:	4a14      	ldr	r2, [pc, #80]	; (800bd58 <vTaskStartScheduler+0xd0>)
 800bd06:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bd08:	4b14      	ldr	r3, [pc, #80]	; (800bd5c <vTaskStartScheduler+0xd4>)
 800bd0a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd10:	4b13      	ldr	r3, [pc, #76]	; (800bd60 <vTaskStartScheduler+0xd8>)
 800bd12:	2201      	movs	r2, #1
 800bd14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bd16:	4b13      	ldr	r3, [pc, #76]	; (800bd64 <vTaskStartScheduler+0xdc>)
 800bd18:	2200      	movs	r2, #0
 800bd1a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bd1c:	f7fe fe68 	bl	800a9f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bd20:	e00e      	b.n	800bd40 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd28:	d10a      	bne.n	800bd40 <vTaskStartScheduler+0xb8>
	__asm volatile
 800bd2a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bd2e:	f383 8811 	msr	BASEPRI, r3
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	60fb      	str	r3, [r7, #12]
}
 800bd3c:	bf00      	nop
 800bd3e:	e7fe      	b.n	800bd3e <vTaskStartScheduler+0xb6>
}
 800bd40:	bf00      	nop
 800bd42:	3718      	adds	r7, #24
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	0800e884 	.word	0x0800e884
 800bd4c:	0800c3f9 	.word	0x0800c3f9
 800bd50:	2000941c 	.word	0x2000941c
 800bd54:	20008f24 	.word	0x20008f24
 800bd58:	2000002c 	.word	0x2000002c
 800bd5c:	20009418 	.word	0x20009418
 800bd60:	20009404 	.word	0x20009404
 800bd64:	200093fc 	.word	0x200093fc

0800bd68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bd68:	b480      	push	{r7}
 800bd6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bd6c:	4b04      	ldr	r3, [pc, #16]	; (800bd80 <vTaskSuspendAll+0x18>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	3301      	adds	r3, #1
 800bd72:	4a03      	ldr	r2, [pc, #12]	; (800bd80 <vTaskSuspendAll+0x18>)
 800bd74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bd76:	bf00      	nop
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr
 800bd80:	20009420 	.word	0x20009420

0800bd84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bd92:	4b42      	ldr	r3, [pc, #264]	; (800be9c <xTaskResumeAll+0x118>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d10a      	bne.n	800bdb0 <xTaskResumeAll+0x2c>
	__asm volatile
 800bd9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bd9e:	f383 8811 	msr	BASEPRI, r3
 800bda2:	f3bf 8f6f 	isb	sy
 800bda6:	f3bf 8f4f 	dsb	sy
 800bdaa:	603b      	str	r3, [r7, #0]
}
 800bdac:	bf00      	nop
 800bdae:	e7fe      	b.n	800bdae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bdb0:	f7fe fec0 	bl	800ab34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bdb4:	4b39      	ldr	r3, [pc, #228]	; (800be9c <xTaskResumeAll+0x118>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	4a38      	ldr	r2, [pc, #224]	; (800be9c <xTaskResumeAll+0x118>)
 800bdbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdbe:	4b37      	ldr	r3, [pc, #220]	; (800be9c <xTaskResumeAll+0x118>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d162      	bne.n	800be8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bdc6:	4b36      	ldr	r3, [pc, #216]	; (800bea0 <xTaskResumeAll+0x11c>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d05e      	beq.n	800be8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bdce:	e02f      	b.n	800be30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdd0:	4b34      	ldr	r3, [pc, #208]	; (800bea4 <xTaskResumeAll+0x120>)
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	3318      	adds	r3, #24
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fe fd4f 	bl	800a880 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	3304      	adds	r3, #4
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fe fd4a 	bl	800a880 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf0:	4b2d      	ldr	r3, [pc, #180]	; (800bea8 <xTaskResumeAll+0x124>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d903      	bls.n	800be00 <xTaskResumeAll+0x7c>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdfc:	4a2a      	ldr	r2, [pc, #168]	; (800bea8 <xTaskResumeAll+0x124>)
 800bdfe:	6013      	str	r3, [r2, #0]
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be04:	4613      	mov	r3, r2
 800be06:	009b      	lsls	r3, r3, #2
 800be08:	4413      	add	r3, r2
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	4a27      	ldr	r2, [pc, #156]	; (800beac <xTaskResumeAll+0x128>)
 800be0e:	441a      	add	r2, r3
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	3304      	adds	r3, #4
 800be14:	4619      	mov	r1, r3
 800be16:	4610      	mov	r0, r2
 800be18:	f7fe fcd5 	bl	800a7c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be20:	4b23      	ldr	r3, [pc, #140]	; (800beb0 <xTaskResumeAll+0x12c>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be26:	429a      	cmp	r2, r3
 800be28:	d302      	bcc.n	800be30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800be2a:	4b22      	ldr	r3, [pc, #136]	; (800beb4 <xTaskResumeAll+0x130>)
 800be2c:	2201      	movs	r2, #1
 800be2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be30:	4b1c      	ldr	r3, [pc, #112]	; (800bea4 <xTaskResumeAll+0x120>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1cb      	bne.n	800bdd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d001      	beq.n	800be42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800be3e:	f000 fb87 	bl	800c550 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800be42:	4b1d      	ldr	r3, [pc, #116]	; (800beb8 <xTaskResumeAll+0x134>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d010      	beq.n	800be70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800be4e:	f000 f847 	bl	800bee0 <xTaskIncrementTick>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800be58:	4b16      	ldr	r3, [pc, #88]	; (800beb4 <xTaskResumeAll+0x130>)
 800be5a:	2201      	movs	r2, #1
 800be5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	3b01      	subs	r3, #1
 800be62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1f1      	bne.n	800be4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800be6a:	4b13      	ldr	r3, [pc, #76]	; (800beb8 <xTaskResumeAll+0x134>)
 800be6c:	2200      	movs	r2, #0
 800be6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800be70:	4b10      	ldr	r3, [pc, #64]	; (800beb4 <xTaskResumeAll+0x130>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d009      	beq.n	800be8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800be78:	2301      	movs	r3, #1
 800be7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800be7c:	4b0f      	ldr	r3, [pc, #60]	; (800bebc <xTaskResumeAll+0x138>)
 800be7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be82:	601a      	str	r2, [r3, #0]
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be8c:	f7fe fe82 	bl	800ab94 <vPortExitCritical>

	return xAlreadyYielded;
 800be90:	68bb      	ldr	r3, [r7, #8]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	20009420 	.word	0x20009420
 800bea0:	200093f8 	.word	0x200093f8
 800bea4:	200093b8 	.word	0x200093b8
 800bea8:	20009400 	.word	0x20009400
 800beac:	20008f28 	.word	0x20008f28
 800beb0:	20008f24 	.word	0x20008f24
 800beb4:	2000940c 	.word	0x2000940c
 800beb8:	20009408 	.word	0x20009408
 800bebc:	e000ed04 	.word	0xe000ed04

0800bec0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bec0:	b480      	push	{r7}
 800bec2:	b083      	sub	sp, #12
 800bec4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bec6:	4b05      	ldr	r3, [pc, #20]	; (800bedc <xTaskGetTickCount+0x1c>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800becc:	687b      	ldr	r3, [r7, #4]
}
 800bece:	4618      	mov	r0, r3
 800bed0:	370c      	adds	r7, #12
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	200093fc 	.word	0x200093fc

0800bee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b086      	sub	sp, #24
 800bee4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bee6:	2300      	movs	r3, #0
 800bee8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beea:	4b4f      	ldr	r3, [pc, #316]	; (800c028 <xTaskIncrementTick+0x148>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f040 808f 	bne.w	800c012 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bef4:	4b4d      	ldr	r3, [pc, #308]	; (800c02c <xTaskIncrementTick+0x14c>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	3301      	adds	r3, #1
 800befa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800befc:	4a4b      	ldr	r2, [pc, #300]	; (800c02c <xTaskIncrementTick+0x14c>)
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d120      	bne.n	800bf4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf08:	4b49      	ldr	r3, [pc, #292]	; (800c030 <xTaskIncrementTick+0x150>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00a      	beq.n	800bf28 <xTaskIncrementTick+0x48>
	__asm volatile
 800bf12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800bf16:	f383 8811 	msr	BASEPRI, r3
 800bf1a:	f3bf 8f6f 	isb	sy
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	603b      	str	r3, [r7, #0]
}
 800bf24:	bf00      	nop
 800bf26:	e7fe      	b.n	800bf26 <xTaskIncrementTick+0x46>
 800bf28:	4b41      	ldr	r3, [pc, #260]	; (800c030 <xTaskIncrementTick+0x150>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	60fb      	str	r3, [r7, #12]
 800bf2e:	4b41      	ldr	r3, [pc, #260]	; (800c034 <xTaskIncrementTick+0x154>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a3f      	ldr	r2, [pc, #252]	; (800c030 <xTaskIncrementTick+0x150>)
 800bf34:	6013      	str	r3, [r2, #0]
 800bf36:	4a3f      	ldr	r2, [pc, #252]	; (800c034 <xTaskIncrementTick+0x154>)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6013      	str	r3, [r2, #0]
 800bf3c:	4b3e      	ldr	r3, [pc, #248]	; (800c038 <xTaskIncrementTick+0x158>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	3301      	adds	r3, #1
 800bf42:	4a3d      	ldr	r2, [pc, #244]	; (800c038 <xTaskIncrementTick+0x158>)
 800bf44:	6013      	str	r3, [r2, #0]
 800bf46:	f000 fb03 	bl	800c550 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bf4a:	4b3c      	ldr	r3, [pc, #240]	; (800c03c <xTaskIncrementTick+0x15c>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	693a      	ldr	r2, [r7, #16]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d349      	bcc.n	800bfe8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf54:	4b36      	ldr	r3, [pc, #216]	; (800c030 <xTaskIncrementTick+0x150>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d104      	bne.n	800bf68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf5e:	4b37      	ldr	r3, [pc, #220]	; (800c03c <xTaskIncrementTick+0x15c>)
 800bf60:	f04f 32ff 	mov.w	r2, #4294967295
 800bf64:	601a      	str	r2, [r3, #0]
					break;
 800bf66:	e03f      	b.n	800bfe8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf68:	4b31      	ldr	r3, [pc, #196]	; (800c030 <xTaskIncrementTick+0x150>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf78:	693a      	ldr	r2, [r7, #16]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d203      	bcs.n	800bf88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf80:	4a2e      	ldr	r2, [pc, #184]	; (800c03c <xTaskIncrementTick+0x15c>)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bf86:	e02f      	b.n	800bfe8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	3304      	adds	r3, #4
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7fe fc77 	bl	800a880 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d004      	beq.n	800bfa4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	3318      	adds	r3, #24
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fe fc6e 	bl	800a880 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa8:	4b25      	ldr	r3, [pc, #148]	; (800c040 <xTaskIncrementTick+0x160>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d903      	bls.n	800bfb8 <xTaskIncrementTick+0xd8>
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb4:	4a22      	ldr	r2, [pc, #136]	; (800c040 <xTaskIncrementTick+0x160>)
 800bfb6:	6013      	str	r3, [r2, #0]
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4413      	add	r3, r2
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4a1f      	ldr	r2, [pc, #124]	; (800c044 <xTaskIncrementTick+0x164>)
 800bfc6:	441a      	add	r2, r3
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	3304      	adds	r3, #4
 800bfcc:	4619      	mov	r1, r3
 800bfce:	4610      	mov	r0, r2
 800bfd0:	f7fe fbf9 	bl	800a7c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd8:	4b1b      	ldr	r3, [pc, #108]	; (800c048 <xTaskIncrementTick+0x168>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d3b8      	bcc.n	800bf54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfe6:	e7b5      	b.n	800bf54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bfe8:	4b17      	ldr	r3, [pc, #92]	; (800c048 <xTaskIncrementTick+0x168>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfee:	4915      	ldr	r1, [pc, #84]	; (800c044 <xTaskIncrementTick+0x164>)
 800bff0:	4613      	mov	r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	4413      	add	r3, r2
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	440b      	add	r3, r1
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d901      	bls.n	800c004 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c000:	2301      	movs	r3, #1
 800c002:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c004:	4b11      	ldr	r3, [pc, #68]	; (800c04c <xTaskIncrementTick+0x16c>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d007      	beq.n	800c01c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c00c:	2301      	movs	r3, #1
 800c00e:	617b      	str	r3, [r7, #20]
 800c010:	e004      	b.n	800c01c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c012:	4b0f      	ldr	r3, [pc, #60]	; (800c050 <xTaskIncrementTick+0x170>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	3301      	adds	r3, #1
 800c018:	4a0d      	ldr	r2, [pc, #52]	; (800c050 <xTaskIncrementTick+0x170>)
 800c01a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c01c:	697b      	ldr	r3, [r7, #20]
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3718      	adds	r7, #24
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	20009420 	.word	0x20009420
 800c02c:	200093fc 	.word	0x200093fc
 800c030:	200093b0 	.word	0x200093b0
 800c034:	200093b4 	.word	0x200093b4
 800c038:	20009410 	.word	0x20009410
 800c03c:	20009418 	.word	0x20009418
 800c040:	20009400 	.word	0x20009400
 800c044:	20008f28 	.word	0x20008f28
 800c048:	20008f24 	.word	0x20008f24
 800c04c:	2000940c 	.word	0x2000940c
 800c050:	20009408 	.word	0x20009408

0800c054 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b086      	sub	sp, #24
 800c058:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c05a:	4b3d      	ldr	r3, [pc, #244]	; (800c150 <vTaskSwitchContext+0xfc>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d003      	beq.n	800c06a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c062:	4b3c      	ldr	r3, [pc, #240]	; (800c154 <vTaskSwitchContext+0x100>)
 800c064:	2201      	movs	r2, #1
 800c066:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c068:	e06e      	b.n	800c148 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 800c06a:	4b3a      	ldr	r3, [pc, #232]	; (800c154 <vTaskSwitchContext+0x100>)
 800c06c:	2200      	movs	r2, #0
 800c06e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c070:	4b39      	ldr	r3, [pc, #228]	; (800c158 <vTaskSwitchContext+0x104>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c076:	613b      	str	r3, [r7, #16]
 800c078:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c07c:	60fb      	str	r3, [r7, #12]
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	68fa      	ldr	r2, [r7, #12]
 800c084:	429a      	cmp	r2, r3
 800c086:	d111      	bne.n	800c0ac <vTaskSwitchContext+0x58>
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	3304      	adds	r3, #4
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	429a      	cmp	r2, r3
 800c092:	d10b      	bne.n	800c0ac <vTaskSwitchContext+0x58>
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	3308      	adds	r3, #8
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d105      	bne.n	800c0ac <vTaskSwitchContext+0x58>
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	330c      	adds	r3, #12
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	68fa      	ldr	r2, [r7, #12]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d008      	beq.n	800c0be <vTaskSwitchContext+0x6a>
 800c0ac:	4b2a      	ldr	r3, [pc, #168]	; (800c158 <vTaskSwitchContext+0x104>)
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	4b29      	ldr	r3, [pc, #164]	; (800c158 <vTaskSwitchContext+0x104>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	3334      	adds	r3, #52	; 0x34
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	f7f6 fc5b 	bl	8002974 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0be:	4b27      	ldr	r3, [pc, #156]	; (800c15c <vTaskSwitchContext+0x108>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	617b      	str	r3, [r7, #20]
 800c0c4:	e010      	b.n	800c0e8 <vTaskSwitchContext+0x94>
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d10a      	bne.n	800c0e2 <vTaskSwitchContext+0x8e>
	__asm volatile
 800c0cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	607b      	str	r3, [r7, #4]
}
 800c0de:	bf00      	nop
 800c0e0:	e7fe      	b.n	800c0e0 <vTaskSwitchContext+0x8c>
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	3b01      	subs	r3, #1
 800c0e6:	617b      	str	r3, [r7, #20]
 800c0e8:	491d      	ldr	r1, [pc, #116]	; (800c160 <vTaskSwitchContext+0x10c>)
 800c0ea:	697a      	ldr	r2, [r7, #20]
 800c0ec:	4613      	mov	r3, r2
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	440b      	add	r3, r1
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d0e4      	beq.n	800c0c6 <vTaskSwitchContext+0x72>
 800c0fc:	697a      	ldr	r2, [r7, #20]
 800c0fe:	4613      	mov	r3, r2
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4413      	add	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	4a16      	ldr	r2, [pc, #88]	; (800c160 <vTaskSwitchContext+0x10c>)
 800c108:	4413      	add	r3, r2
 800c10a:	60bb      	str	r3, [r7, #8]
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	685a      	ldr	r2, [r3, #4]
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	605a      	str	r2, [r3, #4]
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	685a      	ldr	r2, [r3, #4]
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	3308      	adds	r3, #8
 800c11e:	429a      	cmp	r2, r3
 800c120:	d104      	bne.n	800c12c <vTaskSwitchContext+0xd8>
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	685a      	ldr	r2, [r3, #4]
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	605a      	str	r2, [r3, #4]
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	4a09      	ldr	r2, [pc, #36]	; (800c158 <vTaskSwitchContext+0x104>)
 800c134:	6013      	str	r3, [r2, #0]
 800c136:	4a09      	ldr	r2, [pc, #36]	; (800c15c <vTaskSwitchContext+0x108>)
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c13c:	4b06      	ldr	r3, [pc, #24]	; (800c158 <vTaskSwitchContext+0x104>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800c144:	4a07      	ldr	r2, [pc, #28]	; (800c164 <vTaskSwitchContext+0x110>)
 800c146:	6013      	str	r3, [r2, #0]
}
 800c148:	bf00      	nop
 800c14a:	3718      	adds	r7, #24
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	20009420 	.word	0x20009420
 800c154:	2000940c 	.word	0x2000940c
 800c158:	20008f24 	.word	0x20008f24
 800c15c:	20009400 	.word	0x20009400
 800c160:	20008f28 	.word	0x20008f28
 800c164:	2000002c 	.word	0x2000002c

0800c168 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d10a      	bne.n	800c18e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c178:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c17c:	f383 8811 	msr	BASEPRI, r3
 800c180:	f3bf 8f6f 	isb	sy
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	60fb      	str	r3, [r7, #12]
}
 800c18a:	bf00      	nop
 800c18c:	e7fe      	b.n	800c18c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c18e:	4b07      	ldr	r3, [pc, #28]	; (800c1ac <vTaskPlaceOnEventList+0x44>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	3318      	adds	r3, #24
 800c194:	4619      	mov	r1, r3
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7fe fb39 	bl	800a80e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c19c:	2101      	movs	r1, #1
 800c19e:	6838      	ldr	r0, [r7, #0]
 800c1a0:	f000 fa88 	bl	800c6b4 <prvAddCurrentTaskToDelayedList>
}
 800c1a4:	bf00      	nop
 800c1a6:	3710      	adds	r7, #16
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	20008f24 	.word	0x20008f24

0800c1b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d10a      	bne.n	800c1d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c1c2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c1c6:	f383 8811 	msr	BASEPRI, r3
 800c1ca:	f3bf 8f6f 	isb	sy
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	617b      	str	r3, [r7, #20]
}
 800c1d4:	bf00      	nop
 800c1d6:	e7fe      	b.n	800c1d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c1d8:	4b0a      	ldr	r3, [pc, #40]	; (800c204 <vTaskPlaceOnEventListRestricted+0x54>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3318      	adds	r3, #24
 800c1de:	4619      	mov	r1, r3
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	f7fe faf0 	bl	800a7c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d002      	beq.n	800c1f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c1f2:	6879      	ldr	r1, [r7, #4]
 800c1f4:	68b8      	ldr	r0, [r7, #8]
 800c1f6:	f000 fa5d 	bl	800c6b4 <prvAddCurrentTaskToDelayedList>
	}
 800c1fa:	bf00      	nop
 800c1fc:	3718      	adds	r7, #24
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	20008f24 	.word	0x20008f24

0800c208 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b086      	sub	sp, #24
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	68db      	ldr	r3, [r3, #12]
 800c216:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d10a      	bne.n	800c234 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c21e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	60fb      	str	r3, [r7, #12]
}
 800c230:	bf00      	nop
 800c232:	e7fe      	b.n	800c232 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	3318      	adds	r3, #24
 800c238:	4618      	mov	r0, r3
 800c23a:	f7fe fb21 	bl	800a880 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c23e:	4b1e      	ldr	r3, [pc, #120]	; (800c2b8 <xTaskRemoveFromEventList+0xb0>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d11d      	bne.n	800c282 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	3304      	adds	r3, #4
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7fe fb18 	bl	800a880 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c254:	4b19      	ldr	r3, [pc, #100]	; (800c2bc <xTaskRemoveFromEventList+0xb4>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d903      	bls.n	800c264 <xTaskRemoveFromEventList+0x5c>
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c260:	4a16      	ldr	r2, [pc, #88]	; (800c2bc <xTaskRemoveFromEventList+0xb4>)
 800c262:	6013      	str	r3, [r2, #0]
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c268:	4613      	mov	r3, r2
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	4413      	add	r3, r2
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	4a13      	ldr	r2, [pc, #76]	; (800c2c0 <xTaskRemoveFromEventList+0xb8>)
 800c272:	441a      	add	r2, r3
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	3304      	adds	r3, #4
 800c278:	4619      	mov	r1, r3
 800c27a:	4610      	mov	r0, r2
 800c27c:	f7fe faa3 	bl	800a7c6 <vListInsertEnd>
 800c280:	e005      	b.n	800c28e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	3318      	adds	r3, #24
 800c286:	4619      	mov	r1, r3
 800c288:	480e      	ldr	r0, [pc, #56]	; (800c2c4 <xTaskRemoveFromEventList+0xbc>)
 800c28a:	f7fe fa9c 	bl	800a7c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c292:	4b0d      	ldr	r3, [pc, #52]	; (800c2c8 <xTaskRemoveFromEventList+0xc0>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c298:	429a      	cmp	r2, r3
 800c29a:	d905      	bls.n	800c2a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c29c:	2301      	movs	r3, #1
 800c29e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c2a0:	4b0a      	ldr	r3, [pc, #40]	; (800c2cc <xTaskRemoveFromEventList+0xc4>)
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	601a      	str	r2, [r3, #0]
 800c2a6:	e001      	b.n	800c2ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c2ac:	697b      	ldr	r3, [r7, #20]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3718      	adds	r7, #24
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	20009420 	.word	0x20009420
 800c2bc:	20009400 	.word	0x20009400
 800c2c0:	20008f28 	.word	0x20008f28
 800c2c4:	200093b8 	.word	0x200093b8
 800c2c8:	20008f24 	.word	0x20008f24
 800c2cc:	2000940c 	.word	0x2000940c

0800c2d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c2d8:	4b06      	ldr	r3, [pc, #24]	; (800c2f4 <vTaskInternalSetTimeOutState+0x24>)
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c2e0:	4b05      	ldr	r3, [pc, #20]	; (800c2f8 <vTaskInternalSetTimeOutState+0x28>)
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	605a      	str	r2, [r3, #4]
}
 800c2e8:	bf00      	nop
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr
 800c2f4:	20009410 	.word	0x20009410
 800c2f8:	200093fc 	.word	0x200093fc

0800c2fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b088      	sub	sp, #32
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d10a      	bne.n	800c322 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c30c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c310:	f383 8811 	msr	BASEPRI, r3
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	613b      	str	r3, [r7, #16]
}
 800c31e:	bf00      	nop
 800c320:	e7fe      	b.n	800c320 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d10a      	bne.n	800c33e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c328:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c32c:	f383 8811 	msr	BASEPRI, r3
 800c330:	f3bf 8f6f 	isb	sy
 800c334:	f3bf 8f4f 	dsb	sy
 800c338:	60fb      	str	r3, [r7, #12]
}
 800c33a:	bf00      	nop
 800c33c:	e7fe      	b.n	800c33c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c33e:	f7fe fbf9 	bl	800ab34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c342:	4b24      	ldr	r3, [pc, #144]	; (800c3d4 <xTaskCheckForTimeOut+0xd8>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	69ba      	ldr	r2, [r7, #24]
 800c34e:	1ad3      	subs	r3, r2, r3
 800c350:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800c352:	4b21      	ldr	r3, [pc, #132]	; (800c3d8 <xTaskCheckForTimeOut+0xdc>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d007      	beq.n	800c36e <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800c35e:	4b1e      	ldr	r3, [pc, #120]	; (800c3d8 <xTaskCheckForTimeOut+0xdc>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2200      	movs	r2, #0
 800c364:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
				xReturn = pdTRUE;
 800c368:	2301      	movs	r3, #1
 800c36a:	61fb      	str	r3, [r7, #28]
 800c36c:	e02b      	b.n	800c3c6 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c376:	d102      	bne.n	800c37e <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c378:	2300      	movs	r3, #0
 800c37a:	61fb      	str	r3, [r7, #28]
 800c37c:	e023      	b.n	800c3c6 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	4b16      	ldr	r3, [pc, #88]	; (800c3dc <xTaskCheckForTimeOut+0xe0>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	429a      	cmp	r2, r3
 800c388:	d007      	beq.n	800c39a <xTaskCheckForTimeOut+0x9e>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	69ba      	ldr	r2, [r7, #24]
 800c390:	429a      	cmp	r2, r3
 800c392:	d302      	bcc.n	800c39a <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c394:	2301      	movs	r3, #1
 800c396:	61fb      	str	r3, [r7, #28]
 800c398:	e015      	b.n	800c3c6 <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	697a      	ldr	r2, [r7, #20]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d20b      	bcs.n	800c3bc <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	1ad2      	subs	r2, r2, r3
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f7ff ff8d 	bl	800c2d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	61fb      	str	r3, [r7, #28]
 800c3ba:	e004      	b.n	800c3c6 <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c3c6:	f7fe fbe5 	bl	800ab94 <vPortExitCritical>

	return xReturn;
 800c3ca:	69fb      	ldr	r3, [r7, #28]
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3720      	adds	r7, #32
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	200093fc 	.word	0x200093fc
 800c3d8:	20008f24 	.word	0x20008f24
 800c3dc:	20009410 	.word	0x20009410

0800c3e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c3e4:	4b03      	ldr	r3, [pc, #12]	; (800c3f4 <vTaskMissedYield+0x14>)
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	601a      	str	r2, [r3, #0]
}
 800c3ea:	bf00      	nop
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr
 800c3f4:	2000940c 	.word	0x2000940c

0800c3f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c400:	f000 f842 	bl	800c488 <prvCheckTasksWaitingTermination>
 800c404:	e7fc      	b.n	800c400 <prvIdleTask+0x8>
	...

0800c408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c40e:	2300      	movs	r3, #0
 800c410:	607b      	str	r3, [r7, #4]
 800c412:	e00c      	b.n	800c42e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	4613      	mov	r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4413      	add	r3, r2
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4a12      	ldr	r2, [pc, #72]	; (800c468 <prvInitialiseTaskLists+0x60>)
 800c420:	4413      	add	r3, r2
 800c422:	4618      	mov	r0, r3
 800c424:	f7fe f9a2 	bl	800a76c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	3301      	adds	r3, #1
 800c42c:	607b      	str	r3, [r7, #4]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2b37      	cmp	r3, #55	; 0x37
 800c432:	d9ef      	bls.n	800c414 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c434:	480d      	ldr	r0, [pc, #52]	; (800c46c <prvInitialiseTaskLists+0x64>)
 800c436:	f7fe f999 	bl	800a76c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c43a:	480d      	ldr	r0, [pc, #52]	; (800c470 <prvInitialiseTaskLists+0x68>)
 800c43c:	f7fe f996 	bl	800a76c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c440:	480c      	ldr	r0, [pc, #48]	; (800c474 <prvInitialiseTaskLists+0x6c>)
 800c442:	f7fe f993 	bl	800a76c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c446:	480c      	ldr	r0, [pc, #48]	; (800c478 <prvInitialiseTaskLists+0x70>)
 800c448:	f7fe f990 	bl	800a76c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c44c:	480b      	ldr	r0, [pc, #44]	; (800c47c <prvInitialiseTaskLists+0x74>)
 800c44e:	f7fe f98d 	bl	800a76c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c452:	4b0b      	ldr	r3, [pc, #44]	; (800c480 <prvInitialiseTaskLists+0x78>)
 800c454:	4a05      	ldr	r2, [pc, #20]	; (800c46c <prvInitialiseTaskLists+0x64>)
 800c456:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c458:	4b0a      	ldr	r3, [pc, #40]	; (800c484 <prvInitialiseTaskLists+0x7c>)
 800c45a:	4a05      	ldr	r2, [pc, #20]	; (800c470 <prvInitialiseTaskLists+0x68>)
 800c45c:	601a      	str	r2, [r3, #0]
}
 800c45e:	bf00      	nop
 800c460:	3708      	adds	r7, #8
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	20008f28 	.word	0x20008f28
 800c46c:	20009388 	.word	0x20009388
 800c470:	2000939c 	.word	0x2000939c
 800c474:	200093b8 	.word	0x200093b8
 800c478:	200093cc 	.word	0x200093cc
 800c47c:	200093e4 	.word	0x200093e4
 800c480:	200093b0 	.word	0x200093b0
 800c484:	200093b4 	.word	0x200093b4

0800c488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c48e:	e019      	b.n	800c4c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c490:	f7fe fb50 	bl	800ab34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c494:	4b10      	ldr	r3, [pc, #64]	; (800c4d8 <prvCheckTasksWaitingTermination+0x50>)
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	3304      	adds	r3, #4
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7fe f9ed 	bl	800a880 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c4a6:	4b0d      	ldr	r3, [pc, #52]	; (800c4dc <prvCheckTasksWaitingTermination+0x54>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	4a0b      	ldr	r2, [pc, #44]	; (800c4dc <prvCheckTasksWaitingTermination+0x54>)
 800c4ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c4b0:	4b0b      	ldr	r3, [pc, #44]	; (800c4e0 <prvCheckTasksWaitingTermination+0x58>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	3b01      	subs	r3, #1
 800c4b6:	4a0a      	ldr	r2, [pc, #40]	; (800c4e0 <prvCheckTasksWaitingTermination+0x58>)
 800c4b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c4ba:	f7fe fb6b 	bl	800ab94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 f810 	bl	800c4e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c4c4:	4b06      	ldr	r3, [pc, #24]	; (800c4e0 <prvCheckTasksWaitingTermination+0x58>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d1e1      	bne.n	800c490 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c4cc:	bf00      	nop
 800c4ce:	bf00      	nop
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	200093cc 	.word	0x200093cc
 800c4dc:	200093f8 	.word	0x200093f8
 800c4e0:	200093e0 	.word	0x200093e0

0800c4e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f001 ff52 	bl	800e39c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d108      	bne.n	800c514 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c506:	4618      	mov	r0, r3
 800c508:	f7fe f812 	bl	800a530 <vPortFree>
				vPortFree( pxTCB );
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7fe f80f 	bl	800a530 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c512:	e018      	b.n	800c546 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d103      	bne.n	800c526 <prvDeleteTCB+0x42>
				vPortFree( pxTCB );
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f7fe f806 	bl	800a530 <vPortFree>
	}
 800c524:	e00f      	b.n	800c546 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d00a      	beq.n	800c546 <prvDeleteTCB+0x62>
	__asm volatile
 800c530:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c534:	f383 8811 	msr	BASEPRI, r3
 800c538:	f3bf 8f6f 	isb	sy
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	60fb      	str	r3, [r7, #12]
}
 800c542:	bf00      	nop
 800c544:	e7fe      	b.n	800c544 <prvDeleteTCB+0x60>
	}
 800c546:	bf00      	nop
 800c548:	3710      	adds	r7, #16
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
	...

0800c550 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c550:	b480      	push	{r7}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c556:	4b0c      	ldr	r3, [pc, #48]	; (800c588 <prvResetNextTaskUnblockTime+0x38>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d104      	bne.n	800c56a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c560:	4b0a      	ldr	r3, [pc, #40]	; (800c58c <prvResetNextTaskUnblockTime+0x3c>)
 800c562:	f04f 32ff 	mov.w	r2, #4294967295
 800c566:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c568:	e008      	b.n	800c57c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c56a:	4b07      	ldr	r3, [pc, #28]	; (800c588 <prvResetNextTaskUnblockTime+0x38>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	4a04      	ldr	r2, [pc, #16]	; (800c58c <prvResetNextTaskUnblockTime+0x3c>)
 800c57a:	6013      	str	r3, [r2, #0]
}
 800c57c:	bf00      	nop
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr
 800c588:	200093b0 	.word	0x200093b0
 800c58c:	20009418 	.word	0x20009418

0800c590 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c596:	4b0b      	ldr	r3, [pc, #44]	; (800c5c4 <xTaskGetSchedulerState+0x34>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d102      	bne.n	800c5a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	607b      	str	r3, [r7, #4]
 800c5a2:	e008      	b.n	800c5b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5a4:	4b08      	ldr	r3, [pc, #32]	; (800c5c8 <xTaskGetSchedulerState+0x38>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d102      	bne.n	800c5b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c5ac:	2302      	movs	r3, #2
 800c5ae:	607b      	str	r3, [r7, #4]
 800c5b0:	e001      	b.n	800c5b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c5b6:	687b      	ldr	r3, [r7, #4]
	}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr
 800c5c4:	20009404 	.word	0x20009404
 800c5c8:	20009420 	.word	0x20009420

0800c5cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b086      	sub	sp, #24
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d05c      	beq.n	800c69c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c5e2:	4b31      	ldr	r3, [pc, #196]	; (800c6a8 <xTaskPriorityDisinherit+0xdc>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	693a      	ldr	r2, [r7, #16]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d00a      	beq.n	800c602 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c5ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c5f0:	f383 8811 	msr	BASEPRI, r3
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	60fb      	str	r3, [r7, #12]
}
 800c5fe:	bf00      	nop
 800c600:	e7fe      	b.n	800c600 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10a      	bne.n	800c622 <xTaskPriorityDisinherit+0x56>
	__asm volatile
 800c60c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c610:	f383 8811 	msr	BASEPRI, r3
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	60bb      	str	r3, [r7, #8]
}
 800c61e:	bf00      	nop
 800c620:	e7fe      	b.n	800c620 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c628:	1e5a      	subs	r2, r3, #1
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d02e      	beq.n	800c69c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800c644:	2b00      	cmp	r3, #0
 800c646:	d129      	bne.n	800c69c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	3304      	adds	r3, #4
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7fe f917 	bl	800a880 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c660:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c66c:	4b0f      	ldr	r3, [pc, #60]	; (800c6ac <xTaskPriorityDisinherit+0xe0>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	429a      	cmp	r2, r3
 800c672:	d903      	bls.n	800c67c <xTaskPriorityDisinherit+0xb0>
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c678:	4a0c      	ldr	r2, [pc, #48]	; (800c6ac <xTaskPriorityDisinherit+0xe0>)
 800c67a:	6013      	str	r3, [r2, #0]
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c680:	4613      	mov	r3, r2
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	4413      	add	r3, r2
 800c686:	009b      	lsls	r3, r3, #2
 800c688:	4a09      	ldr	r2, [pc, #36]	; (800c6b0 <xTaskPriorityDisinherit+0xe4>)
 800c68a:	441a      	add	r2, r3
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	3304      	adds	r3, #4
 800c690:	4619      	mov	r1, r3
 800c692:	4610      	mov	r0, r2
 800c694:	f7fe f897 	bl	800a7c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c698:	2301      	movs	r3, #1
 800c69a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c69c:	697b      	ldr	r3, [r7, #20]
	}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3718      	adds	r7, #24
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	20008f24 	.word	0x20008f24
 800c6ac:	20009400 	.word	0x20009400
 800c6b0:	20008f28 	.word	0x20008f28

0800c6b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c6be:	4b24      	ldr	r3, [pc, #144]	; (800c750 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800c6c4:	4b23      	ldr	r3, [pc, #140]	; (800c754 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6ce:	4b21      	ldr	r3, [pc, #132]	; (800c754 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	3304      	adds	r3, #4
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7fe f8d3 	bl	800a880 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6e0:	d10a      	bne.n	800c6f8 <prvAddCurrentTaskToDelayedList+0x44>
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d007      	beq.n	800c6f8 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6e8:	4b1a      	ldr	r3, [pc, #104]	; (800c754 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	4819      	ldr	r0, [pc, #100]	; (800c758 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c6f2:	f7fe f868 	bl	800a7c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c6f6:	e026      	b.n	800c746 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	4413      	add	r3, r2
 800c6fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c700:	4b14      	ldr	r3, [pc, #80]	; (800c754 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	68ba      	ldr	r2, [r7, #8]
 800c706:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c708:	68ba      	ldr	r2, [r7, #8]
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d209      	bcs.n	800c724 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c710:	4b12      	ldr	r3, [pc, #72]	; (800c75c <prvAddCurrentTaskToDelayedList+0xa8>)
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	4b0f      	ldr	r3, [pc, #60]	; (800c754 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	3304      	adds	r3, #4
 800c71a:	4619      	mov	r1, r3
 800c71c:	4610      	mov	r0, r2
 800c71e:	f7fe f876 	bl	800a80e <vListInsert>
}
 800c722:	e010      	b.n	800c746 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c724:	4b0e      	ldr	r3, [pc, #56]	; (800c760 <prvAddCurrentTaskToDelayedList+0xac>)
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	4b0a      	ldr	r3, [pc, #40]	; (800c754 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	3304      	adds	r3, #4
 800c72e:	4619      	mov	r1, r3
 800c730:	4610      	mov	r0, r2
 800c732:	f7fe f86c 	bl	800a80e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c736:	4b0b      	ldr	r3, [pc, #44]	; (800c764 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	68ba      	ldr	r2, [r7, #8]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d202      	bcs.n	800c746 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800c740:	4a08      	ldr	r2, [pc, #32]	; (800c764 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	6013      	str	r3, [r2, #0]
}
 800c746:	bf00      	nop
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	200093fc 	.word	0x200093fc
 800c754:	20008f24 	.word	0x20008f24
 800c758:	200093e4 	.word	0x200093e4
 800c75c:	200093b4 	.word	0x200093b4
 800c760:	200093b0 	.word	0x200093b0
 800c764:	20009418 	.word	0x20009418

0800c768 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b08a      	sub	sp, #40	; 0x28
 800c76c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c76e:	2300      	movs	r3, #0
 800c770:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c772:	f000 fba1 	bl	800ceb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c776:	4b1c      	ldr	r3, [pc, #112]	; (800c7e8 <xTimerCreateTimerTask+0x80>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d021      	beq.n	800c7c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c77e:	2300      	movs	r3, #0
 800c780:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c782:	2300      	movs	r3, #0
 800c784:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c786:	1d3a      	adds	r2, r7, #4
 800c788:	f107 0108 	add.w	r1, r7, #8
 800c78c:	f107 030c 	add.w	r3, r7, #12
 800c790:	4618      	mov	r0, r3
 800c792:	f7fd fde3 	bl	800a35c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c796:	6879      	ldr	r1, [r7, #4]
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	68fa      	ldr	r2, [r7, #12]
 800c79c:	9202      	str	r2, [sp, #8]
 800c79e:	9301      	str	r3, [sp, #4]
 800c7a0:	2337      	movs	r3, #55	; 0x37
 800c7a2:	9300      	str	r3, [sp, #0]
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	460a      	mov	r2, r1
 800c7a8:	4910      	ldr	r1, [pc, #64]	; (800c7ec <xTimerCreateTimerTask+0x84>)
 800c7aa:	4811      	ldr	r0, [pc, #68]	; (800c7f0 <xTimerCreateTimerTask+0x88>)
 800c7ac:	f7fe ffae 	bl	800b70c <xTaskCreateStatic>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	4a10      	ldr	r2, [pc, #64]	; (800c7f4 <xTimerCreateTimerTask+0x8c>)
 800c7b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c7b6:	4b0f      	ldr	r3, [pc, #60]	; (800c7f4 <xTimerCreateTimerTask+0x8c>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d001      	beq.n	800c7c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10a      	bne.n	800c7de <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c7c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c7cc:	f383 8811 	msr	BASEPRI, r3
 800c7d0:	f3bf 8f6f 	isb	sy
 800c7d4:	f3bf 8f4f 	dsb	sy
 800c7d8:	613b      	str	r3, [r7, #16]
}
 800c7da:	bf00      	nop
 800c7dc:	e7fe      	b.n	800c7dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c7de:	697b      	ldr	r3, [r7, #20]
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3718      	adds	r7, #24
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	20009454 	.word	0x20009454
 800c7ec:	0800e88c 	.word	0x0800e88c
 800c7f0:	0800ca61 	.word	0x0800ca61
 800c7f4:	20009458 	.word	0x20009458

0800c7f8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b088      	sub	sp, #32
 800c7fc:	af02      	add	r7, sp, #8
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]
 800c804:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c806:	202c      	movs	r0, #44	; 0x2c
 800c808:	f7fd fdc2 	bl	800a390 <pvPortMalloc>
 800c80c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d00d      	beq.n	800c830 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	2200      	movs	r2, #0
 800c818:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	9301      	str	r3, [sp, #4]
 800c820:	6a3b      	ldr	r3, [r7, #32]
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	68b9      	ldr	r1, [r7, #8]
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f000 f843 	bl	800c8b6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c830:	697b      	ldr	r3, [r7, #20]
	}
 800c832:	4618      	mov	r0, r3
 800c834:	3718      	adds	r7, #24
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b08a      	sub	sp, #40	; 0x28
 800c83e:	af02      	add	r7, sp, #8
 800c840:	60f8      	str	r0, [r7, #12]
 800c842:	60b9      	str	r1, [r7, #8]
 800c844:	607a      	str	r2, [r7, #4]
 800c846:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c848:	232c      	movs	r3, #44	; 0x2c
 800c84a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	2b2c      	cmp	r3, #44	; 0x2c
 800c850:	d00a      	beq.n	800c868 <xTimerCreateStatic+0x2e>
	__asm volatile
 800c852:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c856:	f383 8811 	msr	BASEPRI, r3
 800c85a:	f3bf 8f6f 	isb	sy
 800c85e:	f3bf 8f4f 	dsb	sy
 800c862:	61bb      	str	r3, [r7, #24]
}
 800c864:	bf00      	nop
 800c866:	e7fe      	b.n	800c866 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c868:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d10a      	bne.n	800c886 <xTimerCreateStatic+0x4c>
	__asm volatile
 800c870:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	617b      	str	r3, [r7, #20]
}
 800c882:	bf00      	nop
 800c884:	e7fe      	b.n	800c884 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c888:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00d      	beq.n	800c8ac <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	2202      	movs	r2, #2
 800c894:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c898:	69fb      	ldr	r3, [r7, #28]
 800c89a:	9301      	str	r3, [sp, #4]
 800c89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89e:	9300      	str	r3, [sp, #0]
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	68b9      	ldr	r1, [r7, #8]
 800c8a6:	68f8      	ldr	r0, [r7, #12]
 800c8a8:	f000 f805 	bl	800c8b6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c8ac:	69fb      	ldr	r3, [r7, #28]
	}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3720      	adds	r7, #32
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b086      	sub	sp, #24
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	60f8      	str	r0, [r7, #12]
 800c8be:	60b9      	str	r1, [r7, #8]
 800c8c0:	607a      	str	r2, [r7, #4]
 800c8c2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10a      	bne.n	800c8e0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c8ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	617b      	str	r3, [r7, #20]
}
 800c8dc:	bf00      	nop
 800c8de:	e7fe      	b.n	800c8de <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d01e      	beq.n	800c924 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c8e6:	f000 fae7 	bl	800ceb8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f2:	68ba      	ldr	r2, [r7, #8]
 800c8f4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f8:	683a      	ldr	r2, [r7, #0]
 800c8fa:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fe:	6a3a      	ldr	r2, [r7, #32]
 800c900:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c904:	3304      	adds	r3, #4
 800c906:	4618      	mov	r0, r3
 800c908:	f7fd ff50 	bl	800a7ac <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d008      	beq.n	800c924 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c918:	f043 0304 	orr.w	r3, r3, #4
 800c91c:	b2da      	uxtb	r2, r3
 800c91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c920:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c924:	bf00      	nop
 800c926:	3718      	adds	r7, #24
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b08a      	sub	sp, #40	; 0x28
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]
 800c938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c93a:	2300      	movs	r3, #0
 800c93c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d10a      	bne.n	800c95a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c944:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c948:	f383 8811 	msr	BASEPRI, r3
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	623b      	str	r3, [r7, #32]
}
 800c956:	bf00      	nop
 800c958:	e7fe      	b.n	800c958 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c95a:	4b1a      	ldr	r3, [pc, #104]	; (800c9c4 <xTimerGenericCommand+0x98>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d02a      	beq.n	800c9b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	2b05      	cmp	r3, #5
 800c972:	dc18      	bgt.n	800c9a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c974:	f7ff fe0c 	bl	800c590 <xTaskGetSchedulerState>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	d109      	bne.n	800c992 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c97e:	4b11      	ldr	r3, [pc, #68]	; (800c9c4 <xTimerGenericCommand+0x98>)
 800c980:	6818      	ldr	r0, [r3, #0]
 800c982:	f107 0110 	add.w	r1, r7, #16
 800c986:	2300      	movs	r3, #0
 800c988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c98a:	f7fe fad7 	bl	800af3c <xQueueGenericSend>
 800c98e:	6278      	str	r0, [r7, #36]	; 0x24
 800c990:	e012      	b.n	800c9b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c992:	4b0c      	ldr	r3, [pc, #48]	; (800c9c4 <xTimerGenericCommand+0x98>)
 800c994:	6818      	ldr	r0, [r3, #0]
 800c996:	f107 0110 	add.w	r1, r7, #16
 800c99a:	2300      	movs	r3, #0
 800c99c:	2200      	movs	r2, #0
 800c99e:	f7fe facd 	bl	800af3c <xQueueGenericSend>
 800c9a2:	6278      	str	r0, [r7, #36]	; 0x24
 800c9a4:	e008      	b.n	800c9b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c9a6:	4b07      	ldr	r3, [pc, #28]	; (800c9c4 <xTimerGenericCommand+0x98>)
 800c9a8:	6818      	ldr	r0, [r3, #0]
 800c9aa:	f107 0110 	add.w	r1, r7, #16
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	683a      	ldr	r2, [r7, #0]
 800c9b2:	f7fe fbc1 	bl	800b138 <xQueueGenericSendFromISR>
 800c9b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3728      	adds	r7, #40	; 0x28
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	20009454 	.word	0x20009454

0800c9c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b088      	sub	sp, #32
 800c9cc:	af02      	add	r7, sp, #8
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9d2:	4b22      	ldr	r3, [pc, #136]	; (800ca5c <prvProcessExpiredTimer+0x94>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	68db      	ldr	r3, [r3, #12]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	3304      	adds	r3, #4
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7fd ff4d 	bl	800a880 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9ec:	f003 0304 	and.w	r3, r3, #4
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d022      	beq.n	800ca3a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	699a      	ldr	r2, [r3, #24]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	18d1      	adds	r1, r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	683a      	ldr	r2, [r7, #0]
 800ca00:	6978      	ldr	r0, [r7, #20]
 800ca02:	f000 f8d1 	bl	800cba8 <prvInsertTimerInActiveList>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d01f      	beq.n	800ca4c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	9300      	str	r3, [sp, #0]
 800ca10:	2300      	movs	r3, #0
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	2100      	movs	r1, #0
 800ca16:	6978      	ldr	r0, [r7, #20]
 800ca18:	f7ff ff88 	bl	800c92c <xTimerGenericCommand>
 800ca1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d113      	bne.n	800ca4c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ca24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ca28:	f383 8811 	msr	BASEPRI, r3
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	f3bf 8f4f 	dsb	sy
 800ca34:	60fb      	str	r3, [r7, #12]
}
 800ca36:	bf00      	nop
 800ca38:	e7fe      	b.n	800ca38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca40:	f023 0301 	bic.w	r3, r3, #1
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	6a1b      	ldr	r3, [r3, #32]
 800ca50:	6978      	ldr	r0, [r7, #20]
 800ca52:	4798      	blx	r3
}
 800ca54:	bf00      	nop
 800ca56:	3718      	adds	r7, #24
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	2000944c 	.word	0x2000944c

0800ca60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ca68:	f107 0308 	add.w	r3, r7, #8
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f000 f857 	bl	800cb20 <prvGetNextExpireTime>
 800ca72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	4619      	mov	r1, r3
 800ca78:	68f8      	ldr	r0, [r7, #12]
 800ca7a:	f000 f803 	bl	800ca84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ca7e:	f000 f8d5 	bl	800cc2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ca82:	e7f1      	b.n	800ca68 <prvTimerTask+0x8>

0800ca84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ca8e:	f7ff f96b 	bl	800bd68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca92:	f107 0308 	add.w	r3, r7, #8
 800ca96:	4618      	mov	r0, r3
 800ca98:	f000 f866 	bl	800cb68 <prvSampleTimeNow>
 800ca9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d130      	bne.n	800cb06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d10a      	bne.n	800cac0 <prvProcessTimerOrBlockTask+0x3c>
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d806      	bhi.n	800cac0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cab2:	f7ff f967 	bl	800bd84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cab6:	68f9      	ldr	r1, [r7, #12]
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f7ff ff85 	bl	800c9c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cabe:	e024      	b.n	800cb0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d008      	beq.n	800cad8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cac6:	4b13      	ldr	r3, [pc, #76]	; (800cb14 <prvProcessTimerOrBlockTask+0x90>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d101      	bne.n	800cad4 <prvProcessTimerOrBlockTask+0x50>
 800cad0:	2301      	movs	r3, #1
 800cad2:	e000      	b.n	800cad6 <prvProcessTimerOrBlockTask+0x52>
 800cad4:	2300      	movs	r3, #0
 800cad6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cad8:	4b0f      	ldr	r3, [pc, #60]	; (800cb18 <prvProcessTimerOrBlockTask+0x94>)
 800cada:	6818      	ldr	r0, [r3, #0]
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	683a      	ldr	r2, [r7, #0]
 800cae4:	4619      	mov	r1, r3
 800cae6:	f7fe fddd 	bl	800b6a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800caea:	f7ff f94b 	bl	800bd84 <xTaskResumeAll>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d10a      	bne.n	800cb0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800caf4:	4b09      	ldr	r3, [pc, #36]	; (800cb1c <prvProcessTimerOrBlockTask+0x98>)
 800caf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cafa:	601a      	str	r2, [r3, #0]
 800cafc:	f3bf 8f4f 	dsb	sy
 800cb00:	f3bf 8f6f 	isb	sy
}
 800cb04:	e001      	b.n	800cb0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cb06:	f7ff f93d 	bl	800bd84 <xTaskResumeAll>
}
 800cb0a:	bf00      	nop
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	20009450 	.word	0x20009450
 800cb18:	20009454 	.word	0x20009454
 800cb1c:	e000ed04 	.word	0xe000ed04

0800cb20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cb28:	4b0e      	ldr	r3, [pc, #56]	; (800cb64 <prvGetNextExpireTime+0x44>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d101      	bne.n	800cb36 <prvGetNextExpireTime+0x16>
 800cb32:	2201      	movs	r2, #1
 800cb34:	e000      	b.n	800cb38 <prvGetNextExpireTime+0x18>
 800cb36:	2200      	movs	r2, #0
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d105      	bne.n	800cb50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb44:	4b07      	ldr	r3, [pc, #28]	; (800cb64 <prvGetNextExpireTime+0x44>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	60fb      	str	r3, [r7, #12]
 800cb4e:	e001      	b.n	800cb54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cb50:	2300      	movs	r3, #0
 800cb52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cb54:	68fb      	ldr	r3, [r7, #12]
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3714      	adds	r7, #20
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	2000944c 	.word	0x2000944c

0800cb68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cb70:	f7ff f9a6 	bl	800bec0 <xTaskGetTickCount>
 800cb74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cb76:	4b0b      	ldr	r3, [pc, #44]	; (800cba4 <prvSampleTimeNow+0x3c>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	68fa      	ldr	r2, [r7, #12]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d205      	bcs.n	800cb8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cb80:	f000 f936 	bl	800cdf0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2201      	movs	r2, #1
 800cb88:	601a      	str	r2, [r3, #0]
 800cb8a:	e002      	b.n	800cb92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cb92:	4a04      	ldr	r2, [pc, #16]	; (800cba4 <prvSampleTimeNow+0x3c>)
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cb98:	68fb      	ldr	r3, [r7, #12]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	2000945c 	.word	0x2000945c

0800cba8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b086      	sub	sp, #24
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	607a      	str	r2, [r7, #4]
 800cbb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	68ba      	ldr	r2, [r7, #8]
 800cbbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	68fa      	ldr	r2, [r7, #12]
 800cbc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cbc6:	68ba      	ldr	r2, [r7, #8]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d812      	bhi.n	800cbf4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	1ad2      	subs	r2, r2, r3
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	699b      	ldr	r3, [r3, #24]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d302      	bcc.n	800cbe2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	617b      	str	r3, [r7, #20]
 800cbe0:	e01b      	b.n	800cc1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cbe2:	4b10      	ldr	r3, [pc, #64]	; (800cc24 <prvInsertTimerInActiveList+0x7c>)
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	3304      	adds	r3, #4
 800cbea:	4619      	mov	r1, r3
 800cbec:	4610      	mov	r0, r2
 800cbee:	f7fd fe0e 	bl	800a80e <vListInsert>
 800cbf2:	e012      	b.n	800cc1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d206      	bcs.n	800cc0a <prvInsertTimerInActiveList+0x62>
 800cbfc:	68ba      	ldr	r2, [r7, #8]
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d302      	bcc.n	800cc0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cc04:	2301      	movs	r3, #1
 800cc06:	617b      	str	r3, [r7, #20]
 800cc08:	e007      	b.n	800cc1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc0a:	4b07      	ldr	r3, [pc, #28]	; (800cc28 <prvInsertTimerInActiveList+0x80>)
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	3304      	adds	r3, #4
 800cc12:	4619      	mov	r1, r3
 800cc14:	4610      	mov	r0, r2
 800cc16:	f7fd fdfa 	bl	800a80e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cc1a:	697b      	ldr	r3, [r7, #20]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3718      	adds	r7, #24
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	20009450 	.word	0x20009450
 800cc28:	2000944c 	.word	0x2000944c

0800cc2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b08e      	sub	sp, #56	; 0x38
 800cc30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cc32:	e0ca      	b.n	800cdca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	da18      	bge.n	800cc6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cc3a:	1d3b      	adds	r3, r7, #4
 800cc3c:	3304      	adds	r3, #4
 800cc3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d10a      	bne.n	800cc5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cc46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cc4a:	f383 8811 	msr	BASEPRI, r3
 800cc4e:	f3bf 8f6f 	isb	sy
 800cc52:	f3bf 8f4f 	dsb	sy
 800cc56:	61fb      	str	r3, [r7, #28]
}
 800cc58:	bf00      	nop
 800cc5a:	e7fe      	b.n	800cc5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc62:	6850      	ldr	r0, [r2, #4]
 800cc64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc66:	6892      	ldr	r2, [r2, #8]
 800cc68:	4611      	mov	r1, r2
 800cc6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	f2c0 80aa 	blt.w	800cdc8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7a:	695b      	ldr	r3, [r3, #20]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d004      	beq.n	800cc8a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc82:	3304      	adds	r3, #4
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7fd fdfb 	bl	800a880 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc8a:	463b      	mov	r3, r7
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7ff ff6b 	bl	800cb68 <prvSampleTimeNow>
 800cc92:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2b09      	cmp	r3, #9
 800cc98:	f200 8097 	bhi.w	800cdca <prvProcessReceivedCommands+0x19e>
 800cc9c:	a201      	add	r2, pc, #4	; (adr r2, 800cca4 <prvProcessReceivedCommands+0x78>)
 800cc9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca2:	bf00      	nop
 800cca4:	0800cccd 	.word	0x0800cccd
 800cca8:	0800cccd 	.word	0x0800cccd
 800ccac:	0800cccd 	.word	0x0800cccd
 800ccb0:	0800cd41 	.word	0x0800cd41
 800ccb4:	0800cd55 	.word	0x0800cd55
 800ccb8:	0800cd9f 	.word	0x0800cd9f
 800ccbc:	0800cccd 	.word	0x0800cccd
 800ccc0:	0800cccd 	.word	0x0800cccd
 800ccc4:	0800cd41 	.word	0x0800cd41
 800ccc8:	0800cd55 	.word	0x0800cd55
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccd2:	f043 0301 	orr.w	r3, r3, #1
 800ccd6:	b2da      	uxtb	r2, r3
 800ccd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce2:	699b      	ldr	r3, [r3, #24]
 800cce4:	18d1      	adds	r1, r2, r3
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccec:	f7ff ff5c 	bl	800cba8 <prvInsertTimerInActiveList>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d069      	beq.n	800cdca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ccf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf8:	6a1b      	ldr	r3, [r3, #32]
 800ccfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccfc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ccfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd04:	f003 0304 	and.w	r3, r3, #4
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d05e      	beq.n	800cdca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cd0c:	68ba      	ldr	r2, [r7, #8]
 800cd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd10:	699b      	ldr	r3, [r3, #24]
 800cd12:	441a      	add	r2, r3
 800cd14:	2300      	movs	r3, #0
 800cd16:	9300      	str	r3, [sp, #0]
 800cd18:	2300      	movs	r3, #0
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd1e:	f7ff fe05 	bl	800c92c <xTimerGenericCommand>
 800cd22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cd24:	6a3b      	ldr	r3, [r7, #32]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d14f      	bne.n	800cdca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cd2a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cd2e:	f383 8811 	msr	BASEPRI, r3
 800cd32:	f3bf 8f6f 	isb	sy
 800cd36:	f3bf 8f4f 	dsb	sy
 800cd3a:	61bb      	str	r3, [r7, #24]
}
 800cd3c:	bf00      	nop
 800cd3e:	e7fe      	b.n	800cd3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd46:	f023 0301 	bic.w	r3, r3, #1
 800cd4a:	b2da      	uxtb	r2, r3
 800cd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cd52:	e03a      	b.n	800cdca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd5a:	f043 0301 	orr.w	r3, r3, #1
 800cd5e:	b2da      	uxtb	r2, r3
 800cd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6e:	699b      	ldr	r3, [r3, #24]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d10a      	bne.n	800cd8a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cd74:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cd78:	f383 8811 	msr	BASEPRI, r3
 800cd7c:	f3bf 8f6f 	isb	sy
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	617b      	str	r3, [r7, #20]
}
 800cd86:	bf00      	nop
 800cd88:	e7fe      	b.n	800cd88 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8c:	699a      	ldr	r2, [r3, #24]
 800cd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd90:	18d1      	adds	r1, r2, r3
 800cd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd98:	f7ff ff06 	bl	800cba8 <prvInsertTimerInActiveList>
					break;
 800cd9c:	e015      	b.n	800cdca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cda4:	f003 0302 	and.w	r3, r3, #2
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d103      	bne.n	800cdb4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cdac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdae:	f7fd fbbf 	bl	800a530 <vPortFree>
 800cdb2:	e00a      	b.n	800cdca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdba:	f023 0301 	bic.w	r3, r3, #1
 800cdbe:	b2da      	uxtb	r2, r3
 800cdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cdc6:	e000      	b.n	800cdca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cdc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cdca:	4b08      	ldr	r3, [pc, #32]	; (800cdec <prvProcessReceivedCommands+0x1c0>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	1d39      	adds	r1, r7, #4
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7fe fa4c 	bl	800b270 <xQueueReceive>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	f47f af2a 	bne.w	800cc34 <prvProcessReceivedCommands+0x8>
	}
}
 800cde0:	bf00      	nop
 800cde2:	bf00      	nop
 800cde4:	3730      	adds	r7, #48	; 0x30
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	20009454 	.word	0x20009454

0800cdf0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b088      	sub	sp, #32
 800cdf4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cdf6:	e048      	b.n	800ce8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cdf8:	4b2d      	ldr	r3, [pc, #180]	; (800ceb0 <prvSwitchTimerLists+0xc0>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	68db      	ldr	r3, [r3, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce02:	4b2b      	ldr	r3, [pc, #172]	; (800ceb0 <prvSwitchTimerLists+0xc0>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	3304      	adds	r3, #4
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fd fd35 	bl	800a880 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6a1b      	ldr	r3, [r3, #32]
 800ce1a:	68f8      	ldr	r0, [r7, #12]
 800ce1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce24:	f003 0304 	and.w	r3, r3, #4
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d02e      	beq.n	800ce8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	699b      	ldr	r3, [r3, #24]
 800ce30:	693a      	ldr	r2, [r7, #16]
 800ce32:	4413      	add	r3, r2
 800ce34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ce36:	68ba      	ldr	r2, [r7, #8]
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d90e      	bls.n	800ce5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	68ba      	ldr	r2, [r7, #8]
 800ce42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce4a:	4b19      	ldr	r3, [pc, #100]	; (800ceb0 <prvSwitchTimerLists+0xc0>)
 800ce4c:	681a      	ldr	r2, [r3, #0]
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	3304      	adds	r3, #4
 800ce52:	4619      	mov	r1, r3
 800ce54:	4610      	mov	r0, r2
 800ce56:	f7fd fcda 	bl	800a80e <vListInsert>
 800ce5a:	e016      	b.n	800ce8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	2300      	movs	r3, #0
 800ce62:	693a      	ldr	r2, [r7, #16]
 800ce64:	2100      	movs	r1, #0
 800ce66:	68f8      	ldr	r0, [r7, #12]
 800ce68:	f7ff fd60 	bl	800c92c <xTimerGenericCommand>
 800ce6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d10a      	bne.n	800ce8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ce74:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800ce78:	f383 8811 	msr	BASEPRI, r3
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	f3bf 8f4f 	dsb	sy
 800ce84:	603b      	str	r3, [r7, #0]
}
 800ce86:	bf00      	nop
 800ce88:	e7fe      	b.n	800ce88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce8a:	4b09      	ldr	r3, [pc, #36]	; (800ceb0 <prvSwitchTimerLists+0xc0>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1b1      	bne.n	800cdf8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ce94:	4b06      	ldr	r3, [pc, #24]	; (800ceb0 <prvSwitchTimerLists+0xc0>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ce9a:	4b06      	ldr	r3, [pc, #24]	; (800ceb4 <prvSwitchTimerLists+0xc4>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a04      	ldr	r2, [pc, #16]	; (800ceb0 <prvSwitchTimerLists+0xc0>)
 800cea0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cea2:	4a04      	ldr	r2, [pc, #16]	; (800ceb4 <prvSwitchTimerLists+0xc4>)
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	6013      	str	r3, [r2, #0]
}
 800cea8:	bf00      	nop
 800ceaa:	3718      	adds	r7, #24
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	2000944c 	.word	0x2000944c
 800ceb4:	20009450 	.word	0x20009450

0800ceb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cebe:	f7fd fe39 	bl	800ab34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cec2:	4b15      	ldr	r3, [pc, #84]	; (800cf18 <prvCheckForValidListAndQueue+0x60>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d120      	bne.n	800cf0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ceca:	4814      	ldr	r0, [pc, #80]	; (800cf1c <prvCheckForValidListAndQueue+0x64>)
 800cecc:	f7fd fc4e 	bl	800a76c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ced0:	4813      	ldr	r0, [pc, #76]	; (800cf20 <prvCheckForValidListAndQueue+0x68>)
 800ced2:	f7fd fc4b 	bl	800a76c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ced6:	4b13      	ldr	r3, [pc, #76]	; (800cf24 <prvCheckForValidListAndQueue+0x6c>)
 800ced8:	4a10      	ldr	r2, [pc, #64]	; (800cf1c <prvCheckForValidListAndQueue+0x64>)
 800ceda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cedc:	4b12      	ldr	r3, [pc, #72]	; (800cf28 <prvCheckForValidListAndQueue+0x70>)
 800cede:	4a10      	ldr	r2, [pc, #64]	; (800cf20 <prvCheckForValidListAndQueue+0x68>)
 800cee0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cee2:	2300      	movs	r3, #0
 800cee4:	9300      	str	r3, [sp, #0]
 800cee6:	4b11      	ldr	r3, [pc, #68]	; (800cf2c <prvCheckForValidListAndQueue+0x74>)
 800cee8:	4a11      	ldr	r2, [pc, #68]	; (800cf30 <prvCheckForValidListAndQueue+0x78>)
 800ceea:	2110      	movs	r1, #16
 800ceec:	20ff      	movs	r0, #255	; 0xff
 800ceee:	f7fd ff89 	bl	800ae04 <xQueueGenericCreateStatic>
 800cef2:	4603      	mov	r3, r0
 800cef4:	4a08      	ldr	r2, [pc, #32]	; (800cf18 <prvCheckForValidListAndQueue+0x60>)
 800cef6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cef8:	4b07      	ldr	r3, [pc, #28]	; (800cf18 <prvCheckForValidListAndQueue+0x60>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d005      	beq.n	800cf0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cf00:	4b05      	ldr	r3, [pc, #20]	; (800cf18 <prvCheckForValidListAndQueue+0x60>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	490b      	ldr	r1, [pc, #44]	; (800cf34 <prvCheckForValidListAndQueue+0x7c>)
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7fe fba2 	bl	800b650 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf0c:	f7fd fe42 	bl	800ab94 <vPortExitCritical>
}
 800cf10:	bf00      	nop
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	20009454 	.word	0x20009454
 800cf1c:	20009424 	.word	0x20009424
 800cf20:	20009438 	.word	0x20009438
 800cf24:	2000944c 	.word	0x2000944c
 800cf28:	20009450 	.word	0x20009450
 800cf2c:	2000a450 	.word	0x2000a450
 800cf30:	20009460 	.word	0x20009460
 800cf34:	0800e894 	.word	0x0800e894

0800cf38 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b086      	sub	sp, #24
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10a      	bne.n	800cf60 <xTimerIsTimerActive+0x28>
	__asm volatile
 800cf4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cf4e:	f383 8811 	msr	BASEPRI, r3
 800cf52:	f3bf 8f6f 	isb	sy
 800cf56:	f3bf 8f4f 	dsb	sy
 800cf5a:	60fb      	str	r3, [r7, #12]
}
 800cf5c:	bf00      	nop
 800cf5e:	e7fe      	b.n	800cf5e <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800cf60:	f7fd fde8 	bl	800ab34 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d102      	bne.n	800cf78 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800cf72:	2300      	movs	r3, #0
 800cf74:	617b      	str	r3, [r7, #20]
 800cf76:	e001      	b.n	800cf7c <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800cf78:	2301      	movs	r3, #1
 800cf7a:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800cf7c:	f7fd fe0a 	bl	800ab94 <vPortExitCritical>

	return xReturn;
 800cf80:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800cf82:	4618      	mov	r0, r3
 800cf84:	3718      	adds	r7, #24
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}

0800cf8a <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b086      	sub	sp, #24
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d10a      	bne.n	800cfb2 <pvTimerGetTimerID+0x28>
	__asm volatile
 800cf9c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800cfa0:	f383 8811 	msr	BASEPRI, r3
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	60fb      	str	r3, [r7, #12]
}
 800cfae:	bf00      	nop
 800cfb0:	e7fe      	b.n	800cfb0 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800cfb2:	f7fd fdbf 	bl	800ab34 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	69db      	ldr	r3, [r3, #28]
 800cfba:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800cfbc:	f7fd fdea 	bl	800ab94 <vPortExitCritical>

	return pvReturn;
 800cfc0:	693b      	ldr	r3, [r7, #16]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3718      	adds	r7, #24
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
	...

0800cfcc <Rte_Write_TimH_TimHPort_Tim3Ccr2>:
{
	TIM3->CCR1 = data;
}
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr2(uint8 data)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR2 = data;
 800cfd6:	4a04      	ldr	r2, [pc, #16]	; (800cfe8 <Rte_Write_TimH_TimHPort_Tim3Ccr2+0x1c>)
 800cfd8:	79fb      	ldrb	r3, [r7, #7]
 800cfda:	6393      	str	r3, [r2, #56]	; 0x38
}
 800cfdc:	bf00      	nop
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr
 800cfe8:	40000400 	.word	0x40000400

0800cfec <Rte_Write_TimH_TimHPort_Tim3Ccr3>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr3(uint8 data)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	4603      	mov	r3, r0
 800cff4:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR3 = data;
 800cff6:	4a04      	ldr	r2, [pc, #16]	; (800d008 <Rte_Write_TimH_TimHPort_Tim3Ccr3+0x1c>)
 800cff8:	79fb      	ldrb	r3, [r7, #7]
 800cffa:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800cffc:	bf00      	nop
 800cffe:	370c      	adds	r7, #12
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr
 800d008:	40000400 	.word	0x40000400

0800d00c <Rte_Write_TimH_TimHPort_Tim3Ccr4>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim3Ccr4(uint8 data)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	4603      	mov	r3, r0
 800d014:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR4 = data;
 800d016:	4a04      	ldr	r2, [pc, #16]	; (800d028 <Rte_Write_TimH_TimHPort_Tim3Ccr4+0x1c>)
 800d018:	79fb      	ldrb	r3, [r7, #7]
 800d01a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800d01c:	bf00      	nop
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr
 800d028:	40000400 	.word	0x40000400

0800d02c <Rte_Write_TimH_TimHPort_Tim2Ccr1>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr1(uint16 data)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	4603      	mov	r3, r0
 800d034:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = data;
 800d036:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d03a:	88fb      	ldrh	r3, [r7, #6]
 800d03c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800d03e:	bf00      	nop
 800d040:	370c      	adds	r7, #12
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr

0800d04a <Rte_Write_TimH_TimHPort_Tim2Ccr2>:
/* Run time environment interface. */
VOID Rte_Write_TimH_TimHPort_Tim2Ccr2(uint16 data)
{
 800d04a:	b480      	push	{r7}
 800d04c:	b083      	sub	sp, #12
 800d04e:	af00      	add	r7, sp, #0
 800d050:	4603      	mov	r3, r0
 800d052:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR2 = data;
 800d054:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d058:	88fb      	ldrh	r3, [r7, #6]
 800d05a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault>:
{
	TIM2->CCR3 = data;
}
/* Run time environment interface. */
VOID Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault(uint8* data, uint8 position)
{
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	460b      	mov	r3, r1
 800d072:	70fb      	strb	r3, [r7, #3]
	*data = SystemManager_Fault[position];
 800d074:	78fb      	ldrb	r3, [r7, #3]
 800d076:	4a06      	ldr	r2, [pc, #24]	; (800d090 <Rte_Read_SystemManager_SystemManagerPort_SystemManager_Fault+0x28>)
 800d078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d07c:	b2da      	uxtb	r2, r3
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	701a      	strb	r2, [r3, #0]
}
 800d082:	bf00      	nop
 800d084:	370c      	adds	r7, #12
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop
 800d090:	2000a508 	.word	0x2000a508

0800d094 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState>:
{
	*data = SecAlm_SensorState;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState(uint32* data)
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
	SecAlm_SensorState = *data;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	b2da      	uxtb	r2, r3
 800d0a2:	4b04      	ldr	r3, [pc, #16]	; (800d0b4 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorState+0x20>)
 800d0a4:	701a      	strb	r2, [r3, #0]
}
 800d0a6:	bf00      	nop
 800d0a8:	370c      	adds	r7, #12
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	20000118 	.word	0x20000118

0800d0b8 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState>:
{
	*data = ExtLights_LightSensorState;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState(uint32* data)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
	ExtLights_LightSensorState = *data;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a03      	ldr	r2, [pc, #12]	; (800d0d4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightSensorState+0x1c>)
 800d0c6:	6013      	str	r3, [r2, #0]
}
 800d0c8:	bf00      	nop
 800d0ca:	370c      	adds	r7, #12
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr
 800d0d4:	200000fc 	.word	0x200000fc

0800d0d8 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues>:
/* Run time environment interface. */
VOID Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues(uint32* data)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
	SenCtrl_MeasuredValues[0] = Adc_ChannelOne_Buffer[0];
 800d0e0:	4b08      	ldr	r3, [pc, #32]	; (800d104 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x2c>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4a08      	ldr	r2, [pc, #32]	; (800d108 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x30>)
 800d0e6:	6013      	str	r3, [r2, #0]
	SenCtrl_MeasuredValues[1] = Adc_ChannelOne_Buffer[1];
 800d0e8:	4b06      	ldr	r3, [pc, #24]	; (800d104 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x2c>)
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	4a06      	ldr	r2, [pc, #24]	; (800d108 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x30>)
 800d0ee:	6053      	str	r3, [r2, #4]
	SenCtrl_MeasuredValues[2] = Adc_ChannelOne_Buffer[2];
 800d0f0:	4b04      	ldr	r3, [pc, #16]	; (800d104 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x2c>)
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	4a04      	ldr	r2, [pc, #16]	; (800d108 <Rte_Write_SenCtrl_SenCtrlPort_SenCtrl_MeasuredValues+0x30>)
 800d0f6:	6093      	str	r3, [r2, #8]
}
 800d0f8:	bf00      	nop
 800d0fa:	370c      	adds	r7, #12
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr
 800d104:	200006bc 	.word	0x200006bc
 800d108:	2000011c 	.word	0x2000011c

0800d10c <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter>:
{
	*data = CenLoc_FollowMeHomeCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter(uint8 data)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	4603      	mov	r3, r0
 800d114:	71fb      	strb	r3, [r7, #7]
	CenLoc_FollowMeHomeCounter = data;
 800d116:	4a04      	ldr	r2, [pc, #16]	; (800d128 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeCounter+0x1c>)
 800d118:	79fb      	ldrb	r3, [r7, #7]
 800d11a:	7013      	strb	r3, [r2, #0]
}
 800d11c:	bf00      	nop
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr
 800d128:	200000c5 	.word	0x200000c5

0800d12c <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter>:
{
	*data = CenLoc_TurnOnLedCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter(uint8* data)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b083      	sub	sp, #12
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
	CenLoc_TurnOnLedCounter = *data;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	781a      	ldrb	r2, [r3, #0]
 800d138:	4b03      	ldr	r3, [pc, #12]	; (800d148 <Rte_Write_CenLoc_CenLocPort_CenLoc_TurnOnLedCounter+0x1c>)
 800d13a:	701a      	strb	r2, [r3, #0]
}
 800d13c:	bf00      	nop
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr
 800d148:	200000c6 	.word	0x200000c6

0800d14c <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter>:
{
	*data = CenLoc_CyclicAlarmCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter(uint8* data)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b083      	sub	sp, #12
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
	CenLoc_CyclicAlarmCounter = *data;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	781a      	ldrb	r2, [r3, #0]
 800d158:	4b03      	ldr	r3, [pc, #12]	; (800d168 <Rte_Write_CenLoc_CenLocPort_CenLoc_CyclicAlarmCounter+0x1c>)
 800d15a:	701a      	strb	r2, [r3, #0]
}
 800d15c:	bf00      	nop
 800d15e:	370c      	adds	r7, #12
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr
 800d168:	200000c4 	.word	0x200000c4

0800d16c <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter>:
{
	*data = CenLoc_BlinkCounter;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter(uint8* data)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b083      	sub	sp, #12
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
	CenLoc_BlinkCounter = *data;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	781a      	ldrb	r2, [r3, #0]
 800d178:	4b03      	ldr	r3, [pc, #12]	; (800d188 <Rte_Write_CenLoc_CenLocPort_CenLoc_BlinkCounter+0x1c>)
 800d17a:	701a      	strb	r2, [r3, #0]
}
 800d17c:	bf00      	nop
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr
 800d188:	200000c3 	.word	0x200000c3

0800d18c <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter>:
{
	*data = Os_Alarm_Counter;
}
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter(uint8* data)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
	Os_LockUnlockSequence_Counter = *data;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	781a      	ldrb	r2, [r3, #0]
 800d198:	4b03      	ldr	r3, [pc, #12]	; (800d1a8 <Rte_Write_Os_R_OsPort_Os_LockUnlockSequence_Counter+0x1c>)
 800d19a:	701a      	strb	r2, [r3, #0]
}
 800d19c:	bf00      	nop
 800d19e:	370c      	adds	r7, #12
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr
 800d1a8:	200001fc 	.word	0x200001fc

0800d1ac <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter(uint8* data)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
	Os_TurnOnCyclic_Counter = *data;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	781a      	ldrb	r2, [r3, #0]
 800d1b8:	4b03      	ldr	r3, [pc, #12]	; (800d1c8 <Rte_Write_Os_R_OsPort_Os_TurnOnCyclic_Counter+0x1c>)
 800d1ba:	701a      	strb	r2, [r3, #0]
}
 800d1bc:	bf00      	nop
 800d1be:	370c      	adds	r7, #12
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr
 800d1c8:	200001fd 	.word	0x200001fd

0800d1cc <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter(uint8* data)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
	Os_TurnOnLed_Counter = *data;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	781a      	ldrb	r2, [r3, #0]
 800d1d8:	4b03      	ldr	r3, [pc, #12]	; (800d1e8 <Rte_Write_Os_R_OsPort_Os_TurnOnLed_Counter+0x1c>)
 800d1da:	701a      	strb	r2, [r3, #0]
}
 800d1dc:	bf00      	nop
 800d1de:	370c      	adds	r7, #12
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr
 800d1e8:	200001fe 	.word	0x200001fe

0800d1ec <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter(uint8 data)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b083      	sub	sp, #12
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	71fb      	strb	r3, [r7, #7]
	Os_FollowMeHome_Counter = data;
 800d1f6:	4a04      	ldr	r2, [pc, #16]	; (800d208 <Rte_Write_Os_R_OsPort_Os_FollowMeHome_Counter+0x1c>)
 800d1f8:	79fb      	ldrb	r3, [r7, #7]
 800d1fa:	7013      	strb	r3, [r2, #0]
}
 800d1fc:	bf00      	nop
 800d1fe:	370c      	adds	r7, #12
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr
 800d208:	200001ff 	.word	0x200001ff

0800d20c <Rte_Write_Os_R_OsPort_Os_Lts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Lts_Counter(uint32* data)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
	Os_Lts_Counter = *data;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a03      	ldr	r2, [pc, #12]	; (800d228 <Rte_Write_Os_R_OsPort_Os_Lts_Counter+0x1c>)
 800d21a:	6013      	str	r3, [r2, #0]
}
 800d21c:	bf00      	nop
 800d21e:	370c      	adds	r7, #12
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr
 800d228:	20000200 	.word	0x20000200

0800d22c <Rte_Write_Os_R_OsPort_Os_Rts_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Rts_Counter(uint32* data)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
	Os_Rts_Counter = *data;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4a03      	ldr	r2, [pc, #12]	; (800d248 <Rte_Write_Os_R_OsPort_Os_Rts_Counter+0x1c>)
 800d23a:	6013      	str	r3, [r2, #0]
}
 800d23c:	bf00      	nop
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr
 800d248:	20000204 	.word	0x20000204

0800d24c <Rte_Write_Os_R_OsPort_Os_HL_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_HL_Counter(uint32* data)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
	Os_HL_Counter = *data;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a03      	ldr	r2, [pc, #12]	; (800d268 <Rte_Write_Os_R_OsPort_Os_HL_Counter+0x1c>)
 800d25a:	6013      	str	r3, [r2, #0]
}
 800d25c:	bf00      	nop
 800d25e:	370c      	adds	r7, #12
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr
 800d268:	20000208 	.word	0x20000208

0800d26c <Rte_Write_Os_R_OsPort_Os_Alarm_Counter>:
/* Run time environment interface. */
VOID Rte_Write_Os_R_OsPort_Os_Alarm_Counter(uint8* data)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
	Os_Alarm_Counter = *data;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	781a      	ldrb	r2, [r3, #0]
 800d278:	4b03      	ldr	r3, [pc, #12]	; (800d288 <Rte_Write_Os_R_OsPort_Os_Alarm_Counter+0x1c>)
 800d27a:	701a      	strb	r2, [r3, #0]
}
 800d27c:	bf00      	nop
 800d27e:	370c      	adds	r7, #12
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr
 800d288:	2000020c 	.word	0x2000020c

0800d28c <Rte_Runnable_EcuM_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_EcuM_MainFunction()
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	af00      	add	r7, sp, #0
	EcuM_MainFunction();
 800d290:	f000 fe54 	bl	800df3c <EcuM_MainFunction>
}
 800d294:	bf00      	nop
 800d296:	bd80      	pop	{r7, pc}

0800d298 <Rte_Runnable_SystemManager_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SystemManager_MainFunction()
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	af00      	add	r7, sp, #0
	SystemManager_MainFunction();
 800d29c:	f000 ff2c 	bl	800e0f8 <SystemManager_MainFunction>
}
 800d2a0:	bf00      	nop
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <Rte_Runnable_Crc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Crc_MainFunction()
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	af00      	add	r7, sp, #0
	Crc_MainFunction();
 800d2a8:	f000 fd10 	bl	800dccc <Crc_MainFunction>
}
 800d2ac:	bf00      	nop
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <Rte_Runnable_Wdg_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Wdg_MainFunction()
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	af00      	add	r7, sp, #0
	Watchdog_MainFunction();
 800d2b4:	f001 f814 	bl	800e2e0 <Watchdog_MainFunction>
}
 800d2b8:	bf00      	nop
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <Rte_Runnable_Adc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Adc_MainFunction()
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	af00      	add	r7, sp, #0
	Adc_MainFunction();
 800d2c0:	f7fb ffb4 	bl	800922c <Adc_MainFunction>
}
 800d2c4:	bf00      	nop
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <Rte_Runnable_Tim_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Tim_MainFunction()
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	af00      	add	r7, sp, #0
	Tim_MainFunction();
 800d2cc:	f7fc fcac 	bl	8009c28 <Tim_MainFunction>
}
 800d2d0:	bf00      	nop
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <Rte_Runnable_Uart_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Uart_MainFunction()
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	af00      	add	r7, sp, #0
	Uart_MainFunction();
 800d2d8:	f7f5 f904 	bl	80024e4 <Uart_MainFunction>
}
 800d2dc:	bf00      	nop
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start_IT(htim, Channel);
 800d2ea:	6839      	ldr	r1, [r7, #0]
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f7f9 fac5 	bl	800687c <HAL_TIM_PWM_Start_IT>
}
 800d2f2:	bf00      	nop
 800d2f4:	3708      	adds	r7, #8
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT>:
/* Run time environment interface. */
VOID Rte_Call_Tim_R_TimPort_HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32 Channel)
{
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b082      	sub	sp, #8
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	6078      	str	r0, [r7, #4]
 800d302:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop_IT(htim, Channel);
 800d304:	6839      	ldr	r1, [r7, #0]
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f7f9 fbb6 	bl	8006a78 <HAL_TIM_PWM_Stop_IT>
}
 800d30c:	bf00      	nop
 800d30e:	3708      	adds	r7, #8
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <Rte_Write_Btc_BtcPort_Btc_RxData>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxData(uint8* data)
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
	Btc_RxData = *data;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	781a      	ldrb	r2, [r3, #0]
 800d320:	4b03      	ldr	r3, [pc, #12]	; (800d330 <Rte_Write_Btc_BtcPort_Btc_RxData+0x1c>)
 800d322:	701a      	strb	r2, [r3, #0]
}
 800d324:	bf00      	nop
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr
 800d330:	200000b0 	.word	0x200000b0

0800d334 <Rte_Write_Btc_BtcPort_Btc_RxCount>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_RxCount(uint8* data)
{
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
	Btc_RxCount = *data;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	781a      	ldrb	r2, [r3, #0]
 800d340:	4b03      	ldr	r3, [pc, #12]	; (800d350 <Rte_Write_Btc_BtcPort_Btc_RxCount+0x1c>)
 800d342:	701a      	strb	r2, [r3, #0]
}
 800d344:	bf00      	nop
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr
 800d350:	200000b1 	.word	0x200000b1

0800d354 <Rte_Write_Btc_BtcPort_Btc_DataBuffer>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_DataBuffer(uint8* data, uint8 position)
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	460b      	mov	r3, r1
 800d35e:	70fb      	strb	r3, [r7, #3]
	Btc_DataBuffer[position] = *data;
 800d360:	78fb      	ldrb	r3, [r7, #3]
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	7811      	ldrb	r1, [r2, #0]
 800d366:	4a04      	ldr	r2, [pc, #16]	; (800d378 <Rte_Write_Btc_BtcPort_Btc_DataBuffer+0x24>)
 800d368:	54d1      	strb	r1, [r2, r3]
}
 800d36a:	bf00      	nop
 800d36c:	370c      	adds	r7, #12
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	200000ac 	.word	0x200000ac

0800d37c <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer>:
/* Run time environment interface. */
VOID Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer(uint32* data, uint8 position)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	460b      	mov	r3, r1
 800d386:	70fb      	strb	r3, [r7, #3]
	*data = Adc_ChannelOne_Buffer[position];
 800d388:	78fb      	ldrb	r3, [r7, #3]
 800d38a:	4a05      	ldr	r2, [pc, #20]	; (800d3a0 <Rte_Read_Adc_AdcPort_Adc_ChannelOne_Buffer+0x24>)
 800d38c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	601a      	str	r2, [r3, #0]
}
 800d394:	bf00      	nop
 800d396:	370c      	adds	r7, #12
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr
 800d3a0:	200006bc 	.word	0x200006bc

0800d3a4 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
	Btc_ReceivedDataOnBluetooth = *data;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	781a      	ldrb	r2, [r3, #0]
 800d3b0:	4b03      	ldr	r3, [pc, #12]	; (800d3c0 <Rte_Write_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 800d3b2:	701a      	strb	r2, [r3, #0]
}
 800d3b4:	bf00      	nop
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr
 800d3c0:	200000b2 	.word	0x200000b2

0800d3c4 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState(uint8* data)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
	CenLoc_CurrentState = *data;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	781a      	ldrb	r2, [r3, #0]
 800d3d0:	4b03      	ldr	r3, [pc, #12]	; (800d3e0 <Rte_Write_CenLoc_CenLocPort_CenLoc_CurrentState+0x1c>)
 800d3d2:	701a      	strb	r2, [r3, #0]
}
 800d3d4:	bf00      	nop
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr
 800d3e0:	200000bf 	.word	0x200000bf

0800d3e4 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState>:
{
	CenLoc_PreviousState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState(uint8* data)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
	CenLoc_FollowMeHomeState = *data;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	781a      	ldrb	r2, [r3, #0]
 800d3f0:	4b03      	ldr	r3, [pc, #12]	; (800d400 <Rte_Write_CenLoc_CenLocPort_CenLoc_FollowMeHomeState+0x1c>)
 800d3f2:	701a      	strb	r2, [r3, #0]
}
 800d3f4:	bf00      	nop
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr
 800d400:	200000c1 	.word	0x200000c1

0800d404 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState>:
{
	CenLoc_PreviousStateFlag = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState(uint8* data)
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
	ExtLights_ReverseLight_CurrentState = *data;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	781a      	ldrb	r2, [r3, #0]
 800d410:	4b03      	ldr	r3, [pc, #12]	; (800d420 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_ReverseLight_CurrentState+0x1c>)
 800d412:	701a      	strb	r2, [r3, #0]
}
 800d414:	bf00      	nop
 800d416:	370c      	adds	r7, #12
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr
 800d420:	200000e0 	.word	0x200000e0

0800d424 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState(uint8* data)
{
 800d424:	b480      	push	{r7}
 800d426:	b083      	sub	sp, #12
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
	ExtLights_BrakeLight_CurrentState = *data;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	781a      	ldrb	r2, [r3, #0]
 800d430:	4b03      	ldr	r3, [pc, #12]	; (800d440 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_BrakeLight_CurrentState+0x1c>)
 800d432:	701a      	strb	r2, [r3, #0]
}
 800d434:	bf00      	nop
 800d436:	370c      	adds	r7, #12
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr
 800d440:	200000e2 	.word	0x200000e2

0800d444 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState(uint8* data)
{
 800d444:	b480      	push	{r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
	ExtLights_LightsSwitch_CurrentState = *data;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	781a      	ldrb	r2, [r3, #0]
 800d450:	4b03      	ldr	r3, [pc, #12]	; (800d460 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LightsSwitch_CurrentState+0x1c>)
 800d452:	701a      	strb	r2, [r3, #0]
}
 800d454:	bf00      	nop
 800d456:	370c      	adds	r7, #12
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr
 800d460:	200000e3 	.word	0x200000e3

0800d464 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState(uint8* data)
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
	ExtLights_HighBeam_CurrentState = *data;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	781a      	ldrb	r2, [r3, #0]
 800d470:	4b03      	ldr	r3, [pc, #12]	; (800d480 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HighBeam_CurrentState+0x1c>)
 800d472:	701a      	strb	r2, [r3, #0]
}
 800d474:	bf00      	nop
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr
 800d480:	200000e4 	.word	0x200000e4

0800d484 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState(uint8* data)
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
	ExtLights_FrontFogLight_CurrentState = *data;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	781a      	ldrb	r2, [r3, #0]
 800d490:	4b03      	ldr	r3, [pc, #12]	; (800d4a0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_FrontFogLight_CurrentState+0x1c>)
 800d492:	701a      	strb	r2, [r3, #0]
}
 800d494:	bf00      	nop
 800d496:	370c      	adds	r7, #12
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr
 800d4a0:	200000e5 	.word	0x200000e5

0800d4a4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState(uint8* data)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalLeft_CurrentState = *data;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	781a      	ldrb	r2, [r3, #0]
 800d4b0:	4b03      	ldr	r3, [pc, #12]	; (800d4c0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalLeft_CurrentState+0x1c>)
 800d4b2:	701a      	strb	r2, [r3, #0]
}
 800d4b4:	bf00      	nop
 800d4b6:	370c      	adds	r7, #12
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr
 800d4c0:	200000e6 	.word	0x200000e6

0800d4c4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState(uint8* data)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
	ExtLights_TurnSignalRight_CurrentState = *data;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	781a      	ldrb	r2, [r3, #0]
 800d4d0:	4b03      	ldr	r3, [pc, #12]	; (800d4e0 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_TurnSignalRight_CurrentState+0x1c>)
 800d4d2:	701a      	strb	r2, [r3, #0]
}
 800d4d4:	bf00      	nop
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr
 800d4e0:	200000e7 	.word	0x200000e7

0800d4e4 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState(uint8* data)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
	ExtLights_HazardLight_CurrentState = *data;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	781a      	ldrb	r2, [r3, #0]
 800d4f0:	4b03      	ldr	r3, [pc, #12]	; (800d500 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HazardLight_CurrentState+0x1c>)
 800d4f2:	701a      	strb	r2, [r3, #0]
}
 800d4f4:	bf00      	nop
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr
 800d500:	200000ea 	.word	0x200000ea

0800d504 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState(uint8* data)
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
	ExtLights_RearFogLight_CurrentState = *data;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	781a      	ldrb	r2, [r3, #0]
 800d510:	4b03      	ldr	r3, [pc, #12]	; (800d520 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RearFogLight_CurrentState+0x1c>)
 800d512:	701a      	strb	r2, [r3, #0]
}
 800d514:	bf00      	nop
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr
 800d520:	200000eb 	.word	0x200000eb

0800d524 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag>:
{
	ExtLights_HL_PrevState = *data;
}
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag(uint32* data)
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
	ExtLights_RTSFlag = *data;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a03      	ldr	r2, [pc, #12]	; (800d540 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_RTSFlag+0x1c>)
 800d532:	6013      	str	r3, [r2, #0]
}
 800d534:	bf00      	nop
 800d536:	370c      	adds	r7, #12
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr
 800d540:	200000f0 	.word	0x200000f0

0800d544 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag(uint32* data)
{
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
	ExtLights_LTSFlag = *data;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4a03      	ldr	r2, [pc, #12]	; (800d560 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_LTSFlag+0x1c>)
 800d552:	6013      	str	r3, [r2, #0]
}
 800d554:	bf00      	nop
 800d556:	370c      	adds	r7, #12
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr
 800d560:	200000f4 	.word	0x200000f4

0800d564 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag>:
/* Run time environment interface. */
VOID Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag(uint32* data)
{
 800d564:	b480      	push	{r7}
 800d566:	b083      	sub	sp, #12
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
	ExtLights_HLFlag = *data;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4a03      	ldr	r2, [pc, #12]	; (800d580 <Rte_Write_ExtLights_ExtLightsPort_ExtLights_HLFlag+0x1c>)
 800d572:	6013      	str	r3, [r2, #0]
}
 800d574:	bf00      	nop
 800d576:	370c      	adds	r7, #12
 800d578:	46bd      	mov	sp, r7
 800d57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57e:	4770      	bx	lr
 800d580:	200000f8 	.word	0x200000f8

0800d584 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState>:
/* Run time environment interface. */
VOID Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState(uint8* data)
{
 800d584:	b480      	push	{r7}
 800d586:	b083      	sub	sp, #12
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
	IntLights_CurrentState = *data;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	781a      	ldrb	r2, [r3, #0]
 800d590:	4b03      	ldr	r3, [pc, #12]	; (800d5a0 <Rte_Write_IntLights_IntLightsPort_IntLights_CurrentState+0x1c>)
 800d592:	701a      	strb	r2, [r3, #0]
}
 800d594:	bf00      	nop
 800d596:	370c      	adds	r7, #12
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr
 800d5a0:	20000104 	.word	0x20000104

0800d5a4 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4>:
{
	SecAlm_PinStateChange = *data;
}
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4(uint8* data)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
	SecAlm_TriggerIRQCounterForTimer4 = *data;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	781a      	ldrb	r2, [r3, #0]
 800d5b0:	4b03      	ldr	r3, [pc, #12]	; (800d5c0 <Rte_Write_SecAlm_SecAlmPort_SecAlm_TriggerIRQCounterForTimer4+0x1c>)
 800d5b2:	701a      	strb	r2, [r3, #0]
}
 800d5b4:	bf00      	nop
 800d5b6:	370c      	adds	r7, #12
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr
 800d5c0:	20000112 	.word	0x20000112

0800d5c4 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter>:
/* Run time environment interface. */
VOID Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter(uint16 data)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	80fb      	strh	r3, [r7, #6]
	SecAlm_SensorStatusCounter = data;
 800d5ce:	4a04      	ldr	r2, [pc, #16]	; (800d5e0 <Rte_Write_SecAlm_SecAlmPort_SecAlm_SensorStatusCounter+0x1c>)
 800d5d0:	88fb      	ldrh	r3, [r7, #6]
 800d5d2:	8013      	strh	r3, [r2, #0]
}
 800d5d4:	bf00      	nop
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr
 800d5e0:	20000114 	.word	0x20000114

0800d5e4 <Rte_Runnable_Btc_MainFunction>:
{
	SecAlm_SensorStatus = *data;
}
/* Run time environment interface. */
VOID Rte_Runnable_Btc_MainFunction()
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	af00      	add	r7, sp, #0
	Btc_MainFunction();
 800d5e8:	f7f3 fd3e 	bl	8001068 <Btc_MainFunction>
}
 800d5ec:	bf00      	nop
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <Rte_Runnable_CenLoc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_CenLoc_MainFunction()
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	af00      	add	r7, sp, #0
	CenLoc_MainFunction();
 800d5f4:	f7f3 ff8e 	bl	8001514 <CenLoc_MainFunction>
}
 800d5f8:	bf00      	nop
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <Rte_Runnable_ExtLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_ExtLights_MainFunction()
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	af00      	add	r7, sp, #0
	ExtLights_MainFunction();
 800d600:	f7f4 faa0 	bl	8001b44 <ExtLights_MainFunction>
}
 800d604:	bf00      	nop
 800d606:	bd80      	pop	{r7, pc}

0800d608 <Rte_Runnable_IntLights_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_IntLights_MainFunction()
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	af00      	add	r7, sp, #0
	IntLights_MainFunction();
 800d60c:	f7f4 fbe2 	bl	8001dd4 <IntLights_MainFunction>
}
 800d610:	bf00      	nop
 800d612:	bd80      	pop	{r7, pc}

0800d614 <Rte_Runnable_SecAlm_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_SecAlm_MainFunction()
{
 800d614:	b580      	push	{r7, lr}
 800d616:	af00      	add	r7, sp, #0
	SecAlm_MainFunction();
 800d618:	f7f4 fe8a 	bl	8002330 <SecAlm_MainFunction>
}
 800d61c:	bf00      	nop
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>:
/* Run time environment interface. */
VOID Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(uint8* data)
{
 800d620:	b480      	push	{r7}
 800d622:	b083      	sub	sp, #12
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
	*data = Btc_ReceivedDataOnBluetooth;
 800d628:	4b04      	ldr	r3, [pc, #16]	; (800d63c <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth+0x1c>)
 800d62a:	781a      	ldrb	r2, [r3, #0]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	701a      	strb	r2, [r3, #0]
}
 800d630:	bf00      	nop
 800d632:	370c      	adds	r7, #12
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr
 800d63c:	200000b2 	.word	0x200000b2

0800d640 <Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin>:
{
	HAL_TIM_Base_Stop_IT(htim);
}
/* Run time environment interface. */
VOID Rte_Call_Gpio_R_GpioPort_HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	460b      	mov	r3, r1
 800d64a:	807b      	strh	r3, [r7, #2]
 800d64c:	4613      	mov	r3, r2
 800d64e:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 800d650:	787a      	ldrb	r2, [r7, #1]
 800d652:	887b      	ldrh	r3, [r7, #2]
 800d654:	4619      	mov	r1, r3
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7f8 fa82 	bl	8005b60 <HAL_GPIO_WritePin>
}
 800d65c:	bf00      	nop
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart>:
{
	HAL_GetTick();
}
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStart(osTimerId_t timer_id, uint32_t ticks)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
	osTimerStart(timer_id, ticks);
 800d66e:	6839      	ldr	r1, [r7, #0]
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f7fc fdd7 	bl	800a224 <osTimerStart>
}
 800d676:	bf00      	nop
 800d678:	3708      	adds	r7, #8
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop>:
/* Run time environment interface. */
VOID Rte_Call_OsTimer_R_OsTimerPort_OsTimerStop(osTimerId_t timer_id)
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b082      	sub	sp, #8
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
	osTimerStop(timer_id);
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7fc fdfa 	bl	800a280 <osTimerStop>
}
 800d68c:	bf00      	nop
 800d68e:	3708      	adds	r7, #8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <Rte_Runnable_DiagCtrl_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_DiagCtrl_MainFunction()
{
 800d694:	b580      	push	{r7, lr}
 800d696:	af00      	add	r7, sp, #0
	DiagCtrl_MainFunction();
 800d698:	f7f3 ff44 	bl	8001524 <DiagCtrl_MainFunction>
}
 800d69c:	bf00      	nop
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <Rte_Runnable_Pdc_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Pdc_MainFunction()
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	af00      	add	r7, sp, #0
	Pdc_MainFunction();
 800d6a4:	f7f4 fb9c 	bl	8001de0 <Pdc_MainFunction>
}
 800d6a8:	bf00      	nop
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <Rte_Runnable_Dem_MainFunction>:
/* Run time environment interface. */
VOID Rte_Runnable_Dem_MainFunction()
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	af00      	add	r7, sp, #0
	Dem_MainFunction();
 800d6b0:	f7f6 f939 	bl	8003926 <Dem_MainFunction>
}
 800d6b4:	bf00      	nop
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <Crc_VerifyUartData>:
/***********************************************************************************
* Function: Crc_VerifyUartData													   *
* Description: Verifies the UART data received.							 		   *
************************************************************************************/
StdReturnType Crc_VerifyUartData()
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
	/* Local variable to store return value. */
	uint8 returnValue = E_NOT_OK;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	73fb      	strb	r3, [r7, #15]
	/* Local variable to store received value. */
	uint8 receivedValue = STD_LOW;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	71fb      	strb	r3, [r7, #7]
	/* Local value to calculate CRC. */
	uint32 calculatedCrc = STD_LOW;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	60bb      	str	r3, [r7, #8]
	/* Read the received data from UART. */
	Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth(&receivedValue);
 800d6ca:	1dfb      	adds	r3, r7, #7
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7ff ffa7 	bl	800d620 <Rte_Read_Btc_BtcPort_Btc_ReceivedDataOnBluetooth>
	Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 800d6d2:	4ba6      	ldr	r3, [pc, #664]	; (800d96c <Crc_VerifyUartData+0x2b4>)
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	701a      	strb	r2, [r3, #0]
	/* Calculate the CRC. */
	calculatedCrc = HAL_CRC_Calculate(&hcrc, (uint32*)&receivedValue, 1);
 800d6d8:	1dfb      	adds	r3, r7, #7
 800d6da:	2201      	movs	r2, #1
 800d6dc:	4619      	mov	r1, r3
 800d6de:	48a4      	ldr	r0, [pc, #656]	; (800d970 <Crc_VerifyUartData+0x2b8>)
 800d6e0:	f7f7 f98d 	bl	80049fe <HAL_CRC_Calculate>
 800d6e4:	60b8      	str	r0, [r7, #8]
	/* Check the value if it has correct CRC. */
	switch(receivedValue)
 800d6e6:	79fb      	ldrb	r3, [r7, #7]
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	2b19      	cmp	r3, #25
 800d6ec:	f200 8175 	bhi.w	800d9da <Crc_VerifyUartData+0x322>
 800d6f0:	a201      	add	r2, pc, #4	; (adr r2, 800d6f8 <Crc_VerifyUartData+0x40>)
 800d6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f6:	bf00      	nop
 800d6f8:	0800d7e5 	.word	0x0800d7e5
 800d6fc:	0800d7fb 	.word	0x0800d7fb
 800d700:	0800d811 	.word	0x0800d811
 800d704:	0800d827 	.word	0x0800d827
 800d708:	0800d9db 	.word	0x0800d9db
 800d70c:	0800d9db 	.word	0x0800d9db
 800d710:	0800d83d 	.word	0x0800d83d
 800d714:	0800d853 	.word	0x0800d853
 800d718:	0800d869 	.word	0x0800d869
 800d71c:	0800d87f 	.word	0x0800d87f
 800d720:	0800d895 	.word	0x0800d895
 800d724:	0800d8ab 	.word	0x0800d8ab
 800d728:	0800d8c1 	.word	0x0800d8c1
 800d72c:	0800d8d7 	.word	0x0800d8d7
 800d730:	0800d8ed 	.word	0x0800d8ed
 800d734:	0800d903 	.word	0x0800d903
 800d738:	0800d919 	.word	0x0800d919
 800d73c:	0800d92f 	.word	0x0800d92f
 800d740:	0800d945 	.word	0x0800d945
 800d744:	0800d95b 	.word	0x0800d95b
 800d748:	0800d761 	.word	0x0800d761
 800d74c:	0800d777 	.word	0x0800d777
 800d750:	0800d78d 	.word	0x0800d78d
 800d754:	0800d7a3 	.word	0x0800d7a3
 800d758:	0800d7b9 	.word	0x0800d7b9
 800d75c:	0800d7cf 	.word	0x0800d7cf
	{
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_On)
 800d760:	4b84      	ldr	r3, [pc, #528]	; (800d974 <Crc_VerifyUartData+0x2bc>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	68ba      	ldr	r2, [r7, #8]
 800d766:	429a      	cmp	r2, r3
 800d768:	d102      	bne.n	800d770 <Crc_VerifyUartData+0xb8>
			{
				returnValue = E_OK;
 800d76a:	2300      	movs	r3, #0
 800d76c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d76e:	e135      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d770:	2301      	movs	r3, #1
 800d772:	73fb      	strb	r3, [r7, #15]
			break;
 800d774:	e132      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_ReverseLight_Off)
 800d776:	4b80      	ldr	r3, [pc, #512]	; (800d978 <Crc_VerifyUartData+0x2c0>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	68ba      	ldr	r2, [r7, #8]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d102      	bne.n	800d786 <Crc_VerifyUartData+0xce>
			{
				returnValue = E_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d784:	e12a      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d786:	2301      	movs	r3, #1
 800d788:	73fb      	strb	r3, [r7, #15]
			break;
 800d78a:	e127      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO:
			if(calculatedCrc == Crc_ExtLights_PositionZero)
 800d78c:	4b7b      	ldr	r3, [pc, #492]	; (800d97c <Crc_VerifyUartData+0x2c4>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	68ba      	ldr	r2, [r7, #8]
 800d792:	429a      	cmp	r2, r3
 800d794:	d102      	bne.n	800d79c <Crc_VerifyUartData+0xe4>
			{
				returnValue = E_OK;
 800d796:	2300      	movs	r3, #0
 800d798:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d79a:	e11f      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d79c:	2301      	movs	r3, #1
 800d79e:	73fb      	strb	r3, [r7, #15]
			break;
 800d7a0:	e11c      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS:
			if(calculatedCrc == Crc_ExtLights_AutomaticLights)
 800d7a2:	4b77      	ldr	r3, [pc, #476]	; (800d980 <Crc_VerifyUartData+0x2c8>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	68ba      	ldr	r2, [r7, #8]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d102      	bne.n	800d7b2 <Crc_VerifyUartData+0xfa>
			{
				returnValue = E_OK;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d7b0:	e114      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	73fb      	strb	r3, [r7, #15]
			break;
 800d7b6:	e111      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS:
			if(calculatedCrc == Crc_ExtLights_PositionLights)
 800d7b8:	4b72      	ldr	r3, [pc, #456]	; (800d984 <Crc_VerifyUartData+0x2cc>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	68ba      	ldr	r2, [r7, #8]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d102      	bne.n	800d7c8 <Crc_VerifyUartData+0x110>
			{
				returnValue = E_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d7c6:	e109      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	73fb      	strb	r3, [r7, #15]
			break;
 800d7cc:	e106      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS:
			if(calculatedCrc == Crc_ExtLights_NightTimeLights)
 800d7ce:	4b6e      	ldr	r3, [pc, #440]	; (800d988 <Crc_VerifyUartData+0x2d0>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	68ba      	ldr	r2, [r7, #8]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d102      	bne.n	800d7de <Crc_VerifyUartData+0x126>
			{
				returnValue = E_OK;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d7dc:	e0fe      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	73fb      	strb	r3, [r7, #15]
			break;
 800d7e2:	e0fb      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_CENLOC_ON:
			if(calculatedCrc == Crc_CenLoc_On)
 800d7e4:	4b69      	ldr	r3, [pc, #420]	; (800d98c <Crc_VerifyUartData+0x2d4>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d102      	bne.n	800d7f4 <Crc_VerifyUartData+0x13c>
			{
				returnValue = E_OK;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d7f2:	e0f3      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	73fb      	strb	r3, [r7, #15]
			break;
 800d7f8:	e0f0      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_CENLOC_OFF:
			if(calculatedCrc == Crc_CenLoc_Off)
 800d7fa:	4b65      	ldr	r3, [pc, #404]	; (800d990 <Crc_VerifyUartData+0x2d8>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68ba      	ldr	r2, [r7, #8]
 800d800:	429a      	cmp	r2, r3
 800d802:	d102      	bne.n	800d80a <Crc_VerifyUartData+0x152>
			{
				returnValue = E_OK;
 800d804:	2300      	movs	r3, #0
 800d806:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d808:	e0e8      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d80a:	2301      	movs	r3, #1
 800d80c:	73fb      	strb	r3, [r7, #15]
			break;
 800d80e:	e0e5      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON:
			if(calculatedCrc == Crc_ExtLights_HighBeam_On)
 800d810:	4b60      	ldr	r3, [pc, #384]	; (800d994 <Crc_VerifyUartData+0x2dc>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	68ba      	ldr	r2, [r7, #8]
 800d816:	429a      	cmp	r2, r3
 800d818:	d102      	bne.n	800d820 <Crc_VerifyUartData+0x168>
			{
				returnValue = E_OK;
 800d81a:	2300      	movs	r3, #0
 800d81c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d81e:	e0dd      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d820:	2301      	movs	r3, #1
 800d822:	73fb      	strb	r3, [r7, #15]
			break;
 800d824:	e0da      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF:
			if(calculatedCrc == Crc_ExtLights_HighBeam_Off)
 800d826:	4b5c      	ldr	r3, [pc, #368]	; (800d998 <Crc_VerifyUartData+0x2e0>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	68ba      	ldr	r2, [r7, #8]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d102      	bne.n	800d836 <Crc_VerifyUartData+0x17e>
			{
				returnValue = E_OK;
 800d830:	2300      	movs	r3, #0
 800d832:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d834:	e0d2      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d836:	2301      	movs	r3, #1
 800d838:	73fb      	strb	r3, [r7, #15]
			break;
 800d83a:	e0cf      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_On)
 800d83c:	4b57      	ldr	r3, [pc, #348]	; (800d99c <Crc_VerifyUartData+0x2e4>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	68ba      	ldr	r2, [r7, #8]
 800d842:	429a      	cmp	r2, r3
 800d844:	d102      	bne.n	800d84c <Crc_VerifyUartData+0x194>
			{
				returnValue = E_OK;
 800d846:	2300      	movs	r3, #0
 800d848:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d84a:	e0c7      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d84c:	2301      	movs	r3, #1
 800d84e:	73fb      	strb	r3, [r7, #15]
			break;
 800d850:	e0c4      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalLeft_Off)
 800d852:	4b53      	ldr	r3, [pc, #332]	; (800d9a0 <Crc_VerifyUartData+0x2e8>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	68ba      	ldr	r2, [r7, #8]
 800d858:	429a      	cmp	r2, r3
 800d85a:	d102      	bne.n	800d862 <Crc_VerifyUartData+0x1aa>
			{
				returnValue = E_OK;
 800d85c:	2300      	movs	r3, #0
 800d85e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d860:	e0bc      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d862:	2301      	movs	r3, #1
 800d864:	73fb      	strb	r3, [r7, #15]
			break;
 800d866:	e0b9      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_On)
 800d868:	4b4e      	ldr	r3, [pc, #312]	; (800d9a4 <Crc_VerifyUartData+0x2ec>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	68ba      	ldr	r2, [r7, #8]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d102      	bne.n	800d878 <Crc_VerifyUartData+0x1c0>
			{
				returnValue = E_OK;
 800d872:	2300      	movs	r3, #0
 800d874:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d876:	e0b1      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d878:	2301      	movs	r3, #1
 800d87a:	73fb      	strb	r3, [r7, #15]
			break;
 800d87c:	e0ae      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_TurnSignalRight_Off)
 800d87e:	4b4a      	ldr	r3, [pc, #296]	; (800d9a8 <Crc_VerifyUartData+0x2f0>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	68ba      	ldr	r2, [r7, #8]
 800d884:	429a      	cmp	r2, r3
 800d886:	d102      	bne.n	800d88e <Crc_VerifyUartData+0x1d6>
			{
				returnValue = E_OK;
 800d888:	2300      	movs	r3, #0
 800d88a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d88c:	e0a6      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d88e:	2301      	movs	r3, #1
 800d890:	73fb      	strb	r3, [r7, #15]
			break;
 800d892:	e0a3      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON:
			if(calculatedCrc == Crc_ExtLights_HazardLight_On)
 800d894:	4b45      	ldr	r3, [pc, #276]	; (800d9ac <Crc_VerifyUartData+0x2f4>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	68ba      	ldr	r2, [r7, #8]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d102      	bne.n	800d8a4 <Crc_VerifyUartData+0x1ec>
			{
				returnValue = E_OK;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d8a2:	e09b      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	73fb      	strb	r3, [r7, #15]
			break;
 800d8a8:	e098      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF:
			if(calculatedCrc == Crc_ExtLights_HazardLight_Off)
 800d8aa:	4b41      	ldr	r3, [pc, #260]	; (800d9b0 <Crc_VerifyUartData+0x2f8>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	68ba      	ldr	r2, [r7, #8]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d102      	bne.n	800d8ba <Crc_VerifyUartData+0x202>
			{
				returnValue = E_OK;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d8b8:	e090      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	73fb      	strb	r3, [r7, #15]
			break;
 800d8be:	e08d      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_On)
 800d8c0:	4b3c      	ldr	r3, [pc, #240]	; (800d9b4 <Crc_VerifyUartData+0x2fc>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	68ba      	ldr	r2, [r7, #8]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d102      	bne.n	800d8d0 <Crc_VerifyUartData+0x218>
			{
				returnValue = E_OK;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d8ce:	e085      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	73fb      	strb	r3, [r7, #15]
			break;
 800d8d4:	e082      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightFront_Off)
 800d8d6:	4b38      	ldr	r3, [pc, #224]	; (800d9b8 <Crc_VerifyUartData+0x300>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	68ba      	ldr	r2, [r7, #8]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d102      	bne.n	800d8e6 <Crc_VerifyUartData+0x22e>
			{
				returnValue = E_OK;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d8e4:	e07a      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	73fb      	strb	r3, [r7, #15]
			break;
 800d8ea:	e077      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_On)
 800d8ec:	4b33      	ldr	r3, [pc, #204]	; (800d9bc <Crc_VerifyUartData+0x304>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	68ba      	ldr	r2, [r7, #8]
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d102      	bne.n	800d8fc <Crc_VerifyUartData+0x244>
			{
				returnValue = E_OK;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d8fa:	e06f      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	73fb      	strb	r3, [r7, #15]
			break;
 800d900:	e06c      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF:
			if(calculatedCrc == Crc_ExtLights_FogLightRear_Off)
 800d902:	4b2f      	ldr	r3, [pc, #188]	; (800d9c0 <Crc_VerifyUartData+0x308>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	68ba      	ldr	r2, [r7, #8]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d102      	bne.n	800d912 <Crc_VerifyUartData+0x25a>
			{
				returnValue = E_OK;
 800d90c:	2300      	movs	r3, #0
 800d90e:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d910:	e064      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d912:	2301      	movs	r3, #1
 800d914:	73fb      	strb	r3, [r7, #15]
			break;
 800d916:	e061      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_On)
 800d918:	4b2a      	ldr	r3, [pc, #168]	; (800d9c4 <Crc_VerifyUartData+0x30c>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	68ba      	ldr	r2, [r7, #8]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d102      	bne.n	800d928 <Crc_VerifyUartData+0x270>
			{
				returnValue = E_OK;
 800d922:	2300      	movs	r3, #0
 800d924:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d926:	e059      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d928:	2301      	movs	r3, #1
 800d92a:	73fb      	strb	r3, [r7, #15]
			break;
 800d92c:	e056      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF:
			if(calculatedCrc == Crc_ExtLights_BrakeLight_Off)
 800d92e:	4b26      	ldr	r3, [pc, #152]	; (800d9c8 <Crc_VerifyUartData+0x310>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	68ba      	ldr	r2, [r7, #8]
 800d934:	429a      	cmp	r2, r3
 800d936:	d102      	bne.n	800d93e <Crc_VerifyUartData+0x286>
			{
				returnValue = E_OK;
 800d938:	2300      	movs	r3, #0
 800d93a:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d93c:	e04e      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d93e:	2301      	movs	r3, #1
 800d940:	73fb      	strb	r3, [r7, #15]
			break;
 800d942:	e04b      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON:
			if(calculatedCrc == Crc_IntLights_InteriorLight_On)
 800d944:	4b21      	ldr	r3, [pc, #132]	; (800d9cc <Crc_VerifyUartData+0x314>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	68ba      	ldr	r2, [r7, #8]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d102      	bne.n	800d954 <Crc_VerifyUartData+0x29c>
			{
				returnValue = E_OK;
 800d94e:	2300      	movs	r3, #0
 800d950:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d952:	e043      	b.n	800d9dc <Crc_VerifyUartData+0x324>
				returnValue = E_NOT_OK;
 800d954:	2301      	movs	r3, #1
 800d956:	73fb      	strb	r3, [r7, #15]
			break;
 800d958:	e040      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		case RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF:
			if(calculatedCrc == Crc_IntLights_InteriorLights_Off)
 800d95a:	4b1d      	ldr	r3, [pc, #116]	; (800d9d0 <Crc_VerifyUartData+0x318>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	68ba      	ldr	r2, [r7, #8]
 800d960:	429a      	cmp	r2, r3
 800d962:	d137      	bne.n	800d9d4 <Crc_VerifyUartData+0x31c>
			{
				returnValue = E_OK;
 800d964:	2300      	movs	r3, #0
 800d966:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				returnValue = E_NOT_OK;
			}
			break;
 800d968:	e038      	b.n	800d9dc <Crc_VerifyUartData+0x324>
 800d96a:	bf00      	nop
 800d96c:	2000a4a0 	.word	0x2000a4a0
 800d970:	200001f0 	.word	0x200001f0
 800d974:	2000a4dc 	.word	0x2000a4dc
 800d978:	2000a4e0 	.word	0x2000a4e0
 800d97c:	2000a4e4 	.word	0x2000a4e4
 800d980:	2000a4e8 	.word	0x2000a4e8
 800d984:	2000a4ec 	.word	0x2000a4ec
 800d988:	2000a4f0 	.word	0x2000a4f0
 800d98c:	2000a4a4 	.word	0x2000a4a4
 800d990:	2000a4a8 	.word	0x2000a4a8
 800d994:	2000a4ac 	.word	0x2000a4ac
 800d998:	2000a4b0 	.word	0x2000a4b0
 800d99c:	2000a4b4 	.word	0x2000a4b4
 800d9a0:	2000a4b8 	.word	0x2000a4b8
 800d9a4:	2000a4bc 	.word	0x2000a4bc
 800d9a8:	2000a4c0 	.word	0x2000a4c0
 800d9ac:	2000a4c4 	.word	0x2000a4c4
 800d9b0:	2000a4c8 	.word	0x2000a4c8
 800d9b4:	2000a4cc 	.word	0x2000a4cc
 800d9b8:	2000a4d0 	.word	0x2000a4d0
 800d9bc:	2000a4fc 	.word	0x2000a4fc
 800d9c0:	2000a500 	.word	0x2000a500
 800d9c4:	2000a4d4 	.word	0x2000a4d4
 800d9c8:	2000a4d8 	.word	0x2000a4d8
 800d9cc:	2000a4f4 	.word	0x2000a4f4
 800d9d0:	2000a4f8 	.word	0x2000a4f8
				returnValue = E_NOT_OK;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	73fb      	strb	r3, [r7, #15]
			break;
 800d9d8:	e000      	b.n	800d9dc <Crc_VerifyUartData+0x324>
		default:
			break;
 800d9da:	bf00      	nop
	}
	return returnValue;
 800d9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3710      	adds	r7, #16
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop

0800d9e8 <Crc_InitCrcValuesForUart>:
/***********************************************************************************
* Function: Crc_InitCrcValuesForUart									   		   *
* Description: Initialize the CRC default values for UART data.			 		   *
************************************************************************************/
VOID Crc_InitCrcValuesForUart()
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
	/* Local variable to store default value of possible
	 * received data from UART. */
	uint32 value = 0;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	607b      	str	r3, [r7, #4]
	/* Calculate CRC for each defined bluetooth command. */
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_ON;
 800d9f2:	230f      	movs	r3, #15
 800d9f4:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800d9f6:	1d3b      	adds	r3, r7, #4
 800d9f8:	2201      	movs	r2, #1
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	4883      	ldr	r0, [pc, #524]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800d9fe:	f7f6 fffe 	bl	80049fe <HAL_CRC_Calculate>
 800da02:	4603      	mov	r3, r0
 800da04:	4a82      	ldr	r2, [pc, #520]	; (800dc10 <Crc_InitCrcValuesForUart+0x228>)
 800da06:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTREAR_OFF;
 800da08:	2310      	movs	r3, #16
 800da0a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightRear_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800da0c:	1d3b      	adds	r3, r7, #4
 800da0e:	2201      	movs	r2, #1
 800da10:	4619      	mov	r1, r3
 800da12:	487e      	ldr	r0, [pc, #504]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800da14:	f7f6 fff3 	bl	80049fe <HAL_CRC_Calculate>
 800da18:	4603      	mov	r3, r0
 800da1a:	4a7e      	ldr	r2, [pc, #504]	; (800dc14 <Crc_InitCrcValuesForUart+0x22c>)
 800da1c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_ON;
 800da1e:	2301      	movs	r3, #1
 800da20:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800da22:	1d3b      	adds	r3, r7, #4
 800da24:	2201      	movs	r2, #1
 800da26:	4619      	mov	r1, r3
 800da28:	4878      	ldr	r0, [pc, #480]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800da2a:	f7f6 ffe8 	bl	80049fe <HAL_CRC_Calculate>
 800da2e:	4603      	mov	r3, r0
 800da30:	4a79      	ldr	r2, [pc, #484]	; (800dc18 <Crc_InitCrcValuesForUart+0x230>)
 800da32:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_CENLOC_OFF;
 800da34:	2302      	movs	r3, #2
 800da36:	607b      	str	r3, [r7, #4]
	Crc_CenLoc_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800da38:	1d3b      	adds	r3, r7, #4
 800da3a:	2201      	movs	r2, #1
 800da3c:	4619      	mov	r1, r3
 800da3e:	4873      	ldr	r0, [pc, #460]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800da40:	f7f6 ffdd 	bl	80049fe <HAL_CRC_Calculate>
 800da44:	4603      	mov	r3, r0
 800da46:	4a75      	ldr	r2, [pc, #468]	; (800dc1c <Crc_InitCrcValuesForUart+0x234>)
 800da48:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_ON;
 800da4a:	2303      	movs	r3, #3
 800da4c:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800da4e:	1d3b      	adds	r3, r7, #4
 800da50:	2201      	movs	r2, #1
 800da52:	4619      	mov	r1, r3
 800da54:	486d      	ldr	r0, [pc, #436]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800da56:	f7f6 ffd2 	bl	80049fe <HAL_CRC_Calculate>
 800da5a:	4603      	mov	r3, r0
 800da5c:	4a70      	ldr	r2, [pc, #448]	; (800dc20 <Crc_InitCrcValuesForUart+0x238>)
 800da5e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HIGHBEAM_OFF;
 800da60:	2304      	movs	r3, #4
 800da62:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HighBeam_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800da64:	1d3b      	adds	r3, r7, #4
 800da66:	2201      	movs	r2, #1
 800da68:	4619      	mov	r1, r3
 800da6a:	4868      	ldr	r0, [pc, #416]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800da6c:	f7f6 ffc7 	bl	80049fe <HAL_CRC_Calculate>
 800da70:	4603      	mov	r3, r0
 800da72:	4a6c      	ldr	r2, [pc, #432]	; (800dc24 <Crc_InitCrcValuesForUart+0x23c>)
 800da74:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_ON;
 800da76:	2307      	movs	r3, #7
 800da78:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800da7a:	1d3b      	adds	r3, r7, #4
 800da7c:	2201      	movs	r2, #1
 800da7e:	4619      	mov	r1, r3
 800da80:	4862      	ldr	r0, [pc, #392]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800da82:	f7f6 ffbc 	bl	80049fe <HAL_CRC_Calculate>
 800da86:	4603      	mov	r3, r0
 800da88:	4a67      	ldr	r2, [pc, #412]	; (800dc28 <Crc_InitCrcValuesForUart+0x240>)
 800da8a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALLEFT_OFF;
 800da8c:	2308      	movs	r3, #8
 800da8e:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalLeft_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800da90:	1d3b      	adds	r3, r7, #4
 800da92:	2201      	movs	r2, #1
 800da94:	4619      	mov	r1, r3
 800da96:	485d      	ldr	r0, [pc, #372]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800da98:	f7f6 ffb1 	bl	80049fe <HAL_CRC_Calculate>
 800da9c:	4603      	mov	r3, r0
 800da9e:	4a63      	ldr	r2, [pc, #396]	; (800dc2c <Crc_InitCrcValuesForUart+0x244>)
 800daa0:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_ON;
 800daa2:	2309      	movs	r3, #9
 800daa4:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800daa6:	1d3b      	adds	r3, r7, #4
 800daa8:	2201      	movs	r2, #1
 800daaa:	4619      	mov	r1, r3
 800daac:	4857      	ldr	r0, [pc, #348]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800daae:	f7f6 ffa6 	bl	80049fe <HAL_CRC_Calculate>
 800dab2:	4603      	mov	r3, r0
 800dab4:	4a5e      	ldr	r2, [pc, #376]	; (800dc30 <Crc_InitCrcValuesForUart+0x248>)
 800dab6:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_TURNSIGNALRIGHT_OFF;
 800dab8:	230a      	movs	r3, #10
 800daba:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_TurnSignalRight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dabc:	1d3b      	adds	r3, r7, #4
 800dabe:	2201      	movs	r2, #1
 800dac0:	4619      	mov	r1, r3
 800dac2:	4852      	ldr	r0, [pc, #328]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800dac4:	f7f6 ff9b 	bl	80049fe <HAL_CRC_Calculate>
 800dac8:	4603      	mov	r3, r0
 800daca:	4a5a      	ldr	r2, [pc, #360]	; (800dc34 <Crc_InitCrcValuesForUart+0x24c>)
 800dacc:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_ON;
 800dace:	230b      	movs	r3, #11
 800dad0:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dad2:	1d3b      	adds	r3, r7, #4
 800dad4:	2201      	movs	r2, #1
 800dad6:	4619      	mov	r1, r3
 800dad8:	484c      	ldr	r0, [pc, #304]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800dada:	f7f6 ff90 	bl	80049fe <HAL_CRC_Calculate>
 800dade:	4603      	mov	r3, r0
 800dae0:	4a55      	ldr	r2, [pc, #340]	; (800dc38 <Crc_InitCrcValuesForUart+0x250>)
 800dae2:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_HAZARDLIGHT_OFF;
 800dae4:	230c      	movs	r3, #12
 800dae6:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_HazardLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dae8:	1d3b      	adds	r3, r7, #4
 800daea:	2201      	movs	r2, #1
 800daec:	4619      	mov	r1, r3
 800daee:	4847      	ldr	r0, [pc, #284]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800daf0:	f7f6 ff85 	bl	80049fe <HAL_CRC_Calculate>
 800daf4:	4603      	mov	r3, r0
 800daf6:	4a51      	ldr	r2, [pc, #324]	; (800dc3c <Crc_InitCrcValuesForUart+0x254>)
 800daf8:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_ON;
 800dafa:	230d      	movs	r3, #13
 800dafc:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dafe:	1d3b      	adds	r3, r7, #4
 800db00:	2201      	movs	r2, #1
 800db02:	4619      	mov	r1, r3
 800db04:	4841      	ldr	r0, [pc, #260]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800db06:	f7f6 ff7a 	bl	80049fe <HAL_CRC_Calculate>
 800db0a:	4603      	mov	r3, r0
 800db0c:	4a4c      	ldr	r2, [pc, #304]	; (800dc40 <Crc_InitCrcValuesForUart+0x258>)
 800db0e:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_FOGLIGHTFRONT_OFF;
 800db10:	230e      	movs	r3, #14
 800db12:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_FogLightFront_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800db14:	1d3b      	adds	r3, r7, #4
 800db16:	2201      	movs	r2, #1
 800db18:	4619      	mov	r1, r3
 800db1a:	483c      	ldr	r0, [pc, #240]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800db1c:	f7f6 ff6f 	bl	80049fe <HAL_CRC_Calculate>
 800db20:	4603      	mov	r3, r0
 800db22:	4a48      	ldr	r2, [pc, #288]	; (800dc44 <Crc_InitCrcValuesForUart+0x25c>)
 800db24:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTON;
 800db26:	2311      	movs	r3, #17
 800db28:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800db2a:	1d3b      	adds	r3, r7, #4
 800db2c:	2201      	movs	r2, #1
 800db2e:	4619      	mov	r1, r3
 800db30:	4836      	ldr	r0, [pc, #216]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800db32:	f7f6 ff64 	bl	80049fe <HAL_CRC_Calculate>
 800db36:	4603      	mov	r3, r0
 800db38:	4a43      	ldr	r2, [pc, #268]	; (800dc48 <Crc_InitCrcValuesForUart+0x260>)
 800db3a:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_BRAKELIGHTOFF;
 800db3c:	2312      	movs	r3, #18
 800db3e:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_BrakeLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800db40:	1d3b      	adds	r3, r7, #4
 800db42:	2201      	movs	r2, #1
 800db44:	4619      	mov	r1, r3
 800db46:	4831      	ldr	r0, [pc, #196]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800db48:	f7f6 ff59 	bl	80049fe <HAL_CRC_Calculate>
 800db4c:	4603      	mov	r3, r0
 800db4e:	4a3f      	ldr	r2, [pc, #252]	; (800dc4c <Crc_InitCrcValuesForUart+0x264>)
 800db50:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_ON;
 800db52:	2315      	movs	r3, #21
 800db54:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800db56:	1d3b      	adds	r3, r7, #4
 800db58:	2201      	movs	r2, #1
 800db5a:	4619      	mov	r1, r3
 800db5c:	482b      	ldr	r0, [pc, #172]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800db5e:	f7f6 ff4e 	bl	80049fe <HAL_CRC_Calculate>
 800db62:	4603      	mov	r3, r0
 800db64:	4a3a      	ldr	r2, [pc, #232]	; (800dc50 <Crc_InitCrcValuesForUart+0x268>)
 800db66:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_REVERSELIGHT_OFF;
 800db68:	2316      	movs	r3, #22
 800db6a:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_ReverseLight_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800db6c:	1d3b      	adds	r3, r7, #4
 800db6e:	2201      	movs	r2, #1
 800db70:	4619      	mov	r1, r3
 800db72:	4826      	ldr	r0, [pc, #152]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800db74:	f7f6 ff43 	bl	80049fe <HAL_CRC_Calculate>
 800db78:	4603      	mov	r3, r0
 800db7a:	4a36      	ldr	r2, [pc, #216]	; (800dc54 <Crc_InitCrcValuesForUart+0x26c>)
 800db7c:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONZERO;
 800db7e:	2317      	movs	r3, #23
 800db80:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionZero = HAL_CRC_Calculate(&hcrc, &value, 1);
 800db82:	1d3b      	adds	r3, r7, #4
 800db84:	2201      	movs	r2, #1
 800db86:	4619      	mov	r1, r3
 800db88:	4820      	ldr	r0, [pc, #128]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800db8a:	f7f6 ff38 	bl	80049fe <HAL_CRC_Calculate>
 800db8e:	4603      	mov	r3, r0
 800db90:	4a31      	ldr	r2, [pc, #196]	; (800dc58 <Crc_InitCrcValuesForUart+0x270>)
 800db92:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_AUTOMATICLIGHTS;
 800db94:	2318      	movs	r3, #24
 800db96:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_AutomaticLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800db98:	1d3b      	adds	r3, r7, #4
 800db9a:	2201      	movs	r2, #1
 800db9c:	4619      	mov	r1, r3
 800db9e:	481b      	ldr	r0, [pc, #108]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800dba0:	f7f6 ff2d 	bl	80049fe <HAL_CRC_Calculate>
 800dba4:	4603      	mov	r3, r0
 800dba6:	4a2d      	ldr	r2, [pc, #180]	; (800dc5c <Crc_InitCrcValuesForUart+0x274>)
 800dba8:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_POSITIONLIGHTS;
 800dbaa:	2319      	movs	r3, #25
 800dbac:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_PositionLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dbae:	1d3b      	adds	r3, r7, #4
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	4815      	ldr	r0, [pc, #84]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800dbb6:	f7f6 ff22 	bl	80049fe <HAL_CRC_Calculate>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	4a28      	ldr	r2, [pc, #160]	; (800dc60 <Crc_InitCrcValuesForUart+0x278>)
 800dbbe:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_EXTLIGHTS_NIGHTTIMELIGHTS;
 800dbc0:	231a      	movs	r3, #26
 800dbc2:	607b      	str	r3, [r7, #4]
	Crc_ExtLights_NightTimeLights = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dbc4:	1d3b      	adds	r3, r7, #4
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	4619      	mov	r1, r3
 800dbca:	4810      	ldr	r0, [pc, #64]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800dbcc:	f7f6 ff17 	bl	80049fe <HAL_CRC_Calculate>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	4a24      	ldr	r2, [pc, #144]	; (800dc64 <Crc_InitCrcValuesForUart+0x27c>)
 800dbd4:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_ON;
 800dbd6:	2313      	movs	r3, #19
 800dbd8:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLight_On = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dbda:	1d3b      	adds	r3, r7, #4
 800dbdc:	2201      	movs	r2, #1
 800dbde:	4619      	mov	r1, r3
 800dbe0:	480a      	ldr	r0, [pc, #40]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800dbe2:	f7f6 ff0c 	bl	80049fe <HAL_CRC_Calculate>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	4a1f      	ldr	r2, [pc, #124]	; (800dc68 <Crc_InitCrcValuesForUart+0x280>)
 800dbea:	6013      	str	r3, [r2, #0]
	value = RTE_P_BTC_RX_INTLIGHTS_INTERIORLIGHT_OFF;
 800dbec:	2314      	movs	r3, #20
 800dbee:	607b      	str	r3, [r7, #4]
	Crc_IntLights_InteriorLights_Off = HAL_CRC_Calculate(&hcrc, &value, 1);
 800dbf0:	1d3b      	adds	r3, r7, #4
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	4805      	ldr	r0, [pc, #20]	; (800dc0c <Crc_InitCrcValuesForUart+0x224>)
 800dbf8:	f7f6 ff01 	bl	80049fe <HAL_CRC_Calculate>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	4a1b      	ldr	r2, [pc, #108]	; (800dc6c <Crc_InitCrcValuesForUart+0x284>)
 800dc00:	6013      	str	r3, [r2, #0]
}
 800dc02:	bf00      	nop
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	200001f0 	.word	0x200001f0
 800dc10:	2000a4fc 	.word	0x2000a4fc
 800dc14:	2000a500 	.word	0x2000a500
 800dc18:	2000a4a4 	.word	0x2000a4a4
 800dc1c:	2000a4a8 	.word	0x2000a4a8
 800dc20:	2000a4ac 	.word	0x2000a4ac
 800dc24:	2000a4b0 	.word	0x2000a4b0
 800dc28:	2000a4b4 	.word	0x2000a4b4
 800dc2c:	2000a4b8 	.word	0x2000a4b8
 800dc30:	2000a4bc 	.word	0x2000a4bc
 800dc34:	2000a4c0 	.word	0x2000a4c0
 800dc38:	2000a4c4 	.word	0x2000a4c4
 800dc3c:	2000a4c8 	.word	0x2000a4c8
 800dc40:	2000a4cc 	.word	0x2000a4cc
 800dc44:	2000a4d0 	.word	0x2000a4d0
 800dc48:	2000a4d4 	.word	0x2000a4d4
 800dc4c:	2000a4d8 	.word	0x2000a4d8
 800dc50:	2000a4dc 	.word	0x2000a4dc
 800dc54:	2000a4e0 	.word	0x2000a4e0
 800dc58:	2000a4e4 	.word	0x2000a4e4
 800dc5c:	2000a4e8 	.word	0x2000a4e8
 800dc60:	2000a4ec 	.word	0x2000a4ec
 800dc64:	2000a4f0 	.word	0x2000a4f0
 800dc68:	2000a4f4 	.word	0x2000a4f4
 800dc6c:	2000a4f8 	.word	0x2000a4f8

0800dc70 <HAL_CRC_ErrorCallback>:
/***********************************************************************************
* Function: HAL_CRC_ErrorCallback												   *
* Description: Called in case of error. 								 		   *
************************************************************************************/
VOID HAL_CRC_ErrorCallback(CRC_HandleTypeDef *hcrc)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
	/* Perform re-initialization. */
	Crc_DeInit();
 800dc78:	f000 f81e 	bl	800dcb8 <Crc_DeInit>
	Crc_Init();
 800dc7c:	f000 f804 	bl	800dc88 <Crc_Init>
}
 800dc80:	bf00      	nop
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <Crc_Init>:
/***********************************************************************************
* Function: Crc_Init													   		   *
* Description: Initialize the peripheral.								 		   *
************************************************************************************/
StdReturnType Crc_Init()
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	af00      	add	r7, sp, #0
	/* Initialize the CRC.
	 * Call for the error callback in case of faulty initialization. */
	hcrc.Instance = CRC;
 800dc8c:	4b08      	ldr	r3, [pc, #32]	; (800dcb0 <Crc_Init+0x28>)
 800dc8e:	4a09      	ldr	r2, [pc, #36]	; (800dcb4 <Crc_Init+0x2c>)
 800dc90:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800dc92:	4807      	ldr	r0, [pc, #28]	; (800dcb0 <Crc_Init+0x28>)
 800dc94:	f7f6 fe67 	bl	8004966 <HAL_CRC_Init>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d002      	beq.n	800dca4 <Crc_Init+0x1c>
	{
		HAL_CRC_ErrorCallback(&hcrc);
 800dc9e:	4804      	ldr	r0, [pc, #16]	; (800dcb0 <Crc_Init+0x28>)
 800dca0:	f7ff ffe6 	bl	800dc70 <HAL_CRC_ErrorCallback>
	else
	{
		/* do nothing */
	}
	/* Initialize the default CRC UART data received values. */
	Crc_InitCrcValuesForUart();
 800dca4:	f7ff fea0 	bl	800d9e8 <Crc_InitCrcValuesForUart>
	return E_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	200001f0 	.word	0x200001f0
 800dcb4:	40023000 	.word	0x40023000

0800dcb8 <Crc_DeInit>:
/***********************************************************************************
* Function: Crc_DeInit													   		   *
* Description: De-initialize the peripheral.		 		   					   *
************************************************************************************/
StdReturnType Crc_DeInit()
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	af00      	add	r7, sp, #0
	/* De-initialize the CRC. */
	HAL_CRC_DeInit(&hcrc);
 800dcbc:	4802      	ldr	r0, [pc, #8]	; (800dcc8 <Crc_DeInit+0x10>)
 800dcbe:	f7f6 fe6e 	bl	800499e <HAL_CRC_DeInit>
	return E_OK;
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	200001f0 	.word	0x200001f0

0800dccc <Crc_MainFunction>:
/***********************************************************************************
* Function: Crc_MainFunction													   *
* Description: Peripheral main function.		 		   						   *
************************************************************************************/
VOID Crc_MainFunction()
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
	/* Get the error status in the local variable. */
	uint32 returnValue = HAL_CRC_GetState(&hcrc);
 800dcd2:	4825      	ldr	r0, [pc, #148]	; (800dd68 <Crc_MainFunction+0x9c>)
 800dcd4:	f7f6 fec6 	bl	8004a64 <HAL_CRC_GetState>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	607b      	str	r3, [r7, #4]
	/* Process module state. */
	switch(Crc_BswState)
 800dcdc:	4b23      	ldr	r3, [pc, #140]	; (800dd6c <Crc_MainFunction+0xa0>)
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	2b03      	cmp	r3, #3
 800dce2:	d81a      	bhi.n	800dd1a <Crc_MainFunction+0x4e>
 800dce4:	a201      	add	r2, pc, #4	; (adr r2, 800dcec <Crc_MainFunction+0x20>)
 800dce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcea:	bf00      	nop
 800dcec:	0800dcfd 	.word	0x0800dcfd
 800dcf0:	0800dd1b 	.word	0x0800dd1b
 800dcf4:	0800dd0f 	.word	0x0800dd0f
 800dcf8:	0800dd09 	.word	0x0800dd09
	{
		case CRC_INIT_STATE:
			Crc_Init();
 800dcfc:	f7ff ffc4 	bl	800dc88 <Crc_Init>
			Crc_BswState = CRC_INITCRCVALUES_STATE;
 800dd00:	4b1a      	ldr	r3, [pc, #104]	; (800dd6c <Crc_MainFunction+0xa0>)
 800dd02:	2202      	movs	r2, #2
 800dd04:	701a      	strb	r2, [r3, #0]
			break;
 800dd06:	e009      	b.n	800dd1c <Crc_MainFunction+0x50>
		case CRC_DEINIT_STATE:
			Crc_DeInit();
 800dd08:	f7ff ffd6 	bl	800dcb8 <Crc_DeInit>
			break;
 800dd0c:	e006      	b.n	800dd1c <Crc_MainFunction+0x50>
		case CRC_VERIFYUARTDATA_STATE:
			break;
		case CRC_INITCRCVALUES_STATE:
			Crc_InitCrcValuesForUart();
 800dd0e:	f7ff fe6b 	bl	800d9e8 <Crc_InitCrcValuesForUart>
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 800dd12:	4b16      	ldr	r3, [pc, #88]	; (800dd6c <Crc_MainFunction+0xa0>)
 800dd14:	2201      	movs	r2, #1
 800dd16:	701a      	strb	r2, [r3, #0]
			break;
 800dd18:	e000      	b.n	800dd1c <Crc_MainFunction+0x50>
		default:
			break;
 800dd1a:	bf00      	nop
	}
	/* Process peripheral state. */
	switch(returnValue)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2b04      	cmp	r3, #4
 800dd20:	d81c      	bhi.n	800dd5c <Crc_MainFunction+0x90>
 800dd22:	a201      	add	r2, pc, #4	; (adr r2, 800dd28 <Crc_MainFunction+0x5c>)
 800dd24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd28:	0800dd3d 	.word	0x0800dd3d
 800dd2c:	0800dd45 	.word	0x0800dd45
 800dd30:	0800dd5d 	.word	0x0800dd5d
 800dd34:	0800dd4d 	.word	0x0800dd4d
 800dd38:	0800dd55 	.word	0x0800dd55
	{
		case HAL_CRC_STATE_RESET:
			Crc_BswState = CRC_INIT_STATE;
 800dd3c:	4b0b      	ldr	r3, [pc, #44]	; (800dd6c <Crc_MainFunction+0xa0>)
 800dd3e:	2200      	movs	r2, #0
 800dd40:	701a      	strb	r2, [r3, #0]
			break;
 800dd42:	e00c      	b.n	800dd5e <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_READY:
			Crc_BswState = CRC_VERIFYUARTDATA_STATE;
 800dd44:	4b09      	ldr	r3, [pc, #36]	; (800dd6c <Crc_MainFunction+0xa0>)
 800dd46:	2201      	movs	r2, #1
 800dd48:	701a      	strb	r2, [r3, #0]
			break;
 800dd4a:	e008      	b.n	800dd5e <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_BUSY:
			break;
		case HAL_CRC_STATE_TIMEOUT:
			HAL_CRC_ErrorCallback(&hcrc);
 800dd4c:	4806      	ldr	r0, [pc, #24]	; (800dd68 <Crc_MainFunction+0x9c>)
 800dd4e:	f7ff ff8f 	bl	800dc70 <HAL_CRC_ErrorCallback>
			break;
 800dd52:	e004      	b.n	800dd5e <Crc_MainFunction+0x92>
		case HAL_CRC_STATE_ERROR:
			HAL_CRC_ErrorCallback(&hcrc);
 800dd54:	4804      	ldr	r0, [pc, #16]	; (800dd68 <Crc_MainFunction+0x9c>)
 800dd56:	f7ff ff8b 	bl	800dc70 <HAL_CRC_ErrorCallback>
			break;
 800dd5a:	e000      	b.n	800dd5e <Crc_MainFunction+0x92>
		default:
			break;
 800dd5c:	bf00      	nop
	}
}
 800dd5e:	bf00      	nop
 800dd60:	3708      	adds	r7, #8
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	200001f0 	.word	0x200001f0
 800dd6c:	2000a4a0 	.word	0x2000a4a0

0800dd70 <EcuM_CheckForWakeupEvent>:
/***********************************************************************************
* Function: EcuM_CheckForWakeupEvent									   		   *
* Description: Checks for the wake up event and sends it forward for processing.   *
************************************************************************************/
VOID EcuM_CheckForWakeupEvent()
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	af00      	add	r7, sp, #0
	/* Check if power-on reset wake-up event occurred. */
	if((RCC->CSR & RCC_CSR_PORRSTF) != 0)
 800dd74:	4b27      	ldr	r3, [pc, #156]	; (800de14 <EcuM_CheckForWakeupEvent+0xa4>)
 800dd76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d009      	beq.n	800dd94 <EcuM_CheckForWakeupEvent+0x24>
	{
		/* Set the wake-up event. */
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_POR);
 800dd80:	2000      	movs	r0, #0
 800dd82:	f000 f849 	bl	800de18 <EcuM_SetWakeupSource>
		/* Reset the flag. */
		RCC->CSR |= RCC_CSR_PORRSTF;
 800dd86:	4b23      	ldr	r3, [pc, #140]	; (800de14 <EcuM_CheckForWakeupEvent+0xa4>)
 800dd88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd8a:	4a22      	ldr	r2, [pc, #136]	; (800de14 <EcuM_CheckForWakeupEvent+0xa4>)
 800dd8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dd90:	6753      	str	r3, [r2, #116]	; 0x74
	}/* Check if a button reset wake-up event occurred. */
	else
	{
		/* do nothing */
	}
}
 800dd92:	e03c      	b.n	800de0e <EcuM_CheckForWakeupEvent+0x9e>
	else if((RCC->CSR & RCC_CSR_BORRSTF) != 0)
 800dd94:	4b1f      	ldr	r3, [pc, #124]	; (800de14 <EcuM_CheckForWakeupEvent+0xa4>)
 800dd96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d009      	beq.n	800ddb4 <EcuM_CheckForWakeupEvent+0x44>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_BOR);
 800dda0:	2001      	movs	r0, #1
 800dda2:	f000 f839 	bl	800de18 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_BORRSTF;
 800dda6:	4b1b      	ldr	r3, [pc, #108]	; (800de14 <EcuM_CheckForWakeupEvent+0xa4>)
 800dda8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddaa:	4a1a      	ldr	r2, [pc, #104]	; (800de14 <EcuM_CheckForWakeupEvent+0xa4>)
 800ddac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ddb0:	6753      	str	r3, [r2, #116]	; 0x74
}
 800ddb2:	e02c      	b.n	800de0e <EcuM_CheckForWakeupEvent+0x9e>
	else if((RCC->CSR & RCC_CSR_SFTRSTF) != 0)
 800ddb4:	4b17      	ldr	r3, [pc, #92]	; (800de14 <EcuM_CheckForWakeupEvent+0xa4>)
 800ddb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d009      	beq.n	800ddd4 <EcuM_CheckForWakeupEvent+0x64>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 800ddc0:	2002      	movs	r0, #2
 800ddc2:	f000 f829 	bl	800de18 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_SFTRSTF;
 800ddc6:	4b13      	ldr	r3, [pc, #76]	; (800de14 <EcuM_CheckForWakeupEvent+0xa4>)
 800ddc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddca:	4a12      	ldr	r2, [pc, #72]	; (800de14 <EcuM_CheckForWakeupEvent+0xa4>)
 800ddcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ddd0:	6753      	str	r3, [r2, #116]	; 0x74
}
 800ddd2:	e01c      	b.n	800de0e <EcuM_CheckForWakeupEvent+0x9e>
	else if((RCC->CSR & RCC_CSR_IWDGRSTF) != 0)
 800ddd4:	4b0f      	ldr	r3, [pc, #60]	; (800de14 <EcuM_CheckForWakeupEvent+0xa4>)
 800ddd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d009      	beq.n	800ddf4 <EcuM_CheckForWakeupEvent+0x84>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 800dde0:	2003      	movs	r0, #3
 800dde2:	f000 f819 	bl	800de18 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_IWDGRSTF;
 800dde6:	4b0b      	ldr	r3, [pc, #44]	; (800de14 <EcuM_CheckForWakeupEvent+0xa4>)
 800dde8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddea:	4a0a      	ldr	r2, [pc, #40]	; (800de14 <EcuM_CheckForWakeupEvent+0xa4>)
 800ddec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ddf0:	6753      	str	r3, [r2, #116]	; 0x74
}
 800ddf2:	e00c      	b.n	800de0e <EcuM_CheckForWakeupEvent+0x9e>
	else if((RCC->CSR & RCC_CSR_LPWRRSTF) != 0)
 800ddf4:	4b07      	ldr	r3, [pc, #28]	; (800de14 <EcuM_CheckForWakeupEvent+0xa4>)
 800ddf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	da08      	bge.n	800de0e <EcuM_CheckForWakeupEvent+0x9e>
		EcuM_SetWakeupSource(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 800ddfc:	2004      	movs	r0, #4
 800ddfe:	f000 f80b 	bl	800de18 <EcuM_SetWakeupSource>
		RCC->CSR |= RCC_CSR_LPWRRSTF;
 800de02:	4b04      	ldr	r3, [pc, #16]	; (800de14 <EcuM_CheckForWakeupEvent+0xa4>)
 800de04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de06:	4a03      	ldr	r2, [pc, #12]	; (800de14 <EcuM_CheckForWakeupEvent+0xa4>)
 800de08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de0c:	6753      	str	r3, [r2, #116]	; 0x74
}
 800de0e:	bf00      	nop
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	40023800 	.word	0x40023800

0800de18 <EcuM_SetWakeupSource>:
/***********************************************************************************
* Function: EcuM_SetWakeupSource									   		   	   *
* Description: Sets the wake up source received.			 		   			   *
************************************************************************************/
VOID EcuM_SetWakeupSource(uint32 wakeupSource)
{
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
	/* If wake-up source is valid. */
	if(wakeupSource != NULL_PTR)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d003      	beq.n	800de2e <EcuM_SetWakeupSource+0x16>
	{
		/* Store the wake-up event. */
		EcuM_GlobalState = wakeupSource;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	b2da      	uxtb	r2, r3
 800de2a:	4b04      	ldr	r3, [pc, #16]	; (800de3c <EcuM_SetWakeupSource+0x24>)
 800de2c:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		/* do nothing */
	}
}
 800de2e:	bf00      	nop
 800de30:	370c      	adds	r7, #12
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop
 800de3c:	2000a505 	.word	0x2000a505

0800de40 <EcuM_ProcessWakeupEvent>:
/***********************************************************************************
* Function: EcuM_ProcessWakeupEvent									   		       *
* Description: Sends forward the wake up event.							 		   *
************************************************************************************/
VOID EcuM_ProcessWakeupEvent()
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
	/* Store the wake-up event into local variable. */
	uint8 localWakeupEvent = EcuM_GlobalState;
 800de46:	4b1d      	ldr	r3, [pc, #116]	; (800debc <EcuM_ProcessWakeupEvent+0x7c>)
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	71fb      	strb	r3, [r7, #7]
	/* Set the system fault for the respective wake-up event. */
	switch(localWakeupEvent)
 800de4c:	79fb      	ldrb	r3, [r7, #7]
 800de4e:	2b04      	cmp	r3, #4
 800de50:	d82f      	bhi.n	800deb2 <EcuM_ProcessWakeupEvent+0x72>
 800de52:	a201      	add	r2, pc, #4	; (adr r2, 800de58 <EcuM_ProcessWakeupEvent+0x18>)
 800de54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de58:	0800de6d 	.word	0x0800de6d
 800de5c:	0800de7b 	.word	0x0800de7b
 800de60:	0800de89 	.word	0x0800de89
 800de64:	0800de97 	.word	0x0800de97
 800de68:	0800dea5 	.word	0x0800dea5
	{
		case ECUM_WAKEUPSOURCE_POR:
			EcuM_GlobalState = 255;
 800de6c:	4b13      	ldr	r3, [pc, #76]	; (800debc <EcuM_ProcessWakeupEvent+0x7c>)
 800de6e:	22ff      	movs	r2, #255	; 0xff
 800de70:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_POR);
 800de72:	2000      	movs	r0, #0
 800de74:	f000 f91c 	bl	800e0b0 <SystemManager_SetFault>
			break;
 800de78:	e01c      	b.n	800deb4 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_BOR:
			EcuM_GlobalState = 255;
 800de7a:	4b10      	ldr	r3, [pc, #64]	; (800debc <EcuM_ProcessWakeupEvent+0x7c>)
 800de7c:	22ff      	movs	r2, #255	; 0xff
 800de7e:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_BOR);
 800de80:	2001      	movs	r0, #1
 800de82:	f000 f915 	bl	800e0b0 <SystemManager_SetFault>
			break;
 800de86:	e015      	b.n	800deb4 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_SOFTWARE_RESET:
			EcuM_GlobalState = 255;
 800de88:	4b0c      	ldr	r3, [pc, #48]	; (800debc <EcuM_ProcessWakeupEvent+0x7c>)
 800de8a:	22ff      	movs	r2, #255	; 0xff
 800de8c:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_SOFTWARE_RESET);
 800de8e:	2002      	movs	r0, #2
 800de90:	f000 f90e 	bl	800e0b0 <SystemManager_SetFault>
			break;
 800de94:	e00e      	b.n	800deb4 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET:
			EcuM_GlobalState = 255;
 800de96:	4b09      	ldr	r3, [pc, #36]	; (800debc <EcuM_ProcessWakeupEvent+0x7c>)
 800de98:	22ff      	movs	r2, #255	; 0xff
 800de9a:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_WINDOWED_WATCHDOG_RESET);
 800de9c:	2003      	movs	r0, #3
 800de9e:	f000 f907 	bl	800e0b0 <SystemManager_SetFault>
			break;
 800dea2:	e007      	b.n	800deb4 <EcuM_ProcessWakeupEvent+0x74>
		case ECUM_WAKEUPSOURCE_LOWPOWER_RESET:
			EcuM_GlobalState = 255;
 800dea4:	4b05      	ldr	r3, [pc, #20]	; (800debc <EcuM_ProcessWakeupEvent+0x7c>)
 800dea6:	22ff      	movs	r2, #255	; 0xff
 800dea8:	701a      	strb	r2, [r3, #0]
			SystemManager_SetFault(ECUM_WAKEUPSOURCE_LOWPOWER_RESET);
 800deaa:	2004      	movs	r0, #4
 800deac:	f000 f900 	bl	800e0b0 <SystemManager_SetFault>
			break;
 800deb0:	e000      	b.n	800deb4 <EcuM_ProcessWakeupEvent+0x74>
		default:
			break;
 800deb2:	bf00      	nop
	}
}
 800deb4:	bf00      	nop
 800deb6:	3708      	adds	r7, #8
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}
 800debc:	2000a505 	.word	0x2000a505

0800dec0 <EcuM_DriverInit>:
/***********************************************************************************
* Function: EcuM_DriverInit									   		               *
* Description: Initialize the drivers.			 		   						   *
************************************************************************************/
StdReturnType EcuM_DriverInit()
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	af00      	add	r7, sp, #0
	Port_Init();
 800dec4:	f7fb fad2 	bl	800946c <Port_Init>
	MX_DMA_Init();
 800dec8:	f7f4 fd3a 	bl	8002940 <MX_DMA_Init>
	Tim_Init(TIMER_TWO);
 800decc:	2002      	movs	r0, #2
 800dece:	f7fb fc05 	bl	80096dc <Tim_Init>
	Tim_Init(TIMER_THREE);
 800ded2:	2003      	movs	r0, #3
 800ded4:	f7fb fc02 	bl	80096dc <Tim_Init>
	Tim_Init(TIMER_FOUR);
 800ded8:	2004      	movs	r0, #4
 800deda:	f7fb fbff 	bl	80096dc <Tim_Init>
	Tim_Init(TIMER_FIVE);
 800dede:	2005      	movs	r0, #5
 800dee0:	f7fb fbfc 	bl	80096dc <Tim_Init>
	Adc_Init();
 800dee4:	f7fb fa22 	bl	800932c <Adc_Init>
	Crc_Init();
 800dee8:	f7ff fece 	bl	800dc88 <Crc_Init>
	Uart_Init();
 800deec:	f7f4 fac4 	bl	8002478 <Uart_Init>
	Watchdog_Init();
 800def0:	f000 f9dc 	bl	800e2ac <Watchdog_Init>
	MX_NVIC_Init();
 800def4:	f000 f90c 	bl	800e110 <MX_NVIC_Init>
//	MPU_InitStruct.Number = MPU_REGION_NUMBER3;
//	MPU_InitStruct.BaseAddress = 0x60000000;
//	MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
//	HAL_MPU_ConfigRegion(&MPU_InitStruct);
//	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
	EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 800def8:	4b02      	ldr	r3, [pc, #8]	; (800df04 <EcuM_DriverInit+0x44>)
 800defa:	2201      	movs	r2, #1
 800defc:	701a      	strb	r2, [r3, #0]
	return E_OK;
 800defe:	2300      	movs	r3, #0
}
 800df00:	4618      	mov	r0, r3
 800df02:	bd80      	pop	{r7, pc}
 800df04:	2000a504 	.word	0x2000a504

0800df08 <EcuM_DriverDeInit>:
/***********************************************************************************
* Function: EcuM_DriverDeInit									   		           *
* Description: De-initialize the drivers.			 		                       *
************************************************************************************/
StdReturnType EcuM_DriverDeInit()
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	af00      	add	r7, sp, #0
	Adc_DeInit();
 800df0c:	f7fb fa04 	bl	8009318 <Adc_DeInit>
	Tim_DeInit(TIMER_TWO);
 800df10:	2002      	movs	r0, #2
 800df12:	f7fb fe01 	bl	8009b18 <Tim_DeInit>
	Tim_DeInit(TIMER_THREE);
 800df16:	2003      	movs	r0, #3
 800df18:	f7fb fdfe 	bl	8009b18 <Tim_DeInit>
	Tim_DeInit(TIMER_FOUR);
 800df1c:	2004      	movs	r0, #4
 800df1e:	f7fb fdfb 	bl	8009b18 <Tim_DeInit>
	Tim_DeInit(TIMER_FIVE);
 800df22:	2005      	movs	r0, #5
 800df24:	f7fb fdf8 	bl	8009b18 <Tim_DeInit>
	Uart_DeInit();
 800df28:	f7f4 fad2 	bl	80024d0 <Uart_DeInit>
	Crc_DeInit();
 800df2c:	f7ff fec4 	bl	800dcb8 <Crc_DeInit>
	SystemManager_DeInit();
 800df30:	f000 f8b8 	bl	800e0a4 <SystemManager_DeInit>
	return E_OK;
 800df34:	2300      	movs	r3, #0
}
 800df36:	4618      	mov	r0, r3
 800df38:	bd80      	pop	{r7, pc}
	...

0800df3c <EcuM_MainFunction>:
/***********************************************************************************
* Function: EcuM_MainFunction									   		           *
* Description: Electronic control unit manager main function.			 		   *
************************************************************************************/
VOID EcuM_MainFunction()
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	af00      	add	r7, sp, #0
	switch(EcuM_BswState)
 800df40:	4b12      	ldr	r3, [pc, #72]	; (800df8c <EcuM_MainFunction+0x50>)
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	2b03      	cmp	r3, #3
 800df46:	d81d      	bhi.n	800df84 <EcuM_MainFunction+0x48>
 800df48:	a201      	add	r2, pc, #4	; (adr r2, 800df50 <EcuM_MainFunction+0x14>)
 800df4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df4e:	bf00      	nop
 800df50:	0800df61 	.word	0x0800df61
 800df54:	0800df6d 	.word	0x0800df6d
 800df58:	0800df79 	.word	0x0800df79
 800df5c:	0800df67 	.word	0x0800df67
	{
		case ECUM_INIT_STATE:
			EcuM_DriverInit();
 800df60:	f7ff ffae 	bl	800dec0 <EcuM_DriverInit>
			break;
 800df64:	e00f      	b.n	800df86 <EcuM_MainFunction+0x4a>
		case ECUM_DEINIT_STATE:
			EcuM_DriverDeInit();
 800df66:	f7ff ffcf 	bl	800df08 <EcuM_DriverDeInit>
			break;
 800df6a:	e00c      	b.n	800df86 <EcuM_MainFunction+0x4a>
		case ECUM_CHECKFORWAKEUP_STATE:
			EcuM_CheckForWakeupEvent();
 800df6c:	f7ff ff00 	bl	800dd70 <EcuM_CheckForWakeupEvent>
			EcuM_BswState = ECUM_PROCESSWAKEUP_STATE;
 800df70:	4b06      	ldr	r3, [pc, #24]	; (800df8c <EcuM_MainFunction+0x50>)
 800df72:	2202      	movs	r2, #2
 800df74:	701a      	strb	r2, [r3, #0]
			break;
 800df76:	e006      	b.n	800df86 <EcuM_MainFunction+0x4a>
		case ECUM_PROCESSWAKEUP_STATE:
			EcuM_ProcessWakeupEvent();
 800df78:	f7ff ff62 	bl	800de40 <EcuM_ProcessWakeupEvent>
			EcuM_BswState = ECUM_CHECKFORWAKEUP_STATE;
 800df7c:	4b03      	ldr	r3, [pc, #12]	; (800df8c <EcuM_MainFunction+0x50>)
 800df7e:	2201      	movs	r2, #1
 800df80:	701a      	strb	r2, [r3, #0]
			break;
 800df82:	e000      	b.n	800df86 <EcuM_MainFunction+0x4a>
		default:
			break;
 800df84:	bf00      	nop
	}
}
 800df86:	bf00      	nop
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	2000a504 	.word	0x2000a504

0800df90 <SystemManager_ProcessFault>:
/***********************************************************************************
* Function: SystemManager_ProcessFault										       *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_ProcessFault()
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
	for(uint8 idx = STD_LOW ; idx < 26; idx++)
 800df96:	2300      	movs	r3, #0
 800df98:	71fb      	strb	r3, [r7, #7]
 800df9a:	e070      	b.n	800e07e <SystemManager_ProcessFault+0xee>
	{
		if(SystemManager_Fault[idx] != STD_LOW)
 800df9c:	79fb      	ldrb	r3, [r7, #7]
 800df9e:	4a3c      	ldr	r2, [pc, #240]	; (800e090 <SystemManager_ProcessFault+0x100>)
 800dfa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d067      	beq.n	800e078 <SystemManager_ProcessFault+0xe8>
		{
			if(idx == POWER_ON_RESET)
 800dfa8:	79fb      	ldrb	r3, [r7, #7]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d064      	beq.n	800e078 <SystemManager_ProcessFault+0xe8>
			{
				/* do nothing */
			}
			else if(idx == BROWN_OUT_RESET ||
 800dfae:	79fb      	ldrb	r3, [r7, #7]
 800dfb0:	2b01      	cmp	r3, #1
 800dfb2:	d014      	beq.n	800dfde <SystemManager_ProcessFault+0x4e>
 800dfb4:	79fb      	ldrb	r3, [r7, #7]
 800dfb6:	2b04      	cmp	r3, #4
 800dfb8:	d011      	beq.n	800dfde <SystemManager_ProcessFault+0x4e>
					idx == LOW_POWER_RESET ||
 800dfba:	79fb      	ldrb	r3, [r7, #7]
 800dfbc:	2b06      	cmp	r3, #6
 800dfbe:	d00e      	beq.n	800dfde <SystemManager_ProcessFault+0x4e>
					idx == HARDWARE_RESET ||
 800dfc0:	79fb      	ldrb	r3, [r7, #7]
 800dfc2:	2b07      	cmp	r3, #7
 800dfc4:	d00b      	beq.n	800dfde <SystemManager_ProcessFault+0x4e>
					idx == FLASH_FAULT_RESET ||
 800dfc6:	79fb      	ldrb	r3, [r7, #7]
 800dfc8:	2b08      	cmp	r3, #8
 800dfca:	d008      	beq.n	800dfde <SystemManager_ProcessFault+0x4e>
					idx == NMI_RESET ||
 800dfcc:	79fb      	ldrb	r3, [r7, #7]
 800dfce:	2b09      	cmp	r3, #9
 800dfd0:	d005      	beq.n	800dfde <SystemManager_ProcessFault+0x4e>
					idx == MEMORY_FAULT_RESET ||
 800dfd2:	79fb      	ldrb	r3, [r7, #7]
 800dfd4:	2b0a      	cmp	r3, #10
 800dfd6:	d002      	beq.n	800dfde <SystemManager_ProcessFault+0x4e>
					idx == USAGE_FAULT_RESET ||
 800dfd8:	79fb      	ldrb	r3, [r7, #7]
 800dfda:	2b0b      	cmp	r3, #11
 800dfdc:	d109      	bne.n	800dff2 <SystemManager_ProcessFault+0x62>
					idx == BUS_FAULT_RESET)
			{
				if(SystemManager_Fault[idx] >= 2)
 800dfde:	79fb      	ldrb	r3, [r7, #7]
 800dfe0:	4a2b      	ldr	r2, [pc, #172]	; (800e090 <SystemManager_ProcessFault+0x100>)
 800dfe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d946      	bls.n	800e078 <SystemManager_ProcessFault+0xe8>
				{
					Dem_ReceiveFault(HARDWARE_RESET_DTC_CODE);
 800dfea:	2056      	movs	r0, #86	; 0x56
 800dfec:	f7f5 fd90 	bl	8003b10 <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 2)
 800dff0:	e042      	b.n	800e078 <SystemManager_ProcessFault+0xe8>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == SOFTWARE_RESET ||
 800dff2:	79fb      	ldrb	r3, [r7, #7]
 800dff4:	2b02      	cmp	r3, #2
 800dff6:	d008      	beq.n	800e00a <SystemManager_ProcessFault+0x7a>
 800dff8:	79fb      	ldrb	r3, [r7, #7]
 800dffa:	2b03      	cmp	r3, #3
 800dffc:	d005      	beq.n	800e00a <SystemManager_ProcessFault+0x7a>
					idx == WATCHDOG_RESET ||
 800dffe:	79fb      	ldrb	r3, [r7, #7]
 800e000:	2b0c      	cmp	r3, #12
 800e002:	d002      	beq.n	800e00a <SystemManager_ProcessFault+0x7a>
					idx == STACK_OVERFLOW_RESET ||
 800e004:	79fb      	ldrb	r3, [r7, #7]
 800e006:	2b0d      	cmp	r3, #13
 800e008:	d109      	bne.n	800e01e <SystemManager_ProcessFault+0x8e>
					idx == MALLOC_FAILED_RESET)
			{
				if(SystemManager_Fault[idx] >= 2)
 800e00a:	79fb      	ldrb	r3, [r7, #7]
 800e00c:	4a20      	ldr	r2, [pc, #128]	; (800e090 <SystemManager_ProcessFault+0x100>)
 800e00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e012:	2b01      	cmp	r3, #1
 800e014:	d930      	bls.n	800e078 <SystemManager_ProcessFault+0xe8>
				{
					Dem_ReceiveFault(SOFTWARE_RESET_DTC_CODE);
 800e016:	2035      	movs	r0, #53	; 0x35
 800e018:	f7f5 fd7a 	bl	8003b10 <Dem_ReceiveFault>
				if(SystemManager_Fault[idx] >= 2)
 800e01c:	e02c      	b.n	800e078 <SystemManager_ProcessFault+0xe8>
				else
				{
					/* do nothing */
				}
			}
			else if(idx == ADC_ERROR_INTERNAL ||
 800e01e:	79fb      	ldrb	r3, [r7, #7]
 800e020:	2b0e      	cmp	r3, #14
 800e022:	d020      	beq.n	800e066 <SystemManager_ProcessFault+0xd6>
 800e024:	79fb      	ldrb	r3, [r7, #7]
 800e026:	2b0f      	cmp	r3, #15
 800e028:	d01d      	beq.n	800e066 <SystemManager_ProcessFault+0xd6>
					idx == ADC_ERROR_OVR ||
 800e02a:	79fb      	ldrb	r3, [r7, #7]
 800e02c:	2b10      	cmp	r3, #16
 800e02e:	d01a      	beq.n	800e066 <SystemManager_ProcessFault+0xd6>
					idx == ADC_ERROR_DMA ||
 800e030:	79fb      	ldrb	r3, [r7, #7]
 800e032:	2b11      	cmp	r3, #17
 800e034:	d017      	beq.n	800e066 <SystemManager_ProcessFault+0xd6>
					idx == UART_ERROR_PE ||
 800e036:	79fb      	ldrb	r3, [r7, #7]
 800e038:	2b12      	cmp	r3, #18
 800e03a:	d014      	beq.n	800e066 <SystemManager_ProcessFault+0xd6>
					idx == UART_ERROR_NE ||
 800e03c:	79fb      	ldrb	r3, [r7, #7]
 800e03e:	2b13      	cmp	r3, #19
 800e040:	d011      	beq.n	800e066 <SystemManager_ProcessFault+0xd6>
					idx == UART_ERROR_FE ||
 800e042:	79fb      	ldrb	r3, [r7, #7]
 800e044:	2b14      	cmp	r3, #20
 800e046:	d00e      	beq.n	800e066 <SystemManager_ProcessFault+0xd6>
					idx == UART_ERROR_ORE ||
 800e048:	79fb      	ldrb	r3, [r7, #7]
 800e04a:	2b15      	cmp	r3, #21
 800e04c:	d00b      	beq.n	800e066 <SystemManager_ProcessFault+0xd6>
					idx == UART_ERROR_DMA ||
 800e04e:	79fb      	ldrb	r3, [r7, #7]
 800e050:	2b16      	cmp	r3, #22
 800e052:	d008      	beq.n	800e066 <SystemManager_ProcessFault+0xd6>
					idx == TIMER2_ERROR ||
 800e054:	79fb      	ldrb	r3, [r7, #7]
 800e056:	2b17      	cmp	r3, #23
 800e058:	d005      	beq.n	800e066 <SystemManager_ProcessFault+0xd6>
					idx == TIMER3_ERROR ||
 800e05a:	79fb      	ldrb	r3, [r7, #7]
 800e05c:	2b18      	cmp	r3, #24
 800e05e:	d002      	beq.n	800e066 <SystemManager_ProcessFault+0xd6>
					idx == TIMER4_ERROR ||
 800e060:	79fb      	ldrb	r3, [r7, #7]
 800e062:	2b19      	cmp	r3, #25
 800e064:	d108      	bne.n	800e078 <SystemManager_ProcessFault+0xe8>
					idx == TIMER5_ERROR)
			{
				if(SystemManager_Fault[idx] >= 2)
 800e066:	79fb      	ldrb	r3, [r7, #7]
 800e068:	4a09      	ldr	r2, [pc, #36]	; (800e090 <SystemManager_ProcessFault+0x100>)
 800e06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d902      	bls.n	800e078 <SystemManager_ProcessFault+0xe8>
				{
					Dem_ReceiveFault(PERIPHERAL_ERROR_DTC_CODE);
 800e072:	2099      	movs	r0, #153	; 0x99
 800e074:	f7f5 fd4c 	bl	8003b10 <Dem_ReceiveFault>
	for(uint8 idx = STD_LOW ; idx < 26; idx++)
 800e078:	79fb      	ldrb	r3, [r7, #7]
 800e07a:	3301      	adds	r3, #1
 800e07c:	71fb      	strb	r3, [r7, #7]
 800e07e:	79fb      	ldrb	r3, [r7, #7]
 800e080:	2b19      	cmp	r3, #25
 800e082:	d98b      	bls.n	800df9c <SystemManager_ProcessFault+0xc>
		else
		{
			/* do nothing */
		}
	}
}
 800e084:	bf00      	nop
 800e086:	bf00      	nop
 800e088:	3708      	adds	r7, #8
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	2000a508 	.word	0x2000a508

0800e094 <SystemManager_Init>:
/***********************************************************************************
* Function: SystemManager_Init													   *
* Description: Initialize the system.  		   									   *
************************************************************************************/
VOID SystemManager_Init()
{
 800e094:	b580      	push	{r7, lr}
 800e096:	af00      	add	r7, sp, #0
	/* Perform system initialization sequence. */
	HAL_Init();
 800e098:	f7f5 fdc0 	bl	8003c1c <HAL_Init>
	SystemClock_Config();
 800e09c:	f000 f894 	bl	800e1c8 <SystemClock_Config>
}
 800e0a0:	bf00      	nop
 800e0a2:	bd80      	pop	{r7, pc}

0800e0a4 <SystemManager_DeInit>:
/***********************************************************************************
* Function: SystemManager_DeInit												   *
* Description: De-initialize the system.  		   								   *
************************************************************************************/
VOID SystemManager_DeInit()
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	af00      	add	r7, sp, #0
	HAL_DeInit();
 800e0a8:	f7f5 fdda 	bl	8003c60 <HAL_DeInit>
}
 800e0ac:	bf00      	nop
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <SystemManager_SetFault>:
/***********************************************************************************
* Function: SystemManager_SetFault										   		   *
* Description: Set the fault in the system.		 		   						   *
************************************************************************************/
StdReturnType SystemManager_SetFault(uint8 faultType)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b085      	sub	sp, #20
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	71fb      	strb	r3, [r7, #7]
	/* Store the fault into the data type. */
	for(uint8 index = 0; index < 14; index++)
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	73fb      	strb	r3, [r7, #15]
 800e0be:	e00e      	b.n	800e0de <SystemManager_SetFault+0x2e>
	{
		if(faultType == index)
 800e0c0:	79fa      	ldrb	r2, [r7, #7]
 800e0c2:	7bfb      	ldrb	r3, [r7, #15]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d107      	bne.n	800e0d8 <SystemManager_SetFault+0x28>
		{
			SystemManager_Fault[index]++;
 800e0c8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ca:	4a0a      	ldr	r2, [pc, #40]	; (800e0f4 <SystemManager_SetFault+0x44>)
 800e0cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e0d0:	3201      	adds	r2, #1
 800e0d2:	4908      	ldr	r1, [pc, #32]	; (800e0f4 <SystemManager_SetFault+0x44>)
 800e0d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8 index = 0; index < 14; index++)
 800e0d8:	7bfb      	ldrb	r3, [r7, #15]
 800e0da:	3301      	adds	r3, #1
 800e0dc:	73fb      	strb	r3, [r7, #15]
 800e0de:	7bfb      	ldrb	r3, [r7, #15]
 800e0e0:	2b0d      	cmp	r3, #13
 800e0e2:	d9ed      	bls.n	800e0c0 <SystemManager_SetFault+0x10>
		else
		{
			/* do nothing */
		}
	}
	return E_OK;
 800e0e4:	2300      	movs	r3, #0
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3714      	adds	r7, #20
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop
 800e0f4:	2000a508 	.word	0x2000a508

0800e0f8 <SystemManager_MainFunction>:
/***********************************************************************************
* Function: SystemManager_MainFunction									   		   *
* Description: System main function.									 		   *
************************************************************************************/
VOID SystemManager_MainFunction()
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	af00      	add	r7, sp, #0
	SystemManager_ProcessFault();
 800e0fc:	f7ff ff48 	bl	800df90 <SystemManager_ProcessFault>
}
 800e100:	bf00      	nop
 800e102:	bd80      	pop	{r7, pc}

0800e104 <SystemManager_PerformReset>:
/***********************************************************************************
* Function: SystemManager_PerformReset									   		   *
* Description: Perform system reset.		 		   							   *
************************************************************************************/
VOID SystemManager_PerformReset()
{
 800e104:	b580      	push	{r7, lr}
 800e106:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 800e108:	f7f6 fc29 	bl	800495e <HAL_NVIC_SystemReset>
}
 800e10c:	bf00      	nop
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <MX_NVIC_Init>:
* Function: MX_NVIC_Init													   	   *
* Description: Initialize the nested vector interrupt controller with configured   *
* 			   values.		 		   											   *
************************************************************************************/
VOID MX_NVIC_Init(VOID)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	af00      	add	r7, sp, #0
	/* TIM5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM5_IRQn, 10, 0);
 800e114:	2200      	movs	r2, #0
 800e116:	210a      	movs	r1, #10
 800e118:	2032      	movs	r0, #50	; 0x32
 800e11a:	f7f6 fbe8 	bl	80048ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800e11e:	2032      	movs	r0, #50	; 0x32
 800e120:	f7f6 fc01 	bl	8004926 <HAL_NVIC_EnableIRQ>
	/* RCC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RCC_IRQn, 15, 0);
 800e124:	2200      	movs	r2, #0
 800e126:	210f      	movs	r1, #15
 800e128:	2005      	movs	r0, #5
 800e12a:	f7f6 fbe0 	bl	80048ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RCC_IRQn);
 800e12e:	2005      	movs	r0, #5
 800e130:	f7f6 fbf9 	bl	8004926 <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 15, 0);
 800e134:	2200      	movs	r2, #0
 800e136:	210f      	movs	r1, #15
 800e138:	2012      	movs	r0, #18
 800e13a:	f7f6 fbd8 	bl	80048ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 800e13e:	2012      	movs	r0, #18
 800e140:	f7f6 fbf1 	bl	8004926 <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 800e144:	2200      	movs	r2, #0
 800e146:	210f      	movs	r1, #15
 800e148:	201c      	movs	r0, #28
 800e14a:	f7f6 fbd0 	bl	80048ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800e14e:	201c      	movs	r0, #28
 800e150:	f7f6 fbe9 	bl	8004926 <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 15, 0);
 800e154:	2200      	movs	r2, #0
 800e156:	210f      	movs	r1, #15
 800e158:	201d      	movs	r0, #29
 800e15a:	f7f6 fbc8 	bl	80048ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800e15e:	201d      	movs	r0, #29
 800e160:	f7f6 fbe1 	bl	8004926 <HAL_NVIC_EnableIRQ>
	/* TIM4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM4_IRQn, 15, 0);
 800e164:	2200      	movs	r2, #0
 800e166:	210f      	movs	r1, #15
 800e168:	201e      	movs	r0, #30
 800e16a:	f7f6 fbc0 	bl	80048ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800e16e:	201e      	movs	r0, #30
 800e170:	f7f6 fbd9 	bl	8004926 <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 800e174:	2200      	movs	r2, #0
 800e176:	210f      	movs	r1, #15
 800e178:	2025      	movs	r0, #37	; 0x25
 800e17a:	f7f6 fbb8 	bl	80048ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e17e:	2025      	movs	r0, #37	; 0x25
 800e180:	f7f6 fbd1 	bl	8004926 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 0);
 800e184:	2200      	movs	r2, #0
 800e186:	210a      	movs	r1, #10
 800e188:	2038      	movs	r0, #56	; 0x38
 800e18a:	f7f6 fbb0 	bl	80048ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800e18e:	2038      	movs	r0, #56	; 0x38
 800e190:	f7f6 fbc9 	bl	8004926 <HAL_NVIC_EnableIRQ>
	/* FLASH_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FLASH_IRQn, 10, 0);
 800e194:	2200      	movs	r2, #0
 800e196:	210a      	movs	r1, #10
 800e198:	2004      	movs	r0, #4
 800e19a:	f7f6 fba8 	bl	80048ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800e19e:	2004      	movs	r0, #4
 800e1a0:	f7f6 fbc1 	bl	8004926 <HAL_NVIC_EnableIRQ>
	/* PVD_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PVD_IRQn, 10, 0);
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	210a      	movs	r1, #10
 800e1a8:	2001      	movs	r0, #1
 800e1aa:	f7f6 fba0 	bl	80048ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(PVD_IRQn);
 800e1ae:	2001      	movs	r0, #1
 800e1b0:	f7f6 fbb9 	bl	8004926 <HAL_NVIC_EnableIRQ>
	/* FPU_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FPU_IRQn, 10, 0);
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	210a      	movs	r1, #10
 800e1b8:	2051      	movs	r0, #81	; 0x51
 800e1ba:	f7f6 fb98 	bl	80048ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FPU_IRQn);
 800e1be:	2051      	movs	r0, #81	; 0x51
 800e1c0:	f7f6 fbb1 	bl	8004926 <HAL_NVIC_EnableIRQ>
}
 800e1c4:	bf00      	nop
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <SystemClock_Config>:
/***********************************************************************************
* Function: SystemClock_Config													   *
* Description: Initialize the system clock.		 		   						   *
************************************************************************************/
VOID SystemClock_Config(VOID)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b094      	sub	sp, #80	; 0x50
 800e1cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e1ce:	f107 0320 	add.w	r3, r7, #32
 800e1d2:	2230      	movs	r2, #48	; 0x30
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f000 f8ca 	bl	800e370 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e1dc:	f107 030c 	add.w	r3, r7, #12
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	601a      	str	r2, [r3, #0]
 800e1e4:	605a      	str	r2, [r3, #4]
 800e1e6:	609a      	str	r2, [r3, #8]
 800e1e8:	60da      	str	r2, [r3, #12]
 800e1ea:	611a      	str	r2, [r3, #16]
	__HAL_RCC_PWR_CLK_ENABLE();
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	60bb      	str	r3, [r7, #8]
 800e1f0:	4b28      	ldr	r3, [pc, #160]	; (800e294 <SystemClock_Config+0xcc>)
 800e1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1f4:	4a27      	ldr	r2, [pc, #156]	; (800e294 <SystemClock_Config+0xcc>)
 800e1f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e1fa:	6413      	str	r3, [r2, #64]	; 0x40
 800e1fc:	4b25      	ldr	r3, [pc, #148]	; (800e294 <SystemClock_Config+0xcc>)
 800e1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e204:	60bb      	str	r3, [r7, #8]
 800e206:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e208:	2300      	movs	r3, #0
 800e20a:	607b      	str	r3, [r7, #4]
 800e20c:	4b22      	ldr	r3, [pc, #136]	; (800e298 <SystemClock_Config+0xd0>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4a21      	ldr	r2, [pc, #132]	; (800e298 <SystemClock_Config+0xd0>)
 800e212:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e216:	6013      	str	r3, [r2, #0]
 800e218:	4b1f      	ldr	r3, [pc, #124]	; (800e298 <SystemClock_Config+0xd0>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e220:	607b      	str	r3, [r7, #4]
 800e222:	687b      	ldr	r3, [r7, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800e224:	2309      	movs	r3, #9
 800e226:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800e228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e22c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800e22e:	2301      	movs	r3, #1
 800e230:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e232:	2302      	movs	r3, #2
 800e234:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e236:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e23a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800e23c:	2304      	movs	r3, #4
 800e23e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 800e240:	2364      	movs	r3, #100	; 0x64
 800e242:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e244:	2302      	movs	r3, #2
 800e246:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800e248:	2304      	movs	r3, #4
 800e24a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e24c:	f107 0320 	add.w	r3, r7, #32
 800e250:	4618      	mov	r0, r3
 800e252:	f7f7 fd25 	bl	8005ca0 <HAL_RCC_OscConfig>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d001      	beq.n	800e260 <SystemClock_Config+0x98>
	{
		Error_Handler();
 800e25c:	f000 f81e 	bl	800e29c <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800e260:	230f      	movs	r3, #15
 800e262:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e264:	2302      	movs	r3, #2
 800e266:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e268:	2300      	movs	r3, #0
 800e26a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800e26c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e270:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800e272:	2300      	movs	r3, #0
 800e274:	61fb      	str	r3, [r7, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800e276:	f107 030c 	add.w	r3, r7, #12
 800e27a:	2103      	movs	r1, #3
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7f7 ff87 	bl	8006190 <HAL_RCC_ClockConfig>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d001      	beq.n	800e28c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 800e288:	f000 f808 	bl	800e29c <Error_Handler>
	}
	else
	{
		/* do nothing */
	}
}
 800e28c:	bf00      	nop
 800e28e:	3750      	adds	r7, #80	; 0x50
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	40023800 	.word	0x40023800
 800e298:	40007000 	.word	0x40007000

0800e29c <Error_Handler>:
/***********************************************************************************
* Function: Error_Handler													   	   *
* Description: Perform system reset in case of system fault.			 		   *
************************************************************************************/
VOID Error_Handler(VOID)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800e2a0:	b672      	cpsid	i
}
 800e2a2:	bf00      	nop
	__disable_irq();
	SystemManager_PerformReset();
 800e2a4:	f7ff ff2e 	bl	800e104 <SystemManager_PerformReset>
	while (1)
 800e2a8:	e7fe      	b.n	800e2a8 <Error_Handler+0xc>
	...

0800e2ac <Watchdog_Init>:
/***********************************************************************************
* Function: Watchdog_Init									   		       		   *
* Description: Peripheral initialization.							 		   	   *
************************************************************************************/
StdReturnType Watchdog_Init()
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	af00      	add	r7, sp, #0
	hiwdg.Instance = IWDG;
 800e2b0:	4b09      	ldr	r3, [pc, #36]	; (800e2d8 <Watchdog_Init+0x2c>)
 800e2b2:	4a0a      	ldr	r2, [pc, #40]	; (800e2dc <Watchdog_Init+0x30>)
 800e2b4:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 800e2b6:	4b08      	ldr	r3, [pc, #32]	; (800e2d8 <Watchdog_Init+0x2c>)
 800e2b8:	2205      	movs	r2, #5
 800e2ba:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 50;
 800e2bc:	4b06      	ldr	r3, [pc, #24]	; (800e2d8 <Watchdog_Init+0x2c>)
 800e2be:	2232      	movs	r2, #50	; 0x32
 800e2c0:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800e2c2:	4805      	ldr	r0, [pc, #20]	; (800e2d8 <Watchdog_Init+0x2c>)
 800e2c4:	f7f7 fc7f 	bl	8005bc6 <HAL_IWDG_Init>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d001      	beq.n	800e2d2 <Watchdog_Init+0x26>
	{
		Error_Handler();
 800e2ce:	f7ff ffe5 	bl	800e29c <Error_Handler>
	}
	return E_OK;
 800e2d2:	2300      	movs	r3, #0
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	20000288 	.word	0x20000288
 800e2dc:	40003000 	.word	0x40003000

0800e2e0 <Watchdog_MainFunction>:
/***********************************************************************************
* Function: Watchdog_MainFunction									   		       *
* Description: Peripheral main function.							 		       *
************************************************************************************/
VOID Watchdog_MainFunction()
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 800e2e4:	4802      	ldr	r0, [pc, #8]	; (800e2f0 <Watchdog_MainFunction+0x10>)
 800e2e6:	f7f7 fcb0 	bl	8005c4a <HAL_IWDG_Refresh>
}
 800e2ea:	bf00      	nop
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	20000288 	.word	0x20000288

0800e2f4 <atoi>:
 800e2f4:	220a      	movs	r2, #10
 800e2f6:	2100      	movs	r1, #0
 800e2f8:	f000 b92e 	b.w	800e558 <strtol>

0800e2fc <__errno>:
 800e2fc:	4b01      	ldr	r3, [pc, #4]	; (800e304 <__errno+0x8>)
 800e2fe:	6818      	ldr	r0, [r3, #0]
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop
 800e304:	2000002c 	.word	0x2000002c

0800e308 <__libc_init_array>:
 800e308:	b570      	push	{r4, r5, r6, lr}
 800e30a:	4d0d      	ldr	r5, [pc, #52]	; (800e340 <__libc_init_array+0x38>)
 800e30c:	4c0d      	ldr	r4, [pc, #52]	; (800e344 <__libc_init_array+0x3c>)
 800e30e:	1b64      	subs	r4, r4, r5
 800e310:	10a4      	asrs	r4, r4, #2
 800e312:	2600      	movs	r6, #0
 800e314:	42a6      	cmp	r6, r4
 800e316:	d109      	bne.n	800e32c <__libc_init_array+0x24>
 800e318:	4d0b      	ldr	r5, [pc, #44]	; (800e348 <__libc_init_array+0x40>)
 800e31a:	4c0c      	ldr	r4, [pc, #48]	; (800e34c <__libc_init_array+0x44>)
 800e31c:	f000 f97e 	bl	800e61c <_init>
 800e320:	1b64      	subs	r4, r4, r5
 800e322:	10a4      	asrs	r4, r4, #2
 800e324:	2600      	movs	r6, #0
 800e326:	42a6      	cmp	r6, r4
 800e328:	d105      	bne.n	800e336 <__libc_init_array+0x2e>
 800e32a:	bd70      	pop	{r4, r5, r6, pc}
 800e32c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e330:	4798      	blx	r3
 800e332:	3601      	adds	r6, #1
 800e334:	e7ee      	b.n	800e314 <__libc_init_array+0xc>
 800e336:	f855 3b04 	ldr.w	r3, [r5], #4
 800e33a:	4798      	blx	r3
 800e33c:	3601      	adds	r6, #1
 800e33e:	e7f2      	b.n	800e326 <__libc_init_array+0x1e>
 800e340:	0800ec44 	.word	0x0800ec44
 800e344:	0800ec44 	.word	0x0800ec44
 800e348:	0800ec44 	.word	0x0800ec44
 800e34c:	0800ec48 	.word	0x0800ec48

0800e350 <__retarget_lock_acquire_recursive>:
 800e350:	4770      	bx	lr

0800e352 <__retarget_lock_release_recursive>:
 800e352:	4770      	bx	lr

0800e354 <memcpy>:
 800e354:	440a      	add	r2, r1
 800e356:	4291      	cmp	r1, r2
 800e358:	f100 33ff 	add.w	r3, r0, #4294967295
 800e35c:	d100      	bne.n	800e360 <memcpy+0xc>
 800e35e:	4770      	bx	lr
 800e360:	b510      	push	{r4, lr}
 800e362:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e36a:	4291      	cmp	r1, r2
 800e36c:	d1f9      	bne.n	800e362 <memcpy+0xe>
 800e36e:	bd10      	pop	{r4, pc}

0800e370 <memset>:
 800e370:	4402      	add	r2, r0
 800e372:	4603      	mov	r3, r0
 800e374:	4293      	cmp	r3, r2
 800e376:	d100      	bne.n	800e37a <memset+0xa>
 800e378:	4770      	bx	lr
 800e37a:	f803 1b01 	strb.w	r1, [r3], #1
 800e37e:	e7f9      	b.n	800e374 <memset+0x4>

0800e380 <cleanup_glue>:
 800e380:	b538      	push	{r3, r4, r5, lr}
 800e382:	460c      	mov	r4, r1
 800e384:	6809      	ldr	r1, [r1, #0]
 800e386:	4605      	mov	r5, r0
 800e388:	b109      	cbz	r1, 800e38e <cleanup_glue+0xe>
 800e38a:	f7ff fff9 	bl	800e380 <cleanup_glue>
 800e38e:	4621      	mov	r1, r4
 800e390:	4628      	mov	r0, r5
 800e392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e396:	f000 b8f5 	b.w	800e584 <_free_r>
	...

0800e39c <_reclaim_reent>:
 800e39c:	4b2c      	ldr	r3, [pc, #176]	; (800e450 <_reclaim_reent+0xb4>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4283      	cmp	r3, r0
 800e3a2:	b570      	push	{r4, r5, r6, lr}
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	d051      	beq.n	800e44c <_reclaim_reent+0xb0>
 800e3a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e3aa:	b143      	cbz	r3, 800e3be <_reclaim_reent+0x22>
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d14a      	bne.n	800e448 <_reclaim_reent+0xac>
 800e3b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3b4:	6819      	ldr	r1, [r3, #0]
 800e3b6:	b111      	cbz	r1, 800e3be <_reclaim_reent+0x22>
 800e3b8:	4620      	mov	r0, r4
 800e3ba:	f000 f8e3 	bl	800e584 <_free_r>
 800e3be:	6961      	ldr	r1, [r4, #20]
 800e3c0:	b111      	cbz	r1, 800e3c8 <_reclaim_reent+0x2c>
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	f000 f8de 	bl	800e584 <_free_r>
 800e3c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e3ca:	b111      	cbz	r1, 800e3d2 <_reclaim_reent+0x36>
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f000 f8d9 	bl	800e584 <_free_r>
 800e3d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e3d4:	b111      	cbz	r1, 800e3dc <_reclaim_reent+0x40>
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	f000 f8d4 	bl	800e584 <_free_r>
 800e3dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e3de:	b111      	cbz	r1, 800e3e6 <_reclaim_reent+0x4a>
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	f000 f8cf 	bl	800e584 <_free_r>
 800e3e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e3e8:	b111      	cbz	r1, 800e3f0 <_reclaim_reent+0x54>
 800e3ea:	4620      	mov	r0, r4
 800e3ec:	f000 f8ca 	bl	800e584 <_free_r>
 800e3f0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e3f2:	b111      	cbz	r1, 800e3fa <_reclaim_reent+0x5e>
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	f000 f8c5 	bl	800e584 <_free_r>
 800e3fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e3fc:	b111      	cbz	r1, 800e404 <_reclaim_reent+0x68>
 800e3fe:	4620      	mov	r0, r4
 800e400:	f000 f8c0 	bl	800e584 <_free_r>
 800e404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e406:	b111      	cbz	r1, 800e40e <_reclaim_reent+0x72>
 800e408:	4620      	mov	r0, r4
 800e40a:	f000 f8bb 	bl	800e584 <_free_r>
 800e40e:	69a3      	ldr	r3, [r4, #24]
 800e410:	b1e3      	cbz	r3, 800e44c <_reclaim_reent+0xb0>
 800e412:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e414:	4620      	mov	r0, r4
 800e416:	4798      	blx	r3
 800e418:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e41a:	b1b9      	cbz	r1, 800e44c <_reclaim_reent+0xb0>
 800e41c:	4620      	mov	r0, r4
 800e41e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e422:	f7ff bfad 	b.w	800e380 <cleanup_glue>
 800e426:	5949      	ldr	r1, [r1, r5]
 800e428:	b941      	cbnz	r1, 800e43c <_reclaim_reent+0xa0>
 800e42a:	3504      	adds	r5, #4
 800e42c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e42e:	2d80      	cmp	r5, #128	; 0x80
 800e430:	68d9      	ldr	r1, [r3, #12]
 800e432:	d1f8      	bne.n	800e426 <_reclaim_reent+0x8a>
 800e434:	4620      	mov	r0, r4
 800e436:	f000 f8a5 	bl	800e584 <_free_r>
 800e43a:	e7ba      	b.n	800e3b2 <_reclaim_reent+0x16>
 800e43c:	680e      	ldr	r6, [r1, #0]
 800e43e:	4620      	mov	r0, r4
 800e440:	f000 f8a0 	bl	800e584 <_free_r>
 800e444:	4631      	mov	r1, r6
 800e446:	e7ef      	b.n	800e428 <_reclaim_reent+0x8c>
 800e448:	2500      	movs	r5, #0
 800e44a:	e7ef      	b.n	800e42c <_reclaim_reent+0x90>
 800e44c:	bd70      	pop	{r4, r5, r6, pc}
 800e44e:	bf00      	nop
 800e450:	2000002c 	.word	0x2000002c

0800e454 <_strtol_l.constprop.0>:
 800e454:	2b01      	cmp	r3, #1
 800e456:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e45a:	d001      	beq.n	800e460 <_strtol_l.constprop.0+0xc>
 800e45c:	2b24      	cmp	r3, #36	; 0x24
 800e45e:	d906      	bls.n	800e46e <_strtol_l.constprop.0+0x1a>
 800e460:	f7ff ff4c 	bl	800e2fc <__errno>
 800e464:	2316      	movs	r3, #22
 800e466:	6003      	str	r3, [r0, #0]
 800e468:	2000      	movs	r0, #0
 800e46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e46e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e554 <_strtol_l.constprop.0+0x100>
 800e472:	460d      	mov	r5, r1
 800e474:	462e      	mov	r6, r5
 800e476:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e47a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e47e:	f017 0708 	ands.w	r7, r7, #8
 800e482:	d1f7      	bne.n	800e474 <_strtol_l.constprop.0+0x20>
 800e484:	2c2d      	cmp	r4, #45	; 0x2d
 800e486:	d132      	bne.n	800e4ee <_strtol_l.constprop.0+0x9a>
 800e488:	782c      	ldrb	r4, [r5, #0]
 800e48a:	2701      	movs	r7, #1
 800e48c:	1cb5      	adds	r5, r6, #2
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d05b      	beq.n	800e54a <_strtol_l.constprop.0+0xf6>
 800e492:	2b10      	cmp	r3, #16
 800e494:	d109      	bne.n	800e4aa <_strtol_l.constprop.0+0x56>
 800e496:	2c30      	cmp	r4, #48	; 0x30
 800e498:	d107      	bne.n	800e4aa <_strtol_l.constprop.0+0x56>
 800e49a:	782c      	ldrb	r4, [r5, #0]
 800e49c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e4a0:	2c58      	cmp	r4, #88	; 0x58
 800e4a2:	d14d      	bne.n	800e540 <_strtol_l.constprop.0+0xec>
 800e4a4:	786c      	ldrb	r4, [r5, #1]
 800e4a6:	2310      	movs	r3, #16
 800e4a8:	3502      	adds	r5, #2
 800e4aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e4ae:	f108 38ff 	add.w	r8, r8, #4294967295
 800e4b2:	f04f 0c00 	mov.w	ip, #0
 800e4b6:	fbb8 f9f3 	udiv	r9, r8, r3
 800e4ba:	4666      	mov	r6, ip
 800e4bc:	fb03 8a19 	mls	sl, r3, r9, r8
 800e4c0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e4c4:	f1be 0f09 	cmp.w	lr, #9
 800e4c8:	d816      	bhi.n	800e4f8 <_strtol_l.constprop.0+0xa4>
 800e4ca:	4674      	mov	r4, lr
 800e4cc:	42a3      	cmp	r3, r4
 800e4ce:	dd24      	ble.n	800e51a <_strtol_l.constprop.0+0xc6>
 800e4d0:	f1bc 0f00 	cmp.w	ip, #0
 800e4d4:	db1e      	blt.n	800e514 <_strtol_l.constprop.0+0xc0>
 800e4d6:	45b1      	cmp	r9, r6
 800e4d8:	d31c      	bcc.n	800e514 <_strtol_l.constprop.0+0xc0>
 800e4da:	d101      	bne.n	800e4e0 <_strtol_l.constprop.0+0x8c>
 800e4dc:	45a2      	cmp	sl, r4
 800e4de:	db19      	blt.n	800e514 <_strtol_l.constprop.0+0xc0>
 800e4e0:	fb06 4603 	mla	r6, r6, r3, r4
 800e4e4:	f04f 0c01 	mov.w	ip, #1
 800e4e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e4ec:	e7e8      	b.n	800e4c0 <_strtol_l.constprop.0+0x6c>
 800e4ee:	2c2b      	cmp	r4, #43	; 0x2b
 800e4f0:	bf04      	itt	eq
 800e4f2:	782c      	ldrbeq	r4, [r5, #0]
 800e4f4:	1cb5      	addeq	r5, r6, #2
 800e4f6:	e7ca      	b.n	800e48e <_strtol_l.constprop.0+0x3a>
 800e4f8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e4fc:	f1be 0f19 	cmp.w	lr, #25
 800e500:	d801      	bhi.n	800e506 <_strtol_l.constprop.0+0xb2>
 800e502:	3c37      	subs	r4, #55	; 0x37
 800e504:	e7e2      	b.n	800e4cc <_strtol_l.constprop.0+0x78>
 800e506:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e50a:	f1be 0f19 	cmp.w	lr, #25
 800e50e:	d804      	bhi.n	800e51a <_strtol_l.constprop.0+0xc6>
 800e510:	3c57      	subs	r4, #87	; 0x57
 800e512:	e7db      	b.n	800e4cc <_strtol_l.constprop.0+0x78>
 800e514:	f04f 3cff 	mov.w	ip, #4294967295
 800e518:	e7e6      	b.n	800e4e8 <_strtol_l.constprop.0+0x94>
 800e51a:	f1bc 0f00 	cmp.w	ip, #0
 800e51e:	da05      	bge.n	800e52c <_strtol_l.constprop.0+0xd8>
 800e520:	2322      	movs	r3, #34	; 0x22
 800e522:	6003      	str	r3, [r0, #0]
 800e524:	4646      	mov	r6, r8
 800e526:	b942      	cbnz	r2, 800e53a <_strtol_l.constprop.0+0xe6>
 800e528:	4630      	mov	r0, r6
 800e52a:	e79e      	b.n	800e46a <_strtol_l.constprop.0+0x16>
 800e52c:	b107      	cbz	r7, 800e530 <_strtol_l.constprop.0+0xdc>
 800e52e:	4276      	negs	r6, r6
 800e530:	2a00      	cmp	r2, #0
 800e532:	d0f9      	beq.n	800e528 <_strtol_l.constprop.0+0xd4>
 800e534:	f1bc 0f00 	cmp.w	ip, #0
 800e538:	d000      	beq.n	800e53c <_strtol_l.constprop.0+0xe8>
 800e53a:	1e69      	subs	r1, r5, #1
 800e53c:	6011      	str	r1, [r2, #0]
 800e53e:	e7f3      	b.n	800e528 <_strtol_l.constprop.0+0xd4>
 800e540:	2430      	movs	r4, #48	; 0x30
 800e542:	2b00      	cmp	r3, #0
 800e544:	d1b1      	bne.n	800e4aa <_strtol_l.constprop.0+0x56>
 800e546:	2308      	movs	r3, #8
 800e548:	e7af      	b.n	800e4aa <_strtol_l.constprop.0+0x56>
 800e54a:	2c30      	cmp	r4, #48	; 0x30
 800e54c:	d0a5      	beq.n	800e49a <_strtol_l.constprop.0+0x46>
 800e54e:	230a      	movs	r3, #10
 800e550:	e7ab      	b.n	800e4aa <_strtol_l.constprop.0+0x56>
 800e552:	bf00      	nop
 800e554:	0800eb39 	.word	0x0800eb39

0800e558 <strtol>:
 800e558:	4613      	mov	r3, r2
 800e55a:	460a      	mov	r2, r1
 800e55c:	4601      	mov	r1, r0
 800e55e:	4802      	ldr	r0, [pc, #8]	; (800e568 <strtol+0x10>)
 800e560:	6800      	ldr	r0, [r0, #0]
 800e562:	f7ff bf77 	b.w	800e454 <_strtol_l.constprop.0>
 800e566:	bf00      	nop
 800e568:	2000002c 	.word	0x2000002c

0800e56c <__malloc_lock>:
 800e56c:	4801      	ldr	r0, [pc, #4]	; (800e574 <__malloc_lock+0x8>)
 800e56e:	f7ff beef 	b.w	800e350 <__retarget_lock_acquire_recursive>
 800e572:	bf00      	nop
 800e574:	2000a570 	.word	0x2000a570

0800e578 <__malloc_unlock>:
 800e578:	4801      	ldr	r0, [pc, #4]	; (800e580 <__malloc_unlock+0x8>)
 800e57a:	f7ff beea 	b.w	800e352 <__retarget_lock_release_recursive>
 800e57e:	bf00      	nop
 800e580:	2000a570 	.word	0x2000a570

0800e584 <_free_r>:
 800e584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e586:	2900      	cmp	r1, #0
 800e588:	d044      	beq.n	800e614 <_free_r+0x90>
 800e58a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e58e:	9001      	str	r0, [sp, #4]
 800e590:	2b00      	cmp	r3, #0
 800e592:	f1a1 0404 	sub.w	r4, r1, #4
 800e596:	bfb8      	it	lt
 800e598:	18e4      	addlt	r4, r4, r3
 800e59a:	f7ff ffe7 	bl	800e56c <__malloc_lock>
 800e59e:	4a1e      	ldr	r2, [pc, #120]	; (800e618 <_free_r+0x94>)
 800e5a0:	9801      	ldr	r0, [sp, #4]
 800e5a2:	6813      	ldr	r3, [r2, #0]
 800e5a4:	b933      	cbnz	r3, 800e5b4 <_free_r+0x30>
 800e5a6:	6063      	str	r3, [r4, #4]
 800e5a8:	6014      	str	r4, [r2, #0]
 800e5aa:	b003      	add	sp, #12
 800e5ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e5b0:	f7ff bfe2 	b.w	800e578 <__malloc_unlock>
 800e5b4:	42a3      	cmp	r3, r4
 800e5b6:	d908      	bls.n	800e5ca <_free_r+0x46>
 800e5b8:	6825      	ldr	r5, [r4, #0]
 800e5ba:	1961      	adds	r1, r4, r5
 800e5bc:	428b      	cmp	r3, r1
 800e5be:	bf01      	itttt	eq
 800e5c0:	6819      	ldreq	r1, [r3, #0]
 800e5c2:	685b      	ldreq	r3, [r3, #4]
 800e5c4:	1949      	addeq	r1, r1, r5
 800e5c6:	6021      	streq	r1, [r4, #0]
 800e5c8:	e7ed      	b.n	800e5a6 <_free_r+0x22>
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	b10b      	cbz	r3, 800e5d4 <_free_r+0x50>
 800e5d0:	42a3      	cmp	r3, r4
 800e5d2:	d9fa      	bls.n	800e5ca <_free_r+0x46>
 800e5d4:	6811      	ldr	r1, [r2, #0]
 800e5d6:	1855      	adds	r5, r2, r1
 800e5d8:	42a5      	cmp	r5, r4
 800e5da:	d10b      	bne.n	800e5f4 <_free_r+0x70>
 800e5dc:	6824      	ldr	r4, [r4, #0]
 800e5de:	4421      	add	r1, r4
 800e5e0:	1854      	adds	r4, r2, r1
 800e5e2:	42a3      	cmp	r3, r4
 800e5e4:	6011      	str	r1, [r2, #0]
 800e5e6:	d1e0      	bne.n	800e5aa <_free_r+0x26>
 800e5e8:	681c      	ldr	r4, [r3, #0]
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	6053      	str	r3, [r2, #4]
 800e5ee:	4421      	add	r1, r4
 800e5f0:	6011      	str	r1, [r2, #0]
 800e5f2:	e7da      	b.n	800e5aa <_free_r+0x26>
 800e5f4:	d902      	bls.n	800e5fc <_free_r+0x78>
 800e5f6:	230c      	movs	r3, #12
 800e5f8:	6003      	str	r3, [r0, #0]
 800e5fa:	e7d6      	b.n	800e5aa <_free_r+0x26>
 800e5fc:	6825      	ldr	r5, [r4, #0]
 800e5fe:	1961      	adds	r1, r4, r5
 800e600:	428b      	cmp	r3, r1
 800e602:	bf04      	itt	eq
 800e604:	6819      	ldreq	r1, [r3, #0]
 800e606:	685b      	ldreq	r3, [r3, #4]
 800e608:	6063      	str	r3, [r4, #4]
 800e60a:	bf04      	itt	eq
 800e60c:	1949      	addeq	r1, r1, r5
 800e60e:	6021      	streq	r1, [r4, #0]
 800e610:	6054      	str	r4, [r2, #4]
 800e612:	e7ca      	b.n	800e5aa <_free_r+0x26>
 800e614:	b003      	add	sp, #12
 800e616:	bd30      	pop	{r4, r5, pc}
 800e618:	2000a574 	.word	0x2000a574

0800e61c <_init>:
 800e61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e61e:	bf00      	nop
 800e620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e622:	bc08      	pop	{r3}
 800e624:	469e      	mov	lr, r3
 800e626:	4770      	bx	lr

0800e628 <_fini>:
 800e628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e62a:	bf00      	nop
 800e62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e62e:	bc08      	pop	{r3}
 800e630:	469e      	mov	lr, r3
 800e632:	4770      	bx	lr
